
mainboard-usb2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00021334  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000f58  080214c8  080214c8  000224c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08022420  08022420  000242c8  2**0
                  CONTENTS
  4 .ARM          00000008  08022420  08022420  00023420  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08022428  08022428  000242c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08022428  08022428  00023428  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0802242c  0802242c  0002342c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002c8  20000000  08022430  00024000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000bb28  200002c8  080226f8  000242c8  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  2000bdf0  080226f8  00024df0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000242c8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0008773d  00000000  00000000  000242f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000acc8  00000000  00000000  000aba35  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002d30  00000000  00000000  000b6700  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000022b8  00000000  00000000  000b9430  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00033c92  00000000  00000000  000bb6e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00048eb9  00000000  00000000  000ef37a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000faf6d  00000000  00000000  00138233  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  002331a0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000d0c8  00000000  00000000  002331e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007a  00000000  00000000  002402ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200002c8 	.word	0x200002c8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080214ac 	.word	0x080214ac

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200002cc 	.word	0x200002cc
 80001cc:	080214ac 	.word	0x080214ac

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_frsub>:
 8000c88:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000c8c:	e002      	b.n	8000c94 <__addsf3>
 8000c8e:	bf00      	nop

08000c90 <__aeabi_fsub>:
 8000c90:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000c94 <__addsf3>:
 8000c94:	0042      	lsls	r2, r0, #1
 8000c96:	bf1f      	itttt	ne
 8000c98:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000c9c:	ea92 0f03 	teqne	r2, r3
 8000ca0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000ca4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ca8:	d06a      	beq.n	8000d80 <__addsf3+0xec>
 8000caa:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000cae:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000cb2:	bfc1      	itttt	gt
 8000cb4:	18d2      	addgt	r2, r2, r3
 8000cb6:	4041      	eorgt	r1, r0
 8000cb8:	4048      	eorgt	r0, r1
 8000cba:	4041      	eorgt	r1, r0
 8000cbc:	bfb8      	it	lt
 8000cbe:	425b      	neglt	r3, r3
 8000cc0:	2b19      	cmp	r3, #25
 8000cc2:	bf88      	it	hi
 8000cc4:	4770      	bxhi	lr
 8000cc6:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000cca:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cce:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000cd2:	bf18      	it	ne
 8000cd4:	4240      	negne	r0, r0
 8000cd6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000cda:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000cde:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000ce2:	bf18      	it	ne
 8000ce4:	4249      	negne	r1, r1
 8000ce6:	ea92 0f03 	teq	r2, r3
 8000cea:	d03f      	beq.n	8000d6c <__addsf3+0xd8>
 8000cec:	f1a2 0201 	sub.w	r2, r2, #1
 8000cf0:	fa41 fc03 	asr.w	ip, r1, r3
 8000cf4:	eb10 000c 	adds.w	r0, r0, ip
 8000cf8:	f1c3 0320 	rsb	r3, r3, #32
 8000cfc:	fa01 f103 	lsl.w	r1, r1, r3
 8000d00:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000d04:	d502      	bpl.n	8000d0c <__addsf3+0x78>
 8000d06:	4249      	negs	r1, r1
 8000d08:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000d0c:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000d10:	d313      	bcc.n	8000d3a <__addsf3+0xa6>
 8000d12:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000d16:	d306      	bcc.n	8000d26 <__addsf3+0x92>
 8000d18:	0840      	lsrs	r0, r0, #1
 8000d1a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000d1e:	f102 0201 	add.w	r2, r2, #1
 8000d22:	2afe      	cmp	r2, #254	@ 0xfe
 8000d24:	d251      	bcs.n	8000dca <__addsf3+0x136>
 8000d26:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000d2a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d2e:	bf08      	it	eq
 8000d30:	f020 0001 	biceq.w	r0, r0, #1
 8000d34:	ea40 0003 	orr.w	r0, r0, r3
 8000d38:	4770      	bx	lr
 8000d3a:	0049      	lsls	r1, r1, #1
 8000d3c:	eb40 0000 	adc.w	r0, r0, r0
 8000d40:	3a01      	subs	r2, #1
 8000d42:	bf28      	it	cs
 8000d44:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000d48:	d2ed      	bcs.n	8000d26 <__addsf3+0x92>
 8000d4a:	fab0 fc80 	clz	ip, r0
 8000d4e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000d52:	ebb2 020c 	subs.w	r2, r2, ip
 8000d56:	fa00 f00c 	lsl.w	r0, r0, ip
 8000d5a:	bfaa      	itet	ge
 8000d5c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000d60:	4252      	neglt	r2, r2
 8000d62:	4318      	orrge	r0, r3
 8000d64:	bfbc      	itt	lt
 8000d66:	40d0      	lsrlt	r0, r2
 8000d68:	4318      	orrlt	r0, r3
 8000d6a:	4770      	bx	lr
 8000d6c:	f092 0f00 	teq	r2, #0
 8000d70:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000d74:	bf06      	itte	eq
 8000d76:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000d7a:	3201      	addeq	r2, #1
 8000d7c:	3b01      	subne	r3, #1
 8000d7e:	e7b5      	b.n	8000cec <__addsf3+0x58>
 8000d80:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000d84:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000d88:	bf18      	it	ne
 8000d8a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000d8e:	d021      	beq.n	8000dd4 <__addsf3+0x140>
 8000d90:	ea92 0f03 	teq	r2, r3
 8000d94:	d004      	beq.n	8000da0 <__addsf3+0x10c>
 8000d96:	f092 0f00 	teq	r2, #0
 8000d9a:	bf08      	it	eq
 8000d9c:	4608      	moveq	r0, r1
 8000d9e:	4770      	bx	lr
 8000da0:	ea90 0f01 	teq	r0, r1
 8000da4:	bf1c      	itt	ne
 8000da6:	2000      	movne	r0, #0
 8000da8:	4770      	bxne	lr
 8000daa:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000dae:	d104      	bne.n	8000dba <__addsf3+0x126>
 8000db0:	0040      	lsls	r0, r0, #1
 8000db2:	bf28      	it	cs
 8000db4:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000db8:	4770      	bx	lr
 8000dba:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000dbe:	bf3c      	itt	cc
 8000dc0:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000dc4:	4770      	bxcc	lr
 8000dc6:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000dca:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000dce:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000dd2:	4770      	bx	lr
 8000dd4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000dd8:	bf16      	itet	ne
 8000dda:	4608      	movne	r0, r1
 8000ddc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000de0:	4601      	movne	r1, r0
 8000de2:	0242      	lsls	r2, r0, #9
 8000de4:	bf06      	itte	eq
 8000de6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000dea:	ea90 0f01 	teqeq	r0, r1
 8000dee:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000df2:	4770      	bx	lr

08000df4 <__aeabi_ui2f>:
 8000df4:	f04f 0300 	mov.w	r3, #0
 8000df8:	e004      	b.n	8000e04 <__aeabi_i2f+0x8>
 8000dfa:	bf00      	nop

08000dfc <__aeabi_i2f>:
 8000dfc:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000e00:	bf48      	it	mi
 8000e02:	4240      	negmi	r0, r0
 8000e04:	ea5f 0c00 	movs.w	ip, r0
 8000e08:	bf08      	it	eq
 8000e0a:	4770      	bxeq	lr
 8000e0c:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000e10:	4601      	mov	r1, r0
 8000e12:	f04f 0000 	mov.w	r0, #0
 8000e16:	e01c      	b.n	8000e52 <__aeabi_l2f+0x2a>

08000e18 <__aeabi_ul2f>:
 8000e18:	ea50 0201 	orrs.w	r2, r0, r1
 8000e1c:	bf08      	it	eq
 8000e1e:	4770      	bxeq	lr
 8000e20:	f04f 0300 	mov.w	r3, #0
 8000e24:	e00a      	b.n	8000e3c <__aeabi_l2f+0x14>
 8000e26:	bf00      	nop

08000e28 <__aeabi_l2f>:
 8000e28:	ea50 0201 	orrs.w	r2, r0, r1
 8000e2c:	bf08      	it	eq
 8000e2e:	4770      	bxeq	lr
 8000e30:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000e34:	d502      	bpl.n	8000e3c <__aeabi_l2f+0x14>
 8000e36:	4240      	negs	r0, r0
 8000e38:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000e3c:	ea5f 0c01 	movs.w	ip, r1
 8000e40:	bf02      	ittt	eq
 8000e42:	4684      	moveq	ip, r0
 8000e44:	4601      	moveq	r1, r0
 8000e46:	2000      	moveq	r0, #0
 8000e48:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000e4c:	bf08      	it	eq
 8000e4e:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000e52:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000e56:	fabc f28c 	clz	r2, ip
 8000e5a:	3a08      	subs	r2, #8
 8000e5c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000e60:	db10      	blt.n	8000e84 <__aeabi_l2f+0x5c>
 8000e62:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e66:	4463      	add	r3, ip
 8000e68:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e6c:	f1c2 0220 	rsb	r2, r2, #32
 8000e70:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000e74:	fa20 f202 	lsr.w	r2, r0, r2
 8000e78:	eb43 0002 	adc.w	r0, r3, r2
 8000e7c:	bf08      	it	eq
 8000e7e:	f020 0001 	biceq.w	r0, r0, #1
 8000e82:	4770      	bx	lr
 8000e84:	f102 0220 	add.w	r2, r2, #32
 8000e88:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e8c:	f1c2 0220 	rsb	r2, r2, #32
 8000e90:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000e94:	fa21 f202 	lsr.w	r2, r1, r2
 8000e98:	eb43 0002 	adc.w	r0, r3, r2
 8000e9c:	bf08      	it	eq
 8000e9e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ea2:	4770      	bx	lr

08000ea4 <__aeabi_uldivmod>:
 8000ea4:	b953      	cbnz	r3, 8000ebc <__aeabi_uldivmod+0x18>
 8000ea6:	b94a      	cbnz	r2, 8000ebc <__aeabi_uldivmod+0x18>
 8000ea8:	2900      	cmp	r1, #0
 8000eaa:	bf08      	it	eq
 8000eac:	2800      	cmpeq	r0, #0
 8000eae:	bf1c      	itt	ne
 8000eb0:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000eb4:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000eb8:	f000 b9a0 	b.w	80011fc <__aeabi_idiv0>
 8000ebc:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ec0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ec4:	f000 f83c 	bl	8000f40 <__udivmoddi4>
 8000ec8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ecc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ed0:	b004      	add	sp, #16
 8000ed2:	4770      	bx	lr

08000ed4 <__aeabi_d2lz>:
 8000ed4:	b538      	push	{r3, r4, r5, lr}
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	2300      	movs	r3, #0
 8000eda:	4604      	mov	r4, r0
 8000edc:	460d      	mov	r5, r1
 8000ede:	f7ff fdfd 	bl	8000adc <__aeabi_dcmplt>
 8000ee2:	b928      	cbnz	r0, 8000ef0 <__aeabi_d2lz+0x1c>
 8000ee4:	4620      	mov	r0, r4
 8000ee6:	4629      	mov	r1, r5
 8000ee8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000eec:	f000 b80a 	b.w	8000f04 <__aeabi_d2ulz>
 8000ef0:	4620      	mov	r0, r4
 8000ef2:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000ef6:	f000 f805 	bl	8000f04 <__aeabi_d2ulz>
 8000efa:	4240      	negs	r0, r0
 8000efc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000f00:	bd38      	pop	{r3, r4, r5, pc}
 8000f02:	bf00      	nop

08000f04 <__aeabi_d2ulz>:
 8000f04:	b5d0      	push	{r4, r6, r7, lr}
 8000f06:	4b0c      	ldr	r3, [pc, #48]	@ (8000f38 <__aeabi_d2ulz+0x34>)
 8000f08:	2200      	movs	r2, #0
 8000f0a:	4606      	mov	r6, r0
 8000f0c:	460f      	mov	r7, r1
 8000f0e:	f7ff fb73 	bl	80005f8 <__aeabi_dmul>
 8000f12:	f7ff fe49 	bl	8000ba8 <__aeabi_d2uiz>
 8000f16:	4604      	mov	r4, r0
 8000f18:	f7ff faf4 	bl	8000504 <__aeabi_ui2d>
 8000f1c:	4b07      	ldr	r3, [pc, #28]	@ (8000f3c <__aeabi_d2ulz+0x38>)
 8000f1e:	2200      	movs	r2, #0
 8000f20:	f7ff fb6a 	bl	80005f8 <__aeabi_dmul>
 8000f24:	4602      	mov	r2, r0
 8000f26:	460b      	mov	r3, r1
 8000f28:	4630      	mov	r0, r6
 8000f2a:	4639      	mov	r1, r7
 8000f2c:	f7ff f9ac 	bl	8000288 <__aeabi_dsub>
 8000f30:	f7ff fe3a 	bl	8000ba8 <__aeabi_d2uiz>
 8000f34:	4621      	mov	r1, r4
 8000f36:	bdd0      	pop	{r4, r6, r7, pc}
 8000f38:	3df00000 	.word	0x3df00000
 8000f3c:	41f00000 	.word	0x41f00000

08000f40 <__udivmoddi4>:
 8000f40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000f44:	9d08      	ldr	r5, [sp, #32]
 8000f46:	460c      	mov	r4, r1
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d14e      	bne.n	8000fea <__udivmoddi4+0xaa>
 8000f4c:	4694      	mov	ip, r2
 8000f4e:	458c      	cmp	ip, r1
 8000f50:	4686      	mov	lr, r0
 8000f52:	fab2 f282 	clz	r2, r2
 8000f56:	d962      	bls.n	800101e <__udivmoddi4+0xde>
 8000f58:	b14a      	cbz	r2, 8000f6e <__udivmoddi4+0x2e>
 8000f5a:	f1c2 0320 	rsb	r3, r2, #32
 8000f5e:	4091      	lsls	r1, r2
 8000f60:	fa20 f303 	lsr.w	r3, r0, r3
 8000f64:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f68:	4319      	orrs	r1, r3
 8000f6a:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f6e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f72:	fa1f f68c 	uxth.w	r6, ip
 8000f76:	fbb1 f4f7 	udiv	r4, r1, r7
 8000f7a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000f7e:	fb07 1114 	mls	r1, r7, r4, r1
 8000f82:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f86:	fb04 f106 	mul.w	r1, r4, r6
 8000f8a:	4299      	cmp	r1, r3
 8000f8c:	d90a      	bls.n	8000fa4 <__udivmoddi4+0x64>
 8000f8e:	eb1c 0303 	adds.w	r3, ip, r3
 8000f92:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000f96:	f080 8112 	bcs.w	80011be <__udivmoddi4+0x27e>
 8000f9a:	4299      	cmp	r1, r3
 8000f9c:	f240 810f 	bls.w	80011be <__udivmoddi4+0x27e>
 8000fa0:	3c02      	subs	r4, #2
 8000fa2:	4463      	add	r3, ip
 8000fa4:	1a59      	subs	r1, r3, r1
 8000fa6:	fa1f f38e 	uxth.w	r3, lr
 8000faa:	fbb1 f0f7 	udiv	r0, r1, r7
 8000fae:	fb07 1110 	mls	r1, r7, r0, r1
 8000fb2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000fb6:	fb00 f606 	mul.w	r6, r0, r6
 8000fba:	429e      	cmp	r6, r3
 8000fbc:	d90a      	bls.n	8000fd4 <__udivmoddi4+0x94>
 8000fbe:	eb1c 0303 	adds.w	r3, ip, r3
 8000fc2:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000fc6:	f080 80fc 	bcs.w	80011c2 <__udivmoddi4+0x282>
 8000fca:	429e      	cmp	r6, r3
 8000fcc:	f240 80f9 	bls.w	80011c2 <__udivmoddi4+0x282>
 8000fd0:	4463      	add	r3, ip
 8000fd2:	3802      	subs	r0, #2
 8000fd4:	1b9b      	subs	r3, r3, r6
 8000fd6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000fda:	2100      	movs	r1, #0
 8000fdc:	b11d      	cbz	r5, 8000fe6 <__udivmoddi4+0xa6>
 8000fde:	40d3      	lsrs	r3, r2
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	e9c5 3200 	strd	r3, r2, [r5]
 8000fe6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fea:	428b      	cmp	r3, r1
 8000fec:	d905      	bls.n	8000ffa <__udivmoddi4+0xba>
 8000fee:	b10d      	cbz	r5, 8000ff4 <__udivmoddi4+0xb4>
 8000ff0:	e9c5 0100 	strd	r0, r1, [r5]
 8000ff4:	2100      	movs	r1, #0
 8000ff6:	4608      	mov	r0, r1
 8000ff8:	e7f5      	b.n	8000fe6 <__udivmoddi4+0xa6>
 8000ffa:	fab3 f183 	clz	r1, r3
 8000ffe:	2900      	cmp	r1, #0
 8001000:	d146      	bne.n	8001090 <__udivmoddi4+0x150>
 8001002:	42a3      	cmp	r3, r4
 8001004:	d302      	bcc.n	800100c <__udivmoddi4+0xcc>
 8001006:	4290      	cmp	r0, r2
 8001008:	f0c0 80f0 	bcc.w	80011ec <__udivmoddi4+0x2ac>
 800100c:	1a86      	subs	r6, r0, r2
 800100e:	eb64 0303 	sbc.w	r3, r4, r3
 8001012:	2001      	movs	r0, #1
 8001014:	2d00      	cmp	r5, #0
 8001016:	d0e6      	beq.n	8000fe6 <__udivmoddi4+0xa6>
 8001018:	e9c5 6300 	strd	r6, r3, [r5]
 800101c:	e7e3      	b.n	8000fe6 <__udivmoddi4+0xa6>
 800101e:	2a00      	cmp	r2, #0
 8001020:	f040 8090 	bne.w	8001144 <__udivmoddi4+0x204>
 8001024:	eba1 040c 	sub.w	r4, r1, ip
 8001028:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800102c:	fa1f f78c 	uxth.w	r7, ip
 8001030:	2101      	movs	r1, #1
 8001032:	fbb4 f6f8 	udiv	r6, r4, r8
 8001036:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800103a:	fb08 4416 	mls	r4, r8, r6, r4
 800103e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8001042:	fb07 f006 	mul.w	r0, r7, r6
 8001046:	4298      	cmp	r0, r3
 8001048:	d908      	bls.n	800105c <__udivmoddi4+0x11c>
 800104a:	eb1c 0303 	adds.w	r3, ip, r3
 800104e:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8001052:	d202      	bcs.n	800105a <__udivmoddi4+0x11a>
 8001054:	4298      	cmp	r0, r3
 8001056:	f200 80cd 	bhi.w	80011f4 <__udivmoddi4+0x2b4>
 800105a:	4626      	mov	r6, r4
 800105c:	1a1c      	subs	r4, r3, r0
 800105e:	fa1f f38e 	uxth.w	r3, lr
 8001062:	fbb4 f0f8 	udiv	r0, r4, r8
 8001066:	fb08 4410 	mls	r4, r8, r0, r4
 800106a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800106e:	fb00 f707 	mul.w	r7, r0, r7
 8001072:	429f      	cmp	r7, r3
 8001074:	d908      	bls.n	8001088 <__udivmoddi4+0x148>
 8001076:	eb1c 0303 	adds.w	r3, ip, r3
 800107a:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 800107e:	d202      	bcs.n	8001086 <__udivmoddi4+0x146>
 8001080:	429f      	cmp	r7, r3
 8001082:	f200 80b0 	bhi.w	80011e6 <__udivmoddi4+0x2a6>
 8001086:	4620      	mov	r0, r4
 8001088:	1bdb      	subs	r3, r3, r7
 800108a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800108e:	e7a5      	b.n	8000fdc <__udivmoddi4+0x9c>
 8001090:	f1c1 0620 	rsb	r6, r1, #32
 8001094:	408b      	lsls	r3, r1
 8001096:	fa22 f706 	lsr.w	r7, r2, r6
 800109a:	431f      	orrs	r7, r3
 800109c:	fa20 fc06 	lsr.w	ip, r0, r6
 80010a0:	fa04 f301 	lsl.w	r3, r4, r1
 80010a4:	ea43 030c 	orr.w	r3, r3, ip
 80010a8:	40f4      	lsrs	r4, r6
 80010aa:	fa00 f801 	lsl.w	r8, r0, r1
 80010ae:	0c38      	lsrs	r0, r7, #16
 80010b0:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80010b4:	fbb4 fef0 	udiv	lr, r4, r0
 80010b8:	fa1f fc87 	uxth.w	ip, r7
 80010bc:	fb00 441e 	mls	r4, r0, lr, r4
 80010c0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80010c4:	fb0e f90c 	mul.w	r9, lr, ip
 80010c8:	45a1      	cmp	r9, r4
 80010ca:	fa02 f201 	lsl.w	r2, r2, r1
 80010ce:	d90a      	bls.n	80010e6 <__udivmoddi4+0x1a6>
 80010d0:	193c      	adds	r4, r7, r4
 80010d2:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 80010d6:	f080 8084 	bcs.w	80011e2 <__udivmoddi4+0x2a2>
 80010da:	45a1      	cmp	r9, r4
 80010dc:	f240 8081 	bls.w	80011e2 <__udivmoddi4+0x2a2>
 80010e0:	f1ae 0e02 	sub.w	lr, lr, #2
 80010e4:	443c      	add	r4, r7
 80010e6:	eba4 0409 	sub.w	r4, r4, r9
 80010ea:	fa1f f983 	uxth.w	r9, r3
 80010ee:	fbb4 f3f0 	udiv	r3, r4, r0
 80010f2:	fb00 4413 	mls	r4, r0, r3, r4
 80010f6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80010fa:	fb03 fc0c 	mul.w	ip, r3, ip
 80010fe:	45a4      	cmp	ip, r4
 8001100:	d907      	bls.n	8001112 <__udivmoddi4+0x1d2>
 8001102:	193c      	adds	r4, r7, r4
 8001104:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8001108:	d267      	bcs.n	80011da <__udivmoddi4+0x29a>
 800110a:	45a4      	cmp	ip, r4
 800110c:	d965      	bls.n	80011da <__udivmoddi4+0x29a>
 800110e:	3b02      	subs	r3, #2
 8001110:	443c      	add	r4, r7
 8001112:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8001116:	fba0 9302 	umull	r9, r3, r0, r2
 800111a:	eba4 040c 	sub.w	r4, r4, ip
 800111e:	429c      	cmp	r4, r3
 8001120:	46ce      	mov	lr, r9
 8001122:	469c      	mov	ip, r3
 8001124:	d351      	bcc.n	80011ca <__udivmoddi4+0x28a>
 8001126:	d04e      	beq.n	80011c6 <__udivmoddi4+0x286>
 8001128:	b155      	cbz	r5, 8001140 <__udivmoddi4+0x200>
 800112a:	ebb8 030e 	subs.w	r3, r8, lr
 800112e:	eb64 040c 	sbc.w	r4, r4, ip
 8001132:	fa04 f606 	lsl.w	r6, r4, r6
 8001136:	40cb      	lsrs	r3, r1
 8001138:	431e      	orrs	r6, r3
 800113a:	40cc      	lsrs	r4, r1
 800113c:	e9c5 6400 	strd	r6, r4, [r5]
 8001140:	2100      	movs	r1, #0
 8001142:	e750      	b.n	8000fe6 <__udivmoddi4+0xa6>
 8001144:	f1c2 0320 	rsb	r3, r2, #32
 8001148:	fa20 f103 	lsr.w	r1, r0, r3
 800114c:	fa0c fc02 	lsl.w	ip, ip, r2
 8001150:	fa24 f303 	lsr.w	r3, r4, r3
 8001154:	4094      	lsls	r4, r2
 8001156:	430c      	orrs	r4, r1
 8001158:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800115c:	fa00 fe02 	lsl.w	lr, r0, r2
 8001160:	fa1f f78c 	uxth.w	r7, ip
 8001164:	fbb3 f0f8 	udiv	r0, r3, r8
 8001168:	fb08 3110 	mls	r1, r8, r0, r3
 800116c:	0c23      	lsrs	r3, r4, #16
 800116e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8001172:	fb00 f107 	mul.w	r1, r0, r7
 8001176:	4299      	cmp	r1, r3
 8001178:	d908      	bls.n	800118c <__udivmoddi4+0x24c>
 800117a:	eb1c 0303 	adds.w	r3, ip, r3
 800117e:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8001182:	d22c      	bcs.n	80011de <__udivmoddi4+0x29e>
 8001184:	4299      	cmp	r1, r3
 8001186:	d92a      	bls.n	80011de <__udivmoddi4+0x29e>
 8001188:	3802      	subs	r0, #2
 800118a:	4463      	add	r3, ip
 800118c:	1a5b      	subs	r3, r3, r1
 800118e:	b2a4      	uxth	r4, r4
 8001190:	fbb3 f1f8 	udiv	r1, r3, r8
 8001194:	fb08 3311 	mls	r3, r8, r1, r3
 8001198:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800119c:	fb01 f307 	mul.w	r3, r1, r7
 80011a0:	42a3      	cmp	r3, r4
 80011a2:	d908      	bls.n	80011b6 <__udivmoddi4+0x276>
 80011a4:	eb1c 0404 	adds.w	r4, ip, r4
 80011a8:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 80011ac:	d213      	bcs.n	80011d6 <__udivmoddi4+0x296>
 80011ae:	42a3      	cmp	r3, r4
 80011b0:	d911      	bls.n	80011d6 <__udivmoddi4+0x296>
 80011b2:	3902      	subs	r1, #2
 80011b4:	4464      	add	r4, ip
 80011b6:	1ae4      	subs	r4, r4, r3
 80011b8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80011bc:	e739      	b.n	8001032 <__udivmoddi4+0xf2>
 80011be:	4604      	mov	r4, r0
 80011c0:	e6f0      	b.n	8000fa4 <__udivmoddi4+0x64>
 80011c2:	4608      	mov	r0, r1
 80011c4:	e706      	b.n	8000fd4 <__udivmoddi4+0x94>
 80011c6:	45c8      	cmp	r8, r9
 80011c8:	d2ae      	bcs.n	8001128 <__udivmoddi4+0x1e8>
 80011ca:	ebb9 0e02 	subs.w	lr, r9, r2
 80011ce:	eb63 0c07 	sbc.w	ip, r3, r7
 80011d2:	3801      	subs	r0, #1
 80011d4:	e7a8      	b.n	8001128 <__udivmoddi4+0x1e8>
 80011d6:	4631      	mov	r1, r6
 80011d8:	e7ed      	b.n	80011b6 <__udivmoddi4+0x276>
 80011da:	4603      	mov	r3, r0
 80011dc:	e799      	b.n	8001112 <__udivmoddi4+0x1d2>
 80011de:	4630      	mov	r0, r6
 80011e0:	e7d4      	b.n	800118c <__udivmoddi4+0x24c>
 80011e2:	46d6      	mov	lr, sl
 80011e4:	e77f      	b.n	80010e6 <__udivmoddi4+0x1a6>
 80011e6:	4463      	add	r3, ip
 80011e8:	3802      	subs	r0, #2
 80011ea:	e74d      	b.n	8001088 <__udivmoddi4+0x148>
 80011ec:	4606      	mov	r6, r0
 80011ee:	4623      	mov	r3, r4
 80011f0:	4608      	mov	r0, r1
 80011f2:	e70f      	b.n	8001014 <__udivmoddi4+0xd4>
 80011f4:	3e02      	subs	r6, #2
 80011f6:	4463      	add	r3, ip
 80011f8:	e730      	b.n	800105c <__udivmoddi4+0x11c>
 80011fa:	bf00      	nop

080011fc <__aeabi_idiv0>:
 80011fc:	4770      	bx	lr
 80011fe:	bf00      	nop

08001200 <BDCInit>:
 * Function Return		: None
 * Function Example		: BDCInit(&BDC1, &htim3, TIM_CHANNEL_4, SHIFTREG, &(SR.cast[1]), Bit6, Bit7);
 * 						  BDCInit(&BDC2, &htim3, TIM_CHANNEL_1, GPIO, GPIOA, GPIO_Pin_9, GPIOA, GPIO_Pin_10);
 */

void BDCInit(BDC_t* bdc,TIM_HandleTypeDef* htimx,uint32_t Channel, BCDDIRPINType Dirpintype, ...){
 8001200:	b408      	push	{r3}
 8001202:	b580      	push	{r7, lr}
 8001204:	b089      	sub	sp, #36	@ 0x24
 8001206:	af02      	add	r7, sp, #8
 8001208:	60f8      	str	r0, [r7, #12]
 800120a:	60b9      	str	r1, [r7, #8]
 800120c:	607a      	str	r2, [r7, #4]

	bdc->htim = htimx;
 800120e:	68fb      	ldr	r3, [r7, #12]
 8001210:	68ba      	ldr	r2, [r7, #8]
 8001212:	61da      	str	r2, [r3, #28]
	bdc->Channel = Channel;
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	687a      	ldr	r2, [r7, #4]
 8001218:	621a      	str	r2, [r3, #32]
	bdc->Dirpintype =  Dirpintype;
 800121a:	68fb      	ldr	r3, [r7, #12]
 800121c:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 8001220:	701a      	strb	r2, [r3, #0]

	va_list pinconfig;
	va_start(pinconfig, Dirpintype);
 8001222:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001226:	617b      	str	r3, [r7, #20]

	if( bdc->Dirpintype == GPIO){
 8001228:	68fb      	ldr	r3, [r7, #12]
 800122a:	781b      	ldrb	r3, [r3, #0]
 800122c:	2b01      	cmp	r3, #1
 800122e:	d12e      	bne.n	800128e <BDCInit+0x8e>

		bdc->GPIOx_DIR1 = va_arg(pinconfig, GPIO_TypeDef*);
 8001230:	697b      	ldr	r3, [r7, #20]
 8001232:	1d1a      	adds	r2, r3, #4
 8001234:	617a      	str	r2, [r7, #20]
 8001236:	681a      	ldr	r2, [r3, #0]
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	605a      	str	r2, [r3, #4]
		bdc->GPIO_Pin_DIR1	= va_arg(pinconfig, int);
 800123c:	697b      	ldr	r3, [r7, #20]
 800123e:	1d1a      	adds	r2, r3, #4
 8001240:	617a      	str	r2, [r7, #20]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	b29a      	uxth	r2, r3
 8001246:	68fb      	ldr	r3, [r7, #12]
 8001248:	811a      	strh	r2, [r3, #8]
		bdc->GPIOx_DIR2 = va_arg(pinconfig, GPIO_TypeDef*);
 800124a:	697b      	ldr	r3, [r7, #20]
 800124c:	1d1a      	adds	r2, r3, #4
 800124e:	617a      	str	r2, [r7, #20]
 8001250:	681a      	ldr	r2, [r3, #0]
 8001252:	68fb      	ldr	r3, [r7, #12]
 8001254:	60da      	str	r2, [r3, #12]
		bdc->GPIO_Pin_DIR2	= va_arg(pinconfig, int);
 8001256:	697b      	ldr	r3, [r7, #20]
 8001258:	1d1a      	adds	r2, r3, #4
 800125a:	617a      	str	r2, [r7, #20]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	b29a      	uxth	r2, r3
 8001260:	68fb      	ldr	r3, [r7, #12]
 8001262:	821a      	strh	r2, [r3, #16]

		GPIOPinsInit(bdc->GPIOx_DIR1, bdc->GPIO_Pin_DIR1,GPIO_MODE_OUTPUT_PP,GPIO_SPEED_FREQ_HIGH, GPIO_PULLUP);
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	6858      	ldr	r0, [r3, #4]
 8001268:	68fb      	ldr	r3, [r7, #12]
 800126a:	8919      	ldrh	r1, [r3, #8]
 800126c:	2301      	movs	r3, #1
 800126e:	9300      	str	r3, [sp, #0]
 8001270:	2302      	movs	r3, #2
 8001272:	2201      	movs	r2, #1
 8001274:	f000 f908 	bl	8001488 <GPIOPinsInit>
		GPIOPinsInit(bdc->GPIOx_DIR2, bdc->GPIO_Pin_DIR2,GPIO_MODE_OUTPUT_PP,GPIO_SPEED_FREQ_HIGH, GPIO_PULLUP);
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	68d8      	ldr	r0, [r3, #12]
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	8a19      	ldrh	r1, [r3, #16]
 8001280:	2301      	movs	r3, #1
 8001282:	9300      	str	r3, [sp, #0]
 8001284:	2302      	movs	r3, #2
 8001286:	2201      	movs	r2, #1
 8001288:	f000 f8fe 	bl	8001488 <GPIOPinsInit>
 800128c:	e017      	b.n	80012be <BDCInit+0xbe>

	}else if(bdc->Dirpintype == SHIFTREG){
 800128e:	68fb      	ldr	r3, [r7, #12]
 8001290:	781b      	ldrb	r3, [r3, #0]
 8001292:	2b00      	cmp	r3, #0
 8001294:	d113      	bne.n	80012be <BDCInit+0xbe>

		bdc->shiftreg = va_arg(pinconfig, byte_t *);
 8001296:	697b      	ldr	r3, [r7, #20]
 8001298:	1d1a      	adds	r2, r3, #4
 800129a:	617a      	str	r2, [r7, #20]
 800129c:	681a      	ldr	r2, [r3, #0]
 800129e:	68fb      	ldr	r3, [r7, #12]
 80012a0:	615a      	str	r2, [r3, #20]
		bdc->dir1 = va_arg(pinconfig, int);
 80012a2:	697b      	ldr	r3, [r7, #20]
 80012a4:	1d1a      	adds	r2, r3, #4
 80012a6:	617a      	str	r2, [r7, #20]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	b2da      	uxtb	r2, r3
 80012ac:	68fb      	ldr	r3, [r7, #12]
 80012ae:	761a      	strb	r2, [r3, #24]
		bdc->dir2 = va_arg(pinconfig, int);
 80012b0:	697b      	ldr	r3, [r7, #20]
 80012b2:	1d1a      	adds	r2, r3, #4
 80012b4:	617a      	str	r2, [r7, #20]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	b2da      	uxtb	r2, r3
 80012ba:	68fb      	ldr	r3, [r7, #12]
 80012bc:	765a      	strb	r2, [r3, #25]
	}

	va_end(pinconfig);
	__HAL_TIM_SET_COMPARE(bdc->htim, (bdc->Channel), 0);
 80012be:	68fb      	ldr	r3, [r7, #12]
 80012c0:	6a1b      	ldr	r3, [r3, #32]
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d105      	bne.n	80012d2 <BDCInit+0xd2>
 80012c6:	68fb      	ldr	r3, [r7, #12]
 80012c8:	69db      	ldr	r3, [r3, #28]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	2200      	movs	r2, #0
 80012ce:	635a      	str	r2, [r3, #52]	@ 0x34
}
 80012d0:	e018      	b.n	8001304 <BDCInit+0x104>
	__HAL_TIM_SET_COMPARE(bdc->htim, (bdc->Channel), 0);
 80012d2:	68fb      	ldr	r3, [r7, #12]
 80012d4:	6a1b      	ldr	r3, [r3, #32]
 80012d6:	2b04      	cmp	r3, #4
 80012d8:	d105      	bne.n	80012e6 <BDCInit+0xe6>
 80012da:	68fb      	ldr	r3, [r7, #12]
 80012dc:	69db      	ldr	r3, [r3, #28]
 80012de:	681a      	ldr	r2, [r3, #0]
 80012e0:	2300      	movs	r3, #0
 80012e2:	6393      	str	r3, [r2, #56]	@ 0x38
}
 80012e4:	e00e      	b.n	8001304 <BDCInit+0x104>
	__HAL_TIM_SET_COMPARE(bdc->htim, (bdc->Channel), 0);
 80012e6:	68fb      	ldr	r3, [r7, #12]
 80012e8:	6a1b      	ldr	r3, [r3, #32]
 80012ea:	2b08      	cmp	r3, #8
 80012ec:	d105      	bne.n	80012fa <BDCInit+0xfa>
 80012ee:	68fb      	ldr	r3, [r7, #12]
 80012f0:	69db      	ldr	r3, [r3, #28]
 80012f2:	681a      	ldr	r2, [r3, #0]
 80012f4:	2300      	movs	r3, #0
 80012f6:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 80012f8:	e004      	b.n	8001304 <BDCInit+0x104>
	__HAL_TIM_SET_COMPARE(bdc->htim, (bdc->Channel), 0);
 80012fa:	68fb      	ldr	r3, [r7, #12]
 80012fc:	69db      	ldr	r3, [r3, #28]
 80012fe:	681a      	ldr	r2, [r3, #0]
 8001300:	2300      	movs	r3, #0
 8001302:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8001304:	bf00      	nop
 8001306:	371c      	adds	r7, #28
 8001308:	46bd      	mov	sp, r7
 800130a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800130e:	b001      	add	sp, #4
 8001310:	4770      	bx	lr

08001312 <WriteBDC>:
 * Function Return		: None
 * Function Example		: WriteBDC(&BDC1,20000);
 */

void WriteBDC(BDC_t* bdc, int32_t pwm)
{
 8001312:	b580      	push	{r7, lr}
 8001314:	b082      	sub	sp, #8
 8001316:	af00      	add	r7, sp, #0
 8001318:	6078      	str	r0, [r7, #4]
 800131a:	6039      	str	r1, [r7, #0]

	if(pwm >= 0){
 800131c:	683b      	ldr	r3, [r7, #0]
 800131e:	2b00      	cmp	r3, #0
 8001320:	db52      	blt.n	80013c8 <WriteBDC+0xb6>

		//*(bdc-> speed) = pwm;
		__HAL_TIM_SET_COMPARE(bdc->htim, (bdc->Channel), pwm);
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	6a1b      	ldr	r3, [r3, #32]
 8001326:	2b00      	cmp	r3, #0
 8001328:	d105      	bne.n	8001336 <WriteBDC+0x24>
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	69db      	ldr	r3, [r3, #28]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	683a      	ldr	r2, [r7, #0]
 8001332:	635a      	str	r2, [r3, #52]	@ 0x34
 8001334:	e018      	b.n	8001368 <WriteBDC+0x56>
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	6a1b      	ldr	r3, [r3, #32]
 800133a:	2b04      	cmp	r3, #4
 800133c:	d105      	bne.n	800134a <WriteBDC+0x38>
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	69db      	ldr	r3, [r3, #28]
 8001342:	681a      	ldr	r2, [r3, #0]
 8001344:	683b      	ldr	r3, [r7, #0]
 8001346:	6393      	str	r3, [r2, #56]	@ 0x38
 8001348:	e00e      	b.n	8001368 <WriteBDC+0x56>
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	6a1b      	ldr	r3, [r3, #32]
 800134e:	2b08      	cmp	r3, #8
 8001350:	d105      	bne.n	800135e <WriteBDC+0x4c>
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	69db      	ldr	r3, [r3, #28]
 8001356:	681a      	ldr	r2, [r3, #0]
 8001358:	683b      	ldr	r3, [r7, #0]
 800135a:	63d3      	str	r3, [r2, #60]	@ 0x3c
 800135c:	e004      	b.n	8001368 <WriteBDC+0x56>
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	69db      	ldr	r3, [r3, #28]
 8001362:	681a      	ldr	r2, [r3, #0]
 8001364:	683b      	ldr	r3, [r7, #0]
 8001366:	6413      	str	r3, [r2, #64]	@ 0x40

		if( bdc->Dirpintype == GPIO){
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	781b      	ldrb	r3, [r3, #0]
 800136c:	2b01      	cmp	r3, #1
 800136e:	d110      	bne.n	8001392 <WriteBDC+0x80>
			HAL_GPIO_WritePin(bdc->GPIOx_DIR1,bdc->GPIO_Pin_DIR1,GPIO_PIN_SET);
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	6858      	ldr	r0, [r3, #4]
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	891b      	ldrh	r3, [r3, #8]
 8001378:	2201      	movs	r2, #1
 800137a:	4619      	mov	r1, r3
 800137c:	f00c fd0a 	bl	800dd94 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(bdc->GPIOx_DIR2,bdc->GPIO_Pin_DIR2,GPIO_PIN_RESET);
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	68d8      	ldr	r0, [r3, #12]
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	8a1b      	ldrh	r3, [r3, #16]
 8001388:	2200      	movs	r2, #0
 800138a:	4619      	mov	r1, r3
 800138c:	f00c fd02 	bl	800dd94 <HAL_GPIO_WritePin>
			bdc->shiftreg->Byte &= (uint8_t)~((uint8_t)bdc->dir1);
			bdc->shiftreg->Byte |= bdc->dir2;

		}
	}
}
 8001390:	e076      	b.n	8001480 <WriteBDC+0x16e>
		}else if(bdc->Dirpintype == SHIFTREG){
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	781b      	ldrb	r3, [r3, #0]
 8001396:	2b00      	cmp	r3, #0
 8001398:	d172      	bne.n	8001480 <WriteBDC+0x16e>
			bdc->shiftreg->Byte |= bdc->dir1;
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	695b      	ldr	r3, [r3, #20]
 800139e:	7819      	ldrb	r1, [r3, #0]
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	7e1a      	ldrb	r2, [r3, #24]
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	695b      	ldr	r3, [r3, #20]
 80013a8:	430a      	orrs	r2, r1
 80013aa:	b2d2      	uxtb	r2, r2
 80013ac:	701a      	strb	r2, [r3, #0]
			bdc->shiftreg->Byte &= (uint8_t)~((uint8_t)bdc->dir2);
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	695b      	ldr	r3, [r3, #20]
 80013b2:	7819      	ldrb	r1, [r3, #0]
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	7e5b      	ldrb	r3, [r3, #25]
 80013b8:	43db      	mvns	r3, r3
 80013ba:	b2da      	uxtb	r2, r3
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	695b      	ldr	r3, [r3, #20]
 80013c0:	400a      	ands	r2, r1
 80013c2:	b2d2      	uxtb	r2, r2
 80013c4:	701a      	strb	r2, [r3, #0]
}
 80013c6:	e05b      	b.n	8001480 <WriteBDC+0x16e>
	}else if (pwm < 0){
 80013c8:	683b      	ldr	r3, [r7, #0]
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	da58      	bge.n	8001480 <WriteBDC+0x16e>
		__HAL_TIM_SET_COMPARE(bdc->htim, (bdc->Channel), pwm*(-1));
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	6a1b      	ldr	r3, [r3, #32]
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d106      	bne.n	80013e4 <WriteBDC+0xd2>
 80013d6:	683b      	ldr	r3, [r7, #0]
 80013d8:	425a      	negs	r2, r3
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	69db      	ldr	r3, [r3, #28]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	635a      	str	r2, [r3, #52]	@ 0x34
 80013e2:	e01e      	b.n	8001422 <WriteBDC+0x110>
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	6a1b      	ldr	r3, [r3, #32]
 80013e8:	2b04      	cmp	r3, #4
 80013ea:	d107      	bne.n	80013fc <WriteBDC+0xea>
 80013ec:	683b      	ldr	r3, [r7, #0]
 80013ee:	4259      	negs	r1, r3
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	69db      	ldr	r3, [r3, #28]
 80013f4:	681a      	ldr	r2, [r3, #0]
 80013f6:	460b      	mov	r3, r1
 80013f8:	6393      	str	r3, [r2, #56]	@ 0x38
 80013fa:	e012      	b.n	8001422 <WriteBDC+0x110>
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	6a1b      	ldr	r3, [r3, #32]
 8001400:	2b08      	cmp	r3, #8
 8001402:	d107      	bne.n	8001414 <WriteBDC+0x102>
 8001404:	683b      	ldr	r3, [r7, #0]
 8001406:	4259      	negs	r1, r3
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	69db      	ldr	r3, [r3, #28]
 800140c:	681a      	ldr	r2, [r3, #0]
 800140e:	460b      	mov	r3, r1
 8001410:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8001412:	e006      	b.n	8001422 <WriteBDC+0x110>
 8001414:	683b      	ldr	r3, [r7, #0]
 8001416:	4259      	negs	r1, r3
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	69db      	ldr	r3, [r3, #28]
 800141c:	681a      	ldr	r2, [r3, #0]
 800141e:	460b      	mov	r3, r1
 8001420:	6413      	str	r3, [r2, #64]	@ 0x40
		if( bdc->Dirpintype == GPIO){
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	781b      	ldrb	r3, [r3, #0]
 8001426:	2b01      	cmp	r3, #1
 8001428:	d110      	bne.n	800144c <WriteBDC+0x13a>
			HAL_GPIO_WritePin(bdc->GPIOx_DIR1,bdc->GPIO_Pin_DIR1,GPIO_PIN_RESET);
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	6858      	ldr	r0, [r3, #4]
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	891b      	ldrh	r3, [r3, #8]
 8001432:	2200      	movs	r2, #0
 8001434:	4619      	mov	r1, r3
 8001436:	f00c fcad 	bl	800dd94 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(bdc->GPIOx_DIR2,bdc->GPIO_Pin_DIR2,GPIO_PIN_SET);
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	68d8      	ldr	r0, [r3, #12]
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	8a1b      	ldrh	r3, [r3, #16]
 8001442:	2201      	movs	r2, #1
 8001444:	4619      	mov	r1, r3
 8001446:	f00c fca5 	bl	800dd94 <HAL_GPIO_WritePin>
}
 800144a:	e019      	b.n	8001480 <WriteBDC+0x16e>
		}else if(bdc->Dirpintype == SHIFTREG){
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	781b      	ldrb	r3, [r3, #0]
 8001450:	2b00      	cmp	r3, #0
 8001452:	d115      	bne.n	8001480 <WriteBDC+0x16e>
			bdc->shiftreg->Byte &= (uint8_t)~((uint8_t)bdc->dir1);
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	695b      	ldr	r3, [r3, #20]
 8001458:	7819      	ldrb	r1, [r3, #0]
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	7e1b      	ldrb	r3, [r3, #24]
 800145e:	43db      	mvns	r3, r3
 8001460:	b2da      	uxtb	r2, r3
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	695b      	ldr	r3, [r3, #20]
 8001466:	400a      	ands	r2, r1
 8001468:	b2d2      	uxtb	r2, r2
 800146a:	701a      	strb	r2, [r3, #0]
			bdc->shiftreg->Byte |= bdc->dir2;
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	695b      	ldr	r3, [r3, #20]
 8001470:	7819      	ldrb	r1, [r3, #0]
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	7e5a      	ldrb	r2, [r3, #25]
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	695b      	ldr	r3, [r3, #20]
 800147a:	430a      	orrs	r2, r1
 800147c:	b2d2      	uxtb	r2, r2
 800147e:	701a      	strb	r2, [r3, #0]
}
 8001480:	bf00      	nop
 8001482:	3708      	adds	r7, #8
 8001484:	46bd      	mov	sp, r7
 8001486:	bd80      	pop	{r7, pc}

08001488 <GPIOPinsInit>:
 * Function Return		: None
 * Function Example		: GPIOPinsInit(GPIOA, GPIO_Pin_2, GPIO_Mode_OUT, GPIO_OType_PP, GPIO_Speed_50MHz, GPIO_PuPd_UP);
 */

void GPIOPinsInit (GPIO_TypeDef * GPIOx, uint16_t GPIO_Pin,uint32_t Mode, uint32_t GPIO_Speed,  uint32_t GPIO_PuPd)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b092      	sub	sp, #72	@ 0x48
 800148c:	af00      	add	r7, sp, #0
 800148e:	60f8      	str	r0, [r7, #12]
 8001490:	607a      	str	r2, [r7, #4]
 8001492:	603b      	str	r3, [r7, #0]
 8001494:	460b      	mov	r3, r1
 8001496:	817b      	strh	r3, [r7, #10]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001498:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800149c:	2200      	movs	r2, #0
 800149e:	601a      	str	r2, [r3, #0]
 80014a0:	605a      	str	r2, [r3, #4]
 80014a2:	609a      	str	r2, [r3, #8]
 80014a4:	60da      	str	r2, [r3, #12]
 80014a6:	611a      	str	r2, [r3, #16]

	switch((uint32_t)GPIOx){
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	4a6a      	ldr	r2, [pc, #424]	@ (8001654 <GPIOPinsInit+0x1cc>)
 80014ac:	4293      	cmp	r3, r2
 80014ae:	f000 80af 	beq.w	8001610 <GPIOPinsInit+0x188>
 80014b2:	4a68      	ldr	r2, [pc, #416]	@ (8001654 <GPIOPinsInit+0x1cc>)
 80014b4:	4293      	cmp	r3, r2
 80014b6:	f200 80ba 	bhi.w	800162e <GPIOPinsInit+0x1a6>
 80014ba:	4a67      	ldr	r2, [pc, #412]	@ (8001658 <GPIOPinsInit+0x1d0>)
 80014bc:	4293      	cmp	r3, r2
 80014be:	f000 8098 	beq.w	80015f2 <GPIOPinsInit+0x16a>
 80014c2:	4a65      	ldr	r2, [pc, #404]	@ (8001658 <GPIOPinsInit+0x1d0>)
 80014c4:	4293      	cmp	r3, r2
 80014c6:	f200 80b2 	bhi.w	800162e <GPIOPinsInit+0x1a6>
 80014ca:	4a64      	ldr	r2, [pc, #400]	@ (800165c <GPIOPinsInit+0x1d4>)
 80014cc:	4293      	cmp	r3, r2
 80014ce:	f000 8081 	beq.w	80015d4 <GPIOPinsInit+0x14c>
 80014d2:	4a62      	ldr	r2, [pc, #392]	@ (800165c <GPIOPinsInit+0x1d4>)
 80014d4:	4293      	cmp	r3, r2
 80014d6:	f200 80aa 	bhi.w	800162e <GPIOPinsInit+0x1a6>
 80014da:	4a61      	ldr	r2, [pc, #388]	@ (8001660 <GPIOPinsInit+0x1d8>)
 80014dc:	4293      	cmp	r3, r2
 80014de:	d06a      	beq.n	80015b6 <GPIOPinsInit+0x12e>
 80014e0:	4a5f      	ldr	r2, [pc, #380]	@ (8001660 <GPIOPinsInit+0x1d8>)
 80014e2:	4293      	cmp	r3, r2
 80014e4:	f200 80a3 	bhi.w	800162e <GPIOPinsInit+0x1a6>
 80014e8:	4a5e      	ldr	r2, [pc, #376]	@ (8001664 <GPIOPinsInit+0x1dc>)
 80014ea:	4293      	cmp	r3, r2
 80014ec:	d054      	beq.n	8001598 <GPIOPinsInit+0x110>
 80014ee:	4a5d      	ldr	r2, [pc, #372]	@ (8001664 <GPIOPinsInit+0x1dc>)
 80014f0:	4293      	cmp	r3, r2
 80014f2:	f200 809c 	bhi.w	800162e <GPIOPinsInit+0x1a6>
 80014f6:	4a5c      	ldr	r2, [pc, #368]	@ (8001668 <GPIOPinsInit+0x1e0>)
 80014f8:	4293      	cmp	r3, r2
 80014fa:	d03e      	beq.n	800157a <GPIOPinsInit+0xf2>
 80014fc:	4a5a      	ldr	r2, [pc, #360]	@ (8001668 <GPIOPinsInit+0x1e0>)
 80014fe:	4293      	cmp	r3, r2
 8001500:	f200 8095 	bhi.w	800162e <GPIOPinsInit+0x1a6>
 8001504:	4a59      	ldr	r2, [pc, #356]	@ (800166c <GPIOPinsInit+0x1e4>)
 8001506:	4293      	cmp	r3, r2
 8001508:	d028      	beq.n	800155c <GPIOPinsInit+0xd4>
 800150a:	4a58      	ldr	r2, [pc, #352]	@ (800166c <GPIOPinsInit+0x1e4>)
 800150c:	4293      	cmp	r3, r2
 800150e:	f200 808e 	bhi.w	800162e <GPIOPinsInit+0x1a6>
 8001512:	4a57      	ldr	r2, [pc, #348]	@ (8001670 <GPIOPinsInit+0x1e8>)
 8001514:	4293      	cmp	r3, r2
 8001516:	d003      	beq.n	8001520 <GPIOPinsInit+0x98>
 8001518:	4a56      	ldr	r2, [pc, #344]	@ (8001674 <GPIOPinsInit+0x1ec>)
 800151a:	4293      	cmp	r3, r2
 800151c:	d00f      	beq.n	800153e <GPIOPinsInit+0xb6>
	break;

	case GPIOI_BASE:	__HAL_RCC_GPIOI_CLK_ENABLE();
	break;

	default: break;
 800151e:	e086      	b.n	800162e <GPIOPinsInit+0x1a6>
	case GPIOA_BASE:	  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001520:	2300      	movs	r3, #0
 8001522:	633b      	str	r3, [r7, #48]	@ 0x30
 8001524:	4b54      	ldr	r3, [pc, #336]	@ (8001678 <GPIOPinsInit+0x1f0>)
 8001526:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001528:	4a53      	ldr	r2, [pc, #332]	@ (8001678 <GPIOPinsInit+0x1f0>)
 800152a:	f043 0301 	orr.w	r3, r3, #1
 800152e:	6313      	str	r3, [r2, #48]	@ 0x30
 8001530:	4b51      	ldr	r3, [pc, #324]	@ (8001678 <GPIOPinsInit+0x1f0>)
 8001532:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001534:	f003 0301 	and.w	r3, r3, #1
 8001538:	633b      	str	r3, [r7, #48]	@ 0x30
 800153a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
	break;
 800153c:	e078      	b.n	8001630 <GPIOPinsInit+0x1a8>
	case GPIOB_BASE:	__HAL_RCC_GPIOB_CLK_ENABLE();
 800153e:	2300      	movs	r3, #0
 8001540:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001542:	4b4d      	ldr	r3, [pc, #308]	@ (8001678 <GPIOPinsInit+0x1f0>)
 8001544:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001546:	4a4c      	ldr	r2, [pc, #304]	@ (8001678 <GPIOPinsInit+0x1f0>)
 8001548:	f043 0302 	orr.w	r3, r3, #2
 800154c:	6313      	str	r3, [r2, #48]	@ 0x30
 800154e:	4b4a      	ldr	r3, [pc, #296]	@ (8001678 <GPIOPinsInit+0x1f0>)
 8001550:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001552:	f003 0302 	and.w	r3, r3, #2
 8001556:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001558:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	break;
 800155a:	e069      	b.n	8001630 <GPIOPinsInit+0x1a8>
	case GPIOC_BASE:	__HAL_RCC_GPIOC_CLK_ENABLE();
 800155c:	2300      	movs	r3, #0
 800155e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001560:	4b45      	ldr	r3, [pc, #276]	@ (8001678 <GPIOPinsInit+0x1f0>)
 8001562:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001564:	4a44      	ldr	r2, [pc, #272]	@ (8001678 <GPIOPinsInit+0x1f0>)
 8001566:	f043 0304 	orr.w	r3, r3, #4
 800156a:	6313      	str	r3, [r2, #48]	@ 0x30
 800156c:	4b42      	ldr	r3, [pc, #264]	@ (8001678 <GPIOPinsInit+0x1f0>)
 800156e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001570:	f003 0304 	and.w	r3, r3, #4
 8001574:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001576:	6abb      	ldr	r3, [r7, #40]	@ 0x28
	break;
 8001578:	e05a      	b.n	8001630 <GPIOPinsInit+0x1a8>
	case GPIOD_BASE:	__HAL_RCC_GPIOD_CLK_ENABLE();
 800157a:	2300      	movs	r3, #0
 800157c:	627b      	str	r3, [r7, #36]	@ 0x24
 800157e:	4b3e      	ldr	r3, [pc, #248]	@ (8001678 <GPIOPinsInit+0x1f0>)
 8001580:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001582:	4a3d      	ldr	r2, [pc, #244]	@ (8001678 <GPIOPinsInit+0x1f0>)
 8001584:	f043 0308 	orr.w	r3, r3, #8
 8001588:	6313      	str	r3, [r2, #48]	@ 0x30
 800158a:	4b3b      	ldr	r3, [pc, #236]	@ (8001678 <GPIOPinsInit+0x1f0>)
 800158c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800158e:	f003 0308 	and.w	r3, r3, #8
 8001592:	627b      	str	r3, [r7, #36]	@ 0x24
 8001594:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
	break;
 8001596:	e04b      	b.n	8001630 <GPIOPinsInit+0x1a8>
	case GPIOE_BASE:	__HAL_RCC_GPIOE_CLK_ENABLE();
 8001598:	2300      	movs	r3, #0
 800159a:	623b      	str	r3, [r7, #32]
 800159c:	4b36      	ldr	r3, [pc, #216]	@ (8001678 <GPIOPinsInit+0x1f0>)
 800159e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015a0:	4a35      	ldr	r2, [pc, #212]	@ (8001678 <GPIOPinsInit+0x1f0>)
 80015a2:	f043 0310 	orr.w	r3, r3, #16
 80015a6:	6313      	str	r3, [r2, #48]	@ 0x30
 80015a8:	4b33      	ldr	r3, [pc, #204]	@ (8001678 <GPIOPinsInit+0x1f0>)
 80015aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015ac:	f003 0310 	and.w	r3, r3, #16
 80015b0:	623b      	str	r3, [r7, #32]
 80015b2:	6a3b      	ldr	r3, [r7, #32]
	break;
 80015b4:	e03c      	b.n	8001630 <GPIOPinsInit+0x1a8>
	case GPIOF_BASE:	__HAL_RCC_GPIOF_CLK_ENABLE();
 80015b6:	2300      	movs	r3, #0
 80015b8:	61fb      	str	r3, [r7, #28]
 80015ba:	4b2f      	ldr	r3, [pc, #188]	@ (8001678 <GPIOPinsInit+0x1f0>)
 80015bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015be:	4a2e      	ldr	r2, [pc, #184]	@ (8001678 <GPIOPinsInit+0x1f0>)
 80015c0:	f043 0320 	orr.w	r3, r3, #32
 80015c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80015c6:	4b2c      	ldr	r3, [pc, #176]	@ (8001678 <GPIOPinsInit+0x1f0>)
 80015c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015ca:	f003 0320 	and.w	r3, r3, #32
 80015ce:	61fb      	str	r3, [r7, #28]
 80015d0:	69fb      	ldr	r3, [r7, #28]
	break;
 80015d2:	e02d      	b.n	8001630 <GPIOPinsInit+0x1a8>
	case GPIOG_BASE:	__HAL_RCC_GPIOG_CLK_ENABLE();
 80015d4:	2300      	movs	r3, #0
 80015d6:	61bb      	str	r3, [r7, #24]
 80015d8:	4b27      	ldr	r3, [pc, #156]	@ (8001678 <GPIOPinsInit+0x1f0>)
 80015da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015dc:	4a26      	ldr	r2, [pc, #152]	@ (8001678 <GPIOPinsInit+0x1f0>)
 80015de:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80015e2:	6313      	str	r3, [r2, #48]	@ 0x30
 80015e4:	4b24      	ldr	r3, [pc, #144]	@ (8001678 <GPIOPinsInit+0x1f0>)
 80015e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80015ec:	61bb      	str	r3, [r7, #24]
 80015ee:	69bb      	ldr	r3, [r7, #24]
	break;
 80015f0:	e01e      	b.n	8001630 <GPIOPinsInit+0x1a8>
	case GPIOH_BASE:	__HAL_RCC_GPIOH_CLK_ENABLE();
 80015f2:	2300      	movs	r3, #0
 80015f4:	617b      	str	r3, [r7, #20]
 80015f6:	4b20      	ldr	r3, [pc, #128]	@ (8001678 <GPIOPinsInit+0x1f0>)
 80015f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015fa:	4a1f      	ldr	r2, [pc, #124]	@ (8001678 <GPIOPinsInit+0x1f0>)
 80015fc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001600:	6313      	str	r3, [r2, #48]	@ 0x30
 8001602:	4b1d      	ldr	r3, [pc, #116]	@ (8001678 <GPIOPinsInit+0x1f0>)
 8001604:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001606:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800160a:	617b      	str	r3, [r7, #20]
 800160c:	697b      	ldr	r3, [r7, #20]
	break;
 800160e:	e00f      	b.n	8001630 <GPIOPinsInit+0x1a8>
	case GPIOI_BASE:	__HAL_RCC_GPIOI_CLK_ENABLE();
 8001610:	2300      	movs	r3, #0
 8001612:	613b      	str	r3, [r7, #16]
 8001614:	4b18      	ldr	r3, [pc, #96]	@ (8001678 <GPIOPinsInit+0x1f0>)
 8001616:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001618:	4a17      	ldr	r2, [pc, #92]	@ (8001678 <GPIOPinsInit+0x1f0>)
 800161a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800161e:	6313      	str	r3, [r2, #48]	@ 0x30
 8001620:	4b15      	ldr	r3, [pc, #84]	@ (8001678 <GPIOPinsInit+0x1f0>)
 8001622:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001624:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001628:	613b      	str	r3, [r7, #16]
 800162a:	693b      	ldr	r3, [r7, #16]
	break;
 800162c:	e000      	b.n	8001630 <GPIOPinsInit+0x1a8>
	default: break;
 800162e:	bf00      	nop
	}


	GPIO_InitStruct.Pin = GPIO_Pin;
 8001630:	897b      	ldrh	r3, [r7, #10]
 8001632:	637b      	str	r3, [r7, #52]	@ 0x34
	GPIO_InitStruct.Mode = Mode;
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	63bb      	str	r3, [r7, #56]	@ 0x38
	GPIO_InitStruct.Pull = GPIO_PuPd;
 8001638:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800163a:	63fb      	str	r3, [r7, #60]	@ 0x3c
	GPIO_InitStruct.Speed = GPIO_Speed;
 800163c:	683b      	ldr	r3, [r7, #0]
 800163e:	643b      	str	r3, [r7, #64]	@ 0x40
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8001640:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001644:	4619      	mov	r1, r3
 8001646:	68f8      	ldr	r0, [r7, #12]
 8001648:	f00c f8f4 	bl	800d834 <HAL_GPIO_Init>

}
 800164c:	bf00      	nop
 800164e:	3748      	adds	r7, #72	@ 0x48
 8001650:	46bd      	mov	sp, r7
 8001652:	bd80      	pop	{r7, pc}
 8001654:	40022000 	.word	0x40022000
 8001658:	40021c00 	.word	0x40021c00
 800165c:	40021800 	.word	0x40021800
 8001660:	40021400 	.word	0x40021400
 8001664:	40021000 	.word	0x40021000
 8001668:	40020c00 	.word	0x40020c00
 800166c:	40020800 	.word	0x40020800
 8001670:	40020000 	.word	0x40020000
 8001674:	40020400 	.word	0x40020400
 8001678:	40023800 	.word	0x40023800

0800167c <MUXInit>:
 * Function Example		: MUXInit(&mux1, GPIOD, GPIO_Pin_0, GPIOD, GPIO_Pin_1, GPIOD, GPIO_Pin_2, GPIOD, GPIO_Pin_3);
 */
void MUXInit(MUX_t* mux,GPIO_TypeDef *GPIOx_Input,uint16_t GPIO_Pin_Input,GPIO_TypeDef *GPIOx_S0,
		uint16_t GPIO_Pin_S0,GPIO_TypeDef *GPIOx_S1,uint16_t GPIO_Pin_S1,GPIO_TypeDef *GPIOx_S2,
		uint16_t GPIO_Pin_S2)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	b086      	sub	sp, #24
 8001680:	af02      	add	r7, sp, #8
 8001682:	60f8      	str	r0, [r7, #12]
 8001684:	60b9      	str	r1, [r7, #8]
 8001686:	603b      	str	r3, [r7, #0]
 8001688:	4613      	mov	r3, r2
 800168a:	80fb      	strh	r3, [r7, #6]
	mux->GPIOx_Input = GPIOx_Input;
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	68ba      	ldr	r2, [r7, #8]
 8001690:	601a      	str	r2, [r3, #0]
	mux->GPIO_Pin_Input = GPIO_Pin_Input;
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	88fa      	ldrh	r2, [r7, #6]
 8001696:	809a      	strh	r2, [r3, #4]
	mux->GPIOx_S0 = GPIOx_S0;
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	683a      	ldr	r2, [r7, #0]
 800169c:	609a      	str	r2, [r3, #8]
	mux->GPIO_Pin_S0 = GPIO_Pin_S0;
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	8b3a      	ldrh	r2, [r7, #24]
 80016a2:	819a      	strh	r2, [r3, #12]
	mux->GPIOx_S1 = GPIOx_S1;
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	69fa      	ldr	r2, [r7, #28]
 80016a8:	611a      	str	r2, [r3, #16]
	mux->GPIO_Pin_S1 = GPIO_Pin_S1;
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	8c3a      	ldrh	r2, [r7, #32]
 80016ae:	829a      	strh	r2, [r3, #20]
	mux->GPIOx_S2 = GPIOx_S2;
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80016b4:	619a      	str	r2, [r3, #24]
	mux->GPIO_Pin_S2 = GPIO_Pin_S2;
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 80016ba:	839a      	strh	r2, [r3, #28]

	GPIOPinsInit(mux->GPIOx_Input,mux->GPIO_Pin_Input,GPIO_MODE_INPUT,GPIO_SPEED_FREQ_HIGH, GPIO_PULLUP);
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	6818      	ldr	r0, [r3, #0]
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	8899      	ldrh	r1, [r3, #4]
 80016c4:	2301      	movs	r3, #1
 80016c6:	9300      	str	r3, [sp, #0]
 80016c8:	2302      	movs	r3, #2
 80016ca:	2200      	movs	r2, #0
 80016cc:	f7ff fedc 	bl	8001488 <GPIOPinsInit>
	GPIOPinsInit(mux->GPIOx_S0,mux->GPIO_Pin_S0, GPIO_MODE_OUTPUT_PP,GPIO_SPEED_FREQ_HIGH, GPIO_PULLUP);
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	6898      	ldr	r0, [r3, #8]
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	8999      	ldrh	r1, [r3, #12]
 80016d8:	2301      	movs	r3, #1
 80016da:	9300      	str	r3, [sp, #0]
 80016dc:	2302      	movs	r3, #2
 80016de:	2201      	movs	r2, #1
 80016e0:	f7ff fed2 	bl	8001488 <GPIOPinsInit>
	GPIOPinsInit(mux->GPIOx_S1,mux->GPIO_Pin_S1, GPIO_MODE_OUTPUT_PP,GPIO_SPEED_FREQ_HIGH, GPIO_PULLUP);
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	6918      	ldr	r0, [r3, #16]
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	8a99      	ldrh	r1, [r3, #20]
 80016ec:	2301      	movs	r3, #1
 80016ee:	9300      	str	r3, [sp, #0]
 80016f0:	2302      	movs	r3, #2
 80016f2:	2201      	movs	r2, #1
 80016f4:	f7ff fec8 	bl	8001488 <GPIOPinsInit>
	GPIOPinsInit(mux->GPIOx_S2,mux->GPIO_Pin_S2, GPIO_MODE_OUTPUT_PP,GPIO_SPEED_FREQ_HIGH, GPIO_PULLUP);
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	6998      	ldr	r0, [r3, #24]
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	8b99      	ldrh	r1, [r3, #28]
 8001700:	2301      	movs	r3, #1
 8001702:	9300      	str	r3, [sp, #0]
 8001704:	2302      	movs	r3, #2
 8001706:	2201      	movs	r2, #1
 8001708:	f7ff febe 	bl	8001488 <GPIOPinsInit>

}
 800170c:	bf00      	nop
 800170e:	3710      	adds	r7, #16
 8001710:	46bd      	mov	sp, r7
 8001712:	bd80      	pop	{r7, pc}

08001714 <MUXSelect>:
 * 						  select	selected input channel of multiplexer
 * Function Return		: Read data bit from multiplexer
 * Function Example		: mux->bit0 = MUXSelect(&mux, 0);
 */
uint8_t MUXSelect(MUX_t* mux, uint8_t select)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	b082      	sub	sp, #8
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
 800171c:	460b      	mov	r3, r1
 800171e:	70fb      	strb	r3, [r7, #3]
	mux->select = select;
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	78fa      	ldrb	r2, [r7, #3]
 8001724:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

	(mux->s0 == 1) ? HAL_GPIO_WritePin(mux->GPIOx_S0, mux->GPIO_Pin_S0, GPIO_PIN_SET) : HAL_GPIO_WritePin(mux->GPIOx_S0, mux->GPIO_Pin_S0, GPIO_PIN_RESET);
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800172e:	f003 0301 	and.w	r3, r3, #1
 8001732:	b2db      	uxtb	r3, r3
 8001734:	2b00      	cmp	r3, #0
 8001736:	d008      	beq.n	800174a <MUXSelect+0x36>
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	6898      	ldr	r0, [r3, #8]
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	899b      	ldrh	r3, [r3, #12]
 8001740:	2201      	movs	r2, #1
 8001742:	4619      	mov	r1, r3
 8001744:	f00c fb26 	bl	800dd94 <HAL_GPIO_WritePin>
 8001748:	e007      	b.n	800175a <MUXSelect+0x46>
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	6898      	ldr	r0, [r3, #8]
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	899b      	ldrh	r3, [r3, #12]
 8001752:	2200      	movs	r2, #0
 8001754:	4619      	mov	r1, r3
 8001756:	f00c fb1d 	bl	800dd94 <HAL_GPIO_WritePin>
	(mux->s1 == 1) ? HAL_GPIO_WritePin(mux->GPIOx_S1, mux->GPIO_Pin_S1, GPIO_PIN_SET) : HAL_GPIO_WritePin(mux->GPIOx_S1, mux->GPIO_Pin_S1, GPIO_PIN_RESET);
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001760:	f003 0302 	and.w	r3, r3, #2
 8001764:	b2db      	uxtb	r3, r3
 8001766:	2b00      	cmp	r3, #0
 8001768:	d008      	beq.n	800177c <MUXSelect+0x68>
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	6918      	ldr	r0, [r3, #16]
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	8a9b      	ldrh	r3, [r3, #20]
 8001772:	2201      	movs	r2, #1
 8001774:	4619      	mov	r1, r3
 8001776:	f00c fb0d 	bl	800dd94 <HAL_GPIO_WritePin>
 800177a:	e007      	b.n	800178c <MUXSelect+0x78>
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	6918      	ldr	r0, [r3, #16]
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	8a9b      	ldrh	r3, [r3, #20]
 8001784:	2200      	movs	r2, #0
 8001786:	4619      	mov	r1, r3
 8001788:	f00c fb04 	bl	800dd94 <HAL_GPIO_WritePin>
	(mux->s2 == 1) ? HAL_GPIO_WritePin(mux->GPIOx_S2, mux->GPIO_Pin_S2, GPIO_PIN_SET) : HAL_GPIO_WritePin(mux->GPIOx_S2, mux->GPIO_Pin_S2, GPIO_PIN_RESET);
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001792:	f003 0304 	and.w	r3, r3, #4
 8001796:	b2db      	uxtb	r3, r3
 8001798:	2b00      	cmp	r3, #0
 800179a:	d008      	beq.n	80017ae <MUXSelect+0x9a>
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	6998      	ldr	r0, [r3, #24]
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	8b9b      	ldrh	r3, [r3, #28]
 80017a4:	2201      	movs	r2, #1
 80017a6:	4619      	mov	r1, r3
 80017a8:	f00c faf4 	bl	800dd94 <HAL_GPIO_WritePin>
 80017ac:	e007      	b.n	80017be <MUXSelect+0xaa>
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	6998      	ldr	r0, [r3, #24]
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	8b9b      	ldrh	r3, [r3, #28]
 80017b6:	2200      	movs	r2, #0
 80017b8:	4619      	mov	r1, r3
 80017ba:	f00c faeb 	bl	800dd94 <HAL_GPIO_WritePin>

	return HAL_GPIO_ReadPin(mux->GPIOx_Input, mux->GPIO_Pin_Input);
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681a      	ldr	r2, [r3, #0]
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	889b      	ldrh	r3, [r3, #4]
 80017c6:	4619      	mov	r1, r3
 80017c8:	4610      	mov	r0, r2
 80017ca:	f00c facb 	bl	800dd64 <HAL_GPIO_ReadPin>
 80017ce:	4603      	mov	r3, r0
}
 80017d0:	4618      	mov	r0, r3
 80017d2:	3708      	adds	r7, #8
 80017d4:	46bd      	mov	sp, r7
 80017d6:	bd80      	pop	{r7, pc}

080017d8 <MUXUpdate>:
 * Function Remarks		: None
 * Function Arguments	: mux	pointer to structure
 * Function Return		: None
 * Function Example		: MUXUpdate(&mux1);
 */
void MUXUpdate(MUX_t* mux){
 80017d8:	b580      	push	{r7, lr}
 80017da:	b084      	sub	sp, #16
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]

	for(int i = 0; i < 8 ; i++){
 80017e0:	2300      	movs	r3, #0
 80017e2:	60fb      	str	r3, [r7, #12]
 80017e4:	e0aa      	b.n	800193c <MUXUpdate+0x164>

		switch(i){
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	2b07      	cmp	r3, #7
 80017ea:	f200 80a3 	bhi.w	8001934 <MUXUpdate+0x15c>
 80017ee:	a201      	add	r2, pc, #4	@ (adr r2, 80017f4 <MUXUpdate+0x1c>)
 80017f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017f4:	08001815 	.word	0x08001815
 80017f8:	08001839 	.word	0x08001839
 80017fc:	0800185d 	.word	0x0800185d
 8001800:	08001881 	.word	0x08001881
 8001804:	080018a5 	.word	0x080018a5
 8001808:	080018c9 	.word	0x080018c9
 800180c:	080018ed 	.word	0x080018ed
 8001810:	08001911 	.word	0x08001911

			case 0 : mux->mux_data.bit0 = MUXSelect(mux, i);
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	b2db      	uxtb	r3, r3
 8001818:	4619      	mov	r1, r3
 800181a:	6878      	ldr	r0, [r7, #4]
 800181c:	f7ff ff7a 	bl	8001714 <MUXSelect>
 8001820:	4603      	mov	r3, r0
 8001822:	f003 0301 	and.w	r3, r3, #1
 8001826:	b2d9      	uxtb	r1, r3
 8001828:	687a      	ldr	r2, [r7, #4]
 800182a:	f892 3020 	ldrb.w	r3, [r2, #32]
 800182e:	f361 0300 	bfi	r3, r1, #0, #1
 8001832:	f882 3020 	strb.w	r3, [r2, #32]
				break;
 8001836:	e07e      	b.n	8001936 <MUXUpdate+0x15e>

			case 1 : mux->mux_data.bit1 = MUXSelect(mux, i);
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	b2db      	uxtb	r3, r3
 800183c:	4619      	mov	r1, r3
 800183e:	6878      	ldr	r0, [r7, #4]
 8001840:	f7ff ff68 	bl	8001714 <MUXSelect>
 8001844:	4603      	mov	r3, r0
 8001846:	f003 0301 	and.w	r3, r3, #1
 800184a:	b2d9      	uxtb	r1, r3
 800184c:	687a      	ldr	r2, [r7, #4]
 800184e:	f892 3020 	ldrb.w	r3, [r2, #32]
 8001852:	f361 0341 	bfi	r3, r1, #1, #1
 8001856:	f882 3020 	strb.w	r3, [r2, #32]
				break;
 800185a:	e06c      	b.n	8001936 <MUXUpdate+0x15e>

			case 2 : mux->mux_data.bit2 = MUXSelect(mux, i);
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	b2db      	uxtb	r3, r3
 8001860:	4619      	mov	r1, r3
 8001862:	6878      	ldr	r0, [r7, #4]
 8001864:	f7ff ff56 	bl	8001714 <MUXSelect>
 8001868:	4603      	mov	r3, r0
 800186a:	f003 0301 	and.w	r3, r3, #1
 800186e:	b2d9      	uxtb	r1, r3
 8001870:	687a      	ldr	r2, [r7, #4]
 8001872:	f892 3020 	ldrb.w	r3, [r2, #32]
 8001876:	f361 0382 	bfi	r3, r1, #2, #1
 800187a:	f882 3020 	strb.w	r3, [r2, #32]
				break;
 800187e:	e05a      	b.n	8001936 <MUXUpdate+0x15e>

			case 3 : mux->mux_data.bit3 = MUXSelect(mux, i);
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	b2db      	uxtb	r3, r3
 8001884:	4619      	mov	r1, r3
 8001886:	6878      	ldr	r0, [r7, #4]
 8001888:	f7ff ff44 	bl	8001714 <MUXSelect>
 800188c:	4603      	mov	r3, r0
 800188e:	f003 0301 	and.w	r3, r3, #1
 8001892:	b2d9      	uxtb	r1, r3
 8001894:	687a      	ldr	r2, [r7, #4]
 8001896:	f892 3020 	ldrb.w	r3, [r2, #32]
 800189a:	f361 03c3 	bfi	r3, r1, #3, #1
 800189e:	f882 3020 	strb.w	r3, [r2, #32]
				break;
 80018a2:	e048      	b.n	8001936 <MUXUpdate+0x15e>

			case 4 : mux->mux_data.bit4 = MUXSelect(mux, i);
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	b2db      	uxtb	r3, r3
 80018a8:	4619      	mov	r1, r3
 80018aa:	6878      	ldr	r0, [r7, #4]
 80018ac:	f7ff ff32 	bl	8001714 <MUXSelect>
 80018b0:	4603      	mov	r3, r0
 80018b2:	f003 0301 	and.w	r3, r3, #1
 80018b6:	b2d9      	uxtb	r1, r3
 80018b8:	687a      	ldr	r2, [r7, #4]
 80018ba:	f892 3020 	ldrb.w	r3, [r2, #32]
 80018be:	f361 1304 	bfi	r3, r1, #4, #1
 80018c2:	f882 3020 	strb.w	r3, [r2, #32]
				break;
 80018c6:	e036      	b.n	8001936 <MUXUpdate+0x15e>

			case 5 : mux->mux_data.bit5 = MUXSelect(mux, i);
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	b2db      	uxtb	r3, r3
 80018cc:	4619      	mov	r1, r3
 80018ce:	6878      	ldr	r0, [r7, #4]
 80018d0:	f7ff ff20 	bl	8001714 <MUXSelect>
 80018d4:	4603      	mov	r3, r0
 80018d6:	f003 0301 	and.w	r3, r3, #1
 80018da:	b2d9      	uxtb	r1, r3
 80018dc:	687a      	ldr	r2, [r7, #4]
 80018de:	f892 3020 	ldrb.w	r3, [r2, #32]
 80018e2:	f361 1345 	bfi	r3, r1, #5, #1
 80018e6:	f882 3020 	strb.w	r3, [r2, #32]
				break;
 80018ea:	e024      	b.n	8001936 <MUXUpdate+0x15e>

			case 6 : mux->mux_data.bit6 = MUXSelect(mux, i);
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	b2db      	uxtb	r3, r3
 80018f0:	4619      	mov	r1, r3
 80018f2:	6878      	ldr	r0, [r7, #4]
 80018f4:	f7ff ff0e 	bl	8001714 <MUXSelect>
 80018f8:	4603      	mov	r3, r0
 80018fa:	f003 0301 	and.w	r3, r3, #1
 80018fe:	b2d9      	uxtb	r1, r3
 8001900:	687a      	ldr	r2, [r7, #4]
 8001902:	f892 3020 	ldrb.w	r3, [r2, #32]
 8001906:	f361 1386 	bfi	r3, r1, #6, #1
 800190a:	f882 3020 	strb.w	r3, [r2, #32]
				break;
 800190e:	e012      	b.n	8001936 <MUXUpdate+0x15e>

			case 7 : mux->mux_data.bit7 = MUXSelect(mux, i);
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	b2db      	uxtb	r3, r3
 8001914:	4619      	mov	r1, r3
 8001916:	6878      	ldr	r0, [r7, #4]
 8001918:	f7ff fefc 	bl	8001714 <MUXSelect>
 800191c:	4603      	mov	r3, r0
 800191e:	f003 0301 	and.w	r3, r3, #1
 8001922:	b2d9      	uxtb	r1, r3
 8001924:	687a      	ldr	r2, [r7, #4]
 8001926:	f892 3020 	ldrb.w	r3, [r2, #32]
 800192a:	f361 13c7 	bfi	r3, r1, #7, #1
 800192e:	f882 3020 	strb.w	r3, [r2, #32]
				break;
 8001932:	e000      	b.n	8001936 <MUXUpdate+0x15e>

			default:
				break;
 8001934:	bf00      	nop
	for(int i = 0; i < 8 ; i++){
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	3301      	adds	r3, #1
 800193a:	60fb      	str	r3, [r7, #12]
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	2b07      	cmp	r3, #7
 8001940:	f77f af51 	ble.w	80017e6 <MUXUpdate+0xe>
		}

	}

}
 8001944:	bf00      	nop
 8001946:	bf00      	nop
 8001948:	3710      	adds	r7, #16
 800194a:	46bd      	mov	sp, r7
 800194c:	bd80      	pop	{r7, pc}
 800194e:	bf00      	nop

08001950 <PWMTimeBaseInit>:
 * 						  Prescaler 	Prescaler value to divide TIM clock (1 to 65535)
 * Function Return		: None
 * Function Example		: PWMTimeBaseInit(&htim3, 20000, 84);
 */
void PWMTimeBaseInit(TIM_HandleTypeDef* htimx, uint32_t Period, uint32_t Prescaler)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	b08a      	sub	sp, #40	@ 0x28
 8001954:	af00      	add	r7, sp, #0
 8001956:	60f8      	str	r0, [r7, #12]
 8001958:	60b9      	str	r1, [r7, #8]
 800195a:	607a      	str	r2, [r7, #4]

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800195c:	f107 0318 	add.w	r3, r7, #24
 8001960:	2200      	movs	r2, #0
 8001962:	601a      	str	r2, [r3, #0]
 8001964:	605a      	str	r2, [r3, #4]
 8001966:	609a      	str	r2, [r3, #8]
 8001968:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 800196a:	f107 0310 	add.w	r3, r7, #16
 800196e:	2200      	movs	r2, #0
 8001970:	601a      	str	r2, [r3, #0]
 8001972:	605a      	str	r2, [r3, #4]


	if(htimx == &htim1){
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	4a52      	ldr	r2, [pc, #328]	@ (8001ac0 <PWMTimeBaseInit+0x170>)
 8001978:	4293      	cmp	r3, r2
 800197a:	d103      	bne.n	8001984 <PWMTimeBaseInit+0x34>
		htimx->Instance = TIM1;
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	4a51      	ldr	r2, [pc, #324]	@ (8001ac4 <PWMTimeBaseInit+0x174>)
 8001980:	601a      	str	r2, [r3, #0]
 8001982:	e057      	b.n	8001a34 <PWMTimeBaseInit+0xe4>
	}
	else if(htimx == &htim2)	{
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	4a50      	ldr	r2, [pc, #320]	@ (8001ac8 <PWMTimeBaseInit+0x178>)
 8001988:	4293      	cmp	r3, r2
 800198a:	d104      	bne.n	8001996 <PWMTimeBaseInit+0x46>
		htimx->Instance = TIM2;
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001992:	601a      	str	r2, [r3, #0]
 8001994:	e04e      	b.n	8001a34 <PWMTimeBaseInit+0xe4>
	}
	else if(htimx == &htim3)	{
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	4a4c      	ldr	r2, [pc, #304]	@ (8001acc <PWMTimeBaseInit+0x17c>)
 800199a:	4293      	cmp	r3, r2
 800199c:	d103      	bne.n	80019a6 <PWMTimeBaseInit+0x56>
		htimx->Instance = TIM3;
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	4a4b      	ldr	r2, [pc, #300]	@ (8001ad0 <PWMTimeBaseInit+0x180>)
 80019a2:	601a      	str	r2, [r3, #0]
 80019a4:	e046      	b.n	8001a34 <PWMTimeBaseInit+0xe4>
	}
	else if(htimx == &htim4)	{
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	4a4a      	ldr	r2, [pc, #296]	@ (8001ad4 <PWMTimeBaseInit+0x184>)
 80019aa:	4293      	cmp	r3, r2
 80019ac:	d103      	bne.n	80019b6 <PWMTimeBaseInit+0x66>
		htimx->Instance = TIM4;
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	4a49      	ldr	r2, [pc, #292]	@ (8001ad8 <PWMTimeBaseInit+0x188>)
 80019b2:	601a      	str	r2, [r3, #0]
 80019b4:	e03e      	b.n	8001a34 <PWMTimeBaseInit+0xe4>
	}
	else if(htimx == &htim5)	{
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	4a48      	ldr	r2, [pc, #288]	@ (8001adc <PWMTimeBaseInit+0x18c>)
 80019ba:	4293      	cmp	r3, r2
 80019bc:	d103      	bne.n	80019c6 <PWMTimeBaseInit+0x76>
		htimx->Instance = TIM5;
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	4a47      	ldr	r2, [pc, #284]	@ (8001ae0 <PWMTimeBaseInit+0x190>)
 80019c2:	601a      	str	r2, [r3, #0]
 80019c4:	e036      	b.n	8001a34 <PWMTimeBaseInit+0xe4>
	}
	else if(htimx == &htim8)	{
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	4a46      	ldr	r2, [pc, #280]	@ (8001ae4 <PWMTimeBaseInit+0x194>)
 80019ca:	4293      	cmp	r3, r2
 80019cc:	d103      	bne.n	80019d6 <PWMTimeBaseInit+0x86>
		htimx->Instance = TIM8;
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	4a45      	ldr	r2, [pc, #276]	@ (8001ae8 <PWMTimeBaseInit+0x198>)
 80019d2:	601a      	str	r2, [r3, #0]
 80019d4:	e02e      	b.n	8001a34 <PWMTimeBaseInit+0xe4>
	}
	else if(htimx == &htim9)	{
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	4a44      	ldr	r2, [pc, #272]	@ (8001aec <PWMTimeBaseInit+0x19c>)
 80019da:	4293      	cmp	r3, r2
 80019dc:	d103      	bne.n	80019e6 <PWMTimeBaseInit+0x96>
		htimx->Instance = TIM9;
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	4a43      	ldr	r2, [pc, #268]	@ (8001af0 <PWMTimeBaseInit+0x1a0>)
 80019e2:	601a      	str	r2, [r3, #0]
 80019e4:	e026      	b.n	8001a34 <PWMTimeBaseInit+0xe4>
	}
	else if(htimx == &htim10)	{
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	4a42      	ldr	r2, [pc, #264]	@ (8001af4 <PWMTimeBaseInit+0x1a4>)
 80019ea:	4293      	cmp	r3, r2
 80019ec:	d103      	bne.n	80019f6 <PWMTimeBaseInit+0xa6>
		htimx->Instance = TIM10;
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	4a41      	ldr	r2, [pc, #260]	@ (8001af8 <PWMTimeBaseInit+0x1a8>)
 80019f2:	601a      	str	r2, [r3, #0]
 80019f4:	e01e      	b.n	8001a34 <PWMTimeBaseInit+0xe4>
	}
	else if(htimx == &htim11)	{
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	4a40      	ldr	r2, [pc, #256]	@ (8001afc <PWMTimeBaseInit+0x1ac>)
 80019fa:	4293      	cmp	r3, r2
 80019fc:	d103      	bne.n	8001a06 <PWMTimeBaseInit+0xb6>
		htimx->Instance = TIM11;
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	4a3f      	ldr	r2, [pc, #252]	@ (8001b00 <PWMTimeBaseInit+0x1b0>)
 8001a02:	601a      	str	r2, [r3, #0]
 8001a04:	e016      	b.n	8001a34 <PWMTimeBaseInit+0xe4>
	}
	else if(htimx == &htim12)	{
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	4a3e      	ldr	r2, [pc, #248]	@ (8001b04 <PWMTimeBaseInit+0x1b4>)
 8001a0a:	4293      	cmp	r3, r2
 8001a0c:	d103      	bne.n	8001a16 <PWMTimeBaseInit+0xc6>
		htimx->Instance = TIM12;
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	4a3d      	ldr	r2, [pc, #244]	@ (8001b08 <PWMTimeBaseInit+0x1b8>)
 8001a12:	601a      	str	r2, [r3, #0]
 8001a14:	e00e      	b.n	8001a34 <PWMTimeBaseInit+0xe4>
	}
	else if(htimx == &htim13)	{
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	4a3c      	ldr	r2, [pc, #240]	@ (8001b0c <PWMTimeBaseInit+0x1bc>)
 8001a1a:	4293      	cmp	r3, r2
 8001a1c:	d103      	bne.n	8001a26 <PWMTimeBaseInit+0xd6>
		htimx->Instance = TIM13;
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	4a3b      	ldr	r2, [pc, #236]	@ (8001b10 <PWMTimeBaseInit+0x1c0>)
 8001a22:	601a      	str	r2, [r3, #0]
 8001a24:	e006      	b.n	8001a34 <PWMTimeBaseInit+0xe4>
		}
	else if(htimx == &htim14)	{
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	4a3a      	ldr	r2, [pc, #232]	@ (8001b14 <PWMTimeBaseInit+0x1c4>)
 8001a2a:	4293      	cmp	r3, r2
 8001a2c:	d102      	bne.n	8001a34 <PWMTimeBaseInit+0xe4>
		htimx->Instance = TIM14;
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	4a39      	ldr	r2, [pc, #228]	@ (8001b18 <PWMTimeBaseInit+0x1c8>)
 8001a32:	601a      	str	r2, [r3, #0]
		}

	htimx->Init.Prescaler = Prescaler - 1;
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	1e5a      	subs	r2, r3, #1
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	605a      	str	r2, [r3, #4]
	htimx->Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	2200      	movs	r2, #0
 8001a40:	609a      	str	r2, [r3, #8]
	htimx->Init.Period = Period - 1;
 8001a42:	68bb      	ldr	r3, [r7, #8]
 8001a44:	1e5a      	subs	r2, r3, #1
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	60da      	str	r2, [r3, #12]
	htimx->Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	611a      	str	r2, [r3, #16]
	htimx->Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	2280      	movs	r2, #128	@ 0x80
 8001a54:	619a      	str	r2, [r3, #24]
	 if (HAL_TIM_Base_Init(htimx) != HAL_OK)
 8001a56:	68f8      	ldr	r0, [r7, #12]
 8001a58:	f011 fb49 	bl	80130ee <HAL_TIM_Base_Init>
 8001a5c:	4603      	mov	r3, r0
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d001      	beq.n	8001a66 <PWMTimeBaseInit+0x116>
	  {
	    Error_Handler();
 8001a62:	f00a f8d3 	bl	800bc0c <Error_Handler>
	  }
	  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a66:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001a6a:	61bb      	str	r3, [r7, #24]
	  if (HAL_TIM_ConfigClockSource(htimx, &sClockSourceConfig) != HAL_OK)
 8001a6c:	f107 0318 	add.w	r3, r7, #24
 8001a70:	4619      	mov	r1, r3
 8001a72:	68f8      	ldr	r0, [r7, #12]
 8001a74:	f012 f878 	bl	8013b68 <HAL_TIM_ConfigClockSource>
 8001a78:	4603      	mov	r3, r0
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d001      	beq.n	8001a82 <PWMTimeBaseInit+0x132>
	  {
	    Error_Handler();
 8001a7e:	f00a f8c5 	bl	800bc0c <Error_Handler>
	  }
	if (HAL_TIM_PWM_Init(htimx) != HAL_OK)
 8001a82:	68f8      	ldr	r0, [r7, #12]
 8001a84:	f011 fc5a 	bl	801333c <HAL_TIM_PWM_Init>
 8001a88:	4603      	mov	r3, r0
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d001      	beq.n	8001a92 <PWMTimeBaseInit+0x142>
		{
			Error_Handler();
 8001a8e:	f00a f8bd 	bl	800bc0c <Error_Handler>
		}

	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a92:	2300      	movs	r3, #0
 8001a94:	613b      	str	r3, [r7, #16]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a96:	2300      	movs	r3, #0
 8001a98:	617b      	str	r3, [r7, #20]
	if (HAL_TIMEx_MasterConfigSynchronization(htimx, &sMasterConfig) != HAL_OK)
 8001a9a:	f107 0310 	add.w	r3, r7, #16
 8001a9e:	4619      	mov	r1, r3
 8001aa0:	68f8      	ldr	r0, [r7, #12]
 8001aa2:	f012 fc61 	bl	8014368 <HAL_TIMEx_MasterConfigSynchronization>
 8001aa6:	4603      	mov	r3, r0
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d001      	beq.n	8001ab0 <PWMTimeBaseInit+0x160>
	{
		Error_Handler();
 8001aac:	f00a f8ae 	bl	800bc0c <Error_Handler>
	}


    HAL_TIM_Base_Start(htimx);
 8001ab0:	68f8      	ldr	r0, [r7, #12]
 8001ab2:	f011 fb6b 	bl	801318c <HAL_TIM_Base_Start>

}
 8001ab6:	bf00      	nop
 8001ab8:	3728      	adds	r7, #40	@ 0x28
 8001aba:	46bd      	mov	sp, r7
 8001abc:	bd80      	pop	{r7, pc}
 8001abe:	bf00      	nop
 8001ac0:	20006710 	.word	0x20006710
 8001ac4:	40010000 	.word	0x40010000
 8001ac8:	2000682c 	.word	0x2000682c
 8001acc:	20006438 	.word	0x20006438
 8001ad0:	40000400 	.word	0x40000400
 8001ad4:	20006258 	.word	0x20006258
 8001ad8:	40000800 	.word	0x40000800
 8001adc:	200063f0 	.word	0x200063f0
 8001ae0:	40000c00 	.word	0x40000c00
 8001ae4:	20006210 	.word	0x20006210
 8001ae8:	40010400 	.word	0x40010400
 8001aec:	20006758 	.word	0x20006758
 8001af0:	40014000 	.word	0x40014000
 8001af4:	20006344 	.word	0x20006344
 8001af8:	40014400 	.word	0x40014400
 8001afc:	20006618 	.word	0x20006618
 8001b00:	40014800 	.word	0x40014800
 8001b04:	20006960 	.word	0x20006960
 8001b08:	40001800 	.word	0x40001800
 8001b0c:	20006528 	.word	0x20006528
 8001b10:	40001c00 	.word	0x40001c00
 8001b14:	20006918 	.word	0x20006918
 8001b18:	40002000 	.word	0x40002000

08001b1c <PWMChannelConfig>:
 * 						  GPIO_Pin_x	GPIO_Pin_x of PWM pin(x = 0,1,2,...or 15)
 * Function Return		: None
 * Function Example		: PWMChannelConfig(&htim3, TIM_CHANNEL_3, TIM3_CHANNEL3_PIN);
 */

void PWMChannelConfig(TIM_HandleTypeDef* htimx, uint32_t Channel , GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin_x){
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b09a      	sub	sp, #104	@ 0x68
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	60f8      	str	r0, [r7, #12]
 8001b24:	60b9      	str	r1, [r7, #8]
 8001b26:	607a      	str	r2, [r7, #4]
 8001b28:	807b      	strh	r3, [r7, #2]

	TIM_OC_InitTypeDef sConfigOC = {0};
 8001b2a:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8001b2e:	2200      	movs	r2, #0
 8001b30:	601a      	str	r2, [r3, #0]
 8001b32:	605a      	str	r2, [r3, #4]
 8001b34:	609a      	str	r2, [r3, #8]
 8001b36:	60da      	str	r2, [r3, #12]
 8001b38:	611a      	str	r2, [r3, #16]
 8001b3a:	615a      	str	r2, [r3, #20]
 8001b3c:	619a      	str	r2, [r3, #24]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b3e:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001b42:	2200      	movs	r2, #0
 8001b44:	601a      	str	r2, [r3, #0]
 8001b46:	605a      	str	r2, [r3, #4]
 8001b48:	609a      	str	r2, [r3, #8]
 8001b4a:	60da      	str	r2, [r3, #12]
 8001b4c:	611a      	str	r2, [r3, #16]

	sConfigOC.OCMode = TIM_OCMODE_PWM2;
 8001b4e:	2370      	movs	r3, #112	@ 0x70
 8001b50:	64fb      	str	r3, [r7, #76]	@ 0x4c
	sConfigOC.Pulse = 0;
 8001b52:	2300      	movs	r3, #0
 8001b54:	653b      	str	r3, [r7, #80]	@ 0x50
	sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8001b56:	2302      	movs	r3, #2
 8001b58:	657b      	str	r3, [r7, #84]	@ 0x54
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_LOW;
 8001b5a:	2308      	movs	r3, #8
 8001b5c:	65bb      	str	r3, [r7, #88]	@ 0x58
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001b5e:	2300      	movs	r3, #0
 8001b60:	65fb      	str	r3, [r7, #92]	@ 0x5c
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001b62:	2300      	movs	r3, #0
 8001b64:	663b      	str	r3, [r7, #96]	@ 0x60
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001b66:	2300      	movs	r3, #0
 8001b68:	667b      	str	r3, [r7, #100]	@ 0x64

	if (HAL_TIM_PWM_ConfigChannel(htimx, &sConfigOC, Channel) != HAL_OK)
 8001b6a:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8001b6e:	68ba      	ldr	r2, [r7, #8]
 8001b70:	4619      	mov	r1, r3
 8001b72:	68f8      	ldr	r0, [r7, #12]
 8001b74:	f011 ff36 	bl	80139e4 <HAL_TIM_PWM_ConfigChannel>
 8001b78:	4603      	mov	r3, r0
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d001      	beq.n	8001b82 <PWMChannelConfig+0x66>
	{
		Error_Handler();
 8001b7e:	f00a f845 	bl	800bc0c <Error_Handler>
	}

	switch((uint32_t)GPIOx){
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	4a95      	ldr	r2, [pc, #596]	@ (8001ddc <PWMChannelConfig+0x2c0>)
 8001b86:	4293      	cmp	r3, r2
 8001b88:	f000 80af 	beq.w	8001cea <PWMChannelConfig+0x1ce>
 8001b8c:	4a93      	ldr	r2, [pc, #588]	@ (8001ddc <PWMChannelConfig+0x2c0>)
 8001b8e:	4293      	cmp	r3, r2
 8001b90:	f200 80ba 	bhi.w	8001d08 <PWMChannelConfig+0x1ec>
 8001b94:	4a92      	ldr	r2, [pc, #584]	@ (8001de0 <PWMChannelConfig+0x2c4>)
 8001b96:	4293      	cmp	r3, r2
 8001b98:	f000 8098 	beq.w	8001ccc <PWMChannelConfig+0x1b0>
 8001b9c:	4a90      	ldr	r2, [pc, #576]	@ (8001de0 <PWMChannelConfig+0x2c4>)
 8001b9e:	4293      	cmp	r3, r2
 8001ba0:	f200 80b2 	bhi.w	8001d08 <PWMChannelConfig+0x1ec>
 8001ba4:	4a8f      	ldr	r2, [pc, #572]	@ (8001de4 <PWMChannelConfig+0x2c8>)
 8001ba6:	4293      	cmp	r3, r2
 8001ba8:	f000 8081 	beq.w	8001cae <PWMChannelConfig+0x192>
 8001bac:	4a8d      	ldr	r2, [pc, #564]	@ (8001de4 <PWMChannelConfig+0x2c8>)
 8001bae:	4293      	cmp	r3, r2
 8001bb0:	f200 80aa 	bhi.w	8001d08 <PWMChannelConfig+0x1ec>
 8001bb4:	4a8c      	ldr	r2, [pc, #560]	@ (8001de8 <PWMChannelConfig+0x2cc>)
 8001bb6:	4293      	cmp	r3, r2
 8001bb8:	d06a      	beq.n	8001c90 <PWMChannelConfig+0x174>
 8001bba:	4a8b      	ldr	r2, [pc, #556]	@ (8001de8 <PWMChannelConfig+0x2cc>)
 8001bbc:	4293      	cmp	r3, r2
 8001bbe:	f200 80a3 	bhi.w	8001d08 <PWMChannelConfig+0x1ec>
 8001bc2:	4a8a      	ldr	r2, [pc, #552]	@ (8001dec <PWMChannelConfig+0x2d0>)
 8001bc4:	4293      	cmp	r3, r2
 8001bc6:	d054      	beq.n	8001c72 <PWMChannelConfig+0x156>
 8001bc8:	4a88      	ldr	r2, [pc, #544]	@ (8001dec <PWMChannelConfig+0x2d0>)
 8001bca:	4293      	cmp	r3, r2
 8001bcc:	f200 809c 	bhi.w	8001d08 <PWMChannelConfig+0x1ec>
 8001bd0:	4a87      	ldr	r2, [pc, #540]	@ (8001df0 <PWMChannelConfig+0x2d4>)
 8001bd2:	4293      	cmp	r3, r2
 8001bd4:	d03e      	beq.n	8001c54 <PWMChannelConfig+0x138>
 8001bd6:	4a86      	ldr	r2, [pc, #536]	@ (8001df0 <PWMChannelConfig+0x2d4>)
 8001bd8:	4293      	cmp	r3, r2
 8001bda:	f200 8095 	bhi.w	8001d08 <PWMChannelConfig+0x1ec>
 8001bde:	4a85      	ldr	r2, [pc, #532]	@ (8001df4 <PWMChannelConfig+0x2d8>)
 8001be0:	4293      	cmp	r3, r2
 8001be2:	d028      	beq.n	8001c36 <PWMChannelConfig+0x11a>
 8001be4:	4a83      	ldr	r2, [pc, #524]	@ (8001df4 <PWMChannelConfig+0x2d8>)
 8001be6:	4293      	cmp	r3, r2
 8001be8:	f200 808e 	bhi.w	8001d08 <PWMChannelConfig+0x1ec>
 8001bec:	4a82      	ldr	r2, [pc, #520]	@ (8001df8 <PWMChannelConfig+0x2dc>)
 8001bee:	4293      	cmp	r3, r2
 8001bf0:	d003      	beq.n	8001bfa <PWMChannelConfig+0xde>
 8001bf2:	4a82      	ldr	r2, [pc, #520]	@ (8001dfc <PWMChannelConfig+0x2e0>)
 8001bf4:	4293      	cmp	r3, r2
 8001bf6:	d00f      	beq.n	8001c18 <PWMChannelConfig+0xfc>
		break;

		case GPIOI_BASE:	__HAL_RCC_GPIOI_CLK_ENABLE();
		break;

		default: break;
 8001bf8:	e086      	b.n	8001d08 <PWMChannelConfig+0x1ec>
		case GPIOA_BASE:	  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	637b      	str	r3, [r7, #52]	@ 0x34
 8001bfe:	4b80      	ldr	r3, [pc, #512]	@ (8001e00 <PWMChannelConfig+0x2e4>)
 8001c00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c02:	4a7f      	ldr	r2, [pc, #508]	@ (8001e00 <PWMChannelConfig+0x2e4>)
 8001c04:	f043 0301 	orr.w	r3, r3, #1
 8001c08:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c0a:	4b7d      	ldr	r3, [pc, #500]	@ (8001e00 <PWMChannelConfig+0x2e4>)
 8001c0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c0e:	f003 0301 	and.w	r3, r3, #1
 8001c12:	637b      	str	r3, [r7, #52]	@ 0x34
 8001c14:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
		break;
 8001c16:	e078      	b.n	8001d0a <PWMChannelConfig+0x1ee>
		case GPIOB_BASE:	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001c18:	2300      	movs	r3, #0
 8001c1a:	633b      	str	r3, [r7, #48]	@ 0x30
 8001c1c:	4b78      	ldr	r3, [pc, #480]	@ (8001e00 <PWMChannelConfig+0x2e4>)
 8001c1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c20:	4a77      	ldr	r2, [pc, #476]	@ (8001e00 <PWMChannelConfig+0x2e4>)
 8001c22:	f043 0302 	orr.w	r3, r3, #2
 8001c26:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c28:	4b75      	ldr	r3, [pc, #468]	@ (8001e00 <PWMChannelConfig+0x2e4>)
 8001c2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c2c:	f003 0302 	and.w	r3, r3, #2
 8001c30:	633b      	str	r3, [r7, #48]	@ 0x30
 8001c32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
		break;
 8001c34:	e069      	b.n	8001d0a <PWMChannelConfig+0x1ee>
		case GPIOC_BASE:	__HAL_RCC_GPIOC_CLK_ENABLE();
 8001c36:	2300      	movs	r3, #0
 8001c38:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001c3a:	4b71      	ldr	r3, [pc, #452]	@ (8001e00 <PWMChannelConfig+0x2e4>)
 8001c3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c3e:	4a70      	ldr	r2, [pc, #448]	@ (8001e00 <PWMChannelConfig+0x2e4>)
 8001c40:	f043 0304 	orr.w	r3, r3, #4
 8001c44:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c46:	4b6e      	ldr	r3, [pc, #440]	@ (8001e00 <PWMChannelConfig+0x2e4>)
 8001c48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c4a:	f003 0304 	and.w	r3, r3, #4
 8001c4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001c50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
		break;
 8001c52:	e05a      	b.n	8001d0a <PWMChannelConfig+0x1ee>
		case GPIOD_BASE:	__HAL_RCC_GPIOD_CLK_ENABLE();
 8001c54:	2300      	movs	r3, #0
 8001c56:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001c58:	4b69      	ldr	r3, [pc, #420]	@ (8001e00 <PWMChannelConfig+0x2e4>)
 8001c5a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c5c:	4a68      	ldr	r2, [pc, #416]	@ (8001e00 <PWMChannelConfig+0x2e4>)
 8001c5e:	f043 0308 	orr.w	r3, r3, #8
 8001c62:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c64:	4b66      	ldr	r3, [pc, #408]	@ (8001e00 <PWMChannelConfig+0x2e4>)
 8001c66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c68:	f003 0308 	and.w	r3, r3, #8
 8001c6c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001c6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
		break;
 8001c70:	e04b      	b.n	8001d0a <PWMChannelConfig+0x1ee>
		case GPIOE_BASE:	__HAL_RCC_GPIOE_CLK_ENABLE();
 8001c72:	2300      	movs	r3, #0
 8001c74:	627b      	str	r3, [r7, #36]	@ 0x24
 8001c76:	4b62      	ldr	r3, [pc, #392]	@ (8001e00 <PWMChannelConfig+0x2e4>)
 8001c78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c7a:	4a61      	ldr	r2, [pc, #388]	@ (8001e00 <PWMChannelConfig+0x2e4>)
 8001c7c:	f043 0310 	orr.w	r3, r3, #16
 8001c80:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c82:	4b5f      	ldr	r3, [pc, #380]	@ (8001e00 <PWMChannelConfig+0x2e4>)
 8001c84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c86:	f003 0310 	and.w	r3, r3, #16
 8001c8a:	627b      	str	r3, [r7, #36]	@ 0x24
 8001c8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
		break;
 8001c8e:	e03c      	b.n	8001d0a <PWMChannelConfig+0x1ee>
		case GPIOF_BASE:	__HAL_RCC_GPIOF_CLK_ENABLE();
 8001c90:	2300      	movs	r3, #0
 8001c92:	623b      	str	r3, [r7, #32]
 8001c94:	4b5a      	ldr	r3, [pc, #360]	@ (8001e00 <PWMChannelConfig+0x2e4>)
 8001c96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c98:	4a59      	ldr	r2, [pc, #356]	@ (8001e00 <PWMChannelConfig+0x2e4>)
 8001c9a:	f043 0320 	orr.w	r3, r3, #32
 8001c9e:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ca0:	4b57      	ldr	r3, [pc, #348]	@ (8001e00 <PWMChannelConfig+0x2e4>)
 8001ca2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ca4:	f003 0320 	and.w	r3, r3, #32
 8001ca8:	623b      	str	r3, [r7, #32]
 8001caa:	6a3b      	ldr	r3, [r7, #32]
		break;
 8001cac:	e02d      	b.n	8001d0a <PWMChannelConfig+0x1ee>
		case GPIOG_BASE:	__HAL_RCC_GPIOG_CLK_ENABLE();
 8001cae:	2300      	movs	r3, #0
 8001cb0:	61fb      	str	r3, [r7, #28]
 8001cb2:	4b53      	ldr	r3, [pc, #332]	@ (8001e00 <PWMChannelConfig+0x2e4>)
 8001cb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cb6:	4a52      	ldr	r2, [pc, #328]	@ (8001e00 <PWMChannelConfig+0x2e4>)
 8001cb8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001cbc:	6313      	str	r3, [r2, #48]	@ 0x30
 8001cbe:	4b50      	ldr	r3, [pc, #320]	@ (8001e00 <PWMChannelConfig+0x2e4>)
 8001cc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cc2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001cc6:	61fb      	str	r3, [r7, #28]
 8001cc8:	69fb      	ldr	r3, [r7, #28]
		break;
 8001cca:	e01e      	b.n	8001d0a <PWMChannelConfig+0x1ee>
		case GPIOH_BASE:	__HAL_RCC_GPIOH_CLK_ENABLE();
 8001ccc:	2300      	movs	r3, #0
 8001cce:	61bb      	str	r3, [r7, #24]
 8001cd0:	4b4b      	ldr	r3, [pc, #300]	@ (8001e00 <PWMChannelConfig+0x2e4>)
 8001cd2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cd4:	4a4a      	ldr	r2, [pc, #296]	@ (8001e00 <PWMChannelConfig+0x2e4>)
 8001cd6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001cda:	6313      	str	r3, [r2, #48]	@ 0x30
 8001cdc:	4b48      	ldr	r3, [pc, #288]	@ (8001e00 <PWMChannelConfig+0x2e4>)
 8001cde:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ce0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001ce4:	61bb      	str	r3, [r7, #24]
 8001ce6:	69bb      	ldr	r3, [r7, #24]
		break;
 8001ce8:	e00f      	b.n	8001d0a <PWMChannelConfig+0x1ee>
		case GPIOI_BASE:	__HAL_RCC_GPIOI_CLK_ENABLE();
 8001cea:	2300      	movs	r3, #0
 8001cec:	617b      	str	r3, [r7, #20]
 8001cee:	4b44      	ldr	r3, [pc, #272]	@ (8001e00 <PWMChannelConfig+0x2e4>)
 8001cf0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cf2:	4a43      	ldr	r2, [pc, #268]	@ (8001e00 <PWMChannelConfig+0x2e4>)
 8001cf4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001cf8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001cfa:	4b41      	ldr	r3, [pc, #260]	@ (8001e00 <PWMChannelConfig+0x2e4>)
 8001cfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cfe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d02:	617b      	str	r3, [r7, #20]
 8001d04:	697b      	ldr	r3, [r7, #20]
		break;
 8001d06:	e000      	b.n	8001d0a <PWMChannelConfig+0x1ee>
		default: break;
 8001d08:	bf00      	nop
		}

	    GPIO_InitStruct.Pin = GPIO_Pin_x;
 8001d0a:	887b      	ldrh	r3, [r7, #2]
 8001d0c:	63bb      	str	r3, [r7, #56]	@ 0x38
	    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d0e:	2302      	movs	r3, #2
 8001d10:	63fb      	str	r3, [r7, #60]	@ 0x3c
	    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001d12:	2301      	movs	r3, #1
 8001d14:	643b      	str	r3, [r7, #64]	@ 0x40
	    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d16:	2303      	movs	r3, #3
 8001d18:	647b      	str	r3, [r7, #68]	@ 0x44
		if(htimx == &htim1){
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	4a39      	ldr	r2, [pc, #228]	@ (8001e04 <PWMChannelConfig+0x2e8>)
 8001d1e:	4293      	cmp	r3, r2
 8001d20:	d102      	bne.n	8001d28 <PWMChannelConfig+0x20c>
			GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001d22:	2301      	movs	r3, #1
 8001d24:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001d26:	e04b      	b.n	8001dc0 <PWMChannelConfig+0x2a4>
		}
		else if(htimx == &htim2)	{
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	4a37      	ldr	r2, [pc, #220]	@ (8001e08 <PWMChannelConfig+0x2ec>)
 8001d2c:	4293      	cmp	r3, r2
 8001d2e:	d102      	bne.n	8001d36 <PWMChannelConfig+0x21a>
			GPIO_InitStruct.Alternate = GPIO_AF1_TIM2 ;
 8001d30:	2301      	movs	r3, #1
 8001d32:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001d34:	e044      	b.n	8001dc0 <PWMChannelConfig+0x2a4>
		}
		else if(htimx == &htim3)	{
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	4a34      	ldr	r2, [pc, #208]	@ (8001e0c <PWMChannelConfig+0x2f0>)
 8001d3a:	4293      	cmp	r3, r2
 8001d3c:	d102      	bne.n	8001d44 <PWMChannelConfig+0x228>
			GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001d3e:	2302      	movs	r3, #2
 8001d40:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001d42:	e03d      	b.n	8001dc0 <PWMChannelConfig+0x2a4>
		}
		else if(htimx == &htim4)	{
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	4a32      	ldr	r2, [pc, #200]	@ (8001e10 <PWMChannelConfig+0x2f4>)
 8001d48:	4293      	cmp	r3, r2
 8001d4a:	d102      	bne.n	8001d52 <PWMChannelConfig+0x236>
			GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001d4c:	2302      	movs	r3, #2
 8001d4e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001d50:	e036      	b.n	8001dc0 <PWMChannelConfig+0x2a4>
		}
		else if(htimx == &htim5)	{
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	4a2f      	ldr	r2, [pc, #188]	@ (8001e14 <PWMChannelConfig+0x2f8>)
 8001d56:	4293      	cmp	r3, r2
 8001d58:	d102      	bne.n	8001d60 <PWMChannelConfig+0x244>
			GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8001d5a:	2302      	movs	r3, #2
 8001d5c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001d5e:	e02f      	b.n	8001dc0 <PWMChannelConfig+0x2a4>
		}
		else if(htimx == &htim8)	{
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	4a2d      	ldr	r2, [pc, #180]	@ (8001e18 <PWMChannelConfig+0x2fc>)
 8001d64:	4293      	cmp	r3, r2
 8001d66:	d102      	bne.n	8001d6e <PWMChannelConfig+0x252>
			GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8001d68:	2303      	movs	r3, #3
 8001d6a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001d6c:	e028      	b.n	8001dc0 <PWMChannelConfig+0x2a4>
		}
		else if(htimx == &htim9)	{
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	4a2a      	ldr	r2, [pc, #168]	@ (8001e1c <PWMChannelConfig+0x300>)
 8001d72:	4293      	cmp	r3, r2
 8001d74:	d102      	bne.n	8001d7c <PWMChannelConfig+0x260>
			GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 8001d76:	2303      	movs	r3, #3
 8001d78:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001d7a:	e021      	b.n	8001dc0 <PWMChannelConfig+0x2a4>
		}
		else if(htimx == &htim10)	{
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	4a28      	ldr	r2, [pc, #160]	@ (8001e20 <PWMChannelConfig+0x304>)
 8001d80:	4293      	cmp	r3, r2
 8001d82:	d102      	bne.n	8001d8a <PWMChannelConfig+0x26e>
			GPIO_InitStruct.Alternate = GPIO_AF3_TIM10;
 8001d84:	2303      	movs	r3, #3
 8001d86:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001d88:	e01a      	b.n	8001dc0 <PWMChannelConfig+0x2a4>
		}
		else if(htimx == &htim11)	{
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	4a25      	ldr	r2, [pc, #148]	@ (8001e24 <PWMChannelConfig+0x308>)
 8001d8e:	4293      	cmp	r3, r2
 8001d90:	d102      	bne.n	8001d98 <PWMChannelConfig+0x27c>
			GPIO_InitStruct.Alternate = GPIO_AF3_TIM11;
 8001d92:	2303      	movs	r3, #3
 8001d94:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001d96:	e013      	b.n	8001dc0 <PWMChannelConfig+0x2a4>
		}
		else if(htimx == &htim12)	{
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	4a23      	ldr	r2, [pc, #140]	@ (8001e28 <PWMChannelConfig+0x30c>)
 8001d9c:	4293      	cmp	r3, r2
 8001d9e:	d102      	bne.n	8001da6 <PWMChannelConfig+0x28a>
			GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8001da0:	2309      	movs	r3, #9
 8001da2:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001da4:	e00c      	b.n	8001dc0 <PWMChannelConfig+0x2a4>
		}
		else if(htimx == &htim13)	{
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	4a20      	ldr	r2, [pc, #128]	@ (8001e2c <PWMChannelConfig+0x310>)
 8001daa:	4293      	cmp	r3, r2
 8001dac:	d102      	bne.n	8001db4 <PWMChannelConfig+0x298>
			GPIO_InitStruct.Alternate = GPIO_AF9_TIM13;
 8001dae:	2309      	movs	r3, #9
 8001db0:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001db2:	e005      	b.n	8001dc0 <PWMChannelConfig+0x2a4>
			}
		else if(htimx == &htim14)	{
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	4a1e      	ldr	r2, [pc, #120]	@ (8001e30 <PWMChannelConfig+0x314>)
 8001db8:	4293      	cmp	r3, r2
 8001dba:	d101      	bne.n	8001dc0 <PWMChannelConfig+0x2a4>
			GPIO_InitStruct.Alternate = GPIO_AF9_TIM14;
 8001dbc:	2309      	movs	r3, #9
 8001dbe:	64bb      	str	r3, [r7, #72]	@ 0x48
			}

	    HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8001dc0:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001dc4:	4619      	mov	r1, r3
 8001dc6:	6878      	ldr	r0, [r7, #4]
 8001dc8:	f00b fd34 	bl	800d834 <HAL_GPIO_Init>


	    HAL_TIM_PWM_Start(htimx,Channel);
 8001dcc:	68b9      	ldr	r1, [r7, #8]
 8001dce:	68f8      	ldr	r0, [r7, #12]
 8001dd0:	f011 fb04 	bl	80133dc <HAL_TIM_PWM_Start>

}
 8001dd4:	bf00      	nop
 8001dd6:	3768      	adds	r7, #104	@ 0x68
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	bd80      	pop	{r7, pc}
 8001ddc:	40022000 	.word	0x40022000
 8001de0:	40021c00 	.word	0x40021c00
 8001de4:	40021800 	.word	0x40021800
 8001de8:	40021400 	.word	0x40021400
 8001dec:	40021000 	.word	0x40021000
 8001df0:	40020c00 	.word	0x40020c00
 8001df4:	40020800 	.word	0x40020800
 8001df8:	40020000 	.word	0x40020000
 8001dfc:	40020400 	.word	0x40020400
 8001e00:	40023800 	.word	0x40023800
 8001e04:	20006710 	.word	0x20006710
 8001e08:	2000682c 	.word	0x2000682c
 8001e0c:	20006438 	.word	0x20006438
 8001e10:	20006258 	.word	0x20006258
 8001e14:	200063f0 	.word	0x200063f0
 8001e18:	20006210 	.word	0x20006210
 8001e1c:	20006758 	.word	0x20006758
 8001e20:	20006344 	.word	0x20006344
 8001e24:	20006618 	.word	0x20006618
 8001e28:	20006960 	.word	0x20006960
 8001e2c:	20006528 	.word	0x20006528
 8001e30:	20006918 	.word	0x20006918

08001e34 <QEIInit>:
 * Function Arguments	: htimx					Pointer to timer handle
 * Function Return		: None
 * Function Example		: QEIInit(&htim1,5,5);  	//Initialize QEI1
 */
void QEIInit(TIM_HandleTypeDef* htimx)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b08e      	sub	sp, #56	@ 0x38
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
	TIM_Encoder_InitTypeDef sConfig = {0};
 8001e3c:	f107 0310 	add.w	r3, r7, #16
 8001e40:	2224      	movs	r2, #36	@ 0x24
 8001e42:	2100      	movs	r1, #0
 8001e44:	4618      	mov	r0, r3
 8001e46:	f01b fe7a 	bl	801db3e <memset>
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e4a:	f107 0308 	add.w	r3, r7, #8
 8001e4e:	2200      	movs	r2, #0
 8001e50:	601a      	str	r2, [r3, #0]
 8001e52:	605a      	str	r2, [r3, #4]

	IRQn_Type nvic;

	if(htimx == &htim1){
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	4a6b      	ldr	r2, [pc, #428]	@ (8002004 <QEIInit+0x1d0>)
 8001e58:	4293      	cmp	r3, r2
 8001e5a:	d106      	bne.n	8001e6a <QEIInit+0x36>
		htimx->Instance = TIM1;
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	4a6a      	ldr	r2, [pc, #424]	@ (8002008 <QEIInit+0x1d4>)
 8001e60:	601a      	str	r2, [r3, #0]
		nvic = TIM1_UP_TIM10_IRQn;
 8001e62:	2319      	movs	r3, #25
 8001e64:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8001e68:	e036      	b.n	8001ed8 <QEIInit+0xa4>
	}
	else if(htimx == &htim2)	{
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	4a67      	ldr	r2, [pc, #412]	@ (800200c <QEIInit+0x1d8>)
 8001e6e:	4293      	cmp	r3, r2
 8001e70:	d107      	bne.n	8001e82 <QEIInit+0x4e>
		htimx->Instance = TIM2;
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001e78:	601a      	str	r2, [r3, #0]
		nvic=TIM2_IRQn;
 8001e7a:	231c      	movs	r3, #28
 8001e7c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8001e80:	e02a      	b.n	8001ed8 <QEIInit+0xa4>
	}
	else if(htimx == &htim3)	{
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	4a62      	ldr	r2, [pc, #392]	@ (8002010 <QEIInit+0x1dc>)
 8001e86:	4293      	cmp	r3, r2
 8001e88:	d106      	bne.n	8001e98 <QEIInit+0x64>
		htimx->Instance = TIM3;
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	4a61      	ldr	r2, [pc, #388]	@ (8002014 <QEIInit+0x1e0>)
 8001e8e:	601a      	str	r2, [r3, #0]
		nvic=TIM3_IRQn;
 8001e90:	231d      	movs	r3, #29
 8001e92:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8001e96:	e01f      	b.n	8001ed8 <QEIInit+0xa4>
	}
	else if(htimx == &htim4)	{
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	4a5f      	ldr	r2, [pc, #380]	@ (8002018 <QEIInit+0x1e4>)
 8001e9c:	4293      	cmp	r3, r2
 8001e9e:	d106      	bne.n	8001eae <QEIInit+0x7a>
		htimx->Instance = TIM4;
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	4a5e      	ldr	r2, [pc, #376]	@ (800201c <QEIInit+0x1e8>)
 8001ea4:	601a      	str	r2, [r3, #0]
		nvic=TIM4_IRQn;
 8001ea6:	231e      	movs	r3, #30
 8001ea8:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8001eac:	e014      	b.n	8001ed8 <QEIInit+0xa4>
	}
	else if(htimx == &htim5)	{
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	4a5b      	ldr	r2, [pc, #364]	@ (8002020 <QEIInit+0x1ec>)
 8001eb2:	4293      	cmp	r3, r2
 8001eb4:	d106      	bne.n	8001ec4 <QEIInit+0x90>
		htimx->Instance = TIM5;
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	4a5a      	ldr	r2, [pc, #360]	@ (8002024 <QEIInit+0x1f0>)
 8001eba:	601a      	str	r2, [r3, #0]
		nvic=TIM5_IRQn;
 8001ebc:	2332      	movs	r3, #50	@ 0x32
 8001ebe:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8001ec2:	e009      	b.n	8001ed8 <QEIInit+0xa4>
	}
	else if(htimx == &htim8)	{
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	4a58      	ldr	r2, [pc, #352]	@ (8002028 <QEIInit+0x1f4>)
 8001ec8:	4293      	cmp	r3, r2
 8001eca:	d105      	bne.n	8001ed8 <QEIInit+0xa4>
		htimx->Instance = TIM8;
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	4a57      	ldr	r2, [pc, #348]	@ (800202c <QEIInit+0x1f8>)
 8001ed0:	601a      	str	r2, [r3, #0]
		nvic=TIM8_UP_TIM13_IRQn;
 8001ed2:	232c      	movs	r3, #44	@ 0x2c
 8001ed4:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	}

	htimx->Init.Prescaler = 0;
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	2200      	movs	r2, #0
 8001edc:	605a      	str	r2, [r3, #4]
	htimx->Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	609a      	str	r2, [r3, #8]
	htimx->Init.Period = 0xFFFF;
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001eea:	60da      	str	r2, [r3, #12]
	htimx->Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	2200      	movs	r2, #0
 8001ef0:	611a      	str	r2, [r3, #16]
	htimx->Init.RepetitionCounter = 0;
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	615a      	str	r2, [r3, #20]
	htimx->Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	2280      	movs	r2, #128	@ 0x80
 8001efc:	619a      	str	r2, [r3, #24]
	sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001efe:	2303      	movs	r3, #3
 8001f00:	613b      	str	r3, [r7, #16]
	sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001f02:	2300      	movs	r3, #0
 8001f04:	617b      	str	r3, [r7, #20]
	sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001f06:	2301      	movs	r3, #1
 8001f08:	61bb      	str	r3, [r7, #24]
	sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	61fb      	str	r3, [r7, #28]
	sConfig.IC1Filter = 0;
 8001f0e:	2300      	movs	r3, #0
 8001f10:	623b      	str	r3, [r7, #32]
	sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001f12:	2300      	movs	r3, #0
 8001f14:	627b      	str	r3, [r7, #36]	@ 0x24
	sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001f16:	2301      	movs	r3, #1
 8001f18:	62bb      	str	r3, [r7, #40]	@ 0x28
	sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	sConfig.IC2Filter = 0;
 8001f1e:	2300      	movs	r3, #0
 8001f20:	633b      	str	r3, [r7, #48]	@ 0x30
	if (HAL_TIM_Encoder_Init(htimx, &sConfig) != HAL_OK)
 8001f22:	f107 0310 	add.w	r3, r7, #16
 8001f26:	4619      	mov	r1, r3
 8001f28:	6878      	ldr	r0, [r7, #4]
 8001f2a:	f011 fb1f 	bl	801356c <HAL_TIM_Encoder_Init>
 8001f2e:	4603      	mov	r3, r0
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d001      	beq.n	8001f38 <QEIInit+0x104>
	{
		Error_Handler();
 8001f34:	f009 fe6a 	bl	800bc0c <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f38:	2300      	movs	r3, #0
 8001f3a:	60bb      	str	r3, [r7, #8]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	60fb      	str	r3, [r7, #12]
	if (HAL_TIMEx_MasterConfigSynchronization(htimx, &sMasterConfig) != HAL_OK)
 8001f40:	f107 0308 	add.w	r3, r7, #8
 8001f44:	4619      	mov	r1, r3
 8001f46:	6878      	ldr	r0, [r7, #4]
 8001f48:	f012 fa0e 	bl	8014368 <HAL_TIMEx_MasterConfigSynchronization>
 8001f4c:	4603      	mov	r3, r0
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d001      	beq.n	8001f56 <QEIInit+0x122>
	{
		Error_Handler();
 8001f52:	f009 fe5b 	bl	800bc0c <Error_Handler>
	}

	__HAL_TIM_CLEAR_IT(htimx, TIM_IT_UPDATE);
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f06f 0201 	mvn.w	r2, #1
 8001f5e:	611a      	str	r2, [r3, #16]
	__HAL_TIM_ENABLE_IT(htimx, TIM_IT_UPDATE);
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	68da      	ldr	r2, [r3, #12]
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f042 0201 	orr.w	r2, r2, #1
 8001f6e:	60da      	str	r2, [r3, #12]

	if(htimx == &htim1){
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	4a24      	ldr	r2, [pc, #144]	@ (8002004 <QEIInit+0x1d0>)
 8001f74:	4293      	cmp	r3, r2
 8001f76:	d111      	bne.n	8001f9c <QEIInit+0x168>
		HAL_NVIC_SetPriority(nvic, QEI1_IRQ_PRIO, 0);
 8001f78:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	210e      	movs	r1, #14
 8001f80:	4618      	mov	r0, r3
 8001f82:	f00a ff97 	bl	800ceb4 <HAL_NVIC_SetPriority>
		HAL_NVIC_ClearPendingIRQ(nvic);
 8001f86:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	f00a ffca 	bl	800cf24 <HAL_NVIC_ClearPendingIRQ>
		HAL_NVIC_EnableIRQ(nvic);
 8001f90:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 8001f94:	4618      	mov	r0, r3
 8001f96:	f00a ffa9 	bl	800ceec <HAL_NVIC_EnableIRQ>
 8001f9a:	e02a      	b.n	8001ff2 <QEIInit+0x1be>
//	else if(htimx == &htim3) {
//		HAL_NVIC_SetPriority(nvic, 0, 0);
//		HAL_NVIC_ClearPendingIRQ(nvic);
//		HAL_NVIC_EnableIRQ(nvic);
//	}
	else if(htimx == &htim4){
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	4a1e      	ldr	r2, [pc, #120]	@ (8002018 <QEIInit+0x1e4>)
 8001fa0:	4293      	cmp	r3, r2
 8001fa2:	d111      	bne.n	8001fc8 <QEIInit+0x194>
		HAL_NVIC_SetPriority(nvic, QEI4_IRQ_PRIO, 0);
 8001fa4:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 8001fa8:	2200      	movs	r2, #0
 8001faa:	210e      	movs	r1, #14
 8001fac:	4618      	mov	r0, r3
 8001fae:	f00a ff81 	bl	800ceb4 <HAL_NVIC_SetPriority>
		HAL_NVIC_ClearPendingIRQ(nvic);
 8001fb2:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	f00a ffb4 	bl	800cf24 <HAL_NVIC_ClearPendingIRQ>
		HAL_NVIC_EnableIRQ(nvic);
 8001fbc:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	f00a ff93 	bl	800ceec <HAL_NVIC_EnableIRQ>
 8001fc6:	e014      	b.n	8001ff2 <QEIInit+0x1be>
	}else if(htimx == &htim8){
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	4a17      	ldr	r2, [pc, #92]	@ (8002028 <QEIInit+0x1f4>)
 8001fcc:	4293      	cmp	r3, r2
 8001fce:	d110      	bne.n	8001ff2 <QEIInit+0x1be>
		HAL_NVIC_SetPriority(nvic, QEI6_IRQ_PRIO, 0);
 8001fd0:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	210e      	movs	r1, #14
 8001fd8:	4618      	mov	r0, r3
 8001fda:	f00a ff6b 	bl	800ceb4 <HAL_NVIC_SetPriority>
		HAL_NVIC_ClearPendingIRQ(nvic);
 8001fde:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	f00a ff9e 	bl	800cf24 <HAL_NVIC_ClearPendingIRQ>
		HAL_NVIC_EnableIRQ(nvic);
 8001fe8:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 8001fec:	4618      	mov	r0, r3
 8001fee:	f00a ff7d 	bl	800ceec <HAL_NVIC_EnableIRQ>
	}

	HAL_TIM_Encoder_Start(htimx, TIM_CHANNEL_ALL);
 8001ff2:	213c      	movs	r1, #60	@ 0x3c
 8001ff4:	6878      	ldr	r0, [r7, #4]
 8001ff6:	f011 fb5f 	bl	80136b8 <HAL_TIM_Encoder_Start>
}
 8001ffa:	bf00      	nop
 8001ffc:	3738      	adds	r7, #56	@ 0x38
 8001ffe:	46bd      	mov	sp, r7
 8002000:	bd80      	pop	{r7, pc}
 8002002:	bf00      	nop
 8002004:	20006710 	.word	0x20006710
 8002008:	40010000 	.word	0x40010000
 800200c:	2000682c 	.word	0x2000682c
 8002010:	20006438 	.word	0x20006438
 8002014:	40000400 	.word	0x40000400
 8002018:	20006258 	.word	0x20006258
 800201c:	40000800 	.word	0x40000800
 8002020:	200063f0 	.word	0x200063f0
 8002024:	40000c00 	.word	0x40000c00
 8002028:	20006210 	.word	0x20006210
 800202c:	40010400 	.word	0x40010400

08002030 <QEIDelay>:
 * Function Return		: None
 * Function Example		: QEIDelay(100);
 */

void QEIDelay(uint8_t value)
{
 8002030:	b480      	push	{r7}
 8002032:	b085      	sub	sp, #20
 8002034:	af00      	add	r7, sp, #0
 8002036:	4603      	mov	r3, r0
 8002038:	71fb      	strb	r3, [r7, #7]
	uint8_t currentvalues;
	value = value * 8400;
 800203a:	79fb      	ldrb	r3, [r7, #7]
 800203c:	461a      	mov	r2, r3
 800203e:	009b      	lsls	r3, r3, #2
 8002040:	1ad3      	subs	r3, r2, r3
 8002042:	011b      	lsls	r3, r3, #4
 8002044:	71fb      	strb	r3, [r7, #7]
	while(currentvalues < value)
 8002046:	e002      	b.n	800204e <QEIDelay+0x1e>
	{
		currentvalues++;
 8002048:	7bfb      	ldrb	r3, [r7, #15]
 800204a:	3301      	adds	r3, #1
 800204c:	73fb      	strb	r3, [r7, #15]
	while(currentvalues < value)
 800204e:	7bfa      	ldrb	r2, [r7, #15]
 8002050:	79fb      	ldrb	r3, [r7, #7]
 8002052:	429a      	cmp	r2, r3
 8002054:	d3f8      	bcc.n	8002048 <QEIDelay+0x18>
	}
	currentvalues = 0;
 8002056:	2300      	movs	r3, #0
 8002058:	73fb      	strb	r3, [r7, #15]
}
 800205a:	bf00      	nop
 800205c:	3714      	adds	r7, #20
 800205e:	46bd      	mov	sp, r7
 8002060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002064:	4770      	bx	lr
	...

08002068 <QEIRead>:
 * Function Arguments	: QEIx		where x can be 1 to 5.
 * Function Return		: QEI's count with 32 bits with sign.
 * Function Example		: QEIRead(QEI1);
 */

int32_t QEIRead(QEI_TypeDef QEIx){
 8002068:	b480      	push	{r7}
 800206a:	b085      	sub	sp, #20
 800206c:	af00      	add	r7, sp, #0
 800206e:	4603      	mov	r3, r0
 8002070:	71fb      	strb	r3, [r7, #7]

	int32_t value;
	switch(QEIx){
 8002072:	79fb      	ldrb	r3, [r7, #7]
 8002074:	3b01      	subs	r3, #1
 8002076:	2b05      	cmp	r3, #5
 8002078:	d845      	bhi.n	8002106 <QEIRead+0x9e>
 800207a:	a201      	add	r2, pc, #4	@ (adr r2, 8002080 <QEIRead+0x18>)
 800207c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002080:	08002099 	.word	0x08002099
 8002084:	080020ab 	.word	0x080020ab
 8002088:	080020bf 	.word	0x080020bf
 800208c:	080020d1 	.word	0x080020d1
 8002090:	080020e3 	.word	0x080020e3
 8002094:	080020f5 	.word	0x080020f5

	case QEI1:	BIOS_QEI1.poscnt = TIM1-> CNT;
 8002098:	4b1f      	ldr	r3, [pc, #124]	@ (8002118 <QEIRead+0xb0>)
 800209a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800209c:	b29a      	uxth	r2, r3
 800209e:	4b1f      	ldr	r3, [pc, #124]	@ (800211c <QEIRead+0xb4>)
 80020a0:	801a      	strh	r2, [r3, #0]
	value = BIOS_QEI1.count;
 80020a2:	4b1e      	ldr	r3, [pc, #120]	@ (800211c <QEIRead+0xb4>)
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	60fb      	str	r3, [r7, #12]
	break;
 80020a8:	e02e      	b.n	8002108 <QEIRead+0xa0>

	case QEI2:	BIOS_QEI2.poscnt = TIM2-> CNT;
 80020aa:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80020ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020b0:	b29a      	uxth	r2, r3
 80020b2:	4b1b      	ldr	r3, [pc, #108]	@ (8002120 <QEIRead+0xb8>)
 80020b4:	801a      	strh	r2, [r3, #0]
	value = BIOS_QEI2.count;
 80020b6:	4b1a      	ldr	r3, [pc, #104]	@ (8002120 <QEIRead+0xb8>)
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	60fb      	str	r3, [r7, #12]
	break;
 80020bc:	e024      	b.n	8002108 <QEIRead+0xa0>

	case QEI3:	BIOS_QEI3.poscnt = TIM3-> CNT;
 80020be:	4b19      	ldr	r3, [pc, #100]	@ (8002124 <QEIRead+0xbc>)
 80020c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020c2:	b29a      	uxth	r2, r3
 80020c4:	4b18      	ldr	r3, [pc, #96]	@ (8002128 <QEIRead+0xc0>)
 80020c6:	801a      	strh	r2, [r3, #0]
	value = BIOS_QEI3.count;
 80020c8:	4b17      	ldr	r3, [pc, #92]	@ (8002128 <QEIRead+0xc0>)
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	60fb      	str	r3, [r7, #12]
	break;
 80020ce:	e01b      	b.n	8002108 <QEIRead+0xa0>

	case QEI4:	BIOS_QEI4.poscnt = TIM4-> CNT;
 80020d0:	4b16      	ldr	r3, [pc, #88]	@ (800212c <QEIRead+0xc4>)
 80020d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020d4:	b29a      	uxth	r2, r3
 80020d6:	4b16      	ldr	r3, [pc, #88]	@ (8002130 <QEIRead+0xc8>)
 80020d8:	801a      	strh	r2, [r3, #0]
	value = BIOS_QEI4.count;
 80020da:	4b15      	ldr	r3, [pc, #84]	@ (8002130 <QEIRead+0xc8>)
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	60fb      	str	r3, [r7, #12]
	break;
 80020e0:	e012      	b.n	8002108 <QEIRead+0xa0>

	case QEI5:	BIOS_QEI5.poscnt = TIM5-> CNT;
 80020e2:	4b14      	ldr	r3, [pc, #80]	@ (8002134 <QEIRead+0xcc>)
 80020e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020e6:	b29a      	uxth	r2, r3
 80020e8:	4b13      	ldr	r3, [pc, #76]	@ (8002138 <QEIRead+0xd0>)
 80020ea:	801a      	strh	r2, [r3, #0]
	value = BIOS_QEI5.count;
 80020ec:	4b12      	ldr	r3, [pc, #72]	@ (8002138 <QEIRead+0xd0>)
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	60fb      	str	r3, [r7, #12]
	break;
 80020f2:	e009      	b.n	8002108 <QEIRead+0xa0>

	case QEI6:	BIOS_QEI6.poscnt = TIM8-> CNT;
 80020f4:	4b11      	ldr	r3, [pc, #68]	@ (800213c <QEIRead+0xd4>)
 80020f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020f8:	b29a      	uxth	r2, r3
 80020fa:	4b11      	ldr	r3, [pc, #68]	@ (8002140 <QEIRead+0xd8>)
 80020fc:	801a      	strh	r2, [r3, #0]
	value = BIOS_QEI6.count;
 80020fe:	4b10      	ldr	r3, [pc, #64]	@ (8002140 <QEIRead+0xd8>)
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	60fb      	str	r3, [r7, #12]
	break;
 8002104:	e000      	b.n	8002108 <QEIRead+0xa0>

	default: break;
 8002106:	bf00      	nop
	}

	return value;
 8002108:	68fb      	ldr	r3, [r7, #12]
}
 800210a:	4618      	mov	r0, r3
 800210c:	3714      	adds	r7, #20
 800210e:	46bd      	mov	sp, r7
 8002110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002114:	4770      	bx	lr
 8002116:	bf00      	nop
 8002118:	40010000 	.word	0x40010000
 800211c:	20006cac 	.word	0x20006cac
 8002120:	20006cb0 	.word	0x20006cb0
 8002124:	40000400 	.word	0x40000400
 8002128:	20006ca8 	.word	0x20006ca8
 800212c:	40000800 	.word	0x40000800
 8002130:	20006cd0 	.word	0x20006cd0
 8002134:	40000c00 	.word	0x40000c00
 8002138:	20006ccc 	.word	0x20006ccc
 800213c:	40010400 	.word	0x40010400
 8002140:	20006cd4 	.word	0x20006cd4

08002144 <SHIFTREGInit>:
 * Function Return		: None
 * Function Example		: SHIFTREGInit(&shiftreg, CASCADE_1, GPIOD, GPIO_Pin_0, GPIOD, GPIO_Pin_1, GPIOD, GPIO_Pin_2);
 */

void SHIFTREGInit (shiftreg_t* shiftreg, fSR cascade, GPIO_TypeDef *GPIOx_sck, uint16_t GPIO_Pin_sck,
		           GPIO_TypeDef *GPIOx_rck , uint16_t GPIO_Pin_rck,GPIO_TypeDef *GPIOx_si, uint16_t GPIO_Pin_si){
 8002144:	b580      	push	{r7, lr}
 8002146:	b086      	sub	sp, #24
 8002148:	af02      	add	r7, sp, #8
 800214a:	60f8      	str	r0, [r7, #12]
 800214c:	607a      	str	r2, [r7, #4]
 800214e:	461a      	mov	r2, r3
 8002150:	460b      	mov	r3, r1
 8002152:	72fb      	strb	r3, [r7, #11]
 8002154:	4613      	mov	r3, r2
 8002156:	813b      	strh	r3, [r7, #8]

	shiftreg->flag = cascade;
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	7afa      	ldrb	r2, [r7, #11]
 800215c:	759a      	strb	r2, [r3, #22]

	shiftreg->GPIOx_sck = GPIOx_sck;
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	687a      	ldr	r2, [r7, #4]
 8002162:	601a      	str	r2, [r3, #0]
	shiftreg->GPIO_Pin_sck = GPIO_Pin_sck;
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	893a      	ldrh	r2, [r7, #8]
 8002168:	809a      	strh	r2, [r3, #4]

	shiftreg->GPIOx_rck = GPIOx_rck;
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	69ba      	ldr	r2, [r7, #24]
 800216e:	609a      	str	r2, [r3, #8]
	shiftreg->GPIO_Pin_rck = GPIO_Pin_rck;
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	8bba      	ldrh	r2, [r7, #28]
 8002174:	819a      	strh	r2, [r3, #12]

	shiftreg->GPIOx_si = GPIOx_si;
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	6a3a      	ldr	r2, [r7, #32]
 800217a:	611a      	str	r2, [r3, #16]
	shiftreg->GPIO_Pin_si = GPIO_Pin_si;
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8002180:	829a      	strh	r2, [r3, #20]

	GPIOPinsInit(shiftreg->GPIOx_sck, shiftreg->GPIO_Pin_sck, GPIO_MODE_OUTPUT_PP,GPIO_SPEED_FREQ_HIGH, GPIO_PULLUP);
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	6818      	ldr	r0, [r3, #0]
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	8899      	ldrh	r1, [r3, #4]
 800218a:	2301      	movs	r3, #1
 800218c:	9300      	str	r3, [sp, #0]
 800218e:	2302      	movs	r3, #2
 8002190:	2201      	movs	r2, #1
 8002192:	f7ff f979 	bl	8001488 <GPIOPinsInit>
	GPIOPinsInit(shiftreg->GPIOx_rck, shiftreg->GPIO_Pin_rck, GPIO_MODE_OUTPUT_PP,GPIO_SPEED_FREQ_HIGH, GPIO_PULLUP);
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	6898      	ldr	r0, [r3, #8]
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	8999      	ldrh	r1, [r3, #12]
 800219e:	2301      	movs	r3, #1
 80021a0:	9300      	str	r3, [sp, #0]
 80021a2:	2302      	movs	r3, #2
 80021a4:	2201      	movs	r2, #1
 80021a6:	f7ff f96f 	bl	8001488 <GPIOPinsInit>
	GPIOPinsInit(shiftreg->GPIOx_si, shiftreg->GPIO_Pin_si , GPIO_MODE_OUTPUT_PP,GPIO_SPEED_FREQ_HIGH, GPIO_PULLUP);
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	6918      	ldr	r0, [r3, #16]
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	8a99      	ldrh	r1, [r3, #20]
 80021b2:	2301      	movs	r3, #1
 80021b4:	9300      	str	r3, [sp, #0]
 80021b6:	2302      	movs	r3, #2
 80021b8:	2201      	movs	r2, #1
 80021ba:	f7ff f965 	bl	8001488 <GPIOPinsInit>

}
 80021be:	bf00      	nop
 80021c0:	3710      	adds	r7, #16
 80021c2:	46bd      	mov	sp, r7
 80021c4:	bd80      	pop	{r7, pc}

080021c6 <SHIFTREGShift>:
 * Function Arguments	: shiftreg			pointer to structure
 * Function Return		: None
 * Function Example		: SHIFTREGShift (&shiftreg);
 */

void SHIFTREGShift(shiftreg_t* shiftreg){
 80021c6:	b580      	push	{r7, lr}
 80021c8:	b084      	sub	sp, #16
 80021ca:	af00      	add	r7, sp, #0
 80021cc:	6078      	str	r0, [r7, #4]

	uint8_t out, i, j;

	i = shiftreg->flag;
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	7d9b      	ldrb	r3, [r3, #22]
 80021d2:	73bb      	strb	r3, [r7, #14]

	HAL_GPIO_WritePin(shiftreg->GPIOx_sck , shiftreg->GPIO_Pin_sck, GPIO_PIN_RESET);
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	6818      	ldr	r0, [r3, #0]
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	889b      	ldrh	r3, [r3, #4]
 80021dc:	2200      	movs	r2, #0
 80021de:	4619      	mov	r1, r3
 80021e0:	f00b fdd8 	bl	800dd94 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(shiftreg->GPIOx_rck , shiftreg->GPIO_Pin_rck, GPIO_PIN_RESET);
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	6898      	ldr	r0, [r3, #8]
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	899b      	ldrh	r3, [r3, #12]
 80021ec:	2200      	movs	r2, #0
 80021ee:	4619      	mov	r1, r3
 80021f0:	f00b fdd0 	bl	800dd94 <HAL_GPIO_WritePin>

	do{
		out = shiftreg->cast[i].Byte;
 80021f4:	7bba      	ldrb	r2, [r7, #14]
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	3206      	adds	r2, #6
 80021fa:	f813 3022 	ldrb.w	r3, [r3, r2, lsl #2]
 80021fe:	73fb      	strb	r3, [r7, #15]
		for (j = 8; j; j--){
 8002200:	2308      	movs	r3, #8
 8002202:	737b      	strb	r3, [r7, #13]
 8002204:	e02a      	b.n	800225c <SHIFTREGShift+0x96>
			(out & 0x80) ? HAL_GPIO_WritePin(shiftreg->GPIOx_si , shiftreg->GPIO_Pin_si, GPIO_PIN_SET) : HAL_GPIO_WritePin(shiftreg->GPIOx_si , shiftreg->GPIO_Pin_si, GPIO_PIN_RESET);
 8002206:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800220a:	2b00      	cmp	r3, #0
 800220c:	da08      	bge.n	8002220 <SHIFTREGShift+0x5a>
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	6918      	ldr	r0, [r3, #16]
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	8a9b      	ldrh	r3, [r3, #20]
 8002216:	2201      	movs	r2, #1
 8002218:	4619      	mov	r1, r3
 800221a:	f00b fdbb 	bl	800dd94 <HAL_GPIO_WritePin>
 800221e:	e007      	b.n	8002230 <SHIFTREGShift+0x6a>
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	6918      	ldr	r0, [r3, #16]
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	8a9b      	ldrh	r3, [r3, #20]
 8002228:	2200      	movs	r2, #0
 800222a:	4619      	mov	r1, r3
 800222c:	f00b fdb2 	bl	800dd94 <HAL_GPIO_WritePin>
			out <<= 1;
 8002230:	7bfb      	ldrb	r3, [r7, #15]
 8002232:	005b      	lsls	r3, r3, #1
 8002234:	73fb      	strb	r3, [r7, #15]
			HAL_GPIO_WritePin(shiftreg->GPIOx_sck , shiftreg->GPIO_Pin_sck, GPIO_PIN_SET);
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	6818      	ldr	r0, [r3, #0]
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	889b      	ldrh	r3, [r3, #4]
 800223e:	2201      	movs	r2, #1
 8002240:	4619      	mov	r1, r3
 8002242:	f00b fda7 	bl	800dd94 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(shiftreg->GPIOx_sck , shiftreg->GPIO_Pin_sck, GPIO_PIN_RESET);
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	6818      	ldr	r0, [r3, #0]
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	889b      	ldrh	r3, [r3, #4]
 800224e:	2200      	movs	r2, #0
 8002250:	4619      	mov	r1, r3
 8002252:	f00b fd9f 	bl	800dd94 <HAL_GPIO_WritePin>
		for (j = 8; j; j--){
 8002256:	7b7b      	ldrb	r3, [r7, #13]
 8002258:	3b01      	subs	r3, #1
 800225a:	737b      	strb	r3, [r7, #13]
 800225c:	7b7b      	ldrb	r3, [r7, #13]
 800225e:	2b00      	cmp	r3, #0
 8002260:	d1d1      	bne.n	8002206 <SHIFTREGShift+0x40>
		}
	}while(i--);
 8002262:	7bbb      	ldrb	r3, [r7, #14]
 8002264:	1e5a      	subs	r2, r3, #1
 8002266:	73ba      	strb	r2, [r7, #14]
 8002268:	2b00      	cmp	r3, #0
 800226a:	d1c3      	bne.n	80021f4 <SHIFTREGShift+0x2e>

	HAL_GPIO_WritePin(shiftreg->GPIOx_rck , shiftreg->GPIO_Pin_rck, GPIO_PIN_SET);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	6898      	ldr	r0, [r3, #8]
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	899b      	ldrh	r3, [r3, #12]
 8002274:	2201      	movs	r2, #1
 8002276:	4619      	mov	r1, r3
 8002278:	f00b fd8c 	bl	800dd94 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(shiftreg->GPIOx_rck , shiftreg->GPIO_Pin_rck, GPIO_PIN_RESET);
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	6898      	ldr	r0, [r3, #8]
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	899b      	ldrh	r3, [r3, #12]
 8002284:	2200      	movs	r2, #0
 8002286:	4619      	mov	r1, r3
 8002288:	f00b fd84 	bl	800dd94 <HAL_GPIO_WritePin>

}
 800228c:	bf00      	nop
 800228e:	3710      	adds	r7, #16
 8002290:	46bd      	mov	sp, r7
 8002292:	bd80      	pop	{r7, pc}

08002294 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
/**
 * Initializes the Global MSP.
 */
void HAL_MspInit(void)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	b082      	sub	sp, #8
 8002298:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN MspInit 0 */

	/* USER CODE END MspInit 0 */

	__HAL_RCC_SYSCFG_CLK_ENABLE();
 800229a:	2300      	movs	r3, #0
 800229c:	607b      	str	r3, [r7, #4]
 800229e:	4b12      	ldr	r3, [pc, #72]	@ (80022e8 <HAL_MspInit+0x54>)
 80022a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022a2:	4a11      	ldr	r2, [pc, #68]	@ (80022e8 <HAL_MspInit+0x54>)
 80022a4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80022a8:	6453      	str	r3, [r2, #68]	@ 0x44
 80022aa:	4b0f      	ldr	r3, [pc, #60]	@ (80022e8 <HAL_MspInit+0x54>)
 80022ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022ae:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80022b2:	607b      	str	r3, [r7, #4]
 80022b4:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_PWR_CLK_ENABLE();
 80022b6:	2300      	movs	r3, #0
 80022b8:	603b      	str	r3, [r7, #0]
 80022ba:	4b0b      	ldr	r3, [pc, #44]	@ (80022e8 <HAL_MspInit+0x54>)
 80022bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022be:	4a0a      	ldr	r2, [pc, #40]	@ (80022e8 <HAL_MspInit+0x54>)
 80022c0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80022c4:	6413      	str	r3, [r2, #64]	@ 0x40
 80022c6:	4b08      	ldr	r3, [pc, #32]	@ (80022e8 <HAL_MspInit+0x54>)
 80022c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022ca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80022ce:	603b      	str	r3, [r7, #0]
 80022d0:	683b      	ldr	r3, [r7, #0]

	/* System interrupt init*/
	HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80022d2:	2200      	movs	r2, #0
 80022d4:	210f      	movs	r1, #15
 80022d6:	f06f 0001 	mvn.w	r0, #1
 80022da:	f00a fdeb 	bl	800ceb4 <HAL_NVIC_SetPriority>

	/* USER CODE BEGIN MspInit 1 */

	/* USER CODE END MspInit 1 */
}
 80022de:	bf00      	nop
 80022e0:	3708      	adds	r7, #8
 80022e2:	46bd      	mov	sp, r7
 80022e4:	bd80      	pop	{r7, pc}
 80022e6:	bf00      	nop
 80022e8:	40023800 	.word	0x40023800

080022ec <HAL_CAN_MspInit>:
 * This function configures the hardware resources used in this example
 * @param hcan: CAN handle pointer
 * @retval None
 */
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b08c      	sub	sp, #48	@ 0x30
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]
	/* Prevent unused argument(s) compilation warning */
	UNUSED(hcan);
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022f4:	f107 031c 	add.w	r3, r7, #28
 80022f8:	2200      	movs	r2, #0
 80022fa:	601a      	str	r2, [r3, #0]
 80022fc:	605a      	str	r2, [r3, #4]
 80022fe:	609a      	str	r2, [r3, #8]
 8002300:	60da      	str	r2, [r3, #12]
 8002302:	611a      	str	r2, [r3, #16]
	if(hcan->Instance==CAN1)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	4a42      	ldr	r2, [pc, #264]	@ (8002414 <HAL_CAN_MspInit+0x128>)
 800230a:	4293      	cmp	r3, r2
 800230c:	d135      	bne.n	800237a <HAL_CAN_MspInit+0x8e>
	{
		/* USER CODE BEGIN CAN1_MspInit 0 */

		/* USER CODE END CAN1_MspInit 0 */
		/* Peripheral clock enable */
		HAL_RCC_CAN1_CLK_ENABLED++;
 800230e:	4b42      	ldr	r3, [pc, #264]	@ (8002418 <HAL_CAN_MspInit+0x12c>)
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	3301      	adds	r3, #1
 8002314:	4a40      	ldr	r2, [pc, #256]	@ (8002418 <HAL_CAN_MspInit+0x12c>)
 8002316:	6013      	str	r3, [r2, #0]
		if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8002318:	4b3f      	ldr	r3, [pc, #252]	@ (8002418 <HAL_CAN_MspInit+0x12c>)
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	2b01      	cmp	r3, #1
 800231e:	d10d      	bne.n	800233c <HAL_CAN_MspInit+0x50>
			__HAL_RCC_CAN1_CLK_ENABLE();
 8002320:	2300      	movs	r3, #0
 8002322:	61bb      	str	r3, [r7, #24]
 8002324:	4b3d      	ldr	r3, [pc, #244]	@ (800241c <HAL_CAN_MspInit+0x130>)
 8002326:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002328:	4a3c      	ldr	r2, [pc, #240]	@ (800241c <HAL_CAN_MspInit+0x130>)
 800232a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800232e:	6413      	str	r3, [r2, #64]	@ 0x40
 8002330:	4b3a      	ldr	r3, [pc, #232]	@ (800241c <HAL_CAN_MspInit+0x130>)
 8002332:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002334:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002338:	61bb      	str	r3, [r7, #24]
 800233a:	69bb      	ldr	r3, [r7, #24]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
		GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
#else
		__HAL_RCC_GPIOD_CLK_ENABLE();
 800233c:	2300      	movs	r3, #0
 800233e:	617b      	str	r3, [r7, #20]
 8002340:	4b36      	ldr	r3, [pc, #216]	@ (800241c <HAL_CAN_MspInit+0x130>)
 8002342:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002344:	4a35      	ldr	r2, [pc, #212]	@ (800241c <HAL_CAN_MspInit+0x130>)
 8002346:	f043 0308 	orr.w	r3, r3, #8
 800234a:	6313      	str	r3, [r2, #48]	@ 0x30
 800234c:	4b33      	ldr	r3, [pc, #204]	@ (800241c <HAL_CAN_MspInit+0x130>)
 800234e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002350:	f003 0308 	and.w	r3, r3, #8
 8002354:	617b      	str	r3, [r7, #20]
 8002356:	697b      	ldr	r3, [r7, #20]
		/**CAN1 GPIO Configuration
    		PD0     ------> CAN1_RX
    		PD1     ------> CAN1_TX
		 */
		GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0;
 8002358:	2303      	movs	r3, #3
 800235a:	61fb      	str	r3, [r7, #28]
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800235c:	2302      	movs	r3, #2
 800235e:	623b      	str	r3, [r7, #32]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002360:	2300      	movs	r3, #0
 8002362:	627b      	str	r3, [r7, #36]	@ 0x24
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002364:	2303      	movs	r3, #3
 8002366:	62bb      	str	r3, [r7, #40]	@ 0x28
		GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8002368:	2309      	movs	r3, #9
 800236a:	62fb      	str	r3, [r7, #44]	@ 0x2c
		HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800236c:	f107 031c 	add.w	r3, r7, #28
 8002370:	4619      	mov	r1, r3
 8002372:	482b      	ldr	r0, [pc, #172]	@ (8002420 <HAL_CAN_MspInit+0x134>)
 8002374:	f00b fa5e 	bl	800d834 <HAL_GPIO_Init>
		/* USER CODE BEGIN CAN2_MspInit 1 */

		/* USER CODE END CAN2_MspInit 1 */
	}

}
 8002378:	e048      	b.n	800240c <HAL_CAN_MspInit+0x120>
	else if(hcan->Instance==CAN2)
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	4a29      	ldr	r2, [pc, #164]	@ (8002424 <HAL_CAN_MspInit+0x138>)
 8002380:	4293      	cmp	r3, r2
 8002382:	d143      	bne.n	800240c <HAL_CAN_MspInit+0x120>
		__HAL_RCC_CAN2_CLK_ENABLE();
 8002384:	2300      	movs	r3, #0
 8002386:	613b      	str	r3, [r7, #16]
 8002388:	4b24      	ldr	r3, [pc, #144]	@ (800241c <HAL_CAN_MspInit+0x130>)
 800238a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800238c:	4a23      	ldr	r2, [pc, #140]	@ (800241c <HAL_CAN_MspInit+0x130>)
 800238e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002392:	6413      	str	r3, [r2, #64]	@ 0x40
 8002394:	4b21      	ldr	r3, [pc, #132]	@ (800241c <HAL_CAN_MspInit+0x130>)
 8002396:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002398:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800239c:	613b      	str	r3, [r7, #16]
 800239e:	693b      	ldr	r3, [r7, #16]
		HAL_RCC_CAN1_CLK_ENABLED++;
 80023a0:	4b1d      	ldr	r3, [pc, #116]	@ (8002418 <HAL_CAN_MspInit+0x12c>)
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	3301      	adds	r3, #1
 80023a6:	4a1c      	ldr	r2, [pc, #112]	@ (8002418 <HAL_CAN_MspInit+0x12c>)
 80023a8:	6013      	str	r3, [r2, #0]
		if(HAL_RCC_CAN1_CLK_ENABLED==1){
 80023aa:	4b1b      	ldr	r3, [pc, #108]	@ (8002418 <HAL_CAN_MspInit+0x12c>)
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	2b01      	cmp	r3, #1
 80023b0:	d10d      	bne.n	80023ce <HAL_CAN_MspInit+0xe2>
			__HAL_RCC_CAN1_CLK_ENABLE();
 80023b2:	2300      	movs	r3, #0
 80023b4:	60fb      	str	r3, [r7, #12]
 80023b6:	4b19      	ldr	r3, [pc, #100]	@ (800241c <HAL_CAN_MspInit+0x130>)
 80023b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023ba:	4a18      	ldr	r2, [pc, #96]	@ (800241c <HAL_CAN_MspInit+0x130>)
 80023bc:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80023c0:	6413      	str	r3, [r2, #64]	@ 0x40
 80023c2:	4b16      	ldr	r3, [pc, #88]	@ (800241c <HAL_CAN_MspInit+0x130>)
 80023c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80023ca:	60fb      	str	r3, [r7, #12]
 80023cc:	68fb      	ldr	r3, [r7, #12]
		__HAL_RCC_GPIOB_CLK_ENABLE();
 80023ce:	2300      	movs	r3, #0
 80023d0:	60bb      	str	r3, [r7, #8]
 80023d2:	4b12      	ldr	r3, [pc, #72]	@ (800241c <HAL_CAN_MspInit+0x130>)
 80023d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023d6:	4a11      	ldr	r2, [pc, #68]	@ (800241c <HAL_CAN_MspInit+0x130>)
 80023d8:	f043 0302 	orr.w	r3, r3, #2
 80023dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80023de:	4b0f      	ldr	r3, [pc, #60]	@ (800241c <HAL_CAN_MspInit+0x130>)
 80023e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023e2:	f003 0302 	and.w	r3, r3, #2
 80023e6:	60bb      	str	r3, [r7, #8]
 80023e8:	68bb      	ldr	r3, [r7, #8]
		GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 80023ea:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 80023ee:	61fb      	str	r3, [r7, #28]
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023f0:	2302      	movs	r3, #2
 80023f2:	623b      	str	r3, [r7, #32]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023f4:	2300      	movs	r3, #0
 80023f6:	627b      	str	r3, [r7, #36]	@ 0x24
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023f8:	2303      	movs	r3, #3
 80023fa:	62bb      	str	r3, [r7, #40]	@ 0x28
		GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 80023fc:	2309      	movs	r3, #9
 80023fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
		HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002400:	f107 031c 	add.w	r3, r7, #28
 8002404:	4619      	mov	r1, r3
 8002406:	4808      	ldr	r0, [pc, #32]	@ (8002428 <HAL_CAN_MspInit+0x13c>)
 8002408:	f00b fa14 	bl	800d834 <HAL_GPIO_Init>
}
 800240c:	bf00      	nop
 800240e:	3730      	adds	r7, #48	@ 0x30
 8002410:	46bd      	mov	sp, r7
 8002412:	bd80      	pop	{r7, pc}
 8002414:	40006400 	.word	0x40006400
 8002418:	200002e4 	.word	0x200002e4
 800241c:	40023800 	.word	0x40023800
 8002420:	40020c00 	.word	0x40020c00
 8002424:	40006800 	.word	0x40006800
 8002428:	40020400 	.word	0x40020400

0800242c <HAL_I2C_MspInit>:
 * This function configures the hardware resources used in this example
 * @param hi2c: I2C handle pointer
 * @retval None
 */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800242c:	b580      	push	{r7, lr}
 800242e:	b08e      	sub	sp, #56	@ 0x38
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]
	/* Prevent unused argument(s) compilation warning */
	UNUSED(hi2c);
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002434:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002438:	2200      	movs	r2, #0
 800243a:	601a      	str	r2, [r3, #0]
 800243c:	605a      	str	r2, [r3, #4]
 800243e:	609a      	str	r2, [r3, #8]
 8002440:	60da      	str	r2, [r3, #12]
 8002442:	611a      	str	r2, [r3, #16]
	if(hi2c->Instance==I2C1)
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	4a5c      	ldr	r2, [pc, #368]	@ (80025bc <HAL_I2C_MspInit+0x190>)
 800244a:	4293      	cmp	r3, r2
 800244c:	d12d      	bne.n	80024aa <HAL_I2C_MspInit+0x7e>
	{
		/* USER CODE BEGIN I2C1_MspInit 0 */

		/* USER CODE END I2C1_MspInit 0 */
		__HAL_RCC_GPIOB_CLK_ENABLE();
 800244e:	2300      	movs	r3, #0
 8002450:	623b      	str	r3, [r7, #32]
 8002452:	4b5b      	ldr	r3, [pc, #364]	@ (80025c0 <HAL_I2C_MspInit+0x194>)
 8002454:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002456:	4a5a      	ldr	r2, [pc, #360]	@ (80025c0 <HAL_I2C_MspInit+0x194>)
 8002458:	f043 0302 	orr.w	r3, r3, #2
 800245c:	6313      	str	r3, [r2, #48]	@ 0x30
 800245e:	4b58      	ldr	r3, [pc, #352]	@ (80025c0 <HAL_I2C_MspInit+0x194>)
 8002460:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002462:	f003 0302 	and.w	r3, r3, #2
 8002466:	623b      	str	r3, [r7, #32]
 8002468:	6a3b      	ldr	r3, [r7, #32]
#else
		/**I2C1 GPIO Configuration
    		PB8     ------> I2C1_SCL
    		PB9     ------> I2C1_SDA
		 */
		GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800246a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800246e:	627b      	str	r3, [r7, #36]	@ 0x24
#endif
		GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002470:	2312      	movs	r3, #18
 8002472:	62bb      	str	r3, [r7, #40]	@ 0x28
		GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002474:	2301      	movs	r3, #1
 8002476:	62fb      	str	r3, [r7, #44]	@ 0x2c
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002478:	2303      	movs	r3, #3
 800247a:	633b      	str	r3, [r7, #48]	@ 0x30
		GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800247c:	2304      	movs	r3, #4
 800247e:	637b      	str	r3, [r7, #52]	@ 0x34
		HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002480:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002484:	4619      	mov	r1, r3
 8002486:	484f      	ldr	r0, [pc, #316]	@ (80025c4 <HAL_I2C_MspInit+0x198>)
 8002488:	f00b f9d4 	bl	800d834 <HAL_GPIO_Init>

		/* Peripheral clock enable */
		__HAL_RCC_I2C1_CLK_ENABLE();
 800248c:	2300      	movs	r3, #0
 800248e:	61fb      	str	r3, [r7, #28]
 8002490:	4b4b      	ldr	r3, [pc, #300]	@ (80025c0 <HAL_I2C_MspInit+0x194>)
 8002492:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002494:	4a4a      	ldr	r2, [pc, #296]	@ (80025c0 <HAL_I2C_MspInit+0x194>)
 8002496:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800249a:	6413      	str	r3, [r2, #64]	@ 0x40
 800249c:	4b48      	ldr	r3, [pc, #288]	@ (80025c0 <HAL_I2C_MspInit+0x194>)
 800249e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024a0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80024a4:	61fb      	str	r3, [r7, #28]
 80024a6:	69fb      	ldr	r3, [r7, #28]
		/* USER CODE BEGIN I2C3_MspInit 1 */

		/* USER CODE END I2C3_MspInit 1 */
	}

}
 80024a8:	e083      	b.n	80025b2 <HAL_I2C_MspInit+0x186>
	else if(hi2c->Instance==I2C2)
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	4a46      	ldr	r2, [pc, #280]	@ (80025c8 <HAL_I2C_MspInit+0x19c>)
 80024b0:	4293      	cmp	r3, r2
 80024b2:	d12d      	bne.n	8002510 <HAL_I2C_MspInit+0xe4>
		__HAL_RCC_GPIOB_CLK_ENABLE();
 80024b4:	2300      	movs	r3, #0
 80024b6:	61bb      	str	r3, [r7, #24]
 80024b8:	4b41      	ldr	r3, [pc, #260]	@ (80025c0 <HAL_I2C_MspInit+0x194>)
 80024ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024bc:	4a40      	ldr	r2, [pc, #256]	@ (80025c0 <HAL_I2C_MspInit+0x194>)
 80024be:	f043 0302 	orr.w	r3, r3, #2
 80024c2:	6313      	str	r3, [r2, #48]	@ 0x30
 80024c4:	4b3e      	ldr	r3, [pc, #248]	@ (80025c0 <HAL_I2C_MspInit+0x194>)
 80024c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024c8:	f003 0302 	and.w	r3, r3, #2
 80024cc:	61bb      	str	r3, [r7, #24]
 80024ce:	69bb      	ldr	r3, [r7, #24]
		GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80024d0:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80024d4:	627b      	str	r3, [r7, #36]	@ 0x24
		GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80024d6:	2312      	movs	r3, #18
 80024d8:	62bb      	str	r3, [r7, #40]	@ 0x28
		GPIO_InitStruct.Pull = GPIO_PULLUP;
 80024da:	2301      	movs	r3, #1
 80024dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024de:	2303      	movs	r3, #3
 80024e0:	633b      	str	r3, [r7, #48]	@ 0x30
		GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80024e2:	2304      	movs	r3, #4
 80024e4:	637b      	str	r3, [r7, #52]	@ 0x34
		HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80024e6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80024ea:	4619      	mov	r1, r3
 80024ec:	4835      	ldr	r0, [pc, #212]	@ (80025c4 <HAL_I2C_MspInit+0x198>)
 80024ee:	f00b f9a1 	bl	800d834 <HAL_GPIO_Init>
		__HAL_RCC_I2C2_CLK_ENABLE();
 80024f2:	2300      	movs	r3, #0
 80024f4:	617b      	str	r3, [r7, #20]
 80024f6:	4b32      	ldr	r3, [pc, #200]	@ (80025c0 <HAL_I2C_MspInit+0x194>)
 80024f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024fa:	4a31      	ldr	r2, [pc, #196]	@ (80025c0 <HAL_I2C_MspInit+0x194>)
 80024fc:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002500:	6413      	str	r3, [r2, #64]	@ 0x40
 8002502:	4b2f      	ldr	r3, [pc, #188]	@ (80025c0 <HAL_I2C_MspInit+0x194>)
 8002504:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002506:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800250a:	617b      	str	r3, [r7, #20]
 800250c:	697b      	ldr	r3, [r7, #20]
}
 800250e:	e050      	b.n	80025b2 <HAL_I2C_MspInit+0x186>
	else if(hi2c->Instance==I2C3)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	4a2d      	ldr	r2, [pc, #180]	@ (80025cc <HAL_I2C_MspInit+0x1a0>)
 8002516:	4293      	cmp	r3, r2
 8002518:	d14b      	bne.n	80025b2 <HAL_I2C_MspInit+0x186>
		__HAL_RCC_GPIOC_CLK_ENABLE();
 800251a:	2300      	movs	r3, #0
 800251c:	613b      	str	r3, [r7, #16]
 800251e:	4b28      	ldr	r3, [pc, #160]	@ (80025c0 <HAL_I2C_MspInit+0x194>)
 8002520:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002522:	4a27      	ldr	r2, [pc, #156]	@ (80025c0 <HAL_I2C_MspInit+0x194>)
 8002524:	f043 0304 	orr.w	r3, r3, #4
 8002528:	6313      	str	r3, [r2, #48]	@ 0x30
 800252a:	4b25      	ldr	r3, [pc, #148]	@ (80025c0 <HAL_I2C_MspInit+0x194>)
 800252c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800252e:	f003 0304 	and.w	r3, r3, #4
 8002532:	613b      	str	r3, [r7, #16]
 8002534:	693b      	ldr	r3, [r7, #16]
		__HAL_RCC_GPIOA_CLK_ENABLE();
 8002536:	2300      	movs	r3, #0
 8002538:	60fb      	str	r3, [r7, #12]
 800253a:	4b21      	ldr	r3, [pc, #132]	@ (80025c0 <HAL_I2C_MspInit+0x194>)
 800253c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800253e:	4a20      	ldr	r2, [pc, #128]	@ (80025c0 <HAL_I2C_MspInit+0x194>)
 8002540:	f043 0301 	orr.w	r3, r3, #1
 8002544:	6313      	str	r3, [r2, #48]	@ 0x30
 8002546:	4b1e      	ldr	r3, [pc, #120]	@ (80025c0 <HAL_I2C_MspInit+0x194>)
 8002548:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800254a:	f003 0301 	and.w	r3, r3, #1
 800254e:	60fb      	str	r3, [r7, #12]
 8002550:	68fb      	ldr	r3, [r7, #12]
		GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002552:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002556:	627b      	str	r3, [r7, #36]	@ 0x24
		GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002558:	2312      	movs	r3, #18
 800255a:	62bb      	str	r3, [r7, #40]	@ 0x28
		GPIO_InitStruct.Pull = GPIO_PULLUP;
 800255c:	2301      	movs	r3, #1
 800255e:	62fb      	str	r3, [r7, #44]	@ 0x2c
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002560:	2303      	movs	r3, #3
 8002562:	633b      	str	r3, [r7, #48]	@ 0x30
		GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002564:	2304      	movs	r3, #4
 8002566:	637b      	str	r3, [r7, #52]	@ 0x34
		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002568:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800256c:	4619      	mov	r1, r3
 800256e:	4818      	ldr	r0, [pc, #96]	@ (80025d0 <HAL_I2C_MspInit+0x1a4>)
 8002570:	f00b f960 	bl	800d834 <HAL_GPIO_Init>
		GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002574:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002578:	627b      	str	r3, [r7, #36]	@ 0x24
		GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800257a:	2312      	movs	r3, #18
 800257c:	62bb      	str	r3, [r7, #40]	@ 0x28
		GPIO_InitStruct.Pull = GPIO_PULLUP;
 800257e:	2301      	movs	r3, #1
 8002580:	62fb      	str	r3, [r7, #44]	@ 0x2c
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002582:	2303      	movs	r3, #3
 8002584:	633b      	str	r3, [r7, #48]	@ 0x30
		GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002586:	2304      	movs	r3, #4
 8002588:	637b      	str	r3, [r7, #52]	@ 0x34
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800258a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800258e:	4619      	mov	r1, r3
 8002590:	4810      	ldr	r0, [pc, #64]	@ (80025d4 <HAL_I2C_MspInit+0x1a8>)
 8002592:	f00b f94f 	bl	800d834 <HAL_GPIO_Init>
		__HAL_RCC_I2C3_CLK_ENABLE();
 8002596:	2300      	movs	r3, #0
 8002598:	60bb      	str	r3, [r7, #8]
 800259a:	4b09      	ldr	r3, [pc, #36]	@ (80025c0 <HAL_I2C_MspInit+0x194>)
 800259c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800259e:	4a08      	ldr	r2, [pc, #32]	@ (80025c0 <HAL_I2C_MspInit+0x194>)
 80025a0:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80025a4:	6413      	str	r3, [r2, #64]	@ 0x40
 80025a6:	4b06      	ldr	r3, [pc, #24]	@ (80025c0 <HAL_I2C_MspInit+0x194>)
 80025a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025aa:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80025ae:	60bb      	str	r3, [r7, #8]
 80025b0:	68bb      	ldr	r3, [r7, #8]
}
 80025b2:	bf00      	nop
 80025b4:	3738      	adds	r7, #56	@ 0x38
 80025b6:	46bd      	mov	sp, r7
 80025b8:	bd80      	pop	{r7, pc}
 80025ba:	bf00      	nop
 80025bc:	40005400 	.word	0x40005400
 80025c0:	40023800 	.word	0x40023800
 80025c4:	40020400 	.word	0x40020400
 80025c8:	40005800 	.word	0x40005800
 80025cc:	40005c00 	.word	0x40005c00
 80025d0:	40020800 	.word	0x40020800
 80025d4:	40020000 	.word	0x40020000

080025d8 <HAL_I2C_MspDeInit>:
 * This function freeze the hardware resources used in this example
 * @param hi2c: I2C handle pointer
 * @retval None
 */
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 80025d8:	b580      	push	{r7, lr}
 80025da:	b082      	sub	sp, #8
 80025dc:	af00      	add	r7, sp, #0
 80025de:	6078      	str	r0, [r7, #4]
	/* Prevent unused argument(s) compilation warning */
	UNUSED(hi2c);
	if(hi2c->Instance==I2C1)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	4a2a      	ldr	r2, [pc, #168]	@ (8002690 <HAL_I2C_MspDeInit+0xb8>)
 80025e6:	4293      	cmp	r3, r2
 80025e8:	d116      	bne.n	8002618 <HAL_I2C_MspDeInit+0x40>
	{
		/* USER CODE BEGIN I2C1_MspDeInit 0 */

		/* USER CODE END I2C1_MspDeInit 0 */
		/* Peripheral clock disable */
		__HAL_RCC_I2C1_CLK_DISABLE();
 80025ea:	4b2a      	ldr	r3, [pc, #168]	@ (8002694 <HAL_I2C_MspDeInit+0xbc>)
 80025ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025ee:	4a29      	ldr	r2, [pc, #164]	@ (8002694 <HAL_I2C_MspDeInit+0xbc>)
 80025f0:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80025f4:	6413      	str	r3, [r2, #64]	@ 0x40
#else
		/**I2C1 GPIO Configuration
    		PB8     ------> I2C1_SCL
    		PB9     ------> I2C1_SDA
		 */
		HAL_GPIO_DeInit(GPIOB, GPIO_PIN_8);
 80025f6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80025fa:	4827      	ldr	r0, [pc, #156]	@ (8002698 <HAL_I2C_MspDeInit+0xc0>)
 80025fc:	f00b fab6 	bl	800db6c <HAL_GPIO_DeInit>

		HAL_GPIO_DeInit(GPIOB, GPIO_PIN_9);
 8002600:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002604:	4824      	ldr	r0, [pc, #144]	@ (8002698 <HAL_I2C_MspDeInit+0xc0>)
 8002606:	f00b fab1 	bl	800db6c <HAL_GPIO_DeInit>
#endif

		/* I2C1 interrupt DeInit */
		HAL_NVIC_DisableIRQ(I2C1_EV_IRQn);
 800260a:	201f      	movs	r0, #31
 800260c:	f00a fc7c 	bl	800cf08 <HAL_NVIC_DisableIRQ>
		HAL_NVIC_DisableIRQ(I2C1_ER_IRQn);
 8002610:	2020      	movs	r0, #32
 8002612:	f00a fc79 	bl	800cf08 <HAL_NVIC_DisableIRQ>
		/* USER CODE BEGIN I2C3_MspDeInit 1 */

		/* USER CODE END I2C3_MspDeInit 1 */
	}

}
 8002616:	e036      	b.n	8002686 <HAL_I2C_MspDeInit+0xae>
	else if(hi2c->Instance==I2C2)
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	4a1f      	ldr	r2, [pc, #124]	@ (800269c <HAL_I2C_MspDeInit+0xc4>)
 800261e:	4293      	cmp	r3, r2
 8002620:	d116      	bne.n	8002650 <HAL_I2C_MspDeInit+0x78>
		__HAL_RCC_I2C2_CLK_DISABLE();
 8002622:	4b1c      	ldr	r3, [pc, #112]	@ (8002694 <HAL_I2C_MspDeInit+0xbc>)
 8002624:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002626:	4a1b      	ldr	r2, [pc, #108]	@ (8002694 <HAL_I2C_MspDeInit+0xbc>)
 8002628:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 800262c:	6413      	str	r3, [r2, #64]	@ 0x40
		HAL_GPIO_DeInit(GPIOB, GPIO_PIN_10);
 800262e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8002632:	4819      	ldr	r0, [pc, #100]	@ (8002698 <HAL_I2C_MspDeInit+0xc0>)
 8002634:	f00b fa9a 	bl	800db6c <HAL_GPIO_DeInit>
		HAL_GPIO_DeInit(GPIOB, GPIO_PIN_11);
 8002638:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800263c:	4816      	ldr	r0, [pc, #88]	@ (8002698 <HAL_I2C_MspDeInit+0xc0>)
 800263e:	f00b fa95 	bl	800db6c <HAL_GPIO_DeInit>
		HAL_NVIC_DisableIRQ(I2C2_EV_IRQn);
 8002642:	2021      	movs	r0, #33	@ 0x21
 8002644:	f00a fc60 	bl	800cf08 <HAL_NVIC_DisableIRQ>
		HAL_NVIC_DisableIRQ(I2C2_ER_IRQn);
 8002648:	2022      	movs	r0, #34	@ 0x22
 800264a:	f00a fc5d 	bl	800cf08 <HAL_NVIC_DisableIRQ>
}
 800264e:	e01a      	b.n	8002686 <HAL_I2C_MspDeInit+0xae>
	else if(hi2c->Instance==I2C3)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	4a12      	ldr	r2, [pc, #72]	@ (80026a0 <HAL_I2C_MspDeInit+0xc8>)
 8002656:	4293      	cmp	r3, r2
 8002658:	d115      	bne.n	8002686 <HAL_I2C_MspDeInit+0xae>
		__HAL_RCC_I2C3_CLK_DISABLE();
 800265a:	4b0e      	ldr	r3, [pc, #56]	@ (8002694 <HAL_I2C_MspDeInit+0xbc>)
 800265c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800265e:	4a0d      	ldr	r2, [pc, #52]	@ (8002694 <HAL_I2C_MspDeInit+0xbc>)
 8002660:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8002664:	6413      	str	r3, [r2, #64]	@ 0x40
		HAL_GPIO_DeInit(GPIOC, GPIO_PIN_9);
 8002666:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800266a:	480e      	ldr	r0, [pc, #56]	@ (80026a4 <HAL_I2C_MspDeInit+0xcc>)
 800266c:	f00b fa7e 	bl	800db6c <HAL_GPIO_DeInit>
		HAL_GPIO_DeInit(GPIOA, GPIO_PIN_8);
 8002670:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002674:	480c      	ldr	r0, [pc, #48]	@ (80026a8 <HAL_I2C_MspDeInit+0xd0>)
 8002676:	f00b fa79 	bl	800db6c <HAL_GPIO_DeInit>
		HAL_NVIC_DisableIRQ(I2C3_EV_IRQn);
 800267a:	2048      	movs	r0, #72	@ 0x48
 800267c:	f00a fc44 	bl	800cf08 <HAL_NVIC_DisableIRQ>
		HAL_NVIC_DisableIRQ(I2C3_ER_IRQn);
 8002680:	2049      	movs	r0, #73	@ 0x49
 8002682:	f00a fc41 	bl	800cf08 <HAL_NVIC_DisableIRQ>
}
 8002686:	bf00      	nop
 8002688:	3708      	adds	r7, #8
 800268a:	46bd      	mov	sp, r7
 800268c:	bd80      	pop	{r7, pc}
 800268e:	bf00      	nop
 8002690:	40005400 	.word	0x40005400
 8002694:	40023800 	.word	0x40023800
 8002698:	40020400 	.word	0x40020400
 800269c:	40005800 	.word	0x40005800
 80026a0:	40005c00 	.word	0x40005c00
 80026a4:	40020800 	.word	0x40020800
 80026a8:	40020000 	.word	0x40020000

080026ac <HAL_TIM_PWM_MspInit>:


void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80026ac:	b480      	push	{r7}
 80026ae:	b091      	sub	sp, #68	@ 0x44
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]
	/* Prevent unused argument(s) compilation warning */
	UNUSED(htim_pwm);
	if(htim_pwm->Instance==TIM1)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	4a8d      	ldr	r2, [pc, #564]	@ (80028f0 <HAL_TIM_PWM_MspInit+0x244>)
 80026ba:	4293      	cmp	r3, r2
 80026bc:	d10e      	bne.n	80026dc <HAL_TIM_PWM_MspInit+0x30>
	{
		/* Peripheral clock enable */
		__HAL_RCC_TIM1_CLK_ENABLE();
 80026be:	2300      	movs	r3, #0
 80026c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80026c2:	4b8c      	ldr	r3, [pc, #560]	@ (80028f4 <HAL_TIM_PWM_MspInit+0x248>)
 80026c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026c6:	4a8b      	ldr	r2, [pc, #556]	@ (80028f4 <HAL_TIM_PWM_MspInit+0x248>)
 80026c8:	f043 0301 	orr.w	r3, r3, #1
 80026cc:	6453      	str	r3, [r2, #68]	@ 0x44
 80026ce:	4b89      	ldr	r3, [pc, #548]	@ (80028f4 <HAL_TIM_PWM_MspInit+0x248>)
 80026d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026d2:	f003 0301 	and.w	r3, r3, #1
 80026d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80026d8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
	{
		/* Peripheral clock enable */
		__HAL_RCC_TIM14_CLK_ENABLE();
	}

}
 80026da:	e102      	b.n	80028e2 <HAL_TIM_PWM_MspInit+0x236>
	else if(htim_pwm->Instance==TIM2)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80026e4:	d10e      	bne.n	8002704 <HAL_TIM_PWM_MspInit+0x58>
		__HAL_RCC_TIM2_CLK_ENABLE();
 80026e6:	2300      	movs	r3, #0
 80026e8:	63bb      	str	r3, [r7, #56]	@ 0x38
 80026ea:	4b82      	ldr	r3, [pc, #520]	@ (80028f4 <HAL_TIM_PWM_MspInit+0x248>)
 80026ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026ee:	4a81      	ldr	r2, [pc, #516]	@ (80028f4 <HAL_TIM_PWM_MspInit+0x248>)
 80026f0:	f043 0301 	orr.w	r3, r3, #1
 80026f4:	6413      	str	r3, [r2, #64]	@ 0x40
 80026f6:	4b7f      	ldr	r3, [pc, #508]	@ (80028f4 <HAL_TIM_PWM_MspInit+0x248>)
 80026f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026fa:	f003 0301 	and.w	r3, r3, #1
 80026fe:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002700:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8002702:	e0ee      	b.n	80028e2 <HAL_TIM_PWM_MspInit+0x236>
	else if(htim_pwm->Instance==TIM3)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	4a7b      	ldr	r2, [pc, #492]	@ (80028f8 <HAL_TIM_PWM_MspInit+0x24c>)
 800270a:	4293      	cmp	r3, r2
 800270c:	d10e      	bne.n	800272c <HAL_TIM_PWM_MspInit+0x80>
		__HAL_RCC_TIM3_CLK_ENABLE();
 800270e:	2300      	movs	r3, #0
 8002710:	637b      	str	r3, [r7, #52]	@ 0x34
 8002712:	4b78      	ldr	r3, [pc, #480]	@ (80028f4 <HAL_TIM_PWM_MspInit+0x248>)
 8002714:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002716:	4a77      	ldr	r2, [pc, #476]	@ (80028f4 <HAL_TIM_PWM_MspInit+0x248>)
 8002718:	f043 0302 	orr.w	r3, r3, #2
 800271c:	6413      	str	r3, [r2, #64]	@ 0x40
 800271e:	4b75      	ldr	r3, [pc, #468]	@ (80028f4 <HAL_TIM_PWM_MspInit+0x248>)
 8002720:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002722:	f003 0302 	and.w	r3, r3, #2
 8002726:	637b      	str	r3, [r7, #52]	@ 0x34
 8002728:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800272a:	e0da      	b.n	80028e2 <HAL_TIM_PWM_MspInit+0x236>
	else if(htim_pwm->Instance==TIM4)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	4a72      	ldr	r2, [pc, #456]	@ (80028fc <HAL_TIM_PWM_MspInit+0x250>)
 8002732:	4293      	cmp	r3, r2
 8002734:	d10e      	bne.n	8002754 <HAL_TIM_PWM_MspInit+0xa8>
		__HAL_RCC_TIM4_CLK_ENABLE();
 8002736:	2300      	movs	r3, #0
 8002738:	633b      	str	r3, [r7, #48]	@ 0x30
 800273a:	4b6e      	ldr	r3, [pc, #440]	@ (80028f4 <HAL_TIM_PWM_MspInit+0x248>)
 800273c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800273e:	4a6d      	ldr	r2, [pc, #436]	@ (80028f4 <HAL_TIM_PWM_MspInit+0x248>)
 8002740:	f043 0304 	orr.w	r3, r3, #4
 8002744:	6413      	str	r3, [r2, #64]	@ 0x40
 8002746:	4b6b      	ldr	r3, [pc, #428]	@ (80028f4 <HAL_TIM_PWM_MspInit+0x248>)
 8002748:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800274a:	f003 0304 	and.w	r3, r3, #4
 800274e:	633b      	str	r3, [r7, #48]	@ 0x30
 8002750:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
}
 8002752:	e0c6      	b.n	80028e2 <HAL_TIM_PWM_MspInit+0x236>
	else if(htim_pwm->Instance==TIM5)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	4a69      	ldr	r2, [pc, #420]	@ (8002900 <HAL_TIM_PWM_MspInit+0x254>)
 800275a:	4293      	cmp	r3, r2
 800275c:	d10e      	bne.n	800277c <HAL_TIM_PWM_MspInit+0xd0>
		__HAL_RCC_TIM5_CLK_ENABLE();
 800275e:	2300      	movs	r3, #0
 8002760:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002762:	4b64      	ldr	r3, [pc, #400]	@ (80028f4 <HAL_TIM_PWM_MspInit+0x248>)
 8002764:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002766:	4a63      	ldr	r2, [pc, #396]	@ (80028f4 <HAL_TIM_PWM_MspInit+0x248>)
 8002768:	f043 0308 	orr.w	r3, r3, #8
 800276c:	6413      	str	r3, [r2, #64]	@ 0x40
 800276e:	4b61      	ldr	r3, [pc, #388]	@ (80028f4 <HAL_TIM_PWM_MspInit+0x248>)
 8002770:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002772:	f003 0308 	and.w	r3, r3, #8
 8002776:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002778:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 800277a:	e0b2      	b.n	80028e2 <HAL_TIM_PWM_MspInit+0x236>
	else if(htim_pwm->Instance==TIM6)
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	4a60      	ldr	r2, [pc, #384]	@ (8002904 <HAL_TIM_PWM_MspInit+0x258>)
 8002782:	4293      	cmp	r3, r2
 8002784:	d10e      	bne.n	80027a4 <HAL_TIM_PWM_MspInit+0xf8>
		__HAL_RCC_TIM6_CLK_ENABLE();
 8002786:	2300      	movs	r3, #0
 8002788:	62bb      	str	r3, [r7, #40]	@ 0x28
 800278a:	4b5a      	ldr	r3, [pc, #360]	@ (80028f4 <HAL_TIM_PWM_MspInit+0x248>)
 800278c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800278e:	4a59      	ldr	r2, [pc, #356]	@ (80028f4 <HAL_TIM_PWM_MspInit+0x248>)
 8002790:	f043 0310 	orr.w	r3, r3, #16
 8002794:	6413      	str	r3, [r2, #64]	@ 0x40
 8002796:	4b57      	ldr	r3, [pc, #348]	@ (80028f4 <HAL_TIM_PWM_MspInit+0x248>)
 8002798:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800279a:	f003 0310 	and.w	r3, r3, #16
 800279e:	62bb      	str	r3, [r7, #40]	@ 0x28
 80027a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
}
 80027a2:	e09e      	b.n	80028e2 <HAL_TIM_PWM_MspInit+0x236>
	else if(htim_pwm->Instance==TIM7)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	4a57      	ldr	r2, [pc, #348]	@ (8002908 <HAL_TIM_PWM_MspInit+0x25c>)
 80027aa:	4293      	cmp	r3, r2
 80027ac:	d10e      	bne.n	80027cc <HAL_TIM_PWM_MspInit+0x120>
		__HAL_RCC_TIM7_CLK_ENABLE();
 80027ae:	2300      	movs	r3, #0
 80027b0:	627b      	str	r3, [r7, #36]	@ 0x24
 80027b2:	4b50      	ldr	r3, [pc, #320]	@ (80028f4 <HAL_TIM_PWM_MspInit+0x248>)
 80027b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027b6:	4a4f      	ldr	r2, [pc, #316]	@ (80028f4 <HAL_TIM_PWM_MspInit+0x248>)
 80027b8:	f043 0320 	orr.w	r3, r3, #32
 80027bc:	6413      	str	r3, [r2, #64]	@ 0x40
 80027be:	4b4d      	ldr	r3, [pc, #308]	@ (80028f4 <HAL_TIM_PWM_MspInit+0x248>)
 80027c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027c2:	f003 0320 	and.w	r3, r3, #32
 80027c6:	627b      	str	r3, [r7, #36]	@ 0x24
 80027c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80027ca:	e08a      	b.n	80028e2 <HAL_TIM_PWM_MspInit+0x236>
	else if(htim_pwm->Instance==TIM8)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	4a4e      	ldr	r2, [pc, #312]	@ (800290c <HAL_TIM_PWM_MspInit+0x260>)
 80027d2:	4293      	cmp	r3, r2
 80027d4:	d10e      	bne.n	80027f4 <HAL_TIM_PWM_MspInit+0x148>
		__HAL_RCC_TIM8_CLK_ENABLE();
 80027d6:	2300      	movs	r3, #0
 80027d8:	623b      	str	r3, [r7, #32]
 80027da:	4b46      	ldr	r3, [pc, #280]	@ (80028f4 <HAL_TIM_PWM_MspInit+0x248>)
 80027dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027de:	4a45      	ldr	r2, [pc, #276]	@ (80028f4 <HAL_TIM_PWM_MspInit+0x248>)
 80027e0:	f043 0302 	orr.w	r3, r3, #2
 80027e4:	6453      	str	r3, [r2, #68]	@ 0x44
 80027e6:	4b43      	ldr	r3, [pc, #268]	@ (80028f4 <HAL_TIM_PWM_MspInit+0x248>)
 80027e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027ea:	f003 0302 	and.w	r3, r3, #2
 80027ee:	623b      	str	r3, [r7, #32]
 80027f0:	6a3b      	ldr	r3, [r7, #32]
}
 80027f2:	e076      	b.n	80028e2 <HAL_TIM_PWM_MspInit+0x236>
	else if(htim_pwm->Instance==TIM9)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	4a45      	ldr	r2, [pc, #276]	@ (8002910 <HAL_TIM_PWM_MspInit+0x264>)
 80027fa:	4293      	cmp	r3, r2
 80027fc:	d10e      	bne.n	800281c <HAL_TIM_PWM_MspInit+0x170>
		__HAL_RCC_TIM9_CLK_ENABLE();
 80027fe:	2300      	movs	r3, #0
 8002800:	61fb      	str	r3, [r7, #28]
 8002802:	4b3c      	ldr	r3, [pc, #240]	@ (80028f4 <HAL_TIM_PWM_MspInit+0x248>)
 8002804:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002806:	4a3b      	ldr	r2, [pc, #236]	@ (80028f4 <HAL_TIM_PWM_MspInit+0x248>)
 8002808:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800280c:	6453      	str	r3, [r2, #68]	@ 0x44
 800280e:	4b39      	ldr	r3, [pc, #228]	@ (80028f4 <HAL_TIM_PWM_MspInit+0x248>)
 8002810:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002812:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002816:	61fb      	str	r3, [r7, #28]
 8002818:	69fb      	ldr	r3, [r7, #28]
}
 800281a:	e062      	b.n	80028e2 <HAL_TIM_PWM_MspInit+0x236>
	else if(htim_pwm->Instance==TIM10)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	4a3c      	ldr	r2, [pc, #240]	@ (8002914 <HAL_TIM_PWM_MspInit+0x268>)
 8002822:	4293      	cmp	r3, r2
 8002824:	d10e      	bne.n	8002844 <HAL_TIM_PWM_MspInit+0x198>
		__HAL_RCC_TIM10_CLK_ENABLE();
 8002826:	2300      	movs	r3, #0
 8002828:	61bb      	str	r3, [r7, #24]
 800282a:	4b32      	ldr	r3, [pc, #200]	@ (80028f4 <HAL_TIM_PWM_MspInit+0x248>)
 800282c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800282e:	4a31      	ldr	r2, [pc, #196]	@ (80028f4 <HAL_TIM_PWM_MspInit+0x248>)
 8002830:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002834:	6453      	str	r3, [r2, #68]	@ 0x44
 8002836:	4b2f      	ldr	r3, [pc, #188]	@ (80028f4 <HAL_TIM_PWM_MspInit+0x248>)
 8002838:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800283a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800283e:	61bb      	str	r3, [r7, #24]
 8002840:	69bb      	ldr	r3, [r7, #24]
}
 8002842:	e04e      	b.n	80028e2 <HAL_TIM_PWM_MspInit+0x236>
	else if(htim_pwm->Instance==TIM11)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	4a33      	ldr	r2, [pc, #204]	@ (8002918 <HAL_TIM_PWM_MspInit+0x26c>)
 800284a:	4293      	cmp	r3, r2
 800284c:	d10e      	bne.n	800286c <HAL_TIM_PWM_MspInit+0x1c0>
		__HAL_RCC_TIM11_CLK_ENABLE();
 800284e:	2300      	movs	r3, #0
 8002850:	617b      	str	r3, [r7, #20]
 8002852:	4b28      	ldr	r3, [pc, #160]	@ (80028f4 <HAL_TIM_PWM_MspInit+0x248>)
 8002854:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002856:	4a27      	ldr	r2, [pc, #156]	@ (80028f4 <HAL_TIM_PWM_MspInit+0x248>)
 8002858:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800285c:	6453      	str	r3, [r2, #68]	@ 0x44
 800285e:	4b25      	ldr	r3, [pc, #148]	@ (80028f4 <HAL_TIM_PWM_MspInit+0x248>)
 8002860:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002862:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002866:	617b      	str	r3, [r7, #20]
 8002868:	697b      	ldr	r3, [r7, #20]
}
 800286a:	e03a      	b.n	80028e2 <HAL_TIM_PWM_MspInit+0x236>
	else if(htim_pwm->Instance==TIM12)
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	4a2a      	ldr	r2, [pc, #168]	@ (800291c <HAL_TIM_PWM_MspInit+0x270>)
 8002872:	4293      	cmp	r3, r2
 8002874:	d10e      	bne.n	8002894 <HAL_TIM_PWM_MspInit+0x1e8>
		__HAL_RCC_TIM12_CLK_ENABLE();
 8002876:	2300      	movs	r3, #0
 8002878:	613b      	str	r3, [r7, #16]
 800287a:	4b1e      	ldr	r3, [pc, #120]	@ (80028f4 <HAL_TIM_PWM_MspInit+0x248>)
 800287c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800287e:	4a1d      	ldr	r2, [pc, #116]	@ (80028f4 <HAL_TIM_PWM_MspInit+0x248>)
 8002880:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002884:	6413      	str	r3, [r2, #64]	@ 0x40
 8002886:	4b1b      	ldr	r3, [pc, #108]	@ (80028f4 <HAL_TIM_PWM_MspInit+0x248>)
 8002888:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800288a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800288e:	613b      	str	r3, [r7, #16]
 8002890:	693b      	ldr	r3, [r7, #16]
}
 8002892:	e026      	b.n	80028e2 <HAL_TIM_PWM_MspInit+0x236>
	else if(htim_pwm->Instance==TIM13)
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	4a21      	ldr	r2, [pc, #132]	@ (8002920 <HAL_TIM_PWM_MspInit+0x274>)
 800289a:	4293      	cmp	r3, r2
 800289c:	d10e      	bne.n	80028bc <HAL_TIM_PWM_MspInit+0x210>
		__HAL_RCC_TIM13_CLK_ENABLE();
 800289e:	2300      	movs	r3, #0
 80028a0:	60fb      	str	r3, [r7, #12]
 80028a2:	4b14      	ldr	r3, [pc, #80]	@ (80028f4 <HAL_TIM_PWM_MspInit+0x248>)
 80028a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028a6:	4a13      	ldr	r2, [pc, #76]	@ (80028f4 <HAL_TIM_PWM_MspInit+0x248>)
 80028a8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80028ac:	6413      	str	r3, [r2, #64]	@ 0x40
 80028ae:	4b11      	ldr	r3, [pc, #68]	@ (80028f4 <HAL_TIM_PWM_MspInit+0x248>)
 80028b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80028b6:	60fb      	str	r3, [r7, #12]
 80028b8:	68fb      	ldr	r3, [r7, #12]
}
 80028ba:	e012      	b.n	80028e2 <HAL_TIM_PWM_MspInit+0x236>
	else if(htim_pwm->Instance==TIM14)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	4a18      	ldr	r2, [pc, #96]	@ (8002924 <HAL_TIM_PWM_MspInit+0x278>)
 80028c2:	4293      	cmp	r3, r2
 80028c4:	d10d      	bne.n	80028e2 <HAL_TIM_PWM_MspInit+0x236>
		__HAL_RCC_TIM14_CLK_ENABLE();
 80028c6:	2300      	movs	r3, #0
 80028c8:	60bb      	str	r3, [r7, #8]
 80028ca:	4b0a      	ldr	r3, [pc, #40]	@ (80028f4 <HAL_TIM_PWM_MspInit+0x248>)
 80028cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028ce:	4a09      	ldr	r2, [pc, #36]	@ (80028f4 <HAL_TIM_PWM_MspInit+0x248>)
 80028d0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80028d4:	6413      	str	r3, [r2, #64]	@ 0x40
 80028d6:	4b07      	ldr	r3, [pc, #28]	@ (80028f4 <HAL_TIM_PWM_MspInit+0x248>)
 80028d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80028de:	60bb      	str	r3, [r7, #8]
 80028e0:	68bb      	ldr	r3, [r7, #8]
}
 80028e2:	bf00      	nop
 80028e4:	3744      	adds	r7, #68	@ 0x44
 80028e6:	46bd      	mov	sp, r7
 80028e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ec:	4770      	bx	lr
 80028ee:	bf00      	nop
 80028f0:	40010000 	.word	0x40010000
 80028f4:	40023800 	.word	0x40023800
 80028f8:	40000400 	.word	0x40000400
 80028fc:	40000800 	.word	0x40000800
 8002900:	40000c00 	.word	0x40000c00
 8002904:	40001000 	.word	0x40001000
 8002908:	40001400 	.word	0x40001400
 800290c:	40010400 	.word	0x40010400
 8002910:	40014000 	.word	0x40014000
 8002914:	40014400 	.word	0x40014400
 8002918:	40014800 	.word	0x40014800
 800291c:	40001800 	.word	0x40001800
 8002920:	40001c00 	.word	0x40001c00
 8002924:	40002000 	.word	0x40002000

08002928 <HAL_TIM_Base_MspInit>:
 * This function configures the hardware resources used in this example
 * @param htim_base: TIM_Base handle pointer
 * @retval None
 */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002928:	b480      	push	{r7}
 800292a:	b091      	sub	sp, #68	@ 0x44
 800292c:	af00      	add	r7, sp, #0
 800292e:	6078      	str	r0, [r7, #4]
	/* Prevent unused argument(s) compilation warning */
	UNUSED(htim_base);
	if(htim_base->Instance==TIM1)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	4a8d      	ldr	r2, [pc, #564]	@ (8002b6c <HAL_TIM_Base_MspInit+0x244>)
 8002936:	4293      	cmp	r3, r2
 8002938:	d10e      	bne.n	8002958 <HAL_TIM_Base_MspInit+0x30>
	{
		/* Peripheral clock enable */
		__HAL_RCC_TIM1_CLK_ENABLE();
 800293a:	2300      	movs	r3, #0
 800293c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800293e:	4b8c      	ldr	r3, [pc, #560]	@ (8002b70 <HAL_TIM_Base_MspInit+0x248>)
 8002940:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002942:	4a8b      	ldr	r2, [pc, #556]	@ (8002b70 <HAL_TIM_Base_MspInit+0x248>)
 8002944:	f043 0301 	orr.w	r3, r3, #1
 8002948:	6453      	str	r3, [r2, #68]	@ 0x44
 800294a:	4b89      	ldr	r3, [pc, #548]	@ (8002b70 <HAL_TIM_Base_MspInit+0x248>)
 800294c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800294e:	f003 0301 	and.w	r3, r3, #1
 8002952:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002954:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
	else if(htim_base->Instance==TIM14)
	{
		/* Peripheral clock enable */
		__HAL_RCC_TIM14_CLK_ENABLE();
	}
}
 8002956:	e102      	b.n	8002b5e <HAL_TIM_Base_MspInit+0x236>
	else if(htim_base->Instance==TIM2)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002960:	d10e      	bne.n	8002980 <HAL_TIM_Base_MspInit+0x58>
		__HAL_RCC_TIM2_CLK_ENABLE();
 8002962:	2300      	movs	r3, #0
 8002964:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002966:	4b82      	ldr	r3, [pc, #520]	@ (8002b70 <HAL_TIM_Base_MspInit+0x248>)
 8002968:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800296a:	4a81      	ldr	r2, [pc, #516]	@ (8002b70 <HAL_TIM_Base_MspInit+0x248>)
 800296c:	f043 0301 	orr.w	r3, r3, #1
 8002970:	6413      	str	r3, [r2, #64]	@ 0x40
 8002972:	4b7f      	ldr	r3, [pc, #508]	@ (8002b70 <HAL_TIM_Base_MspInit+0x248>)
 8002974:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002976:	f003 0301 	and.w	r3, r3, #1
 800297a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800297c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 800297e:	e0ee      	b.n	8002b5e <HAL_TIM_Base_MspInit+0x236>
	else if(htim_base->Instance==TIM3)
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	4a7b      	ldr	r2, [pc, #492]	@ (8002b74 <HAL_TIM_Base_MspInit+0x24c>)
 8002986:	4293      	cmp	r3, r2
 8002988:	d10e      	bne.n	80029a8 <HAL_TIM_Base_MspInit+0x80>
		__HAL_RCC_TIM3_CLK_ENABLE();
 800298a:	2300      	movs	r3, #0
 800298c:	637b      	str	r3, [r7, #52]	@ 0x34
 800298e:	4b78      	ldr	r3, [pc, #480]	@ (8002b70 <HAL_TIM_Base_MspInit+0x248>)
 8002990:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002992:	4a77      	ldr	r2, [pc, #476]	@ (8002b70 <HAL_TIM_Base_MspInit+0x248>)
 8002994:	f043 0302 	orr.w	r3, r3, #2
 8002998:	6413      	str	r3, [r2, #64]	@ 0x40
 800299a:	4b75      	ldr	r3, [pc, #468]	@ (8002b70 <HAL_TIM_Base_MspInit+0x248>)
 800299c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800299e:	f003 0302 	and.w	r3, r3, #2
 80029a2:	637b      	str	r3, [r7, #52]	@ 0x34
 80029a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 80029a6:	e0da      	b.n	8002b5e <HAL_TIM_Base_MspInit+0x236>
	else if(htim_base->Instance==TIM4)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	4a72      	ldr	r2, [pc, #456]	@ (8002b78 <HAL_TIM_Base_MspInit+0x250>)
 80029ae:	4293      	cmp	r3, r2
 80029b0:	d10e      	bne.n	80029d0 <HAL_TIM_Base_MspInit+0xa8>
		__HAL_RCC_TIM4_CLK_ENABLE();
 80029b2:	2300      	movs	r3, #0
 80029b4:	633b      	str	r3, [r7, #48]	@ 0x30
 80029b6:	4b6e      	ldr	r3, [pc, #440]	@ (8002b70 <HAL_TIM_Base_MspInit+0x248>)
 80029b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029ba:	4a6d      	ldr	r2, [pc, #436]	@ (8002b70 <HAL_TIM_Base_MspInit+0x248>)
 80029bc:	f043 0304 	orr.w	r3, r3, #4
 80029c0:	6413      	str	r3, [r2, #64]	@ 0x40
 80029c2:	4b6b      	ldr	r3, [pc, #428]	@ (8002b70 <HAL_TIM_Base_MspInit+0x248>)
 80029c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029c6:	f003 0304 	and.w	r3, r3, #4
 80029ca:	633b      	str	r3, [r7, #48]	@ 0x30
 80029cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
}
 80029ce:	e0c6      	b.n	8002b5e <HAL_TIM_Base_MspInit+0x236>
	else if(htim_base->Instance==TIM5)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	4a69      	ldr	r2, [pc, #420]	@ (8002b7c <HAL_TIM_Base_MspInit+0x254>)
 80029d6:	4293      	cmp	r3, r2
 80029d8:	d10e      	bne.n	80029f8 <HAL_TIM_Base_MspInit+0xd0>
		__HAL_RCC_TIM5_CLK_ENABLE();
 80029da:	2300      	movs	r3, #0
 80029dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80029de:	4b64      	ldr	r3, [pc, #400]	@ (8002b70 <HAL_TIM_Base_MspInit+0x248>)
 80029e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029e2:	4a63      	ldr	r2, [pc, #396]	@ (8002b70 <HAL_TIM_Base_MspInit+0x248>)
 80029e4:	f043 0308 	orr.w	r3, r3, #8
 80029e8:	6413      	str	r3, [r2, #64]	@ 0x40
 80029ea:	4b61      	ldr	r3, [pc, #388]	@ (8002b70 <HAL_TIM_Base_MspInit+0x248>)
 80029ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029ee:	f003 0308 	and.w	r3, r3, #8
 80029f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80029f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 80029f6:	e0b2      	b.n	8002b5e <HAL_TIM_Base_MspInit+0x236>
	else if(htim_base->Instance==TIM6)
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	4a60      	ldr	r2, [pc, #384]	@ (8002b80 <HAL_TIM_Base_MspInit+0x258>)
 80029fe:	4293      	cmp	r3, r2
 8002a00:	d10e      	bne.n	8002a20 <HAL_TIM_Base_MspInit+0xf8>
		__HAL_RCC_TIM6_CLK_ENABLE();
 8002a02:	2300      	movs	r3, #0
 8002a04:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002a06:	4b5a      	ldr	r3, [pc, #360]	@ (8002b70 <HAL_TIM_Base_MspInit+0x248>)
 8002a08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a0a:	4a59      	ldr	r2, [pc, #356]	@ (8002b70 <HAL_TIM_Base_MspInit+0x248>)
 8002a0c:	f043 0310 	orr.w	r3, r3, #16
 8002a10:	6413      	str	r3, [r2, #64]	@ 0x40
 8002a12:	4b57      	ldr	r3, [pc, #348]	@ (8002b70 <HAL_TIM_Base_MspInit+0x248>)
 8002a14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a16:	f003 0310 	and.w	r3, r3, #16
 8002a1a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002a1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
}
 8002a1e:	e09e      	b.n	8002b5e <HAL_TIM_Base_MspInit+0x236>
	else if(htim_base->Instance==TIM7)
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	4a57      	ldr	r2, [pc, #348]	@ (8002b84 <HAL_TIM_Base_MspInit+0x25c>)
 8002a26:	4293      	cmp	r3, r2
 8002a28:	d10e      	bne.n	8002a48 <HAL_TIM_Base_MspInit+0x120>
		__HAL_RCC_TIM7_CLK_ENABLE();
 8002a2a:	2300      	movs	r3, #0
 8002a2c:	627b      	str	r3, [r7, #36]	@ 0x24
 8002a2e:	4b50      	ldr	r3, [pc, #320]	@ (8002b70 <HAL_TIM_Base_MspInit+0x248>)
 8002a30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a32:	4a4f      	ldr	r2, [pc, #316]	@ (8002b70 <HAL_TIM_Base_MspInit+0x248>)
 8002a34:	f043 0320 	orr.w	r3, r3, #32
 8002a38:	6413      	str	r3, [r2, #64]	@ 0x40
 8002a3a:	4b4d      	ldr	r3, [pc, #308]	@ (8002b70 <HAL_TIM_Base_MspInit+0x248>)
 8002a3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a3e:	f003 0320 	and.w	r3, r3, #32
 8002a42:	627b      	str	r3, [r7, #36]	@ 0x24
 8002a44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8002a46:	e08a      	b.n	8002b5e <HAL_TIM_Base_MspInit+0x236>
	else if(htim_base->Instance==TIM8)
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	4a4e      	ldr	r2, [pc, #312]	@ (8002b88 <HAL_TIM_Base_MspInit+0x260>)
 8002a4e:	4293      	cmp	r3, r2
 8002a50:	d10e      	bne.n	8002a70 <HAL_TIM_Base_MspInit+0x148>
		__HAL_RCC_TIM8_CLK_ENABLE();
 8002a52:	2300      	movs	r3, #0
 8002a54:	623b      	str	r3, [r7, #32]
 8002a56:	4b46      	ldr	r3, [pc, #280]	@ (8002b70 <HAL_TIM_Base_MspInit+0x248>)
 8002a58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a5a:	4a45      	ldr	r2, [pc, #276]	@ (8002b70 <HAL_TIM_Base_MspInit+0x248>)
 8002a5c:	f043 0302 	orr.w	r3, r3, #2
 8002a60:	6453      	str	r3, [r2, #68]	@ 0x44
 8002a62:	4b43      	ldr	r3, [pc, #268]	@ (8002b70 <HAL_TIM_Base_MspInit+0x248>)
 8002a64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a66:	f003 0302 	and.w	r3, r3, #2
 8002a6a:	623b      	str	r3, [r7, #32]
 8002a6c:	6a3b      	ldr	r3, [r7, #32]
}
 8002a6e:	e076      	b.n	8002b5e <HAL_TIM_Base_MspInit+0x236>
	else if(htim_base->Instance==TIM9)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	4a45      	ldr	r2, [pc, #276]	@ (8002b8c <HAL_TIM_Base_MspInit+0x264>)
 8002a76:	4293      	cmp	r3, r2
 8002a78:	d10e      	bne.n	8002a98 <HAL_TIM_Base_MspInit+0x170>
		__HAL_RCC_TIM9_CLK_ENABLE();
 8002a7a:	2300      	movs	r3, #0
 8002a7c:	61fb      	str	r3, [r7, #28]
 8002a7e:	4b3c      	ldr	r3, [pc, #240]	@ (8002b70 <HAL_TIM_Base_MspInit+0x248>)
 8002a80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a82:	4a3b      	ldr	r2, [pc, #236]	@ (8002b70 <HAL_TIM_Base_MspInit+0x248>)
 8002a84:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002a88:	6453      	str	r3, [r2, #68]	@ 0x44
 8002a8a:	4b39      	ldr	r3, [pc, #228]	@ (8002b70 <HAL_TIM_Base_MspInit+0x248>)
 8002a8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a8e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002a92:	61fb      	str	r3, [r7, #28]
 8002a94:	69fb      	ldr	r3, [r7, #28]
}
 8002a96:	e062      	b.n	8002b5e <HAL_TIM_Base_MspInit+0x236>
	else if(htim_base->Instance==TIM10)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	4a3c      	ldr	r2, [pc, #240]	@ (8002b90 <HAL_TIM_Base_MspInit+0x268>)
 8002a9e:	4293      	cmp	r3, r2
 8002aa0:	d10e      	bne.n	8002ac0 <HAL_TIM_Base_MspInit+0x198>
		__HAL_RCC_TIM10_CLK_ENABLE();
 8002aa2:	2300      	movs	r3, #0
 8002aa4:	61bb      	str	r3, [r7, #24]
 8002aa6:	4b32      	ldr	r3, [pc, #200]	@ (8002b70 <HAL_TIM_Base_MspInit+0x248>)
 8002aa8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002aaa:	4a31      	ldr	r2, [pc, #196]	@ (8002b70 <HAL_TIM_Base_MspInit+0x248>)
 8002aac:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002ab0:	6453      	str	r3, [r2, #68]	@ 0x44
 8002ab2:	4b2f      	ldr	r3, [pc, #188]	@ (8002b70 <HAL_TIM_Base_MspInit+0x248>)
 8002ab4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ab6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002aba:	61bb      	str	r3, [r7, #24]
 8002abc:	69bb      	ldr	r3, [r7, #24]
}
 8002abe:	e04e      	b.n	8002b5e <HAL_TIM_Base_MspInit+0x236>
	else if(htim_base->Instance==TIM11)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	4a33      	ldr	r2, [pc, #204]	@ (8002b94 <HAL_TIM_Base_MspInit+0x26c>)
 8002ac6:	4293      	cmp	r3, r2
 8002ac8:	d10e      	bne.n	8002ae8 <HAL_TIM_Base_MspInit+0x1c0>
		__HAL_RCC_TIM11_CLK_ENABLE();
 8002aca:	2300      	movs	r3, #0
 8002acc:	617b      	str	r3, [r7, #20]
 8002ace:	4b28      	ldr	r3, [pc, #160]	@ (8002b70 <HAL_TIM_Base_MspInit+0x248>)
 8002ad0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ad2:	4a27      	ldr	r2, [pc, #156]	@ (8002b70 <HAL_TIM_Base_MspInit+0x248>)
 8002ad4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002ad8:	6453      	str	r3, [r2, #68]	@ 0x44
 8002ada:	4b25      	ldr	r3, [pc, #148]	@ (8002b70 <HAL_TIM_Base_MspInit+0x248>)
 8002adc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ade:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002ae2:	617b      	str	r3, [r7, #20]
 8002ae4:	697b      	ldr	r3, [r7, #20]
}
 8002ae6:	e03a      	b.n	8002b5e <HAL_TIM_Base_MspInit+0x236>
	else if(htim_base->Instance==TIM12)
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	4a2a      	ldr	r2, [pc, #168]	@ (8002b98 <HAL_TIM_Base_MspInit+0x270>)
 8002aee:	4293      	cmp	r3, r2
 8002af0:	d10e      	bne.n	8002b10 <HAL_TIM_Base_MspInit+0x1e8>
		__HAL_RCC_TIM12_CLK_ENABLE();
 8002af2:	2300      	movs	r3, #0
 8002af4:	613b      	str	r3, [r7, #16]
 8002af6:	4b1e      	ldr	r3, [pc, #120]	@ (8002b70 <HAL_TIM_Base_MspInit+0x248>)
 8002af8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002afa:	4a1d      	ldr	r2, [pc, #116]	@ (8002b70 <HAL_TIM_Base_MspInit+0x248>)
 8002afc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002b00:	6413      	str	r3, [r2, #64]	@ 0x40
 8002b02:	4b1b      	ldr	r3, [pc, #108]	@ (8002b70 <HAL_TIM_Base_MspInit+0x248>)
 8002b04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b06:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b0a:	613b      	str	r3, [r7, #16]
 8002b0c:	693b      	ldr	r3, [r7, #16]
}
 8002b0e:	e026      	b.n	8002b5e <HAL_TIM_Base_MspInit+0x236>
	else if(htim_base->Instance==TIM13)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	4a21      	ldr	r2, [pc, #132]	@ (8002b9c <HAL_TIM_Base_MspInit+0x274>)
 8002b16:	4293      	cmp	r3, r2
 8002b18:	d10e      	bne.n	8002b38 <HAL_TIM_Base_MspInit+0x210>
		__HAL_RCC_TIM13_CLK_ENABLE();
 8002b1a:	2300      	movs	r3, #0
 8002b1c:	60fb      	str	r3, [r7, #12]
 8002b1e:	4b14      	ldr	r3, [pc, #80]	@ (8002b70 <HAL_TIM_Base_MspInit+0x248>)
 8002b20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b22:	4a13      	ldr	r2, [pc, #76]	@ (8002b70 <HAL_TIM_Base_MspInit+0x248>)
 8002b24:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002b28:	6413      	str	r3, [r2, #64]	@ 0x40
 8002b2a:	4b11      	ldr	r3, [pc, #68]	@ (8002b70 <HAL_TIM_Base_MspInit+0x248>)
 8002b2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b2e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002b32:	60fb      	str	r3, [r7, #12]
 8002b34:	68fb      	ldr	r3, [r7, #12]
}
 8002b36:	e012      	b.n	8002b5e <HAL_TIM_Base_MspInit+0x236>
	else if(htim_base->Instance==TIM14)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	4a18      	ldr	r2, [pc, #96]	@ (8002ba0 <HAL_TIM_Base_MspInit+0x278>)
 8002b3e:	4293      	cmp	r3, r2
 8002b40:	d10d      	bne.n	8002b5e <HAL_TIM_Base_MspInit+0x236>
		__HAL_RCC_TIM14_CLK_ENABLE();
 8002b42:	2300      	movs	r3, #0
 8002b44:	60bb      	str	r3, [r7, #8]
 8002b46:	4b0a      	ldr	r3, [pc, #40]	@ (8002b70 <HAL_TIM_Base_MspInit+0x248>)
 8002b48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b4a:	4a09      	ldr	r2, [pc, #36]	@ (8002b70 <HAL_TIM_Base_MspInit+0x248>)
 8002b4c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002b50:	6413      	str	r3, [r2, #64]	@ 0x40
 8002b52:	4b07      	ldr	r3, [pc, #28]	@ (8002b70 <HAL_TIM_Base_MspInit+0x248>)
 8002b54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b56:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b5a:	60bb      	str	r3, [r7, #8]
 8002b5c:	68bb      	ldr	r3, [r7, #8]
}
 8002b5e:	bf00      	nop
 8002b60:	3744      	adds	r7, #68	@ 0x44
 8002b62:	46bd      	mov	sp, r7
 8002b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b68:	4770      	bx	lr
 8002b6a:	bf00      	nop
 8002b6c:	40010000 	.word	0x40010000
 8002b70:	40023800 	.word	0x40023800
 8002b74:	40000400 	.word	0x40000400
 8002b78:	40000800 	.word	0x40000800
 8002b7c:	40000c00 	.word	0x40000c00
 8002b80:	40001000 	.word	0x40001000
 8002b84:	40001400 	.word	0x40001400
 8002b88:	40010400 	.word	0x40010400
 8002b8c:	40014000 	.word	0x40014000
 8002b90:	40014400 	.word	0x40014400
 8002b94:	40014800 	.word	0x40014800
 8002b98:	40001800 	.word	0x40001800
 8002b9c:	40001c00 	.word	0x40001c00
 8002ba0:	40002000 	.word	0x40002000

08002ba4 <HAL_UART_MspInit>:
 * This function configures the hardware resources used in this example
 * @param huart: UART handle pointer
 * @retval None
 */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002ba4:	b580      	push	{r7, lr}
 8002ba6:	b094      	sub	sp, #80	@ 0x50
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	6078      	str	r0, [r7, #4]
	/* Prevent unused argument(s) compilation warning */
	UNUSED(huart);
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002bac:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	601a      	str	r2, [r3, #0]
 8002bb4:	605a      	str	r2, [r3, #4]
 8002bb6:	609a      	str	r2, [r3, #8]
 8002bb8:	60da      	str	r2, [r3, #12]
 8002bba:	611a      	str	r2, [r3, #16]

	if(huart->Instance==USART1)
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	4a8c      	ldr	r2, [pc, #560]	@ (8002df4 <HAL_UART_MspInit+0x250>)
 8002bc2:	4293      	cmp	r3, r2
 8002bc4:	d12d      	bne.n	8002c22 <HAL_UART_MspInit+0x7e>
	{
		__HAL_RCC_USART1_CLK_ENABLE();
 8002bc6:	2300      	movs	r3, #0
 8002bc8:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002bca:	4b8b      	ldr	r3, [pc, #556]	@ (8002df8 <HAL_UART_MspInit+0x254>)
 8002bcc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002bce:	4a8a      	ldr	r2, [pc, #552]	@ (8002df8 <HAL_UART_MspInit+0x254>)
 8002bd0:	f043 0310 	orr.w	r3, r3, #16
 8002bd4:	6453      	str	r3, [r2, #68]	@ 0x44
 8002bd6:	4b88      	ldr	r3, [pc, #544]	@ (8002df8 <HAL_UART_MspInit+0x254>)
 8002bd8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002bda:	f003 0310 	and.w	r3, r3, #16
 8002bde:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002be0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38

		__HAL_RCC_GPIOA_CLK_ENABLE();
 8002be2:	2300      	movs	r3, #0
 8002be4:	637b      	str	r3, [r7, #52]	@ 0x34
 8002be6:	4b84      	ldr	r3, [pc, #528]	@ (8002df8 <HAL_UART_MspInit+0x254>)
 8002be8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bea:	4a83      	ldr	r2, [pc, #524]	@ (8002df8 <HAL_UART_MspInit+0x254>)
 8002bec:	f043 0301 	orr.w	r3, r3, #1
 8002bf0:	6313      	str	r3, [r2, #48]	@ 0x30
 8002bf2:	4b81      	ldr	r3, [pc, #516]	@ (8002df8 <HAL_UART_MspInit+0x254>)
 8002bf4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bf6:	f003 0301 	and.w	r3, r3, #1
 8002bfa:	637b      	str	r3, [r7, #52]	@ 0x34
 8002bfc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
		/**USART1 GPIO Configuration
			PA9     ------> USART1_TX
			PA10     ------> USART1_RX
		 */
		GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002bfe:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8002c02:	63fb      	str	r3, [r7, #60]	@ 0x3c
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c04:	2302      	movs	r3, #2
 8002c06:	643b      	str	r3, [r7, #64]	@ 0x40
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c08:	2300      	movs	r3, #0
 8002c0a:	647b      	str	r3, [r7, #68]	@ 0x44
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c0c:	2303      	movs	r3, #3
 8002c0e:	64bb      	str	r3, [r7, #72]	@ 0x48
		GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002c10:	2307      	movs	r3, #7
 8002c12:	64fb      	str	r3, [r7, #76]	@ 0x4c
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c14:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8002c18:	4619      	mov	r1, r3
 8002c1a:	4878      	ldr	r0, [pc, #480]	@ (8002dfc <HAL_UART_MspInit+0x258>)
 8002c1c:	f00a fe0a 	bl	800d834 <HAL_GPIO_Init>
		/* USER CODE BEGIN USART6_MspInit 1 */

		/* USER CODE END USART6_MspInit 1 */
	}

}
 8002c20:	e12b      	b.n	8002e7a <HAL_UART_MspInit+0x2d6>
	else if(huart->Instance==USART2)
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	4a76      	ldr	r2, [pc, #472]	@ (8002e00 <HAL_UART_MspInit+0x25c>)
 8002c28:	4293      	cmp	r3, r2
 8002c2a:	d12c      	bne.n	8002c86 <HAL_UART_MspInit+0xe2>
		__HAL_RCC_USART2_CLK_ENABLE();
 8002c2c:	2300      	movs	r3, #0
 8002c2e:	633b      	str	r3, [r7, #48]	@ 0x30
 8002c30:	4b71      	ldr	r3, [pc, #452]	@ (8002df8 <HAL_UART_MspInit+0x254>)
 8002c32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c34:	4a70      	ldr	r2, [pc, #448]	@ (8002df8 <HAL_UART_MspInit+0x254>)
 8002c36:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002c3a:	6413      	str	r3, [r2, #64]	@ 0x40
 8002c3c:	4b6e      	ldr	r3, [pc, #440]	@ (8002df8 <HAL_UART_MspInit+0x254>)
 8002c3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c40:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c44:	633b      	str	r3, [r7, #48]	@ 0x30
 8002c46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
		__HAL_RCC_GPIOD_CLK_ENABLE();
 8002c48:	2300      	movs	r3, #0
 8002c4a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002c4c:	4b6a      	ldr	r3, [pc, #424]	@ (8002df8 <HAL_UART_MspInit+0x254>)
 8002c4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c50:	4a69      	ldr	r2, [pc, #420]	@ (8002df8 <HAL_UART_MspInit+0x254>)
 8002c52:	f043 0308 	orr.w	r3, r3, #8
 8002c56:	6313      	str	r3, [r2, #48]	@ 0x30
 8002c58:	4b67      	ldr	r3, [pc, #412]	@ (8002df8 <HAL_UART_MspInit+0x254>)
 8002c5a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c5c:	f003 0308 	and.w	r3, r3, #8
 8002c60:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002c62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
		GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8002c64:	2360      	movs	r3, #96	@ 0x60
 8002c66:	63fb      	str	r3, [r7, #60]	@ 0x3c
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c68:	2302      	movs	r3, #2
 8002c6a:	643b      	str	r3, [r7, #64]	@ 0x40
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c6c:	2300      	movs	r3, #0
 8002c6e:	647b      	str	r3, [r7, #68]	@ 0x44
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c70:	2303      	movs	r3, #3
 8002c72:	64bb      	str	r3, [r7, #72]	@ 0x48
		GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002c74:	2307      	movs	r3, #7
 8002c76:	64fb      	str	r3, [r7, #76]	@ 0x4c
		HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002c78:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8002c7c:	4619      	mov	r1, r3
 8002c7e:	4861      	ldr	r0, [pc, #388]	@ (8002e04 <HAL_UART_MspInit+0x260>)
 8002c80:	f00a fdd8 	bl	800d834 <HAL_GPIO_Init>
}
 8002c84:	e0f9      	b.n	8002e7a <HAL_UART_MspInit+0x2d6>
	else if(huart->Instance==USART3)
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	4a5f      	ldr	r2, [pc, #380]	@ (8002e08 <HAL_UART_MspInit+0x264>)
 8002c8c:	4293      	cmp	r3, r2
 8002c8e:	d12d      	bne.n	8002cec <HAL_UART_MspInit+0x148>
		__HAL_RCC_USART3_CLK_ENABLE();
 8002c90:	2300      	movs	r3, #0
 8002c92:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002c94:	4b58      	ldr	r3, [pc, #352]	@ (8002df8 <HAL_UART_MspInit+0x254>)
 8002c96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c98:	4a57      	ldr	r2, [pc, #348]	@ (8002df8 <HAL_UART_MspInit+0x254>)
 8002c9a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002c9e:	6413      	str	r3, [r2, #64]	@ 0x40
 8002ca0:	4b55      	ldr	r3, [pc, #340]	@ (8002df8 <HAL_UART_MspInit+0x254>)
 8002ca2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ca4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002ca8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002caa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
		__HAL_RCC_GPIOD_CLK_ENABLE();
 8002cac:	2300      	movs	r3, #0
 8002cae:	627b      	str	r3, [r7, #36]	@ 0x24
 8002cb0:	4b51      	ldr	r3, [pc, #324]	@ (8002df8 <HAL_UART_MspInit+0x254>)
 8002cb2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cb4:	4a50      	ldr	r2, [pc, #320]	@ (8002df8 <HAL_UART_MspInit+0x254>)
 8002cb6:	f043 0308 	orr.w	r3, r3, #8
 8002cba:	6313      	str	r3, [r2, #48]	@ 0x30
 8002cbc:	4b4e      	ldr	r3, [pc, #312]	@ (8002df8 <HAL_UART_MspInit+0x254>)
 8002cbe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cc0:	f003 0308 	and.w	r3, r3, #8
 8002cc4:	627b      	str	r3, [r7, #36]	@ 0x24
 8002cc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
		GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002cc8:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002ccc:	63fb      	str	r3, [r7, #60]	@ 0x3c
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cce:	2302      	movs	r3, #2
 8002cd0:	643b      	str	r3, [r7, #64]	@ 0x40
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cd2:	2300      	movs	r3, #0
 8002cd4:	647b      	str	r3, [r7, #68]	@ 0x44
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002cd6:	2303      	movs	r3, #3
 8002cd8:	64bb      	str	r3, [r7, #72]	@ 0x48
		GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002cda:	2307      	movs	r3, #7
 8002cdc:	64fb      	str	r3, [r7, #76]	@ 0x4c
		HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002cde:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8002ce2:	4619      	mov	r1, r3
 8002ce4:	4847      	ldr	r0, [pc, #284]	@ (8002e04 <HAL_UART_MspInit+0x260>)
 8002ce6:	f00a fda5 	bl	800d834 <HAL_GPIO_Init>
}
 8002cea:	e0c6      	b.n	8002e7a <HAL_UART_MspInit+0x2d6>
	else if(huart->Instance==UART4)
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	4a46      	ldr	r2, [pc, #280]	@ (8002e0c <HAL_UART_MspInit+0x268>)
 8002cf2:	4293      	cmp	r3, r2
 8002cf4:	d12d      	bne.n	8002d52 <HAL_UART_MspInit+0x1ae>
		__HAL_RCC_UART4_CLK_ENABLE();
 8002cf6:	2300      	movs	r3, #0
 8002cf8:	623b      	str	r3, [r7, #32]
 8002cfa:	4b3f      	ldr	r3, [pc, #252]	@ (8002df8 <HAL_UART_MspInit+0x254>)
 8002cfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cfe:	4a3e      	ldr	r2, [pc, #248]	@ (8002df8 <HAL_UART_MspInit+0x254>)
 8002d00:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8002d04:	6413      	str	r3, [r2, #64]	@ 0x40
 8002d06:	4b3c      	ldr	r3, [pc, #240]	@ (8002df8 <HAL_UART_MspInit+0x254>)
 8002d08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d0a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002d0e:	623b      	str	r3, [r7, #32]
 8002d10:	6a3b      	ldr	r3, [r7, #32]
		__HAL_RCC_GPIOC_CLK_ENABLE();
 8002d12:	2300      	movs	r3, #0
 8002d14:	61fb      	str	r3, [r7, #28]
 8002d16:	4b38      	ldr	r3, [pc, #224]	@ (8002df8 <HAL_UART_MspInit+0x254>)
 8002d18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d1a:	4a37      	ldr	r2, [pc, #220]	@ (8002df8 <HAL_UART_MspInit+0x254>)
 8002d1c:	f043 0304 	orr.w	r3, r3, #4
 8002d20:	6313      	str	r3, [r2, #48]	@ 0x30
 8002d22:	4b35      	ldr	r3, [pc, #212]	@ (8002df8 <HAL_UART_MspInit+0x254>)
 8002d24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d26:	f003 0304 	and.w	r3, r3, #4
 8002d2a:	61fb      	str	r3, [r7, #28]
 8002d2c:	69fb      	ldr	r3, [r7, #28]
		GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002d2e:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8002d32:	63fb      	str	r3, [r7, #60]	@ 0x3c
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d34:	2302      	movs	r3, #2
 8002d36:	643b      	str	r3, [r7, #64]	@ 0x40
		GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002d38:	2301      	movs	r3, #1
 8002d3a:	647b      	str	r3, [r7, #68]	@ 0x44
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d3c:	2303      	movs	r3, #3
 8002d3e:	64bb      	str	r3, [r7, #72]	@ 0x48
		GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8002d40:	2308      	movs	r3, #8
 8002d42:	64fb      	str	r3, [r7, #76]	@ 0x4c
		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002d44:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8002d48:	4619      	mov	r1, r3
 8002d4a:	4831      	ldr	r0, [pc, #196]	@ (8002e10 <HAL_UART_MspInit+0x26c>)
 8002d4c:	f00a fd72 	bl	800d834 <HAL_GPIO_Init>
}
 8002d50:	e093      	b.n	8002e7a <HAL_UART_MspInit+0x2d6>
	else if(huart->Instance==UART5)
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	4a2f      	ldr	r2, [pc, #188]	@ (8002e14 <HAL_UART_MspInit+0x270>)
 8002d58:	4293      	cmp	r3, r2
 8002d5a:	d15d      	bne.n	8002e18 <HAL_UART_MspInit+0x274>
		__HAL_RCC_UART5_CLK_ENABLE();
 8002d5c:	2300      	movs	r3, #0
 8002d5e:	61bb      	str	r3, [r7, #24]
 8002d60:	4b25      	ldr	r3, [pc, #148]	@ (8002df8 <HAL_UART_MspInit+0x254>)
 8002d62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d64:	4a24      	ldr	r2, [pc, #144]	@ (8002df8 <HAL_UART_MspInit+0x254>)
 8002d66:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002d6a:	6413      	str	r3, [r2, #64]	@ 0x40
 8002d6c:	4b22      	ldr	r3, [pc, #136]	@ (8002df8 <HAL_UART_MspInit+0x254>)
 8002d6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d70:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002d74:	61bb      	str	r3, [r7, #24]
 8002d76:	69bb      	ldr	r3, [r7, #24]
		__HAL_RCC_GPIOC_CLK_ENABLE();
 8002d78:	2300      	movs	r3, #0
 8002d7a:	617b      	str	r3, [r7, #20]
 8002d7c:	4b1e      	ldr	r3, [pc, #120]	@ (8002df8 <HAL_UART_MspInit+0x254>)
 8002d7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d80:	4a1d      	ldr	r2, [pc, #116]	@ (8002df8 <HAL_UART_MspInit+0x254>)
 8002d82:	f043 0304 	orr.w	r3, r3, #4
 8002d86:	6313      	str	r3, [r2, #48]	@ 0x30
 8002d88:	4b1b      	ldr	r3, [pc, #108]	@ (8002df8 <HAL_UART_MspInit+0x254>)
 8002d8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d8c:	f003 0304 	and.w	r3, r3, #4
 8002d90:	617b      	str	r3, [r7, #20]
 8002d92:	697b      	ldr	r3, [r7, #20]
		__HAL_RCC_GPIOD_CLK_ENABLE();
 8002d94:	2300      	movs	r3, #0
 8002d96:	613b      	str	r3, [r7, #16]
 8002d98:	4b17      	ldr	r3, [pc, #92]	@ (8002df8 <HAL_UART_MspInit+0x254>)
 8002d9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d9c:	4a16      	ldr	r2, [pc, #88]	@ (8002df8 <HAL_UART_MspInit+0x254>)
 8002d9e:	f043 0308 	orr.w	r3, r3, #8
 8002da2:	6313      	str	r3, [r2, #48]	@ 0x30
 8002da4:	4b14      	ldr	r3, [pc, #80]	@ (8002df8 <HAL_UART_MspInit+0x254>)
 8002da6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002da8:	f003 0308 	and.w	r3, r3, #8
 8002dac:	613b      	str	r3, [r7, #16]
 8002dae:	693b      	ldr	r3, [r7, #16]
		GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002db0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002db4:	63fb      	str	r3, [r7, #60]	@ 0x3c
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002db6:	2302      	movs	r3, #2
 8002db8:	643b      	str	r3, [r7, #64]	@ 0x40
		GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002dba:	2301      	movs	r3, #1
 8002dbc:	647b      	str	r3, [r7, #68]	@ 0x44
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002dbe:	2303      	movs	r3, #3
 8002dc0:	64bb      	str	r3, [r7, #72]	@ 0x48
		GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8002dc2:	2308      	movs	r3, #8
 8002dc4:	64fb      	str	r3, [r7, #76]	@ 0x4c
		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002dc6:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8002dca:	4619      	mov	r1, r3
 8002dcc:	4810      	ldr	r0, [pc, #64]	@ (8002e10 <HAL_UART_MspInit+0x26c>)
 8002dce:	f00a fd31 	bl	800d834 <HAL_GPIO_Init>
		GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002dd2:	2304      	movs	r3, #4
 8002dd4:	63fb      	str	r3, [r7, #60]	@ 0x3c
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002dd6:	2302      	movs	r3, #2
 8002dd8:	643b      	str	r3, [r7, #64]	@ 0x40
		GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002dda:	2301      	movs	r3, #1
 8002ddc:	647b      	str	r3, [r7, #68]	@ 0x44
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002dde:	2303      	movs	r3, #3
 8002de0:	64bb      	str	r3, [r7, #72]	@ 0x48
		GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8002de2:	2308      	movs	r3, #8
 8002de4:	64fb      	str	r3, [r7, #76]	@ 0x4c
		HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002de6:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8002dea:	4619      	mov	r1, r3
 8002dec:	4805      	ldr	r0, [pc, #20]	@ (8002e04 <HAL_UART_MspInit+0x260>)
 8002dee:	f00a fd21 	bl	800d834 <HAL_GPIO_Init>
}
 8002df2:	e042      	b.n	8002e7a <HAL_UART_MspInit+0x2d6>
 8002df4:	40011000 	.word	0x40011000
 8002df8:	40023800 	.word	0x40023800
 8002dfc:	40020000 	.word	0x40020000
 8002e00:	40004400 	.word	0x40004400
 8002e04:	40020c00 	.word	0x40020c00
 8002e08:	40004800 	.word	0x40004800
 8002e0c:	40004c00 	.word	0x40004c00
 8002e10:	40020800 	.word	0x40020800
 8002e14:	40005000 	.word	0x40005000
	else if(huart->Instance==USART6)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	4a19      	ldr	r2, [pc, #100]	@ (8002e84 <HAL_UART_MspInit+0x2e0>)
 8002e1e:	4293      	cmp	r3, r2
 8002e20:	d12b      	bne.n	8002e7a <HAL_UART_MspInit+0x2d6>
		__HAL_RCC_USART6_CLK_ENABLE();
 8002e22:	2300      	movs	r3, #0
 8002e24:	60fb      	str	r3, [r7, #12]
 8002e26:	4b18      	ldr	r3, [pc, #96]	@ (8002e88 <HAL_UART_MspInit+0x2e4>)
 8002e28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e2a:	4a17      	ldr	r2, [pc, #92]	@ (8002e88 <HAL_UART_MspInit+0x2e4>)
 8002e2c:	f043 0320 	orr.w	r3, r3, #32
 8002e30:	6453      	str	r3, [r2, #68]	@ 0x44
 8002e32:	4b15      	ldr	r3, [pc, #84]	@ (8002e88 <HAL_UART_MspInit+0x2e4>)
 8002e34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e36:	f003 0320 	and.w	r3, r3, #32
 8002e3a:	60fb      	str	r3, [r7, #12]
 8002e3c:	68fb      	ldr	r3, [r7, #12]
		__HAL_RCC_GPIOC_CLK_ENABLE();
 8002e3e:	2300      	movs	r3, #0
 8002e40:	60bb      	str	r3, [r7, #8]
 8002e42:	4b11      	ldr	r3, [pc, #68]	@ (8002e88 <HAL_UART_MspInit+0x2e4>)
 8002e44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e46:	4a10      	ldr	r2, [pc, #64]	@ (8002e88 <HAL_UART_MspInit+0x2e4>)
 8002e48:	f043 0304 	orr.w	r3, r3, #4
 8002e4c:	6313      	str	r3, [r2, #48]	@ 0x30
 8002e4e:	4b0e      	ldr	r3, [pc, #56]	@ (8002e88 <HAL_UART_MspInit+0x2e4>)
 8002e50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e52:	f003 0304 	and.w	r3, r3, #4
 8002e56:	60bb      	str	r3, [r7, #8]
 8002e58:	68bb      	ldr	r3, [r7, #8]
		GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002e5a:	23c0      	movs	r3, #192	@ 0xc0
 8002e5c:	63fb      	str	r3, [r7, #60]	@ 0x3c
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e5e:	2302      	movs	r3, #2
 8002e60:	643b      	str	r3, [r7, #64]	@ 0x40
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e62:	2300      	movs	r3, #0
 8002e64:	647b      	str	r3, [r7, #68]	@ 0x44
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e66:	2303      	movs	r3, #3
 8002e68:	64bb      	str	r3, [r7, #72]	@ 0x48
		GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8002e6a:	2308      	movs	r3, #8
 8002e6c:	64fb      	str	r3, [r7, #76]	@ 0x4c
		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002e6e:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8002e72:	4619      	mov	r1, r3
 8002e74:	4805      	ldr	r0, [pc, #20]	@ (8002e8c <HAL_UART_MspInit+0x2e8>)
 8002e76:	f00a fcdd 	bl	800d834 <HAL_GPIO_Init>
}
 8002e7a:	bf00      	nop
 8002e7c:	3750      	adds	r7, #80	@ 0x50
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	bd80      	pop	{r7, pc}
 8002e82:	bf00      	nop
 8002e84:	40011400 	.word	0x40011400
 8002e88:	40023800 	.word	0x40023800
 8002e8c:	40020800 	.word	0x40020800

08002e90 <HAL_TIM_Encoder_MspInit>:
	}

}

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8002e90:	b580      	push	{r7, lr}
 8002e92:	b094      	sub	sp, #80	@ 0x50
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	6078      	str	r0, [r7, #4]
	/* Prevent unused argument(s) compilation warning */
	UNUSED(htim_encoder);
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e98:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	601a      	str	r2, [r3, #0]
 8002ea0:	605a      	str	r2, [r3, #4]
 8002ea2:	609a      	str	r2, [r3, #8]
 8002ea4:	60da      	str	r2, [r3, #12]
 8002ea6:	611a      	str	r2, [r3, #16]
	if(htim_encoder->Instance==TIM1)
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	4a8c      	ldr	r2, [pc, #560]	@ (80030e0 <HAL_TIM_Encoder_MspInit+0x250>)
 8002eae:	4293      	cmp	r3, r2
 8002eb0:	d12d      	bne.n	8002f0e <HAL_TIM_Encoder_MspInit+0x7e>
	{

		/* Peripheral clock enable */
		__HAL_RCC_TIM1_CLK_ENABLE();
 8002eb2:	2300      	movs	r3, #0
 8002eb4:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002eb6:	4b8b      	ldr	r3, [pc, #556]	@ (80030e4 <HAL_TIM_Encoder_MspInit+0x254>)
 8002eb8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002eba:	4a8a      	ldr	r2, [pc, #552]	@ (80030e4 <HAL_TIM_Encoder_MspInit+0x254>)
 8002ebc:	f043 0301 	orr.w	r3, r3, #1
 8002ec0:	6453      	str	r3, [r2, #68]	@ 0x44
 8002ec2:	4b88      	ldr	r3, [pc, #544]	@ (80030e4 <HAL_TIM_Encoder_MspInit+0x254>)
 8002ec4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ec6:	f003 0301 	and.w	r3, r3, #1
 8002eca:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002ecc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38

		__HAL_RCC_GPIOE_CLK_ENABLE();
 8002ece:	2300      	movs	r3, #0
 8002ed0:	637b      	str	r3, [r7, #52]	@ 0x34
 8002ed2:	4b84      	ldr	r3, [pc, #528]	@ (80030e4 <HAL_TIM_Encoder_MspInit+0x254>)
 8002ed4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ed6:	4a83      	ldr	r2, [pc, #524]	@ (80030e4 <HAL_TIM_Encoder_MspInit+0x254>)
 8002ed8:	f043 0310 	orr.w	r3, r3, #16
 8002edc:	6313      	str	r3, [r2, #48]	@ 0x30
 8002ede:	4b81      	ldr	r3, [pc, #516]	@ (80030e4 <HAL_TIM_Encoder_MspInit+0x254>)
 8002ee0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ee2:	f003 0310 	and.w	r3, r3, #16
 8002ee6:	637b      	str	r3, [r7, #52]	@ 0x34
 8002ee8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34


		GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 8002eea:	f44f 6320 	mov.w	r3, #2560	@ 0xa00
 8002eee:	63fb      	str	r3, [r7, #60]	@ 0x3c
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ef0:	2302      	movs	r3, #2
 8002ef2:	643b      	str	r3, [r7, #64]	@ 0x40
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ef4:	2300      	movs	r3, #0
 8002ef6:	647b      	str	r3, [r7, #68]	@ 0x44
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ef8:	2300      	movs	r3, #0
 8002efa:	64bb      	str	r3, [r7, #72]	@ 0x48
		GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002efc:	2301      	movs	r3, #1
 8002efe:	64fb      	str	r3, [r7, #76]	@ 0x4c
		HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002f00:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8002f04:	4619      	mov	r1, r3
 8002f06:	4878      	ldr	r0, [pc, #480]	@ (80030e8 <HAL_TIM_Encoder_MspInit+0x258>)
 8002f08:	f00a fc94 	bl	800d834 <HAL_GPIO_Init>
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
		GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
	}

}
 8002f0c:	e12b      	b.n	8003166 <HAL_TIM_Encoder_MspInit+0x2d6>
	}else if(htim_encoder->Instance==TIM2){
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002f16:	d14b      	bne.n	8002fb0 <HAL_TIM_Encoder_MspInit+0x120>
		__HAL_RCC_TIM2_CLK_ENABLE();
 8002f18:	2300      	movs	r3, #0
 8002f1a:	633b      	str	r3, [r7, #48]	@ 0x30
 8002f1c:	4b71      	ldr	r3, [pc, #452]	@ (80030e4 <HAL_TIM_Encoder_MspInit+0x254>)
 8002f1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f20:	4a70      	ldr	r2, [pc, #448]	@ (80030e4 <HAL_TIM_Encoder_MspInit+0x254>)
 8002f22:	f043 0301 	orr.w	r3, r3, #1
 8002f26:	6413      	str	r3, [r2, #64]	@ 0x40
 8002f28:	4b6e      	ldr	r3, [pc, #440]	@ (80030e4 <HAL_TIM_Encoder_MspInit+0x254>)
 8002f2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f2c:	f003 0301 	and.w	r3, r3, #1
 8002f30:	633b      	str	r3, [r7, #48]	@ 0x30
 8002f32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
		__HAL_RCC_GPIOA_CLK_ENABLE();
 8002f34:	2300      	movs	r3, #0
 8002f36:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002f38:	4b6a      	ldr	r3, [pc, #424]	@ (80030e4 <HAL_TIM_Encoder_MspInit+0x254>)
 8002f3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f3c:	4a69      	ldr	r2, [pc, #420]	@ (80030e4 <HAL_TIM_Encoder_MspInit+0x254>)
 8002f3e:	f043 0301 	orr.w	r3, r3, #1
 8002f42:	6313      	str	r3, [r2, #48]	@ 0x30
 8002f44:	4b67      	ldr	r3, [pc, #412]	@ (80030e4 <HAL_TIM_Encoder_MspInit+0x254>)
 8002f46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f48:	f003 0301 	and.w	r3, r3, #1
 8002f4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002f4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
		__HAL_RCC_GPIOB_CLK_ENABLE();
 8002f50:	2300      	movs	r3, #0
 8002f52:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002f54:	4b63      	ldr	r3, [pc, #396]	@ (80030e4 <HAL_TIM_Encoder_MspInit+0x254>)
 8002f56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f58:	4a62      	ldr	r2, [pc, #392]	@ (80030e4 <HAL_TIM_Encoder_MspInit+0x254>)
 8002f5a:	f043 0302 	orr.w	r3, r3, #2
 8002f5e:	6313      	str	r3, [r2, #48]	@ 0x30
 8002f60:	4b60      	ldr	r3, [pc, #384]	@ (80030e4 <HAL_TIM_Encoder_MspInit+0x254>)
 8002f62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f64:	f003 0302 	and.w	r3, r3, #2
 8002f68:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002f6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
		GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002f6c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002f70:	63fb      	str	r3, [r7, #60]	@ 0x3c
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f72:	2302      	movs	r3, #2
 8002f74:	643b      	str	r3, [r7, #64]	@ 0x40
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f76:	2300      	movs	r3, #0
 8002f78:	647b      	str	r3, [r7, #68]	@ 0x44
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f7a:	2300      	movs	r3, #0
 8002f7c:	64bb      	str	r3, [r7, #72]	@ 0x48
		GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002f7e:	2301      	movs	r3, #1
 8002f80:	64fb      	str	r3, [r7, #76]	@ 0x4c
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f82:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8002f86:	4619      	mov	r1, r3
 8002f88:	4858      	ldr	r0, [pc, #352]	@ (80030ec <HAL_TIM_Encoder_MspInit+0x25c>)
 8002f8a:	f00a fc53 	bl	800d834 <HAL_GPIO_Init>
		GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002f8e:	2308      	movs	r3, #8
 8002f90:	63fb      	str	r3, [r7, #60]	@ 0x3c
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f92:	2302      	movs	r3, #2
 8002f94:	643b      	str	r3, [r7, #64]	@ 0x40
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f96:	2300      	movs	r3, #0
 8002f98:	647b      	str	r3, [r7, #68]	@ 0x44
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f9a:	2300      	movs	r3, #0
 8002f9c:	64bb      	str	r3, [r7, #72]	@ 0x48
		GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002f9e:	2301      	movs	r3, #1
 8002fa0:	64fb      	str	r3, [r7, #76]	@ 0x4c
		HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002fa2:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8002fa6:	4619      	mov	r1, r3
 8002fa8:	4851      	ldr	r0, [pc, #324]	@ (80030f0 <HAL_TIM_Encoder_MspInit+0x260>)
 8002faa:	f00a fc43 	bl	800d834 <HAL_GPIO_Init>
}
 8002fae:	e0da      	b.n	8003166 <HAL_TIM_Encoder_MspInit+0x2d6>
	}else if(htim_encoder->Instance==TIM3){
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	4a4f      	ldr	r2, [pc, #316]	@ (80030f4 <HAL_TIM_Encoder_MspInit+0x264>)
 8002fb6:	4293      	cmp	r3, r2
 8002fb8:	d12c      	bne.n	8003014 <HAL_TIM_Encoder_MspInit+0x184>
		__HAL_RCC_TIM3_CLK_ENABLE();
 8002fba:	2300      	movs	r3, #0
 8002fbc:	627b      	str	r3, [r7, #36]	@ 0x24
 8002fbe:	4b49      	ldr	r3, [pc, #292]	@ (80030e4 <HAL_TIM_Encoder_MspInit+0x254>)
 8002fc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fc2:	4a48      	ldr	r2, [pc, #288]	@ (80030e4 <HAL_TIM_Encoder_MspInit+0x254>)
 8002fc4:	f043 0302 	orr.w	r3, r3, #2
 8002fc8:	6413      	str	r3, [r2, #64]	@ 0x40
 8002fca:	4b46      	ldr	r3, [pc, #280]	@ (80030e4 <HAL_TIM_Encoder_MspInit+0x254>)
 8002fcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fce:	f003 0302 	and.w	r3, r3, #2
 8002fd2:	627b      	str	r3, [r7, #36]	@ 0x24
 8002fd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
		__HAL_RCC_GPIOA_CLK_ENABLE();
 8002fd6:	2300      	movs	r3, #0
 8002fd8:	623b      	str	r3, [r7, #32]
 8002fda:	4b42      	ldr	r3, [pc, #264]	@ (80030e4 <HAL_TIM_Encoder_MspInit+0x254>)
 8002fdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fde:	4a41      	ldr	r2, [pc, #260]	@ (80030e4 <HAL_TIM_Encoder_MspInit+0x254>)
 8002fe0:	f043 0301 	orr.w	r3, r3, #1
 8002fe4:	6313      	str	r3, [r2, #48]	@ 0x30
 8002fe6:	4b3f      	ldr	r3, [pc, #252]	@ (80030e4 <HAL_TIM_Encoder_MspInit+0x254>)
 8002fe8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fea:	f003 0301 	and.w	r3, r3, #1
 8002fee:	623b      	str	r3, [r7, #32]
 8002ff0:	6a3b      	ldr	r3, [r7, #32]
		GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002ff2:	23c0      	movs	r3, #192	@ 0xc0
 8002ff4:	63fb      	str	r3, [r7, #60]	@ 0x3c
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ff6:	2302      	movs	r3, #2
 8002ff8:	643b      	str	r3, [r7, #64]	@ 0x40
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ffa:	2300      	movs	r3, #0
 8002ffc:	647b      	str	r3, [r7, #68]	@ 0x44
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ffe:	2300      	movs	r3, #0
 8003000:	64bb      	str	r3, [r7, #72]	@ 0x48
		GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003002:	2302      	movs	r3, #2
 8003004:	64fb      	str	r3, [r7, #76]	@ 0x4c
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003006:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800300a:	4619      	mov	r1, r3
 800300c:	4837      	ldr	r0, [pc, #220]	@ (80030ec <HAL_TIM_Encoder_MspInit+0x25c>)
 800300e:	f00a fc11 	bl	800d834 <HAL_GPIO_Init>
}
 8003012:	e0a8      	b.n	8003166 <HAL_TIM_Encoder_MspInit+0x2d6>
	}else if(htim_encoder->Instance==TIM4){
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	4a37      	ldr	r2, [pc, #220]	@ (80030f8 <HAL_TIM_Encoder_MspInit+0x268>)
 800301a:	4293      	cmp	r3, r2
 800301c:	d12d      	bne.n	800307a <HAL_TIM_Encoder_MspInit+0x1ea>
		__HAL_RCC_TIM4_CLK_ENABLE();
 800301e:	2300      	movs	r3, #0
 8003020:	61fb      	str	r3, [r7, #28]
 8003022:	4b30      	ldr	r3, [pc, #192]	@ (80030e4 <HAL_TIM_Encoder_MspInit+0x254>)
 8003024:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003026:	4a2f      	ldr	r2, [pc, #188]	@ (80030e4 <HAL_TIM_Encoder_MspInit+0x254>)
 8003028:	f043 0304 	orr.w	r3, r3, #4
 800302c:	6413      	str	r3, [r2, #64]	@ 0x40
 800302e:	4b2d      	ldr	r3, [pc, #180]	@ (80030e4 <HAL_TIM_Encoder_MspInit+0x254>)
 8003030:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003032:	f003 0304 	and.w	r3, r3, #4
 8003036:	61fb      	str	r3, [r7, #28]
 8003038:	69fb      	ldr	r3, [r7, #28]
		__HAL_RCC_GPIOD_CLK_ENABLE();
 800303a:	2300      	movs	r3, #0
 800303c:	61bb      	str	r3, [r7, #24]
 800303e:	4b29      	ldr	r3, [pc, #164]	@ (80030e4 <HAL_TIM_Encoder_MspInit+0x254>)
 8003040:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003042:	4a28      	ldr	r2, [pc, #160]	@ (80030e4 <HAL_TIM_Encoder_MspInit+0x254>)
 8003044:	f043 0308 	orr.w	r3, r3, #8
 8003048:	6313      	str	r3, [r2, #48]	@ 0x30
 800304a:	4b26      	ldr	r3, [pc, #152]	@ (80030e4 <HAL_TIM_Encoder_MspInit+0x254>)
 800304c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800304e:	f003 0308 	and.w	r3, r3, #8
 8003052:	61bb      	str	r3, [r7, #24]
 8003054:	69bb      	ldr	r3, [r7, #24]
		GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8003056:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 800305a:	63fb      	str	r3, [r7, #60]	@ 0x3c
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800305c:	2302      	movs	r3, #2
 800305e:	643b      	str	r3, [r7, #64]	@ 0x40
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003060:	2300      	movs	r3, #0
 8003062:	647b      	str	r3, [r7, #68]	@ 0x44
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003064:	2300      	movs	r3, #0
 8003066:	64bb      	str	r3, [r7, #72]	@ 0x48
		GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8003068:	2302      	movs	r3, #2
 800306a:	64fb      	str	r3, [r7, #76]	@ 0x4c
		HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800306c:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8003070:	4619      	mov	r1, r3
 8003072:	4822      	ldr	r0, [pc, #136]	@ (80030fc <HAL_TIM_Encoder_MspInit+0x26c>)
 8003074:	f00a fbde 	bl	800d834 <HAL_GPIO_Init>
}
 8003078:	e075      	b.n	8003166 <HAL_TIM_Encoder_MspInit+0x2d6>
	}else if(htim_encoder->Instance==TIM5){
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	4a20      	ldr	r2, [pc, #128]	@ (8003100 <HAL_TIM_Encoder_MspInit+0x270>)
 8003080:	4293      	cmp	r3, r2
 8003082:	d13f      	bne.n	8003104 <HAL_TIM_Encoder_MspInit+0x274>
		__HAL_RCC_TIM5_CLK_ENABLE();
 8003084:	2300      	movs	r3, #0
 8003086:	617b      	str	r3, [r7, #20]
 8003088:	4b16      	ldr	r3, [pc, #88]	@ (80030e4 <HAL_TIM_Encoder_MspInit+0x254>)
 800308a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800308c:	4a15      	ldr	r2, [pc, #84]	@ (80030e4 <HAL_TIM_Encoder_MspInit+0x254>)
 800308e:	f043 0308 	orr.w	r3, r3, #8
 8003092:	6413      	str	r3, [r2, #64]	@ 0x40
 8003094:	4b13      	ldr	r3, [pc, #76]	@ (80030e4 <HAL_TIM_Encoder_MspInit+0x254>)
 8003096:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003098:	f003 0308 	and.w	r3, r3, #8
 800309c:	617b      	str	r3, [r7, #20]
 800309e:	697b      	ldr	r3, [r7, #20]
		__HAL_RCC_GPIOA_CLK_ENABLE();
 80030a0:	2300      	movs	r3, #0
 80030a2:	613b      	str	r3, [r7, #16]
 80030a4:	4b0f      	ldr	r3, [pc, #60]	@ (80030e4 <HAL_TIM_Encoder_MspInit+0x254>)
 80030a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030a8:	4a0e      	ldr	r2, [pc, #56]	@ (80030e4 <HAL_TIM_Encoder_MspInit+0x254>)
 80030aa:	f043 0301 	orr.w	r3, r3, #1
 80030ae:	6313      	str	r3, [r2, #48]	@ 0x30
 80030b0:	4b0c      	ldr	r3, [pc, #48]	@ (80030e4 <HAL_TIM_Encoder_MspInit+0x254>)
 80030b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030b4:	f003 0301 	and.w	r3, r3, #1
 80030b8:	613b      	str	r3, [r7, #16]
 80030ba:	693b      	ldr	r3, [r7, #16]
		GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80030bc:	2303      	movs	r3, #3
 80030be:	63fb      	str	r3, [r7, #60]	@ 0x3c
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030c0:	2302      	movs	r3, #2
 80030c2:	643b      	str	r3, [r7, #64]	@ 0x40
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030c4:	2300      	movs	r3, #0
 80030c6:	647b      	str	r3, [r7, #68]	@ 0x44
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030c8:	2300      	movs	r3, #0
 80030ca:	64bb      	str	r3, [r7, #72]	@ 0x48
		GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80030cc:	2302      	movs	r3, #2
 80030ce:	64fb      	str	r3, [r7, #76]	@ 0x4c
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80030d0:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80030d4:	4619      	mov	r1, r3
 80030d6:	4805      	ldr	r0, [pc, #20]	@ (80030ec <HAL_TIM_Encoder_MspInit+0x25c>)
 80030d8:	f00a fbac 	bl	800d834 <HAL_GPIO_Init>
}
 80030dc:	e043      	b.n	8003166 <HAL_TIM_Encoder_MspInit+0x2d6>
 80030de:	bf00      	nop
 80030e0:	40010000 	.word	0x40010000
 80030e4:	40023800 	.word	0x40023800
 80030e8:	40021000 	.word	0x40021000
 80030ec:	40020000 	.word	0x40020000
 80030f0:	40020400 	.word	0x40020400
 80030f4:	40000400 	.word	0x40000400
 80030f8:	40000800 	.word	0x40000800
 80030fc:	40020c00 	.word	0x40020c00
 8003100:	40000c00 	.word	0x40000c00
	}else if(htim_encoder->Instance==TIM8){
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	4a19      	ldr	r2, [pc, #100]	@ (8003170 <HAL_TIM_Encoder_MspInit+0x2e0>)
 800310a:	4293      	cmp	r3, r2
 800310c:	d12b      	bne.n	8003166 <HAL_TIM_Encoder_MspInit+0x2d6>
		__HAL_RCC_TIM8_CLK_ENABLE();
 800310e:	2300      	movs	r3, #0
 8003110:	60fb      	str	r3, [r7, #12]
 8003112:	4b18      	ldr	r3, [pc, #96]	@ (8003174 <HAL_TIM_Encoder_MspInit+0x2e4>)
 8003114:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003116:	4a17      	ldr	r2, [pc, #92]	@ (8003174 <HAL_TIM_Encoder_MspInit+0x2e4>)
 8003118:	f043 0302 	orr.w	r3, r3, #2
 800311c:	6453      	str	r3, [r2, #68]	@ 0x44
 800311e:	4b15      	ldr	r3, [pc, #84]	@ (8003174 <HAL_TIM_Encoder_MspInit+0x2e4>)
 8003120:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003122:	f003 0302 	and.w	r3, r3, #2
 8003126:	60fb      	str	r3, [r7, #12]
 8003128:	68fb      	ldr	r3, [r7, #12]
		__HAL_RCC_GPIOC_CLK_ENABLE();
 800312a:	2300      	movs	r3, #0
 800312c:	60bb      	str	r3, [r7, #8]
 800312e:	4b11      	ldr	r3, [pc, #68]	@ (8003174 <HAL_TIM_Encoder_MspInit+0x2e4>)
 8003130:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003132:	4a10      	ldr	r2, [pc, #64]	@ (8003174 <HAL_TIM_Encoder_MspInit+0x2e4>)
 8003134:	f043 0304 	orr.w	r3, r3, #4
 8003138:	6313      	str	r3, [r2, #48]	@ 0x30
 800313a:	4b0e      	ldr	r3, [pc, #56]	@ (8003174 <HAL_TIM_Encoder_MspInit+0x2e4>)
 800313c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800313e:	f003 0304 	and.w	r3, r3, #4
 8003142:	60bb      	str	r3, [r7, #8]
 8003144:	68bb      	ldr	r3, [r7, #8]
		GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003146:	23c0      	movs	r3, #192	@ 0xc0
 8003148:	63fb      	str	r3, [r7, #60]	@ 0x3c
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800314a:	2302      	movs	r3, #2
 800314c:	643b      	str	r3, [r7, #64]	@ 0x40
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 800314e:	2300      	movs	r3, #0
 8003150:	647b      	str	r3, [r7, #68]	@ 0x44
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003152:	2300      	movs	r3, #0
 8003154:	64bb      	str	r3, [r7, #72]	@ 0x48
		GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8003156:	2303      	movs	r3, #3
 8003158:	64fb      	str	r3, [r7, #76]	@ 0x4c
		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800315a:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800315e:	4619      	mov	r1, r3
 8003160:	4805      	ldr	r0, [pc, #20]	@ (8003178 <HAL_TIM_Encoder_MspInit+0x2e8>)
 8003162:	f00a fb67 	bl	800d834 <HAL_GPIO_Init>
}
 8003166:	bf00      	nop
 8003168:	3750      	adds	r7, #80	@ 0x50
 800316a:	46bd      	mov	sp, r7
 800316c:	bd80      	pop	{r7, pc}
 800316e:	bf00      	nop
 8003170:	40010400 	.word	0x40010400
 8003174:	40023800 	.word	0x40023800
 8003178:	40020800 	.word	0x40020800

0800317c <HAL_SPI_MspInit>:
	}

}

void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800317c:	b580      	push	{r7, lr}
 800317e:	b08e      	sub	sp, #56	@ 0x38
 8003180:	af00      	add	r7, sp, #0
 8003182:	6078      	str	r0, [r7, #4]
	/* Prevent unused argument(s) compilation warning */
	UNUSED(hspi);
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003184:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003188:	2200      	movs	r2, #0
 800318a:	601a      	str	r2, [r3, #0]
 800318c:	605a      	str	r2, [r3, #4]
 800318e:	609a      	str	r2, [r3, #8]
 8003190:	60da      	str	r2, [r3, #12]
 8003192:	611a      	str	r2, [r3, #16]
	if(hspi->Instance==SPI1)
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	4a6a      	ldr	r2, [pc, #424]	@ (8003344 <HAL_SPI_MspInit+0x1c8>)
 800319a:	4293      	cmp	r3, r2
 800319c:	d13c      	bne.n	8003218 <HAL_SPI_MspInit+0x9c>
	{

		/* Peripheral clock enable */
		__HAL_RCC_SPI1_CLK_ENABLE();
 800319e:	2300      	movs	r3, #0
 80031a0:	623b      	str	r3, [r7, #32]
 80031a2:	4b69      	ldr	r3, [pc, #420]	@ (8003348 <HAL_SPI_MspInit+0x1cc>)
 80031a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031a6:	4a68      	ldr	r2, [pc, #416]	@ (8003348 <HAL_SPI_MspInit+0x1cc>)
 80031a8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80031ac:	6453      	str	r3, [r2, #68]	@ 0x44
 80031ae:	4b66      	ldr	r3, [pc, #408]	@ (8003348 <HAL_SPI_MspInit+0x1cc>)
 80031b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031b2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80031b6:	623b      	str	r3, [r7, #32]
 80031b8:	6a3b      	ldr	r3, [r7, #32]

		__HAL_RCC_GPIOA_CLK_ENABLE();
 80031ba:	2300      	movs	r3, #0
 80031bc:	61fb      	str	r3, [r7, #28]
 80031be:	4b62      	ldr	r3, [pc, #392]	@ (8003348 <HAL_SPI_MspInit+0x1cc>)
 80031c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031c2:	4a61      	ldr	r2, [pc, #388]	@ (8003348 <HAL_SPI_MspInit+0x1cc>)
 80031c4:	f043 0301 	orr.w	r3, r3, #1
 80031c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80031ca:	4b5f      	ldr	r3, [pc, #380]	@ (8003348 <HAL_SPI_MspInit+0x1cc>)
 80031cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031ce:	f003 0301 	and.w	r3, r3, #1
 80031d2:	61fb      	str	r3, [r7, #28]
 80031d4:	69fb      	ldr	r3, [r7, #28]
		/**SPI1 GPIO Configuration
    		PA5     ------> SPI1_SCK
    		PA6     ------> SPI1_MISO
    		PA7     ------> SPI1_MOSI
		 */
		GPIO_InitStruct.Pin = GPIO_PIN_5;
 80031d6:	2320      	movs	r3, #32
 80031d8:	627b      	str	r3, [r7, #36]	@ 0x24
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031da:	2302      	movs	r3, #2
 80031dc:	62bb      	str	r3, [r7, #40]	@ 0x28
		GPIO_InitStruct.Pull = GPIO_PULLUP;
 80031de:	2301      	movs	r3, #1
 80031e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80031e2:	2303      	movs	r3, #3
 80031e4:	633b      	str	r3, [r7, #48]	@ 0x30
		GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80031e6:	2305      	movs	r3, #5
 80031e8:	637b      	str	r3, [r7, #52]	@ 0x34
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80031ea:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80031ee:	4619      	mov	r1, r3
 80031f0:	4856      	ldr	r0, [pc, #344]	@ (800334c <HAL_SPI_MspInit+0x1d0>)
 80031f2:	f00a fb1f 	bl	800d834 <HAL_GPIO_Init>

		GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80031f6:	23c0      	movs	r3, #192	@ 0xc0
 80031f8:	627b      	str	r3, [r7, #36]	@ 0x24
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031fa:	2302      	movs	r3, #2
 80031fc:	62bb      	str	r3, [r7, #40]	@ 0x28
		GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80031fe:	2302      	movs	r3, #2
 8003200:	62fb      	str	r3, [r7, #44]	@ 0x2c
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003202:	2303      	movs	r3, #3
 8003204:	633b      	str	r3, [r7, #48]	@ 0x30
		GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003206:	2305      	movs	r3, #5
 8003208:	637b      	str	r3, [r7, #52]	@ 0x34
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800320a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800320e:	4619      	mov	r1, r3
 8003210:	484e      	ldr	r0, [pc, #312]	@ (800334c <HAL_SPI_MspInit+0x1d0>)
 8003212:	f00a fb0f 	bl	800d834 <HAL_GPIO_Init>
		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);


	}

}
 8003216:	e090      	b.n	800333a <HAL_SPI_MspInit+0x1be>
	}else if (hspi->Instance==SPI2){
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	4a4c      	ldr	r2, [pc, #304]	@ (8003350 <HAL_SPI_MspInit+0x1d4>)
 800321e:	4293      	cmp	r3, r2
 8003220:	d13e      	bne.n	80032a0 <HAL_SPI_MspInit+0x124>
		__HAL_RCC_SPI2_CLK_ENABLE();
 8003222:	2300      	movs	r3, #0
 8003224:	61bb      	str	r3, [r7, #24]
 8003226:	4b48      	ldr	r3, [pc, #288]	@ (8003348 <HAL_SPI_MspInit+0x1cc>)
 8003228:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800322a:	4a47      	ldr	r2, [pc, #284]	@ (8003348 <HAL_SPI_MspInit+0x1cc>)
 800322c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003230:	6413      	str	r3, [r2, #64]	@ 0x40
 8003232:	4b45      	ldr	r3, [pc, #276]	@ (8003348 <HAL_SPI_MspInit+0x1cc>)
 8003234:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003236:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800323a:	61bb      	str	r3, [r7, #24]
 800323c:	69bb      	ldr	r3, [r7, #24]
		__HAL_RCC_GPIOB_CLK_ENABLE();
 800323e:	2300      	movs	r3, #0
 8003240:	617b      	str	r3, [r7, #20]
 8003242:	4b41      	ldr	r3, [pc, #260]	@ (8003348 <HAL_SPI_MspInit+0x1cc>)
 8003244:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003246:	4a40      	ldr	r2, [pc, #256]	@ (8003348 <HAL_SPI_MspInit+0x1cc>)
 8003248:	f043 0302 	orr.w	r3, r3, #2
 800324c:	6313      	str	r3, [r2, #48]	@ 0x30
 800324e:	4b3e      	ldr	r3, [pc, #248]	@ (8003348 <HAL_SPI_MspInit+0x1cc>)
 8003250:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003252:	f003 0302 	and.w	r3, r3, #2
 8003256:	617b      	str	r3, [r7, #20]
 8003258:	697b      	ldr	r3, [r7, #20]
		GPIO_InitStruct.Pin = GPIO_PIN_13;
 800325a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800325e:	627b      	str	r3, [r7, #36]	@ 0x24
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003260:	2302      	movs	r3, #2
 8003262:	62bb      	str	r3, [r7, #40]	@ 0x28
		GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003264:	2301      	movs	r3, #1
 8003266:	62fb      	str	r3, [r7, #44]	@ 0x2c
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003268:	2303      	movs	r3, #3
 800326a:	633b      	str	r3, [r7, #48]	@ 0x30
		GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800326c:	2305      	movs	r3, #5
 800326e:	637b      	str	r3, [r7, #52]	@ 0x34
		HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003270:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003274:	4619      	mov	r1, r3
 8003276:	4837      	ldr	r0, [pc, #220]	@ (8003354 <HAL_SPI_MspInit+0x1d8>)
 8003278:	f00a fadc 	bl	800d834 <HAL_GPIO_Init>
		GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 800327c:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8003280:	627b      	str	r3, [r7, #36]	@ 0x24
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003282:	2302      	movs	r3, #2
 8003284:	62bb      	str	r3, [r7, #40]	@ 0x28
		GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003286:	2302      	movs	r3, #2
 8003288:	62fb      	str	r3, [r7, #44]	@ 0x2c
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800328a:	2303      	movs	r3, #3
 800328c:	633b      	str	r3, [r7, #48]	@ 0x30
		GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800328e:	2305      	movs	r3, #5
 8003290:	637b      	str	r3, [r7, #52]	@ 0x34
		HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003292:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003296:	4619      	mov	r1, r3
 8003298:	482e      	ldr	r0, [pc, #184]	@ (8003354 <HAL_SPI_MspInit+0x1d8>)
 800329a:	f00a facb 	bl	800d834 <HAL_GPIO_Init>
}
 800329e:	e04c      	b.n	800333a <HAL_SPI_MspInit+0x1be>
		__HAL_RCC_GPIOB_CLK_ENABLE();
 80032a0:	2300      	movs	r3, #0
 80032a2:	613b      	str	r3, [r7, #16]
 80032a4:	4b28      	ldr	r3, [pc, #160]	@ (8003348 <HAL_SPI_MspInit+0x1cc>)
 80032a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032a8:	4a27      	ldr	r2, [pc, #156]	@ (8003348 <HAL_SPI_MspInit+0x1cc>)
 80032aa:	f043 0302 	orr.w	r3, r3, #2
 80032ae:	6313      	str	r3, [r2, #48]	@ 0x30
 80032b0:	4b25      	ldr	r3, [pc, #148]	@ (8003348 <HAL_SPI_MspInit+0x1cc>)
 80032b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032b4:	f003 0302 	and.w	r3, r3, #2
 80032b8:	613b      	str	r3, [r7, #16]
 80032ba:	693b      	ldr	r3, [r7, #16]
		__HAL_RCC_GPIOC_CLK_ENABLE();
 80032bc:	2300      	movs	r3, #0
 80032be:	60fb      	str	r3, [r7, #12]
 80032c0:	4b21      	ldr	r3, [pc, #132]	@ (8003348 <HAL_SPI_MspInit+0x1cc>)
 80032c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032c4:	4a20      	ldr	r2, [pc, #128]	@ (8003348 <HAL_SPI_MspInit+0x1cc>)
 80032c6:	f043 0304 	orr.w	r3, r3, #4
 80032ca:	6313      	str	r3, [r2, #48]	@ 0x30
 80032cc:	4b1e      	ldr	r3, [pc, #120]	@ (8003348 <HAL_SPI_MspInit+0x1cc>)
 80032ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032d0:	f003 0304 	and.w	r3, r3, #4
 80032d4:	60fb      	str	r3, [r7, #12]
 80032d6:	68fb      	ldr	r3, [r7, #12]
		GPIO_InitStruct.Pin = GPIO_PIN_3;
 80032d8:	2308      	movs	r3, #8
 80032da:	627b      	str	r3, [r7, #36]	@ 0x24
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032dc:	2302      	movs	r3, #2
 80032de:	62bb      	str	r3, [r7, #40]	@ 0x28
		GPIO_InitStruct.Pull = GPIO_PULLUP;
 80032e0:	2301      	movs	r3, #1
 80032e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80032e4:	2303      	movs	r3, #3
 80032e6:	633b      	str	r3, [r7, #48]	@ 0x30
		GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80032e8:	2306      	movs	r3, #6
 80032ea:	637b      	str	r3, [r7, #52]	@ 0x34
		HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80032ec:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80032f0:	4619      	mov	r1, r3
 80032f2:	4818      	ldr	r0, [pc, #96]	@ (8003354 <HAL_SPI_MspInit+0x1d8>)
 80032f4:	f00a fa9e 	bl	800d834 <HAL_GPIO_Init>
		GPIO_InitStruct.Pin = GPIO_PIN_4;
 80032f8:	2310      	movs	r3, #16
 80032fa:	627b      	str	r3, [r7, #36]	@ 0x24
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032fc:	2302      	movs	r3, #2
 80032fe:	62bb      	str	r3, [r7, #40]	@ 0x28
		GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003300:	2302      	movs	r3, #2
 8003302:	62fb      	str	r3, [r7, #44]	@ 0x2c
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003304:	2303      	movs	r3, #3
 8003306:	633b      	str	r3, [r7, #48]	@ 0x30
		GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8003308:	2306      	movs	r3, #6
 800330a:	637b      	str	r3, [r7, #52]	@ 0x34
		HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800330c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003310:	4619      	mov	r1, r3
 8003312:	4810      	ldr	r0, [pc, #64]	@ (8003354 <HAL_SPI_MspInit+0x1d8>)
 8003314:	f00a fa8e 	bl	800d834 <HAL_GPIO_Init>
		GPIO_InitStruct.Pin = GPIO_PIN_12;
 8003318:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800331c:	627b      	str	r3, [r7, #36]	@ 0x24
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800331e:	2302      	movs	r3, #2
 8003320:	62bb      	str	r3, [r7, #40]	@ 0x28
		GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003322:	2302      	movs	r3, #2
 8003324:	62fb      	str	r3, [r7, #44]	@ 0x2c
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003326:	2303      	movs	r3, #3
 8003328:	633b      	str	r3, [r7, #48]	@ 0x30
		GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800332a:	2306      	movs	r3, #6
 800332c:	637b      	str	r3, [r7, #52]	@ 0x34
		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800332e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003332:	4619      	mov	r1, r3
 8003334:	4808      	ldr	r0, [pc, #32]	@ (8003358 <HAL_SPI_MspInit+0x1dc>)
 8003336:	f00a fa7d 	bl	800d834 <HAL_GPIO_Init>
}
 800333a:	bf00      	nop
 800333c:	3738      	adds	r7, #56	@ 0x38
 800333e:	46bd      	mov	sp, r7
 8003340:	bd80      	pop	{r7, pc}
 8003342:	bf00      	nop
 8003344:	40013000 	.word	0x40013000
 8003348:	40023800 	.word	0x40023800
 800334c:	40020000 	.word	0x40020000
 8003350:	40003800 	.word	0x40003800
 8003354:	40020400 	.word	0x40020400
 8003358:	40020800 	.word	0x40020800

0800335c <SystemClock_Config>:

	}
}

void SystemClock_Config(void)
{
 800335c:	b580      	push	{r7, lr}
 800335e:	b094      	sub	sp, #80	@ 0x50
 8003360:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003362:	f107 0320 	add.w	r3, r7, #32
 8003366:	2230      	movs	r2, #48	@ 0x30
 8003368:	2100      	movs	r1, #0
 800336a:	4618      	mov	r0, r3
 800336c:	f01a fbe7 	bl	801db3e <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003370:	f107 030c 	add.w	r3, r7, #12
 8003374:	2200      	movs	r2, #0
 8003376:	601a      	str	r2, [r3, #0]
 8003378:	605a      	str	r2, [r3, #4]
 800337a:	609a      	str	r2, [r3, #8]
 800337c:	60da      	str	r2, [r3, #12]
 800337e:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8003380:	2300      	movs	r3, #0
 8003382:	60bb      	str	r3, [r7, #8]
 8003384:	4b29      	ldr	r3, [pc, #164]	@ (800342c <SystemClock_Config+0xd0>)
 8003386:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003388:	4a28      	ldr	r2, [pc, #160]	@ (800342c <SystemClock_Config+0xd0>)
 800338a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800338e:	6413      	str	r3, [r2, #64]	@ 0x40
 8003390:	4b26      	ldr	r3, [pc, #152]	@ (800342c <SystemClock_Config+0xd0>)
 8003392:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003394:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003398:	60bb      	str	r3, [r7, #8]
 800339a:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800339c:	2300      	movs	r3, #0
 800339e:	607b      	str	r3, [r7, #4]
 80033a0:	4b23      	ldr	r3, [pc, #140]	@ (8003430 <SystemClock_Config+0xd4>)
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	4a22      	ldr	r2, [pc, #136]	@ (8003430 <SystemClock_Config+0xd4>)
 80033a6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80033aa:	6013      	str	r3, [r2, #0]
 80033ac:	4b20      	ldr	r3, [pc, #128]	@ (8003430 <SystemClock_Config+0xd4>)
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80033b4:	607b      	str	r3, [r7, #4]
 80033b6:	687b      	ldr	r3, [r7, #4]
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80033b8:	2301      	movs	r3, #1
 80033ba:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80033bc:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80033c0:	627b      	str	r3, [r7, #36]	@ 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80033c2:	2302      	movs	r3, #2
 80033c4:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80033c6:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80033ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLM = 8;
 80033cc:	2308      	movs	r3, #8
 80033ce:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLN = 336;
 80033d0:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80033d4:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80033d6:	2302      	movs	r3, #2
 80033d8:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLQ = 7;
 80033da:	2307      	movs	r3, #7
 80033dc:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80033de:	f107 0320 	add.w	r3, r7, #32
 80033e2:	4618      	mov	r0, r3
 80033e4:	f00e fbe8 	bl	8011bb8 <HAL_RCC_OscConfig>
 80033e8:	4603      	mov	r3, r0
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d001      	beq.n	80033f2 <SystemClock_Config+0x96>
	{
		Error_Handler();
 80033ee:	f008 fc0d 	bl	800bc0c <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80033f2:	230f      	movs	r3, #15
 80033f4:	60fb      	str	r3, [r7, #12]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80033f6:	2302      	movs	r3, #2
 80033f8:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80033fa:	2300      	movs	r3, #0
 80033fc:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80033fe:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8003402:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8003404:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003408:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800340a:	f107 030c 	add.w	r3, r7, #12
 800340e:	2105      	movs	r1, #5
 8003410:	4618      	mov	r0, r3
 8003412:	f00e fe49 	bl	80120a8 <HAL_RCC_ClockConfig>
 8003416:	4603      	mov	r3, r0
 8003418:	2b00      	cmp	r3, #0
 800341a:	d001      	beq.n	8003420 <SystemClock_Config+0xc4>
	{
		Error_Handler();
 800341c:	f008 fbf6 	bl	800bc0c <Error_Handler>
	}
	/** Enables the Clock Security System
	 */
	HAL_RCC_EnableCSS();
 8003420:	f00e ff28 	bl	8012274 <HAL_RCC_EnableCSS>
}
 8003424:	bf00      	nop
 8003426:	3750      	adds	r7, #80	@ 0x50
 8003428:	46bd      	mov	sp, r7
 800342a:	bd80      	pop	{r7, pc}
 800342c:	40023800 	.word	0x40023800
 8003430:	40007000 	.word	0x40007000

08003434 <TIMxInit>:
 * Function Example		: BIOSTIMx_Init (&htim1, 1000, 168); //1ms  interrupt
 * 						  BIOSTIMx_Init (&htim2, 1000, 84);  //1ms  interrupt
 * 						  BIOSTIMx_Init (&htim3, 20000, 84); //20ms interrupt
 */

void TIMxInit(TIM_HandleTypeDef *htimx, uint16_t period, uint16_t prescaler) {
 8003434:	b580      	push	{r7, lr}
 8003436:	b086      	sub	sp, #24
 8003438:	af00      	add	r7, sp, #0
 800343a:	6078      	str	r0, [r7, #4]
 800343c:	460b      	mov	r3, r1
 800343e:	807b      	strh	r3, [r7, #2]
 8003440:	4613      	mov	r3, r2
 8003442:	803b      	strh	r3, [r7, #0]

	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8003444:	f107 030c 	add.w	r3, r7, #12
 8003448:	2200      	movs	r2, #0
 800344a:	601a      	str	r2, [r3, #0]
 800344c:	605a      	str	r2, [r3, #4]
	int nvic = 0;
 800344e:	2300      	movs	r3, #0
 8003450:	617b      	str	r3, [r7, #20]

	if (htimx == &htim1) {
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	4a94      	ldr	r2, [pc, #592]	@ (80036a8 <TIMxInit+0x274>)
 8003456:	4293      	cmp	r3, r2
 8003458:	d105      	bne.n	8003466 <TIMxInit+0x32>
		htimx->Instance = TIM1;
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	4a93      	ldr	r2, [pc, #588]	@ (80036ac <TIMxInit+0x278>)
 800345e:	601a      	str	r2, [r3, #0]
		nvic = TIM1_UP_TIM10_IRQn;
 8003460:	2319      	movs	r3, #25
 8003462:	617b      	str	r3, [r7, #20]
 8003464:	e081      	b.n	800356a <TIMxInit+0x136>
	} else if (htimx == &htim2) {
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	4a91      	ldr	r2, [pc, #580]	@ (80036b0 <TIMxInit+0x27c>)
 800346a:	4293      	cmp	r3, r2
 800346c:	d106      	bne.n	800347c <TIMxInit+0x48>
		htimx->Instance = TIM2;
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8003474:	601a      	str	r2, [r3, #0]
		nvic = TIM2_IRQn;
 8003476:	231c      	movs	r3, #28
 8003478:	617b      	str	r3, [r7, #20]
 800347a:	e076      	b.n	800356a <TIMxInit+0x136>
	} else if (htimx == &htim3) {
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	4a8d      	ldr	r2, [pc, #564]	@ (80036b4 <TIMxInit+0x280>)
 8003480:	4293      	cmp	r3, r2
 8003482:	d105      	bne.n	8003490 <TIMxInit+0x5c>
		htimx->Instance = TIM3;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	4a8c      	ldr	r2, [pc, #560]	@ (80036b8 <TIMxInit+0x284>)
 8003488:	601a      	str	r2, [r3, #0]
		nvic = TIM3_IRQn;
 800348a:	231d      	movs	r3, #29
 800348c:	617b      	str	r3, [r7, #20]
 800348e:	e06c      	b.n	800356a <TIMxInit+0x136>
	} else if (htimx == &htim4) {
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	4a8a      	ldr	r2, [pc, #552]	@ (80036bc <TIMxInit+0x288>)
 8003494:	4293      	cmp	r3, r2
 8003496:	d105      	bne.n	80034a4 <TIMxInit+0x70>
		htimx->Instance = TIM4;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	4a89      	ldr	r2, [pc, #548]	@ (80036c0 <TIMxInit+0x28c>)
 800349c:	601a      	str	r2, [r3, #0]
		nvic = TIM4_IRQn;
 800349e:	231e      	movs	r3, #30
 80034a0:	617b      	str	r3, [r7, #20]
 80034a2:	e062      	b.n	800356a <TIMxInit+0x136>
	} else if (htimx == &htim5) {
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	4a87      	ldr	r2, [pc, #540]	@ (80036c4 <TIMxInit+0x290>)
 80034a8:	4293      	cmp	r3, r2
 80034aa:	d105      	bne.n	80034b8 <TIMxInit+0x84>
		htimx->Instance = TIM5;
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	4a86      	ldr	r2, [pc, #536]	@ (80036c8 <TIMxInit+0x294>)
 80034b0:	601a      	str	r2, [r3, #0]
		nvic = TIM5_IRQn;
 80034b2:	2332      	movs	r3, #50	@ 0x32
 80034b4:	617b      	str	r3, [r7, #20]
 80034b6:	e058      	b.n	800356a <TIMxInit+0x136>
	} else if (htimx == &htim6) {
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	4a84      	ldr	r2, [pc, #528]	@ (80036cc <TIMxInit+0x298>)
 80034bc:	4293      	cmp	r3, r2
 80034be:	d105      	bne.n	80034cc <TIMxInit+0x98>
		htimx->Instance = TIM6;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	4a83      	ldr	r2, [pc, #524]	@ (80036d0 <TIMxInit+0x29c>)
 80034c4:	601a      	str	r2, [r3, #0]
		nvic = TIM6_DAC_IRQn;
 80034c6:	2336      	movs	r3, #54	@ 0x36
 80034c8:	617b      	str	r3, [r7, #20]
 80034ca:	e04e      	b.n	800356a <TIMxInit+0x136>
	} else if (htimx == &htim7) {
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	4a81      	ldr	r2, [pc, #516]	@ (80036d4 <TIMxInit+0x2a0>)
 80034d0:	4293      	cmp	r3, r2
 80034d2:	d105      	bne.n	80034e0 <TIMxInit+0xac>
		htimx->Instance = TIM7;
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	4a80      	ldr	r2, [pc, #512]	@ (80036d8 <TIMxInit+0x2a4>)
 80034d8:	601a      	str	r2, [r3, #0]
		nvic = TIM7_IRQn;
 80034da:	2337      	movs	r3, #55	@ 0x37
 80034dc:	617b      	str	r3, [r7, #20]
 80034de:	e044      	b.n	800356a <TIMxInit+0x136>
	} else if (htimx == &htim8) {
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	4a7e      	ldr	r2, [pc, #504]	@ (80036dc <TIMxInit+0x2a8>)
 80034e4:	4293      	cmp	r3, r2
 80034e6:	d105      	bne.n	80034f4 <TIMxInit+0xc0>
		htimx->Instance = TIM8;
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	4a7d      	ldr	r2, [pc, #500]	@ (80036e0 <TIMxInit+0x2ac>)
 80034ec:	601a      	str	r2, [r3, #0]
		nvic = TIM8_CC_IRQn;
 80034ee:	232e      	movs	r3, #46	@ 0x2e
 80034f0:	617b      	str	r3, [r7, #20]
 80034f2:	e03a      	b.n	800356a <TIMxInit+0x136>
	} else if (htimx == &htim9) {
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	4a7b      	ldr	r2, [pc, #492]	@ (80036e4 <TIMxInit+0x2b0>)
 80034f8:	4293      	cmp	r3, r2
 80034fa:	d105      	bne.n	8003508 <TIMxInit+0xd4>
		htimx->Instance = TIM9;
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	4a7a      	ldr	r2, [pc, #488]	@ (80036e8 <TIMxInit+0x2b4>)
 8003500:	601a      	str	r2, [r3, #0]
		nvic = TIM1_BRK_TIM9_IRQn;
 8003502:	2318      	movs	r3, #24
 8003504:	617b      	str	r3, [r7, #20]
 8003506:	e030      	b.n	800356a <TIMxInit+0x136>
	} else if (htimx == &htim10) {
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	4a78      	ldr	r2, [pc, #480]	@ (80036ec <TIMxInit+0x2b8>)
 800350c:	4293      	cmp	r3, r2
 800350e:	d105      	bne.n	800351c <TIMxInit+0xe8>
		htimx->Instance = TIM10;
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	4a77      	ldr	r2, [pc, #476]	@ (80036f0 <TIMxInit+0x2bc>)
 8003514:	601a      	str	r2, [r3, #0]
		nvic = TIM1_UP_TIM10_IRQn;
 8003516:	2319      	movs	r3, #25
 8003518:	617b      	str	r3, [r7, #20]
 800351a:	e026      	b.n	800356a <TIMxInit+0x136>
	} else if (htimx == &htim11) {
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	4a75      	ldr	r2, [pc, #468]	@ (80036f4 <TIMxInit+0x2c0>)
 8003520:	4293      	cmp	r3, r2
 8003522:	d105      	bne.n	8003530 <TIMxInit+0xfc>
		htimx->Instance = TIM11;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	4a74      	ldr	r2, [pc, #464]	@ (80036f8 <TIMxInit+0x2c4>)
 8003528:	601a      	str	r2, [r3, #0]
		nvic = TIM1_TRG_COM_TIM11_IRQn;
 800352a:	231a      	movs	r3, #26
 800352c:	617b      	str	r3, [r7, #20]
 800352e:	e01c      	b.n	800356a <TIMxInit+0x136>
	} else if (htimx == &htim12) {
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	4a72      	ldr	r2, [pc, #456]	@ (80036fc <TIMxInit+0x2c8>)
 8003534:	4293      	cmp	r3, r2
 8003536:	d105      	bne.n	8003544 <TIMxInit+0x110>
		htimx->Instance = TIM12;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	4a71      	ldr	r2, [pc, #452]	@ (8003700 <TIMxInit+0x2cc>)
 800353c:	601a      	str	r2, [r3, #0]
		nvic = TIM8_BRK_TIM12_IRQn;
 800353e:	232b      	movs	r3, #43	@ 0x2b
 8003540:	617b      	str	r3, [r7, #20]
 8003542:	e012      	b.n	800356a <TIMxInit+0x136>
	} else if (htimx == &htim13) {
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	4a6f      	ldr	r2, [pc, #444]	@ (8003704 <TIMxInit+0x2d0>)
 8003548:	4293      	cmp	r3, r2
 800354a:	d105      	bne.n	8003558 <TIMxInit+0x124>
		htimx->Instance = TIM13;
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	4a6e      	ldr	r2, [pc, #440]	@ (8003708 <TIMxInit+0x2d4>)
 8003550:	601a      	str	r2, [r3, #0]
		nvic = TIM8_UP_TIM13_IRQn;
 8003552:	232c      	movs	r3, #44	@ 0x2c
 8003554:	617b      	str	r3, [r7, #20]
 8003556:	e008      	b.n	800356a <TIMxInit+0x136>
	} else if (htimx == &htim14) {
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	4a6c      	ldr	r2, [pc, #432]	@ (800370c <TIMxInit+0x2d8>)
 800355c:	4293      	cmp	r3, r2
 800355e:	d104      	bne.n	800356a <TIMxInit+0x136>
		htimx->Instance = TIM14;
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	4a6b      	ldr	r2, [pc, #428]	@ (8003710 <TIMxInit+0x2dc>)
 8003564:	601a      	str	r2, [r3, #0]
		nvic = TIM8_TRG_COM_TIM14_IRQn;
 8003566:	232d      	movs	r3, #45	@ 0x2d
 8003568:	617b      	str	r3, [r7, #20]
	}

	htimx->Init.Prescaler = prescaler - 1;
 800356a:	883b      	ldrh	r3, [r7, #0]
 800356c:	3b01      	subs	r3, #1
 800356e:	461a      	mov	r2, r3
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	605a      	str	r2, [r3, #4]
	htimx->Init.CounterMode = TIM_COUNTERMODE_UP;
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	2200      	movs	r2, #0
 8003578:	609a      	str	r2, [r3, #8]
	htimx->Init.Period = period - 1;
 800357a:	887b      	ldrh	r3, [r7, #2]
 800357c:	3b01      	subs	r3, #1
 800357e:	461a      	mov	r2, r3
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	60da      	str	r2, [r3, #12]
	htimx->Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	2200      	movs	r2, #0
 8003588:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(htimx) != HAL_OK) {
 800358a:	6878      	ldr	r0, [r7, #4]
 800358c:	f00f fdaf 	bl	80130ee <HAL_TIM_Base_Init>
 8003590:	4603      	mov	r3, r0
 8003592:	2b00      	cmp	r3, #0
 8003594:	d001      	beq.n	800359a <TIMxInit+0x166>
		Error_Handler();
 8003596:	f008 fb39 	bl	800bc0c <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800359a:	2300      	movs	r3, #0
 800359c:	60fb      	str	r3, [r7, #12]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800359e:	2300      	movs	r3, #0
 80035a0:	613b      	str	r3, [r7, #16]
	if (HAL_TIMEx_MasterConfigSynchronization(htimx, &sMasterConfig)
 80035a2:	f107 030c 	add.w	r3, r7, #12
 80035a6:	4619      	mov	r1, r3
 80035a8:	6878      	ldr	r0, [r7, #4]
 80035aa:	f010 fedd 	bl	8014368 <HAL_TIMEx_MasterConfigSynchronization>
 80035ae:	4603      	mov	r3, r0
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d001      	beq.n	80035b8 <TIMxInit+0x184>
			!= HAL_OK) {
		Error_Handler();
 80035b4:	f008 fb2a 	bl	800bc0c <Error_Handler>
	}

	if (htimx == &htim1) {
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	4a3b      	ldr	r2, [pc, #236]	@ (80036a8 <TIMxInit+0x274>)
 80035bc:	4293      	cmp	r3, r2
 80035be:	f000 80ca 	beq.w	8003756 <TIMxInit+0x322>
#ifndef QEI1_IRQ_PRIO
		HAL_NVIC_SetPriority(nvic, TIM1_IRQ_PRIO, 0);
		HAL_NVIC_EnableIRQ(nvic);
#endif
	} else if (htimx == &htim2) {
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	4a3a      	ldr	r2, [pc, #232]	@ (80036b0 <TIMxInit+0x27c>)
 80035c6:	4293      	cmp	r3, r2
 80035c8:	f000 80c5 	beq.w	8003756 <TIMxInit+0x322>
#ifndef FREERTOS_USED
		HAL_NVIC_SetPriority(nvic, TIM2_IRQ_PRIO, 0);
		HAL_NVIC_EnableIRQ(nvic);
#endif
	} else if (htimx == &htim3) {
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	4a39      	ldr	r2, [pc, #228]	@ (80036b4 <TIMxInit+0x280>)
 80035d0:	4293      	cmp	r3, r2
 80035d2:	f000 80c0 	beq.w	8003756 <TIMxInit+0x322>
#ifndef USED_BDC
		HAL_NVIC_SetPriority(nvic, TIM3_IRQ_PRIO, 0);
		HAL_NVIC_EnableIRQ(nvic);
#endif
	} else if (htimx == &htim4) {
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	4a38      	ldr	r2, [pc, #224]	@ (80036bc <TIMxInit+0x288>)
 80035da:	4293      	cmp	r3, r2
 80035dc:	f000 80bb 	beq.w	8003756 <TIMxInit+0x322>
#ifndef QEI4_IRQ_PRIO
		HAL_NVIC_SetPriority(nvic, TIM4_IRQ_PRIO, 0);
		HAL_NVIC_EnableIRQ(nvic);
#endif
	} else if (htimx == &htim5) {
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	4a38      	ldr	r2, [pc, #224]	@ (80036c4 <TIMxInit+0x290>)
 80035e4:	4293      	cmp	r3, r2
 80035e6:	f000 80b6 	beq.w	8003756 <TIMxInit+0x322>
#ifndef USED_BDC
		HAL_NVIC_SetPriority(nvic, TIM5_IRQ_PRIO, 0);
		HAL_NVIC_EnableIRQ(nvic);
#endif
	} else if (htimx == &htim6) {
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	4a37      	ldr	r2, [pc, #220]	@ (80036cc <TIMxInit+0x298>)
 80035ee:	4293      	cmp	r3, r2
 80035f0:	d10c      	bne.n	800360c <TIMxInit+0x1d8>
		HAL_NVIC_SetPriority(nvic, TIM6_IRQ_PRIO, 0);
 80035f2:	697b      	ldr	r3, [r7, #20]
 80035f4:	b25b      	sxtb	r3, r3
 80035f6:	2200      	movs	r2, #0
 80035f8:	2105      	movs	r1, #5
 80035fa:	4618      	mov	r0, r3
 80035fc:	f009 fc5a 	bl	800ceb4 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(nvic);
 8003600:	697b      	ldr	r3, [r7, #20]
 8003602:	b25b      	sxtb	r3, r3
 8003604:	4618      	mov	r0, r3
 8003606:	f009 fc71 	bl	800ceec <HAL_NVIC_EnableIRQ>
 800360a:	e0a4      	b.n	8003756 <TIMxInit+0x322>
	} else if (htimx == &htim7) {
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	4a31      	ldr	r2, [pc, #196]	@ (80036d4 <TIMxInit+0x2a0>)
 8003610:	4293      	cmp	r3, r2
 8003612:	d10c      	bne.n	800362e <TIMxInit+0x1fa>
		HAL_NVIC_SetPriority(nvic, TIM7_IRQ_PRIO, 0);
 8003614:	697b      	ldr	r3, [r7, #20]
 8003616:	b25b      	sxtb	r3, r3
 8003618:	2200      	movs	r2, #0
 800361a:	2105      	movs	r1, #5
 800361c:	4618      	mov	r0, r3
 800361e:	f009 fc49 	bl	800ceb4 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(nvic);
 8003622:	697b      	ldr	r3, [r7, #20]
 8003624:	b25b      	sxtb	r3, r3
 8003626:	4618      	mov	r0, r3
 8003628:	f009 fc60 	bl	800ceec <HAL_NVIC_EnableIRQ>
 800362c:	e093      	b.n	8003756 <TIMxInit+0x322>
	} else if (htimx == &htim8) {
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	4a2a      	ldr	r2, [pc, #168]	@ (80036dc <TIMxInit+0x2a8>)
 8003632:	4293      	cmp	r3, r2
 8003634:	f000 808f 	beq.w	8003756 <TIMxInit+0x322>
#ifndef QEI6_IRQ_PRIO
		HAL_NVIC_SetPriority(nvic, TIM8_IRQ_PRIO, 0);
		HAL_NVIC_EnableIRQ(nvic);
#endif
	} else if (htimx == &htim9) {
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	4a2a      	ldr	r2, [pc, #168]	@ (80036e4 <TIMxInit+0x2b0>)
 800363c:	4293      	cmp	r3, r2
 800363e:	f000 808a 	beq.w	8003756 <TIMxInit+0x322>
#ifndef USED_BDC
		HAL_NVIC_SetPriority(nvic, TIM9_IRQ_PRIO, 0);
		HAL_NVIC_EnableIRQ(nvic);
#endif
	} else if (htimx == &htim10) {
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	4a29      	ldr	r2, [pc, #164]	@ (80036ec <TIMxInit+0x2b8>)
 8003646:	4293      	cmp	r3, r2
 8003648:	d10c      	bne.n	8003664 <TIMxInit+0x230>
		HAL_NVIC_SetPriority(nvic, TIM10_IRQ_PRIO, 0);
 800364a:	697b      	ldr	r3, [r7, #20]
 800364c:	b25b      	sxtb	r3, r3
 800364e:	2200      	movs	r2, #0
 8003650:	210e      	movs	r1, #14
 8003652:	4618      	mov	r0, r3
 8003654:	f009 fc2e 	bl	800ceb4 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(nvic);
 8003658:	697b      	ldr	r3, [r7, #20]
 800365a:	b25b      	sxtb	r3, r3
 800365c:	4618      	mov	r0, r3
 800365e:	f009 fc45 	bl	800ceec <HAL_NVIC_EnableIRQ>
 8003662:	e078      	b.n	8003756 <TIMxInit+0x322>
	} else if (htimx == &htim11) {
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	4a23      	ldr	r2, [pc, #140]	@ (80036f4 <TIMxInit+0x2c0>)
 8003668:	4293      	cmp	r3, r2
 800366a:	d10c      	bne.n	8003686 <TIMxInit+0x252>
		HAL_NVIC_SetPriority(nvic, TIM11_IRQ_PRIO, 0);
 800366c:	697b      	ldr	r3, [r7, #20]
 800366e:	b25b      	sxtb	r3, r3
 8003670:	2200      	movs	r2, #0
 8003672:	210e      	movs	r1, #14
 8003674:	4618      	mov	r0, r3
 8003676:	f009 fc1d 	bl	800ceb4 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(nvic);
 800367a:	697b      	ldr	r3, [r7, #20]
 800367c:	b25b      	sxtb	r3, r3
 800367e:	4618      	mov	r0, r3
 8003680:	f009 fc34 	bl	800ceec <HAL_NVIC_EnableIRQ>
 8003684:	e067      	b.n	8003756 <TIMxInit+0x322>
	} else if (htimx == &htim12) {
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	4a1c      	ldr	r2, [pc, #112]	@ (80036fc <TIMxInit+0x2c8>)
 800368a:	4293      	cmp	r3, r2
 800368c:	d142      	bne.n	8003714 <TIMxInit+0x2e0>
		HAL_NVIC_SetPriority(nvic, TIM12_IRQ_PRIO, 0);
 800368e:	697b      	ldr	r3, [r7, #20]
 8003690:	b25b      	sxtb	r3, r3
 8003692:	2200      	movs	r2, #0
 8003694:	210e      	movs	r1, #14
 8003696:	4618      	mov	r0, r3
 8003698:	f009 fc0c 	bl	800ceb4 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(nvic);
 800369c:	697b      	ldr	r3, [r7, #20]
 800369e:	b25b      	sxtb	r3, r3
 80036a0:	4618      	mov	r0, r3
 80036a2:	f009 fc23 	bl	800ceec <HAL_NVIC_EnableIRQ>
 80036a6:	e056      	b.n	8003756 <TIMxInit+0x322>
 80036a8:	20006710 	.word	0x20006710
 80036ac:	40010000 	.word	0x40010000
 80036b0:	2000682c 	.word	0x2000682c
 80036b4:	20006438 	.word	0x20006438
 80036b8:	40000400 	.word	0x40000400
 80036bc:	20006258 	.word	0x20006258
 80036c0:	40000800 	.word	0x40000800
 80036c4:	200063f0 	.word	0x200063f0
 80036c8:	40000c00 	.word	0x40000c00
 80036cc:	200066c8 	.word	0x200066c8
 80036d0:	40001000 	.word	0x40001000
 80036d4:	200069a8 	.word	0x200069a8
 80036d8:	40001400 	.word	0x40001400
 80036dc:	20006210 	.word	0x20006210
 80036e0:	40010400 	.word	0x40010400
 80036e4:	20006758 	.word	0x20006758
 80036e8:	40014000 	.word	0x40014000
 80036ec:	20006344 	.word	0x20006344
 80036f0:	40014400 	.word	0x40014400
 80036f4:	20006618 	.word	0x20006618
 80036f8:	40014800 	.word	0x40014800
 80036fc:	20006960 	.word	0x20006960
 8003700:	40001800 	.word	0x40001800
 8003704:	20006528 	.word	0x20006528
 8003708:	40001c00 	.word	0x40001c00
 800370c:	20006918 	.word	0x20006918
 8003710:	40002000 	.word	0x40002000
	} else if (htimx == &htim13) {
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	4a13      	ldr	r2, [pc, #76]	@ (8003764 <TIMxInit+0x330>)
 8003718:	4293      	cmp	r3, r2
 800371a:	d10c      	bne.n	8003736 <TIMxInit+0x302>
		HAL_NVIC_SetPriority(nvic, TIM13_IRQ_PRIO, 0);
 800371c:	697b      	ldr	r3, [r7, #20]
 800371e:	b25b      	sxtb	r3, r3
 8003720:	2200      	movs	r2, #0
 8003722:	210e      	movs	r1, #14
 8003724:	4618      	mov	r0, r3
 8003726:	f009 fbc5 	bl	800ceb4 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(nvic);
 800372a:	697b      	ldr	r3, [r7, #20]
 800372c:	b25b      	sxtb	r3, r3
 800372e:	4618      	mov	r0, r3
 8003730:	f009 fbdc 	bl	800ceec <HAL_NVIC_EnableIRQ>
 8003734:	e00f      	b.n	8003756 <TIMxInit+0x322>
	} else if (htimx == &htim14) {
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	4a0b      	ldr	r2, [pc, #44]	@ (8003768 <TIMxInit+0x334>)
 800373a:	4293      	cmp	r3, r2
 800373c:	d10b      	bne.n	8003756 <TIMxInit+0x322>
		HAL_NVIC_SetPriority(nvic, TIM14_IRQ_PRIO, 0);
 800373e:	697b      	ldr	r3, [r7, #20]
 8003740:	b25b      	sxtb	r3, r3
 8003742:	2200      	movs	r2, #0
 8003744:	210e      	movs	r1, #14
 8003746:	4618      	mov	r0, r3
 8003748:	f009 fbb4 	bl	800ceb4 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(nvic);
 800374c:	697b      	ldr	r3, [r7, #20]
 800374e:	b25b      	sxtb	r3, r3
 8003750:	4618      	mov	r0, r3
 8003752:	f009 fbcb 	bl	800ceec <HAL_NVIC_EnableIRQ>
	}

	HAL_TIM_Base_Start_IT(htimx);
 8003756:	6878      	ldr	r0, [r7, #4]
 8003758:	f00f fd80 	bl	801325c <HAL_TIM_Base_Start_IT>
//	HAL_TIM_Base_Start(htimx);

}
 800375c:	bf00      	nop
 800375e:	3718      	adds	r7, #24
 8003760:	46bd      	mov	sp, r7
 8003762:	bd80      	pop	{r7, pc}
 8003764:	20006528 	.word	0x20006528
 8003768:	20006918 	.word	0x20006918

0800376c <UARTInit>:
 * 						  rxstate				,can be ENABLE (enable USART1 receive interrupt) or DISBALE
 * Function Return		: None
 * Function Example		: UARTxInit(&huart1, 115200, ENABLE, 0, 0);
 */
void UARTInit(UART_HandleTypeDef* huartx, uint32_t baudrate, FunctionalState rxstate)
{
 800376c:	b580      	push	{r7, lr}
 800376e:	b086      	sub	sp, #24
 8003770:	af00      	add	r7, sp, #0
 8003772:	60f8      	str	r0, [r7, #12]
 8003774:	60b9      	str	r1, [r7, #8]
 8003776:	4613      	mov	r3, r2
 8003778:	71fb      	strb	r3, [r7, #7]
	IRQn_Type nvic;
//	uint8_t rcv_data;

	if (huartx == &huart1){
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	4a77      	ldr	r2, [pc, #476]	@ (800395c <UARTInit+0x1f0>)
 800377e:	4293      	cmp	r3, r2
 8003780:	d105      	bne.n	800378e <UARTInit+0x22>
		huartx->Instance = USART1;
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	4a76      	ldr	r2, [pc, #472]	@ (8003960 <UARTInit+0x1f4>)
 8003786:	601a      	str	r2, [r3, #0]
		nvic = USART1_IRQn;
 8003788:	2325      	movs	r3, #37	@ 0x25
 800378a:	75fb      	strb	r3, [r7, #23]
 800378c:	e02c      	b.n	80037e8 <UARTInit+0x7c>
//		rcv_data = &uart1_data;
	}else if(huartx == &huart2){
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	4a74      	ldr	r2, [pc, #464]	@ (8003964 <UARTInit+0x1f8>)
 8003792:	4293      	cmp	r3, r2
 8003794:	d105      	bne.n	80037a2 <UARTInit+0x36>
		huartx->Instance = USART2;
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	4a73      	ldr	r2, [pc, #460]	@ (8003968 <UARTInit+0x1fc>)
 800379a:	601a      	str	r2, [r3, #0]
		nvic = USART2_IRQn;
 800379c:	2326      	movs	r3, #38	@ 0x26
 800379e:	75fb      	strb	r3, [r7, #23]
 80037a0:	e022      	b.n	80037e8 <UARTInit+0x7c>
//		rcv_data = &uart2_data;
	}else if(huartx == &huart3){
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	4a71      	ldr	r2, [pc, #452]	@ (800396c <UARTInit+0x200>)
 80037a6:	4293      	cmp	r3, r2
 80037a8:	d105      	bne.n	80037b6 <UARTInit+0x4a>
		huartx->Instance = USART3;
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	4a70      	ldr	r2, [pc, #448]	@ (8003970 <UARTInit+0x204>)
 80037ae:	601a      	str	r2, [r3, #0]
		nvic = USART3_IRQn;
 80037b0:	2327      	movs	r3, #39	@ 0x27
 80037b2:	75fb      	strb	r3, [r7, #23]
 80037b4:	e018      	b.n	80037e8 <UARTInit+0x7c>
//		rcv_data = &uart3_data;
	}else if(huartx == &huart4){
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	4a6e      	ldr	r2, [pc, #440]	@ (8003974 <UARTInit+0x208>)
 80037ba:	4293      	cmp	r3, r2
 80037bc:	d105      	bne.n	80037ca <UARTInit+0x5e>
		huartx->Instance = UART4;
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	4a6d      	ldr	r2, [pc, #436]	@ (8003978 <UARTInit+0x20c>)
 80037c2:	601a      	str	r2, [r3, #0]
		nvic = UART4_IRQn;
 80037c4:	2334      	movs	r3, #52	@ 0x34
 80037c6:	75fb      	strb	r3, [r7, #23]
 80037c8:	e00e      	b.n	80037e8 <UARTInit+0x7c>
//		rcv_data = &uart4_data;
	}else if(huartx == &huart5){
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	4a6b      	ldr	r2, [pc, #428]	@ (800397c <UARTInit+0x210>)
 80037ce:	4293      	cmp	r3, r2
 80037d0:	d105      	bne.n	80037de <UARTInit+0x72>
		huartx->Instance = UART5;
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	4a6a      	ldr	r2, [pc, #424]	@ (8003980 <UARTInit+0x214>)
 80037d6:	601a      	str	r2, [r3, #0]
		nvic = UART5_IRQn;
 80037d8:	2335      	movs	r3, #53	@ 0x35
 80037da:	75fb      	strb	r3, [r7, #23]
 80037dc:	e004      	b.n	80037e8 <UARTInit+0x7c>
//		rcv_data = &uart5_data;
	}else{
		huartx->Instance = USART6;
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	4a68      	ldr	r2, [pc, #416]	@ (8003984 <UARTInit+0x218>)
 80037e2:	601a      	str	r2, [r3, #0]
		nvic = USART6_IRQn;
 80037e4:	2347      	movs	r3, #71	@ 0x47
 80037e6:	75fb      	strb	r3, [r7, #23]
//		rcv_data = &uart6_data;
	}

	huartx->Init.BaudRate = baudrate;
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	68ba      	ldr	r2, [r7, #8]
 80037ec:	605a      	str	r2, [r3, #4]
	huartx->Init.WordLength = UART_WORDLENGTH_8B;
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	2200      	movs	r2, #0
 80037f2:	609a      	str	r2, [r3, #8]
	huartx->Init.StopBits = UART_STOPBITS_1;
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	2200      	movs	r2, #0
 80037f8:	60da      	str	r2, [r3, #12]
	huartx->Init.Parity = UART_PARITY_NONE;
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	2200      	movs	r2, #0
 80037fe:	611a      	str	r2, [r3, #16]
	huartx->Init.Mode = UART_MODE_TX_RX;
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	220c      	movs	r2, #12
 8003804:	615a      	str	r2, [r3, #20]
	huartx->Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	2200      	movs	r2, #0
 800380a:	619a      	str	r2, [r3, #24]
	huartx->Init.OverSampling = UART_OVERSAMPLING_16;
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	2200      	movs	r2, #0
 8003810:	61da      	str	r2, [r3, #28]

	if (HAL_UART_Init(huartx) != HAL_OK)
 8003812:	68f8      	ldr	r0, [r7, #12]
 8003814:	f010 fe38 	bl	8014488 <HAL_UART_Init>
 8003818:	4603      	mov	r3, r0
 800381a:	2b00      	cmp	r3, #0
 800381c:	d001      	beq.n	8003822 <UARTInit+0xb6>
	{
		Error_Handler();
 800381e:	f008 f9f5 	bl	800bc0c <Error_Handler>
	}

	if(rxstate == ENABLE){
 8003822:	79fb      	ldrb	r3, [r7, #7]
 8003824:	2b01      	cmp	r3, #1
 8003826:	f040 8094 	bne.w	8003952 <UARTInit+0x1e6>
		if (huartx == &huart1) {
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	4a4b      	ldr	r2, [pc, #300]	@ (800395c <UARTInit+0x1f0>)
 800382e:	4293      	cmp	r3, r2
 8003830:	d118      	bne.n	8003864 <UARTInit+0xf8>

			HAL_NVIC_SetPriority(nvic, UART1_RX_IRQ_PRIO, 1);
 8003832:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003836:	2201      	movs	r2, #1
 8003838:	2101      	movs	r1, #1
 800383a:	4618      	mov	r0, r3
 800383c:	f009 fb3a 	bl	800ceb4 <HAL_NVIC_SetPriority>
			HAL_NVIC_ClearPendingIRQ(nvic);
 8003840:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003844:	4618      	mov	r0, r3
 8003846:	f009 fb6d 	bl	800cf24 <HAL_NVIC_ClearPendingIRQ>
			HAL_NVIC_EnableIRQ(nvic);
 800384a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800384e:	4618      	mov	r0, r3
 8003850:	f009 fb4c 	bl	800ceec <HAL_NVIC_EnableIRQ>
			__HAL_UART_ENABLE_IT(huartx, UART_IT_RXNE);
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	68da      	ldr	r2, [r3, #12]
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f042 0220 	orr.w	r2, r2, #32
 8003862:	60da      	str	r2, [r3, #12]

		}
		if(huartx == &huart2){
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	4a3f      	ldr	r2, [pc, #252]	@ (8003964 <UARTInit+0x1f8>)
 8003868:	4293      	cmp	r3, r2
 800386a:	d119      	bne.n	80038a0 <UARTInit+0x134>

			HAL_NVIC_SetPriority(nvic, UART2_RX_IRQ_PRIO, 1);
 800386c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003870:	2201      	movs	r2, #1
 8003872:	2101      	movs	r1, #1
 8003874:	4618      	mov	r0, r3
 8003876:	f009 fb1d 	bl	800ceb4 <HAL_NVIC_SetPriority>
			HAL_NVIC_ClearPendingIRQ(nvic);
 800387a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800387e:	4618      	mov	r0, r3
 8003880:	f009 fb50 	bl	800cf24 <HAL_NVIC_ClearPendingIRQ>
			HAL_NVIC_EnableIRQ(nvic);
 8003884:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003888:	4618      	mov	r0, r3
 800388a:	f009 fb2f 	bl	800ceec <HAL_NVIC_EnableIRQ>
			__HAL_UART_ENABLE_IT(huartx, UART_IT_RXNE);
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	68da      	ldr	r2, [r3, #12]
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f042 0220 	orr.w	r2, r2, #32
 800389c:	60da      	str	r2, [r3, #12]
			HAL_NVIC_EnableIRQ(nvic);
			__HAL_UART_ENABLE_IT(huartx, UART_IT_RXNE);

		}
	}
}
 800389e:	e058      	b.n	8003952 <UARTInit+0x1e6>
		}else if(huartx == &huart3){
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	4a32      	ldr	r2, [pc, #200]	@ (800396c <UARTInit+0x200>)
 80038a4:	4293      	cmp	r3, r2
 80038a6:	d119      	bne.n	80038dc <UARTInit+0x170>
			HAL_NVIC_SetPriority(nvic, UART3_RX_IRQ_PRIO, 2);
 80038a8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80038ac:	2202      	movs	r2, #2
 80038ae:	2101      	movs	r1, #1
 80038b0:	4618      	mov	r0, r3
 80038b2:	f009 faff 	bl	800ceb4 <HAL_NVIC_SetPriority>
			HAL_NVIC_ClearPendingIRQ(nvic);
 80038b6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80038ba:	4618      	mov	r0, r3
 80038bc:	f009 fb32 	bl	800cf24 <HAL_NVIC_ClearPendingIRQ>
			HAL_NVIC_EnableIRQ(nvic);
 80038c0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80038c4:	4618      	mov	r0, r3
 80038c6:	f009 fb11 	bl	800ceec <HAL_NVIC_EnableIRQ>
			__HAL_UART_ENABLE_IT(huartx, UART_IT_RXNE);
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	68da      	ldr	r2, [r3, #12]
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f042 0220 	orr.w	r2, r2, #32
 80038d8:	60da      	str	r2, [r3, #12]
}
 80038da:	e03a      	b.n	8003952 <UARTInit+0x1e6>
		}else if(huartx == &huart4){
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	4a25      	ldr	r2, [pc, #148]	@ (8003974 <UARTInit+0x208>)
 80038e0:	4293      	cmp	r3, r2
 80038e2:	d119      	bne.n	8003918 <UARTInit+0x1ac>
			HAL_NVIC_SetPriority(nvic, UART4_RX_IRQ_PRIO, 3);
 80038e4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80038e8:	2203      	movs	r2, #3
 80038ea:	2101      	movs	r1, #1
 80038ec:	4618      	mov	r0, r3
 80038ee:	f009 fae1 	bl	800ceb4 <HAL_NVIC_SetPriority>
			HAL_NVIC_ClearPendingIRQ(nvic);
 80038f2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80038f6:	4618      	mov	r0, r3
 80038f8:	f009 fb14 	bl	800cf24 <HAL_NVIC_ClearPendingIRQ>
			HAL_NVIC_EnableIRQ(nvic);
 80038fc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003900:	4618      	mov	r0, r3
 8003902:	f009 faf3 	bl	800ceec <HAL_NVIC_EnableIRQ>
			__HAL_UART_ENABLE_IT(huartx, UART_IT_RXNE);
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	68da      	ldr	r2, [r3, #12]
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f042 0220 	orr.w	r2, r2, #32
 8003914:	60da      	str	r2, [r3, #12]
}
 8003916:	e01c      	b.n	8003952 <UARTInit+0x1e6>
		}else if(huartx == &huart5){
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	4a18      	ldr	r2, [pc, #96]	@ (800397c <UARTInit+0x210>)
 800391c:	4293      	cmp	r3, r2
 800391e:	d118      	bne.n	8003952 <UARTInit+0x1e6>
			HAL_NVIC_SetPriority(nvic, UART5_RX_IRQ_PRIO, 4);
 8003920:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003924:	2204      	movs	r2, #4
 8003926:	2101      	movs	r1, #1
 8003928:	4618      	mov	r0, r3
 800392a:	f009 fac3 	bl	800ceb4 <HAL_NVIC_SetPriority>
			HAL_NVIC_ClearPendingIRQ(nvic);
 800392e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003932:	4618      	mov	r0, r3
 8003934:	f009 faf6 	bl	800cf24 <HAL_NVIC_ClearPendingIRQ>
			HAL_NVIC_EnableIRQ(nvic);
 8003938:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800393c:	4618      	mov	r0, r3
 800393e:	f009 fad5 	bl	800ceec <HAL_NVIC_EnableIRQ>
			__HAL_UART_ENABLE_IT(huartx, UART_IT_RXNE);
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	68da      	ldr	r2, [r3, #12]
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f042 0220 	orr.w	r2, r2, #32
 8003950:	60da      	str	r2, [r3, #12]
}
 8003952:	bf00      	nop
 8003954:	3718      	adds	r7, #24
 8003956:	46bd      	mov	sp, r7
 8003958:	bd80      	pop	{r7, pc}
 800395a:	bf00      	nop
 800395c:	20006570 	.word	0x20006570
 8003960:	40011000 	.word	0x40011000
 8003964:	20006874 	.word	0x20006874
 8003968:	40004400 	.word	0x40004400
 800396c:	20006300 	.word	0x20006300
 8003970:	40004800 	.word	0x40004800
 8003974:	200067e8 	.word	0x200067e8
 8003978:	40004c00 	.word	0x40004c00
 800397c:	20006484 	.word	0x20006484
 8003980:	40005000 	.word	0x40005000
 8003984:	40011400 	.word	0x40011400

08003988 <CANxInit>:
 * Function Return		: CAN_InitStatus				Constant indicates initialization succeed which will be
  *        											    CAN_InitStatus_Failed or CAN_InitStatus_Success.
 * Function Example		: CAN1_Init(&hcan1,4,CAN_Filter_FIFO0,0,0,13,1,1);
 */
void CANxInit(CAN_HandleTypeDef* hcanx,uint32_t FilterFIFOAssignment,uint32_t CAN_FilterScale,
		uint16_t CAN_FilterId_11bits,uint16_t CAN_FilterMaskId_11bits,uint8_t CAN_FilterNumber, uint8_t rate){
 8003988:	b580      	push	{r7, lr}
 800398a:	b08e      	sub	sp, #56	@ 0x38
 800398c:	af00      	add	r7, sp, #0
 800398e:	60f8      	str	r0, [r7, #12]
 8003990:	60b9      	str	r1, [r7, #8]
 8003992:	607a      	str	r2, [r7, #4]
 8003994:	807b      	strh	r3, [r7, #2]

	CAN_FilterTypeDef sFilterConfig = {0};
 8003996:	f107 0310 	add.w	r3, r7, #16
 800399a:	2228      	movs	r2, #40	@ 0x28
 800399c:	2100      	movs	r1, #0
 800399e:	4618      	mov	r0, r3
 80039a0:	f01a f8cd 	bl	801db3e <memset>

	if(hcanx == &hcan1){
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	4a63      	ldr	r2, [pc, #396]	@ (8003b34 <CANxInit+0x1ac>)
 80039a8:	4293      	cmp	r3, r2
 80039aa:	d106      	bne.n	80039ba <CANxInit+0x32>
		hcanx->Instance = CAN1;
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	4a62      	ldr	r2, [pc, #392]	@ (8003b38 <CANxInit+0x1b0>)
 80039b0:	601a      	str	r2, [r3, #0]
		can1init = 1;
 80039b2:	4b62      	ldr	r3, [pc, #392]	@ (8003b3c <CANxInit+0x1b4>)
 80039b4:	2201      	movs	r2, #1
 80039b6:	701a      	strb	r2, [r3, #0]
 80039b8:	e005      	b.n	80039c6 <CANxInit+0x3e>
	}else{
		hcanx->Instance = CAN2;
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	4a60      	ldr	r2, [pc, #384]	@ (8003b40 <CANxInit+0x1b8>)
 80039be:	601a      	str	r2, [r3, #0]
		can2init = 1;
 80039c0:	4b60      	ldr	r3, [pc, #384]	@ (8003b44 <CANxInit+0x1bc>)
 80039c2:	2201      	movs	r2, #1
 80039c4:	701a      	strb	r2, [r3, #0]
	}


	hcanx->Init.Mode = CAN_MODE_NORMAL;
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	2200      	movs	r2, #0
 80039ca:	609a      	str	r2, [r3, #8]

	hcanx->Init.SyncJumpWidth = CAN_SJW_1TQ;
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	2200      	movs	r2, #0
 80039d0:	60da      	str	r2, [r3, #12]
	if(rate == CAN_1MHz){
 80039d2:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 80039d6:	2b01      	cmp	r3, #1
 80039d8:	d10b      	bne.n	80039f2 <CANxInit+0x6a>
		//sampling point 85.71%
		hcanx->Init.Prescaler = 3;
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	2203      	movs	r2, #3
 80039de:	605a      	str	r2, [r3, #4]
		hcanx->Init.TimeSeg1 = CAN_BS1_11TQ;
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	f44f 2220 	mov.w	r2, #655360	@ 0xa0000
 80039e6:	611a      	str	r2, [r3, #16]
		hcanx->Init.TimeSeg2 = CAN_BS2_2TQ;
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80039ee:	615a      	str	r2, [r3, #20]
 80039f0:	e00e      	b.n	8003a10 <CANxInit+0x88>
	}else if(rate == CAN_500KHz){
 80039f2:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d10a      	bne.n	8003a10 <CANxInit+0x88>
		//sampling point 71.42%
		hcanx->Init.Prescaler = 4;
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	2204      	movs	r2, #4
 80039fe:	605a      	str	r2, [r3, #4]
		hcanx->Init.TimeSeg1 = CAN_BS1_14TQ;
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	f44f 2250 	mov.w	r2, #851968	@ 0xd0000
 8003a06:	611a      	str	r2, [r3, #16]
		hcanx->Init.TimeSeg2 = CAN_BS2_6TQ;
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	f44f 02a0 	mov.w	r2, #5242880	@ 0x500000
 8003a0e:	615a      	str	r2, [r3, #20]
	}
	hcanx->Init.TimeTriggeredMode = DISABLE;
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	2200      	movs	r2, #0
 8003a14:	761a      	strb	r2, [r3, #24]
	hcanx->Init.AutoBusOff = ENABLE;
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	2201      	movs	r2, #1
 8003a1a:	765a      	strb	r2, [r3, #25]
	hcanx->Init.AutoWakeUp = DISABLE;
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	2200      	movs	r2, #0
 8003a20:	769a      	strb	r2, [r3, #26]
	hcanx->Init.AutoRetransmission = DISABLE;
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	2200      	movs	r2, #0
 8003a26:	76da      	strb	r2, [r3, #27]
	hcanx->Init.ReceiveFifoLocked = DISABLE;
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	2200      	movs	r2, #0
 8003a2c:	771a      	strb	r2, [r3, #28]
	hcanx->Init.TransmitFifoPriority = DISABLE;
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	2200      	movs	r2, #0
 8003a32:	775a      	strb	r2, [r3, #29]
	if (HAL_CAN_Init(hcanx) != HAL_OK)
 8003a34:	68f8      	ldr	r0, [r7, #12]
 8003a36:	f008 fab5 	bl	800bfa4 <HAL_CAN_Init>
 8003a3a:	4603      	mov	r3, r0
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d001      	beq.n	8003a44 <CANxInit+0xbc>
	{
		Error_Handler();
 8003a40:	f008 f8e4 	bl	800bc0c <Error_Handler>
	}

	sFilterConfig.SlaveStartFilterBank = 14;
 8003a44:	230e      	movs	r3, #14
 8003a46:	637b      	str	r3, [r7, #52]	@ 0x34
	sFilterConfig.FilterActivation = CAN_FILTER_ENABLE;
 8003a48:	2301      	movs	r3, #1
 8003a4a:	633b      	str	r3, [r7, #48]	@ 0x30
	sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8003a4c:	2300      	movs	r3, #0
 8003a4e:	62bb      	str	r3, [r7, #40]	@ 0x28
	sFilterConfig.FilterFIFOAssignment=FilterFIFOAssignment; //set fifo assignment
 8003a50:	68bb      	ldr	r3, [r7, #8]
 8003a52:	623b      	str	r3, [r7, #32]
	sFilterConfig.FilterBank = CAN_FilterNumber;
 8003a54:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 8003a58:	627b      	str	r3, [r7, #36]	@ 0x24
	sFilterConfig.FilterScale = CAN_FilterScale; //set filter scale
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	if(CAN_FilterScale == CAN_FILTERSCALE_16BIT){
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d10e      	bne.n	8003a82 <CANxInit+0xfa>
		sFilterConfig.FilterIdHigh = CAN_FilterId_11bits << 5;
 8003a64:	887b      	ldrh	r3, [r7, #2]
 8003a66:	015b      	lsls	r3, r3, #5
 8003a68:	613b      	str	r3, [r7, #16]
		sFilterConfig.FilterIdLow = CAN_FilterId_11bits << 5;
 8003a6a:	887b      	ldrh	r3, [r7, #2]
 8003a6c:	015b      	lsls	r3, r3, #5
 8003a6e:	617b      	str	r3, [r7, #20]
		sFilterConfig.FilterMaskIdHigh = CAN_FilterMaskId_11bits << 5;
 8003a70:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8003a74:	015b      	lsls	r3, r3, #5
 8003a76:	61bb      	str	r3, [r7, #24]
		sFilterConfig.FilterMaskIdLow = CAN_FilterMaskId_11bits << 5;
 8003a78:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8003a7c:	015b      	lsls	r3, r3, #5
 8003a7e:	61fb      	str	r3, [r7, #28]
 8003a80:	e00d      	b.n	8003a9e <CANxInit+0x116>
	}else if(CAN_FilterScale == CAN_FILTERSCALE_32BIT){
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	2b01      	cmp	r3, #1
 8003a86:	d10a      	bne.n	8003a9e <CANxInit+0x116>
		sFilterConfig.FilterIdHigh = CAN_FilterId_11bits << 5;
 8003a88:	887b      	ldrh	r3, [r7, #2]
 8003a8a:	015b      	lsls	r3, r3, #5
 8003a8c:	613b      	str	r3, [r7, #16]
		sFilterConfig.FilterIdLow = 0;
 8003a8e:	2300      	movs	r3, #0
 8003a90:	617b      	str	r3, [r7, #20]
		sFilterConfig.FilterMaskIdHigh = CAN_FilterMaskId_11bits << 5;
 8003a92:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8003a96:	015b      	lsls	r3, r3, #5
 8003a98:	61bb      	str	r3, [r7, #24]
		sFilterConfig.FilterMaskIdLow = 0;
 8003a9a:	2300      	movs	r3, #0
 8003a9c:	61fb      	str	r3, [r7, #28]
		 * 	sFilterConfig.FilterMaskIdHigh = ((CAN_FilterMaskId_11bits << 3) >> 16) & 0xFFFF;
		 * 	sFilterConfig.FilterMaskIdLow = ((CAN_FilterMaskId_11bits << 3) & 0xFFFF;
		 */
	}

	HAL_CAN_ConfigFilter(hcanx, &sFilterConfig);
 8003a9e:	f107 0310 	add.w	r3, r7, #16
 8003aa2:	4619      	mov	r1, r3
 8003aa4:	68f8      	ldr	r0, [r7, #12]
 8003aa6:	f008 fb79 	bl	800c19c <HAL_CAN_ConfigFilter>

	if(hcanx == &hcan1){
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	4a21      	ldr	r2, [pc, #132]	@ (8003b34 <CANxInit+0x1ac>)
 8003aae:	4293      	cmp	r3, r2
 8003ab0:	d11c      	bne.n	8003aec <CANxInit+0x164>

		if(FilterFIFOAssignment ==  CAN_FILTER_FIFO0){
 8003ab2:	68bb      	ldr	r3, [r7, #8]
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d10c      	bne.n	8003ad2 <CANxInit+0x14a>
			/* CAN1_RX0_IRQn interrupt configuration */
			HAL_NVIC_SetPriority(CAN1_RX0_IRQn, CAN1_FIFO1_IRQ_PRIO, 0);
 8003ab8:	2200      	movs	r2, #0
 8003aba:	210e      	movs	r1, #14
 8003abc:	2014      	movs	r0, #20
 8003abe:	f009 f9f9 	bl	800ceb4 <HAL_NVIC_SetPriority>
			HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8003ac2:	2014      	movs	r0, #20
 8003ac4:	f009 fa12 	bl	800ceec <HAL_NVIC_EnableIRQ>
			HAL_CAN_ActivateNotification(hcanx, CAN_IT_RX_FIFO0_MSG_PENDING);
 8003ac8:	2102      	movs	r1, #2
 8003aca:	68f8      	ldr	r0, [r7, #12]
 8003acc:	f008 feac 	bl	800c828 <HAL_CAN_ActivateNotification>
 8003ad0:	e028      	b.n	8003b24 <CANxInit+0x19c>

		}else{
			/* CAN1_RX1_IRQn interrupt configuration */
			HAL_NVIC_SetPriority(CAN1_RX1_IRQn, CAN1_FIFO1_IRQ_PRIO, 0);
 8003ad2:	2200      	movs	r2, #0
 8003ad4:	210e      	movs	r1, #14
 8003ad6:	2015      	movs	r0, #21
 8003ad8:	f009 f9ec 	bl	800ceb4 <HAL_NVIC_SetPriority>
			HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8003adc:	2015      	movs	r0, #21
 8003ade:	f009 fa05 	bl	800ceec <HAL_NVIC_EnableIRQ>
			HAL_CAN_ActivateNotification(hcanx, CAN_IT_RX_FIFO1_MSG_PENDING);
 8003ae2:	2110      	movs	r1, #16
 8003ae4:	68f8      	ldr	r0, [r7, #12]
 8003ae6:	f008 fe9f 	bl	800c828 <HAL_CAN_ActivateNotification>
 8003aea:	e01b      	b.n	8003b24 <CANxInit+0x19c>
		}
	}else{

		if(FilterFIFOAssignment ==  CAN_FILTER_FIFO0){
 8003aec:	68bb      	ldr	r3, [r7, #8]
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d10c      	bne.n	8003b0c <CANxInit+0x184>
			/* CAN2_RX0_IRQn interrupt configuration */
			HAL_NVIC_SetPriority(CAN2_RX0_IRQn, CAN2_FIFO0_IRQ_PRIO, 0);
 8003af2:	2200      	movs	r2, #0
 8003af4:	210e      	movs	r1, #14
 8003af6:	2040      	movs	r0, #64	@ 0x40
 8003af8:	f009 f9dc 	bl	800ceb4 <HAL_NVIC_SetPriority>
			HAL_NVIC_EnableIRQ(CAN2_RX0_IRQn);
 8003afc:	2040      	movs	r0, #64	@ 0x40
 8003afe:	f009 f9f5 	bl	800ceec <HAL_NVIC_EnableIRQ>
			HAL_CAN_ActivateNotification(hcanx, CAN_IT_RX_FIFO0_MSG_PENDING);
 8003b02:	2102      	movs	r1, #2
 8003b04:	68f8      	ldr	r0, [r7, #12]
 8003b06:	f008 fe8f 	bl	800c828 <HAL_CAN_ActivateNotification>
 8003b0a:	e00b      	b.n	8003b24 <CANxInit+0x19c>
		}else{
			/* CAN2_RX1_IRQn interrupt configuration */
			HAL_NVIC_SetPriority(CAN2_RX1_IRQn, CAN2_FIFO1_IRQ_PRIO, 0);
 8003b0c:	2200      	movs	r2, #0
 8003b0e:	210d      	movs	r1, #13
 8003b10:	2041      	movs	r0, #65	@ 0x41
 8003b12:	f009 f9cf 	bl	800ceb4 <HAL_NVIC_SetPriority>
			HAL_NVIC_EnableIRQ(CAN2_RX1_IRQn);
 8003b16:	2041      	movs	r0, #65	@ 0x41
 8003b18:	f009 f9e8 	bl	800ceec <HAL_NVIC_EnableIRQ>
			HAL_CAN_ActivateNotification(hcanx, CAN_IT_RX_FIFO1_MSG_PENDING);
 8003b1c:	2110      	movs	r1, #16
 8003b1e:	68f8      	ldr	r0, [r7, #12]
 8003b20:	f008 fe82 	bl	800c828 <HAL_CAN_ActivateNotification>
		}
	}

	HAL_CAN_Start(hcanx);
 8003b24:	68f8      	ldr	r0, [r7, #12]
 8003b26:	f008 fc19 	bl	800c35c <HAL_CAN_Start>

}
 8003b2a:	bf00      	nop
 8003b2c:	3738      	adds	r7, #56	@ 0x38
 8003b2e:	46bd      	mov	sp, r7
 8003b30:	bd80      	pop	{r7, pc}
 8003b32:	bf00      	nop
 8003b34:	20006d44 	.word	0x20006d44
 8003b38:	40006400 	.word	0x40006400
 8003b3c:	200002e8 	.word	0x200002e8
 8003b40:	40006800 	.word	0x40006800
 8003b44:	200002e9 	.word	0x200002e9

08003b48 <CAN_TxMsg>:
 * Function Return		: canmailbox		The number of the mailbox that is used for transmission or
  *         								CAN_TxStatus_NoMailBox if there is no empty mailbox.
 * Function Example		: CAN_TxMsg(&hcan1,1,&data,1);
 */
uint32_t CAN_TxMsg(CAN_HandleTypeDef* hcanx,uint32_t StdId_11bits,uint8_t *Msg,uint8_t len)
{
 8003b48:	b580      	push	{r7, lr}
 8003b4a:	b090      	sub	sp, #64	@ 0x40
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	60f8      	str	r0, [r7, #12]
 8003b50:	60b9      	str	r1, [r7, #8]
 8003b52:	607a      	str	r2, [r7, #4]
 8003b54:	70fb      	strb	r3, [r7, #3]
	if(!((can1init && hcanx == &hcan1) || (can2init && hcanx == &hcan2)))
 8003b56:	4b34      	ldr	r3, [pc, #208]	@ (8003c28 <CAN_TxMsg+0xe0>)
 8003b58:	781b      	ldrb	r3, [r3, #0]
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d003      	beq.n	8003b66 <CAN_TxMsg+0x1e>
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	4a32      	ldr	r2, [pc, #200]	@ (8003c2c <CAN_TxMsg+0xe4>)
 8003b62:	4293      	cmp	r3, r2
 8003b64:	d009      	beq.n	8003b7a <CAN_TxMsg+0x32>
 8003b66:	4b32      	ldr	r3, [pc, #200]	@ (8003c30 <CAN_TxMsg+0xe8>)
 8003b68:	781b      	ldrb	r3, [r3, #0]
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d003      	beq.n	8003b76 <CAN_TxMsg+0x2e>
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	4a30      	ldr	r2, [pc, #192]	@ (8003c34 <CAN_TxMsg+0xec>)
 8003b72:	4293      	cmp	r3, r2
 8003b74:	d001      	beq.n	8003b7a <CAN_TxMsg+0x32>
		return 0;
 8003b76:	2300      	movs	r3, #0
 8003b78:	e051      	b.n	8003c1e <CAN_TxMsg+0xd6>

	//error
	while(HAL_CAN_GetTxMailboxesFreeLevel(hcanx) == 0);
 8003b7a:	bf00      	nop
 8003b7c:	68f8      	ldr	r0, [r7, #12]
 8003b7e:	f008 fd0c 	bl	800c59a <HAL_CAN_GetTxMailboxesFreeLevel>
 8003b82:	4603      	mov	r3, r0
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d0f9      	beq.n	8003b7c <CAN_TxMsg+0x34>
	CAN_TxHeaderTypeDef TxMessage;
	uint32_t canMailbox;
	uint8_t* buf = Msg;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
	uint16_t i=0,datalen=len;
 8003b8c:	2300      	movs	r3, #0
 8003b8e:	877b      	strh	r3, [r7, #58]	@ 0x3a
 8003b90:	78fb      	ldrb	r3, [r7, #3]
 8003b92:	873b      	strh	r3, [r7, #56]	@ 0x38
	uint8_t Txmsg[8];

	TxMessage.StdId=StdId_11bits;					 // standard identifier=0
 8003b94:	68bb      	ldr	r3, [r7, #8]
 8003b96:	623b      	str	r3, [r7, #32]
	TxMessage.ExtId=0;					 // extended identifier=StdId
 8003b98:	2300      	movs	r3, #0
 8003b9a:	627b      	str	r3, [r7, #36]	@ 0x24
	TxMessage.IDE=CAN_Id_Standard;			 // type of identifier for the message is Standard
 8003b9c:	2300      	movs	r3, #0
 8003b9e:	62bb      	str	r3, [r7, #40]	@ 0x28
	TxMessage.RTR=CAN_RTR_Data;
 8003ba0:	2300      	movs	r3, #0
 8003ba2:	62fb      	str	r3, [r7, #44]	@ 0x2c
	TxMessage.TransmitGlobalTime = DISABLE;  // the type of frame for the message that will be transmitted
 8003ba4:	2300      	movs	r3, #0
 8003ba6:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34

	while(datalen--)
 8003baa:	e01f      	b.n	8003bec <CAN_TxMsg+0xa4>
	{
		Txmsg[i++]= *(uint8_t*)buf++;
 8003bac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003bae:	1c5a      	adds	r2, r3, #1
 8003bb0:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8003bb2:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8003bb4:	1c51      	adds	r1, r2, #1
 8003bb6:	8779      	strh	r1, [r7, #58]	@ 0x3a
 8003bb8:	4611      	mov	r1, r2
 8003bba:	781a      	ldrb	r2, [r3, #0]
 8003bbc:	f101 0340 	add.w	r3, r1, #64	@ 0x40
 8003bc0:	443b      	add	r3, r7
 8003bc2:	f803 2c2c 	strb.w	r2, [r3, #-44]
		if(i == 8){
 8003bc6:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8003bc8:	2b08      	cmp	r3, #8
 8003bca:	d10f      	bne.n	8003bec <CAN_TxMsg+0xa4>
			TxMessage.DLC=8;
 8003bcc:	2308      	movs	r3, #8
 8003bce:	633b      	str	r3, [r7, #48]	@ 0x30
			if (HAL_CAN_AddTxMessage(hcanx, &TxMessage, Txmsg, &canMailbox) != HAL_OK) {
 8003bd0:	f107 031c 	add.w	r3, r7, #28
 8003bd4:	f107 0214 	add.w	r2, r7, #20
 8003bd8:	f107 0120 	add.w	r1, r7, #32
 8003bdc:	68f8      	ldr	r0, [r7, #12]
 8003bde:	f008 fc01 	bl	800c3e4 <HAL_CAN_AddTxMessage>
 8003be2:	4603      	mov	r3, r0
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d001      	beq.n	8003bec <CAN_TxMsg+0xa4>
				Error_Handler();
 8003be8:	f008 f810 	bl	800bc0c <Error_Handler>
	while(datalen--)
 8003bec:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8003bee:	1e5a      	subs	r2, r3, #1
 8003bf0:	873a      	strh	r2, [r7, #56]	@ 0x38
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d1da      	bne.n	8003bac <CAN_TxMsg+0x64>
			}
		}
	}
	if(i>0){
 8003bf6:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d00f      	beq.n	8003c1c <CAN_TxMsg+0xd4>
		TxMessage.DLC = i;
 8003bfc:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8003bfe:	633b      	str	r3, [r7, #48]	@ 0x30
		if (HAL_CAN_AddTxMessage(hcanx, &TxMessage, Txmsg, &canMailbox) != HAL_OK) {
 8003c00:	f107 031c 	add.w	r3, r7, #28
 8003c04:	f107 0214 	add.w	r2, r7, #20
 8003c08:	f107 0120 	add.w	r1, r7, #32
 8003c0c:	68f8      	ldr	r0, [r7, #12]
 8003c0e:	f008 fbe9 	bl	800c3e4 <HAL_CAN_AddTxMessage>
 8003c12:	4603      	mov	r3, r0
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d001      	beq.n	8003c1c <CAN_TxMsg+0xd4>
			Error_Handler();
 8003c18:	f007 fff8 	bl	800bc0c <Error_Handler>
		}

	}

	return(canMailbox);
 8003c1c:	69fb      	ldr	r3, [r7, #28]
}
 8003c1e:	4618      	mov	r0, r3
 8003c20:	3740      	adds	r7, #64	@ 0x40
 8003c22:	46bd      	mov	sp, r7
 8003c24:	bd80      	pop	{r7, pc}
 8003c26:	bf00      	nop
 8003c28:	200002e8 	.word	0x200002e8
 8003c2c:	20006d44 	.word	0x20006d44
 8003c30:	200002e9 	.word	0x200002e9
 8003c34:	20006d1c 	.word	0x20006d1c

08003c38 <I2CxInit>:
 * 						  InterruptEnable				interrupt enable for I2C can be ENABLE or DISABLE
 * Function Return		: NONE
 * Function Example		: I2CxInit (&hi2c1,main_board_1, CLOCK_SPEED_400KHz,ENABLE);
 */
void I2CxInit(I2C_HandleTypeDef* hi2cx,uint8_t OwnAddress,uint32_t ClockSpeed,int InterruptEnable)
{
 8003c38:	b580      	push	{r7, lr}
 8003c3a:	b086      	sub	sp, #24
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	60f8      	str	r0, [r7, #12]
 8003c40:	607a      	str	r2, [r7, #4]
 8003c42:	603b      	str	r3, [r7, #0]
 8003c44:	460b      	mov	r3, r1
 8003c46:	72fb      	strb	r3, [r7, #11]

	IRQn_Type nvicER = 0;
 8003c48:	2300      	movs	r3, #0
 8003c4a:	75fb      	strb	r3, [r7, #23]
	IRQn_Type nvicEV = 0;
 8003c4c:	2300      	movs	r3, #0
 8003c4e:	75bb      	strb	r3, [r7, #22]

	if(hi2cx == &hi2c1){
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	4a4c      	ldr	r2, [pc, #304]	@ (8003d84 <I2CxInit+0x14c>)
 8003c54:	4293      	cmp	r3, r2
 8003c56:	d107      	bne.n	8003c68 <I2CxInit+0x30>
		hi2cx->Instance = I2C1;
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	4a4b      	ldr	r2, [pc, #300]	@ (8003d88 <I2CxInit+0x150>)
 8003c5c:	601a      	str	r2, [r3, #0]
		nvicER = I2C1_ER_IRQn;
 8003c5e:	2320      	movs	r3, #32
 8003c60:	75fb      	strb	r3, [r7, #23]
		nvicEV = I2C1_EV_IRQn;
 8003c62:	231f      	movs	r3, #31
 8003c64:	75bb      	strb	r3, [r7, #22]
 8003c66:	e012      	b.n	8003c8e <I2CxInit+0x56>
	}else if(hi2cx == &hi2c2){
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	4a48      	ldr	r2, [pc, #288]	@ (8003d8c <I2CxInit+0x154>)
 8003c6c:	4293      	cmp	r3, r2
 8003c6e:	d107      	bne.n	8003c80 <I2CxInit+0x48>
		hi2cx->Instance = I2C2;
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	4a47      	ldr	r2, [pc, #284]	@ (8003d90 <I2CxInit+0x158>)
 8003c74:	601a      	str	r2, [r3, #0]
		nvicER = I2C2_ER_IRQn;
 8003c76:	2322      	movs	r3, #34	@ 0x22
 8003c78:	75fb      	strb	r3, [r7, #23]
		nvicEV = I2C2_EV_IRQn;
 8003c7a:	2321      	movs	r3, #33	@ 0x21
 8003c7c:	75bb      	strb	r3, [r7, #22]
 8003c7e:	e006      	b.n	8003c8e <I2CxInit+0x56>
	}else{
		hi2cx->Instance = I2C3;
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	4a44      	ldr	r2, [pc, #272]	@ (8003d94 <I2CxInit+0x15c>)
 8003c84:	601a      	str	r2, [r3, #0]
		nvicER = I2C3_ER_IRQn;
 8003c86:	2349      	movs	r3, #73	@ 0x49
 8003c88:	75fb      	strb	r3, [r7, #23]
		nvicEV = I2C3_EV_IRQn;
 8003c8a:	2348      	movs	r3, #72	@ 0x48
 8003c8c:	75bb      	strb	r3, [r7, #22]
	}

	hi2cx->Init.ClockSpeed = ClockSpeed;
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	687a      	ldr	r2, [r7, #4]
 8003c92:	605a      	str	r2, [r3, #4]
	hi2cx->Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	2200      	movs	r2, #0
 8003c98:	609a      	str	r2, [r3, #8]
	hi2cx->Init.OwnAddress1 = OwnAddress<<1;
 8003c9a:	7afb      	ldrb	r3, [r7, #11]
 8003c9c:	005a      	lsls	r2, r3, #1
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	60da      	str	r2, [r3, #12]
	hi2cx->Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8003ca8:	611a      	str	r2, [r3, #16]
	hi2cx->Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	2200      	movs	r2, #0
 8003cae:	615a      	str	r2, [r3, #20]
	hi2cx->Init.OwnAddress2 = 0;
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	2200      	movs	r2, #0
 8003cb4:	619a      	str	r2, [r3, #24]
	hi2cx->Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	2200      	movs	r2, #0
 8003cba:	61da      	str	r2, [r3, #28]
	hi2cx->Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	2200      	movs	r2, #0
 8003cc0:	621a      	str	r2, [r3, #32]

	if(InterruptEnable){
 8003cc2:	683b      	ldr	r3, [r7, #0]
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d051      	beq.n	8003d6c <I2CxInit+0x134>
		if(hi2cx == &hi2c1){
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	4a2e      	ldr	r2, [pc, #184]	@ (8003d84 <I2CxInit+0x14c>)
 8003ccc:	4293      	cmp	r3, r2
 8003cce:	d118      	bne.n	8003d02 <I2CxInit+0xca>
			HAL_NVIC_SetPriority(nvicER, I2C1_ER_IRQ_PRIO, 0);
 8003cd0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003cd4:	2200      	movs	r2, #0
 8003cd6:	2100      	movs	r1, #0
 8003cd8:	4618      	mov	r0, r3
 8003cda:	f009 f8eb 	bl	800ceb4 <HAL_NVIC_SetPriority>
			HAL_NVIC_EnableIRQ(nvicER);
 8003cde:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003ce2:	4618      	mov	r0, r3
 8003ce4:	f009 f902 	bl	800ceec <HAL_NVIC_EnableIRQ>
			HAL_NVIC_SetPriority(nvicEV, I2C1_EV_IRQ_PRIO, 0);
 8003ce8:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8003cec:	2200      	movs	r2, #0
 8003cee:	2109      	movs	r1, #9
 8003cf0:	4618      	mov	r0, r3
 8003cf2:	f009 f8df 	bl	800ceb4 <HAL_NVIC_SetPriority>
			HAL_NVIC_EnableIRQ(nvicEV);
 8003cf6:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8003cfa:	4618      	mov	r0, r3
 8003cfc:	f009 f8f6 	bl	800ceec <HAL_NVIC_EnableIRQ>
 8003d00:	e034      	b.n	8003d6c <I2CxInit+0x134>
		}else if(hi2cx == &hi2c2){
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	4a21      	ldr	r2, [pc, #132]	@ (8003d8c <I2CxInit+0x154>)
 8003d06:	4293      	cmp	r3, r2
 8003d08:	d118      	bne.n	8003d3c <I2CxInit+0x104>
			HAL_NVIC_SetPriority(nvicER, I2C2_ER_IRQ_PRIO, 1);
 8003d0a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003d0e:	2201      	movs	r2, #1
 8003d10:	2100      	movs	r1, #0
 8003d12:	4618      	mov	r0, r3
 8003d14:	f009 f8ce 	bl	800ceb4 <HAL_NVIC_SetPriority>
			HAL_NVIC_EnableIRQ(nvicER);
 8003d18:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003d1c:	4618      	mov	r0, r3
 8003d1e:	f009 f8e5 	bl	800ceec <HAL_NVIC_EnableIRQ>
			HAL_NVIC_SetPriority(nvicEV, I2C2_EV_IRQ_PRIO, 1);
 8003d22:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8003d26:	2201      	movs	r2, #1
 8003d28:	2109      	movs	r1, #9
 8003d2a:	4618      	mov	r0, r3
 8003d2c:	f009 f8c2 	bl	800ceb4 <HAL_NVIC_SetPriority>
			HAL_NVIC_EnableIRQ(nvicEV);
 8003d30:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8003d34:	4618      	mov	r0, r3
 8003d36:	f009 f8d9 	bl	800ceec <HAL_NVIC_EnableIRQ>
 8003d3a:	e017      	b.n	8003d6c <I2CxInit+0x134>
		}else{
			HAL_NVIC_SetPriority(nvicER, I2C3_ER_IRQ_PRIO, 2);
 8003d3c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003d40:	2202      	movs	r2, #2
 8003d42:	2100      	movs	r1, #0
 8003d44:	4618      	mov	r0, r3
 8003d46:	f009 f8b5 	bl	800ceb4 <HAL_NVIC_SetPriority>
			HAL_NVIC_EnableIRQ(nvicER);
 8003d4a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003d4e:	4618      	mov	r0, r3
 8003d50:	f009 f8cc 	bl	800ceec <HAL_NVIC_EnableIRQ>
			HAL_NVIC_SetPriority(nvicEV, I2C3_EV_IRQ_PRIO, 2);
 8003d54:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8003d58:	2202      	movs	r2, #2
 8003d5a:	2109      	movs	r1, #9
 8003d5c:	4618      	mov	r0, r3
 8003d5e:	f009 f8a9 	bl	800ceb4 <HAL_NVIC_SetPriority>
			HAL_NVIC_EnableIRQ(nvicEV);
 8003d62:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8003d66:	4618      	mov	r0, r3
 8003d68:	f009 f8c0 	bl	800ceec <HAL_NVIC_EnableIRQ>
		}
	}


	if (HAL_I2C_Init(hi2cx) != HAL_OK)
 8003d6c:	68f8      	ldr	r0, [r7, #12]
 8003d6e:	f00a f82b 	bl	800ddc8 <HAL_I2C_Init>
 8003d72:	4603      	mov	r3, r0
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d001      	beq.n	8003d7c <I2CxInit+0x144>
	{
		Error_Handler();
 8003d78:	f007 ff48 	bl	800bc0c <Error_Handler>
	}

}
 8003d7c:	bf00      	nop
 8003d7e:	3718      	adds	r7, #24
 8003d80:	46bd      	mov	sp, r7
 8003d82:	bd80      	pop	{r7, pc}
 8003d84:	200070cc 	.word	0x200070cc
 8003d88:	40005400 	.word	0x40005400
 8003d8c:	20007120 	.word	0x20007120
 8003d90:	40005800 	.word	0x40005800
 8003d94:	40005c00 	.word	0x40005c00

08003d98 <I2CX_DMA_RX_Init>:
 * 						  ClockSpeed					Speed of transmission can be CLOCK_SPEED_100KHz or CLOCK_SPEED_400KHz
 * Function Return		: NONE
 * Function Example		: I2CX_DMA_RX_Init(&hi2c1, &hi2c1_rx_dma, main_board_1, CLOCK_SPEED_400KHz);
 *
 */
void I2CX_DMA_RX_Init(I2C_HandleTypeDef *hi2cx,DMA_HandleTypeDef* hdma_i2cx,uint8_t OwnAddress,uint32_t ClockSpeed){
 8003d98:	b580      	push	{r7, lr}
 8003d9a:	b088      	sub	sp, #32
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	60f8      	str	r0, [r7, #12]
 8003da0:	60b9      	str	r1, [r7, #8]
 8003da2:	603b      	str	r3, [r7, #0]
 8003da4:	4613      	mov	r3, r2
 8003da6:	71fb      	strb	r3, [r7, #7]

	IRQn_Type nvic,nvicER,nvicEV;
	uint32_t DMA_CHANNEL;
	__HAL_RCC_DMA1_CLK_ENABLE();
 8003da8:	2300      	movs	r3, #0
 8003daa:	617b      	str	r3, [r7, #20]
 8003dac:	4b9d      	ldr	r3, [pc, #628]	@ (8004024 <I2CX_DMA_RX_Init+0x28c>)
 8003dae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003db0:	4a9c      	ldr	r2, [pc, #624]	@ (8004024 <I2CX_DMA_RX_Init+0x28c>)
 8003db2:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8003db6:	6313      	str	r3, [r2, #48]	@ 0x30
 8003db8:	4b9a      	ldr	r3, [pc, #616]	@ (8004024 <I2CX_DMA_RX_Init+0x28c>)
 8003dba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003dbc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003dc0:	617b      	str	r3, [r7, #20]
 8003dc2:	697b      	ldr	r3, [r7, #20]
	if(hi2cx == &hi2c1){
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	4a98      	ldr	r2, [pc, #608]	@ (8004028 <I2CX_DMA_RX_Init+0x290>)
 8003dc8:	4293      	cmp	r3, r2
 8003dca:	d11d      	bne.n	8003e08 <I2CX_DMA_RX_Init+0x70>

		hi2cx->Instance = I2C1;
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	4a97      	ldr	r2, [pc, #604]	@ (800402c <I2CX_DMA_RX_Init+0x294>)
 8003dd0:	601a      	str	r2, [r3, #0]

		hdma_i2cx->Instance = DMA1_Stream0;
 8003dd2:	68bb      	ldr	r3, [r7, #8]
 8003dd4:	4a96      	ldr	r2, [pc, #600]	@ (8004030 <I2CX_DMA_RX_Init+0x298>)
 8003dd6:	601a      	str	r2, [r3, #0]
		DMA_CHANNEL= DMA_CHANNEL_1;
 8003dd8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003ddc:	61bb      	str	r3, [r7, #24]
		nvic = DMA1_Stream0_IRQn;
 8003dde:	230b      	movs	r3, #11
 8003de0:	77fb      	strb	r3, [r7, #31]

		nvicER = I2C1_ER_IRQn;
 8003de2:	2320      	movs	r3, #32
 8003de4:	77bb      	strb	r3, [r7, #30]
		nvicEV = I2C1_EV_IRQn;
 8003de6:	231f      	movs	r3, #31
 8003de8:	777b      	strb	r3, [r7, #29]
		__HAL_RCC_DMA1_CLK_ENABLE();
 8003dea:	2300      	movs	r3, #0
 8003dec:	613b      	str	r3, [r7, #16]
 8003dee:	4b8d      	ldr	r3, [pc, #564]	@ (8004024 <I2CX_DMA_RX_Init+0x28c>)
 8003df0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003df2:	4a8c      	ldr	r2, [pc, #560]	@ (8004024 <I2CX_DMA_RX_Init+0x28c>)
 8003df4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8003df8:	6313      	str	r3, [r2, #48]	@ 0x30
 8003dfa:	4b8a      	ldr	r3, [pc, #552]	@ (8004024 <I2CX_DMA_RX_Init+0x28c>)
 8003dfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003dfe:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003e02:	613b      	str	r3, [r7, #16]
 8003e04:	693b      	ldr	r3, [r7, #16]
 8003e06:	e022      	b.n	8003e4e <I2CX_DMA_RX_Init+0xb6>
	}else if(hi2cx == &hi2c2){
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	4a8a      	ldr	r2, [pc, #552]	@ (8004034 <I2CX_DMA_RX_Init+0x29c>)
 8003e0c:	4293      	cmp	r3, r2
 8003e0e:	d10f      	bne.n	8003e30 <I2CX_DMA_RX_Init+0x98>

		hi2cx->Instance = I2C2;
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	4a89      	ldr	r2, [pc, #548]	@ (8004038 <I2CX_DMA_RX_Init+0x2a0>)
 8003e14:	601a      	str	r2, [r3, #0]

		hdma_i2cx->Instance = DMA1_Stream3;
 8003e16:	68bb      	ldr	r3, [r7, #8]
 8003e18:	4a88      	ldr	r2, [pc, #544]	@ (800403c <I2CX_DMA_RX_Init+0x2a4>)
 8003e1a:	601a      	str	r2, [r3, #0]
		DMA_CHANNEL= DMA_CHANNEL_7;
 8003e1c:	f04f 6360 	mov.w	r3, #234881024	@ 0xe000000
 8003e20:	61bb      	str	r3, [r7, #24]
		nvic = DMA1_Stream3_IRQn;
 8003e22:	230e      	movs	r3, #14
 8003e24:	77fb      	strb	r3, [r7, #31]
		nvicER = I2C2_ER_IRQn;
 8003e26:	2322      	movs	r3, #34	@ 0x22
 8003e28:	77bb      	strb	r3, [r7, #30]
		nvicEV = I2C2_EV_IRQn;
 8003e2a:	2321      	movs	r3, #33	@ 0x21
 8003e2c:	777b      	strb	r3, [r7, #29]
 8003e2e:	e00e      	b.n	8003e4e <I2CX_DMA_RX_Init+0xb6>

	}else{
		hi2cx->Instance = I2C3;
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	4a83      	ldr	r2, [pc, #524]	@ (8004040 <I2CX_DMA_RX_Init+0x2a8>)
 8003e34:	601a      	str	r2, [r3, #0]

		hdma_i2cx->Instance = DMA1_Stream2;
 8003e36:	68bb      	ldr	r3, [r7, #8]
 8003e38:	4a82      	ldr	r2, [pc, #520]	@ (8004044 <I2CX_DMA_RX_Init+0x2ac>)
 8003e3a:	601a      	str	r2, [r3, #0]
		DMA_CHANNEL= DMA_CHANNEL_3;
 8003e3c:	f04f 63c0 	mov.w	r3, #100663296	@ 0x6000000
 8003e40:	61bb      	str	r3, [r7, #24]
		nvic = DMA1_Stream2_IRQn;
 8003e42:	230d      	movs	r3, #13
 8003e44:	77fb      	strb	r3, [r7, #31]
		nvicER = I2C3_ER_IRQn;
 8003e46:	2349      	movs	r3, #73	@ 0x49
 8003e48:	77bb      	strb	r3, [r7, #30]
		nvicEV = I2C3_EV_IRQn;
 8003e4a:	2348      	movs	r3, #72	@ 0x48
 8003e4c:	777b      	strb	r3, [r7, #29]
	}

	hdma_i2cx->Init.Channel = DMA_CHANNEL;
 8003e4e:	68bb      	ldr	r3, [r7, #8]
 8003e50:	69ba      	ldr	r2, [r7, #24]
 8003e52:	605a      	str	r2, [r3, #4]
	hdma_i2cx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003e54:	68bb      	ldr	r3, [r7, #8]
 8003e56:	2200      	movs	r2, #0
 8003e58:	609a      	str	r2, [r3, #8]
	hdma_i2cx->Init.PeriphInc = DMA_PINC_DISABLE;
 8003e5a:	68bb      	ldr	r3, [r7, #8]
 8003e5c:	2200      	movs	r2, #0
 8003e5e:	60da      	str	r2, [r3, #12]
	hdma_i2cx->Init.MemInc = DMA_MINC_ENABLE;
 8003e60:	68bb      	ldr	r3, [r7, #8]
 8003e62:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003e66:	611a      	str	r2, [r3, #16]
	hdma_i2cx->Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003e68:	68bb      	ldr	r3, [r7, #8]
 8003e6a:	2200      	movs	r2, #0
 8003e6c:	615a      	str	r2, [r3, #20]
	hdma_i2cx->Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003e6e:	68bb      	ldr	r3, [r7, #8]
 8003e70:	2200      	movs	r2, #0
 8003e72:	619a      	str	r2, [r3, #24]
	hdma_i2cx->Init.Mode = DMA_NORMAL;
 8003e74:	68bb      	ldr	r3, [r7, #8]
 8003e76:	2200      	movs	r2, #0
 8003e78:	61da      	str	r2, [r3, #28]
	hdma_i2cx->Init.Priority = DMA_PRIORITY_HIGH;
 8003e7a:	68bb      	ldr	r3, [r7, #8]
 8003e7c:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8003e80:	621a      	str	r2, [r3, #32]
	hdma_i2cx->Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003e82:	68bb      	ldr	r3, [r7, #8]
 8003e84:	2200      	movs	r2, #0
 8003e86:	625a      	str	r2, [r3, #36]	@ 0x24
	hdma_i2cx->Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8003e88:	68bb      	ldr	r3, [r7, #8]
 8003e8a:	2203      	movs	r2, #3
 8003e8c:	629a      	str	r2, [r3, #40]	@ 0x28
	hdma_i2cx->Init.MemBurst = DMA_MBURST_INC4;
 8003e8e:	68bb      	ldr	r3, [r7, #8]
 8003e90:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8003e94:	62da      	str	r2, [r3, #44]	@ 0x2c
	hdma_i2cx->Init.PeriphBurst = DMA_PBURST_INC4;
 8003e96:	68bb      	ldr	r3, [r7, #8]
 8003e98:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8003e9c:	631a      	str	r2, [r3, #48]	@ 0x30
	if (HAL_DMA_Init(hdma_i2cx) != HAL_OK)
 8003e9e:	68b8      	ldr	r0, [r7, #8]
 8003ea0:	f009 f84e 	bl	800cf40 <HAL_DMA_Init>
 8003ea4:	4603      	mov	r3, r0
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d001      	beq.n	8003eae <I2CX_DMA_RX_Init+0x116>
	{

		Error_Handler();
 8003eaa:	f007 feaf 	bl	800bc0c <Error_Handler>

	}
	__HAL_LINKDMA(hi2cx,hdmarx,*hdma_i2cx);
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	68ba      	ldr	r2, [r7, #8]
 8003eb2:	639a      	str	r2, [r3, #56]	@ 0x38
 8003eb4:	68bb      	ldr	r3, [r7, #8]
 8003eb6:	68fa      	ldr	r2, [r7, #12]
 8003eb8:	639a      	str	r2, [r3, #56]	@ 0x38

	/* DMA interrupt init */
	/* DMA1_Stream0_IRQn interrupt configuration */

	//	__HAL_DMA_ENABLE_IT(hdma_i2cx,DMA_IT_TC);
	if(hi2cx == &hi2c1){
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	4a5a      	ldr	r2, [pc, #360]	@ (8004028 <I2CX_DMA_RX_Init+0x290>)
 8003ebe:	4293      	cmp	r3, r2
 8003ec0:	d111      	bne.n	8003ee6 <I2CX_DMA_RX_Init+0x14e>
		HAL_NVIC_SetPriority(nvic, DMA1_Str0__IRQ_PRIO, 0);
 8003ec2:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003ec6:	2200      	movs	r2, #0
 8003ec8:	210a      	movs	r1, #10
 8003eca:	4618      	mov	r0, r3
 8003ecc:	f008 fff2 	bl	800ceb4 <HAL_NVIC_SetPriority>
		HAL_NVIC_ClearPendingIRQ(nvic);
 8003ed0:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003ed4:	4618      	mov	r0, r3
 8003ed6:	f009 f825 	bl	800cf24 <HAL_NVIC_ClearPendingIRQ>
		HAL_NVIC_EnableIRQ(nvic);
 8003eda:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003ede:	4618      	mov	r0, r3
 8003ee0:	f009 f804 	bl	800ceec <HAL_NVIC_EnableIRQ>
 8003ee4:	e026      	b.n	8003f34 <I2CX_DMA_RX_Init+0x19c>
	}else if(hi2cx == &hi2c2){
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	4a52      	ldr	r2, [pc, #328]	@ (8004034 <I2CX_DMA_RX_Init+0x29c>)
 8003eea:	4293      	cmp	r3, r2
 8003eec:	d111      	bne.n	8003f12 <I2CX_DMA_RX_Init+0x17a>
		HAL_NVIC_SetPriority(nvic, DMA1_Str3__IRQ_PRIO, 1);
 8003eee:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003ef2:	2201      	movs	r2, #1
 8003ef4:	210a      	movs	r1, #10
 8003ef6:	4618      	mov	r0, r3
 8003ef8:	f008 ffdc 	bl	800ceb4 <HAL_NVIC_SetPriority>
		HAL_NVIC_ClearPendingIRQ(nvic);
 8003efc:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003f00:	4618      	mov	r0, r3
 8003f02:	f009 f80f 	bl	800cf24 <HAL_NVIC_ClearPendingIRQ>
		HAL_NVIC_EnableIRQ(nvic);
 8003f06:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003f0a:	4618      	mov	r0, r3
 8003f0c:	f008 ffee 	bl	800ceec <HAL_NVIC_EnableIRQ>
 8003f10:	e010      	b.n	8003f34 <I2CX_DMA_RX_Init+0x19c>
	}else{
		HAL_NVIC_SetPriority(nvic, DMA1_Str2__IRQ_PRIO, 2);
 8003f12:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003f16:	2202      	movs	r2, #2
 8003f18:	210e      	movs	r1, #14
 8003f1a:	4618      	mov	r0, r3
 8003f1c:	f008 ffca 	bl	800ceb4 <HAL_NVIC_SetPriority>
		HAL_NVIC_ClearPendingIRQ(nvic);
 8003f20:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003f24:	4618      	mov	r0, r3
 8003f26:	f008 fffd 	bl	800cf24 <HAL_NVIC_ClearPendingIRQ>
		HAL_NVIC_EnableIRQ(nvic);
 8003f2a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003f2e:	4618      	mov	r0, r3
 8003f30:	f008 ffdc 	bl	800ceec <HAL_NVIC_EnableIRQ>
	}

	hi2cx->Init.ClockSpeed = ClockSpeed;
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	683a      	ldr	r2, [r7, #0]
 8003f38:	605a      	str	r2, [r3, #4]
	hi2cx->Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	2200      	movs	r2, #0
 8003f3e:	609a      	str	r2, [r3, #8]
	hi2cx->Init.OwnAddress1 = OwnAddress<<1;
 8003f40:	79fb      	ldrb	r3, [r7, #7]
 8003f42:	005a      	lsls	r2, r3, #1
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	60da      	str	r2, [r3, #12]
	hi2cx->Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8003f4e:	611a      	str	r2, [r3, #16]
	hi2cx->Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	2200      	movs	r2, #0
 8003f54:	615a      	str	r2, [r3, #20]
	hi2cx->Init.OwnAddress2 = 0;
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	2200      	movs	r2, #0
 8003f5a:	619a      	str	r2, [r3, #24]
	hi2cx->Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	2200      	movs	r2, #0
 8003f60:	61da      	str	r2, [r3, #28]
	hi2cx->Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	2200      	movs	r2, #0
 8003f66:	621a      	str	r2, [r3, #32]

	if(hi2cx == &hi2c1){
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	4a2f      	ldr	r2, [pc, #188]	@ (8004028 <I2CX_DMA_RX_Init+0x290>)
 8003f6c:	4293      	cmp	r3, r2
 8003f6e:	d118      	bne.n	8003fa2 <I2CX_DMA_RX_Init+0x20a>
		HAL_NVIC_SetPriority(nvicER, I2C1_ER_IRQ_PRIO, 0);
 8003f70:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8003f74:	2200      	movs	r2, #0
 8003f76:	2100      	movs	r1, #0
 8003f78:	4618      	mov	r0, r3
 8003f7a:	f008 ff9b 	bl	800ceb4 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(nvicER);
 8003f7e:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8003f82:	4618      	mov	r0, r3
 8003f84:	f008 ffb2 	bl	800ceec <HAL_NVIC_EnableIRQ>
		HAL_NVIC_SetPriority(nvicEV, I2C1_EV_IRQ_PRIO, 0);
 8003f88:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8003f8c:	2200      	movs	r2, #0
 8003f8e:	2109      	movs	r1, #9
 8003f90:	4618      	mov	r0, r3
 8003f92:	f008 ff8f 	bl	800ceb4 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(nvicEV);
 8003f96:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8003f9a:	4618      	mov	r0, r3
 8003f9c:	f008 ffa6 	bl	800ceec <HAL_NVIC_EnableIRQ>
 8003fa0:	e034      	b.n	800400c <I2CX_DMA_RX_Init+0x274>
	}else if(hi2cx == &hi2c2){
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	4a23      	ldr	r2, [pc, #140]	@ (8004034 <I2CX_DMA_RX_Init+0x29c>)
 8003fa6:	4293      	cmp	r3, r2
 8003fa8:	d118      	bne.n	8003fdc <I2CX_DMA_RX_Init+0x244>
		HAL_NVIC_SetPriority(nvicER, I2C2_ER_IRQ_PRIO, 1);
 8003faa:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8003fae:	2201      	movs	r2, #1
 8003fb0:	2100      	movs	r1, #0
 8003fb2:	4618      	mov	r0, r3
 8003fb4:	f008 ff7e 	bl	800ceb4 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(nvicER);
 8003fb8:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8003fbc:	4618      	mov	r0, r3
 8003fbe:	f008 ff95 	bl	800ceec <HAL_NVIC_EnableIRQ>
		HAL_NVIC_SetPriority(nvicEV, I2C2_EV_IRQ_PRIO, 1);
 8003fc2:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8003fc6:	2201      	movs	r2, #1
 8003fc8:	2109      	movs	r1, #9
 8003fca:	4618      	mov	r0, r3
 8003fcc:	f008 ff72 	bl	800ceb4 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(nvicEV);
 8003fd0:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8003fd4:	4618      	mov	r0, r3
 8003fd6:	f008 ff89 	bl	800ceec <HAL_NVIC_EnableIRQ>
 8003fda:	e017      	b.n	800400c <I2CX_DMA_RX_Init+0x274>
	}else{
		HAL_NVIC_SetPriority(nvicER, I2C3_ER_IRQ_PRIO, 2);
 8003fdc:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8003fe0:	2202      	movs	r2, #2
 8003fe2:	2100      	movs	r1, #0
 8003fe4:	4618      	mov	r0, r3
 8003fe6:	f008 ff65 	bl	800ceb4 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(nvicER);
 8003fea:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8003fee:	4618      	mov	r0, r3
 8003ff0:	f008 ff7c 	bl	800ceec <HAL_NVIC_EnableIRQ>
		HAL_NVIC_SetPriority(nvicEV, I2C3_EV_IRQ_PRIO, 2);
 8003ff4:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8003ff8:	2202      	movs	r2, #2
 8003ffa:	2109      	movs	r1, #9
 8003ffc:	4618      	mov	r0, r3
 8003ffe:	f008 ff59 	bl	800ceb4 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(nvicEV);
 8004002:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8004006:	4618      	mov	r0, r3
 8004008:	f008 ff70 	bl	800ceec <HAL_NVIC_EnableIRQ>
	}

	if (HAL_I2C_Init(hi2cx) != HAL_OK)
 800400c:	68f8      	ldr	r0, [r7, #12]
 800400e:	f009 fedb 	bl	800ddc8 <HAL_I2C_Init>
 8004012:	4603      	mov	r3, r0
 8004014:	2b00      	cmp	r3, #0
 8004016:	d001      	beq.n	800401c <I2CX_DMA_RX_Init+0x284>
	{
		Error_Handler();
 8004018:	f007 fdf8 	bl	800bc0c <Error_Handler>
	}
}
 800401c:	bf00      	nop
 800401e:	3720      	adds	r7, #32
 8004020:	46bd      	mov	sp, r7
 8004022:	bd80      	pop	{r7, pc}
 8004024:	40023800 	.word	0x40023800
 8004028:	200070cc 	.word	0x200070cc
 800402c:	40005400 	.word	0x40005400
 8004030:	40026010 	.word	0x40026010
 8004034:	20007120 	.word	0x20007120
 8004038:	40005800 	.word	0x40005800
 800403c:	40026058 	.word	0x40026058
 8004040:	40005c00 	.word	0x40005c00
 8004044:	40026040 	.word	0x40026040

08004048 <I2CSend>:
 * Function Return		: HAL_StatusTypeDef will return the status of transmission.
 * 											can be HAL_OK, HAL_ERROR, HAL_BUSY or HAL_TIMEOUT.
 * Function Example		: float speed = 123.45;
 *						  I2CSend(I2C1, main_board_1, sizeof(speed), &speed);
 */
HAL_StatusTypeDef I2CSend(I2C_HandleTypeDef* hi2cx,uint32_t slave_addr, uint8_t len, const void *data){
 8004048:	b590      	push	{r4, r7, lr}
 800404a:	b0c9      	sub	sp, #292	@ 0x124
 800404c:	af02      	add	r7, sp, #8
 800404e:	f507 748c 	add.w	r4, r7, #280	@ 0x118
 8004052:	f5a4 7486 	sub.w	r4, r4, #268	@ 0x10c
 8004056:	6020      	str	r0, [r4, #0]
 8004058:	f507 708c 	add.w	r0, r7, #280	@ 0x118
 800405c:	f5a0 7088 	sub.w	r0, r0, #272	@ 0x110
 8004060:	6001      	str	r1, [r0, #0]
 8004062:	4611      	mov	r1, r2
 8004064:	f507 728c 	add.w	r2, r7, #280	@ 0x118
 8004068:	f5a2 728c 	sub.w	r2, r2, #280	@ 0x118
 800406c:	6013      	str	r3, [r2, #0]
 800406e:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8004072:	f2a3 1311 	subw	r3, r3, #273	@ 0x111
 8004076:	460a      	mov	r2, r1
 8004078:	701a      	strb	r2, [r3, #0]

	uint8_t master_snd_buf[256];
	uint8_t index = 0;
 800407a:	2300      	movs	r3, #0
 800407c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
	uint8_t tmp_len = len;
 8004080:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8004084:	f2a3 1311 	subw	r3, r3, #273	@ 0x111
 8004088:	781b      	ldrb	r3, [r3, #0]
 800408a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116

	while (tmp_len--) {
 800408e:	e015      	b.n	80040bc <I2CSend+0x74>
		master_snd_buf[index++] = *(uint8_t *)data++;
 8004090:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8004094:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	f507 728c 	add.w	r2, r7, #280	@ 0x118
 800409e:	f5a2 728c 	sub.w	r2, r2, #280	@ 0x118
 80040a2:	1c59      	adds	r1, r3, #1
 80040a4:	6011      	str	r1, [r2, #0]
 80040a6:	f897 2117 	ldrb.w	r2, [r7, #279]	@ 0x117
 80040aa:	1c51      	adds	r1, r2, #1
 80040ac:	f887 1117 	strb.w	r1, [r7, #279]	@ 0x117
 80040b0:	7819      	ldrb	r1, [r3, #0]
 80040b2:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80040b6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80040ba:	5499      	strb	r1, [r3, r2]
	while (tmp_len--) {
 80040bc:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 80040c0:	1e5a      	subs	r2, r3, #1
 80040c2:	f887 2116 	strb.w	r2, [r7, #278]	@ 0x116
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d1e2      	bne.n	8004090 <I2CSend+0x48>
	}

	return HAL_I2C_Master_Transmit(hi2cx,slave_addr<<1, master_snd_buf,len,I2C_LONG_TIMEOUT);
 80040ca:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80040ce:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	b29b      	uxth	r3, r3
 80040d6:	005b      	lsls	r3, r3, #1
 80040d8:	b299      	uxth	r1, r3
 80040da:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80040de:	f2a3 1311 	subw	r3, r3, #273	@ 0x111
 80040e2:	781b      	ldrb	r3, [r3, #0]
 80040e4:	b29b      	uxth	r3, r3
 80040e6:	f107 0214 	add.w	r2, r7, #20
 80040ea:	f507 708c 	add.w	r0, r7, #280	@ 0x118
 80040ee:	f5a0 7086 	sub.w	r0, r0, #268	@ 0x10c
 80040f2:	4c05      	ldr	r4, [pc, #20]	@ (8004108 <I2CSend+0xc0>)
 80040f4:	9400      	str	r4, [sp, #0]
 80040f6:	6800      	ldr	r0, [r0, #0]
 80040f8:	f009 ffda 	bl	800e0b0 <HAL_I2C_Master_Transmit>
 80040fc:	4603      	mov	r3, r0
}
 80040fe:	4618      	mov	r0, r3
 8004100:	f507 778e 	add.w	r7, r7, #284	@ 0x11c
 8004104:	46bd      	mov	sp, r7
 8004106:	bd90      	pop	{r4, r7, pc}
 8004108:	57300000 	.word	0x57300000

0800410c <I2C1_EV_IRQHandler>:
 * Function Remarks		: This interrupt handle slave receive mode, master receive mode and slave transmit mode.
 * Function Arguments	: None
 * Function Return		: None
 * Function Example		: None
 */
void I2C1_EV_IRQHandler(void){
 800410c:	b580      	push	{r7, lr}
 800410e:	af00      	add	r7, sp, #0

	HAL_I2C_EV_IRQHandler(&hi2c1);
 8004110:	4802      	ldr	r0, [pc, #8]	@ (800411c <I2C1_EV_IRQHandler+0x10>)
 8004112:	f00a fb19 	bl	800e748 <HAL_I2C_EV_IRQHandler>

}
 8004116:	bf00      	nop
 8004118:	bd80      	pop	{r7, pc}
 800411a:	bf00      	nop
 800411c:	200070cc 	.word	0x200070cc

08004120 <I2C2_EV_IRQHandler>:
 * Function Remarks		: This interrupt handle slave receive mode, master receive mode and slave transmit mode.
 * Function Arguments	: None
 * Function Return		: None
 * Function Example		: None
 */
void I2C2_EV_IRQHandler(void){
 8004120:	b580      	push	{r7, lr}
 8004122:	af00      	add	r7, sp, #0

	HAL_I2C_EV_IRQHandler(&hi2c2);
 8004124:	4802      	ldr	r0, [pc, #8]	@ (8004130 <I2C2_EV_IRQHandler+0x10>)
 8004126:	f00a fb0f 	bl	800e748 <HAL_I2C_EV_IRQHandler>


}
 800412a:	bf00      	nop
 800412c:	bd80      	pop	{r7, pc}
 800412e:	bf00      	nop
 8004130:	20007120 	.word	0x20007120

08004134 <I2C3_EV_IRQHandler>:
 * Function Remarks		: This interrupt handle slave receive mode, master receive mode and slave transmit mode.
 * Function Arguments	: None
 * Function Return		: None
 * Function Example		: None
 */
void I2C3_EV_IRQHandler(void){
 8004134:	b580      	push	{r7, lr}
 8004136:	af00      	add	r7, sp, #0

	//	taskENTER_CRITICAL();
	HAL_I2C_EV_IRQHandler(&hi2c3);
 8004138:	4802      	ldr	r0, [pc, #8]	@ (8004144 <I2C3_EV_IRQHandler+0x10>)
 800413a:	f00a fb05 	bl	800e748 <HAL_I2C_EV_IRQHandler>
	//	taskEXIT_CRITICAL();

}
 800413e:	bf00      	nop
 8004140:	bd80      	pop	{r7, pc}
 8004142:	bf00      	nop
 8004144:	20006f14 	.word	0x20006f14

08004148 <IMUConnectI2C>:
	IMU->prev_yaw = 0;
	HAL_I2C_Master_Receive_IT(IMU->hi2cimu, 0x35 << 1, (uint8_t*)IMU->Buffer, 20);

}

void IMUConnectI2C(R6091U_t* IMU){
 8004148:	b5b0      	push	{r4, r5, r7, lr}
 800414a:	b084      	sub	sp, #16
 800414c:	af00      	add	r7, sp, #0
 800414e:	6078      	str	r0, [r7, #4]
	IMU->checksum = 0;
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	2200      	movs	r2, #0
 8004154:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	for(int i = 0; i < 19; i++)
 8004158:	2300      	movs	r3, #0
 800415a:	60fb      	str	r3, [r7, #12]
 800415c:	e011      	b.n	8004182 <IMUConnectI2C+0x3a>
		IMU->checksum += IMU->Buffer[i];
 800415e:	687a      	ldr	r2, [r7, #4]
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	4413      	add	r3, r2
 8004164:	3308      	adds	r3, #8
 8004166:	781b      	ldrb	r3, [r3, #0]
 8004168:	b2da      	uxtb	r2, r3
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004170:	b2db      	uxtb	r3, r3
 8004172:	4413      	add	r3, r2
 8004174:	b2da      	uxtb	r2, r3
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	for(int i = 0; i < 19; i++)
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	3301      	adds	r3, #1
 8004180:	60fb      	str	r3, [r7, #12]
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	2b12      	cmp	r3, #18
 8004186:	ddea      	ble.n	800415e <IMUConnectI2C+0x16>

	if(IMU->checksum == IMU->Buffer[19]){
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800418e:	b2da      	uxtb	r2, r3
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	7edb      	ldrb	r3, [r3, #27]
 8004194:	b2db      	uxtb	r3, r3
 8004196:	429a      	cmp	r2, r3
 8004198:	f040 80d7 	bne.w	800434a <IMUConnectI2C+0x202>
		IMU->roll = *((int16_t *)&IMU->Buffer[0]) / 100.0;
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	3308      	adds	r3, #8
 80041a0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80041a4:	4618      	mov	r0, r3
 80041a6:	f7fc f9bd 	bl	8000524 <__aeabi_i2d>
 80041aa:	f04f 0200 	mov.w	r2, #0
 80041ae:	4bbc      	ldr	r3, [pc, #752]	@ (80044a0 <IMUConnectI2C+0x358>)
 80041b0:	f7fc fb4c 	bl	800084c <__aeabi_ddiv>
 80041b4:	4602      	mov	r2, r0
 80041b6:	460b      	mov	r3, r1
 80041b8:	4610      	mov	r0, r2
 80041ba:	4619      	mov	r1, r3
 80041bc:	f7fc fd14 	bl	8000be8 <__aeabi_d2f>
 80041c0:	4602      	mov	r2, r0
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	621a      	str	r2, [r3, #32]
		IMU->pitch = *((int16_t *)&IMU->Buffer[2]) / 100.0; 	 // -90 to 90
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	330a      	adds	r3, #10
 80041ca:	f9b3 3000 	ldrsh.w	r3, [r3]
 80041ce:	4618      	mov	r0, r3
 80041d0:	f7fc f9a8 	bl	8000524 <__aeabi_i2d>
 80041d4:	f04f 0200 	mov.w	r2, #0
 80041d8:	4bb1      	ldr	r3, [pc, #708]	@ (80044a0 <IMUConnectI2C+0x358>)
 80041da:	f7fc fb37 	bl	800084c <__aeabi_ddiv>
 80041de:	4602      	mov	r2, r0
 80041e0:	460b      	mov	r3, r1
 80041e2:	4610      	mov	r0, r2
 80041e4:	4619      	mov	r1, r3
 80041e6:	f7fc fcff 	bl	8000be8 <__aeabi_d2f>
 80041ea:	4602      	mov	r2, r0
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	629a      	str	r2, [r3, #40]	@ 0x28
		IMU->yaw = *((int16_t *)&IMU->Buffer[4]) / 100.0;	 //-180 to 180
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	330c      	adds	r3, #12
 80041f4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80041f8:	4618      	mov	r0, r3
 80041fa:	f7fc f993 	bl	8000524 <__aeabi_i2d>
 80041fe:	f04f 0200 	mov.w	r2, #0
 8004202:	4ba7      	ldr	r3, [pc, #668]	@ (80044a0 <IMUConnectI2C+0x358>)
 8004204:	f7fc fb22 	bl	800084c <__aeabi_ddiv>
 8004208:	4602      	mov	r2, r0
 800420a:	460b      	mov	r3, r1
 800420c:	4610      	mov	r0, r2
 800420e:	4619      	mov	r1, r3
 8004210:	f7fc fcea 	bl	8000be8 <__aeabi_d2f>
 8004214:	4602      	mov	r2, r0
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	631a      	str	r2, [r3, #48]	@ 0x30
		IMU->roll_rate = *((int16_t *)&IMU->Buffer[6]) / 100.0;
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	330e      	adds	r3, #14
 800421e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004222:	4618      	mov	r0, r3
 8004224:	f7fc f97e 	bl	8000524 <__aeabi_i2d>
 8004228:	f04f 0200 	mov.w	r2, #0
 800422c:	4b9c      	ldr	r3, [pc, #624]	@ (80044a0 <IMUConnectI2C+0x358>)
 800422e:	f7fc fb0d 	bl	800084c <__aeabi_ddiv>
 8004232:	4602      	mov	r2, r0
 8004234:	460b      	mov	r3, r1
 8004236:	4610      	mov	r0, r2
 8004238:	4619      	mov	r1, r3
 800423a:	f7fc fcd5 	bl	8000be8 <__aeabi_d2f>
 800423e:	4602      	mov	r2, r0
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	625a      	str	r2, [r3, #36]	@ 0x24
		IMU->pitch_rate = *((int16_t *)&IMU->Buffer[8]) / 100.0;
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	3310      	adds	r3, #16
 8004248:	f9b3 3000 	ldrsh.w	r3, [r3]
 800424c:	4618      	mov	r0, r3
 800424e:	f7fc f969 	bl	8000524 <__aeabi_i2d>
 8004252:	f04f 0200 	mov.w	r2, #0
 8004256:	4b92      	ldr	r3, [pc, #584]	@ (80044a0 <IMUConnectI2C+0x358>)
 8004258:	f7fc faf8 	bl	800084c <__aeabi_ddiv>
 800425c:	4602      	mov	r2, r0
 800425e:	460b      	mov	r3, r1
 8004260:	4610      	mov	r0, r2
 8004262:	4619      	mov	r1, r3
 8004264:	f7fc fcc0 	bl	8000be8 <__aeabi_d2f>
 8004268:	4602      	mov	r2, r0
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	62da      	str	r2, [r3, #44]	@ 0x2c
		IMU->yaw_rate = *((int16_t *)&IMU->Buffer[10]) / 100.0;
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	3312      	adds	r3, #18
 8004272:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004276:	4618      	mov	r0, r3
 8004278:	f7fc f954 	bl	8000524 <__aeabi_i2d>
 800427c:	f04f 0200 	mov.w	r2, #0
 8004280:	4b87      	ldr	r3, [pc, #540]	@ (80044a0 <IMUConnectI2C+0x358>)
 8004282:	f7fc fae3 	bl	800084c <__aeabi_ddiv>
 8004286:	4602      	mov	r2, r0
 8004288:	460b      	mov	r3, r1
 800428a:	4610      	mov	r0, r2
 800428c:	4619      	mov	r1, r3
 800428e:	f7fc fcab 	bl	8000be8 <__aeabi_d2f>
 8004292:	4602      	mov	r2, r0
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	635a      	str	r2, [r3, #52]	@ 0x34
		IMU->x_acc = *((int16_t *)&IMU->Buffer[12]) / 1000 * 9.8067;
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	3314      	adds	r3, #20
 800429c:	f9b3 3000 	ldrsh.w	r3, [r3]
 80042a0:	4a80      	ldr	r2, [pc, #512]	@ (80044a4 <IMUConnectI2C+0x35c>)
 80042a2:	fb82 1203 	smull	r1, r2, r2, r3
 80042a6:	1192      	asrs	r2, r2, #6
 80042a8:	17db      	asrs	r3, r3, #31
 80042aa:	1ad3      	subs	r3, r2, r3
 80042ac:	b21b      	sxth	r3, r3
 80042ae:	4618      	mov	r0, r3
 80042b0:	f7fc f938 	bl	8000524 <__aeabi_i2d>
 80042b4:	a376      	add	r3, pc, #472	@ (adr r3, 8004490 <IMUConnectI2C+0x348>)
 80042b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042ba:	f7fc f99d 	bl	80005f8 <__aeabi_dmul>
 80042be:	4602      	mov	r2, r0
 80042c0:	460b      	mov	r3, r1
 80042c2:	4610      	mov	r0, r2
 80042c4:	4619      	mov	r1, r3
 80042c6:	f7fc fc8f 	bl	8000be8 <__aeabi_d2f>
 80042ca:	4602      	mov	r2, r0
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	639a      	str	r2, [r3, #56]	@ 0x38
		IMU->y_acc = *((int16_t *)&IMU->Buffer[14]) / 1000 * 9.8067;
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	3316      	adds	r3, #22
 80042d4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80042d8:	4a72      	ldr	r2, [pc, #456]	@ (80044a4 <IMUConnectI2C+0x35c>)
 80042da:	fb82 1203 	smull	r1, r2, r2, r3
 80042de:	1192      	asrs	r2, r2, #6
 80042e0:	17db      	asrs	r3, r3, #31
 80042e2:	1ad3      	subs	r3, r2, r3
 80042e4:	b21b      	sxth	r3, r3
 80042e6:	4618      	mov	r0, r3
 80042e8:	f7fc f91c 	bl	8000524 <__aeabi_i2d>
 80042ec:	a368      	add	r3, pc, #416	@ (adr r3, 8004490 <IMUConnectI2C+0x348>)
 80042ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042f2:	f7fc f981 	bl	80005f8 <__aeabi_dmul>
 80042f6:	4602      	mov	r2, r0
 80042f8:	460b      	mov	r3, r1
 80042fa:	4610      	mov	r0, r2
 80042fc:	4619      	mov	r1, r3
 80042fe:	f7fc fc73 	bl	8000be8 <__aeabi_d2f>
 8004302:	4602      	mov	r2, r0
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	63da      	str	r2, [r3, #60]	@ 0x3c
		IMU->z_acc = *((int16_t *)&IMU->Buffer[16]) / 1000 * 9.8067;
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	3318      	adds	r3, #24
 800430c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004310:	4a64      	ldr	r2, [pc, #400]	@ (80044a4 <IMUConnectI2C+0x35c>)
 8004312:	fb82 1203 	smull	r1, r2, r2, r3
 8004316:	1192      	asrs	r2, r2, #6
 8004318:	17db      	asrs	r3, r3, #31
 800431a:	1ad3      	subs	r3, r2, r3
 800431c:	b21b      	sxth	r3, r3
 800431e:	4618      	mov	r0, r3
 8004320:	f7fc f900 	bl	8000524 <__aeabi_i2d>
 8004324:	a35a      	add	r3, pc, #360	@ (adr r3, 8004490 <IMUConnectI2C+0x348>)
 8004326:	e9d3 2300 	ldrd	r2, r3, [r3]
 800432a:	f7fc f965 	bl	80005f8 <__aeabi_dmul>
 800432e:	4602      	mov	r2, r0
 8004330:	460b      	mov	r3, r1
 8004332:	4610      	mov	r0, r2
 8004334:	4619      	mov	r1, r3
 8004336:	f7fc fc57 	bl	8000be8 <__aeabi_d2f>
 800433a:	4602      	mov	r2, r0
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	641a      	str	r2, [r3, #64]	@ 0x40
		IMU->index = IMU->Buffer[18];
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	7e9b      	ldrb	r3, [r3, #26]
 8004344:	b2da      	uxtb	r2, r3
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	771a      	strb	r2, [r3, #28]
	}

	if(IMU->yaw < 30.0){
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 8004350:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 8004354:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004358:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800435c:	d514      	bpl.n	8004388 <IMUConnectI2C+0x240>
		if(IMU->prev_yaw > 350.0){
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
 8004364:	ed9f 7a50 	vldr	s14, [pc, #320]	@ 80044a8 <IMUConnectI2C+0x360>
 8004368:	eef4 7ac7 	vcmpe.f32	s15, s14
 800436c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004370:	dd28      	ble.n	80043c4 <IMUConnectI2C+0x27c>
			IMU->yaw_constant++;
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	edd3 7a13 	vldr	s15, [r3, #76]	@ 0x4c
 8004378:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800437c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	edc3 7a13 	vstr	s15, [r3, #76]	@ 0x4c
 8004386:	e01d      	b.n	80043c4 <IMUConnectI2C+0x27c>
		}
	}else if(IMU->yaw > 350.0){
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 800438e:	ed9f 7a46 	vldr	s14, [pc, #280]	@ 80044a8 <IMUConnectI2C+0x360>
 8004392:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004396:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800439a:	dd13      	ble.n	80043c4 <IMUConnectI2C+0x27c>
		if(IMU->prev_yaw < 30.0){
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
 80043a2:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 80043a6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80043aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80043ae:	d509      	bpl.n	80043c4 <IMUConnectI2C+0x27c>
			IMU->yaw_constant--;
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	edd3 7a13 	vldr	s15, [r3, #76]	@ 0x4c
 80043b6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80043ba:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	edc3 7a13 	vstr	s15, [r3, #76]	@ 0x4c
		}
	}

	IMU->prev_yaw = IMU->yaw;
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	649a      	str	r2, [r3, #72]	@ 0x48
	IMU->real_z = IMU->yaw + IMU->yaw_constant * 360.0 + IMU->offset;
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043d0:	4618      	mov	r0, r3
 80043d2:	f7fc f8b9 	bl	8000548 <__aeabi_f2d>
 80043d6:	4604      	mov	r4, r0
 80043d8:	460d      	mov	r5, r1
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80043de:	4618      	mov	r0, r3
 80043e0:	f7fc f8b2 	bl	8000548 <__aeabi_f2d>
 80043e4:	f04f 0200 	mov.w	r2, #0
 80043e8:	4b30      	ldr	r3, [pc, #192]	@ (80044ac <IMUConnectI2C+0x364>)
 80043ea:	f7fc f905 	bl	80005f8 <__aeabi_dmul>
 80043ee:	4602      	mov	r2, r0
 80043f0:	460b      	mov	r3, r1
 80043f2:	4620      	mov	r0, r4
 80043f4:	4629      	mov	r1, r5
 80043f6:	f7fb ff49 	bl	800028c <__adddf3>
 80043fa:	4602      	mov	r2, r0
 80043fc:	460b      	mov	r3, r1
 80043fe:	4614      	mov	r4, r2
 8004400:	461d      	mov	r5, r3
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004406:	4618      	mov	r0, r3
 8004408:	f7fc f89e 	bl	8000548 <__aeabi_f2d>
 800440c:	4602      	mov	r2, r0
 800440e:	460b      	mov	r3, r1
 8004410:	4620      	mov	r0, r4
 8004412:	4629      	mov	r1, r5
 8004414:	f7fb ff3a 	bl	800028c <__adddf3>
 8004418:	4602      	mov	r2, r0
 800441a:	460b      	mov	r3, r1
 800441c:	4610      	mov	r0, r2
 800441e:	4619      	mov	r1, r3
 8004420:	f7fc fbe2 	bl	8000be8 <__aeabi_d2f>
 8004424:	4602      	mov	r2, r0
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	651a      	str	r2, [r3, #80]	@ 0x50
	IMU->real_zrad = (IMU->real_z / 180.0) * 3.141593;
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800442e:	4618      	mov	r0, r3
 8004430:	f7fc f88a 	bl	8000548 <__aeabi_f2d>
 8004434:	f04f 0200 	mov.w	r2, #0
 8004438:	4b1d      	ldr	r3, [pc, #116]	@ (80044b0 <IMUConnectI2C+0x368>)
 800443a:	f7fc fa07 	bl	800084c <__aeabi_ddiv>
 800443e:	4602      	mov	r2, r0
 8004440:	460b      	mov	r3, r1
 8004442:	4610      	mov	r0, r2
 8004444:	4619      	mov	r1, r3
 8004446:	a314      	add	r3, pc, #80	@ (adr r3, 8004498 <IMUConnectI2C+0x350>)
 8004448:	e9d3 2300 	ldrd	r2, r3, [r3]
 800444c:	f7fc f8d4 	bl	80005f8 <__aeabi_dmul>
 8004450:	4602      	mov	r2, r0
 8004452:	460b      	mov	r3, r1
 8004454:	4610      	mov	r0, r2
 8004456:	4619      	mov	r1, r3
 8004458:	f7fc fbc6 	bl	8000be8 <__aeabi_d2f>
 800445c:	4602      	mov	r2, r0
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	655a      	str	r2, [r3, #84]	@ 0x54
	memset(IMU->Buffer, 0, 20);
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	3308      	adds	r3, #8
 8004466:	2214      	movs	r2, #20
 8004468:	2100      	movs	r1, #0
 800446a:	4618      	mov	r0, r3
 800446c:	f019 fb67 	bl	801db3e <memset>
	HAL_I2C_Master_Receive_IT(IMU->hi2cimu, 0x35 << 1, (uint8_t*)IMU->Buffer, 20);
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	6818      	ldr	r0, [r3, #0]
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	f103 0208 	add.w	r2, r3, #8
 800447a:	2314      	movs	r3, #20
 800447c:	216a      	movs	r1, #106	@ 0x6a
 800447e:	f009 ff15 	bl	800e2ac <HAL_I2C_Master_Receive_IT>
}
 8004482:	bf00      	nop
 8004484:	3710      	adds	r7, #16
 8004486:	46bd      	mov	sp, r7
 8004488:	bdb0      	pop	{r4, r5, r7, pc}
 800448a:	bf00      	nop
 800448c:	f3af 8000 	nop.w
 8004490:	c84b5dcc 	.word	0xc84b5dcc
 8004494:	40239d07 	.word	0x40239d07
 8004498:	82c2bd7f 	.word	0x82c2bd7f
 800449c:	400921fb 	.word	0x400921fb
 80044a0:	40590000 	.word	0x40590000
 80044a4:	10624dd3 	.word	0x10624dd3
 80044a8:	43af0000 	.word	0x43af0000
 80044ac:	40768000 	.word	0x40768000
 80044b0:	40668000 	.word	0x40668000

080044b4 <updateEstimate>:
	kalmanfilter->_last_estimate = 0;
	kalmanfilter->_kalman_gain = 0;
}

float updateEstimate(float mea, KALMANFILTER_t *kalmanfilter)
{
 80044b4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80044b8:	b082      	sub	sp, #8
 80044ba:	af00      	add	r7, sp, #0
 80044bc:	ed87 0a01 	vstr	s0, [r7, #4]
 80044c0:	6038      	str	r0, [r7, #0]
	kalmanfilter->_kalman_gain = kalmanfilter->_err_estimate / (kalmanfilter->_err_estimate + kalmanfilter->_err_measure);
 80044c2:	683b      	ldr	r3, [r7, #0]
 80044c4:	edd3 6a01 	vldr	s13, [r3, #4]
 80044c8:	683b      	ldr	r3, [r7, #0]
 80044ca:	ed93 7a01 	vldr	s14, [r3, #4]
 80044ce:	683b      	ldr	r3, [r7, #0]
 80044d0:	edd3 7a00 	vldr	s15, [r3]
 80044d4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80044d8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80044dc:	683b      	ldr	r3, [r7, #0]
 80044de:	edc3 7a05 	vstr	s15, [r3, #20]
	kalmanfilter->_current_estimate = kalmanfilter->_last_estimate + kalmanfilter->_kalman_gain * (mea - kalmanfilter->_last_estimate);
 80044e2:	683b      	ldr	r3, [r7, #0]
 80044e4:	ed93 7a04 	vldr	s14, [r3, #16]
 80044e8:	683b      	ldr	r3, [r7, #0]
 80044ea:	edd3 6a05 	vldr	s13, [r3, #20]
 80044ee:	683b      	ldr	r3, [r7, #0]
 80044f0:	edd3 7a04 	vldr	s15, [r3, #16]
 80044f4:	ed97 6a01 	vldr	s12, [r7, #4]
 80044f8:	ee76 7a67 	vsub.f32	s15, s12, s15
 80044fc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004500:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004504:	683b      	ldr	r3, [r7, #0]
 8004506:	edc3 7a03 	vstr	s15, [r3, #12]
	kalmanfilter->_err_estimate = (1.0 - kalmanfilter->_kalman_gain) * kalmanfilter->_err_estimate + fabs(kalmanfilter->_last_estimate - kalmanfilter->_current_estimate) * kalmanfilter->_q;
 800450a:	683b      	ldr	r3, [r7, #0]
 800450c:	695b      	ldr	r3, [r3, #20]
 800450e:	4618      	mov	r0, r3
 8004510:	f7fc f81a 	bl	8000548 <__aeabi_f2d>
 8004514:	4602      	mov	r2, r0
 8004516:	460b      	mov	r3, r1
 8004518:	f04f 0000 	mov.w	r0, #0
 800451c:	4926      	ldr	r1, [pc, #152]	@ (80045b8 <updateEstimate+0x104>)
 800451e:	f7fb feb3 	bl	8000288 <__aeabi_dsub>
 8004522:	4602      	mov	r2, r0
 8004524:	460b      	mov	r3, r1
 8004526:	4614      	mov	r4, r2
 8004528:	461d      	mov	r5, r3
 800452a:	683b      	ldr	r3, [r7, #0]
 800452c:	685b      	ldr	r3, [r3, #4]
 800452e:	4618      	mov	r0, r3
 8004530:	f7fc f80a 	bl	8000548 <__aeabi_f2d>
 8004534:	4602      	mov	r2, r0
 8004536:	460b      	mov	r3, r1
 8004538:	4620      	mov	r0, r4
 800453a:	4629      	mov	r1, r5
 800453c:	f7fc f85c 	bl	80005f8 <__aeabi_dmul>
 8004540:	4602      	mov	r2, r0
 8004542:	460b      	mov	r3, r1
 8004544:	4690      	mov	r8, r2
 8004546:	4699      	mov	r9, r3
 8004548:	683b      	ldr	r3, [r7, #0]
 800454a:	ed93 7a04 	vldr	s14, [r3, #16]
 800454e:	683b      	ldr	r3, [r7, #0]
 8004550:	edd3 7a03 	vldr	s15, [r3, #12]
 8004554:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004558:	eef0 7ae7 	vabs.f32	s15, s15
 800455c:	ee17 0a90 	vmov	r0, s15
 8004560:	f7fb fff2 	bl	8000548 <__aeabi_f2d>
 8004564:	4604      	mov	r4, r0
 8004566:	460d      	mov	r5, r1
 8004568:	683b      	ldr	r3, [r7, #0]
 800456a:	689b      	ldr	r3, [r3, #8]
 800456c:	4618      	mov	r0, r3
 800456e:	f7fb ffeb 	bl	8000548 <__aeabi_f2d>
 8004572:	4602      	mov	r2, r0
 8004574:	460b      	mov	r3, r1
 8004576:	4620      	mov	r0, r4
 8004578:	4629      	mov	r1, r5
 800457a:	f7fc f83d 	bl	80005f8 <__aeabi_dmul>
 800457e:	4602      	mov	r2, r0
 8004580:	460b      	mov	r3, r1
 8004582:	4640      	mov	r0, r8
 8004584:	4649      	mov	r1, r9
 8004586:	f7fb fe81 	bl	800028c <__adddf3>
 800458a:	4602      	mov	r2, r0
 800458c:	460b      	mov	r3, r1
 800458e:	4610      	mov	r0, r2
 8004590:	4619      	mov	r1, r3
 8004592:	f7fc fb29 	bl	8000be8 <__aeabi_d2f>
 8004596:	4602      	mov	r2, r0
 8004598:	683b      	ldr	r3, [r7, #0]
 800459a:	605a      	str	r2, [r3, #4]
	kalmanfilter->_last_estimate = kalmanfilter->_current_estimate;
 800459c:	683b      	ldr	r3, [r7, #0]
 800459e:	68da      	ldr	r2, [r3, #12]
 80045a0:	683b      	ldr	r3, [r7, #0]
 80045a2:	611a      	str	r2, [r3, #16]

	return kalmanfilter->_current_estimate;
 80045a4:	683b      	ldr	r3, [r7, #0]
 80045a6:	68db      	ldr	r3, [r3, #12]
 80045a8:	ee07 3a90 	vmov	s15, r3
}
 80045ac:	eeb0 0a67 	vmov.f32	s0, s15
 80045b0:	3708      	adds	r7, #8
 80045b2:	46bd      	mov	sp, r7
 80045b4:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80045b8:	3ff00000 	.word	0x3ff00000

080045bc <KalmanFilter>:

float getKalmanGain(KALMANFILTER_t *kalmanfilter) {
	return kalmanfilter->_kalman_gain;
}

void KalmanFilter (KALMANFILTER_t *kalmanfilter){
 80045bc:	b580      	push	{r7, lr}
 80045be:	b082      	sub	sp, #8
 80045c0:	af00      	add	r7, sp, #0
 80045c2:	6078      	str	r0, [r7, #4]
		kalmanfilter->kalman_output_tmp  = ((float)*(kalmanfilter->kalman_input))/10000.0;
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	69db      	ldr	r3, [r3, #28]
 80045c8:	881b      	ldrh	r3, [r3, #0]
 80045ca:	ee07 3a90 	vmov	s15, r3
 80045ce:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80045d2:	eddf 6a13 	vldr	s13, [pc, #76]	@ 8004620 <KalmanFilter+0x64>
 80045d6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
		kalmanfilter->kalman_output_tmp  = updateEstimate(kalmanfilter->kalman_output_tmp, kalmanfilter);
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 80045e6:	6878      	ldr	r0, [r7, #4]
 80045e8:	eeb0 0a67 	vmov.f32	s0, s15
 80045ec:	f7ff ff62 	bl	80044b4 <updateEstimate>
 80045f0:	eef0 7a40 	vmov.f32	s15, s0
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
		kalmanfilter->kalman_output_tmp  = (kalmanfilter->kalman_output_tmp)*10000.0;
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8004600:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 8004620 <KalmanFilter+0x64>
 8004604:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

		*(kalmanfilter->kalman_output )  = kalmanfilter->kalman_output_tmp ;
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	6a1b      	ldr	r3, [r3, #32]
 8004612:	687a      	ldr	r2, [r7, #4]
 8004614:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004616:	601a      	str	r2, [r3, #0]
}
 8004618:	bf00      	nop
 800461a:	3708      	adds	r7, #8
 800461c:	46bd      	mov	sp, r7
 800461e:	bd80      	pop	{r7, pc}
 8004620:	461c4000 	.word	0x461c4000

08004624 <Laser>:
 * Function Remarks		: NONE
 * Function Arguments	: *laser		, pointer to structure Laser_t
 * Function Return		: None
 * Function Example		: Laser(&lsr1);
 */
void Laser(Laser_t *laser){
 8004624:	b580      	push	{r7, lr}
 8004626:	b082      	sub	sp, #8
 8004628:	af00      	add	r7, sp, #0
 800462a:	6078      	str	r0, [r7, #4]
	laser->raw=((float)laser->rawCu/(float)laser->cnt);
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004632:	4610      	mov	r0, r2
 8004634:	4619      	mov	r1, r3
 8004636:	f7fc fbef 	bl	8000e18 <__aeabi_ul2f>
 800463a:	ee06 0a90 	vmov	s13, r0
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	68db      	ldr	r3, [r3, #12]
 8004642:	ee07 3a90 	vmov	s15, r3
 8004646:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800464a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	edc3 7a02 	vstr	s15, [r3, #8]
	laser->rawCu=0;
 8004654:	6879      	ldr	r1, [r7, #4]
 8004656:	f04f 0200 	mov.w	r2, #0
 800465a:	f04f 0300 	mov.w	r3, #0
 800465e:	e9c1 2300 	strd	r2, r3, [r1]
	laser->cnt=0;
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	2200      	movs	r2, #0
 8004666:	60da      	str	r2, [r3, #12]
	laser->rawDist=((laser->raw)*laser->ratio+laser->min_dist-laser->min_err)*100.0;
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	ed93 7a02 	vldr	s14, [r3, #8]
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	edd3 7a05 	vldr	s15, [r3, #20]
 8004674:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	edd3 7a04 	vldr	s15, [r3, #16]
 800467e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	edd3 7a08 	vldr	s15, [r3, #32]
 8004688:	ee77 7a67 	vsub.f32	s15, s14, s15
 800468c:	ed9f 7a0c 	vldr	s14, [pc, #48]	@ 80046c0 <Laser+0x9c>
 8004690:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	edc3 7a06 	vstr	s15, [r3, #24]
	KalmanFilter(&laser->kf);
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	3328      	adds	r3, #40	@ 0x28
 800469e:	4618      	mov	r0, r3
 80046a0:	f7ff ff8c 	bl	80045bc <KalmanFilter>
	laser->dist/=100.0;
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	ed93 7a07 	vldr	s14, [r3, #28]
 80046aa:	eddf 6a05 	vldr	s13, [pc, #20]	@ 80046c0 <Laser+0x9c>
 80046ae:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	edc3 7a07 	vstr	s15, [r3, #28]
}
 80046b8:	bf00      	nop
 80046ba:	3708      	adds	r7, #8
 80046bc:	46bd      	mov	sp, r7
 80046be:	bd80      	pop	{r7, pc}
 80046c0:	42c80000 	.word	0x42c80000

080046c4 <LaserUpdate>:
 * Function Arguments	: *laser		, pointer to structure Laser_t
 * 						  channel_no	, ADC channel
 * Function Return		: None
 * Function Example		: LaserUpdate(&lsr1, 0);
 */
void LaserUpdate(Laser_t *laser, uint8_t channel_no){
 80046c4:	e92d 03b0 	stmdb	sp!, {r4, r5, r7, r8, r9}
 80046c8:	b083      	sub	sp, #12
 80046ca:	af00      	add	r7, sp, #0
 80046cc:	6078      	str	r0, [r7, #4]
 80046ce:	460b      	mov	r3, r1
 80046d0:	70fb      	strb	r3, [r7, #3]
	laser->rawCu+=adc.ADC_value[channel_no];
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046d8:	78f9      	ldrb	r1, [r7, #3]
 80046da:	480d      	ldr	r0, [pc, #52]	@ (8004710 <LaserUpdate+0x4c>)
 80046dc:	3104      	adds	r1, #4
 80046de:	0049      	lsls	r1, r1, #1
 80046e0:	4401      	add	r1, r0
 80046e2:	8889      	ldrh	r1, [r1, #4]
 80046e4:	b289      	uxth	r1, r1
 80046e6:	2000      	movs	r0, #0
 80046e8:	460c      	mov	r4, r1
 80046ea:	4605      	mov	r5, r0
 80046ec:	eb12 0804 	adds.w	r8, r2, r4
 80046f0:	eb43 0905 	adc.w	r9, r3, r5
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	e9c3 8900 	strd	r8, r9, [r3]
	laser->cnt++;
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	68db      	ldr	r3, [r3, #12]
 80046fe:	1c5a      	adds	r2, r3, #1
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	60da      	str	r2, [r3, #12]
}
 8004704:	bf00      	nop
 8004706:	370c      	adds	r7, #12
 8004708:	46bd      	mov	sp, r7
 800470a:	e8bd 03b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9}
 800470e:	4770      	bx	lr
 8004710:	200090e4 	.word	0x200090e4

08004714 <main>:

#include "main.h"



int main(void) {
 8004714:	b580      	push	{r7, lr}
 8004716:	b0b2      	sub	sp, #200	@ 0xc8
 8004718:	af00      	add	r7, sp, #0
	set();
 800471a:	f005 fd0f 	bl	800a13c <set>
	Uarts=huart2;
 800471e:	4a52      	ldr	r2, [pc, #328]	@ (8004868 <main+0x154>)
 8004720:	4b52      	ldr	r3, [pc, #328]	@ (800486c <main+0x158>)
 8004722:	4610      	mov	r0, r2
 8004724:	4619      	mov	r1, r3
 8004726:	2344      	movs	r3, #68	@ 0x44
 8004728:	461a      	mov	r2, r3
 800472a:	f019 faec 	bl	801dd06 <memcpy>
	usbrxBuffer = xMessageBufferCreate(68);
 800472e:	2201      	movs	r2, #1
 8004730:	2100      	movs	r1, #0
 8004732:	2044      	movs	r0, #68	@ 0x44
 8004734:	f015 feb6 	bl	801a4a4 <xStreamBufferGenericCreate>
 8004738:	4603      	mov	r3, r0
 800473a:	4a4d      	ldr	r2, [pc, #308]	@ (8004870 <main+0x15c>)
 800473c:	6013      	str	r3, [r2, #0]

	const osThreadAttr_t MainTask_attributes = {
 800473e:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8004742:	2224      	movs	r2, #36	@ 0x24
 8004744:	2100      	movs	r1, #0
 8004746:	4618      	mov	r0, r3
 8004748:	f019 f9f9 	bl	801db3e <memset>
 800474c:	4b49      	ldr	r3, [pc, #292]	@ (8004874 <main+0x160>)
 800474e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8004752:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8004756:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800475a:	2318      	movs	r3, #24
 800475c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
				.name = "MainTask",
				.stack_size = 512 * 4,
				.priority = (osPriority_t) osPriorityNormal,
		};

		const osThreadAttr_t EmergencyTask_attributes = {
 8004760:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 8004764:	2224      	movs	r2, #36	@ 0x24
 8004766:	2100      	movs	r1, #0
 8004768:	4618      	mov	r0, r3
 800476a:	f019 f9e8 	bl	801db3e <memset>
 800476e:	4b42      	ldr	r3, [pc, #264]	@ (8004878 <main+0x164>)
 8004770:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004774:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004778:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800477c:	2318      	movs	r3, #24
 800477e:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
				.name = "EmergencyTask",
				.stack_size = 256 * 4,
				.priority = (osPriority_t) osPriorityNormal,
		};

		const osThreadAttr_t SecondTask_attributes = {
 8004782:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8004786:	2224      	movs	r2, #36	@ 0x24
 8004788:	2100      	movs	r1, #0
 800478a:	4618      	mov	r0, r3
 800478c:	f019 f9d7 	bl	801db3e <memset>
 8004790:	4b3a      	ldr	r3, [pc, #232]	@ (800487c <main+0x168>)
 8004792:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004794:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8004798:	673b      	str	r3, [r7, #112]	@ 0x70
 800479a:	2318      	movs	r3, #24
 800479c:	677b      	str	r3, [r7, #116]	@ 0x74
				.name = "SecondTask",
				.stack_size = 512 * 4,
				.priority = (osPriority_t) osPriorityNormal,
		};

		const osThreadAttr_t ThirdTask_attributes = {
 800479e:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80047a2:	2224      	movs	r2, #36	@ 0x24
 80047a4:	2100      	movs	r1, #0
 80047a6:	4618      	mov	r0, r3
 80047a8:	f019 f9c9 	bl	801db3e <memset>
 80047ac:	4b34      	ldr	r3, [pc, #208]	@ (8004880 <main+0x16c>)
 80047ae:	63bb      	str	r3, [r7, #56]	@ 0x38
 80047b0:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80047b4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80047b6:	2318      	movs	r3, #24
 80047b8:	653b      	str	r3, [r7, #80]	@ 0x50
				.name = "ThirdTask",
				.stack_size = 512 * 4,
				.priority = (osPriority_t) osPriorityNormal,
		};

		const osThreadAttr_t CalculationTask_attributes = {
 80047ba:	f107 0314 	add.w	r3, r7, #20
 80047be:	2224      	movs	r2, #36	@ 0x24
 80047c0:	2100      	movs	r1, #0
 80047c2:	4618      	mov	r0, r3
 80047c4:	f019 f9bb 	bl	801db3e <memset>
 80047c8:	4b2e      	ldr	r3, [pc, #184]	@ (8004884 <main+0x170>)
 80047ca:	617b      	str	r3, [r7, #20]
 80047cc:	f44f 6320 	mov.w	r3, #2560	@ 0xa00
 80047d0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80047d2:	2318      	movs	r3, #24
 80047d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
				.name = "CalculationTask",
				.stack_size = 256 * 10,
				.priority =	(osPriority_t) osPriorityNormal,
		};

		const osSemaphoreAttr_t CalcSemaphore_attributes = {
 80047d6:	1d3b      	adds	r3, r7, #4
 80047d8:	2200      	movs	r2, #0
 80047da:	601a      	str	r2, [r3, #0]
 80047dc:	605a      	str	r2, [r3, #4]
 80047de:	609a      	str	r2, [r3, #8]
 80047e0:	60da      	str	r2, [r3, #12]
 80047e2:	4b29      	ldr	r3, [pc, #164]	@ (8004888 <main+0x174>)
 80047e4:	607b      	str	r3, [r7, #4]
				.name = "CalcSemaphore"
		};

	osKernelInitialize();
 80047e6:	f014 fb05 	bl	8018df4 <osKernelInitialize>

	MainTaskHandle = osThreadNew(MainTask, NULL, &MainTask_attributes);
 80047ea:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80047ee:	461a      	mov	r2, r3
 80047f0:	2100      	movs	r1, #0
 80047f2:	4826      	ldr	r0, [pc, #152]	@ (800488c <main+0x178>)
 80047f4:	f014 fb48 	bl	8018e88 <osThreadNew>
 80047f8:	4603      	mov	r3, r0
 80047fa:	4a25      	ldr	r2, [pc, #148]	@ (8004890 <main+0x17c>)
 80047fc:	6013      	str	r3, [r2, #0]
	SecondTaskHandle = osThreadNew(usbTask, NULL, &SecondTask_attributes);
 80047fe:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8004802:	461a      	mov	r2, r3
 8004804:	2100      	movs	r1, #0
 8004806:	4823      	ldr	r0, [pc, #140]	@ (8004894 <main+0x180>)
 8004808:	f014 fb3e 	bl	8018e88 <osThreadNew>
 800480c:	4603      	mov	r3, r0
 800480e:	4a22      	ldr	r2, [pc, #136]	@ (8004898 <main+0x184>)
 8004810:	6013      	str	r3, [r2, #0]
	ThirdTaskHandle = osThreadNew(ThirdTask, NULL, &ThirdTask_attributes);
 8004812:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8004816:	461a      	mov	r2, r3
 8004818:	2100      	movs	r1, #0
 800481a:	4820      	ldr	r0, [pc, #128]	@ (800489c <main+0x188>)
 800481c:	f014 fb34 	bl	8018e88 <osThreadNew>
 8004820:	4603      	mov	r3, r0
 8004822:	4a1f      	ldr	r2, [pc, #124]	@ (80048a0 <main+0x18c>)
 8004824:	6013      	str	r3, [r2, #0]
	CalculationTaskHandle = osThreadNew(Calculation, NULL, &CalculationTask_attributes);
 8004826:	f107 0314 	add.w	r3, r7, #20
 800482a:	461a      	mov	r2, r3
 800482c:	2100      	movs	r1, #0
 800482e:	481d      	ldr	r0, [pc, #116]	@ (80048a4 <main+0x190>)
 8004830:	f014 fb2a 	bl	8018e88 <osThreadNew>
 8004834:	4603      	mov	r3, r0
 8004836:	4a1c      	ldr	r2, [pc, #112]	@ (80048a8 <main+0x194>)
 8004838:	6013      	str	r3, [r2, #0]
	CalcSemaphore = osSemaphoreNew(1, 0, &CalcSemaphore_attributes);
 800483a:	1d3b      	adds	r3, r7, #4
 800483c:	461a      	mov	r2, r3
 800483e:	2100      	movs	r1, #0
 8004840:	2001      	movs	r0, #1
 8004842:	f014 fbfb 	bl	801903c <osSemaphoreNew>
 8004846:	4603      	mov	r3, r0
 8004848:	4a18      	ldr	r2, [pc, #96]	@ (80048ac <main+0x198>)
 800484a:	6013      	str	r3, [r2, #0]
	EmergencyTaskHandle = osThreadNew(EmergencyTask, NULL, &EmergencyTask_attributes);
 800484c:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 8004850:	461a      	mov	r2, r3
 8004852:	2100      	movs	r1, #0
 8004854:	4816      	ldr	r0, [pc, #88]	@ (80048b0 <main+0x19c>)
 8004856:	f014 fb17 	bl	8018e88 <osThreadNew>
 800485a:	4603      	mov	r3, r0
 800485c:	4a15      	ldr	r2, [pc, #84]	@ (80048b4 <main+0x1a0>)
 800485e:	6013      	str	r3, [r2, #0]
	osKernelStart();
 8004860:	f014 faec 	bl	8018e3c <osKernelStart>
	while (1) {
 8004864:	bf00      	nop
 8004866:	e7fd      	b.n	8004864 <main+0x150>
 8004868:	20009c60 	.word	0x20009c60
 800486c:	20006874 	.word	0x20006874
 8004870:	20009030 	.word	0x20009030
 8004874:	080214c8 	.word	0x080214c8
 8004878:	080214d4 	.word	0x080214d4
 800487c:	080214e4 	.word	0x080214e4
 8004880:	080214f0 	.word	0x080214f0
 8004884:	080214fc 	.word	0x080214fc
 8004888:	0802150c 	.word	0x0802150c
 800488c:	08004a05 	.word	0x08004a05
 8004890:	20008d80 	.word	0x20008d80
 8004894:	08004bf5 	.word	0x08004bf5
 8004898:	20009028 	.word	0x20009028
 800489c:	08004c41 	.word	0x08004c41
 80048a0:	20008448 	.word	0x20008448
 80048a4:	08004c6d 	.word	0x08004c6d
 80048a8:	20008bf0 	.word	0x20008bf0
 80048ac:	20009ea4 	.word	0x20009ea4
 80048b0:	08004c95 	.word	0x08004c95
 80048b4:	20009a20 	.word	0x20009a20

080048b8 <TIM7_IRQHandler>:

	}
}


void TIM7_IRQHandler(void) { //500ms
 80048b8:	b580      	push	{r7, lr}
 80048ba:	af00      	add	r7, sp, #0
#ifdef perfect
	sys.transmit = 1;
#endif
	if (state == GPIOS || state == ENCODER || state == CHANGEUART) {
 80048bc:	4b39      	ldr	r3, [pc, #228]	@ (80049a4 <TIM7_IRQHandler+0xec>)
 80048be:	781b      	ldrb	r3, [r3, #0]
 80048c0:	2b01      	cmp	r3, #1
 80048c2:	d007      	beq.n	80048d4 <TIM7_IRQHandler+0x1c>
 80048c4:	4b37      	ldr	r3, [pc, #220]	@ (80049a4 <TIM7_IRQHandler+0xec>)
 80048c6:	781b      	ldrb	r3, [r3, #0]
 80048c8:	2b03      	cmp	r3, #3
 80048ca:	d003      	beq.n	80048d4 <TIM7_IRQHandler+0x1c>
 80048cc:	4b35      	ldr	r3, [pc, #212]	@ (80049a4 <TIM7_IRQHandler+0xec>)
 80048ce:	781b      	ldrb	r3, [r3, #0]
 80048d0:	2b07      	cmp	r3, #7
 80048d2:	d104      	bne.n	80048de <TIM7_IRQHandler+0x26>
		sys.transmit = 1;
 80048d4:	4a34      	ldr	r2, [pc, #208]	@ (80049a8 <TIM7_IRQHandler+0xf0>)
 80048d6:	6813      	ldr	r3, [r2, #0]
 80048d8:	f043 0301 	orr.w	r3, r3, #1
 80048dc:	6013      	str	r3, [r2, #0]
	}
	if (sys.i2c == 1||sys.can==1) {
 80048de:	4b32      	ldr	r3, [pc, #200]	@ (80049a8 <TIM7_IRQHandler+0xf0>)
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80048e6:	b2db      	uxtb	r3, r3
 80048e8:	2b01      	cmp	r3, #1
 80048ea:	d006      	beq.n	80048fa <TIM7_IRQHandler+0x42>
 80048ec:	4b2e      	ldr	r3, [pc, #184]	@ (80049a8 <TIM7_IRQHandler+0xf0>)
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	f3c3 23c0 	ubfx	r3, r3, #11, #1
 80048f4:	b2db      	uxtb	r3, r3
 80048f6:	2b01      	cmp	r3, #1
 80048f8:	d105      	bne.n	8004906 <TIM7_IRQHandler+0x4e>
		count++;
 80048fa:	4b2c      	ldr	r3, [pc, #176]	@ (80049ac <TIM7_IRQHandler+0xf4>)
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	3301      	adds	r3, #1
 8004900:	4a2a      	ldr	r2, [pc, #168]	@ (80049ac <TIM7_IRQHandler+0xf4>)
 8004902:	6013      	str	r3, [r2, #0]
 8004904:	e011      	b.n	800492a <TIM7_IRQHandler+0x72>
	} else {
		count = 0;
 8004906:	4b29      	ldr	r3, [pc, #164]	@ (80049ac <TIM7_IRQHandler+0xf4>)
 8004908:	2200      	movs	r2, #0
 800490a:	601a      	str	r2, [r3, #0]
		led2=!led2;
 800490c:	4b28      	ldr	r3, [pc, #160]	@ (80049b0 <TIM7_IRQHandler+0xf8>)
 800490e:	785b      	ldrb	r3, [r3, #1]
 8004910:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004914:	b2db      	uxtb	r3, r3
 8004916:	4a26      	ldr	r2, [pc, #152]	@ (80049b0 <TIM7_IRQHandler+0xf8>)
 8004918:	2b00      	cmp	r3, #0
 800491a:	bf0c      	ite	eq
 800491c:	2301      	moveq	r3, #1
 800491e:	2300      	movne	r3, #0
 8004920:	b2d9      	uxtb	r1, r3
 8004922:	7853      	ldrb	r3, [r2, #1]
 8004924:	f361 1386 	bfi	r3, r1, #6, #1
 8004928:	7053      	strb	r3, [r2, #1]
	}
	if (count > 2 && sys.i2c == 1) {
 800492a:	4b20      	ldr	r3, [pc, #128]	@ (80049ac <TIM7_IRQHandler+0xf4>)
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	2b02      	cmp	r3, #2
 8004930:	dd17      	ble.n	8004962 <TIM7_IRQHandler+0xaa>
 8004932:	4b1d      	ldr	r3, [pc, #116]	@ (80049a8 <TIM7_IRQHandler+0xf0>)
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800493a:	b2db      	uxtb	r3, r3
 800493c:	2b01      	cmp	r3, #1
 800493e:	d110      	bne.n	8004962 <TIM7_IRQHandler+0xaa>
		sprintf(buff_transmit, "\nFailed!\n\n");
 8004940:	491c      	ldr	r1, [pc, #112]	@ (80049b4 <TIM7_IRQHandler+0xfc>)
 8004942:	481d      	ldr	r0, [pc, #116]	@ (80049b8 <TIM7_IRQHandler+0x100>)
 8004944:	f019 f87e 	bl	801da44 <siprintf>
		UART_Send();
 8004948:	f005 ffe8 	bl	800a91c <UART_Send>
		sys.transmit = 1;
 800494c:	4a16      	ldr	r2, [pc, #88]	@ (80049a8 <TIM7_IRQHandler+0xf0>)
 800494e:	6813      	ldr	r3, [r2, #0]
 8004950:	f043 0301 	orr.w	r3, r3, #1
 8004954:	6013      	str	r3, [r2, #0]
		sys.i2c = 0;
 8004956:	4a14      	ldr	r2, [pc, #80]	@ (80049a8 <TIM7_IRQHandler+0xf0>)
 8004958:	6813      	ldr	r3, [r2, #0]
 800495a:	f36f 13c7 	bfc	r3, #7, #1
 800495e:	6013      	str	r3, [r2, #0]
 8004960:	e01a      	b.n	8004998 <TIM7_IRQHandler+0xe0>
	} else if (count > 2 && sys.can == 1) {
 8004962:	4b12      	ldr	r3, [pc, #72]	@ (80049ac <TIM7_IRQHandler+0xf4>)
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	2b02      	cmp	r3, #2
 8004968:	dd16      	ble.n	8004998 <TIM7_IRQHandler+0xe0>
 800496a:	4b0f      	ldr	r3, [pc, #60]	@ (80049a8 <TIM7_IRQHandler+0xf0>)
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	f3c3 23c0 	ubfx	r3, r3, #11, #1
 8004972:	b2db      	uxtb	r3, r3
 8004974:	2b01      	cmp	r3, #1
 8004976:	d10f      	bne.n	8004998 <TIM7_IRQHandler+0xe0>
		sprintf(buff_transmit, "\nFailed!\n\n");
 8004978:	490e      	ldr	r1, [pc, #56]	@ (80049b4 <TIM7_IRQHandler+0xfc>)
 800497a:	480f      	ldr	r0, [pc, #60]	@ (80049b8 <TIM7_IRQHandler+0x100>)
 800497c:	f019 f862 	bl	801da44 <siprintf>
		UART_Send();
 8004980:	f005 ffcc 	bl	800a91c <UART_Send>
		sys.transmit = 1;
 8004984:	4a08      	ldr	r2, [pc, #32]	@ (80049a8 <TIM7_IRQHandler+0xf0>)
 8004986:	6813      	ldr	r3, [r2, #0]
 8004988:	f043 0301 	orr.w	r3, r3, #1
 800498c:	6013      	str	r3, [r2, #0]
		sys.can = 0;
 800498e:	4a06      	ldr	r2, [pc, #24]	@ (80049a8 <TIM7_IRQHandler+0xf0>)
 8004990:	6813      	ldr	r3, [r2, #0]
 8004992:	f36f 23cb 	bfc	r3, #11, #1
 8004996:	6013      	str	r3, [r2, #0]
	}

	HAL_TIM_IRQHandler(&htim7);
 8004998:	4808      	ldr	r0, [pc, #32]	@ (80049bc <TIM7_IRQHandler+0x104>)
 800499a:	f00e ff1b 	bl	80137d4 <HAL_TIM_IRQHandler>
}
 800499e:	bf00      	nop
 80049a0:	bd80      	pop	{r7, pc}
 80049a2:	bf00      	nop
 80049a4:	20008d24 	.word	0x20008d24
 80049a8:	20008bf8 	.word	0x20008bf8
 80049ac:	20001640 	.word	0x20001640
 80049b0:	40020814 	.word	0x40020814
 80049b4:	0802151c 	.word	0x0802151c
 80049b8:	20009a84 	.word	0x20009a84
 80049bc:	200069a8 	.word	0x200069a8

080049c0 <TIM6_DAC_IRQHandler>:


void TIM6_DAC_IRQHandler(void) { //20ms
 80049c0:	b580      	push	{r7, lr}
 80049c2:	af00      	add	r7, sp, #0

	osSemaphoreRelease(CalcSemaphore);
 80049c4:	4b0c      	ldr	r3, [pc, #48]	@ (80049f8 <TIM6_DAC_IRQHandler+0x38>)
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	4618      	mov	r0, r3
 80049ca:	f014 fc13 	bl	80191f4 <osSemaphoreRelease>
	led1 = !led1;
 80049ce:	4b0b      	ldr	r3, [pc, #44]	@ (80049fc <TIM6_DAC_IRQHandler+0x3c>)
 80049d0:	785b      	ldrb	r3, [r3, #1]
 80049d2:	f003 0320 	and.w	r3, r3, #32
 80049d6:	b2db      	uxtb	r3, r3
 80049d8:	4a08      	ldr	r2, [pc, #32]	@ (80049fc <TIM6_DAC_IRQHandler+0x3c>)
 80049da:	2b00      	cmp	r3, #0
 80049dc:	bf0c      	ite	eq
 80049de:	2301      	moveq	r3, #1
 80049e0:	2300      	movne	r3, #0
 80049e2:	b2d9      	uxtb	r1, r3
 80049e4:	7853      	ldrb	r3, [r2, #1]
 80049e6:	f361 1345 	bfi	r3, r1, #5, #1
 80049ea:	7053      	strb	r3, [r2, #1]
	HAL_TIM_IRQHandler(&htim6);
 80049ec:	4804      	ldr	r0, [pc, #16]	@ (8004a00 <TIM6_DAC_IRQHandler+0x40>)
 80049ee:	f00e fef1 	bl	80137d4 <HAL_TIM_IRQHandler>
}
 80049f2:	bf00      	nop
 80049f4:	bd80      	pop	{r7, pc}
 80049f6:	bf00      	nop
 80049f8:	20009ea4 	.word	0x20009ea4
 80049fc:	40020814 	.word	0x40020814
 8004a00:	200066c8 	.word	0x200066c8

08004a04 <MainTask>:

void MainTask(void *argument) {
 8004a04:	b580      	push	{r7, lr}
 8004a06:	b082      	sub	sp, #8
 8004a08:	af00      	add	r7, sp, #0
 8004a0a:	6078      	str	r0, [r7, #4]
#ifdef newpin
	HAL_UART_Receive_IT(&huart1,buff_receive,1);
#endif
	HAL_UART_Receive_IT(&huart2,buff_receive,1);
 8004a0c:	2201      	movs	r2, #1
 8004a0e:	4968      	ldr	r1, [pc, #416]	@ (8004bb0 <MainTask+0x1ac>)
 8004a10:	4868      	ldr	r0, [pc, #416]	@ (8004bb4 <MainTask+0x1b0>)
 8004a12:	f00f fe18 	bl	8014646 <HAL_UART_Receive_IT>
	HAL_UART_Receive_IT(&huart3,buff_receive,1);
 8004a16:	2201      	movs	r2, #1
 8004a18:	4965      	ldr	r1, [pc, #404]	@ (8004bb0 <MainTask+0x1ac>)
 8004a1a:	4867      	ldr	r0, [pc, #412]	@ (8004bb8 <MainTask+0x1b4>)
 8004a1c:	f00f fe13 	bl	8014646 <HAL_UART_Receive_IT>
	HAL_UART_Receive_IT(&huart4,buff_receive,1);
 8004a20:	2201      	movs	r2, #1
 8004a22:	4963      	ldr	r1, [pc, #396]	@ (8004bb0 <MainTask+0x1ac>)
 8004a24:	4865      	ldr	r0, [pc, #404]	@ (8004bbc <MainTask+0x1b8>)
 8004a26:	f00f fe0e 	bl	8014646 <HAL_UART_Receive_IT>
	HAL_UART_Receive_IT(&huart5,buff_receive,1);
 8004a2a:	2201      	movs	r2, #1
 8004a2c:	4960      	ldr	r1, [pc, #384]	@ (8004bb0 <MainTask+0x1ac>)
 8004a2e:	4864      	ldr	r0, [pc, #400]	@ (8004bc0 <MainTask+0x1bc>)
 8004a30:	f00f fe09 	bl	8014646 <HAL_UART_Receive_IT>
#ifndef perfect
	HAL_SPI_Receive_IT(&hspi1,(uint8_t*) buff_transmit, 1);
 8004a34:	2201      	movs	r2, #1
 8004a36:	4963      	ldr	r1, [pc, #396]	@ (8004bc4 <MainTask+0x1c0>)
 8004a38:	4863      	ldr	r0, [pc, #396]	@ (8004bc8 <MainTask+0x1c4>)
 8004a3a:	f00d fe1d 	bl	8012678 <HAL_SPI_Receive_IT>
#endif
	memcpy(&complete,"S",1);
 8004a3e:	4b63      	ldr	r3, [pc, #396]	@ (8004bcc <MainTask+0x1c8>)
 8004a40:	2253      	movs	r2, #83	@ 0x53
 8004a42:	701a      	strb	r2, [r3, #0]

	while(1)
	{
		if (sys.i2c == 1) {
 8004a44:	4b62      	ldr	r3, [pc, #392]	@ (8004bd0 <MainTask+0x1cc>)
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8004a4c:	b2db      	uxtb	r3, r3
 8004a4e:	2b01      	cmp	r3, #1
 8004a50:	d15f      	bne.n	8004b12 <MainTask+0x10e>
			switch (i2c_state) {
 8004a52:	4b60      	ldr	r3, [pc, #384]	@ (8004bd4 <MainTask+0x1d0>)
 8004a54:	781b      	ldrb	r3, [r3, #0]
 8004a56:	3b01      	subs	r3, #1
 8004a58:	2b05      	cmp	r3, #5
 8004a5a:	d857      	bhi.n	8004b0c <MainTask+0x108>
 8004a5c:	a201      	add	r2, pc, #4	@ (adr r2, 8004a64 <MainTask+0x60>)
 8004a5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a62:	bf00      	nop
 8004a64:	08004a7d 	.word	0x08004a7d
 8004a68:	08004a95 	.word	0x08004a95
 8004a6c:	08004aad 	.word	0x08004aad
 8004a70:	08004ac5 	.word	0x08004ac5
 8004a74:	08004add 	.word	0x08004add
 8004a78:	08004af5 	.word	0x08004af5
			case 1:
				HAL_I2C_Slave_Receive_IT(&hi2c2, (uint8_t*) buff_transmit, 1);
 8004a7c:	2201      	movs	r2, #1
 8004a7e:	4951      	ldr	r1, [pc, #324]	@ (8004bc4 <MainTask+0x1c0>)
 8004a80:	4855      	ldr	r0, [pc, #340]	@ (8004bd8 <MainTask+0x1d4>)
 8004a82:	f009 fcc1 	bl	800e408 <HAL_I2C_Slave_Receive_IT>
				I2CSend(&hi2c1, main_board_2, 1, complete);
 8004a86:	4b51      	ldr	r3, [pc, #324]	@ (8004bcc <MainTask+0x1c8>)
 8004a88:	2201      	movs	r2, #1
 8004a8a:	2109      	movs	r1, #9
 8004a8c:	4853      	ldr	r0, [pc, #332]	@ (8004bdc <MainTask+0x1d8>)
 8004a8e:	f7ff fadb 	bl	8004048 <I2CSend>
				break;
 8004a92:	e03b      	b.n	8004b0c <MainTask+0x108>
			case 2:
				HAL_I2C_Slave_Receive_IT(&hi2c1, (uint8_t*) buff_transmit, 1);
 8004a94:	2201      	movs	r2, #1
 8004a96:	494b      	ldr	r1, [pc, #300]	@ (8004bc4 <MainTask+0x1c0>)
 8004a98:	4850      	ldr	r0, [pc, #320]	@ (8004bdc <MainTask+0x1d8>)
 8004a9a:	f009 fcb5 	bl	800e408 <HAL_I2C_Slave_Receive_IT>
				I2CSend(&hi2c2, main_board_1, 1, complete);
 8004a9e:	4b4b      	ldr	r3, [pc, #300]	@ (8004bcc <MainTask+0x1c8>)
 8004aa0:	2201      	movs	r2, #1
 8004aa2:	2108      	movs	r1, #8
 8004aa4:	484c      	ldr	r0, [pc, #304]	@ (8004bd8 <MainTask+0x1d4>)
 8004aa6:	f7ff facf 	bl	8004048 <I2CSend>
				break;
 8004aaa:	e02f      	b.n	8004b0c <MainTask+0x108>
#ifndef newboard
			case 3:
				HAL_I2C_Slave_Receive_IT(&hi2c3, (uint8_t*) buff_transmit, 1);
 8004aac:	2201      	movs	r2, #1
 8004aae:	4945      	ldr	r1, [pc, #276]	@ (8004bc4 <MainTask+0x1c0>)
 8004ab0:	484b      	ldr	r0, [pc, #300]	@ (8004be0 <MainTask+0x1dc>)
 8004ab2:	f009 fca9 	bl	800e408 <HAL_I2C_Slave_Receive_IT>
				I2CSend(&hi2c1, main_board_3, 1, complete);
 8004ab6:	4b45      	ldr	r3, [pc, #276]	@ (8004bcc <MainTask+0x1c8>)
 8004ab8:	2201      	movs	r2, #1
 8004aba:	210a      	movs	r1, #10
 8004abc:	4847      	ldr	r0, [pc, #284]	@ (8004bdc <MainTask+0x1d8>)
 8004abe:	f7ff fac3 	bl	8004048 <I2CSend>
				break;
 8004ac2:	e023      	b.n	8004b0c <MainTask+0x108>
			case 4:
				HAL_I2C_Slave_Receive_IT(&hi2c1, (uint8_t*) buff_transmit, 1);
 8004ac4:	2201      	movs	r2, #1
 8004ac6:	493f      	ldr	r1, [pc, #252]	@ (8004bc4 <MainTask+0x1c0>)
 8004ac8:	4844      	ldr	r0, [pc, #272]	@ (8004bdc <MainTask+0x1d8>)
 8004aca:	f009 fc9d 	bl	800e408 <HAL_I2C_Slave_Receive_IT>
				I2CSend(&hi2c3, main_board_1, 1, complete);
 8004ace:	4b3f      	ldr	r3, [pc, #252]	@ (8004bcc <MainTask+0x1c8>)
 8004ad0:	2201      	movs	r2, #1
 8004ad2:	2108      	movs	r1, #8
 8004ad4:	4842      	ldr	r0, [pc, #264]	@ (8004be0 <MainTask+0x1dc>)
 8004ad6:	f7ff fab7 	bl	8004048 <I2CSend>
				break;
 8004ada:	e017      	b.n	8004b0c <MainTask+0x108>
			case 5:
				HAL_I2C_Slave_Receive_IT(&hi2c3, (uint8_t*) buff_transmit, 1);
 8004adc:	2201      	movs	r2, #1
 8004ade:	4939      	ldr	r1, [pc, #228]	@ (8004bc4 <MainTask+0x1c0>)
 8004ae0:	483f      	ldr	r0, [pc, #252]	@ (8004be0 <MainTask+0x1dc>)
 8004ae2:	f009 fc91 	bl	800e408 <HAL_I2C_Slave_Receive_IT>
				I2CSend(&hi2c2, main_board_3, 1, complete);
 8004ae6:	4b39      	ldr	r3, [pc, #228]	@ (8004bcc <MainTask+0x1c8>)
 8004ae8:	2201      	movs	r2, #1
 8004aea:	210a      	movs	r1, #10
 8004aec:	483a      	ldr	r0, [pc, #232]	@ (8004bd8 <MainTask+0x1d4>)
 8004aee:	f7ff faab 	bl	8004048 <I2CSend>
				break;
 8004af2:	e00b      	b.n	8004b0c <MainTask+0x108>
			case 6:
				HAL_I2C_Slave_Receive_IT(&hi2c2, (uint8_t*) buff_transmit, 1);
 8004af4:	2201      	movs	r2, #1
 8004af6:	4933      	ldr	r1, [pc, #204]	@ (8004bc4 <MainTask+0x1c0>)
 8004af8:	4837      	ldr	r0, [pc, #220]	@ (8004bd8 <MainTask+0x1d4>)
 8004afa:	f009 fc85 	bl	800e408 <HAL_I2C_Slave_Receive_IT>
				I2CSend(&hi2c3, main_board_2, 1, complete);
 8004afe:	4b33      	ldr	r3, [pc, #204]	@ (8004bcc <MainTask+0x1c8>)
 8004b00:	2201      	movs	r2, #1
 8004b02:	2109      	movs	r1, #9
 8004b04:	4836      	ldr	r0, [pc, #216]	@ (8004be0 <MainTask+0x1dc>)
 8004b06:	f7ff fa9f 	bl	8004048 <I2CSend>
				break;
 8004b0a:	bf00      	nop
#endif

			}
			i2c_state = 0;
 8004b0c:	4b31      	ldr	r3, [pc, #196]	@ (8004bd4 <MainTask+0x1d0>)
 8004b0e:	2200      	movs	r2, #0
 8004b10:	701a      	strb	r2, [r3, #0]
		}

		if (sys.uart == 1) {
 8004b12:	4b2f      	ldr	r3, [pc, #188]	@ (8004bd0 <MainTask+0x1cc>)
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8004b1a:	b2db      	uxtb	r3, r3
 8004b1c:	2b01      	cmp	r3, #1
 8004b1e:	d191      	bne.n	8004a44 <MainTask+0x40>
			sprintf(buff_transmit, "UART channel has been changed to %d\r\n",UART_state);
 8004b20:	4b30      	ldr	r3, [pc, #192]	@ (8004be4 <MainTask+0x1e0>)
 8004b22:	781b      	ldrb	r3, [r3, #0]
 8004b24:	461a      	mov	r2, r3
 8004b26:	4930      	ldr	r1, [pc, #192]	@ (8004be8 <MainTask+0x1e4>)
 8004b28:	4826      	ldr	r0, [pc, #152]	@ (8004bc4 <MainTask+0x1c0>)
 8004b2a:	f018 ff8b 	bl	801da44 <siprintf>
			UART_Send();
 8004b2e:	f005 fef5 	bl	800a91c <UART_Send>
			switch (UART_state) {
 8004b32:	4b2c      	ldr	r3, [pc, #176]	@ (8004be4 <MainTask+0x1e0>)
 8004b34:	781b      	ldrb	r3, [r3, #0]
 8004b36:	3b02      	subs	r3, #2
 8004b38:	2b03      	cmp	r3, #3
 8004b3a:	d82f      	bhi.n	8004b9c <MainTask+0x198>
 8004b3c:	a201      	add	r2, pc, #4	@ (adr r2, 8004b44 <MainTask+0x140>)
 8004b3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b42:	bf00      	nop
 8004b44:	08004b55 	.word	0x08004b55
 8004b48:	08004b67 	.word	0x08004b67
 8004b4c:	08004b79 	.word	0x08004b79
 8004b50:	08004b8b 	.word	0x08004b8b
			case 1:
				Uarts=huart1;
				break;
#endif
			case 2:
				Uarts = huart2;
 8004b54:	4a25      	ldr	r2, [pc, #148]	@ (8004bec <MainTask+0x1e8>)
 8004b56:	4b17      	ldr	r3, [pc, #92]	@ (8004bb4 <MainTask+0x1b0>)
 8004b58:	4610      	mov	r0, r2
 8004b5a:	4619      	mov	r1, r3
 8004b5c:	2344      	movs	r3, #68	@ 0x44
 8004b5e:	461a      	mov	r2, r3
 8004b60:	f019 f8d1 	bl	801dd06 <memcpy>
				break;
 8004b64:	e01a      	b.n	8004b9c <MainTask+0x198>
			case 3:
				Uarts = huart3;
 8004b66:	4a21      	ldr	r2, [pc, #132]	@ (8004bec <MainTask+0x1e8>)
 8004b68:	4b13      	ldr	r3, [pc, #76]	@ (8004bb8 <MainTask+0x1b4>)
 8004b6a:	4610      	mov	r0, r2
 8004b6c:	4619      	mov	r1, r3
 8004b6e:	2344      	movs	r3, #68	@ 0x44
 8004b70:	461a      	mov	r2, r3
 8004b72:	f019 f8c8 	bl	801dd06 <memcpy>
				break;
 8004b76:	e011      	b.n	8004b9c <MainTask+0x198>
			case 4:
				Uarts = huart4;
 8004b78:	4a1c      	ldr	r2, [pc, #112]	@ (8004bec <MainTask+0x1e8>)
 8004b7a:	4b10      	ldr	r3, [pc, #64]	@ (8004bbc <MainTask+0x1b8>)
 8004b7c:	4610      	mov	r0, r2
 8004b7e:	4619      	mov	r1, r3
 8004b80:	2344      	movs	r3, #68	@ 0x44
 8004b82:	461a      	mov	r2, r3
 8004b84:	f019 f8bf 	bl	801dd06 <memcpy>
				break;
 8004b88:	e008      	b.n	8004b9c <MainTask+0x198>
			case 5:
				Uarts = huart5;
 8004b8a:	4a18      	ldr	r2, [pc, #96]	@ (8004bec <MainTask+0x1e8>)
 8004b8c:	4b0c      	ldr	r3, [pc, #48]	@ (8004bc0 <MainTask+0x1bc>)
 8004b8e:	4610      	mov	r0, r2
 8004b90:	4619      	mov	r1, r3
 8004b92:	2344      	movs	r3, #68	@ 0x44
 8004b94:	461a      	mov	r2, r3
 8004b96:	f019 f8b6 	bl	801dd06 <memcpy>
				break;
 8004b9a:	bf00      	nop
			}
			sys.uart = 0;
 8004b9c:	4a0c      	ldr	r2, [pc, #48]	@ (8004bd0 <MainTask+0x1cc>)
 8004b9e:	6813      	ldr	r3, [r2, #0]
 8004ba0:	f36f 1386 	bfc	r3, #6, #1
 8004ba4:	6013      	str	r3, [r2, #0]
			state = CHANGEUART;
 8004ba6:	4b12      	ldr	r3, [pc, #72]	@ (8004bf0 <MainTask+0x1ec>)
 8004ba8:	2207      	movs	r2, #7
 8004baa:	701a      	strb	r2, [r3, #0]
		if (sys.i2c == 1) {
 8004bac:	e74a      	b.n	8004a44 <MainTask+0x40>
 8004bae:	bf00      	nop
 8004bb0:	20009e50 	.word	0x20009e50
 8004bb4:	20006874 	.word	0x20006874
 8004bb8:	20006300 	.word	0x20006300
 8004bbc:	200067e8 	.word	0x200067e8
 8004bc0:	20006484 	.word	0x20006484
 8004bc4:	20009a84 	.word	0x20009a84
 8004bc8:	20009924 	.word	0x20009924
 8004bcc:	20007e70 	.word	0x20007e70
 8004bd0:	20008bf8 	.word	0x20008bf8
 8004bd4:	20008bf4 	.word	0x20008bf4
 8004bd8:	20007120 	.word	0x20007120
 8004bdc:	200070cc 	.word	0x200070cc
 8004be0:	20006f14 	.word	0x20006f14
 8004be4:	20008cdc 	.word	0x20008cdc
 8004be8:	08021528 	.word	0x08021528
 8004bec:	20009c60 	.word	0x20009c60
 8004bf0:	20008d24 	.word	0x20008d24

08004bf4 <usbTask>:
		}

	}
}

void usbTask(void *argument) {
 8004bf4:	b580      	push	{r7, lr}
 8004bf6:	b092      	sub	sp, #72	@ 0x48
 8004bf8:	af00      	add	r7, sp, #0
 8004bfa:	6078      	str	r0, [r7, #4]
	{

	}
#else
	uint8_t UsbDataOut[64];
	MX_USB_DEVICE_Init();
 8004bfc:	f001 ff68 	bl	8006ad0 <MX_USB_DEVICE_Init>
	//	usbParserinit();
	//	usbPrint();
	for (;;) {

		if(sys.usb == 1){
 8004c00:	4b0c      	ldr	r3, [pc, #48]	@ (8004c34 <usbTask+0x40>)
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	f3c3 3300 	ubfx	r3, r3, #12, #1
 8004c08:	b2db      	uxtb	r3, r3
 8004c0a:	2b01      	cmp	r3, #1
 8004c0c:	d1f8      	bne.n	8004c00 <usbTask+0xc>

			sprintf(UsbDataOut,"USB port is working properly\r\n");
 8004c0e:	f107 0308 	add.w	r3, r7, #8
 8004c12:	4909      	ldr	r1, [pc, #36]	@ (8004c38 <usbTask+0x44>)
 8004c14:	4618      	mov	r0, r3
 8004c16:	f018 ff15 	bl	801da44 <siprintf>

			CDC_Transmit_FS(UsbDataOut, sizeof(UsbDataOut));
 8004c1a:	f107 0308 	add.w	r3, r7, #8
 8004c1e:	2140      	movs	r1, #64	@ 0x40
 8004c20:	4618      	mov	r0, r3
 8004c22:	f002 f81b 	bl	8006c5c <CDC_Transmit_FS>

			sprintf(UsbDataOut,"\0");
 8004c26:	f107 0308 	add.w	r3, r7, #8
 8004c2a:	4904      	ldr	r1, [pc, #16]	@ (8004c3c <usbTask+0x48>)
 8004c2c:	4618      	mov	r0, r3
 8004c2e:	f018 ff09 	bl	801da44 <siprintf>
		if(sys.usb == 1){
 8004c32:	e7e5      	b.n	8004c00 <usbTask+0xc>
 8004c34:	20008bf8 	.word	0x20008bf8
 8004c38:	08021550 	.word	0x08021550
 8004c3c:	08021570 	.word	0x08021570

08004c40 <ThirdTask>:
			//			}
		}
	}
#endif
}
void ThirdTask(void *argument) {
 8004c40:	b580      	push	{r7, lr}
 8004c42:	b082      	sub	sp, #8
 8004c44:	af00      	add	r7, sp, #0
 8004c46:	6078      	str	r0, [r7, #4]
	sys.transmit = 1;
 8004c48:	4a06      	ldr	r2, [pc, #24]	@ (8004c64 <ThirdTask+0x24>)
 8004c4a:	6813      	ldr	r3, [r2, #0]
 8004c4c:	f043 0301 	orr.w	r3, r3, #1
 8004c50:	6013      	str	r3, [r2, #0]
	led3=1;
 8004c52:	4a05      	ldr	r2, [pc, #20]	@ (8004c68 <ThirdTask+0x28>)
 8004c54:	7853      	ldrb	r3, [r2, #1]
 8004c56:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004c5a:	7053      	strb	r3, [r2, #1]
	while (1) {
		//prompt messages
#ifndef perfect
		Prompt();
 8004c5c:	f005 fe74 	bl	800a948 <Prompt>
 8004c60:	e7fc      	b.n	8004c5c <ThirdTask+0x1c>
 8004c62:	bf00      	nop
 8004c64:	20008bf8 	.word	0x20008bf8
 8004c68:	40020814 	.word	0x40020814

08004c6c <Calculation>:
			CAN_TxMsg(&hcan2, 32, complete, 1);
		}
#endif
	}
}
void Calculation(void *argument) { //20ms
 8004c6c:	b580      	push	{r7, lr}
 8004c6e:	b082      	sub	sp, #8
 8004c70:	af00      	add	r7, sp, #0
 8004c72:	6078      	str	r0, [r7, #4]
	while (1) {

		osSemaphoreAcquire(CalcSemaphore, osWaitForever);
 8004c74:	4b05      	ldr	r3, [pc, #20]	@ (8004c8c <Calculation+0x20>)
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8004c7c:	4618      	mov	r0, r3
 8004c7e:	f014 fa67 	bl	8019150 <osSemaphoreAcquire>
		RBMS_5ms(&rbms1);
 8004c82:	4803      	ldr	r0, [pc, #12]	@ (8004c90 <Calculation+0x24>)
 8004c84:	f001 fbc0 	bl	8006408 <RBMS_5ms>
		osSemaphoreAcquire(CalcSemaphore, osWaitForever);
 8004c88:	bf00      	nop
 8004c8a:	e7f3      	b.n	8004c74 <Calculation+0x8>
 8004c8c:	20009ea4 	.word	0x20009ea4
 8004c90:	2000a3c4 	.word	0x2000a3c4

08004c94 <EmergencyTask>:

	}
}
void EmergencyTask(void *argument) {
 8004c94:	b580      	push	{r7, lr}
 8004c96:	b09e      	sub	sp, #120	@ 0x78
 8004c98:	af00      	add	r7, sp, #0
 8004c9a:	6078      	str	r0, [r7, #4]

	for (;;) {

		if (ps4.button == TOUCH) {
 8004c9c:	4b31      	ldr	r3, [pc, #196]	@ (8004d64 <EmergencyTask+0xd0>)
 8004c9e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ca0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004ca4:	d1fa      	bne.n	8004c9c <EmergencyTask+0x8>
			sys.flags=0;
 8004ca6:	4b30      	ldr	r3, [pc, #192]	@ (8004d68 <EmergencyTask+0xd4>)
 8004ca8:	2200      	movs	r2, #0
 8004caa:	601a      	str	r2, [r3, #0]
			osThreadTerminate(MainTaskHandle);
 8004cac:	4b2f      	ldr	r3, [pc, #188]	@ (8004d6c <EmergencyTask+0xd8>)
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	4618      	mov	r0, r3
 8004cb2:	f014 f97b 	bl	8018fac <osThreadTerminate>
			osThreadTerminate(SecondTaskHandle);
 8004cb6:	4b2e      	ldr	r3, [pc, #184]	@ (8004d70 <EmergencyTask+0xdc>)
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	4618      	mov	r0, r3
 8004cbc:	f014 f976 	bl	8018fac <osThreadTerminate>
			osThreadTerminate(ThirdTaskHandle);
 8004cc0:	4b2c      	ldr	r3, [pc, #176]	@ (8004d74 <EmergencyTask+0xe0>)
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	4618      	mov	r0, r3
 8004cc6:	f014 f971 	bl	8018fac <osThreadTerminate>
			osDelay(5);
 8004cca:	2005      	movs	r0, #5
 8004ccc:	f014 f99b 	bl	8019006 <osDelay>

			const osThreadAttr_t MainTask_attributes = { .name = "MainTask",
 8004cd0:	f107 030c 	add.w	r3, r7, #12
 8004cd4:	2224      	movs	r2, #36	@ 0x24
 8004cd6:	2100      	movs	r1, #0
 8004cd8:	4618      	mov	r0, r3
 8004cda:	f018 ff30 	bl	801db3e <memset>
 8004cde:	4b26      	ldr	r3, [pc, #152]	@ (8004d78 <EmergencyTask+0xe4>)
 8004ce0:	60fb      	str	r3, [r7, #12]
 8004ce2:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8004ce6:	623b      	str	r3, [r7, #32]
 8004ce8:	2318      	movs	r3, #24
 8004cea:	627b      	str	r3, [r7, #36]	@ 0x24
					.stack_size = 512 * 4, .priority =
							(osPriority_t) osPriorityNormal, };

			const osThreadAttr_t SecondTask_attributes = { .name = "SecondTask",
 8004cec:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8004cf0:	2224      	movs	r2, #36	@ 0x24
 8004cf2:	2100      	movs	r1, #0
 8004cf4:	4618      	mov	r0, r3
 8004cf6:	f018 ff22 	bl	801db3e <memset>
 8004cfa:	4b20      	ldr	r3, [pc, #128]	@ (8004d7c <EmergencyTask+0xe8>)
 8004cfc:	633b      	str	r3, [r7, #48]	@ 0x30
 8004cfe:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8004d02:	647b      	str	r3, [r7, #68]	@ 0x44
 8004d04:	2318      	movs	r3, #24
 8004d06:	64bb      	str	r3, [r7, #72]	@ 0x48
					.stack_size = 512 * 4, .priority =
							(osPriority_t) osPriorityNormal, };

			const osThreadAttr_t ThirdTask_attributes = { .name = "ThirdTask",
 8004d08:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8004d0c:	2224      	movs	r2, #36	@ 0x24
 8004d0e:	2100      	movs	r1, #0
 8004d10:	4618      	mov	r0, r3
 8004d12:	f018 ff14 	bl	801db3e <memset>
 8004d16:	4b1a      	ldr	r3, [pc, #104]	@ (8004d80 <EmergencyTask+0xec>)
 8004d18:	657b      	str	r3, [r7, #84]	@ 0x54
 8004d1a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8004d1e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004d20:	2318      	movs	r3, #24
 8004d22:	66fb      	str	r3, [r7, #108]	@ 0x6c
					.stack_size = 512 * 4, .priority =
							(osPriority_t) osPriorityNormal, };

			MainTaskHandle = osThreadNew(MainTask, NULL, &MainTask_attributes);
 8004d24:	f107 030c 	add.w	r3, r7, #12
 8004d28:	461a      	mov	r2, r3
 8004d2a:	2100      	movs	r1, #0
 8004d2c:	4815      	ldr	r0, [pc, #84]	@ (8004d84 <EmergencyTask+0xf0>)
 8004d2e:	f014 f8ab 	bl	8018e88 <osThreadNew>
 8004d32:	4603      	mov	r3, r0
 8004d34:	4a0d      	ldr	r2, [pc, #52]	@ (8004d6c <EmergencyTask+0xd8>)
 8004d36:	6013      	str	r3, [r2, #0]
			SecondTaskHandle = osThreadNew(usbTask, NULL,
 8004d38:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8004d3c:	461a      	mov	r2, r3
 8004d3e:	2100      	movs	r1, #0
 8004d40:	4811      	ldr	r0, [pc, #68]	@ (8004d88 <EmergencyTask+0xf4>)
 8004d42:	f014 f8a1 	bl	8018e88 <osThreadNew>
 8004d46:	4603      	mov	r3, r0
 8004d48:	4a09      	ldr	r2, [pc, #36]	@ (8004d70 <EmergencyTask+0xdc>)
 8004d4a:	6013      	str	r3, [r2, #0]
					&SecondTask_attributes);
			ThirdTaskHandle = osThreadNew(ThirdTask, NULL,
 8004d4c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8004d50:	461a      	mov	r2, r3
 8004d52:	2100      	movs	r1, #0
 8004d54:	480d      	ldr	r0, [pc, #52]	@ (8004d8c <EmergencyTask+0xf8>)
 8004d56:	f014 f897 	bl	8018e88 <osThreadNew>
 8004d5a:	4603      	mov	r3, r0
 8004d5c:	4a05      	ldr	r2, [pc, #20]	@ (8004d74 <EmergencyTask+0xe0>)
 8004d5e:	6013      	str	r3, [r2, #0]
		if (ps4.button == TOUCH) {
 8004d60:	e79c      	b.n	8004c9c <EmergencyTask+0x8>
 8004d62:	bf00      	nop
 8004d64:	20009bd8 	.word	0x20009bd8
 8004d68:	20008bf8 	.word	0x20008bf8
 8004d6c:	20008d80 	.word	0x20008d80
 8004d70:	20009028 	.word	0x20009028
 8004d74:	20008448 	.word	0x20008448
 8004d78:	080214c8 	.word	0x080214c8
 8004d7c:	080214e4 	.word	0x080214e4
 8004d80:	080214f0 	.word	0x080214f0
 8004d84:	08004a05 	.word	0x08004a05
 8004d88:	08004bf5 	.word	0x08004bf5
 8004d8c:	08004c41 	.word	0x08004c41

08004d90 <PIDSourceInit>:

/*********************************************/
/*           Subroutine Function             */
/*********************************************/
void PIDSourceInit (float *in, float *out, PID_t *pid)
{
 8004d90:	b480      	push	{r7}
 8004d92:	b085      	sub	sp, #20
 8004d94:	af00      	add	r7, sp, #0
 8004d96:	60f8      	str	r0, [r7, #12]
 8004d98:	60b9      	str	r1, [r7, #8]
 8004d9a:	607a      	str	r2, [r7, #4]
	pid->error = in;
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	68fa      	ldr	r2, [r7, #12]
 8004da0:	605a      	str	r2, [r3, #4]
	pid->out_put = out;
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	68ba      	ldr	r2, [r7, #8]
 8004da6:	609a      	str	r2, [r3, #8]
}
 8004da8:	bf00      	nop
 8004daa:	3714      	adds	r7, #20
 8004dac:	46bd      	mov	sp, r7
 8004dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db2:	4770      	bx	lr

08004db4 <PIDGainInit>:
			kn		Filter for derivative
			pid		pointer to a PID data structure with PID_t type
 */
void PIDGainInit(float ts, float sat, float ke, float ku, float kp, float ki,
									float kd, float kn, PID_t *pid)
{
 8004db4:	b580      	push	{r7, lr}
 8004db6:	b08a      	sub	sp, #40	@ 0x28
 8004db8:	af00      	add	r7, sp, #0
 8004dba:	ed87 0a09 	vstr	s0, [r7, #36]	@ 0x24
 8004dbe:	edc7 0a08 	vstr	s1, [r7, #32]
 8004dc2:	ed87 1a07 	vstr	s2, [r7, #28]
 8004dc6:	edc7 1a06 	vstr	s3, [r7, #24]
 8004dca:	ed87 2a05 	vstr	s4, [r7, #20]
 8004dce:	edc7 2a04 	vstr	s5, [r7, #16]
 8004dd2:	ed87 3a03 	vstr	s6, [r7, #12]
 8004dd6:	edc7 3a02 	vstr	s7, [r7, #8]
 8004dda:	6078      	str	r0, [r7, #4]
	pid->K[TS] = ts;
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004de0:	60da      	str	r2, [r3, #12]
	pid->K[SAT] = sat;
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	6a3a      	ldr	r2, [r7, #32]
 8004de6:	611a      	str	r2, [r3, #16]
	pid->K[KE] = ke;
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	69fa      	ldr	r2, [r7, #28]
 8004dec:	615a      	str	r2, [r3, #20]
	pid->K[KU] = ku;
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	69ba      	ldr	r2, [r7, #24]
 8004df2:	619a      	str	r2, [r3, #24]
	pid->K[KP] = kp;
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	697a      	ldr	r2, [r7, #20]
 8004df8:	61da      	str	r2, [r3, #28]
	pid->K[KI] = ki;
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	693a      	ldr	r2, [r7, #16]
 8004dfe:	621a      	str	r2, [r3, #32]
	pid->K[KD] = kd;
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	68fa      	ldr	r2, [r7, #12]
 8004e04:	625a      	str	r2, [r3, #36]	@ 0x24
	pid->K[KN] = kn;
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	68ba      	ldr	r2, [r7, #8]
 8004e0a:	629a      	str	r2, [r3, #40]	@ 0x28
	PIDCoeffCalc(pid);
 8004e0c:	6878      	ldr	r0, [r7, #4]
 8004e0e:	f000 f804 	bl	8004e1a <PIDCoeffCalc>
//	pid->K[D_1] = (((pid->K[KN] * pid->K[TS] - 2.0) * pid->K[KP]) - (2.0 * pid->K[KD] * pid->K[KN])) / (pid->K[KN] * pid->K[TS] + 2);
//	} else {
//		pid->pd_flag = 0;
//		pid->K[C_1] = pid->K[D_0] = pid->K[D_1] = 0;
//	}
}
 8004e12:	bf00      	nop
 8004e14:	3728      	adds	r7, #40	@ 0x28
 8004e16:	46bd      	mov	sp, r7
 8004e18:	bd80      	pop	{r7, pc}

08004e1a <PIDCoeffCalc>:
	pid->K[a] = value;
	PIDCoeffCalc(pid);
}

void PIDCoeffCalc (PID_t *pid)
{
 8004e1a:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8004e1e:	b082      	sub	sp, #8
 8004e20:	af00      	add	r7, sp, #0
 8004e22:	6078      	str	r0, [r7, #4]
	if (pid->K[KI] != 0){
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	edd3 7a08 	vldr	s15, [r3, #32]
 8004e2a:	eef5 7a40 	vcmp.f32	s15, #0.0
 8004e2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004e32:	d013      	beq.n	8004e5c <PIDCoeffCalc+0x42>
		pid->K[B_0] = (pid->K[TS] * pid->K[KI]) * 0.5;
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	ed93 7a03 	vldr	s14, [r3, #12]
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	edd3 7a08 	vldr	s15, [r3, #32]
 8004e40:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e44:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8004e48:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
		pid->K[B_1] = pid->K[B_0];
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	631a      	str	r2, [r3, #48]	@ 0x30
 8004e5a:	e007      	b.n	8004e6c <PIDCoeffCalc+0x52>
	} else {
		pid->K[B_0] = pid->K[B_1] = 0;
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	f04f 0200 	mov.w	r2, #0
 8004e62:	631a      	str	r2, [r3, #48]	@ 0x30
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	62da      	str	r2, [r3, #44]	@ 0x2c
	}

	if ((pid->K[KP] != 0) || (pid->K[KD] != 0)){
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	edd3 7a07 	vldr	s15, [r3, #28]
 8004e72:	eef5 7a40 	vcmp.f32	s15, #0.0
 8004e76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004e7a:	d108      	bne.n	8004e8e <PIDCoeffCalc+0x74>
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8004e82:	eef5 7a40 	vcmp.f32	s15, #0.0
 8004e86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004e8a:	f000 80ef 	beq.w	800506c <PIDCoeffCalc+0x252>
		pid->K[C_1] = -((pid->K[TS] * pid->K[KN] - 2.0) / (pid->K[TS] * pid->K[KN] + 2.0));
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	ed93 7a03 	vldr	s14, [r3, #12]
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8004e9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e9e:	ee17 0a90 	vmov	r0, s15
 8004ea2:	f7fb fb51 	bl	8000548 <__aeabi_f2d>
 8004ea6:	f04f 0200 	mov.w	r2, #0
 8004eaa:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8004eae:	f7fb f9eb 	bl	8000288 <__aeabi_dsub>
 8004eb2:	4602      	mov	r2, r0
 8004eb4:	460b      	mov	r3, r1
 8004eb6:	4614      	mov	r4, r2
 8004eb8:	461d      	mov	r5, r3
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	ed93 7a03 	vldr	s14, [r3, #12]
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8004ec6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004eca:	ee17 0a90 	vmov	r0, s15
 8004ece:	f7fb fb3b 	bl	8000548 <__aeabi_f2d>
 8004ed2:	f04f 0200 	mov.w	r2, #0
 8004ed6:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8004eda:	f7fb f9d7 	bl	800028c <__adddf3>
 8004ede:	4602      	mov	r2, r0
 8004ee0:	460b      	mov	r3, r1
 8004ee2:	4620      	mov	r0, r4
 8004ee4:	4629      	mov	r1, r5
 8004ee6:	f7fb fcb1 	bl	800084c <__aeabi_ddiv>
 8004eea:	4602      	mov	r2, r0
 8004eec:	460b      	mov	r3, r1
 8004eee:	4610      	mov	r0, r2
 8004ef0:	4619      	mov	r1, r3
 8004ef2:	f7fb fe79 	bl	8000be8 <__aeabi_d2f>
 8004ef6:	4603      	mov	r3, r0
 8004ef8:	ee07 3a90 	vmov	s15, r3
 8004efc:	eef1 7a67 	vneg.f32	s15, s15
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	edc3 7a0d 	vstr	s15, [r3, #52]	@ 0x34
		pid->K[D_0] = (pid->K[KP] + ((2.0 * pid->K[KD] * pid->K[KN]) / (pid->K[KN] * pid->K[TS] + 2.0)));
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	69db      	ldr	r3, [r3, #28]
 8004f0a:	4618      	mov	r0, r3
 8004f0c:	f7fb fb1c 	bl	8000548 <__aeabi_f2d>
 8004f10:	4604      	mov	r4, r0
 8004f12:	460d      	mov	r5, r1
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f18:	4618      	mov	r0, r3
 8004f1a:	f7fb fb15 	bl	8000548 <__aeabi_f2d>
 8004f1e:	4602      	mov	r2, r0
 8004f20:	460b      	mov	r3, r1
 8004f22:	f7fb f9b3 	bl	800028c <__adddf3>
 8004f26:	4602      	mov	r2, r0
 8004f28:	460b      	mov	r3, r1
 8004f2a:	4690      	mov	r8, r2
 8004f2c:	4699      	mov	r9, r3
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f32:	4618      	mov	r0, r3
 8004f34:	f7fb fb08 	bl	8000548 <__aeabi_f2d>
 8004f38:	4602      	mov	r2, r0
 8004f3a:	460b      	mov	r3, r1
 8004f3c:	4640      	mov	r0, r8
 8004f3e:	4649      	mov	r1, r9
 8004f40:	f7fb fb5a 	bl	80005f8 <__aeabi_dmul>
 8004f44:	4602      	mov	r2, r0
 8004f46:	460b      	mov	r3, r1
 8004f48:	4690      	mov	r8, r2
 8004f4a:	4699      	mov	r9, r3
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	edd3 7a03 	vldr	s15, [r3, #12]
 8004f58:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004f5c:	ee17 0a90 	vmov	r0, s15
 8004f60:	f7fb faf2 	bl	8000548 <__aeabi_f2d>
 8004f64:	f04f 0200 	mov.w	r2, #0
 8004f68:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8004f6c:	f7fb f98e 	bl	800028c <__adddf3>
 8004f70:	4602      	mov	r2, r0
 8004f72:	460b      	mov	r3, r1
 8004f74:	4640      	mov	r0, r8
 8004f76:	4649      	mov	r1, r9
 8004f78:	f7fb fc68 	bl	800084c <__aeabi_ddiv>
 8004f7c:	4602      	mov	r2, r0
 8004f7e:	460b      	mov	r3, r1
 8004f80:	4620      	mov	r0, r4
 8004f82:	4629      	mov	r1, r5
 8004f84:	f7fb f982 	bl	800028c <__adddf3>
 8004f88:	4602      	mov	r2, r0
 8004f8a:	460b      	mov	r3, r1
 8004f8c:	4610      	mov	r0, r2
 8004f8e:	4619      	mov	r1, r3
 8004f90:	f7fb fe2a 	bl	8000be8 <__aeabi_d2f>
 8004f94:	4602      	mov	r2, r0
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	639a      	str	r2, [r3, #56]	@ 0x38
		pid->K[D_1] = ((((pid->K[KN] * pid->K[TS] - 2.0) * pid->K[KP]) - (2.0 * pid->K[KD] * pid->K[KN])) /
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	edd3 7a03 	vldr	s15, [r3, #12]
 8004fa6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004faa:	ee17 0a90 	vmov	r0, s15
 8004fae:	f7fb facb 	bl	8000548 <__aeabi_f2d>
 8004fb2:	f04f 0200 	mov.w	r2, #0
 8004fb6:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8004fba:	f7fb f965 	bl	8000288 <__aeabi_dsub>
 8004fbe:	4602      	mov	r2, r0
 8004fc0:	460b      	mov	r3, r1
 8004fc2:	4614      	mov	r4, r2
 8004fc4:	461d      	mov	r5, r3
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	69db      	ldr	r3, [r3, #28]
 8004fca:	4618      	mov	r0, r3
 8004fcc:	f7fb fabc 	bl	8000548 <__aeabi_f2d>
 8004fd0:	4602      	mov	r2, r0
 8004fd2:	460b      	mov	r3, r1
 8004fd4:	4620      	mov	r0, r4
 8004fd6:	4629      	mov	r1, r5
 8004fd8:	f7fb fb0e 	bl	80005f8 <__aeabi_dmul>
 8004fdc:	4602      	mov	r2, r0
 8004fde:	460b      	mov	r3, r1
 8004fe0:	4614      	mov	r4, r2
 8004fe2:	461d      	mov	r5, r3
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fe8:	4618      	mov	r0, r3
 8004fea:	f7fb faad 	bl	8000548 <__aeabi_f2d>
 8004fee:	4602      	mov	r2, r0
 8004ff0:	460b      	mov	r3, r1
 8004ff2:	f7fb f94b 	bl	800028c <__adddf3>
 8004ff6:	4602      	mov	r2, r0
 8004ff8:	460b      	mov	r3, r1
 8004ffa:	4690      	mov	r8, r2
 8004ffc:	4699      	mov	r9, r3
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005002:	4618      	mov	r0, r3
 8005004:	f7fb faa0 	bl	8000548 <__aeabi_f2d>
 8005008:	4602      	mov	r2, r0
 800500a:	460b      	mov	r3, r1
 800500c:	4640      	mov	r0, r8
 800500e:	4649      	mov	r1, r9
 8005010:	f7fb faf2 	bl	80005f8 <__aeabi_dmul>
 8005014:	4602      	mov	r2, r0
 8005016:	460b      	mov	r3, r1
 8005018:	4620      	mov	r0, r4
 800501a:	4629      	mov	r1, r5
 800501c:	f7fb f934 	bl	8000288 <__aeabi_dsub>
 8005020:	4602      	mov	r2, r0
 8005022:	460b      	mov	r3, r1
 8005024:	4614      	mov	r4, r2
 8005026:	461d      	mov	r5, r3
				(pid->K[KN] * pid->K[TS] + 2.0));
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	edd3 7a03 	vldr	s15, [r3, #12]
 8005034:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005038:	ee17 0a90 	vmov	r0, s15
 800503c:	f7fb fa84 	bl	8000548 <__aeabi_f2d>
 8005040:	f04f 0200 	mov.w	r2, #0
 8005044:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8005048:	f7fb f920 	bl	800028c <__adddf3>
 800504c:	4602      	mov	r2, r0
 800504e:	460b      	mov	r3, r1
		pid->K[D_1] = ((((pid->K[KN] * pid->K[TS] - 2.0) * pid->K[KP]) - (2.0 * pid->K[KD] * pid->K[KN])) /
 8005050:	4620      	mov	r0, r4
 8005052:	4629      	mov	r1, r5
 8005054:	f7fb fbfa 	bl	800084c <__aeabi_ddiv>
 8005058:	4602      	mov	r2, r0
 800505a:	460b      	mov	r3, r1
 800505c:	4610      	mov	r0, r2
 800505e:	4619      	mov	r1, r3
 8005060:	f7fb fdc2 	bl	8000be8 <__aeabi_d2f>
 8005064:	4602      	mov	r2, r0
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	63da      	str	r2, [r3, #60]	@ 0x3c
 800506a:	e00c      	b.n	8005086 <PIDCoeffCalc+0x26c>
	} else {
		pid->K[C_1] = pid->K[D_0] = pid->K[D_1] = 0.0;
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	f04f 0200 	mov.w	r2, #0
 8005072:	63da      	str	r2, [r3, #60]	@ 0x3c
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	639a      	str	r2, [r3, #56]	@ 0x38
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	635a      	str	r2, [r3, #52]	@ 0x34
	}
}
 8005084:	bf00      	nop
 8005086:	bf00      	nop
 8005088:	3708      	adds	r7, #8
 800508a:	46bd      	mov	sp, r7
 800508c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

08005090 <PIDDelayInit>:

void PIDDelayInit (PID_t *pid)
{
 8005090:	b480      	push	{r7}
 8005092:	b083      	sub	sp, #12
 8005094:	af00      	add	r7, sp, #0
 8005096:	6078      	str	r0, [r7, #4]
//	unsigned char i;
//	for(i = 0; i < 2; i++){
//		pid->i_delay[i] = 0;
//		pid->d_delay[i] = 0;
//	}
	pid->i_delay[0] = 0.0;
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	f04f 0200 	mov.w	r2, #0
 800509e:	641a      	str	r2, [r3, #64]	@ 0x40
	pid->i_delay[1] = 0.0;
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	f04f 0200 	mov.w	r2, #0
 80050a6:	645a      	str	r2, [r3, #68]	@ 0x44
	pid->d_delay[0] = 0.0;
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	f04f 0200 	mov.w	r2, #0
 80050ae:	649a      	str	r2, [r3, #72]	@ 0x48
	pid->d_delay[1] = 0.0;
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	f04f 0200 	mov.w	r2, #0
 80050b6:	64da      	str	r2, [r3, #76]	@ 0x4c
	pid->s_delay = 0.0;
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	f04f 0200 	mov.w	r2, #0
 80050be:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80050c0:	bf00      	nop
 80050c2:	370c      	adds	r7, #12
 80050c4:	46bd      	mov	sp, r7
 80050c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ca:	4770      	bx	lr

080050cc <PID>:
{
	return !pid->s_flag;	/* 1 is not saturated, 0 is saturated */
}

void PID (PID_t *pid)
{
 80050cc:	b480      	push	{r7}
 80050ce:	b087      	sub	sp, #28
 80050d0:	af00      	add	r7, sp, #0
 80050d2:	6078      	str	r0, [r7, #4]
	/* Error ******************************************************************/
	float input_buffer, error;

	input_buffer = *pid->error;
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	685b      	ldr	r3, [r3, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	613b      	str	r3, [r7, #16]
	error = input_buffer * pid->K[KE];
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	edd3 7a05 	vldr	s15, [r3, #20]
 80050e2:	ed97 7a04 	vldr	s14, [r7, #16]
 80050e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80050ea:	edc7 7a03 	vstr	s15, [r7, #12]

	/* Reset previous sum *****************************************************/
	pid->s_delay = 0;
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	f04f 0200 	mov.w	r2, #0
 80050f4:	651a      	str	r2, [r3, #80]	@ 0x50

	/* I algorithm ************************************************************/

	if (pid->K[KI] != 0){
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	edd3 7a08 	vldr	s15, [r3, #32]
 80050fc:	eef5 7a40 	vcmp.f32	s15, #0.0
 8005100:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005104:	d033      	beq.n	800516e <PID+0xa2>
		if (pid->s_flag){     //flag only, so 0 or 1...
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	781b      	ldrb	r3, [r3, #0]
 800510a:	f003 0301 	and.w	r3, r3, #1
 800510e:	b2db      	uxtb	r3, r3
 8005110:	2b00      	cmp	r3, #0
 8005112:	d00a      	beq.n	800512a <PID+0x5e>
			pid->i_delay[1] = error + pid->i_delay[0];      //it is not saturated, so it will continue add error
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	ed93 7a10 	vldr	s14, [r3, #64]	@ 0x40
 800511a:	edd7 7a03 	vldr	s15, [r7, #12]
 800511e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	edc3 7a11 	vstr	s15, [r3, #68]	@ 0x44
 8005128:	e003      	b.n	8005132 <PID+0x66>
		} else {
			pid->i_delay[1] = pid->i_delay[0];				//it is saturated already, so all pid->i_delay will be constant
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		pid->s_delay = pid->s_delay + (pid->K[B_0] * pid->i_delay[1]) //after saturated, s_delay will be continously added
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	ed93 7a14 	vldr	s14, [r3, #80]	@ 0x50
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	edd3 6a0b 	vldr	s13, [r3, #44]	@ 0x2c
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	edd3 7a11 	vldr	s15, [r3, #68]	@ 0x44
 8005144:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005148:	ee37 7a27 	vadd.f32	s14, s14, s15
							+ (pid->K[B_1] * pid->i_delay[0]);
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	edd3 6a0c 	vldr	s13, [r3, #48]	@ 0x30
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 8005158:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800515c:	ee77 7a27 	vadd.f32	s15, s14, s15
		pid->s_delay = pid->s_delay + (pid->K[B_0] * pid->i_delay[1]) //after saturated, s_delay will be continously added
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	edc3 7a14 	vstr	s15, [r3, #80]	@ 0x50
		pid->i_delay[0] = pid->i_delay[1];
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	641a      	str	r2, [r3, #64]	@ 0x40

// since final output is addition of 2 outputs, so pid->s_delay will combine with the equation in document..

	/* PD algorithm ***********************************************************/

	if ((pid->K[KP] != 0) || (pid->K[KD] != 0)){       				// i has change behind KP to KD..
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	edd3 7a07 	vldr	s15, [r3, #28]
 8005174:	eef5 7a40 	vcmp.f32	s15, #0.0
 8005178:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800517c:	d107      	bne.n	800518e <PID+0xc2>
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8005184:	eef5 7a40 	vcmp.f32	s15, #0.0
 8005188:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800518c:	d02c      	beq.n	80051e8 <PID+0x11c>
		pid->d_delay[1] = error + pid->K[C_1] * pid->d_delay[0];  		//pid->d_delay[0] is old value,pid->d_delay[1]is new value,so both are different values
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	ed93 7a0d 	vldr	s14, [r3, #52]	@ 0x34
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
 800519a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800519e:	edd7 7a03 	vldr	s15, [r7, #12]
 80051a2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	edc3 7a13 	vstr	s15, [r3, #76]	@ 0x4c
		pid->s_delay = pid->s_delay + pid->K[D_0] * pid->d_delay[1]
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	ed93 7a14 	vldr	s14, [r3, #80]	@ 0x50
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	edd3 6a0e 	vldr	s13, [r3, #56]	@ 0x38
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	edd3 7a13 	vldr	s15, [r3, #76]	@ 0x4c
 80051be:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80051c2:	ee37 7a27 	vadd.f32	s14, s14, s15
							+ pid->K[D_1] * pid->d_delay[0];
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	edd3 6a0f 	vldr	s13, [r3, #60]	@ 0x3c
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
 80051d2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80051d6:	ee77 7a27 	vadd.f32	s15, s14, s15
		pid->s_delay = pid->s_delay + pid->K[D_0] * pid->d_delay[1]
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	edc3 7a14 	vstr	s15, [r3, #80]	@ 0x50
		pid->d_delay[0] = pid->d_delay[1];
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	649a      	str	r2, [r3, #72]	@ 0x48
	}

	/* Saturation element *****************************************************/
	float output_buffer, output;

	output_buffer = pid->s_delay;
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80051ec:	60bb      	str	r3, [r7, #8]
	if (output_buffer > pid->K[SAT]){
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	edd3 7a04 	vldr	s15, [r3, #16]
 80051f4:	ed97 7a02 	vldr	s14, [r7, #8]
 80051f8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80051fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005200:	dd0f      	ble.n	8005222 <PID+0x156>
		output = (pid->K[SAT] * pid->K[KU]);
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	ed93 7a04 	vldr	s14, [r3, #16]
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	edd3 7a06 	vldr	s15, [r3, #24]
 800520e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005212:	edc7 7a05 	vstr	s15, [r7, #20]
		pid->s_flag = 0;							/* Saturated */
 8005216:	687a      	ldr	r2, [r7, #4]
 8005218:	7813      	ldrb	r3, [r2, #0]
 800521a:	f36f 0300 	bfc	r3, #0, #1
 800521e:	7013      	strb	r3, [r2, #0]
 8005220:	e02b      	b.n	800527a <PID+0x1ae>
	}else if (output_buffer < -(pid->K[SAT])){
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	edd3 7a04 	vldr	s15, [r3, #16]
 8005228:	eef1 7a67 	vneg.f32	s15, s15
 800522c:	ed97 7a02 	vldr	s14, [r7, #8]
 8005230:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005234:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005238:	d511      	bpl.n	800525e <PID+0x192>
		output = -(pid->K[SAT] * pid->K[KU]);
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	ed93 7a04 	vldr	s14, [r3, #16]
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	edd3 7a06 	vldr	s15, [r3, #24]
 8005246:	ee67 7a27 	vmul.f32	s15, s14, s15
 800524a:	eef1 7a67 	vneg.f32	s15, s15
 800524e:	edc7 7a05 	vstr	s15, [r7, #20]
		pid->s_flag = 0;							/* Saturated */
 8005252:	687a      	ldr	r2, [r7, #4]
 8005254:	7813      	ldrb	r3, [r2, #0]
 8005256:	f36f 0300 	bfc	r3, #0, #1
 800525a:	7013      	strb	r3, [r2, #0]
 800525c:	e00d      	b.n	800527a <PID+0x1ae>
	}else {
		output = (output_buffer * pid->K[KU]);
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	edd3 7a06 	vldr	s15, [r3, #24]
 8005264:	ed97 7a02 	vldr	s14, [r7, #8]
 8005268:	ee67 7a27 	vmul.f32	s15, s14, s15
 800526c:	edc7 7a05 	vstr	s15, [r7, #20]
		pid->s_flag = 1;							/* Not saturated */
 8005270:	687a      	ldr	r2, [r7, #4]
 8005272:	7813      	ldrb	r3, [r2, #0]
 8005274:	f043 0301 	orr.w	r3, r3, #1
 8005278:	7013      	strb	r3, [r2, #0]
	}

	/* Output *****************************************************************/
	*pid->out_put = output;
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	689b      	ldr	r3, [r3, #8]
 800527e:	697a      	ldr	r2, [r7, #20]
 8005280:	601a      	str	r2, [r3, #0]
}
 8005282:	bf00      	nop
 8005284:	371c      	adds	r7, #28
 8005286:	46bd      	mov	sp, r7
 8005288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800528c:	4770      	bx	lr

0800528e <PSxConnectDMA>:
 * Function Remarks		: Called in respective I2c interrupt
 * Function Arguments	: *psxbt	,pointer to structure PSxBT_t
 * Function Return		: None
 * Function Example		: PSxConnectDMA(&ps4);
 */
void PSxConnectDMA(PSxBT_t* psxbt){
 800528e:	b580      	push	{r7, lr}
 8005290:	b082      	sub	sp, #8
 8005292:	af00      	add	r7, sp, #0
 8005294:	6078      	str	r0, [r7, #4]
	HAL_I2C_Master_Receive_DMA(psxbt->hi2cps4, 0x44 << 1 ,(unsigned char *)psxbt->ReceiveBuffer, 11);
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	6e98      	ldr	r0, [r3, #104]	@ 0x68
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	1c5a      	adds	r2, r3, #1
 800529e:	230b      	movs	r3, #11
 80052a0:	2188      	movs	r1, #136	@ 0x88
 80052a2:	f009 f921 	bl	800e4e8 <HAL_I2C_Master_Receive_DMA>
	PSx_HandlerI2C(psxbt);
 80052a6:	6878      	ldr	r0, [r7, #4]
 80052a8:	f000 f81e 	bl	80052e8 <PSx_HandlerI2C>
}
 80052ac:	bf00      	nop
 80052ae:	3708      	adds	r7, #8
 80052b0:	46bd      	mov	sp, r7
 80052b2:	bd80      	pop	{r7, pc}

080052b4 <PSxInitDMA>:
 * Function Arguments	: *psxbt	, Pointer to structure PSxBT_t
 * 						   hi2cx    , Pointer to I2C handle
 * Function Return		: None
 * Function Example		: PSxInitDMA(&ps4,&hi2c1);
 */
void PSxInitDMA(PSxBT_t *psxbt,I2C_HandleTypeDef* hi2cx){
 80052b4:	b580      	push	{r7, lr}
 80052b6:	b082      	sub	sp, #8
 80052b8:	af00      	add	r7, sp, #0
 80052ba:	6078      	str	r0, [r7, #4]
 80052bc:	6039      	str	r1, [r7, #0]
	psxbt->hi2cps4 = hi2cx;
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	683a      	ldr	r2, [r7, #0]
 80052c2:	669a      	str	r2, [r3, #104]	@ 0x68
//	HAL_I2C_Slave_Receive_DMA(hi2cx, psxbt->ReceiveBuffer, 11);//GG
	HAL_I2C_Master_Receive_DMA(psxbt->hi2cps4, 0x44 << 1 ,(unsigned char *)psxbt->ReceiveBuffer, 11);
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	6e98      	ldr	r0, [r3, #104]	@ 0x68
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	1c5a      	adds	r2, r3, #1
 80052cc:	230b      	movs	r3, #11
 80052ce:	2188      	movs	r1, #136	@ 0x88
 80052d0:	f009 f90a 	bl	800e4e8 <HAL_I2C_Master_Receive_DMA>
	psxbt->initialized = 1;
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	2201      	movs	r2, #1
 80052d8:	701a      	strb	r2, [r3, #0]
	psxbt->disconnected = 0;
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	2200      	movs	r2, #0
 80052de:	679a      	str	r2, [r3, #120]	@ 0x78
}
 80052e0:	bf00      	nop
 80052e2:	3708      	adds	r7, #8
 80052e4:	46bd      	mov	sp, r7
 80052e6:	bd80      	pop	{r7, pc}

080052e8 <PSx_HandlerI2C>:
 * Function Arguments	: *psxbt	,pointer to structure PSxBT_t
 * Function Return		: None
 * Function Example		: PSx_HandlerI2C(&ps4x);
 */

void PSx_HandlerI2C(PSxBT_t *psxbt){
 80052e8:	b580      	push	{r7, lr}
 80052ea:	b082      	sub	sp, #8
 80052ec:	af00      	add	r7, sp, #0
 80052ee:	6078      	str	r0, [r7, #4]
	psxbt->buf1 = psxbt->ReceiveBuffer[1];
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	789a      	ldrb	r2, [r3, #2]
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
	psxbt->buf2 = psxbt->ReceiveBuffer[2];
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	78da      	ldrb	r2, [r3, #3]
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	f883 2071 	strb.w	r2, [r3, #113]	@ 0x71
	psxbt->leftjoy_x = psxbt->ReceiveBuffer[3];
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	791b      	ldrb	r3, [r3, #4]
 8005308:	461a      	mov	r2, r3
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	635a      	str	r2, [r3, #52]	@ 0x34
	psxbt->leftjoy_y = psxbt->ReceiveBuffer[4];
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	795b      	ldrb	r3, [r3, #5]
 8005312:	461a      	mov	r2, r3
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	639a      	str	r2, [r3, #56]	@ 0x38
	psxbt->rightjoy_x = psxbt->ReceiveBuffer[5];
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	799b      	ldrb	r3, [r3, #6]
 800531c:	461a      	mov	r2, r3
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	63da      	str	r2, [r3, #60]	@ 0x3c
	psxbt->rightjoy_y = psxbt->ReceiveBuffer[6];
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	79db      	ldrb	r3, [r3, #7]
 8005326:	461a      	mov	r2, r3
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	641a      	str	r2, [r3, #64]	@ 0x40
	psxbt->an_L2 = psxbt->ReceiveBuffer[7];
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	7a1b      	ldrb	r3, [r3, #8]
 8005330:	461a      	mov	r2, r3
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	645a      	str	r2, [r3, #68]	@ 0x44
	psxbt->an_R2 = psxbt->ReceiveBuffer[8];
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	7a5b      	ldrb	r3, [r3, #9]
 800533a:	461a      	mov	r2, r3
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	649a      	str	r2, [r3, #72]	@ 0x48
	psxbt->buf3 = psxbt->ReceiveBuffer[9];
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	7a9a      	ldrb	r2, [r3, #10]
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	f883 2072 	strb.w	r2, [r3, #114]	@ 0x72
	psxbt->state = psxbt->ReceiveBuffer[10];
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	7ada      	ldrb	r2, [r3, #11]
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74
	PSxBTGetXY(psxbt);
 8005354:	6878      	ldr	r0, [r7, #4]
 8005356:	f000 f807 	bl	8005368 <PSxBTGetXY>
}
 800535a:	bf00      	nop
 800535c:	3708      	adds	r7, #8
 800535e:	46bd      	mov	sp, r7
 8005360:	bd80      	pop	{r7, pc}
 8005362:	0000      	movs	r0, r0
 8005364:	0000      	movs	r0, r0
	...

08005368 <PSxBTGetXY>:
 * Function Return		: None
 * Function Example		: PSxBTGetXY(&ps3x);
 */

void PSxBTGetXY(PSxBT_t *psxbt)
{
 8005368:	b580      	push	{r7, lr}
 800536a:	b082      	sub	sp, #8
 800536c:	af00      	add	r7, sp, #0
 800536e:	6078      	str	r0, [r7, #4]
	if(joyR_up){
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005374:	ee07 3a90 	vmov	s15, r3
 8005378:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800537c:	ed9f 7aaa 	vldr	s14, [pc, #680]	@ 8005628 <PSxBTGetXY+0x2c0>
 8005380:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005384:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005388:	d542      	bpl.n	8005410 <PSxBTGetXY+0xa8>
		psxbt->joyR_y  = ((psx_low_Ry - ((float)psxbt->rightjoy_y))/100.0)/1.00;
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800538e:	ee07 3a90 	vmov	s15, r3
 8005392:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005396:	ee17 0a90 	vmov	r0, s15
 800539a:	f7fb f8d5 	bl	8000548 <__aeabi_f2d>
 800539e:	4602      	mov	r2, r0
 80053a0:	460b      	mov	r3, r1
 80053a2:	a19b      	add	r1, pc, #620	@ (adr r1, 8005610 <PSxBTGetXY+0x2a8>)
 80053a4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80053a8:	f7fa ff6e 	bl	8000288 <__aeabi_dsub>
 80053ac:	4602      	mov	r2, r0
 80053ae:	460b      	mov	r3, r1
 80053b0:	4610      	mov	r0, r2
 80053b2:	4619      	mov	r1, r3
 80053b4:	f04f 0200 	mov.w	r2, #0
 80053b8:	4b97      	ldr	r3, [pc, #604]	@ (8005618 <PSxBTGetXY+0x2b0>)
 80053ba:	f7fb fa47 	bl	800084c <__aeabi_ddiv>
 80053be:	4602      	mov	r2, r0
 80053c0:	460b      	mov	r3, r1
 80053c2:	4610      	mov	r0, r2
 80053c4:	4619      	mov	r1, r3
 80053c6:	f7fb fc0f 	bl	8000be8 <__aeabi_d2f>
 80053ca:	4602      	mov	r2, r0
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	64da      	str	r2, [r3, #76]	@ 0x4c
		if(psxbt->joyR_y < 0.0){
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	edd3 7a13 	vldr	s15, [r3, #76]	@ 0x4c
 80053d6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80053da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80053de:	d504      	bpl.n	80053ea <PSxBTGetXY+0x82>
			psxbt->joyR_y = 0.0;
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	f04f 0200 	mov.w	r2, #0
 80053e6:	64da      	str	r2, [r3, #76]	@ 0x4c
 80053e8:	e00d      	b.n	8005406 <PSxBTGetXY+0x9e>
		}else if(psxbt->joyR_y > 1.0){
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	edd3 7a13 	vldr	s15, [r3, #76]	@ 0x4c
 80053f0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80053f4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80053f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80053fc:	dd03      	ble.n	8005406 <PSxBTGetXY+0x9e>
			psxbt->joyR_y = 1.0;
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8005404:	64da      	str	r2, [r3, #76]	@ 0x4c
		}
		psxbt->joyR_ysign = 1;
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	2201      	movs	r2, #1
 800540a:	f883 2064 	strb.w	r2, [r3, #100]	@ 0x64
 800540e:	e056      	b.n	80054be <PSxBTGetXY+0x156>
	}else if(joyR_down){
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005414:	ee07 3a90 	vmov	s15, r3
 8005418:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800541c:	ed9f 7a7f 	vldr	s14, [pc, #508]	@ 800561c <PSxBTGetXY+0x2b4>
 8005420:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005424:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005428:	dd41      	ble.n	80054ae <PSxBTGetXY+0x146>
		psxbt->joyR_y = ((psx_high_Ry - ((float)psxbt->rightjoy_y))/100.0)/1.00;
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800542e:	ee07 3a90 	vmov	s15, r3
 8005432:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005436:	ee17 0a90 	vmov	r0, s15
 800543a:	f7fb f885 	bl	8000548 <__aeabi_f2d>
 800543e:	4602      	mov	r2, r0
 8005440:	460b      	mov	r3, r1
 8005442:	f04f 0000 	mov.w	r0, #0
 8005446:	4976      	ldr	r1, [pc, #472]	@ (8005620 <PSxBTGetXY+0x2b8>)
 8005448:	f7fa ff1e 	bl	8000288 <__aeabi_dsub>
 800544c:	4602      	mov	r2, r0
 800544e:	460b      	mov	r3, r1
 8005450:	4610      	mov	r0, r2
 8005452:	4619      	mov	r1, r3
 8005454:	f04f 0200 	mov.w	r2, #0
 8005458:	4b6f      	ldr	r3, [pc, #444]	@ (8005618 <PSxBTGetXY+0x2b0>)
 800545a:	f7fb f9f7 	bl	800084c <__aeabi_ddiv>
 800545e:	4602      	mov	r2, r0
 8005460:	460b      	mov	r3, r1
 8005462:	4610      	mov	r0, r2
 8005464:	4619      	mov	r1, r3
 8005466:	f7fb fbbf 	bl	8000be8 <__aeabi_d2f>
 800546a:	4602      	mov	r2, r0
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	64da      	str	r2, [r3, #76]	@ 0x4c
		if(psxbt->joyR_y > 0.0){
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	edd3 7a13 	vldr	s15, [r3, #76]	@ 0x4c
 8005476:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800547a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800547e:	dd04      	ble.n	800548a <PSxBTGetXY+0x122>
			psxbt->joyR_y = 0.0;
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	f04f 0200 	mov.w	r2, #0
 8005486:	64da      	str	r2, [r3, #76]	@ 0x4c
 8005488:	e00c      	b.n	80054a4 <PSxBTGetXY+0x13c>
		}else if(psxbt->joyR_y < -1.0){
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	edd3 7a13 	vldr	s15, [r3, #76]	@ 0x4c
 8005490:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 8005494:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005498:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800549c:	d502      	bpl.n	80054a4 <PSxBTGetXY+0x13c>
			psxbt->joyR_y = -1.0;
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	4a60      	ldr	r2, [pc, #384]	@ (8005624 <PSxBTGetXY+0x2bc>)
 80054a2:	64da      	str	r2, [r3, #76]	@ 0x4c
		}
		psxbt->joyR_ysign = -1;
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	22ff      	movs	r2, #255	@ 0xff
 80054a8:	f883 2064 	strb.w	r2, [r3, #100]	@ 0x64
 80054ac:	e007      	b.n	80054be <PSxBTGetXY+0x156>
	}else{
		psxbt->joyR_ysign = 0;
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	2200      	movs	r2, #0
 80054b2:	f883 2064 	strb.w	r2, [r3, #100]	@ 0x64
		psxbt->joyR_y = 0.0;
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	f04f 0200 	mov.w	r2, #0
 80054bc:	64da      	str	r2, [r3, #76]	@ 0x4c
	}

	if(joyR_left){
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80054c2:	ee07 3a90 	vmov	s15, r3
 80054c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80054ca:	ed9f 7a57 	vldr	s14, [pc, #348]	@ 8005628 <PSxBTGetXY+0x2c0>
 80054ce:	eef4 7ac7 	vcmpe.f32	s15, s14
 80054d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80054d6:	d546      	bpl.n	8005566 <PSxBTGetXY+0x1fe>
		psxbt->joyR_x = ((psx_low_Rx - ((float)psxbt->rightjoy_x))/100.0)/-1.00;
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80054dc:	ee07 3a90 	vmov	s15, r3
 80054e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80054e4:	ee17 0a90 	vmov	r0, s15
 80054e8:	f7fb f82e 	bl	8000548 <__aeabi_f2d>
 80054ec:	4602      	mov	r2, r0
 80054ee:	460b      	mov	r3, r1
 80054f0:	a147      	add	r1, pc, #284	@ (adr r1, 8005610 <PSxBTGetXY+0x2a8>)
 80054f2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80054f6:	f7fa fec7 	bl	8000288 <__aeabi_dsub>
 80054fa:	4602      	mov	r2, r0
 80054fc:	460b      	mov	r3, r1
 80054fe:	4610      	mov	r0, r2
 8005500:	4619      	mov	r1, r3
 8005502:	f04f 0200 	mov.w	r2, #0
 8005506:	4b44      	ldr	r3, [pc, #272]	@ (8005618 <PSxBTGetXY+0x2b0>)
 8005508:	f7fb f9a0 	bl	800084c <__aeabi_ddiv>
 800550c:	4602      	mov	r2, r0
 800550e:	460b      	mov	r3, r1
 8005510:	4610      	mov	r0, r2
 8005512:	4619      	mov	r1, r3
 8005514:	f7fb fb68 	bl	8000be8 <__aeabi_d2f>
 8005518:	4603      	mov	r3, r0
 800551a:	ee07 3a90 	vmov	s15, r3
 800551e:	eef1 7a67 	vneg.f32	s15, s15
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	edc3 7a14 	vstr	s15, [r3, #80]	@ 0x50
		if(psxbt->joyR_x > 0.0){
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	edd3 7a14 	vldr	s15, [r3, #80]	@ 0x50
 800552e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005532:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005536:	dd04      	ble.n	8005542 <PSxBTGetXY+0x1da>
			psxbt->joyR_x = 0.0;
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	f04f 0200 	mov.w	r2, #0
 800553e:	651a      	str	r2, [r3, #80]	@ 0x50
 8005540:	e00c      	b.n	800555c <PSxBTGetXY+0x1f4>
		}else if(psxbt->joyR_x < -1.0){
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	edd3 7a14 	vldr	s15, [r3, #80]	@ 0x50
 8005548:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 800554c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005550:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005554:	d502      	bpl.n	800555c <PSxBTGetXY+0x1f4>
			psxbt->joyR_x = -1.0;
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	4a32      	ldr	r2, [pc, #200]	@ (8005624 <PSxBTGetXY+0x2bc>)
 800555a:	651a      	str	r2, [r3, #80]	@ 0x50
		}
		psxbt->joyR_xsign = -1;
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	22ff      	movs	r2, #255	@ 0xff
 8005560:	f883 2065 	strb.w	r2, [r3, #101]	@ 0x65
 8005564:	e06a      	b.n	800563c <PSxBTGetXY+0x2d4>
	}else if(joyR_right){
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800556a:	ee07 3a90 	vmov	s15, r3
 800556e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005572:	ed9f 7a2a 	vldr	s14, [pc, #168]	@ 800561c <PSxBTGetXY+0x2b4>
 8005576:	eef4 7ac7 	vcmpe.f32	s15, s14
 800557a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800557e:	dd55      	ble.n	800562c <PSxBTGetXY+0x2c4>
		psxbt->joyR_x = ((psx_high_Rx - ((float)psxbt->rightjoy_x))/100.0)/-1.00;
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005584:	ee07 3a90 	vmov	s15, r3
 8005588:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800558c:	ee17 0a90 	vmov	r0, s15
 8005590:	f7fa ffda 	bl	8000548 <__aeabi_f2d>
 8005594:	4602      	mov	r2, r0
 8005596:	460b      	mov	r3, r1
 8005598:	f04f 0000 	mov.w	r0, #0
 800559c:	4920      	ldr	r1, [pc, #128]	@ (8005620 <PSxBTGetXY+0x2b8>)
 800559e:	f7fa fe73 	bl	8000288 <__aeabi_dsub>
 80055a2:	4602      	mov	r2, r0
 80055a4:	460b      	mov	r3, r1
 80055a6:	4610      	mov	r0, r2
 80055a8:	4619      	mov	r1, r3
 80055aa:	f04f 0200 	mov.w	r2, #0
 80055ae:	4b1a      	ldr	r3, [pc, #104]	@ (8005618 <PSxBTGetXY+0x2b0>)
 80055b0:	f7fb f94c 	bl	800084c <__aeabi_ddiv>
 80055b4:	4602      	mov	r2, r0
 80055b6:	460b      	mov	r3, r1
 80055b8:	4610      	mov	r0, r2
 80055ba:	4619      	mov	r1, r3
 80055bc:	f7fb fb14 	bl	8000be8 <__aeabi_d2f>
 80055c0:	4603      	mov	r3, r0
 80055c2:	ee07 3a90 	vmov	s15, r3
 80055c6:	eef1 7a67 	vneg.f32	s15, s15
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	edc3 7a14 	vstr	s15, [r3, #80]	@ 0x50
		if(psxbt->joyR_x < 0.0){
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	edd3 7a14 	vldr	s15, [r3, #80]	@ 0x50
 80055d6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80055da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80055de:	d504      	bpl.n	80055ea <PSxBTGetXY+0x282>
			psxbt->joyR_x = 0.0;
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	f04f 0200 	mov.w	r2, #0
 80055e6:	651a      	str	r2, [r3, #80]	@ 0x50
 80055e8:	e00d      	b.n	8005606 <PSxBTGetXY+0x29e>
		}else if(psxbt->joyR_x > 1.0){
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	edd3 7a14 	vldr	s15, [r3, #80]	@ 0x50
 80055f0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80055f4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80055f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80055fc:	dd03      	ble.n	8005606 <PSxBTGetXY+0x29e>
			psxbt->joyR_x = 1.0;
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8005604:	651a      	str	r2, [r3, #80]	@ 0x50
		}
		psxbt->joyR_xsign = 1;
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	2201      	movs	r2, #1
 800560a:	f883 2065 	strb.w	r2, [r3, #101]	@ 0x65
 800560e:	e015      	b.n	800563c <PSxBTGetXY+0x2d4>
 8005610:	00000000 	.word	0x00000000
 8005614:	405cc000 	.word	0x405cc000
 8005618:	40590000 	.word	0x40590000
 800561c:	430c0000 	.word	0x430c0000
 8005620:	40618000 	.word	0x40618000
 8005624:	bf800000 	.word	0xbf800000
 8005628:	42e60000 	.word	0x42e60000
	}else{
		psxbt->joyR_xsign = 0;
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	2200      	movs	r2, #0
 8005630:	f883 2065 	strb.w	r2, [r3, #101]	@ 0x65
		psxbt->joyR_x = 0.0;
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	f04f 0200 	mov.w	r2, #0
 800563a:	651a      	str	r2, [r3, #80]	@ 0x50
	}

	if(joyL_up){
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005640:	ee07 3a90 	vmov	s15, r3
 8005644:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005648:	ed1f 7a09 	vldr	s14, [pc, #-36]	@ 8005628 <PSxBTGetXY+0x2c0>
 800564c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005650:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005654:	d542      	bpl.n	80056dc <PSxBTGetXY+0x374>
		psxbt->joyL_y = ((psx_low_Ly - ((float)psxbt->leftjoy_y))/100.0)/1.00;
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800565a:	ee07 3a90 	vmov	s15, r3
 800565e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005662:	ee17 0a90 	vmov	r0, s15
 8005666:	f7fa ff6f 	bl	8000548 <__aeabi_f2d>
 800566a:	4602      	mov	r2, r0
 800566c:	460b      	mov	r3, r1
 800566e:	a1b4      	add	r1, pc, #720	@ (adr r1, 8005940 <PSxBTGetXY+0x5d8>)
 8005670:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005674:	f7fa fe08 	bl	8000288 <__aeabi_dsub>
 8005678:	4602      	mov	r2, r0
 800567a:	460b      	mov	r3, r1
 800567c:	4610      	mov	r0, r2
 800567e:	4619      	mov	r1, r3
 8005680:	f04f 0200 	mov.w	r2, #0
 8005684:	4bb2      	ldr	r3, [pc, #712]	@ (8005950 <PSxBTGetXY+0x5e8>)
 8005686:	f7fb f8e1 	bl	800084c <__aeabi_ddiv>
 800568a:	4602      	mov	r2, r0
 800568c:	460b      	mov	r3, r1
 800568e:	4610      	mov	r0, r2
 8005690:	4619      	mov	r1, r3
 8005692:	f7fb faa9 	bl	8000be8 <__aeabi_d2f>
 8005696:	4602      	mov	r2, r0
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	655a      	str	r2, [r3, #84]	@ 0x54
		if(psxbt->joyL_y < 0.0){
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	edd3 7a15 	vldr	s15, [r3, #84]	@ 0x54
 80056a2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80056a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80056aa:	d504      	bpl.n	80056b6 <PSxBTGetXY+0x34e>
			psxbt->joyL_y = 0.0;
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	f04f 0200 	mov.w	r2, #0
 80056b2:	655a      	str	r2, [r3, #84]	@ 0x54
 80056b4:	e00d      	b.n	80056d2 <PSxBTGetXY+0x36a>
		}else if(psxbt->joyL_y > 1.0){
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	edd3 7a15 	vldr	s15, [r3, #84]	@ 0x54
 80056bc:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80056c0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80056c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80056c8:	dd03      	ble.n	80056d2 <PSxBTGetXY+0x36a>
			psxbt->joyL_y = 1.0;
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80056d0:	655a      	str	r2, [r3, #84]	@ 0x54
		}
		psxbt->joyL_ysign = 1;
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	2201      	movs	r2, #1
 80056d6:	f883 2066 	strb.w	r2, [r3, #102]	@ 0x66
 80056da:	e056      	b.n	800578a <PSxBTGetXY+0x422>
	}else if(joyL_down){
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80056e0:	ee07 3a90 	vmov	s15, r3
 80056e4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80056e8:	ed9f 7a9a 	vldr	s14, [pc, #616]	@ 8005954 <PSxBTGetXY+0x5ec>
 80056ec:	eef4 7ac7 	vcmpe.f32	s15, s14
 80056f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80056f4:	dd41      	ble.n	800577a <PSxBTGetXY+0x412>
		psxbt->joyL_y = ((psx_high_Ly - ((float)psxbt->leftjoy_y))/100.0)/1.00;
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80056fa:	ee07 3a90 	vmov	s15, r3
 80056fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005702:	ee17 0a90 	vmov	r0, s15
 8005706:	f7fa ff1f 	bl	8000548 <__aeabi_f2d>
 800570a:	4602      	mov	r2, r0
 800570c:	460b      	mov	r3, r1
 800570e:	f04f 0000 	mov.w	r0, #0
 8005712:	4991      	ldr	r1, [pc, #580]	@ (8005958 <PSxBTGetXY+0x5f0>)
 8005714:	f7fa fdb8 	bl	8000288 <__aeabi_dsub>
 8005718:	4602      	mov	r2, r0
 800571a:	460b      	mov	r3, r1
 800571c:	4610      	mov	r0, r2
 800571e:	4619      	mov	r1, r3
 8005720:	f04f 0200 	mov.w	r2, #0
 8005724:	4b8a      	ldr	r3, [pc, #552]	@ (8005950 <PSxBTGetXY+0x5e8>)
 8005726:	f7fb f891 	bl	800084c <__aeabi_ddiv>
 800572a:	4602      	mov	r2, r0
 800572c:	460b      	mov	r3, r1
 800572e:	4610      	mov	r0, r2
 8005730:	4619      	mov	r1, r3
 8005732:	f7fb fa59 	bl	8000be8 <__aeabi_d2f>
 8005736:	4602      	mov	r2, r0
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	655a      	str	r2, [r3, #84]	@ 0x54
		if(psxbt->joyL_y > 0.0){
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	edd3 7a15 	vldr	s15, [r3, #84]	@ 0x54
 8005742:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005746:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800574a:	dd04      	ble.n	8005756 <PSxBTGetXY+0x3ee>
			psxbt->joyL_y = 0.0;
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	f04f 0200 	mov.w	r2, #0
 8005752:	655a      	str	r2, [r3, #84]	@ 0x54
 8005754:	e00c      	b.n	8005770 <PSxBTGetXY+0x408>
		}else if(psxbt->joyL_y < -1.0){
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	edd3 7a15 	vldr	s15, [r3, #84]	@ 0x54
 800575c:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 8005760:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005764:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005768:	d502      	bpl.n	8005770 <PSxBTGetXY+0x408>
			psxbt->joyL_y = -1.0;
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	4a7b      	ldr	r2, [pc, #492]	@ (800595c <PSxBTGetXY+0x5f4>)
 800576e:	655a      	str	r2, [r3, #84]	@ 0x54
		}
		psxbt->joyL_ysign = -1;
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	22ff      	movs	r2, #255	@ 0xff
 8005774:	f883 2066 	strb.w	r2, [r3, #102]	@ 0x66
 8005778:	e007      	b.n	800578a <PSxBTGetXY+0x422>
	}else{
		psxbt->joyL_ysign = 0;
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	2200      	movs	r2, #0
 800577e:	f883 2066 	strb.w	r2, [r3, #102]	@ 0x66
		psxbt->joyL_y = 0.0;
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	f04f 0200 	mov.w	r2, #0
 8005788:	655a      	str	r2, [r3, #84]	@ 0x54
	}

	if(joyL_left){
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800578e:	ee07 3a90 	vmov	s15, r3
 8005792:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005796:	ed9f 7a72 	vldr	s14, [pc, #456]	@ 8005960 <PSxBTGetXY+0x5f8>
 800579a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800579e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80057a2:	d546      	bpl.n	8005832 <PSxBTGetXY+0x4ca>
		psxbt->joyL_x = ((psx_low_Lx - ((float)psxbt->leftjoy_x))/100.0)/-1.00;
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80057a8:	ee07 3a90 	vmov	s15, r3
 80057ac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80057b0:	ee17 0a90 	vmov	r0, s15
 80057b4:	f7fa fec8 	bl	8000548 <__aeabi_f2d>
 80057b8:	4602      	mov	r2, r0
 80057ba:	460b      	mov	r3, r1
 80057bc:	a160      	add	r1, pc, #384	@ (adr r1, 8005940 <PSxBTGetXY+0x5d8>)
 80057be:	e9d1 0100 	ldrd	r0, r1, [r1]
 80057c2:	f7fa fd61 	bl	8000288 <__aeabi_dsub>
 80057c6:	4602      	mov	r2, r0
 80057c8:	460b      	mov	r3, r1
 80057ca:	4610      	mov	r0, r2
 80057cc:	4619      	mov	r1, r3
 80057ce:	f04f 0200 	mov.w	r2, #0
 80057d2:	4b5f      	ldr	r3, [pc, #380]	@ (8005950 <PSxBTGetXY+0x5e8>)
 80057d4:	f7fb f83a 	bl	800084c <__aeabi_ddiv>
 80057d8:	4602      	mov	r2, r0
 80057da:	460b      	mov	r3, r1
 80057dc:	4610      	mov	r0, r2
 80057de:	4619      	mov	r1, r3
 80057e0:	f7fb fa02 	bl	8000be8 <__aeabi_d2f>
 80057e4:	4603      	mov	r3, r0
 80057e6:	ee07 3a90 	vmov	s15, r3
 80057ea:	eef1 7a67 	vneg.f32	s15, s15
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	edc3 7a16 	vstr	s15, [r3, #88]	@ 0x58
		if(psxbt->joyL_x > 0.0){
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	edd3 7a16 	vldr	s15, [r3, #88]	@ 0x58
 80057fa:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80057fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005802:	dd04      	ble.n	800580e <PSxBTGetXY+0x4a6>
			psxbt->joyL_x = 0.0;
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	f04f 0200 	mov.w	r2, #0
 800580a:	659a      	str	r2, [r3, #88]	@ 0x58
 800580c:	e00c      	b.n	8005828 <PSxBTGetXY+0x4c0>
		}else if(psxbt->joyL_x < -1.0){
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	edd3 7a16 	vldr	s15, [r3, #88]	@ 0x58
 8005814:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 8005818:	eef4 7ac7 	vcmpe.f32	s15, s14
 800581c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005820:	d502      	bpl.n	8005828 <PSxBTGetXY+0x4c0>
			psxbt->joyL_x = -1.0;
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	4a4d      	ldr	r2, [pc, #308]	@ (800595c <PSxBTGetXY+0x5f4>)
 8005826:	659a      	str	r2, [r3, #88]	@ 0x58
		}
		psxbt->joyL_xsign = -1;
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	22ff      	movs	r2, #255	@ 0xff
 800582c:	f883 2067 	strb.w	r2, [r3, #103]	@ 0x67
 8005830:	e05c      	b.n	80058ec <PSxBTGetXY+0x584>
	}else if(joyL_right){
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005836:	ee07 3a90 	vmov	s15, r3
 800583a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800583e:	ed9f 7a45 	vldr	s14, [pc, #276]	@ 8005954 <PSxBTGetXY+0x5ec>
 8005842:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005846:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800584a:	dd47      	ble.n	80058dc <PSxBTGetXY+0x574>
		psxbt->joyL_x = ((psx_high_Lx - ((float)psxbt->leftjoy_x))/100.0)/-1.00;
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005850:	ee07 3a90 	vmov	s15, r3
 8005854:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005858:	ee17 0a90 	vmov	r0, s15
 800585c:	f7fa fe74 	bl	8000548 <__aeabi_f2d>
 8005860:	4602      	mov	r2, r0
 8005862:	460b      	mov	r3, r1
 8005864:	f04f 0000 	mov.w	r0, #0
 8005868:	493b      	ldr	r1, [pc, #236]	@ (8005958 <PSxBTGetXY+0x5f0>)
 800586a:	f7fa fd0d 	bl	8000288 <__aeabi_dsub>
 800586e:	4602      	mov	r2, r0
 8005870:	460b      	mov	r3, r1
 8005872:	4610      	mov	r0, r2
 8005874:	4619      	mov	r1, r3
 8005876:	f04f 0200 	mov.w	r2, #0
 800587a:	4b35      	ldr	r3, [pc, #212]	@ (8005950 <PSxBTGetXY+0x5e8>)
 800587c:	f7fa ffe6 	bl	800084c <__aeabi_ddiv>
 8005880:	4602      	mov	r2, r0
 8005882:	460b      	mov	r3, r1
 8005884:	4610      	mov	r0, r2
 8005886:	4619      	mov	r1, r3
 8005888:	f7fb f9ae 	bl	8000be8 <__aeabi_d2f>
 800588c:	4603      	mov	r3, r0
 800588e:	ee07 3a90 	vmov	s15, r3
 8005892:	eef1 7a67 	vneg.f32	s15, s15
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	edc3 7a16 	vstr	s15, [r3, #88]	@ 0x58
		if(psxbt->joyL_x < 0.0){
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	edd3 7a16 	vldr	s15, [r3, #88]	@ 0x58
 80058a2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80058a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80058aa:	d504      	bpl.n	80058b6 <PSxBTGetXY+0x54e>
			psxbt->joyL_x = 0.0;
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	f04f 0200 	mov.w	r2, #0
 80058b2:	659a      	str	r2, [r3, #88]	@ 0x58
 80058b4:	e00d      	b.n	80058d2 <PSxBTGetXY+0x56a>
		}else if(psxbt->joyL_x > 1.0){
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	edd3 7a16 	vldr	s15, [r3, #88]	@ 0x58
 80058bc:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80058c0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80058c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80058c8:	dd03      	ble.n	80058d2 <PSxBTGetXY+0x56a>
			psxbt->joyL_x = 1.0;
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80058d0:	659a      	str	r2, [r3, #88]	@ 0x58
		}
		psxbt->joyL_xsign = 1;
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	2201      	movs	r2, #1
 80058d6:	f883 2067 	strb.w	r2, [r3, #103]	@ 0x67
 80058da:	e007      	b.n	80058ec <PSxBTGetXY+0x584>
	}else{
		psxbt->joyL_xsign = 0;
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	2200      	movs	r2, #0
 80058e0:	f883 2067 	strb.w	r2, [r3, #103]	@ 0x67
		psxbt->joyL_x = 0.0;
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	f04f 0200 	mov.w	r2, #0
 80058ea:	659a      	str	r2, [r3, #88]	@ 0x58
	}

	psxbt->joyR_2 = (psxbt->an_R2/255.0);
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80058f0:	4618      	mov	r0, r3
 80058f2:	f7fa fe07 	bl	8000504 <__aeabi_ui2d>
 80058f6:	a314      	add	r3, pc, #80	@ (adr r3, 8005948 <PSxBTGetXY+0x5e0>)
 80058f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058fc:	f7fa ffa6 	bl	800084c <__aeabi_ddiv>
 8005900:	4602      	mov	r2, r0
 8005902:	460b      	mov	r3, r1
 8005904:	4610      	mov	r0, r2
 8005906:	4619      	mov	r1, r3
 8005908:	f7fb f96e 	bl	8000be8 <__aeabi_d2f>
 800590c:	4602      	mov	r2, r0
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	65da      	str	r2, [r3, #92]	@ 0x5c
	psxbt->joyL_2 = (psxbt->an_L2/255.0);
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005916:	4618      	mov	r0, r3
 8005918:	f7fa fdf4 	bl	8000504 <__aeabi_ui2d>
 800591c:	a30a      	add	r3, pc, #40	@ (adr r3, 8005948 <PSxBTGetXY+0x5e0>)
 800591e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005922:	f7fa ff93 	bl	800084c <__aeabi_ddiv>
 8005926:	4602      	mov	r2, r0
 8005928:	460b      	mov	r3, r1
 800592a:	4610      	mov	r0, r2
 800592c:	4619      	mov	r1, r3
 800592e:	f7fb f95b 	bl	8000be8 <__aeabi_d2f>
 8005932:	4602      	mov	r2, r0
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	661a      	str	r2, [r3, #96]	@ 0x60
}
 8005938:	bf00      	nop
 800593a:	3708      	adds	r7, #8
 800593c:	46bd      	mov	sp, r7
 800593e:	bd80      	pop	{r7, pc}
 8005940:	00000000 	.word	0x00000000
 8005944:	405cc000 	.word	0x405cc000
 8005948:	00000000 	.word	0x00000000
 800594c:	406fe000 	.word	0x406fe000
 8005950:	40590000 	.word	0x40590000
 8005954:	430c0000 	.word	0x430c0000
 8005958:	40618000 	.word	0x40618000
 800595c:	bf800000 	.word	0xbf800000
 8005960:	42e60000 	.word	0x42e60000

08005964 <RBMS_Init>:
 * 						  *hcan			,	pointer to CAN_HandleTypeDef
 * 						  instance		,	Robomaster CAN ID (enumeration)
 * Function Return		: None
 * Function Example		: RBMS_Init(&rbms1, &hcan1, RBMS1);
 */
void RBMS_Init(RBMS_t *rbms, CAN_HandleTypeDef *hcan, RBMS_Instance_t instance) {
 8005964:	b580      	push	{r7, lr}
 8005966:	b086      	sub	sp, #24
 8005968:	af00      	add	r7, sp, #0
 800596a:	60f8      	str	r0, [r7, #12]
 800596c:	60b9      	str	r1, [r7, #8]
 800596e:	4613      	mov	r3, r2
 8005970:	80fb      	strh	r3, [r7, #6]
	rbms->Init = 1;
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	2201      	movs	r2, #1
 8005976:	701a      	strb	r2, [r3, #0]
	rbms->PID_Init = 0;
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	2200      	movs	r2, #0
 800597c:	705a      	strb	r2, [r3, #1]
	rbms->Instance = instance;
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	88fa      	ldrh	r2, [r7, #6]
 8005982:	805a      	strh	r2, [r3, #2]
	rbms->hcan = hcan;
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	68ba      	ldr	r2, [r7, #8]
 8005988:	605a      	str	r2, [r3, #4]
	rbms->pTxMsg.IDE = CAN_ID_STD;
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	2200      	movs	r2, #0
 800598e:	615a      	str	r2, [r3, #20]
	rbms->pTxMsg.StdId = instance;
 8005990:	88fa      	ldrh	r2, [r7, #6]
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	60da      	str	r2, [r3, #12]
	rbms->pTxMsg.RTR = CAN_RTR_DATA;
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	2200      	movs	r2, #0
 800599a:	619a      	str	r2, [r3, #24]
	rbms->pTxMsg.DLC = 8;
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	2208      	movs	r2, #8
 80059a0:	61da      	str	r2, [r3, #28]
	int i = 0;
 80059a2:	2300      	movs	r3, #0
 80059a4:	617b      	str	r3, [r7, #20]
	while (i < 4) {
 80059a6:	e00b      	b.n	80059c0 <RBMS_Init+0x5c>
		RBMS_Config(rbms, i, 0, 0);
 80059a8:	697b      	ldr	r3, [r7, #20]
 80059aa:	b2db      	uxtb	r3, r3
 80059ac:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 80059d0 <RBMS_Init+0x6c>
 80059b0:	2200      	movs	r2, #0
 80059b2:	4619      	mov	r1, r3
 80059b4:	68f8      	ldr	r0, [r7, #12]
 80059b6:	f000 f80d 	bl	80059d4 <RBMS_Config>
		i++;
 80059ba:	697b      	ldr	r3, [r7, #20]
 80059bc:	3301      	adds	r3, #1
 80059be:	617b      	str	r3, [r7, #20]
	while (i < 4) {
 80059c0:	697b      	ldr	r3, [r7, #20]
 80059c2:	2b03      	cmp	r3, #3
 80059c4:	ddf0      	ble.n	80059a8 <RBMS_Init+0x44>
	}
}
 80059c6:	bf00      	nop
 80059c8:	bf00      	nop
 80059ca:	3718      	adds	r7, #24
 80059cc:	46bd      	mov	sp, r7
 80059ce:	bd80      	pop	{r7, pc}
 80059d0:	00000000 	.word	0x00000000

080059d4 <RBMS_Config>:
 * 						  gear_ratio	,	gear ratio of motor
 * 						  wheel_diameter,	wheel diameter of motor
 * Function Return		: None
 * Function Example		: RBMS_Config(&rbms1, RBMS1, C610, 1.0, 0.05);
 */
void RBMS_Config(RBMS_t *rbms, RBMS_Num_t num, RBMS_Controller_t type, float gear_ratio) {
 80059d4:	b480      	push	{r7}
 80059d6:	b085      	sub	sp, #20
 80059d8:	af00      	add	r7, sp, #0
 80059da:	60f8      	str	r0, [r7, #12]
 80059dc:	460b      	mov	r3, r1
 80059de:	ed87 0a01 	vstr	s0, [r7, #4]
 80059e2:	72fb      	strb	r3, [r7, #11]
 80059e4:	4613      	mov	r3, r2
 80059e6:	72bb      	strb	r3, [r7, #10]

	rbms->motor[num].config.Controller = type;
 80059e8:	7afb      	ldrb	r3, [r7, #11]
 80059ea:	68fa      	ldr	r2, [r7, #12]
 80059ec:	f44f 719c 	mov.w	r1, #312	@ 0x138
 80059f0:	fb01 f303 	mul.w	r3, r1, r3
 80059f4:	4413      	add	r3, r2
 80059f6:	332c      	adds	r3, #44	@ 0x2c
 80059f8:	7aba      	ldrb	r2, [r7, #10]
 80059fa:	701a      	strb	r2, [r3, #0]
	rbms->motor[num].config.gear_ratio = gear_ratio;
 80059fc:	7afb      	ldrb	r3, [r7, #11]
 80059fe:	68fa      	ldr	r2, [r7, #12]
 8005a00:	f44f 719c 	mov.w	r1, #312	@ 0x138
 8005a04:	fb01 f303 	mul.w	r3, r1, r3
 8005a08:	4413      	add	r3, r2
 8005a0a:	3330      	adds	r3, #48	@ 0x30
 8005a0c:	687a      	ldr	r2, [r7, #4]
 8005a0e:	601a      	str	r2, [r3, #0]
	rbms->motor[num].config.wheel_diameter = 0.1;
 8005a10:	7afb      	ldrb	r3, [r7, #11]
 8005a12:	68fa      	ldr	r2, [r7, #12]
 8005a14:	f44f 719c 	mov.w	r1, #312	@ 0x138
 8005a18:	fb01 f303 	mul.w	r3, r1, r3
 8005a1c:	4413      	add	r3, r2
 8005a1e:	3334      	adds	r3, #52	@ 0x34
 8005a20:	4aab      	ldr	r2, [pc, #684]	@ (8005cd0 <RBMS_Config+0x2fc>)
 8005a22:	601a      	str	r2, [r3, #0]
	rbms->motor[num].delta_pos = 0;
 8005a24:	7afb      	ldrb	r3, [r7, #11]
 8005a26:	68fa      	ldr	r2, [r7, #12]
 8005a28:	f44f 719c 	mov.w	r1, #312	@ 0x138
 8005a2c:	fb01 f303 	mul.w	r3, r1, r3
 8005a30:	4413      	add	r3, r2
 8005a32:	336c      	adds	r3, #108	@ 0x6c
 8005a34:	2200      	movs	r2, #0
 8005a36:	801a      	strh	r2, [r3, #0]
	rbms->motor[num].cycle_cnt = 0;
 8005a38:	7afb      	ldrb	r3, [r7, #11]
 8005a3a:	68fa      	ldr	r2, [r7, #12]
 8005a3c:	f44f 719c 	mov.w	r1, #312	@ 0x138
 8005a40:	fb01 f303 	mul.w	r3, r1, r3
 8005a44:	4413      	add	r3, r2
 8005a46:	3370      	adds	r3, #112	@ 0x70
 8005a48:	2200      	movs	r2, #0
 8005a4a:	601a      	str	r2, [r3, #0]
	rbms->motor[num].prev_raw_pos = 0;
 8005a4c:	7afb      	ldrb	r3, [r7, #11]
 8005a4e:	68fa      	ldr	r2, [r7, #12]
 8005a50:	f44f 719c 	mov.w	r1, #312	@ 0x138
 8005a54:	fb01 f303 	mul.w	r3, r1, r3
 8005a58:	4413      	add	r3, r2
 8005a5a:	336a      	adds	r3, #106	@ 0x6a
 8005a5c:	2200      	movs	r2, #0
 8005a5e:	801a      	strh	r2, [r3, #0]
	rbms->motor[num].rotor_pos = 0;
 8005a60:	7afb      	ldrb	r3, [r7, #11]
 8005a62:	68fa      	ldr	r2, [r7, #12]
 8005a64:	f44f 719c 	mov.w	r1, #312	@ 0x138
 8005a68:	fb01 f303 	mul.w	r3, r1, r3
 8005a6c:	4413      	add	r3, r2
 8005a6e:	338c      	adds	r3, #140	@ 0x8c
 8005a70:	f04f 0200 	mov.w	r2, #0
 8005a74:	601a      	str	r2, [r3, #0]
	rbms->motor[num].shaft_pos = 0;
 8005a76:	7afb      	ldrb	r3, [r7, #11]
 8005a78:	68fa      	ldr	r2, [r7, #12]
 8005a7a:	f44f 719c 	mov.w	r1, #312	@ 0x138
 8005a7e:	fb01 f303 	mul.w	r3, r1, r3
 8005a82:	4413      	add	r3, r2
 8005a84:	3390      	adds	r3, #144	@ 0x90
 8005a86:	f04f 0200 	mov.w	r2, #0
 8005a8a:	601a      	str	r2, [r3, #0]
	rbms->motor[num].reset_pos = 1;
 8005a8c:	7afb      	ldrb	r3, [r7, #11]
 8005a8e:	68fa      	ldr	r2, [r7, #12]
 8005a90:	f44f 719c 	mov.w	r1, #312	@ 0x138
 8005a94:	fb01 f303 	mul.w	r3, r1, r3
 8005a98:	4413      	add	r3, r2
 8005a9a:	3385      	adds	r3, #133	@ 0x85
 8005a9c:	2201      	movs	r2, #1
 8005a9e:	701a      	strb	r2, [r3, #0]
	rbms->motor[num].control_mode = IDLE;
 8005aa0:	7afb      	ldrb	r3, [r7, #11]
 8005aa2:	68fa      	ldr	r2, [r7, #12]
 8005aa4:	f44f 719c 	mov.w	r1, #312	@ 0x138
 8005aa8:	fb01 f303 	mul.w	r3, r1, r3
 8005aac:	4413      	add	r3, r2
 8005aae:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 8005ab2:	2200      	movs	r2, #0
 8005ab4:	701a      	strb	r2, [r3, #0]

	switch (rbms->motor[num].config.Controller) {
 8005ab6:	7afb      	ldrb	r3, [r7, #11]
 8005ab8:	68fa      	ldr	r2, [r7, #12]
 8005aba:	f44f 719c 	mov.w	r1, #312	@ 0x138
 8005abe:	fb01 f303 	mul.w	r3, r1, r3
 8005ac2:	4413      	add	r3, r2
 8005ac4:	332c      	adds	r3, #44	@ 0x2c
 8005ac6:	781b      	ldrb	r3, [r3, #0]
 8005ac8:	2b01      	cmp	r3, #1
 8005aca:	d002      	beq.n	8005ad2 <RBMS_Config+0xfe>
 8005acc:	2b02      	cmp	r3, #2
 8005ace:	d07c      	beq.n	8005bca <RBMS_Config+0x1f6>
 8005ad0:	e114      	b.n	8005cfc <RBMS_Config+0x328>
	case C610:
		rbms->motor[num].input_gradient = RBMS_C610_INPUT_GRADIENT;
 8005ad2:	7afb      	ldrb	r3, [r7, #11]
 8005ad4:	68fa      	ldr	r2, [r7, #12]
 8005ad6:	f44f 719c 	mov.w	r1, #312	@ 0x138
 8005ada:	fb01 f303 	mul.w	r3, r1, r3
 8005ade:	4413      	add	r3, r2
 8005ae0:	335c      	adds	r3, #92	@ 0x5c
 8005ae2:	4a7c      	ldr	r2, [pc, #496]	@ (8005cd4 <RBMS_Config+0x300>)
 8005ae4:	601a      	str	r2, [r3, #0]
		rbms->motor[num].max_input = RBMS_C610_MAX_INPUT;
 8005ae6:	7afb      	ldrb	r3, [r7, #11]
 8005ae8:	68fa      	ldr	r2, [r7, #12]
 8005aea:	f44f 719c 	mov.w	r1, #312	@ 0x138
 8005aee:	fb01 f303 	mul.w	r3, r1, r3
 8005af2:	4413      	add	r3, r2
 8005af4:	3360      	adds	r3, #96	@ 0x60
 8005af6:	f242 7210 	movw	r2, #10000	@ 0x2710
 8005afa:	801a      	strh	r2, [r3, #0]
		rbms->motor[num].type_gear_ratio = RBMS_C610_GEAR_RATIO;
 8005afc:	7afb      	ldrb	r3, [r7, #11]
 8005afe:	68fa      	ldr	r2, [r7, #12]
 8005b00:	f44f 719c 	mov.w	r1, #312	@ 0x138
 8005b04:	fb01 f303 	mul.w	r3, r1, r3
 8005b08:	4413      	add	r3, r2
 8005b0a:	3364      	adds	r3, #100	@ 0x64
 8005b0c:	4a72      	ldr	r2, [pc, #456]	@ (8005cd8 <RBMS_Config+0x304>)
 8005b0e:	601a      	str	r2, [r3, #0]
		rbms->motor[num].config.POS_P = 150;
 8005b10:	7afb      	ldrb	r3, [r7, #11]
 8005b12:	68fa      	ldr	r2, [r7, #12]
 8005b14:	f44f 719c 	mov.w	r1, #312	@ 0x138
 8005b18:	fb01 f303 	mul.w	r3, r1, r3
 8005b1c:	4413      	add	r3, r2
 8005b1e:	3350      	adds	r3, #80	@ 0x50
 8005b20:	4a6e      	ldr	r2, [pc, #440]	@ (8005cdc <RBMS_Config+0x308>)
 8005b22:	601a      	str	r2, [r3, #0]
		rbms->motor[num].config.POS_I = 0.03;
 8005b24:	7afb      	ldrb	r3, [r7, #11]
 8005b26:	68fa      	ldr	r2, [r7, #12]
 8005b28:	f44f 719c 	mov.w	r1, #312	@ 0x138
 8005b2c:	fb01 f303 	mul.w	r3, r1, r3
 8005b30:	4413      	add	r3, r2
 8005b32:	3354      	adds	r3, #84	@ 0x54
 8005b34:	4a6a      	ldr	r2, [pc, #424]	@ (8005ce0 <RBMS_Config+0x30c>)
 8005b36:	601a      	str	r2, [r3, #0]
		rbms->motor[num].config.POS_D = 0;
 8005b38:	7afb      	ldrb	r3, [r7, #11]
 8005b3a:	68fa      	ldr	r2, [r7, #12]
 8005b3c:	f44f 719c 	mov.w	r1, #312	@ 0x138
 8005b40:	fb01 f303 	mul.w	r3, r1, r3
 8005b44:	4413      	add	r3, r2
 8005b46:	3358      	adds	r3, #88	@ 0x58
 8005b48:	f04f 0200 	mov.w	r2, #0
 8005b4c:	601a      	str	r2, [r3, #0]
		rbms->motor[num].config.VEL_P = 12;
 8005b4e:	7afb      	ldrb	r3, [r7, #11]
 8005b50:	68fa      	ldr	r2, [r7, #12]
 8005b52:	f44f 719c 	mov.w	r1, #312	@ 0x138
 8005b56:	fb01 f303 	mul.w	r3, r1, r3
 8005b5a:	4413      	add	r3, r2
 8005b5c:	3344      	adds	r3, #68	@ 0x44
 8005b5e:	4a61      	ldr	r2, [pc, #388]	@ (8005ce4 <RBMS_Config+0x310>)
 8005b60:	601a      	str	r2, [r3, #0]
		rbms->motor[num].config.VEL_I = 0.03;
 8005b62:	7afb      	ldrb	r3, [r7, #11]
 8005b64:	68fa      	ldr	r2, [r7, #12]
 8005b66:	f44f 719c 	mov.w	r1, #312	@ 0x138
 8005b6a:	fb01 f303 	mul.w	r3, r1, r3
 8005b6e:	4413      	add	r3, r2
 8005b70:	3348      	adds	r3, #72	@ 0x48
 8005b72:	4a5b      	ldr	r2, [pc, #364]	@ (8005ce0 <RBMS_Config+0x30c>)
 8005b74:	601a      	str	r2, [r3, #0]
		rbms->motor[num].config.VEL_D = 0;
 8005b76:	7afb      	ldrb	r3, [r7, #11]
 8005b78:	68fa      	ldr	r2, [r7, #12]
 8005b7a:	f44f 719c 	mov.w	r1, #312	@ 0x138
 8005b7e:	fb01 f303 	mul.w	r3, r1, r3
 8005b82:	4413      	add	r3, r2
 8005b84:	334c      	adds	r3, #76	@ 0x4c
 8005b86:	f04f 0200 	mov.w	r2, #0
 8005b8a:	601a      	str	r2, [r3, #0]
		rbms->motor[num].config.pos_limit = 300;
 8005b8c:	7afb      	ldrb	r3, [r7, #11]
 8005b8e:	68fa      	ldr	r2, [r7, #12]
 8005b90:	f44f 719c 	mov.w	r1, #312	@ 0x138
 8005b94:	fb01 f303 	mul.w	r3, r1, r3
 8005b98:	4413      	add	r3, r2
 8005b9a:	3340      	adds	r3, #64	@ 0x40
 8005b9c:	4a52      	ldr	r2, [pc, #328]	@ (8005ce8 <RBMS_Config+0x314>)
 8005b9e:	601a      	str	r2, [r3, #0]
		rbms->motor[num].config.vel_limit = 550; //0-600
 8005ba0:	7afb      	ldrb	r3, [r7, #11]
 8005ba2:	68fa      	ldr	r2, [r7, #12]
 8005ba4:	f44f 719c 	mov.w	r1, #312	@ 0x138
 8005ba8:	fb01 f303 	mul.w	r3, r1, r3
 8005bac:	4413      	add	r3, r2
 8005bae:	333c      	adds	r3, #60	@ 0x3c
 8005bb0:	4a4e      	ldr	r2, [pc, #312]	@ (8005cec <RBMS_Config+0x318>)
 8005bb2:	601a      	str	r2, [r3, #0]
		rbms->motor[num].config.cur_limit = 10; //10 max
 8005bb4:	7afb      	ldrb	r3, [r7, #11]
 8005bb6:	68fa      	ldr	r2, [r7, #12]
 8005bb8:	f44f 719c 	mov.w	r1, #312	@ 0x138
 8005bbc:	fb01 f303 	mul.w	r3, r1, r3
 8005bc0:	4413      	add	r3, r2
 8005bc2:	3338      	adds	r3, #56	@ 0x38
 8005bc4:	4a4a      	ldr	r2, [pc, #296]	@ (8005cf0 <RBMS_Config+0x31c>)
 8005bc6:	601a      	str	r2, [r3, #0]
		break;
 8005bc8:	e10e      	b.n	8005de8 <RBMS_Config+0x414>
	case C620:
		rbms->motor[num].input_gradient = RBMS_C620_INPUT_GRADIENT;
 8005bca:	7afb      	ldrb	r3, [r7, #11]
 8005bcc:	68fa      	ldr	r2, [r7, #12]
 8005bce:	f44f 719c 	mov.w	r1, #312	@ 0x138
 8005bd2:	fb01 f303 	mul.w	r3, r1, r3
 8005bd6:	4413      	add	r3, r2
 8005bd8:	335c      	adds	r3, #92	@ 0x5c
 8005bda:	4a46      	ldr	r2, [pc, #280]	@ (8005cf4 <RBMS_Config+0x320>)
 8005bdc:	601a      	str	r2, [r3, #0]
		rbms->motor[num].max_input = RBMS_C620_MAX_INPUT;
 8005bde:	7afb      	ldrb	r3, [r7, #11]
 8005be0:	68fa      	ldr	r2, [r7, #12]
 8005be2:	f44f 719c 	mov.w	r1, #312	@ 0x138
 8005be6:	fb01 f303 	mul.w	r3, r1, r3
 8005bea:	4413      	add	r3, r2
 8005bec:	3360      	adds	r3, #96	@ 0x60
 8005bee:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8005bf2:	801a      	strh	r2, [r3, #0]
		rbms->motor[num].type_gear_ratio = RBMS_C620_GEAR_RATIO;
 8005bf4:	7afb      	ldrb	r3, [r7, #11]
 8005bf6:	68fa      	ldr	r2, [r7, #12]
 8005bf8:	f44f 719c 	mov.w	r1, #312	@ 0x138
 8005bfc:	fb01 f303 	mul.w	r3, r1, r3
 8005c00:	4413      	add	r3, r2
 8005c02:	3364      	adds	r3, #100	@ 0x64
 8005c04:	4a3c      	ldr	r2, [pc, #240]	@ (8005cf8 <RBMS_Config+0x324>)
 8005c06:	601a      	str	r2, [r3, #0]
		rbms->motor[num].config.POS_P = 0;
 8005c08:	7afb      	ldrb	r3, [r7, #11]
 8005c0a:	68fa      	ldr	r2, [r7, #12]
 8005c0c:	f44f 719c 	mov.w	r1, #312	@ 0x138
 8005c10:	fb01 f303 	mul.w	r3, r1, r3
 8005c14:	4413      	add	r3, r2
 8005c16:	3350      	adds	r3, #80	@ 0x50
 8005c18:	f04f 0200 	mov.w	r2, #0
 8005c1c:	601a      	str	r2, [r3, #0]
		rbms->motor[num].config.POS_I = 0;
 8005c1e:	7afb      	ldrb	r3, [r7, #11]
 8005c20:	68fa      	ldr	r2, [r7, #12]
 8005c22:	f44f 719c 	mov.w	r1, #312	@ 0x138
 8005c26:	fb01 f303 	mul.w	r3, r1, r3
 8005c2a:	4413      	add	r3, r2
 8005c2c:	3354      	adds	r3, #84	@ 0x54
 8005c2e:	f04f 0200 	mov.w	r2, #0
 8005c32:	601a      	str	r2, [r3, #0]
		rbms->motor[num].config.POS_D = 0;
 8005c34:	7afb      	ldrb	r3, [r7, #11]
 8005c36:	68fa      	ldr	r2, [r7, #12]
 8005c38:	f44f 719c 	mov.w	r1, #312	@ 0x138
 8005c3c:	fb01 f303 	mul.w	r3, r1, r3
 8005c40:	4413      	add	r3, r2
 8005c42:	3358      	adds	r3, #88	@ 0x58
 8005c44:	f04f 0200 	mov.w	r2, #0
 8005c48:	601a      	str	r2, [r3, #0]
		rbms->motor[num].config.VEL_P = 0;
 8005c4a:	7afb      	ldrb	r3, [r7, #11]
 8005c4c:	68fa      	ldr	r2, [r7, #12]
 8005c4e:	f44f 719c 	mov.w	r1, #312	@ 0x138
 8005c52:	fb01 f303 	mul.w	r3, r1, r3
 8005c56:	4413      	add	r3, r2
 8005c58:	3344      	adds	r3, #68	@ 0x44
 8005c5a:	f04f 0200 	mov.w	r2, #0
 8005c5e:	601a      	str	r2, [r3, #0]
		rbms->motor[num].config.VEL_I = 0;
 8005c60:	7afb      	ldrb	r3, [r7, #11]
 8005c62:	68fa      	ldr	r2, [r7, #12]
 8005c64:	f44f 719c 	mov.w	r1, #312	@ 0x138
 8005c68:	fb01 f303 	mul.w	r3, r1, r3
 8005c6c:	4413      	add	r3, r2
 8005c6e:	3348      	adds	r3, #72	@ 0x48
 8005c70:	f04f 0200 	mov.w	r2, #0
 8005c74:	601a      	str	r2, [r3, #0]
		rbms->motor[num].config.VEL_D = 0;
 8005c76:	7afb      	ldrb	r3, [r7, #11]
 8005c78:	68fa      	ldr	r2, [r7, #12]
 8005c7a:	f44f 719c 	mov.w	r1, #312	@ 0x138
 8005c7e:	fb01 f303 	mul.w	r3, r1, r3
 8005c82:	4413      	add	r3, r2
 8005c84:	334c      	adds	r3, #76	@ 0x4c
 8005c86:	f04f 0200 	mov.w	r2, #0
 8005c8a:	601a      	str	r2, [r3, #0]
		rbms->motor[num].config.pos_limit = 0;
 8005c8c:	7afb      	ldrb	r3, [r7, #11]
 8005c8e:	68fa      	ldr	r2, [r7, #12]
 8005c90:	f44f 719c 	mov.w	r1, #312	@ 0x138
 8005c94:	fb01 f303 	mul.w	r3, r1, r3
 8005c98:	4413      	add	r3, r2
 8005c9a:	3340      	adds	r3, #64	@ 0x40
 8005c9c:	f04f 0200 	mov.w	r2, #0
 8005ca0:	601a      	str	r2, [r3, #0]
		rbms->motor[num].config.vel_limit = 0;
 8005ca2:	7afb      	ldrb	r3, [r7, #11]
 8005ca4:	68fa      	ldr	r2, [r7, #12]
 8005ca6:	f44f 719c 	mov.w	r1, #312	@ 0x138
 8005caa:	fb01 f303 	mul.w	r3, r1, r3
 8005cae:	4413      	add	r3, r2
 8005cb0:	333c      	adds	r3, #60	@ 0x3c
 8005cb2:	f04f 0200 	mov.w	r2, #0
 8005cb6:	601a      	str	r2, [r3, #0]
		rbms->motor[num].config.cur_limit = 0;
 8005cb8:	7afb      	ldrb	r3, [r7, #11]
 8005cba:	68fa      	ldr	r2, [r7, #12]
 8005cbc:	f44f 719c 	mov.w	r1, #312	@ 0x138
 8005cc0:	fb01 f303 	mul.w	r3, r1, r3
 8005cc4:	4413      	add	r3, r2
 8005cc6:	3338      	adds	r3, #56	@ 0x38
 8005cc8:	f04f 0200 	mov.w	r2, #0
 8005ccc:	601a      	str	r2, [r3, #0]
		break;
 8005cce:	e08b      	b.n	8005de8 <RBMS_Config+0x414>
 8005cd0:	3dcccccd 	.word	0x3dcccccd
 8005cd4:	447a0000 	.word	0x447a0000
 8005cd8:	42100000 	.word	0x42100000
 8005cdc:	43160000 	.word	0x43160000
 8005ce0:	3cf5c28f 	.word	0x3cf5c28f
 8005ce4:	41400000 	.word	0x41400000
 8005ce8:	43960000 	.word	0x43960000
 8005cec:	44098000 	.word	0x44098000
 8005cf0:	41200000 	.word	0x41200000
 8005cf4:	444ccccd 	.word	0x444ccccd
 8005cf8:	4199a027 	.word	0x4199a027
	default:
		rbms->motor[num].input_gradient = 0;
 8005cfc:	7afb      	ldrb	r3, [r7, #11]
 8005cfe:	68fa      	ldr	r2, [r7, #12]
 8005d00:	f44f 719c 	mov.w	r1, #312	@ 0x138
 8005d04:	fb01 f303 	mul.w	r3, r1, r3
 8005d08:	4413      	add	r3, r2
 8005d0a:	335c      	adds	r3, #92	@ 0x5c
 8005d0c:	f04f 0200 	mov.w	r2, #0
 8005d10:	601a      	str	r2, [r3, #0]
		rbms->motor[num].max_input = 0;
 8005d12:	7afb      	ldrb	r3, [r7, #11]
 8005d14:	68fa      	ldr	r2, [r7, #12]
 8005d16:	f44f 719c 	mov.w	r1, #312	@ 0x138
 8005d1a:	fb01 f303 	mul.w	r3, r1, r3
 8005d1e:	4413      	add	r3, r2
 8005d20:	3360      	adds	r3, #96	@ 0x60
 8005d22:	2200      	movs	r2, #0
 8005d24:	801a      	strh	r2, [r3, #0]
		rbms->motor[num].config.POS_P = 0;
 8005d26:	7afb      	ldrb	r3, [r7, #11]
 8005d28:	68fa      	ldr	r2, [r7, #12]
 8005d2a:	f44f 719c 	mov.w	r1, #312	@ 0x138
 8005d2e:	fb01 f303 	mul.w	r3, r1, r3
 8005d32:	4413      	add	r3, r2
 8005d34:	3350      	adds	r3, #80	@ 0x50
 8005d36:	f04f 0200 	mov.w	r2, #0
 8005d3a:	601a      	str	r2, [r3, #0]
		rbms->motor[num].config.POS_I = 0;
 8005d3c:	7afb      	ldrb	r3, [r7, #11]
 8005d3e:	68fa      	ldr	r2, [r7, #12]
 8005d40:	f44f 719c 	mov.w	r1, #312	@ 0x138
 8005d44:	fb01 f303 	mul.w	r3, r1, r3
 8005d48:	4413      	add	r3, r2
 8005d4a:	3354      	adds	r3, #84	@ 0x54
 8005d4c:	f04f 0200 	mov.w	r2, #0
 8005d50:	601a      	str	r2, [r3, #0]
		rbms->motor[num].config.POS_D = 0;
 8005d52:	7afb      	ldrb	r3, [r7, #11]
 8005d54:	68fa      	ldr	r2, [r7, #12]
 8005d56:	f44f 719c 	mov.w	r1, #312	@ 0x138
 8005d5a:	fb01 f303 	mul.w	r3, r1, r3
 8005d5e:	4413      	add	r3, r2
 8005d60:	3358      	adds	r3, #88	@ 0x58
 8005d62:	f04f 0200 	mov.w	r2, #0
 8005d66:	601a      	str	r2, [r3, #0]
		rbms->motor[num].config.VEL_P = 0;
 8005d68:	7afb      	ldrb	r3, [r7, #11]
 8005d6a:	68fa      	ldr	r2, [r7, #12]
 8005d6c:	f44f 719c 	mov.w	r1, #312	@ 0x138
 8005d70:	fb01 f303 	mul.w	r3, r1, r3
 8005d74:	4413      	add	r3, r2
 8005d76:	3344      	adds	r3, #68	@ 0x44
 8005d78:	f04f 0200 	mov.w	r2, #0
 8005d7c:	601a      	str	r2, [r3, #0]
		rbms->motor[num].config.VEL_I = 0;
 8005d7e:	7afb      	ldrb	r3, [r7, #11]
 8005d80:	68fa      	ldr	r2, [r7, #12]
 8005d82:	f44f 719c 	mov.w	r1, #312	@ 0x138
 8005d86:	fb01 f303 	mul.w	r3, r1, r3
 8005d8a:	4413      	add	r3, r2
 8005d8c:	3348      	adds	r3, #72	@ 0x48
 8005d8e:	f04f 0200 	mov.w	r2, #0
 8005d92:	601a      	str	r2, [r3, #0]
		rbms->motor[num].config.VEL_D = 0;
 8005d94:	7afb      	ldrb	r3, [r7, #11]
 8005d96:	68fa      	ldr	r2, [r7, #12]
 8005d98:	f44f 719c 	mov.w	r1, #312	@ 0x138
 8005d9c:	fb01 f303 	mul.w	r3, r1, r3
 8005da0:	4413      	add	r3, r2
 8005da2:	334c      	adds	r3, #76	@ 0x4c
 8005da4:	f04f 0200 	mov.w	r2, #0
 8005da8:	601a      	str	r2, [r3, #0]
		rbms->motor[num].config.pos_limit = 100;
 8005daa:	7afb      	ldrb	r3, [r7, #11]
 8005dac:	68fa      	ldr	r2, [r7, #12]
 8005dae:	f44f 719c 	mov.w	r1, #312	@ 0x138
 8005db2:	fb01 f303 	mul.w	r3, r1, r3
 8005db6:	4413      	add	r3, r2
 8005db8:	3340      	adds	r3, #64	@ 0x40
 8005dba:	4a0e      	ldr	r2, [pc, #56]	@ (8005df4 <RBMS_Config+0x420>)
 8005dbc:	601a      	str	r2, [r3, #0]
		rbms->motor[num].config.vel_limit = 200;
 8005dbe:	7afb      	ldrb	r3, [r7, #11]
 8005dc0:	68fa      	ldr	r2, [r7, #12]
 8005dc2:	f44f 719c 	mov.w	r1, #312	@ 0x138
 8005dc6:	fb01 f303 	mul.w	r3, r1, r3
 8005dca:	4413      	add	r3, r2
 8005dcc:	333c      	adds	r3, #60	@ 0x3c
 8005dce:	4a0a      	ldr	r2, [pc, #40]	@ (8005df8 <RBMS_Config+0x424>)
 8005dd0:	601a      	str	r2, [r3, #0]
		rbms->motor[num].config.cur_limit = 5;
 8005dd2:	7afb      	ldrb	r3, [r7, #11]
 8005dd4:	68fa      	ldr	r2, [r7, #12]
 8005dd6:	f44f 719c 	mov.w	r1, #312	@ 0x138
 8005dda:	fb01 f303 	mul.w	r3, r1, r3
 8005dde:	4413      	add	r3, r2
 8005de0:	3338      	adds	r3, #56	@ 0x38
 8005de2:	4a06      	ldr	r2, [pc, #24]	@ (8005dfc <RBMS_Config+0x428>)
 8005de4:	601a      	str	r2, [r3, #0]
		break;
 8005de6:	bf00      	nop
	}
}
 8005de8:	bf00      	nop
 8005dea:	3714      	adds	r7, #20
 8005dec:	46bd      	mov	sp, r7
 8005dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df2:	4770      	bx	lr
 8005df4:	42c80000 	.word	0x42c80000
 8005df8:	43480000 	.word	0x43480000
 8005dfc:	40a00000 	.word	0x40a00000

08005e00 <RBMS_PID_Init>:
 * Function Remarks		: Init PID for each motor in RBMS_t *rbms
 * Function Arguments	: *rbms		,	pointer to structure RBMS_t
 * Function Return		: None
 * Function Example		: RBMS_PID_Init(&rbms1);
 */
void RBMS_PID_Init(RBMS_t *rbms) {
 8005e00:	b580      	push	{r7, lr}
 8005e02:	b084      	sub	sp, #16
 8005e04:	af00      	add	r7, sp, #0
 8005e06:	6078      	str	r0, [r7, #4]
	rbms->PID_Init = 1;
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	2201      	movs	r2, #1
 8005e0c:	705a      	strb	r2, [r3, #1]
	for (int i = 0; i < 4; i++) {
 8005e0e:	2300      	movs	r3, #0
 8005e10:	60fb      	str	r3, [r7, #12]
 8005e12:	e0f7      	b.n	8006004 <RBMS_PID_Init+0x204>
		if (rbms->motor[i].config.Controller != 0) {
 8005e14:	687a      	ldr	r2, [r7, #4]
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	f44f 719c 	mov.w	r1, #312	@ 0x138
 8005e1c:	fb01 f303 	mul.w	r3, r1, r3
 8005e20:	4413      	add	r3, r2
 8005e22:	332c      	adds	r3, #44	@ 0x2c
 8005e24:	781b      	ldrb	r3, [r3, #0]
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	f000 80e9 	beq.w	8005ffe <RBMS_PID_Init+0x1fe>
			PIDSourceInit(&rbms->motor[i].pos_error, &rbms->motor[i].t_rpm, &rbms->motor[i].P_PID);
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	f44f 729c 	mov.w	r2, #312	@ 0x138
 8005e32:	fb02 f303 	mul.w	r3, r2, r3
 8005e36:	f503 73ac 	add.w	r3, r3, #344	@ 0x158
 8005e3a:	687a      	ldr	r2, [r7, #4]
 8005e3c:	4413      	add	r3, r2
 8005e3e:	1d18      	adds	r0, r3, #4
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	f44f 729c 	mov.w	r2, #312	@ 0x138
 8005e46:	fb02 f303 	mul.w	r3, r2, r3
 8005e4a:	33a0      	adds	r3, #160	@ 0xa0
 8005e4c:	687a      	ldr	r2, [r7, #4]
 8005e4e:	4413      	add	r3, r2
 8005e50:	f103 0108 	add.w	r1, r3, #8
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	f44f 729c 	mov.w	r2, #312	@ 0x138
 8005e5a:	fb02 f303 	mul.w	r3, r2, r3
 8005e5e:	33a8      	adds	r3, #168	@ 0xa8
 8005e60:	687a      	ldr	r2, [r7, #4]
 8005e62:	4413      	add	r3, r2
 8005e64:	3308      	adds	r3, #8
 8005e66:	461a      	mov	r2, r3
 8005e68:	f7fe ff92 	bl	8004d90 <PIDSourceInit>
			PIDGainInit(0.005, 1.0, 1.0 / 100, 600, rbms->motor[i].config.POS_P, rbms->motor[i].config.POS_I, rbms->motor[i].config.POS_D, 1, &rbms->motor[i].P_PID);
 8005e6c:	687a      	ldr	r2, [r7, #4]
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	f44f 719c 	mov.w	r1, #312	@ 0x138
 8005e74:	fb01 f303 	mul.w	r3, r1, r3
 8005e78:	4413      	add	r3, r2
 8005e7a:	3350      	adds	r3, #80	@ 0x50
 8005e7c:	edd3 7a00 	vldr	s15, [r3]
 8005e80:	687a      	ldr	r2, [r7, #4]
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	f44f 719c 	mov.w	r1, #312	@ 0x138
 8005e88:	fb01 f303 	mul.w	r3, r1, r3
 8005e8c:	4413      	add	r3, r2
 8005e8e:	3354      	adds	r3, #84	@ 0x54
 8005e90:	ed93 7a00 	vldr	s14, [r3]
 8005e94:	687a      	ldr	r2, [r7, #4]
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	f44f 719c 	mov.w	r1, #312	@ 0x138
 8005e9c:	fb01 f303 	mul.w	r3, r1, r3
 8005ea0:	4413      	add	r3, r2
 8005ea2:	3358      	adds	r3, #88	@ 0x58
 8005ea4:	edd3 6a00 	vldr	s13, [r3]
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	f44f 729c 	mov.w	r2, #312	@ 0x138
 8005eae:	fb02 f303 	mul.w	r3, r2, r3
 8005eb2:	33a8      	adds	r3, #168	@ 0xa8
 8005eb4:	687a      	ldr	r2, [r7, #4]
 8005eb6:	4413      	add	r3, r2
 8005eb8:	3308      	adds	r3, #8
 8005eba:	4618      	mov	r0, r3
 8005ebc:	eef7 3a00 	vmov.f32	s7, #112	@ 0x3f800000  1.0
 8005ec0:	eeb0 3a66 	vmov.f32	s6, s13
 8005ec4:	eef0 2a47 	vmov.f32	s5, s14
 8005ec8:	eeb0 2a67 	vmov.f32	s4, s15
 8005ecc:	eddf 1a52 	vldr	s3, [pc, #328]	@ 8006018 <RBMS_PID_Init+0x218>
 8005ed0:	ed9f 1a52 	vldr	s2, [pc, #328]	@ 800601c <RBMS_PID_Init+0x21c>
 8005ed4:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
 8005ed8:	ed9f 0a51 	vldr	s0, [pc, #324]	@ 8006020 <RBMS_PID_Init+0x220>
 8005edc:	f7fe ff6a 	bl	8004db4 <PIDGainInit>
			PIDDelayInit(&rbms->motor[i].P_PID);
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	f44f 729c 	mov.w	r2, #312	@ 0x138
 8005ee6:	fb02 f303 	mul.w	r3, r2, r3
 8005eea:	33a8      	adds	r3, #168	@ 0xa8
 8005eec:	687a      	ldr	r2, [r7, #4]
 8005eee:	4413      	add	r3, r2
 8005ef0:	3308      	adds	r3, #8
 8005ef2:	4618      	mov	r0, r3
 8005ef4:	f7ff f8cc 	bl	8005090 <PIDDelayInit>
			PIDSourceInit(&rbms->motor[i].vel_error, &rbms->motor[i].t_current, &rbms->motor[i].V_PID);
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	f44f 729c 	mov.w	r2, #312	@ 0x138
 8005efe:	fb02 f303 	mul.w	r3, r2, r3
 8005f02:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8005f06:	687a      	ldr	r2, [r7, #4]
 8005f08:	4413      	add	r3, r2
 8005f0a:	f103 0008 	add.w	r0, r3, #8
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	f44f 729c 	mov.w	r2, #312	@ 0x138
 8005f14:	fb02 f303 	mul.w	r3, r2, r3
 8005f18:	33a8      	adds	r3, #168	@ 0xa8
 8005f1a:	687a      	ldr	r2, [r7, #4]
 8005f1c:	4413      	add	r3, r2
 8005f1e:	1d19      	adds	r1, r3, #4
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	f44f 729c 	mov.w	r2, #312	@ 0x138
 8005f26:	fb02 f303 	mul.w	r3, r2, r3
 8005f2a:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8005f2e:	687a      	ldr	r2, [r7, #4]
 8005f30:	4413      	add	r3, r2
 8005f32:	3304      	adds	r3, #4
 8005f34:	461a      	mov	r2, r3
 8005f36:	f7fe ff2b 	bl	8004d90 <PIDSourceInit>
			PIDGainInit(0.005, 1.0, 1.0 / 600, rbms->motor[i].config.cur_limit, rbms->motor[i].config.VEL_P * 10 / rbms->motor[i].config.cur_limit, rbms->motor[i].config.VEL_I, rbms->motor[i].config.VEL_D, 1, &rbms->motor[i].V_PID);
 8005f3a:	687a      	ldr	r2, [r7, #4]
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	f44f 719c 	mov.w	r1, #312	@ 0x138
 8005f42:	fb01 f303 	mul.w	r3, r1, r3
 8005f46:	4413      	add	r3, r2
 8005f48:	3338      	adds	r3, #56	@ 0x38
 8005f4a:	edd3 6a00 	vldr	s13, [r3]
 8005f4e:	687a      	ldr	r2, [r7, #4]
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	f44f 719c 	mov.w	r1, #312	@ 0x138
 8005f56:	fb01 f303 	mul.w	r3, r1, r3
 8005f5a:	4413      	add	r3, r2
 8005f5c:	3344      	adds	r3, #68	@ 0x44
 8005f5e:	edd3 7a00 	vldr	s15, [r3]
 8005f62:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8005f66:	ee27 7a87 	vmul.f32	s14, s15, s14
 8005f6a:	687a      	ldr	r2, [r7, #4]
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	f44f 719c 	mov.w	r1, #312	@ 0x138
 8005f72:	fb01 f303 	mul.w	r3, r1, r3
 8005f76:	4413      	add	r3, r2
 8005f78:	3338      	adds	r3, #56	@ 0x38
 8005f7a:	edd3 7a00 	vldr	s15, [r3]
 8005f7e:	ee87 6a27 	vdiv.f32	s12, s14, s15
 8005f82:	687a      	ldr	r2, [r7, #4]
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	f44f 719c 	mov.w	r1, #312	@ 0x138
 8005f8a:	fb01 f303 	mul.w	r3, r1, r3
 8005f8e:	4413      	add	r3, r2
 8005f90:	3348      	adds	r3, #72	@ 0x48
 8005f92:	edd3 7a00 	vldr	s15, [r3]
 8005f96:	687a      	ldr	r2, [r7, #4]
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	f44f 719c 	mov.w	r1, #312	@ 0x138
 8005f9e:	fb01 f303 	mul.w	r3, r1, r3
 8005fa2:	4413      	add	r3, r2
 8005fa4:	334c      	adds	r3, #76	@ 0x4c
 8005fa6:	ed93 7a00 	vldr	s14, [r3]
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	f44f 729c 	mov.w	r2, #312	@ 0x138
 8005fb0:	fb02 f303 	mul.w	r3, r2, r3
 8005fb4:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8005fb8:	687a      	ldr	r2, [r7, #4]
 8005fba:	4413      	add	r3, r2
 8005fbc:	3304      	adds	r3, #4
 8005fbe:	4618      	mov	r0, r3
 8005fc0:	eef7 3a00 	vmov.f32	s7, #112	@ 0x3f800000  1.0
 8005fc4:	eeb0 3a47 	vmov.f32	s6, s14
 8005fc8:	eef0 2a67 	vmov.f32	s5, s15
 8005fcc:	eeb0 2a46 	vmov.f32	s4, s12
 8005fd0:	eef0 1a66 	vmov.f32	s3, s13
 8005fd4:	ed9f 1a13 	vldr	s2, [pc, #76]	@ 8006024 <RBMS_PID_Init+0x224>
 8005fd8:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
 8005fdc:	ed9f 0a10 	vldr	s0, [pc, #64]	@ 8006020 <RBMS_PID_Init+0x220>
 8005fe0:	f7fe fee8 	bl	8004db4 <PIDGainInit>
			PIDDelayInit(&rbms->motor[i].V_PID);
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	f44f 729c 	mov.w	r2, #312	@ 0x138
 8005fea:	fb02 f303 	mul.w	r3, r2, r3
 8005fee:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8005ff2:	687a      	ldr	r2, [r7, #4]
 8005ff4:	4413      	add	r3, r2
 8005ff6:	3304      	adds	r3, #4
 8005ff8:	4618      	mov	r0, r3
 8005ffa:	f7ff f849 	bl	8005090 <PIDDelayInit>
	for (int i = 0; i < 4; i++) {
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	3301      	adds	r3, #1
 8006002:	60fb      	str	r3, [r7, #12]
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	2b03      	cmp	r3, #3
 8006008:	f77f af04 	ble.w	8005e14 <RBMS_PID_Init+0x14>
		}
	}
}
 800600c:	bf00      	nop
 800600e:	bf00      	nop
 8006010:	3710      	adds	r7, #16
 8006012:	46bd      	mov	sp, r7
 8006014:	bd80      	pop	{r7, pc}
 8006016:	bf00      	nop
 8006018:	44160000 	.word	0x44160000
 800601c:	3c23d70a 	.word	0x3c23d70a
 8006020:	3ba3d70a 	.word	0x3ba3d70a
 8006024:	3ada740e 	.word	0x3ada740e

08006028 <RBMS_Set_Control_Mode>:
 * 						  num		,	motor number (0 to 3)
 * 						  mode		,	control mode (enumeration)
 * Function Return		: None
 * Function Example		: RBMS_Set_Control_Mode(&rbms1, RBMS1, POSITION);
 */
void RBMS_Set_Control_Mode(RBMS_t *rbms, RBMS_Num_t num, RBMS_Control_Mode_t mode) {
 8006028:	b480      	push	{r7}
 800602a:	b083      	sub	sp, #12
 800602c:	af00      	add	r7, sp, #0
 800602e:	6078      	str	r0, [r7, #4]
 8006030:	460b      	mov	r3, r1
 8006032:	70fb      	strb	r3, [r7, #3]
 8006034:	4613      	mov	r3, r2
 8006036:	70bb      	strb	r3, [r7, #2]
	rbms->motor[num].control_mode = mode;
 8006038:	78fb      	ldrb	r3, [r7, #3]
 800603a:	687a      	ldr	r2, [r7, #4]
 800603c:	f44f 719c 	mov.w	r1, #312	@ 0x138
 8006040:	fb01 f303 	mul.w	r3, r1, r3
 8006044:	4413      	add	r3, r2
 8006046:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 800604a:	78ba      	ldrb	r2, [r7, #2]
 800604c:	701a      	strb	r2, [r3, #0]
}
 800604e:	bf00      	nop
 8006050:	370c      	adds	r7, #12
 8006052:	46bd      	mov	sp, r7
 8006054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006058:	4770      	bx	lr

0800605a <RBMS_Set_Target_Velocity>:
 * 						  num		,	motor number (0 to 3)
 * 						  rpm		,	target rpm
 * Function Return		: None
 * Function Example		: RBMS_Set_Target_Velocity(&rbms1, RBMS1, 100);
 */
void RBMS_Set_Target_Velocity(RBMS_t *rbms, RBMS_Num_t num, float rpm) {
 800605a:	b480      	push	{r7}
 800605c:	b085      	sub	sp, #20
 800605e:	af00      	add	r7, sp, #0
 8006060:	60f8      	str	r0, [r7, #12]
 8006062:	460b      	mov	r3, r1
 8006064:	ed87 0a01 	vstr	s0, [r7, #4]
 8006068:	72fb      	strb	r3, [r7, #11]
	rbms->motor[num].t_rpm = rpm;
 800606a:	7afb      	ldrb	r3, [r7, #11]
 800606c:	68fa      	ldr	r2, [r7, #12]
 800606e:	f44f 719c 	mov.w	r1, #312	@ 0x138
 8006072:	fb01 f303 	mul.w	r3, r1, r3
 8006076:	4413      	add	r3, r2
 8006078:	33a8      	adds	r3, #168	@ 0xa8
 800607a:	687a      	ldr	r2, [r7, #4]
 800607c:	601a      	str	r2, [r3, #0]
}
 800607e:	bf00      	nop
 8006080:	3714      	adds	r7, #20
 8006082:	46bd      	mov	sp, r7
 8006084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006088:	4770      	bx	lr

0800608a <RBMS_Velocity_Control>:
 * Function Arguments	: *rbms		,	pointer to structure RBMS_t
 * 						  num			,	motor number (0 to 3)
 * Function Return		: None
 * Function Example		: RBMS_Velocity_Control(&rbms1);
 */
void RBMS_Velocity_Control(RBMS_t *rbms, RBMS_Num_t num) {
 800608a:	b580      	push	{r7, lr}
 800608c:	b082      	sub	sp, #8
 800608e:	af00      	add	r7, sp, #0
 8006090:	6078      	str	r0, [r7, #4]
 8006092:	460b      	mov	r3, r1
 8006094:	70fb      	strb	r3, [r7, #3]
	if (rbms->motor[num].config.Controller != 0) {
 8006096:	78fb      	ldrb	r3, [r7, #3]
 8006098:	687a      	ldr	r2, [r7, #4]
 800609a:	f44f 719c 	mov.w	r1, #312	@ 0x138
 800609e:	fb01 f303 	mul.w	r3, r1, r3
 80060a2:	4413      	add	r3, r2
 80060a4:	332c      	adds	r3, #44	@ 0x2c
 80060a6:	781b      	ldrb	r3, [r3, #0]
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	f000 80e9 	beq.w	8006280 <RBMS_Velocity_Control+0x1f6>
		chlim(rbms->motor[num].t_rpm, rbms->motor[num].config.vel_limit);
 80060ae:	78fb      	ldrb	r3, [r7, #3]
 80060b0:	687a      	ldr	r2, [r7, #4]
 80060b2:	f44f 719c 	mov.w	r1, #312	@ 0x138
 80060b6:	fb01 f303 	mul.w	r3, r1, r3
 80060ba:	4413      	add	r3, r2
 80060bc:	33a8      	adds	r3, #168	@ 0xa8
 80060be:	ed93 7a00 	vldr	s14, [r3]
 80060c2:	78fb      	ldrb	r3, [r7, #3]
 80060c4:	687a      	ldr	r2, [r7, #4]
 80060c6:	f44f 719c 	mov.w	r1, #312	@ 0x138
 80060ca:	fb01 f303 	mul.w	r3, r1, r3
 80060ce:	4413      	add	r3, r2
 80060d0:	333c      	adds	r3, #60	@ 0x3c
 80060d2:	edd3 7a00 	vldr	s15, [r3]
 80060d6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80060da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80060de:	db12      	blt.n	8006106 <RBMS_Velocity_Control+0x7c>
 80060e0:	78fa      	ldrb	r2, [r7, #3]
 80060e2:	78fb      	ldrb	r3, [r7, #3]
 80060e4:	6879      	ldr	r1, [r7, #4]
 80060e6:	f44f 709c 	mov.w	r0, #312	@ 0x138
 80060ea:	fb00 f202 	mul.w	r2, r0, r2
 80060ee:	440a      	add	r2, r1
 80060f0:	323c      	adds	r2, #60	@ 0x3c
 80060f2:	6812      	ldr	r2, [r2, #0]
 80060f4:	6879      	ldr	r1, [r7, #4]
 80060f6:	f44f 709c 	mov.w	r0, #312	@ 0x138
 80060fa:	fb00 f303 	mul.w	r3, r0, r3
 80060fe:	440b      	add	r3, r1
 8006100:	33a8      	adds	r3, #168	@ 0xa8
 8006102:	601a      	str	r2, [r3, #0]
 8006104:	e030      	b.n	8006168 <RBMS_Velocity_Control+0xde>
 8006106:	78fb      	ldrb	r3, [r7, #3]
 8006108:	687a      	ldr	r2, [r7, #4]
 800610a:	f44f 719c 	mov.w	r1, #312	@ 0x138
 800610e:	fb01 f303 	mul.w	r3, r1, r3
 8006112:	4413      	add	r3, r2
 8006114:	33a8      	adds	r3, #168	@ 0xa8
 8006116:	ed93 7a00 	vldr	s14, [r3]
 800611a:	78fb      	ldrb	r3, [r7, #3]
 800611c:	687a      	ldr	r2, [r7, #4]
 800611e:	f44f 719c 	mov.w	r1, #312	@ 0x138
 8006122:	fb01 f303 	mul.w	r3, r1, r3
 8006126:	4413      	add	r3, r2
 8006128:	333c      	adds	r3, #60	@ 0x3c
 800612a:	edd3 7a00 	vldr	s15, [r3]
 800612e:	eef1 7a67 	vneg.f32	s15, s15
 8006132:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006136:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800613a:	d815      	bhi.n	8006168 <RBMS_Velocity_Control+0xde>
 800613c:	78fb      	ldrb	r3, [r7, #3]
 800613e:	687a      	ldr	r2, [r7, #4]
 8006140:	f44f 719c 	mov.w	r1, #312	@ 0x138
 8006144:	fb01 f303 	mul.w	r3, r1, r3
 8006148:	4413      	add	r3, r2
 800614a:	333c      	adds	r3, #60	@ 0x3c
 800614c:	edd3 7a00 	vldr	s15, [r3]
 8006150:	78fb      	ldrb	r3, [r7, #3]
 8006152:	eef1 7a67 	vneg.f32	s15, s15
 8006156:	687a      	ldr	r2, [r7, #4]
 8006158:	f44f 719c 	mov.w	r1, #312	@ 0x138
 800615c:	fb01 f303 	mul.w	r3, r1, r3
 8006160:	4413      	add	r3, r2
 8006162:	33a8      	adds	r3, #168	@ 0xa8
 8006164:	edc3 7a00 	vstr	s15, [r3]
		rbms->motor[num].vel_error = rbms->motor[num].t_rpm - rbms->motor[num].rpm;
 8006168:	78fb      	ldrb	r3, [r7, #3]
 800616a:	687a      	ldr	r2, [r7, #4]
 800616c:	f44f 719c 	mov.w	r1, #312	@ 0x138
 8006170:	fb01 f303 	mul.w	r3, r1, r3
 8006174:	4413      	add	r3, r2
 8006176:	33a8      	adds	r3, #168	@ 0xa8
 8006178:	ed93 7a00 	vldr	s14, [r3]
 800617c:	78fb      	ldrb	r3, [r7, #3]
 800617e:	687a      	ldr	r2, [r7, #4]
 8006180:	f44f 719c 	mov.w	r1, #312	@ 0x138
 8006184:	fb01 f303 	mul.w	r3, r1, r3
 8006188:	4413      	add	r3, r2
 800618a:	3394      	adds	r3, #148	@ 0x94
 800618c:	edd3 7a00 	vldr	s15, [r3]
 8006190:	78fb      	ldrb	r3, [r7, #3]
 8006192:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006196:	687a      	ldr	r2, [r7, #4]
 8006198:	f44f 719c 	mov.w	r1, #312	@ 0x138
 800619c:	fb01 f303 	mul.w	r3, r1, r3
 80061a0:	4413      	add	r3, r2
 80061a2:	f503 73ac 	add.w	r3, r3, #344	@ 0x158
 80061a6:	edc3 7a00 	vstr	s15, [r3]
		PID(&rbms->motor[num].V_PID);
 80061aa:	78fb      	ldrb	r3, [r7, #3]
 80061ac:	f44f 729c 	mov.w	r2, #312	@ 0x138
 80061b0:	fb02 f303 	mul.w	r3, r2, r3
 80061b4:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 80061b8:	687a      	ldr	r2, [r7, #4]
 80061ba:	4413      	add	r3, r2
 80061bc:	3304      	adds	r3, #4
 80061be:	4618      	mov	r0, r3
 80061c0:	f7fe ff84 	bl	80050cc <PID>
		chlim(rbms->motor[num].t_current, rbms->motor[num].config.cur_limit);
 80061c4:	78fb      	ldrb	r3, [r7, #3]
 80061c6:	687a      	ldr	r2, [r7, #4]
 80061c8:	f44f 719c 	mov.w	r1, #312	@ 0x138
 80061cc:	fb01 f303 	mul.w	r3, r1, r3
 80061d0:	4413      	add	r3, r2
 80061d2:	33ac      	adds	r3, #172	@ 0xac
 80061d4:	ed93 7a00 	vldr	s14, [r3]
 80061d8:	78fb      	ldrb	r3, [r7, #3]
 80061da:	687a      	ldr	r2, [r7, #4]
 80061dc:	f44f 719c 	mov.w	r1, #312	@ 0x138
 80061e0:	fb01 f303 	mul.w	r3, r1, r3
 80061e4:	4413      	add	r3, r2
 80061e6:	3338      	adds	r3, #56	@ 0x38
 80061e8:	edd3 7a00 	vldr	s15, [r3]
 80061ec:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80061f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80061f4:	db12      	blt.n	800621c <RBMS_Velocity_Control+0x192>
 80061f6:	78fa      	ldrb	r2, [r7, #3]
 80061f8:	78fb      	ldrb	r3, [r7, #3]
 80061fa:	6879      	ldr	r1, [r7, #4]
 80061fc:	f44f 709c 	mov.w	r0, #312	@ 0x138
 8006200:	fb00 f202 	mul.w	r2, r0, r2
 8006204:	440a      	add	r2, r1
 8006206:	3238      	adds	r2, #56	@ 0x38
 8006208:	6812      	ldr	r2, [r2, #0]
 800620a:	6879      	ldr	r1, [r7, #4]
 800620c:	f44f 709c 	mov.w	r0, #312	@ 0x138
 8006210:	fb00 f303 	mul.w	r3, r0, r3
 8006214:	440b      	add	r3, r1
 8006216:	33ac      	adds	r3, #172	@ 0xac
 8006218:	601a      	str	r2, [r3, #0]
	}
}
 800621a:	e031      	b.n	8006280 <RBMS_Velocity_Control+0x1f6>
		chlim(rbms->motor[num].t_current, rbms->motor[num].config.cur_limit);
 800621c:	78fb      	ldrb	r3, [r7, #3]
 800621e:	687a      	ldr	r2, [r7, #4]
 8006220:	f44f 719c 	mov.w	r1, #312	@ 0x138
 8006224:	fb01 f303 	mul.w	r3, r1, r3
 8006228:	4413      	add	r3, r2
 800622a:	33ac      	adds	r3, #172	@ 0xac
 800622c:	ed93 7a00 	vldr	s14, [r3]
 8006230:	78fb      	ldrb	r3, [r7, #3]
 8006232:	687a      	ldr	r2, [r7, #4]
 8006234:	f44f 719c 	mov.w	r1, #312	@ 0x138
 8006238:	fb01 f303 	mul.w	r3, r1, r3
 800623c:	4413      	add	r3, r2
 800623e:	3338      	adds	r3, #56	@ 0x38
 8006240:	edd3 7a00 	vldr	s15, [r3]
 8006244:	eef1 7a67 	vneg.f32	s15, s15
 8006248:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800624c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006250:	d900      	bls.n	8006254 <RBMS_Velocity_Control+0x1ca>
}
 8006252:	e015      	b.n	8006280 <RBMS_Velocity_Control+0x1f6>
		chlim(rbms->motor[num].t_current, rbms->motor[num].config.cur_limit);
 8006254:	78fb      	ldrb	r3, [r7, #3]
 8006256:	687a      	ldr	r2, [r7, #4]
 8006258:	f44f 719c 	mov.w	r1, #312	@ 0x138
 800625c:	fb01 f303 	mul.w	r3, r1, r3
 8006260:	4413      	add	r3, r2
 8006262:	3338      	adds	r3, #56	@ 0x38
 8006264:	edd3 7a00 	vldr	s15, [r3]
 8006268:	78fb      	ldrb	r3, [r7, #3]
 800626a:	eef1 7a67 	vneg.f32	s15, s15
 800626e:	687a      	ldr	r2, [r7, #4]
 8006270:	f44f 719c 	mov.w	r1, #312	@ 0x138
 8006274:	fb01 f303 	mul.w	r3, r1, r3
 8006278:	4413      	add	r3, r2
 800627a:	33ac      	adds	r3, #172	@ 0xac
 800627c:	edc3 7a00 	vstr	s15, [r3]
}
 8006280:	bf00      	nop
 8006282:	3708      	adds	r7, #8
 8006284:	46bd      	mov	sp, r7
 8006286:	bd80      	pop	{r7, pc}

08006288 <RBMS_Position_Control>:
 * Function Arguments	: *rbms		,	pointer to structure RBMS_t
 * 						  num			,	motor number (0 to 3)
 * Function Return		: None
 * Function Example		: RBMS_Position_Control(&rbms1);
 */
void RBMS_Position_Control(RBMS_t *rbms, RBMS_Num_t num) {
 8006288:	b580      	push	{r7, lr}
 800628a:	b082      	sub	sp, #8
 800628c:	af00      	add	r7, sp, #0
 800628e:	6078      	str	r0, [r7, #4]
 8006290:	460b      	mov	r3, r1
 8006292:	70fb      	strb	r3, [r7, #3]
	if (rbms->motor[num].config.Controller != 0) {
 8006294:	78fb      	ldrb	r3, [r7, #3]
 8006296:	687a      	ldr	r2, [r7, #4]
 8006298:	f44f 719c 	mov.w	r1, #312	@ 0x138
 800629c:	fb01 f303 	mul.w	r3, r1, r3
 80062a0:	4413      	add	r3, r2
 80062a2:	332c      	adds	r3, #44	@ 0x2c
 80062a4:	781b      	ldrb	r3, [r3, #0]
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	f000 80aa 	beq.w	8006400 <RBMS_Position_Control+0x178>
		chlim(rbms->motor[num].t_pos, rbms->motor[num].config.pos_limit);
 80062ac:	78fb      	ldrb	r3, [r7, #3]
 80062ae:	687a      	ldr	r2, [r7, #4]
 80062b0:	f44f 719c 	mov.w	r1, #312	@ 0x138
 80062b4:	fb01 f303 	mul.w	r3, r1, r3
 80062b8:	4413      	add	r3, r2
 80062ba:	339c      	adds	r3, #156	@ 0x9c
 80062bc:	ed93 7a00 	vldr	s14, [r3]
 80062c0:	78fb      	ldrb	r3, [r7, #3]
 80062c2:	687a      	ldr	r2, [r7, #4]
 80062c4:	f44f 719c 	mov.w	r1, #312	@ 0x138
 80062c8:	fb01 f303 	mul.w	r3, r1, r3
 80062cc:	4413      	add	r3, r2
 80062ce:	3340      	adds	r3, #64	@ 0x40
 80062d0:	edd3 7a00 	vldr	s15, [r3]
 80062d4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80062d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80062dc:	db12      	blt.n	8006304 <RBMS_Position_Control+0x7c>
 80062de:	78fa      	ldrb	r2, [r7, #3]
 80062e0:	78fb      	ldrb	r3, [r7, #3]
 80062e2:	6879      	ldr	r1, [r7, #4]
 80062e4:	f44f 709c 	mov.w	r0, #312	@ 0x138
 80062e8:	fb00 f202 	mul.w	r2, r0, r2
 80062ec:	440a      	add	r2, r1
 80062ee:	3240      	adds	r2, #64	@ 0x40
 80062f0:	6812      	ldr	r2, [r2, #0]
 80062f2:	6879      	ldr	r1, [r7, #4]
 80062f4:	f44f 709c 	mov.w	r0, #312	@ 0x138
 80062f8:	fb00 f303 	mul.w	r3, r0, r3
 80062fc:	440b      	add	r3, r1
 80062fe:	339c      	adds	r3, #156	@ 0x9c
 8006300:	601a      	str	r2, [r3, #0]
 8006302:	e030      	b.n	8006366 <RBMS_Position_Control+0xde>
 8006304:	78fb      	ldrb	r3, [r7, #3]
 8006306:	687a      	ldr	r2, [r7, #4]
 8006308:	f44f 719c 	mov.w	r1, #312	@ 0x138
 800630c:	fb01 f303 	mul.w	r3, r1, r3
 8006310:	4413      	add	r3, r2
 8006312:	339c      	adds	r3, #156	@ 0x9c
 8006314:	ed93 7a00 	vldr	s14, [r3]
 8006318:	78fb      	ldrb	r3, [r7, #3]
 800631a:	687a      	ldr	r2, [r7, #4]
 800631c:	f44f 719c 	mov.w	r1, #312	@ 0x138
 8006320:	fb01 f303 	mul.w	r3, r1, r3
 8006324:	4413      	add	r3, r2
 8006326:	3340      	adds	r3, #64	@ 0x40
 8006328:	edd3 7a00 	vldr	s15, [r3]
 800632c:	eef1 7a67 	vneg.f32	s15, s15
 8006330:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006334:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006338:	d815      	bhi.n	8006366 <RBMS_Position_Control+0xde>
 800633a:	78fb      	ldrb	r3, [r7, #3]
 800633c:	687a      	ldr	r2, [r7, #4]
 800633e:	f44f 719c 	mov.w	r1, #312	@ 0x138
 8006342:	fb01 f303 	mul.w	r3, r1, r3
 8006346:	4413      	add	r3, r2
 8006348:	3340      	adds	r3, #64	@ 0x40
 800634a:	edd3 7a00 	vldr	s15, [r3]
 800634e:	78fb      	ldrb	r3, [r7, #3]
 8006350:	eef1 7a67 	vneg.f32	s15, s15
 8006354:	687a      	ldr	r2, [r7, #4]
 8006356:	f44f 719c 	mov.w	r1, #312	@ 0x138
 800635a:	fb01 f303 	mul.w	r3, r1, r3
 800635e:	4413      	add	r3, r2
 8006360:	339c      	adds	r3, #156	@ 0x9c
 8006362:	edc3 7a00 	vstr	s15, [r3]
		rbms->motor[num].t_shaft_pos = rbms->motor[num].t_pos * rbms->motor[num].config.gear_ratio;
 8006366:	78fb      	ldrb	r3, [r7, #3]
 8006368:	687a      	ldr	r2, [r7, #4]
 800636a:	f44f 719c 	mov.w	r1, #312	@ 0x138
 800636e:	fb01 f303 	mul.w	r3, r1, r3
 8006372:	4413      	add	r3, r2
 8006374:	339c      	adds	r3, #156	@ 0x9c
 8006376:	ed93 7a00 	vldr	s14, [r3]
 800637a:	78fb      	ldrb	r3, [r7, #3]
 800637c:	687a      	ldr	r2, [r7, #4]
 800637e:	f44f 719c 	mov.w	r1, #312	@ 0x138
 8006382:	fb01 f303 	mul.w	r3, r1, r3
 8006386:	4413      	add	r3, r2
 8006388:	3330      	adds	r3, #48	@ 0x30
 800638a:	edd3 7a00 	vldr	s15, [r3]
 800638e:	78fb      	ldrb	r3, [r7, #3]
 8006390:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006394:	687a      	ldr	r2, [r7, #4]
 8006396:	f44f 719c 	mov.w	r1, #312	@ 0x138
 800639a:	fb01 f303 	mul.w	r3, r1, r3
 800639e:	4413      	add	r3, r2
 80063a0:	33a4      	adds	r3, #164	@ 0xa4
 80063a2:	edc3 7a00 	vstr	s15, [r3]
		rbms->motor[num].pos_error = rbms->motor[num].t_shaft_pos - rbms->motor[num].shaft_pos;
 80063a6:	78fb      	ldrb	r3, [r7, #3]
 80063a8:	687a      	ldr	r2, [r7, #4]
 80063aa:	f44f 719c 	mov.w	r1, #312	@ 0x138
 80063ae:	fb01 f303 	mul.w	r3, r1, r3
 80063b2:	4413      	add	r3, r2
 80063b4:	33a4      	adds	r3, #164	@ 0xa4
 80063b6:	ed93 7a00 	vldr	s14, [r3]
 80063ba:	78fb      	ldrb	r3, [r7, #3]
 80063bc:	687a      	ldr	r2, [r7, #4]
 80063be:	f44f 719c 	mov.w	r1, #312	@ 0x138
 80063c2:	fb01 f303 	mul.w	r3, r1, r3
 80063c6:	4413      	add	r3, r2
 80063c8:	3390      	adds	r3, #144	@ 0x90
 80063ca:	edd3 7a00 	vldr	s15, [r3]
 80063ce:	78fb      	ldrb	r3, [r7, #3]
 80063d0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80063d4:	687a      	ldr	r2, [r7, #4]
 80063d6:	f44f 719c 	mov.w	r1, #312	@ 0x138
 80063da:	fb01 f303 	mul.w	r3, r1, r3
 80063de:	4413      	add	r3, r2
 80063e0:	f503 73ae 	add.w	r3, r3, #348	@ 0x15c
 80063e4:	edc3 7a00 	vstr	s15, [r3]
		PID(&rbms->motor[num].P_PID);
 80063e8:	78fb      	ldrb	r3, [r7, #3]
 80063ea:	f44f 729c 	mov.w	r2, #312	@ 0x138
 80063ee:	fb02 f303 	mul.w	r3, r2, r3
 80063f2:	33a8      	adds	r3, #168	@ 0xa8
 80063f4:	687a      	ldr	r2, [r7, #4]
 80063f6:	4413      	add	r3, r2
 80063f8:	3308      	adds	r3, #8
 80063fa:	4618      	mov	r0, r3
 80063fc:	f7fe fe66 	bl	80050cc <PID>
	}
}
 8006400:	bf00      	nop
 8006402:	3708      	adds	r7, #8
 8006404:	46bd      	mov	sp, r7
 8006406:	bd80      	pop	{r7, pc}

08006408 <RBMS_5ms>:
 * Function Remarks		: Use this function in FreeRTOS task with 5ms Semaphore.
 * Function Arguments	: *rbms		,	pointer to structure RBMS_t
 * Function Return		: None
 * Function Example		: RBMS_5ms(&rbms1);
 */
void RBMS_5ms(RBMS_t *rbms) {
 8006408:	b580      	push	{r7, lr}
 800640a:	b084      	sub	sp, #16
 800640c:	af00      	add	r7, sp, #0
 800640e:	6078      	str	r0, [r7, #4]
	for (int i = 0; i < 4; i++) {
 8006410:	2300      	movs	r3, #0
 8006412:	60fb      	str	r3, [r7, #12]
 8006414:	e026      	b.n	8006464 <RBMS_5ms+0x5c>
		switch (rbms->motor[i].control_mode) {
 8006416:	687a      	ldr	r2, [r7, #4]
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	f44f 719c 	mov.w	r1, #312	@ 0x138
 800641e:	fb01 f303 	mul.w	r3, r1, r3
 8006422:	4413      	add	r3, r2
 8006424:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 8006428:	781b      	ldrb	r3, [r3, #0]
 800642a:	2b03      	cmp	r3, #3
 800642c:	d817      	bhi.n	800645e <RBMS_5ms+0x56>
 800642e:	a201      	add	r2, pc, #4	@ (adr r2, 8006434 <RBMS_5ms+0x2c>)
 8006430:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006434:	0800645f 	.word	0x0800645f
 8006438:	0800645f 	.word	0x0800645f
 800643c:	08006451 	.word	0x08006451
 8006440:	08006445 	.word	0x08006445
		case POSITION:
			RBMS_Position_Control(rbms, i);
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	b2db      	uxtb	r3, r3
 8006448:	4619      	mov	r1, r3
 800644a:	6878      	ldr	r0, [r7, #4]
 800644c:	f7ff ff1c 	bl	8006288 <RBMS_Position_Control>
		case VELOCITY:
			RBMS_Velocity_Control(rbms, i);
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	b2db      	uxtb	r3, r3
 8006454:	4619      	mov	r1, r3
 8006456:	6878      	ldr	r0, [r7, #4]
 8006458:	f7ff fe17 	bl	800608a <RBMS_Velocity_Control>
			break;
 800645c:	bf00      	nop
	for (int i = 0; i < 4; i++) {
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	3301      	adds	r3, #1
 8006462:	60fb      	str	r3, [r7, #12]
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	2b03      	cmp	r3, #3
 8006468:	ddd5      	ble.n	8006416 <RBMS_5ms+0xe>
		case IDLE:
			break;
			rbms->motor[i].t_current = 0;
		}
	}
	RBMS_Send(rbms);
 800646a:	6878      	ldr	r0, [r7, #4]
 800646c:	f000 f804 	bl	8006478 <RBMS_Send>
}
 8006470:	bf00      	nop
 8006472:	3710      	adds	r7, #16
 8006474:	46bd      	mov	sp, r7
 8006476:	bd80      	pop	{r7, pc}

08006478 <RBMS_Send>:
 * Function Remarks		: Core function.
 * Function Arguments	: *rbms		,	pointer to structure RBMS_t
 * Function Return		: None
 * Function Example		: RBMS_Send(&rbms1);
 */
void RBMS_Send(RBMS_t *rbms) {
 8006478:	b580      	push	{r7, lr}
 800647a:	b088      	sub	sp, #32
 800647c:	af00      	add	r7, sp, #0
 800647e:	6078      	str	r0, [r7, #4]
	uint8_t data[8];
	int16_t current[4];

	for (int i = 0; i < 4; i++) {
 8006480:	2300      	movs	r3, #0
 8006482:	61fb      	str	r3, [r7, #28]
 8006484:	e08b      	b.n	800659e <RBMS_Send+0x126>
		current[i] = (int16_t) (rbms->motor[i].t_current * rbms->motor[i].input_gradient);
 8006486:	687a      	ldr	r2, [r7, #4]
 8006488:	69fb      	ldr	r3, [r7, #28]
 800648a:	f44f 719c 	mov.w	r1, #312	@ 0x138
 800648e:	fb01 f303 	mul.w	r3, r1, r3
 8006492:	4413      	add	r3, r2
 8006494:	33ac      	adds	r3, #172	@ 0xac
 8006496:	ed93 7a00 	vldr	s14, [r3]
 800649a:	687a      	ldr	r2, [r7, #4]
 800649c:	69fb      	ldr	r3, [r7, #28]
 800649e:	f44f 719c 	mov.w	r1, #312	@ 0x138
 80064a2:	fb01 f303 	mul.w	r3, r1, r3
 80064a6:	4413      	add	r3, r2
 80064a8:	335c      	adds	r3, #92	@ 0x5c
 80064aa:	edd3 7a00 	vldr	s15, [r3]
 80064ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80064b2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80064b6:	ee17 3a90 	vmov	r3, s15
 80064ba:	b21a      	sxth	r2, r3
 80064bc:	69fb      	ldr	r3, [r7, #28]
 80064be:	005b      	lsls	r3, r3, #1
 80064c0:	3320      	adds	r3, #32
 80064c2:	443b      	add	r3, r7
 80064c4:	f823 2c14 	strh.w	r2, [r3, #-20]
		chlim(current[i], rbms->motor[i].max_input);
 80064c8:	69fb      	ldr	r3, [r7, #28]
 80064ca:	005b      	lsls	r3, r3, #1
 80064cc:	3320      	adds	r3, #32
 80064ce:	443b      	add	r3, r7
 80064d0:	f933 2c14 	ldrsh.w	r2, [r3, #-20]
 80064d4:	6879      	ldr	r1, [r7, #4]
 80064d6:	69fb      	ldr	r3, [r7, #28]
 80064d8:	f44f 709c 	mov.w	r0, #312	@ 0x138
 80064dc:	fb00 f303 	mul.w	r3, r0, r3
 80064e0:	440b      	add	r3, r1
 80064e2:	3360      	adds	r3, #96	@ 0x60
 80064e4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80064e8:	429a      	cmp	r2, r3
 80064ea:	db10      	blt.n	800650e <RBMS_Send+0x96>
 80064ec:	687a      	ldr	r2, [r7, #4]
 80064ee:	69fb      	ldr	r3, [r7, #28]
 80064f0:	f44f 719c 	mov.w	r1, #312	@ 0x138
 80064f4:	fb01 f303 	mul.w	r3, r1, r3
 80064f8:	4413      	add	r3, r2
 80064fa:	3360      	adds	r3, #96	@ 0x60
 80064fc:	f9b3 2000 	ldrsh.w	r2, [r3]
 8006500:	69fb      	ldr	r3, [r7, #28]
 8006502:	005b      	lsls	r3, r3, #1
 8006504:	3320      	adds	r3, #32
 8006506:	443b      	add	r3, r7
 8006508:	f823 2c14 	strh.w	r2, [r3, #-20]
 800650c:	e027      	b.n	800655e <RBMS_Send+0xe6>
 800650e:	69fb      	ldr	r3, [r7, #28]
 8006510:	005b      	lsls	r3, r3, #1
 8006512:	3320      	adds	r3, #32
 8006514:	443b      	add	r3, r7
 8006516:	f933 3c14 	ldrsh.w	r3, [r3, #-20]
 800651a:	4618      	mov	r0, r3
 800651c:	687a      	ldr	r2, [r7, #4]
 800651e:	69fb      	ldr	r3, [r7, #28]
 8006520:	f44f 719c 	mov.w	r1, #312	@ 0x138
 8006524:	fb01 f303 	mul.w	r3, r1, r3
 8006528:	4413      	add	r3, r2
 800652a:	3360      	adds	r3, #96	@ 0x60
 800652c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006530:	425b      	negs	r3, r3
 8006532:	4298      	cmp	r0, r3
 8006534:	dc13      	bgt.n	800655e <RBMS_Send+0xe6>
 8006536:	687a      	ldr	r2, [r7, #4]
 8006538:	69fb      	ldr	r3, [r7, #28]
 800653a:	f44f 719c 	mov.w	r1, #312	@ 0x138
 800653e:	fb01 f303 	mul.w	r3, r1, r3
 8006542:	4413      	add	r3, r2
 8006544:	3360      	adds	r3, #96	@ 0x60
 8006546:	f9b3 3000 	ldrsh.w	r3, [r3]
 800654a:	b29b      	uxth	r3, r3
 800654c:	425b      	negs	r3, r3
 800654e:	b29b      	uxth	r3, r3
 8006550:	b21a      	sxth	r2, r3
 8006552:	69fb      	ldr	r3, [r7, #28]
 8006554:	005b      	lsls	r3, r3, #1
 8006556:	3320      	adds	r3, #32
 8006558:	443b      	add	r3, r7
 800655a:	f823 2c14 	strh.w	r2, [r3, #-20]

		data[i * 2] = current[i] >> 8;
 800655e:	69fb      	ldr	r3, [r7, #28]
 8006560:	005b      	lsls	r3, r3, #1
 8006562:	3320      	adds	r3, #32
 8006564:	443b      	add	r3, r7
 8006566:	f933 3c14 	ldrsh.w	r3, [r3, #-20]
 800656a:	121b      	asrs	r3, r3, #8
 800656c:	b21a      	sxth	r2, r3
 800656e:	69fb      	ldr	r3, [r7, #28]
 8006570:	005b      	lsls	r3, r3, #1
 8006572:	b2d2      	uxtb	r2, r2
 8006574:	3320      	adds	r3, #32
 8006576:	443b      	add	r3, r7
 8006578:	f803 2c0c 	strb.w	r2, [r3, #-12]
		data[i * 2 + 1] = current[i] & 0x00ff;
 800657c:	69fb      	ldr	r3, [r7, #28]
 800657e:	005b      	lsls	r3, r3, #1
 8006580:	3320      	adds	r3, #32
 8006582:	443b      	add	r3, r7
 8006584:	f933 2c14 	ldrsh.w	r2, [r3, #-20]
 8006588:	69fb      	ldr	r3, [r7, #28]
 800658a:	005b      	lsls	r3, r3, #1
 800658c:	3301      	adds	r3, #1
 800658e:	b2d2      	uxtb	r2, r2
 8006590:	3320      	adds	r3, #32
 8006592:	443b      	add	r3, r7
 8006594:	f803 2c0c 	strb.w	r2, [r3, #-12]
	for (int i = 0; i < 4; i++) {
 8006598:	69fb      	ldr	r3, [r7, #28]
 800659a:	3301      	adds	r3, #1
 800659c:	61fb      	str	r3, [r7, #28]
 800659e:	69fb      	ldr	r3, [r7, #28]
 80065a0:	2b03      	cmp	r3, #3
 80065a2:	f77f af70 	ble.w	8006486 <RBMS_Send+0xe>
	}

	CAN_TxMsg(rbms->hcan, rbms->pTxMsg.StdId, data, 8);
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	6858      	ldr	r0, [r3, #4]
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	68d9      	ldr	r1, [r3, #12]
 80065ae:	f107 0214 	add.w	r2, r7, #20
 80065b2:	2308      	movs	r3, #8
 80065b4:	f7fd fac8 	bl	8003b48 <CAN_TxMsg>

}
 80065b8:	bf00      	nop
 80065ba:	3720      	adds	r7, #32
 80065bc:	46bd      	mov	sp, r7
 80065be:	bd80      	pop	{r7, pc}

080065c0 <RBMS_ACST_Calculation>:
 * Function Remarks		: None
 * Function Arguments	: *rbms		,	pointer to structure RBMS_t
 * Function Return		: None
 * Function Example		: RBMS_ACST_Calculation(&rbms1);
 */
void RBMS_ACST_Calculation(RBMS_t *rbms, RBMS_Num_t num) {
 80065c0:	b480      	push	{r7}
 80065c2:	b083      	sub	sp, #12
 80065c4:	af00      	add	r7, sp, #0
 80065c6:	6078      	str	r0, [r7, #4]
 80065c8:	460b      	mov	r3, r1
 80065ca:	70fb      	strb	r3, [r7, #3]
	rbms->motor[num].prev_raw_pos = rbms->motor[num].raw_pos;
 80065cc:	78fa      	ldrb	r2, [r7, #3]
 80065ce:	78fb      	ldrb	r3, [r7, #3]
 80065d0:	6879      	ldr	r1, [r7, #4]
 80065d2:	f44f 709c 	mov.w	r0, #312	@ 0x138
 80065d6:	fb00 f202 	mul.w	r2, r0, r2
 80065da:	440a      	add	r2, r1
 80065dc:	3268      	adds	r2, #104	@ 0x68
 80065de:	8810      	ldrh	r0, [r2, #0]
 80065e0:	687a      	ldr	r2, [r7, #4]
 80065e2:	f44f 719c 	mov.w	r1, #312	@ 0x138
 80065e6:	fb01 f303 	mul.w	r3, r1, r3
 80065ea:	4413      	add	r3, r2
 80065ec:	336a      	adds	r3, #106	@ 0x6a
 80065ee:	4602      	mov	r2, r0
 80065f0:	801a      	strh	r2, [r3, #0]
	rbms->motor[num].raw_pos = (uint16_t) ((rbms->rxdata[0] << 8) + rbms->rxdata[1]);
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80065f8:	021b      	lsls	r3, r3, #8
 80065fa:	b29a      	uxth	r2, r3
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8006602:	4619      	mov	r1, r3
 8006604:	78fb      	ldrb	r3, [r7, #3]
 8006606:	440a      	add	r2, r1
 8006608:	b290      	uxth	r0, r2
 800660a:	687a      	ldr	r2, [r7, #4]
 800660c:	f44f 719c 	mov.w	r1, #312	@ 0x138
 8006610:	fb01 f303 	mul.w	r3, r1, r3
 8006614:	4413      	add	r3, r2
 8006616:	3368      	adds	r3, #104	@ 0x68
 8006618:	4602      	mov	r2, r0
 800661a:	801a      	strh	r2, [r3, #0]
	rbms->motor[num].raw_rpm = (int16_t) ((rbms->rxdata[2] << 8) + rbms->rxdata[3]);
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
 8006622:	021b      	lsls	r3, r3, #8
 8006624:	b29b      	uxth	r3, r3
 8006626:	687a      	ldr	r2, [r7, #4]
 8006628:	f892 2027 	ldrb.w	r2, [r2, #39]	@ 0x27
 800662c:	4413      	add	r3, r2
 800662e:	b29a      	uxth	r2, r3
 8006630:	78fb      	ldrb	r3, [r7, #3]
 8006632:	b210      	sxth	r0, r2
 8006634:	687a      	ldr	r2, [r7, #4]
 8006636:	f44f 719c 	mov.w	r1, #312	@ 0x138
 800663a:	fb01 f303 	mul.w	r3, r1, r3
 800663e:	4413      	add	r3, r2
 8006640:	3380      	adds	r3, #128	@ 0x80
 8006642:	4602      	mov	r2, r0
 8006644:	801a      	strh	r2, [r3, #0]
	rbms->motor[num].raw_current = (int16_t) ((rbms->rxdata[4] << 8) + rbms->rxdata[5]);
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800664c:	021b      	lsls	r3, r3, #8
 800664e:	b29b      	uxth	r3, r3
 8006650:	687a      	ldr	r2, [r7, #4]
 8006652:	f892 2029 	ldrb.w	r2, [r2, #41]	@ 0x29
 8006656:	4413      	add	r3, r2
 8006658:	b29a      	uxth	r2, r3
 800665a:	78fb      	ldrb	r3, [r7, #3]
 800665c:	b210      	sxth	r0, r2
 800665e:	687a      	ldr	r2, [r7, #4]
 8006660:	f44f 719c 	mov.w	r1, #312	@ 0x138
 8006664:	fb01 f303 	mul.w	r3, r1, r3
 8006668:	4413      	add	r3, r2
 800666a:	3382      	adds	r3, #130	@ 0x82
 800666c:	4602      	mov	r2, r0
 800666e:	801a      	strh	r2, [r3, #0]
	rbms->motor[num].temperature = rbms->rxdata[6];
 8006670:	78fb      	ldrb	r3, [r7, #3]
 8006672:	687a      	ldr	r2, [r7, #4]
 8006674:	f892 002a 	ldrb.w	r0, [r2, #42]	@ 0x2a
 8006678:	687a      	ldr	r2, [r7, #4]
 800667a:	f44f 719c 	mov.w	r1, #312	@ 0x138
 800667e:	fb01 f303 	mul.w	r3, r1, r3
 8006682:	4413      	add	r3, r2
 8006684:	3384      	adds	r3, #132	@ 0x84
 8006686:	4602      	mov	r2, r0
 8006688:	701a      	strb	r2, [r3, #0]
	rbms->motor[num].delta_pos = (int16_t) rbms->motor[num].raw_pos - (int16_t) rbms->motor[num].prev_raw_pos;
 800668a:	78fb      	ldrb	r3, [r7, #3]
 800668c:	687a      	ldr	r2, [r7, #4]
 800668e:	f44f 719c 	mov.w	r1, #312	@ 0x138
 8006692:	fb01 f303 	mul.w	r3, r1, r3
 8006696:	4413      	add	r3, r2
 8006698:	3368      	adds	r3, #104	@ 0x68
 800669a:	881a      	ldrh	r2, [r3, #0]
 800669c:	78fb      	ldrb	r3, [r7, #3]
 800669e:	6879      	ldr	r1, [r7, #4]
 80066a0:	f44f 709c 	mov.w	r0, #312	@ 0x138
 80066a4:	fb00 f303 	mul.w	r3, r0, r3
 80066a8:	440b      	add	r3, r1
 80066aa:	336a      	adds	r3, #106	@ 0x6a
 80066ac:	881b      	ldrh	r3, [r3, #0]
 80066ae:	1ad3      	subs	r3, r2, r3
 80066b0:	b29a      	uxth	r2, r3
 80066b2:	78fb      	ldrb	r3, [r7, #3]
 80066b4:	b210      	sxth	r0, r2
 80066b6:	687a      	ldr	r2, [r7, #4]
 80066b8:	f44f 719c 	mov.w	r1, #312	@ 0x138
 80066bc:	fb01 f303 	mul.w	r3, r1, r3
 80066c0:	4413      	add	r3, r2
 80066c2:	336c      	adds	r3, #108	@ 0x6c
 80066c4:	4602      	mov	r2, r0
 80066c6:	801a      	strh	r2, [r3, #0]
	if (rbms->motor[num].reset_pos == 1) {
 80066c8:	78fb      	ldrb	r3, [r7, #3]
 80066ca:	687a      	ldr	r2, [r7, #4]
 80066cc:	f44f 719c 	mov.w	r1, #312	@ 0x138
 80066d0:	fb01 f303 	mul.w	r3, r1, r3
 80066d4:	4413      	add	r3, r2
 80066d6:	3385      	adds	r3, #133	@ 0x85
 80066d8:	781b      	ldrb	r3, [r3, #0]
 80066da:	2b01      	cmp	r3, #1
 80066dc:	d127      	bne.n	800672e <RBMS_ACST_Calculation+0x16e>
		rbms->motor[num].offset_pos = (int16_t) rbms->motor[num].raw_pos;
 80066de:	78fa      	ldrb	r2, [r7, #3]
 80066e0:	78fb      	ldrb	r3, [r7, #3]
 80066e2:	6879      	ldr	r1, [r7, #4]
 80066e4:	f44f 709c 	mov.w	r0, #312	@ 0x138
 80066e8:	fb00 f202 	mul.w	r2, r0, r2
 80066ec:	440a      	add	r2, r1
 80066ee:	3268      	adds	r2, #104	@ 0x68
 80066f0:	8810      	ldrh	r0, [r2, #0]
 80066f2:	687a      	ldr	r2, [r7, #4]
 80066f4:	f44f 719c 	mov.w	r1, #312	@ 0x138
 80066f8:	fb01 f303 	mul.w	r3, r1, r3
 80066fc:	4413      	add	r3, r2
 80066fe:	3374      	adds	r3, #116	@ 0x74
 8006700:	4602      	mov	r2, r0
 8006702:	801a      	strh	r2, [r3, #0]
		rbms->motor[num].cycle_cnt = 0;
 8006704:	78fb      	ldrb	r3, [r7, #3]
 8006706:	687a      	ldr	r2, [r7, #4]
 8006708:	f44f 719c 	mov.w	r1, #312	@ 0x138
 800670c:	fb01 f303 	mul.w	r3, r1, r3
 8006710:	4413      	add	r3, r2
 8006712:	3370      	adds	r3, #112	@ 0x70
 8006714:	2200      	movs	r2, #0
 8006716:	601a      	str	r2, [r3, #0]
		rbms->motor[num].reset_pos = 0;
 8006718:	78fb      	ldrb	r3, [r7, #3]
 800671a:	687a      	ldr	r2, [r7, #4]
 800671c:	f44f 719c 	mov.w	r1, #312	@ 0x138
 8006720:	fb01 f303 	mul.w	r3, r1, r3
 8006724:	4413      	add	r3, r2
 8006726:	3385      	adds	r3, #133	@ 0x85
 8006728:	2200      	movs	r2, #0
 800672a:	701a      	strb	r2, [r3, #0]
 800672c:	e03d      	b.n	80067aa <RBMS_ACST_Calculation+0x1ea>
	} else {
		if (rbms->motor[num].delta_pos < -4000) {
 800672e:	78fb      	ldrb	r3, [r7, #3]
 8006730:	687a      	ldr	r2, [r7, #4]
 8006732:	f44f 719c 	mov.w	r1, #312	@ 0x138
 8006736:	fb01 f303 	mul.w	r3, r1, r3
 800673a:	4413      	add	r3, r2
 800673c:	336c      	adds	r3, #108	@ 0x6c
 800673e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006742:	f513 6f7a 	cmn.w	r3, #4000	@ 0xfa0
 8006746:	da11      	bge.n	800676c <RBMS_ACST_Calculation+0x1ac>
			rbms->motor[num].cycle_cnt++;
 8006748:	78fb      	ldrb	r3, [r7, #3]
 800674a:	6879      	ldr	r1, [r7, #4]
 800674c:	f44f 729c 	mov.w	r2, #312	@ 0x138
 8006750:	fb03 f202 	mul.w	r2, r3, r2
 8006754:	440a      	add	r2, r1
 8006756:	3270      	adds	r2, #112	@ 0x70
 8006758:	6812      	ldr	r2, [r2, #0]
 800675a:	3201      	adds	r2, #1
 800675c:	6879      	ldr	r1, [r7, #4]
 800675e:	f44f 709c 	mov.w	r0, #312	@ 0x138
 8006762:	fb00 f303 	mul.w	r3, r0, r3
 8006766:	440b      	add	r3, r1
 8006768:	3370      	adds	r3, #112	@ 0x70
 800676a:	601a      	str	r2, [r3, #0]
		}
		if (rbms->motor[num].delta_pos > 4000) {
 800676c:	78fb      	ldrb	r3, [r7, #3]
 800676e:	687a      	ldr	r2, [r7, #4]
 8006770:	f44f 719c 	mov.w	r1, #312	@ 0x138
 8006774:	fb01 f303 	mul.w	r3, r1, r3
 8006778:	4413      	add	r3, r2
 800677a:	336c      	adds	r3, #108	@ 0x6c
 800677c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006780:	f5b3 6f7a 	cmp.w	r3, #4000	@ 0xfa0
 8006784:	dd11      	ble.n	80067aa <RBMS_ACST_Calculation+0x1ea>
			rbms->motor[num].cycle_cnt--;
 8006786:	78fb      	ldrb	r3, [r7, #3]
 8006788:	6879      	ldr	r1, [r7, #4]
 800678a:	f44f 729c 	mov.w	r2, #312	@ 0x138
 800678e:	fb03 f202 	mul.w	r2, r3, r2
 8006792:	440a      	add	r2, r1
 8006794:	3270      	adds	r2, #112	@ 0x70
 8006796:	6812      	ldr	r2, [r2, #0]
 8006798:	3a01      	subs	r2, #1
 800679a:	6879      	ldr	r1, [r7, #4]
 800679c:	f44f 709c 	mov.w	r0, #312	@ 0x138
 80067a0:	fb00 f303 	mul.w	r3, r0, r3
 80067a4:	440b      	add	r3, r1
 80067a6:	3370      	adds	r3, #112	@ 0x70
 80067a8:	601a      	str	r2, [r3, #0]
		}
	}

	rbms->motor[num].raw_rotor_pos = rbms->motor[num].cycle_cnt * 8192 + (int16_t) rbms->motor[num].raw_pos - rbms->motor[num].offset_pos;
 80067aa:	78fb      	ldrb	r3, [r7, #3]
 80067ac:	687a      	ldr	r2, [r7, #4]
 80067ae:	f44f 719c 	mov.w	r1, #312	@ 0x138
 80067b2:	fb01 f303 	mul.w	r3, r1, r3
 80067b6:	4413      	add	r3, r2
 80067b8:	3370      	adds	r3, #112	@ 0x70
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	035b      	lsls	r3, r3, #13
 80067be:	78fa      	ldrb	r2, [r7, #3]
 80067c0:	6879      	ldr	r1, [r7, #4]
 80067c2:	f44f 709c 	mov.w	r0, #312	@ 0x138
 80067c6:	fb00 f202 	mul.w	r2, r0, r2
 80067ca:	440a      	add	r2, r1
 80067cc:	3268      	adds	r2, #104	@ 0x68
 80067ce:	8812      	ldrh	r2, [r2, #0]
 80067d0:	b212      	sxth	r2, r2
 80067d2:	441a      	add	r2, r3
 80067d4:	78fb      	ldrb	r3, [r7, #3]
 80067d6:	6879      	ldr	r1, [r7, #4]
 80067d8:	f44f 709c 	mov.w	r0, #312	@ 0x138
 80067dc:	fb00 f303 	mul.w	r3, r0, r3
 80067e0:	440b      	add	r3, r1
 80067e2:	3374      	adds	r3, #116	@ 0x74
 80067e4:	881b      	ldrh	r3, [r3, #0]
 80067e6:	4619      	mov	r1, r3
 80067e8:	78fb      	ldrb	r3, [r7, #3]
 80067ea:	1a52      	subs	r2, r2, r1
 80067ec:	6879      	ldr	r1, [r7, #4]
 80067ee:	f44f 709c 	mov.w	r0, #312	@ 0x138
 80067f2:	fb00 f303 	mul.w	r3, r0, r3
 80067f6:	440b      	add	r3, r1
 80067f8:	337c      	adds	r3, #124	@ 0x7c
 80067fa:	601a      	str	r2, [r3, #0]
	rbms->motor[num].rotor_pos = (float) rbms->motor[num].raw_rotor_pos / 8192.0;
 80067fc:	78fb      	ldrb	r3, [r7, #3]
 80067fe:	687a      	ldr	r2, [r7, #4]
 8006800:	f44f 719c 	mov.w	r1, #312	@ 0x138
 8006804:	fb01 f303 	mul.w	r3, r1, r3
 8006808:	4413      	add	r3, r2
 800680a:	337c      	adds	r3, #124	@ 0x7c
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	ee07 3a90 	vmov	s15, r3
 8006812:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006816:	78fb      	ldrb	r3, [r7, #3]
 8006818:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 8006954 <RBMS_ACST_Calculation+0x394>
 800681c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006820:	687a      	ldr	r2, [r7, #4]
 8006822:	f44f 719c 	mov.w	r1, #312	@ 0x138
 8006826:	fb01 f303 	mul.w	r3, r1, r3
 800682a:	4413      	add	r3, r2
 800682c:	338c      	adds	r3, #140	@ 0x8c
 800682e:	edc3 7a00 	vstr	s15, [r3]
	rbms->motor[num].shaft_pos = rbms->motor[num].rotor_pos / rbms->motor[num].type_gear_ratio;
 8006832:	78fb      	ldrb	r3, [r7, #3]
 8006834:	687a      	ldr	r2, [r7, #4]
 8006836:	f44f 719c 	mov.w	r1, #312	@ 0x138
 800683a:	fb01 f303 	mul.w	r3, r1, r3
 800683e:	4413      	add	r3, r2
 8006840:	338c      	adds	r3, #140	@ 0x8c
 8006842:	edd3 6a00 	vldr	s13, [r3]
 8006846:	78fb      	ldrb	r3, [r7, #3]
 8006848:	687a      	ldr	r2, [r7, #4]
 800684a:	f44f 719c 	mov.w	r1, #312	@ 0x138
 800684e:	fb01 f303 	mul.w	r3, r1, r3
 8006852:	4413      	add	r3, r2
 8006854:	3364      	adds	r3, #100	@ 0x64
 8006856:	ed93 7a00 	vldr	s14, [r3]
 800685a:	78fb      	ldrb	r3, [r7, #3]
 800685c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006860:	687a      	ldr	r2, [r7, #4]
 8006862:	f44f 719c 	mov.w	r1, #312	@ 0x138
 8006866:	fb01 f303 	mul.w	r3, r1, r3
 800686a:	4413      	add	r3, r2
 800686c:	3390      	adds	r3, #144	@ 0x90
 800686e:	edc3 7a00 	vstr	s15, [r3]
	rbms->motor[num].pos = rbms->motor[num].shaft_pos / rbms->motor[num].config.gear_ratio;
 8006872:	78fb      	ldrb	r3, [r7, #3]
 8006874:	687a      	ldr	r2, [r7, #4]
 8006876:	f44f 719c 	mov.w	r1, #312	@ 0x138
 800687a:	fb01 f303 	mul.w	r3, r1, r3
 800687e:	4413      	add	r3, r2
 8006880:	3390      	adds	r3, #144	@ 0x90
 8006882:	edd3 6a00 	vldr	s13, [r3]
 8006886:	78fb      	ldrb	r3, [r7, #3]
 8006888:	687a      	ldr	r2, [r7, #4]
 800688a:	f44f 719c 	mov.w	r1, #312	@ 0x138
 800688e:	fb01 f303 	mul.w	r3, r1, r3
 8006892:	4413      	add	r3, r2
 8006894:	3330      	adds	r3, #48	@ 0x30
 8006896:	ed93 7a00 	vldr	s14, [r3]
 800689a:	78fb      	ldrb	r3, [r7, #3]
 800689c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80068a0:	687a      	ldr	r2, [r7, #4]
 80068a2:	f44f 719c 	mov.w	r1, #312	@ 0x138
 80068a6:	fb01 f303 	mul.w	r3, r1, r3
 80068aa:	4413      	add	r3, r2
 80068ac:	3388      	adds	r3, #136	@ 0x88
 80068ae:	edc3 7a00 	vstr	s15, [r3]
	rbms->motor[num].rpm = (float) rbms->motor[num].raw_rpm / rbms->motor[num].type_gear_ratio;
 80068b2:	78fb      	ldrb	r3, [r7, #3]
 80068b4:	687a      	ldr	r2, [r7, #4]
 80068b6:	f44f 719c 	mov.w	r1, #312	@ 0x138
 80068ba:	fb01 f303 	mul.w	r3, r1, r3
 80068be:	4413      	add	r3, r2
 80068c0:	3380      	adds	r3, #128	@ 0x80
 80068c2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80068c6:	ee07 3a90 	vmov	s15, r3
 80068ca:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80068ce:	78fb      	ldrb	r3, [r7, #3]
 80068d0:	687a      	ldr	r2, [r7, #4]
 80068d2:	f44f 719c 	mov.w	r1, #312	@ 0x138
 80068d6:	fb01 f303 	mul.w	r3, r1, r3
 80068da:	4413      	add	r3, r2
 80068dc:	3364      	adds	r3, #100	@ 0x64
 80068de:	ed93 7a00 	vldr	s14, [r3]
 80068e2:	78fb      	ldrb	r3, [r7, #3]
 80068e4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80068e8:	687a      	ldr	r2, [r7, #4]
 80068ea:	f44f 719c 	mov.w	r1, #312	@ 0x138
 80068ee:	fb01 f303 	mul.w	r3, r1, r3
 80068f2:	4413      	add	r3, r2
 80068f4:	3394      	adds	r3, #148	@ 0x94
 80068f6:	edc3 7a00 	vstr	s15, [r3]
	rbms->motor[num].current = (float) rbms->motor[num].raw_current / (-rbms->motor[num].input_gradient);
 80068fa:	78fb      	ldrb	r3, [r7, #3]
 80068fc:	687a      	ldr	r2, [r7, #4]
 80068fe:	f44f 719c 	mov.w	r1, #312	@ 0x138
 8006902:	fb01 f303 	mul.w	r3, r1, r3
 8006906:	4413      	add	r3, r2
 8006908:	3382      	adds	r3, #130	@ 0x82
 800690a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800690e:	ee07 3a90 	vmov	s15, r3
 8006912:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006916:	eef1 6a67 	vneg.f32	s13, s15
 800691a:	78fb      	ldrb	r3, [r7, #3]
 800691c:	687a      	ldr	r2, [r7, #4]
 800691e:	f44f 719c 	mov.w	r1, #312	@ 0x138
 8006922:	fb01 f303 	mul.w	r3, r1, r3
 8006926:	4413      	add	r3, r2
 8006928:	335c      	adds	r3, #92	@ 0x5c
 800692a:	ed93 7a00 	vldr	s14, [r3]
 800692e:	78fb      	ldrb	r3, [r7, #3]
 8006930:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006934:	687a      	ldr	r2, [r7, #4]
 8006936:	f44f 719c 	mov.w	r1, #312	@ 0x138
 800693a:	fb01 f303 	mul.w	r3, r1, r3
 800693e:	4413      	add	r3, r2
 8006940:	3398      	adds	r3, #152	@ 0x98
 8006942:	edc3 7a00 	vstr	s15, [r3]
}
 8006946:	bf00      	nop
 8006948:	370c      	adds	r7, #12
 800694a:	46bd      	mov	sp, r7
 800694c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006950:	4770      	bx	lr
 8006952:	bf00      	nop
 8006954:	46000000 	.word	0x46000000

08006958 <RBMS_CAN_Handler>:
 * 							rxdata		,		CAN receive data
 * 							*rbms		,		pointer to structure RBMS_t
 * Function Return		: 	None
 * Function Example		: 	RBMS_CAN_Handler(CAN1RxMessage.StdId, aData, &rbms1);
 */
void RBMS_CAN_Handler(CAN_RxHeaderTypeDef *pRxMsg, uint8_t rxdata[8]) {
 8006958:	b580      	push	{r7, lr}
 800695a:	b084      	sub	sp, #16
 800695c:	af00      	add	r7, sp, #0
 800695e:	6078      	str	r0, [r7, #4]
 8006960:	6039      	str	r1, [r7, #0]
	uint8_t index;
	if (pRxMsg->StdId >= 0x201 && pRxMsg->StdId <= 0x208) {
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800696a:	d91b      	bls.n	80069a4 <RBMS_CAN_Handler+0x4c>
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	f5b3 7f02 	cmp.w	r3, #520	@ 0x208
 8006974:	d816      	bhi.n	80069a4 <RBMS_CAN_Handler+0x4c>
		index = pRxMsg->StdId - 0x201;
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	b2db      	uxtb	r3, r3
 800697c:	3b01      	subs	r3, #1
 800697e:	73fb      	strb	r3, [r7, #15]
		if (index < 4) {
 8006980:	7bfb      	ldrb	r3, [r7, #15]
 8006982:	2b03      	cmp	r3, #3
 8006984:	d80e      	bhi.n	80069a4 <RBMS_CAN_Handler+0x4c>
			rbms1.pRxMsg = pRxMsg;
 8006986:	4a09      	ldr	r2, [pc, #36]	@ (80069ac <RBMS_CAN_Handler+0x54>)
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	6093      	str	r3, [r2, #8]
			memcpy(&rbms1.rxdata, rxdata, pRxMsg->DLC);
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	691b      	ldr	r3, [r3, #16]
 8006990:	461a      	mov	r2, r3
 8006992:	6839      	ldr	r1, [r7, #0]
 8006994:	4806      	ldr	r0, [pc, #24]	@ (80069b0 <RBMS_CAN_Handler+0x58>)
 8006996:	f017 f9b6 	bl	801dd06 <memcpy>
			RBMS_ACST_Calculation(&rbms1, index);
 800699a:	7bfb      	ldrb	r3, [r7, #15]
 800699c:	4619      	mov	r1, r3
 800699e:	4803      	ldr	r0, [pc, #12]	@ (80069ac <RBMS_CAN_Handler+0x54>)
 80069a0:	f7ff fe0e 	bl	80065c0 <RBMS_ACST_Calculation>
//			rbms2.pRxMsg = pRxMsg;
//			memcpy(&rbms2.rxdata, rxdata, pRxMsg->DLC);
//			RBMS_ACST_Calculation(&rbms2, index);
		}
	}
}
 80069a4:	bf00      	nop
 80069a6:	3710      	adds	r7, #16
 80069a8:	46bd      	mov	sp, r7
 80069aa:	bd80      	pop	{r7, pc}
 80069ac:	2000a3c4 	.word	0x2000a3c4
 80069b0:	2000a3e8 	.word	0x2000a3e8

080069b4 <SPIxInit>:
 *
 * Function Return		: None
 * Function Example		: IMU_SPI_Init(&hspix, GPIOB , GPIO_Pin_12, SPI_MODE_MASTER);
 *
 */
void SPIxInit(SPI_HandleTypeDef* hspix, GPIO_TypeDef* GPIOx_NSS, uint16_t GPIO_Pin_NSS,uint32_t Mode, int InterruptEnable){
 80069b4:	b580      	push	{r7, lr}
 80069b6:	b088      	sub	sp, #32
 80069b8:	af02      	add	r7, sp, #8
 80069ba:	60f8      	str	r0, [r7, #12]
 80069bc:	60b9      	str	r1, [r7, #8]
 80069be:	603b      	str	r3, [r7, #0]
 80069c0:	4613      	mov	r3, r2
 80069c2:	80fb      	strh	r3, [r7, #6]

	IRQn_Type nvic;
	GPIOPinsInit(GPIOx_NSS, GPIO_Pin_NSS, GPIO_MODE_OUTPUT_PP, GPIO_SPEED_FREQ_HIGH, GPIO_PULLUP);
 80069c4:	88f9      	ldrh	r1, [r7, #6]
 80069c6:	2301      	movs	r3, #1
 80069c8:	9300      	str	r3, [sp, #0]
 80069ca:	2302      	movs	r3, #2
 80069cc:	2201      	movs	r2, #1
 80069ce:	68b8      	ldr	r0, [r7, #8]
 80069d0:	f7fa fd5a 	bl	8001488 <GPIOPinsInit>

	if(hspix == &hspi1){
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	4a2a      	ldr	r2, [pc, #168]	@ (8006a80 <SPIxInit+0xcc>)
 80069d8:	4293      	cmp	r3, r2
 80069da:	d105      	bne.n	80069e8 <SPIxInit+0x34>
		hspix->Instance = SPI1;
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	4a29      	ldr	r2, [pc, #164]	@ (8006a84 <SPIxInit+0xd0>)
 80069e0:	601a      	str	r2, [r3, #0]
		nvic = SPI1_IRQn;
 80069e2:	2323      	movs	r3, #35	@ 0x23
 80069e4:	75fb      	strb	r3, [r7, #23]
 80069e6:	e00e      	b.n	8006a06 <SPIxInit+0x52>
	}else if(hspix == &hspi2){
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	4a27      	ldr	r2, [pc, #156]	@ (8006a88 <SPIxInit+0xd4>)
 80069ec:	4293      	cmp	r3, r2
 80069ee:	d105      	bne.n	80069fc <SPIxInit+0x48>
		hspix->Instance = SPI2;
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	4a26      	ldr	r2, [pc, #152]	@ (8006a8c <SPIxInit+0xd8>)
 80069f4:	601a      	str	r2, [r3, #0]
		nvic = SPI2_IRQn;
 80069f6:	2324      	movs	r3, #36	@ 0x24
 80069f8:	75fb      	strb	r3, [r7, #23]
 80069fa:	e004      	b.n	8006a06 <SPIxInit+0x52>
	}
	else{
		hspix->Instance = SPI3;
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	4a24      	ldr	r2, [pc, #144]	@ (8006a90 <SPIxInit+0xdc>)
 8006a00:	601a      	str	r2, [r3, #0]
		nvic = SPI3_IRQn;
 8006a02:	2333      	movs	r3, #51	@ 0x33
 8006a04:	75fb      	strb	r3, [r7, #23]
	}

	hspix->Init.Mode = Mode;
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	683a      	ldr	r2, [r7, #0]
 8006a0a:	605a      	str	r2, [r3, #4]
	hspix->Init.Direction = SPI_DIRECTION_2LINES;
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	2200      	movs	r2, #0
 8006a10:	609a      	str	r2, [r3, #8]
	hspix->Init.DataSize = SPI_DATASIZE_8BIT;
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	2200      	movs	r2, #0
 8006a16:	60da      	str	r2, [r3, #12]
//	hspix->Init.CLKPolarity = SPI_POLARITY_LOW;
	hspix->Init.CLKPolarity = SPI_POLARITY_HIGH;
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	2202      	movs	r2, #2
 8006a1c:	611a      	str	r2, [r3, #16]
//	hspix->Init.CLKPhase = SPI_PHASE_1EDGE;
	hspix->Init.CLKPhase = SPI_PHASE_2EDGE;
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	2201      	movs	r2, #1
 8006a22:	615a      	str	r2, [r3, #20]
	hspix->Init.NSS = SPI_NSS_SOFT;
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006a2a:	619a      	str	r2, [r3, #24]
	hspix->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	2200      	movs	r2, #0
 8006a30:	61da      	str	r2, [r3, #28]
//	hspix->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
	hspix->Init.FirstBit = SPI_FIRSTBIT_MSB;
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	2200      	movs	r2, #0
 8006a36:	621a      	str	r2, [r3, #32]
	hspix->Init.TIMode = SPI_TIMODE_DISABLE;
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	2200      	movs	r2, #0
 8006a3c:	625a      	str	r2, [r3, #36]	@ 0x24
	hspix->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	2200      	movs	r2, #0
 8006a42:	629a      	str	r2, [r3, #40]	@ 0x28
	hspix->Init.CRCPolynomial = 10;
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	220a      	movs	r2, #10
 8006a48:	62da      	str	r2, [r3, #44]	@ 0x2c

	if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8006a4a:	480d      	ldr	r0, [pc, #52]	@ (8006a80 <SPIxInit+0xcc>)
 8006a4c:	f00b fd8a 	bl	8012564 <HAL_SPI_Init>
 8006a50:	4603      	mov	r3, r0
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d001      	beq.n	8006a5a <SPIxInit+0xa6>
	{
		Error_Handler();
 8006a56:	f005 f8d9 	bl	800bc0c <Error_Handler>
	}

	if(InterruptEnable){
 8006a5a:	6a3b      	ldr	r3, [r7, #32]
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d00b      	beq.n	8006a78 <SPIxInit+0xc4>
		HAL_NVIC_SetPriority(nvic, SPI1_RX_IRQ_PRIO, 0);
 8006a60:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006a64:	2200      	movs	r2, #0
 8006a66:	210e      	movs	r1, #14
 8006a68:	4618      	mov	r0, r3
 8006a6a:	f006 fa23 	bl	800ceb4 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(nvic);
 8006a6e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006a72:	4618      	mov	r0, r3
 8006a74:	f006 fa3a 	bl	800ceec <HAL_NVIC_EnableIRQ>
	}

}
 8006a78:	bf00      	nop
 8006a7a:	3718      	adds	r7, #24
 8006a7c:	46bd      	mov	sp, r7
 8006a7e:	bd80      	pop	{r7, pc}
 8006a80:	20009924 	.word	0x20009924
 8006a84:	40013000 	.word	0x40013000
 8006a88:	20007e18 	.word	0x20007e18
 8006a8c:	40003800 	.word	0x40003800
 8006a90:	40003c00 	.word	0x40003c00

08006a94 <SPI1_IRQHandler>:
 * Function Arguments	: None
 * Function Return		: None
 * Function Example		: None
 */
void SPI1_IRQHandler(void)
{
 8006a94:	b580      	push	{r7, lr}
 8006a96:	af00      	add	r7, sp, #0
    HAL_SPI_IRQHandler(&hspi1);
 8006a98:	4802      	ldr	r0, [pc, #8]	@ (8006aa4 <SPI1_IRQHandler+0x10>)
 8006a9a:	f00b ff1f 	bl	80128dc <HAL_SPI_IRQHandler>
}
 8006a9e:	bf00      	nop
 8006aa0:	bd80      	pop	{r7, pc}
 8006aa2:	bf00      	nop
 8006aa4:	20009924 	.word	0x20009924

08006aa8 <SPI2_IRQHandler>:
 * Function Arguments	: None
 * Function Return		: None
 * Function Example		: None
 */
void SPI2_IRQHandler(void)
{
 8006aa8:	b580      	push	{r7, lr}
 8006aaa:	af00      	add	r7, sp, #0
    HAL_SPI_IRQHandler(&hspi2);
 8006aac:	4802      	ldr	r0, [pc, #8]	@ (8006ab8 <SPI2_IRQHandler+0x10>)
 8006aae:	f00b ff15 	bl	80128dc <HAL_SPI_IRQHandler>
}
 8006ab2:	bf00      	nop
 8006ab4:	bd80      	pop	{r7, pc}
 8006ab6:	bf00      	nop
 8006ab8:	20007e18 	.word	0x20007e18

08006abc <SPI3_IRQHandler>:
 * Function Arguments	: None
 * Function Return		: None
 * Function Example		: None
 */
void SPI3_IRQHandler(void)
{
 8006abc:	b580      	push	{r7, lr}
 8006abe:	af00      	add	r7, sp, #0
    HAL_SPI_IRQHandler(&hspi3);
 8006ac0:	4802      	ldr	r0, [pc, #8]	@ (8006acc <SPI3_IRQHandler+0x10>)
 8006ac2:	f00b ff0b 	bl	80128dc <HAL_SPI_IRQHandler>
}
 8006ac6:	bf00      	nop
 8006ac8:	bd80      	pop	{r7, pc}
 8006aca:	bf00      	nop
 8006acc:	20008d28 	.word	0x20008d28

08006ad0 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8006ad0:	b580      	push	{r7, lr}
 8006ad2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8006ad4:	2200      	movs	r2, #0
 8006ad6:	4912      	ldr	r1, [pc, #72]	@ (8006b20 <MX_USB_DEVICE_Init+0x50>)
 8006ad8:	4812      	ldr	r0, [pc, #72]	@ (8006b24 <MX_USB_DEVICE_Init+0x54>)
 8006ada:	f010 fe67 	bl	80177ac <USBD_Init>
 8006ade:	4603      	mov	r3, r0
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d001      	beq.n	8006ae8 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8006ae4:	f005 f892 	bl	800bc0c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8006ae8:	490f      	ldr	r1, [pc, #60]	@ (8006b28 <MX_USB_DEVICE_Init+0x58>)
 8006aea:	480e      	ldr	r0, [pc, #56]	@ (8006b24 <MX_USB_DEVICE_Init+0x54>)
 8006aec:	f010 fe8e 	bl	801780c <USBD_RegisterClass>
 8006af0:	4603      	mov	r3, r0
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d001      	beq.n	8006afa <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8006af6:	f005 f889 	bl	800bc0c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8006afa:	490c      	ldr	r1, [pc, #48]	@ (8006b2c <MX_USB_DEVICE_Init+0x5c>)
 8006afc:	4809      	ldr	r0, [pc, #36]	@ (8006b24 <MX_USB_DEVICE_Init+0x54>)
 8006afe:	f010 fd7f 	bl	8017600 <USBD_CDC_RegisterInterface>
 8006b02:	4603      	mov	r3, r0
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d001      	beq.n	8006b0c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8006b08:	f005 f880 	bl	800bc0c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8006b0c:	4805      	ldr	r0, [pc, #20]	@ (8006b24 <MX_USB_DEVICE_Init+0x54>)
 8006b0e:	f010 feb3 	bl	8017878 <USBD_Start>
 8006b12:	4603      	mov	r3, r0
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d001      	beq.n	8006b1c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8006b18:	f005 f878 	bl	800bc0c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8006b1c:	bf00      	nop
 8006b1e:	bd80      	pop	{r7, pc}
 8006b20:	20000014 	.word	0x20000014
 8006b24:	2000a8d0 	.word	0x2000a8d0
 8006b28:	2000007c 	.word	0x2000007c
 8006b2c:	20000000 	.word	0x20000000

08006b30 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8006b30:	b580      	push	{r7, lr}
 8006b32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8006b34:	2200      	movs	r2, #0
 8006b36:	4905      	ldr	r1, [pc, #20]	@ (8006b4c <CDC_Init_FS+0x1c>)
 8006b38:	4805      	ldr	r0, [pc, #20]	@ (8006b50 <CDC_Init_FS+0x20>)
 8006b3a:	f010 fd7b 	bl	8017634 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8006b3e:	4905      	ldr	r1, [pc, #20]	@ (8006b54 <CDC_Init_FS+0x24>)
 8006b40:	4803      	ldr	r0, [pc, #12]	@ (8006b50 <CDC_Init_FS+0x20>)
 8006b42:	f010 fd99 	bl	8017678 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8006b46:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8006b48:	4618      	mov	r0, r3
 8006b4a:	bd80      	pop	{r7, pc}
 8006b4c:	2000b3ac 	.word	0x2000b3ac
 8006b50:	2000a8d0 	.word	0x2000a8d0
 8006b54:	2000abac 	.word	0x2000abac

08006b58 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8006b58:	b480      	push	{r7}
 8006b5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8006b5c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8006b5e:	4618      	mov	r0, r3
 8006b60:	46bd      	mov	sp, r7
 8006b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b66:	4770      	bx	lr

08006b68 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8006b68:	b480      	push	{r7}
 8006b6a:	b083      	sub	sp, #12
 8006b6c:	af00      	add	r7, sp, #0
 8006b6e:	4603      	mov	r3, r0
 8006b70:	6039      	str	r1, [r7, #0]
 8006b72:	71fb      	strb	r3, [r7, #7]
 8006b74:	4613      	mov	r3, r2
 8006b76:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8006b78:	79fb      	ldrb	r3, [r7, #7]
 8006b7a:	2b23      	cmp	r3, #35	@ 0x23
 8006b7c:	d84a      	bhi.n	8006c14 <CDC_Control_FS+0xac>
 8006b7e:	a201      	add	r2, pc, #4	@ (adr r2, 8006b84 <CDC_Control_FS+0x1c>)
 8006b80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b84:	08006c15 	.word	0x08006c15
 8006b88:	08006c15 	.word	0x08006c15
 8006b8c:	08006c15 	.word	0x08006c15
 8006b90:	08006c15 	.word	0x08006c15
 8006b94:	08006c15 	.word	0x08006c15
 8006b98:	08006c15 	.word	0x08006c15
 8006b9c:	08006c15 	.word	0x08006c15
 8006ba0:	08006c15 	.word	0x08006c15
 8006ba4:	08006c15 	.word	0x08006c15
 8006ba8:	08006c15 	.word	0x08006c15
 8006bac:	08006c15 	.word	0x08006c15
 8006bb0:	08006c15 	.word	0x08006c15
 8006bb4:	08006c15 	.word	0x08006c15
 8006bb8:	08006c15 	.word	0x08006c15
 8006bbc:	08006c15 	.word	0x08006c15
 8006bc0:	08006c15 	.word	0x08006c15
 8006bc4:	08006c15 	.word	0x08006c15
 8006bc8:	08006c15 	.word	0x08006c15
 8006bcc:	08006c15 	.word	0x08006c15
 8006bd0:	08006c15 	.word	0x08006c15
 8006bd4:	08006c15 	.word	0x08006c15
 8006bd8:	08006c15 	.word	0x08006c15
 8006bdc:	08006c15 	.word	0x08006c15
 8006be0:	08006c15 	.word	0x08006c15
 8006be4:	08006c15 	.word	0x08006c15
 8006be8:	08006c15 	.word	0x08006c15
 8006bec:	08006c15 	.word	0x08006c15
 8006bf0:	08006c15 	.word	0x08006c15
 8006bf4:	08006c15 	.word	0x08006c15
 8006bf8:	08006c15 	.word	0x08006c15
 8006bfc:	08006c15 	.word	0x08006c15
 8006c00:	08006c15 	.word	0x08006c15
 8006c04:	08006c15 	.word	0x08006c15
 8006c08:	08006c15 	.word	0x08006c15
 8006c0c:	08006c15 	.word	0x08006c15
 8006c10:	08006c15 	.word	0x08006c15
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8006c14:	bf00      	nop
  }

  return (USBD_OK);
 8006c16:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8006c18:	4618      	mov	r0, r3
 8006c1a:	370c      	adds	r7, #12
 8006c1c:	46bd      	mov	sp, r7
 8006c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c22:	4770      	bx	lr

08006c24 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8006c24:	b580      	push	{r7, lr}
 8006c26:	b082      	sub	sp, #8
 8006c28:	af00      	add	r7, sp, #0
 8006c2a:	6078      	str	r0, [r7, #4]
 8006c2c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */

  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8006c2e:	6879      	ldr	r1, [r7, #4]
 8006c30:	4808      	ldr	r0, [pc, #32]	@ (8006c54 <CDC_Receive_FS+0x30>)
 8006c32:	f010 fd21 	bl	8017678 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8006c36:	4807      	ldr	r0, [pc, #28]	@ (8006c54 <CDC_Receive_FS+0x30>)
 8006c38:	f010 fd82 	bl	8017740 <USBD_CDC_ReceivePacket>
  xMessageBufferSendFromISR(usbrxBuffer, Buf, 64, pdFALSE);
 8006c3c:	4b06      	ldr	r3, [pc, #24]	@ (8006c58 <CDC_Receive_FS+0x34>)
 8006c3e:	6818      	ldr	r0, [r3, #0]
 8006c40:	2300      	movs	r3, #0
 8006c42:	2240      	movs	r2, #64	@ 0x40
 8006c44:	6879      	ldr	r1, [r7, #4]
 8006c46:	f013 fcbf 	bl	801a5c8 <xStreamBufferSendFromISR>
//  usbHandler(Buf, (uint16_t)*Len);
//  CDC_Transmit_FS(Buf,(uint16_t)*Len);
  return (USBD_OK);
 8006c4a:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8006c4c:	4618      	mov	r0, r3
 8006c4e:	3708      	adds	r7, #8
 8006c50:	46bd      	mov	sp, r7
 8006c52:	bd80      	pop	{r7, pc}
 8006c54:	2000a8d0 	.word	0x2000a8d0
 8006c58:	20009030 	.word	0x20009030

08006c5c <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8006c5c:	b580      	push	{r7, lr}
 8006c5e:	b084      	sub	sp, #16
 8006c60:	af00      	add	r7, sp, #0
 8006c62:	6078      	str	r0, [r7, #4]
 8006c64:	460b      	mov	r3, r1
 8006c66:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8006c68:	2300      	movs	r3, #0
 8006c6a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8006c6c:	4b0d      	ldr	r3, [pc, #52]	@ (8006ca4 <CDC_Transmit_FS+0x48>)
 8006c6e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8006c72:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8006c74:	68bb      	ldr	r3, [r7, #8]
 8006c76:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d001      	beq.n	8006c82 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8006c7e:	2301      	movs	r3, #1
 8006c80:	e00b      	b.n	8006c9a <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8006c82:	887b      	ldrh	r3, [r7, #2]
 8006c84:	461a      	mov	r2, r3
 8006c86:	6879      	ldr	r1, [r7, #4]
 8006c88:	4806      	ldr	r0, [pc, #24]	@ (8006ca4 <CDC_Transmit_FS+0x48>)
 8006c8a:	f010 fcd3 	bl	8017634 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8006c8e:	4805      	ldr	r0, [pc, #20]	@ (8006ca4 <CDC_Transmit_FS+0x48>)
 8006c90:	f010 fd10 	bl	80176b4 <USBD_CDC_TransmitPacket>
 8006c94:	4603      	mov	r3, r0
 8006c96:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8006c98:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c9a:	4618      	mov	r0, r3
 8006c9c:	3710      	adds	r7, #16
 8006c9e:	46bd      	mov	sp, r7
 8006ca0:	bd80      	pop	{r7, pc}
 8006ca2:	bf00      	nop
 8006ca4:	2000a8d0 	.word	0x2000a8d0

08006ca8 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8006ca8:	b480      	push	{r7}
 8006caa:	b087      	sub	sp, #28
 8006cac:	af00      	add	r7, sp, #0
 8006cae:	60f8      	str	r0, [r7, #12]
 8006cb0:	60b9      	str	r1, [r7, #8]
 8006cb2:	4613      	mov	r3, r2
 8006cb4:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8006cb6:	2300      	movs	r3, #0
 8006cb8:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8006cba:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006cbe:	4618      	mov	r0, r3
 8006cc0:	371c      	adds	r7, #28
 8006cc2:	46bd      	mov	sp, r7
 8006cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cc8:	4770      	bx	lr
	...

08006ccc <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8006ccc:	b580      	push	{r7, lr}
 8006cce:	b08a      	sub	sp, #40	@ 0x28
 8006cd0:	af00      	add	r7, sp, #0
 8006cd2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006cd4:	f107 0314 	add.w	r3, r7, #20
 8006cd8:	2200      	movs	r2, #0
 8006cda:	601a      	str	r2, [r3, #0]
 8006cdc:	605a      	str	r2, [r3, #4]
 8006cde:	609a      	str	r2, [r3, #8]
 8006ce0:	60da      	str	r2, [r3, #12]
 8006ce2:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006cec:	d13a      	bne.n	8006d64 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006cee:	2300      	movs	r3, #0
 8006cf0:	613b      	str	r3, [r7, #16]
 8006cf2:	4b1e      	ldr	r3, [pc, #120]	@ (8006d6c <HAL_PCD_MspInit+0xa0>)
 8006cf4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006cf6:	4a1d      	ldr	r2, [pc, #116]	@ (8006d6c <HAL_PCD_MspInit+0xa0>)
 8006cf8:	f043 0301 	orr.w	r3, r3, #1
 8006cfc:	6313      	str	r3, [r2, #48]	@ 0x30
 8006cfe:	4b1b      	ldr	r3, [pc, #108]	@ (8006d6c <HAL_PCD_MspInit+0xa0>)
 8006d00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006d02:	f003 0301 	and.w	r3, r3, #1
 8006d06:	613b      	str	r3, [r7, #16]
 8006d08:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8006d0a:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8006d0e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006d10:	2302      	movs	r3, #2
 8006d12:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006d14:	2300      	movs	r3, #0
 8006d16:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006d18:	2303      	movs	r3, #3
 8006d1a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8006d1c:	230a      	movs	r3, #10
 8006d1e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006d20:	f107 0314 	add.w	r3, r7, #20
 8006d24:	4619      	mov	r1, r3
 8006d26:	4812      	ldr	r0, [pc, #72]	@ (8006d70 <HAL_PCD_MspInit+0xa4>)
 8006d28:	f006 fd84 	bl	800d834 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8006d2c:	4b0f      	ldr	r3, [pc, #60]	@ (8006d6c <HAL_PCD_MspInit+0xa0>)
 8006d2e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006d30:	4a0e      	ldr	r2, [pc, #56]	@ (8006d6c <HAL_PCD_MspInit+0xa0>)
 8006d32:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006d36:	6353      	str	r3, [r2, #52]	@ 0x34
 8006d38:	2300      	movs	r3, #0
 8006d3a:	60fb      	str	r3, [r7, #12]
 8006d3c:	4b0b      	ldr	r3, [pc, #44]	@ (8006d6c <HAL_PCD_MspInit+0xa0>)
 8006d3e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006d40:	4a0a      	ldr	r2, [pc, #40]	@ (8006d6c <HAL_PCD_MspInit+0xa0>)
 8006d42:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8006d46:	6453      	str	r3, [r2, #68]	@ 0x44
 8006d48:	4b08      	ldr	r3, [pc, #32]	@ (8006d6c <HAL_PCD_MspInit+0xa0>)
 8006d4a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006d4c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006d50:	60fb      	str	r3, [r7, #12]
 8006d52:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 8006d54:	2200      	movs	r2, #0
 8006d56:	2105      	movs	r1, #5
 8006d58:	2043      	movs	r0, #67	@ 0x43
 8006d5a:	f006 f8ab 	bl	800ceb4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8006d5e:	2043      	movs	r0, #67	@ 0x43
 8006d60:	f006 f8c4 	bl	800ceec <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8006d64:	bf00      	nop
 8006d66:	3728      	adds	r7, #40	@ 0x28
 8006d68:	46bd      	mov	sp, r7
 8006d6a:	bd80      	pop	{r7, pc}
 8006d6c:	40023800 	.word	0x40023800
 8006d70:	40020000 	.word	0x40020000

08006d74 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006d74:	b580      	push	{r7, lr}
 8006d76:	b082      	sub	sp, #8
 8006d78:	af00      	add	r7, sp, #0
 8006d7a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	f8d3 2508 	ldr.w	r2, [r3, #1288]	@ 0x508
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 8006d88:	4619      	mov	r1, r3
 8006d8a:	4610      	mov	r0, r2
 8006d8c:	f010 fdc1 	bl	8017912 <USBD_LL_SetupStage>
}
 8006d90:	bf00      	nop
 8006d92:	3708      	adds	r7, #8
 8006d94:	46bd      	mov	sp, r7
 8006d96:	bd80      	pop	{r7, pc}

08006d98 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006d98:	b580      	push	{r7, lr}
 8006d9a:	b082      	sub	sp, #8
 8006d9c:	af00      	add	r7, sp, #0
 8006d9e:	6078      	str	r0, [r7, #4]
 8006da0:	460b      	mov	r3, r1
 8006da2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	f8d3 0508 	ldr.w	r0, [r3, #1288]	@ 0x508
 8006daa:	78fa      	ldrb	r2, [r7, #3]
 8006dac:	6879      	ldr	r1, [r7, #4]
 8006dae:	4613      	mov	r3, r2
 8006db0:	00db      	lsls	r3, r3, #3
 8006db2:	4413      	add	r3, r2
 8006db4:	009b      	lsls	r3, r3, #2
 8006db6:	440b      	add	r3, r1
 8006db8:	f503 7323 	add.w	r3, r3, #652	@ 0x28c
 8006dbc:	681a      	ldr	r2, [r3, #0]
 8006dbe:	78fb      	ldrb	r3, [r7, #3]
 8006dc0:	4619      	mov	r1, r3
 8006dc2:	f010 fdfb 	bl	80179bc <USBD_LL_DataOutStage>
}
 8006dc6:	bf00      	nop
 8006dc8:	3708      	adds	r7, #8
 8006dca:	46bd      	mov	sp, r7
 8006dcc:	bd80      	pop	{r7, pc}

08006dce <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006dce:	b580      	push	{r7, lr}
 8006dd0:	b082      	sub	sp, #8
 8006dd2:	af00      	add	r7, sp, #0
 8006dd4:	6078      	str	r0, [r7, #4]
 8006dd6:	460b      	mov	r3, r1
 8006dd8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	f8d3 0508 	ldr.w	r0, [r3, #1288]	@ 0x508
 8006de0:	78fa      	ldrb	r2, [r7, #3]
 8006de2:	6879      	ldr	r1, [r7, #4]
 8006de4:	4613      	mov	r3, r2
 8006de6:	00db      	lsls	r3, r3, #3
 8006de8:	4413      	add	r3, r2
 8006dea:	009b      	lsls	r3, r3, #2
 8006dec:	440b      	add	r3, r1
 8006dee:	334c      	adds	r3, #76	@ 0x4c
 8006df0:	681a      	ldr	r2, [r3, #0]
 8006df2:	78fb      	ldrb	r3, [r7, #3]
 8006df4:	4619      	mov	r1, r3
 8006df6:	f010 fe94 	bl	8017b22 <USBD_LL_DataInStage>
}
 8006dfa:	bf00      	nop
 8006dfc:	3708      	adds	r7, #8
 8006dfe:	46bd      	mov	sp, r7
 8006e00:	bd80      	pop	{r7, pc}

08006e02 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006e02:	b580      	push	{r7, lr}
 8006e04:	b082      	sub	sp, #8
 8006e06:	af00      	add	r7, sp, #0
 8006e08:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 8006e10:	4618      	mov	r0, r3
 8006e12:	f010 ffc8 	bl	8017da6 <USBD_LL_SOF>
}
 8006e16:	bf00      	nop
 8006e18:	3708      	adds	r7, #8
 8006e1a:	46bd      	mov	sp, r7
 8006e1c:	bd80      	pop	{r7, pc}

08006e1e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006e1e:	b580      	push	{r7, lr}
 8006e20:	b084      	sub	sp, #16
 8006e22:	af00      	add	r7, sp, #0
 8006e24:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8006e26:	2301      	movs	r3, #1
 8006e28:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	68db      	ldr	r3, [r3, #12]
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d102      	bne.n	8006e38 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8006e32:	2300      	movs	r3, #0
 8006e34:	73fb      	strb	r3, [r7, #15]
 8006e36:	e008      	b.n	8006e4a <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	68db      	ldr	r3, [r3, #12]
 8006e3c:	2b02      	cmp	r3, #2
 8006e3e:	d102      	bne.n	8006e46 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8006e40:	2301      	movs	r3, #1
 8006e42:	73fb      	strb	r3, [r7, #15]
 8006e44:	e001      	b.n	8006e4a <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8006e46:	f004 fee1 	bl	800bc0c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 8006e50:	7bfa      	ldrb	r2, [r7, #15]
 8006e52:	4611      	mov	r1, r2
 8006e54:	4618      	mov	r0, r3
 8006e56:	f010 ff68 	bl	8017d2a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 8006e60:	4618      	mov	r0, r3
 8006e62:	f010 ff10 	bl	8017c86 <USBD_LL_Reset>
}
 8006e66:	bf00      	nop
 8006e68:	3710      	adds	r7, #16
 8006e6a:	46bd      	mov	sp, r7
 8006e6c:	bd80      	pop	{r7, pc}
	...

08006e70 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006e70:	b580      	push	{r7, lr}
 8006e72:	b082      	sub	sp, #8
 8006e74:	af00      	add	r7, sp, #0
 8006e76:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 8006e7e:	4618      	mov	r0, r3
 8006e80:	f010 ff63 	bl	8017d4a <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	687a      	ldr	r2, [r7, #4]
 8006e90:	6812      	ldr	r2, [r2, #0]
 8006e92:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8006e96:	f043 0301 	orr.w	r3, r3, #1
 8006e9a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	6a1b      	ldr	r3, [r3, #32]
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d005      	beq.n	8006eb0 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8006ea4:	4b04      	ldr	r3, [pc, #16]	@ (8006eb8 <HAL_PCD_SuspendCallback+0x48>)
 8006ea6:	691b      	ldr	r3, [r3, #16]
 8006ea8:	4a03      	ldr	r2, [pc, #12]	@ (8006eb8 <HAL_PCD_SuspendCallback+0x48>)
 8006eaa:	f043 0306 	orr.w	r3, r3, #6
 8006eae:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8006eb0:	bf00      	nop
 8006eb2:	3708      	adds	r7, #8
 8006eb4:	46bd      	mov	sp, r7
 8006eb6:	bd80      	pop	{r7, pc}
 8006eb8:	e000ed00 	.word	0xe000ed00

08006ebc <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006ebc:	b580      	push	{r7, lr}
 8006ebe:	b082      	sub	sp, #8
 8006ec0:	af00      	add	r7, sp, #0
 8006ec2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 8006eca:	4618      	mov	r0, r3
 8006ecc:	f010 ff53 	bl	8017d76 <USBD_LL_Resume>
}
 8006ed0:	bf00      	nop
 8006ed2:	3708      	adds	r7, #8
 8006ed4:	46bd      	mov	sp, r7
 8006ed6:	bd80      	pop	{r7, pc}

08006ed8 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006ed8:	b580      	push	{r7, lr}
 8006eda:	b082      	sub	sp, #8
 8006edc:	af00      	add	r7, sp, #0
 8006ede:	6078      	str	r0, [r7, #4]
 8006ee0:	460b      	mov	r3, r1
 8006ee2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 8006eea:	78fa      	ldrb	r2, [r7, #3]
 8006eec:	4611      	mov	r1, r2
 8006eee:	4618      	mov	r0, r3
 8006ef0:	f010 ffab 	bl	8017e4a <USBD_LL_IsoOUTIncomplete>
}
 8006ef4:	bf00      	nop
 8006ef6:	3708      	adds	r7, #8
 8006ef8:	46bd      	mov	sp, r7
 8006efa:	bd80      	pop	{r7, pc}

08006efc <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006efc:	b580      	push	{r7, lr}
 8006efe:	b082      	sub	sp, #8
 8006f00:	af00      	add	r7, sp, #0
 8006f02:	6078      	str	r0, [r7, #4]
 8006f04:	460b      	mov	r3, r1
 8006f06:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 8006f0e:	78fa      	ldrb	r2, [r7, #3]
 8006f10:	4611      	mov	r1, r2
 8006f12:	4618      	mov	r0, r3
 8006f14:	f010 ff67 	bl	8017de6 <USBD_LL_IsoINIncomplete>
}
 8006f18:	bf00      	nop
 8006f1a:	3708      	adds	r7, #8
 8006f1c:	46bd      	mov	sp, r7
 8006f1e:	bd80      	pop	{r7, pc}

08006f20 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006f20:	b580      	push	{r7, lr}
 8006f22:	b082      	sub	sp, #8
 8006f24:	af00      	add	r7, sp, #0
 8006f26:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 8006f2e:	4618      	mov	r0, r3
 8006f30:	f010 ffbd 	bl	8017eae <USBD_LL_DevConnected>
}
 8006f34:	bf00      	nop
 8006f36:	3708      	adds	r7, #8
 8006f38:	46bd      	mov	sp, r7
 8006f3a:	bd80      	pop	{r7, pc}

08006f3c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006f3c:	b580      	push	{r7, lr}
 8006f3e:	b082      	sub	sp, #8
 8006f40:	af00      	add	r7, sp, #0
 8006f42:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 8006f4a:	4618      	mov	r0, r3
 8006f4c:	f010 ffba 	bl	8017ec4 <USBD_LL_DevDisconnected>
}
 8006f50:	bf00      	nop
 8006f52:	3708      	adds	r7, #8
 8006f54:	46bd      	mov	sp, r7
 8006f56:	bd80      	pop	{r7, pc}

08006f58 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8006f58:	b580      	push	{r7, lr}
 8006f5a:	b082      	sub	sp, #8
 8006f5c:	af00      	add	r7, sp, #0
 8006f5e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	781b      	ldrb	r3, [r3, #0]
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d13c      	bne.n	8006fe2 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8006f68:	4a20      	ldr	r2, [pc, #128]	@ (8006fec <USBD_LL_Init+0x94>)
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	f8c2 3508 	str.w	r3, [r2, #1288]	@ 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	4a1e      	ldr	r2, [pc, #120]	@ (8006fec <USBD_LL_Init+0x94>)
 8006f74:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8006f78:	4b1c      	ldr	r3, [pc, #112]	@ (8006fec <USBD_LL_Init+0x94>)
 8006f7a:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8006f7e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8006f80:	4b1a      	ldr	r3, [pc, #104]	@ (8006fec <USBD_LL_Init+0x94>)
 8006f82:	2204      	movs	r2, #4
 8006f84:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8006f86:	4b19      	ldr	r3, [pc, #100]	@ (8006fec <USBD_LL_Init+0x94>)
 8006f88:	2202      	movs	r2, #2
 8006f8a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8006f8c:	4b17      	ldr	r3, [pc, #92]	@ (8006fec <USBD_LL_Init+0x94>)
 8006f8e:	2200      	movs	r2, #0
 8006f90:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8006f92:	4b16      	ldr	r3, [pc, #88]	@ (8006fec <USBD_LL_Init+0x94>)
 8006f94:	2202      	movs	r2, #2
 8006f96:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8006f98:	4b14      	ldr	r3, [pc, #80]	@ (8006fec <USBD_LL_Init+0x94>)
 8006f9a:	2200      	movs	r2, #0
 8006f9c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8006f9e:	4b13      	ldr	r3, [pc, #76]	@ (8006fec <USBD_LL_Init+0x94>)
 8006fa0:	2200      	movs	r2, #0
 8006fa2:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8006fa4:	4b11      	ldr	r3, [pc, #68]	@ (8006fec <USBD_LL_Init+0x94>)
 8006fa6:	2200      	movs	r2, #0
 8006fa8:	625a      	str	r2, [r3, #36]	@ 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8006faa:	4b10      	ldr	r3, [pc, #64]	@ (8006fec <USBD_LL_Init+0x94>)
 8006fac:	2200      	movs	r2, #0
 8006fae:	62da      	str	r2, [r3, #44]	@ 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8006fb0:	4b0e      	ldr	r3, [pc, #56]	@ (8006fec <USBD_LL_Init+0x94>)
 8006fb2:	2200      	movs	r2, #0
 8006fb4:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8006fb6:	480d      	ldr	r0, [pc, #52]	@ (8006fec <USBD_LL_Init+0x94>)
 8006fb8:	f009 fb80 	bl	80106bc <HAL_PCD_Init>
 8006fbc:	4603      	mov	r3, r0
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d001      	beq.n	8006fc6 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8006fc2:	f004 fe23 	bl	800bc0c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8006fc6:	2180      	movs	r1, #128	@ 0x80
 8006fc8:	4808      	ldr	r0, [pc, #32]	@ (8006fec <USBD_LL_Init+0x94>)
 8006fca:	f00a fdd8 	bl	8011b7e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8006fce:	2240      	movs	r2, #64	@ 0x40
 8006fd0:	2100      	movs	r1, #0
 8006fd2:	4806      	ldr	r0, [pc, #24]	@ (8006fec <USBD_LL_Init+0x94>)
 8006fd4:	f00a fd8c 	bl	8011af0 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8006fd8:	2280      	movs	r2, #128	@ 0x80
 8006fda:	2101      	movs	r1, #1
 8006fdc:	4803      	ldr	r0, [pc, #12]	@ (8006fec <USBD_LL_Init+0x94>)
 8006fde:	f00a fd87 	bl	8011af0 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8006fe2:	2300      	movs	r3, #0
}
 8006fe4:	4618      	mov	r0, r3
 8006fe6:	3708      	adds	r7, #8
 8006fe8:	46bd      	mov	sp, r7
 8006fea:	bd80      	pop	{r7, pc}
 8006fec:	2000844c 	.word	0x2000844c

08006ff0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8006ff0:	b580      	push	{r7, lr}
 8006ff2:	b084      	sub	sp, #16
 8006ff4:	af00      	add	r7, sp, #0
 8006ff6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006ff8:	2300      	movs	r3, #0
 8006ffa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006ffc:	2300      	movs	r3, #0
 8006ffe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8007006:	4618      	mov	r0, r3
 8007008:	f009 fc75 	bl	80108f6 <HAL_PCD_Start>
 800700c:	4603      	mov	r3, r0
 800700e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007010:	7bfb      	ldrb	r3, [r7, #15]
 8007012:	4618      	mov	r0, r3
 8007014:	f000 f942 	bl	800729c <USBD_Get_USB_Status>
 8007018:	4603      	mov	r3, r0
 800701a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800701c:	7bbb      	ldrb	r3, [r7, #14]
}
 800701e:	4618      	mov	r0, r3
 8007020:	3710      	adds	r7, #16
 8007022:	46bd      	mov	sp, r7
 8007024:	bd80      	pop	{r7, pc}

08007026 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8007026:	b580      	push	{r7, lr}
 8007028:	b084      	sub	sp, #16
 800702a:	af00      	add	r7, sp, #0
 800702c:	6078      	str	r0, [r7, #4]
 800702e:	4608      	mov	r0, r1
 8007030:	4611      	mov	r1, r2
 8007032:	461a      	mov	r2, r3
 8007034:	4603      	mov	r3, r0
 8007036:	70fb      	strb	r3, [r7, #3]
 8007038:	460b      	mov	r3, r1
 800703a:	70bb      	strb	r3, [r7, #2]
 800703c:	4613      	mov	r3, r2
 800703e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007040:	2300      	movs	r3, #0
 8007042:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007044:	2300      	movs	r3, #0
 8007046:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800704e:	78bb      	ldrb	r3, [r7, #2]
 8007050:	883a      	ldrh	r2, [r7, #0]
 8007052:	78f9      	ldrb	r1, [r7, #3]
 8007054:	f00a f946 	bl	80112e4 <HAL_PCD_EP_Open>
 8007058:	4603      	mov	r3, r0
 800705a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800705c:	7bfb      	ldrb	r3, [r7, #15]
 800705e:	4618      	mov	r0, r3
 8007060:	f000 f91c 	bl	800729c <USBD_Get_USB_Status>
 8007064:	4603      	mov	r3, r0
 8007066:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007068:	7bbb      	ldrb	r3, [r7, #14]
}
 800706a:	4618      	mov	r0, r3
 800706c:	3710      	adds	r7, #16
 800706e:	46bd      	mov	sp, r7
 8007070:	bd80      	pop	{r7, pc}

08007072 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007072:	b580      	push	{r7, lr}
 8007074:	b084      	sub	sp, #16
 8007076:	af00      	add	r7, sp, #0
 8007078:	6078      	str	r0, [r7, #4]
 800707a:	460b      	mov	r3, r1
 800707c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800707e:	2300      	movs	r3, #0
 8007080:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007082:	2300      	movs	r3, #0
 8007084:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800708c:	78fa      	ldrb	r2, [r7, #3]
 800708e:	4611      	mov	r1, r2
 8007090:	4618      	mov	r0, r3
 8007092:	f00a f98f 	bl	80113b4 <HAL_PCD_EP_Close>
 8007096:	4603      	mov	r3, r0
 8007098:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800709a:	7bfb      	ldrb	r3, [r7, #15]
 800709c:	4618      	mov	r0, r3
 800709e:	f000 f8fd 	bl	800729c <USBD_Get_USB_Status>
 80070a2:	4603      	mov	r3, r0
 80070a4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80070a6:	7bbb      	ldrb	r3, [r7, #14]
}
 80070a8:	4618      	mov	r0, r3
 80070aa:	3710      	adds	r7, #16
 80070ac:	46bd      	mov	sp, r7
 80070ae:	bd80      	pop	{r7, pc}

080070b0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80070b0:	b580      	push	{r7, lr}
 80070b2:	b084      	sub	sp, #16
 80070b4:	af00      	add	r7, sp, #0
 80070b6:	6078      	str	r0, [r7, #4]
 80070b8:	460b      	mov	r3, r1
 80070ba:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80070bc:	2300      	movs	r3, #0
 80070be:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80070c0:	2300      	movs	r3, #0
 80070c2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80070ca:	78fa      	ldrb	r2, [r7, #3]
 80070cc:	4611      	mov	r1, r2
 80070ce:	4618      	mov	r0, r3
 80070d0:	f00a fa67 	bl	80115a2 <HAL_PCD_EP_SetStall>
 80070d4:	4603      	mov	r3, r0
 80070d6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80070d8:	7bfb      	ldrb	r3, [r7, #15]
 80070da:	4618      	mov	r0, r3
 80070dc:	f000 f8de 	bl	800729c <USBD_Get_USB_Status>
 80070e0:	4603      	mov	r3, r0
 80070e2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80070e4:	7bbb      	ldrb	r3, [r7, #14]
}
 80070e6:	4618      	mov	r0, r3
 80070e8:	3710      	adds	r7, #16
 80070ea:	46bd      	mov	sp, r7
 80070ec:	bd80      	pop	{r7, pc}

080070ee <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80070ee:	b580      	push	{r7, lr}
 80070f0:	b084      	sub	sp, #16
 80070f2:	af00      	add	r7, sp, #0
 80070f4:	6078      	str	r0, [r7, #4]
 80070f6:	460b      	mov	r3, r1
 80070f8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80070fa:	2300      	movs	r3, #0
 80070fc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80070fe:	2300      	movs	r3, #0
 8007100:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8007108:	78fa      	ldrb	r2, [r7, #3]
 800710a:	4611      	mov	r1, r2
 800710c:	4618      	mov	r0, r3
 800710e:	f00a faac 	bl	801166a <HAL_PCD_EP_ClrStall>
 8007112:	4603      	mov	r3, r0
 8007114:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007116:	7bfb      	ldrb	r3, [r7, #15]
 8007118:	4618      	mov	r0, r3
 800711a:	f000 f8bf 	bl	800729c <USBD_Get_USB_Status>
 800711e:	4603      	mov	r3, r0
 8007120:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007122:	7bbb      	ldrb	r3, [r7, #14]
}
 8007124:	4618      	mov	r0, r3
 8007126:	3710      	adds	r7, #16
 8007128:	46bd      	mov	sp, r7
 800712a:	bd80      	pop	{r7, pc}

0800712c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800712c:	b480      	push	{r7}
 800712e:	b085      	sub	sp, #20
 8007130:	af00      	add	r7, sp, #0
 8007132:	6078      	str	r0, [r7, #4]
 8007134:	460b      	mov	r3, r1
 8007136:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800713e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8007140:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007144:	2b00      	cmp	r3, #0
 8007146:	da0b      	bge.n	8007160 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8007148:	78fb      	ldrb	r3, [r7, #3]
 800714a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800714e:	68f9      	ldr	r1, [r7, #12]
 8007150:	4613      	mov	r3, r2
 8007152:	00db      	lsls	r3, r3, #3
 8007154:	4413      	add	r3, r2
 8007156:	009b      	lsls	r3, r3, #2
 8007158:	440b      	add	r3, r1
 800715a:	333e      	adds	r3, #62	@ 0x3e
 800715c:	781b      	ldrb	r3, [r3, #0]
 800715e:	e00b      	b.n	8007178 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8007160:	78fb      	ldrb	r3, [r7, #3]
 8007162:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007166:	68f9      	ldr	r1, [r7, #12]
 8007168:	4613      	mov	r3, r2
 800716a:	00db      	lsls	r3, r3, #3
 800716c:	4413      	add	r3, r2
 800716e:	009b      	lsls	r3, r3, #2
 8007170:	440b      	add	r3, r1
 8007172:	f203 237e 	addw	r3, r3, #638	@ 0x27e
 8007176:	781b      	ldrb	r3, [r3, #0]
  }
}
 8007178:	4618      	mov	r0, r3
 800717a:	3714      	adds	r7, #20
 800717c:	46bd      	mov	sp, r7
 800717e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007182:	4770      	bx	lr

08007184 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8007184:	b580      	push	{r7, lr}
 8007186:	b084      	sub	sp, #16
 8007188:	af00      	add	r7, sp, #0
 800718a:	6078      	str	r0, [r7, #4]
 800718c:	460b      	mov	r3, r1
 800718e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007190:	2300      	movs	r3, #0
 8007192:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007194:	2300      	movs	r3, #0
 8007196:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800719e:	78fa      	ldrb	r2, [r7, #3]
 80071a0:	4611      	mov	r1, r2
 80071a2:	4618      	mov	r0, r3
 80071a4:	f00a f879 	bl	801129a <HAL_PCD_SetAddress>
 80071a8:	4603      	mov	r3, r0
 80071aa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80071ac:	7bfb      	ldrb	r3, [r7, #15]
 80071ae:	4618      	mov	r0, r3
 80071b0:	f000 f874 	bl	800729c <USBD_Get_USB_Status>
 80071b4:	4603      	mov	r3, r0
 80071b6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80071b8:	7bbb      	ldrb	r3, [r7, #14]
}
 80071ba:	4618      	mov	r0, r3
 80071bc:	3710      	adds	r7, #16
 80071be:	46bd      	mov	sp, r7
 80071c0:	bd80      	pop	{r7, pc}

080071c2 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80071c2:	b580      	push	{r7, lr}
 80071c4:	b086      	sub	sp, #24
 80071c6:	af00      	add	r7, sp, #0
 80071c8:	60f8      	str	r0, [r7, #12]
 80071ca:	607a      	str	r2, [r7, #4]
 80071cc:	603b      	str	r3, [r7, #0]
 80071ce:	460b      	mov	r3, r1
 80071d0:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80071d2:	2300      	movs	r3, #0
 80071d4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80071d6:	2300      	movs	r3, #0
 80071d8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 80071e0:	7af9      	ldrb	r1, [r7, #11]
 80071e2:	683b      	ldr	r3, [r7, #0]
 80071e4:	687a      	ldr	r2, [r7, #4]
 80071e6:	f00a f992 	bl	801150e <HAL_PCD_EP_Transmit>
 80071ea:	4603      	mov	r3, r0
 80071ec:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80071ee:	7dfb      	ldrb	r3, [r7, #23]
 80071f0:	4618      	mov	r0, r3
 80071f2:	f000 f853 	bl	800729c <USBD_Get_USB_Status>
 80071f6:	4603      	mov	r3, r0
 80071f8:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80071fa:	7dbb      	ldrb	r3, [r7, #22]
}
 80071fc:	4618      	mov	r0, r3
 80071fe:	3718      	adds	r7, #24
 8007200:	46bd      	mov	sp, r7
 8007202:	bd80      	pop	{r7, pc}

08007204 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007204:	b580      	push	{r7, lr}
 8007206:	b086      	sub	sp, #24
 8007208:	af00      	add	r7, sp, #0
 800720a:	60f8      	str	r0, [r7, #12]
 800720c:	607a      	str	r2, [r7, #4]
 800720e:	603b      	str	r3, [r7, #0]
 8007210:	460b      	mov	r3, r1
 8007212:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007214:	2300      	movs	r3, #0
 8007216:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007218:	2300      	movs	r3, #0
 800721a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8007222:	7af9      	ldrb	r1, [r7, #11]
 8007224:	683b      	ldr	r3, [r7, #0]
 8007226:	687a      	ldr	r2, [r7, #4]
 8007228:	f00a f90e 	bl	8011448 <HAL_PCD_EP_Receive>
 800722c:	4603      	mov	r3, r0
 800722e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007230:	7dfb      	ldrb	r3, [r7, #23]
 8007232:	4618      	mov	r0, r3
 8007234:	f000 f832 	bl	800729c <USBD_Get_USB_Status>
 8007238:	4603      	mov	r3, r0
 800723a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800723c:	7dbb      	ldrb	r3, [r7, #22]
}
 800723e:	4618      	mov	r0, r3
 8007240:	3718      	adds	r7, #24
 8007242:	46bd      	mov	sp, r7
 8007244:	bd80      	pop	{r7, pc}

08007246 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007246:	b580      	push	{r7, lr}
 8007248:	b082      	sub	sp, #8
 800724a:	af00      	add	r7, sp, #0
 800724c:	6078      	str	r0, [r7, #4]
 800724e:	460b      	mov	r3, r1
 8007250:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8007258:	78fa      	ldrb	r2, [r7, #3]
 800725a:	4611      	mov	r1, r2
 800725c:	4618      	mov	r0, r3
 800725e:	f00a f93e 	bl	80114de <HAL_PCD_EP_GetRxCount>
 8007262:	4603      	mov	r3, r0
}
 8007264:	4618      	mov	r0, r3
 8007266:	3708      	adds	r7, #8
 8007268:	46bd      	mov	sp, r7
 800726a:	bd80      	pop	{r7, pc}

0800726c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800726c:	b480      	push	{r7}
 800726e:	b083      	sub	sp, #12
 8007270:	af00      	add	r7, sp, #0
 8007272:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8007274:	4b03      	ldr	r3, [pc, #12]	@ (8007284 <USBD_static_malloc+0x18>)
}
 8007276:	4618      	mov	r0, r3
 8007278:	370c      	adds	r7, #12
 800727a:	46bd      	mov	sp, r7
 800727c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007280:	4770      	bx	lr
 8007282:	bf00      	nop
 8007284:	200002ec 	.word	0x200002ec

08007288 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8007288:	b480      	push	{r7}
 800728a:	b083      	sub	sp, #12
 800728c:	af00      	add	r7, sp, #0
 800728e:	6078      	str	r0, [r7, #4]

}
 8007290:	bf00      	nop
 8007292:	370c      	adds	r7, #12
 8007294:	46bd      	mov	sp, r7
 8007296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800729a:	4770      	bx	lr

0800729c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800729c:	b480      	push	{r7}
 800729e:	b085      	sub	sp, #20
 80072a0:	af00      	add	r7, sp, #0
 80072a2:	4603      	mov	r3, r0
 80072a4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80072a6:	2300      	movs	r3, #0
 80072a8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80072aa:	79fb      	ldrb	r3, [r7, #7]
 80072ac:	2b03      	cmp	r3, #3
 80072ae:	d817      	bhi.n	80072e0 <USBD_Get_USB_Status+0x44>
 80072b0:	a201      	add	r2, pc, #4	@ (adr r2, 80072b8 <USBD_Get_USB_Status+0x1c>)
 80072b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072b6:	bf00      	nop
 80072b8:	080072c9 	.word	0x080072c9
 80072bc:	080072cf 	.word	0x080072cf
 80072c0:	080072d5 	.word	0x080072d5
 80072c4:	080072db 	.word	0x080072db
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80072c8:	2300      	movs	r3, #0
 80072ca:	73fb      	strb	r3, [r7, #15]
    break;
 80072cc:	e00b      	b.n	80072e6 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80072ce:	2303      	movs	r3, #3
 80072d0:	73fb      	strb	r3, [r7, #15]
    break;
 80072d2:	e008      	b.n	80072e6 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80072d4:	2301      	movs	r3, #1
 80072d6:	73fb      	strb	r3, [r7, #15]
    break;
 80072d8:	e005      	b.n	80072e6 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80072da:	2303      	movs	r3, #3
 80072dc:	73fb      	strb	r3, [r7, #15]
    break;
 80072de:	e002      	b.n	80072e6 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80072e0:	2303      	movs	r3, #3
 80072e2:	73fb      	strb	r3, [r7, #15]
    break;
 80072e4:	bf00      	nop
  }
  return usb_status;
 80072e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80072e8:	4618      	mov	r0, r3
 80072ea:	3714      	adds	r7, #20
 80072ec:	46bd      	mov	sp, r7
 80072ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072f2:	4770      	bx	lr

080072f4 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80072f4:	b480      	push	{r7}
 80072f6:	b083      	sub	sp, #12
 80072f8:	af00      	add	r7, sp, #0
 80072fa:	4603      	mov	r3, r0
 80072fc:	6039      	str	r1, [r7, #0]
 80072fe:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8007300:	683b      	ldr	r3, [r7, #0]
 8007302:	2212      	movs	r2, #18
 8007304:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8007306:	4b03      	ldr	r3, [pc, #12]	@ (8007314 <USBD_FS_DeviceDescriptor+0x20>)
}
 8007308:	4618      	mov	r0, r3
 800730a:	370c      	adds	r7, #12
 800730c:	46bd      	mov	sp, r7
 800730e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007312:	4770      	bx	lr
 8007314:	20000030 	.word	0x20000030

08007318 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007318:	b480      	push	{r7}
 800731a:	b083      	sub	sp, #12
 800731c:	af00      	add	r7, sp, #0
 800731e:	4603      	mov	r3, r0
 8007320:	6039      	str	r1, [r7, #0]
 8007322:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8007324:	683b      	ldr	r3, [r7, #0]
 8007326:	2204      	movs	r2, #4
 8007328:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800732a:	4b03      	ldr	r3, [pc, #12]	@ (8007338 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800732c:	4618      	mov	r0, r3
 800732e:	370c      	adds	r7, #12
 8007330:	46bd      	mov	sp, r7
 8007332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007336:	4770      	bx	lr
 8007338:	20000044 	.word	0x20000044

0800733c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800733c:	b580      	push	{r7, lr}
 800733e:	b082      	sub	sp, #8
 8007340:	af00      	add	r7, sp, #0
 8007342:	4603      	mov	r3, r0
 8007344:	6039      	str	r1, [r7, #0]
 8007346:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007348:	79fb      	ldrb	r3, [r7, #7]
 800734a:	2b00      	cmp	r3, #0
 800734c:	d105      	bne.n	800735a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800734e:	683a      	ldr	r2, [r7, #0]
 8007350:	4907      	ldr	r1, [pc, #28]	@ (8007370 <USBD_FS_ProductStrDescriptor+0x34>)
 8007352:	4808      	ldr	r0, [pc, #32]	@ (8007374 <USBD_FS_ProductStrDescriptor+0x38>)
 8007354:	f011 fc3a 	bl	8018bcc <USBD_GetString>
 8007358:	e004      	b.n	8007364 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800735a:	683a      	ldr	r2, [r7, #0]
 800735c:	4904      	ldr	r1, [pc, #16]	@ (8007370 <USBD_FS_ProductStrDescriptor+0x34>)
 800735e:	4805      	ldr	r0, [pc, #20]	@ (8007374 <USBD_FS_ProductStrDescriptor+0x38>)
 8007360:	f011 fc34 	bl	8018bcc <USBD_GetString>
  }
  return USBD_StrDesc;
 8007364:	4b02      	ldr	r3, [pc, #8]	@ (8007370 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8007366:	4618      	mov	r0, r3
 8007368:	3708      	adds	r7, #8
 800736a:	46bd      	mov	sp, r7
 800736c:	bd80      	pop	{r7, pc}
 800736e:	bf00      	nop
 8007370:	2000bbac 	.word	0x2000bbac
 8007374:	08021574 	.word	0x08021574

08007378 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007378:	b580      	push	{r7, lr}
 800737a:	b082      	sub	sp, #8
 800737c:	af00      	add	r7, sp, #0
 800737e:	4603      	mov	r3, r0
 8007380:	6039      	str	r1, [r7, #0]
 8007382:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007384:	683a      	ldr	r2, [r7, #0]
 8007386:	4904      	ldr	r1, [pc, #16]	@ (8007398 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8007388:	4804      	ldr	r0, [pc, #16]	@ (800739c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800738a:	f011 fc1f 	bl	8018bcc <USBD_GetString>
  return USBD_StrDesc;
 800738e:	4b02      	ldr	r3, [pc, #8]	@ (8007398 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8007390:	4618      	mov	r0, r3
 8007392:	3708      	adds	r7, #8
 8007394:	46bd      	mov	sp, r7
 8007396:	bd80      	pop	{r7, pc}
 8007398:	2000bbac 	.word	0x2000bbac
 800739c:	0802158c 	.word	0x0802158c

080073a0 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80073a0:	b580      	push	{r7, lr}
 80073a2:	b082      	sub	sp, #8
 80073a4:	af00      	add	r7, sp, #0
 80073a6:	4603      	mov	r3, r0
 80073a8:	6039      	str	r1, [r7, #0]
 80073aa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80073ac:	683b      	ldr	r3, [r7, #0]
 80073ae:	221a      	movs	r2, #26
 80073b0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80073b2:	f000 f843 	bl	800743c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80073b6:	4b02      	ldr	r3, [pc, #8]	@ (80073c0 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80073b8:	4618      	mov	r0, r3
 80073ba:	3708      	adds	r7, #8
 80073bc:	46bd      	mov	sp, r7
 80073be:	bd80      	pop	{r7, pc}
 80073c0:	20000048 	.word	0x20000048

080073c4 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80073c4:	b580      	push	{r7, lr}
 80073c6:	b082      	sub	sp, #8
 80073c8:	af00      	add	r7, sp, #0
 80073ca:	4603      	mov	r3, r0
 80073cc:	6039      	str	r1, [r7, #0]
 80073ce:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80073d0:	79fb      	ldrb	r3, [r7, #7]
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d105      	bne.n	80073e2 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80073d6:	683a      	ldr	r2, [r7, #0]
 80073d8:	4907      	ldr	r1, [pc, #28]	@ (80073f8 <USBD_FS_ConfigStrDescriptor+0x34>)
 80073da:	4808      	ldr	r0, [pc, #32]	@ (80073fc <USBD_FS_ConfigStrDescriptor+0x38>)
 80073dc:	f011 fbf6 	bl	8018bcc <USBD_GetString>
 80073e0:	e004      	b.n	80073ec <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80073e2:	683a      	ldr	r2, [r7, #0]
 80073e4:	4904      	ldr	r1, [pc, #16]	@ (80073f8 <USBD_FS_ConfigStrDescriptor+0x34>)
 80073e6:	4805      	ldr	r0, [pc, #20]	@ (80073fc <USBD_FS_ConfigStrDescriptor+0x38>)
 80073e8:	f011 fbf0 	bl	8018bcc <USBD_GetString>
  }
  return USBD_StrDesc;
 80073ec:	4b02      	ldr	r3, [pc, #8]	@ (80073f8 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80073ee:	4618      	mov	r0, r3
 80073f0:	3708      	adds	r7, #8
 80073f2:	46bd      	mov	sp, r7
 80073f4:	bd80      	pop	{r7, pc}
 80073f6:	bf00      	nop
 80073f8:	2000bbac 	.word	0x2000bbac
 80073fc:	080215a0 	.word	0x080215a0

08007400 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007400:	b580      	push	{r7, lr}
 8007402:	b082      	sub	sp, #8
 8007404:	af00      	add	r7, sp, #0
 8007406:	4603      	mov	r3, r0
 8007408:	6039      	str	r1, [r7, #0]
 800740a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800740c:	79fb      	ldrb	r3, [r7, #7]
 800740e:	2b00      	cmp	r3, #0
 8007410:	d105      	bne.n	800741e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007412:	683a      	ldr	r2, [r7, #0]
 8007414:	4907      	ldr	r1, [pc, #28]	@ (8007434 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007416:	4808      	ldr	r0, [pc, #32]	@ (8007438 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007418:	f011 fbd8 	bl	8018bcc <USBD_GetString>
 800741c:	e004      	b.n	8007428 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800741e:	683a      	ldr	r2, [r7, #0]
 8007420:	4904      	ldr	r1, [pc, #16]	@ (8007434 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007422:	4805      	ldr	r0, [pc, #20]	@ (8007438 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007424:	f011 fbd2 	bl	8018bcc <USBD_GetString>
  }
  return USBD_StrDesc;
 8007428:	4b02      	ldr	r3, [pc, #8]	@ (8007434 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800742a:	4618      	mov	r0, r3
 800742c:	3708      	adds	r7, #8
 800742e:	46bd      	mov	sp, r7
 8007430:	bd80      	pop	{r7, pc}
 8007432:	bf00      	nop
 8007434:	2000bbac 	.word	0x2000bbac
 8007438:	080215ac 	.word	0x080215ac

0800743c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800743c:	b580      	push	{r7, lr}
 800743e:	b084      	sub	sp, #16
 8007440:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8007442:	4b0f      	ldr	r3, [pc, #60]	@ (8007480 <Get_SerialNum+0x44>)
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8007448:	4b0e      	ldr	r3, [pc, #56]	@ (8007484 <Get_SerialNum+0x48>)
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800744e:	4b0e      	ldr	r3, [pc, #56]	@ (8007488 <Get_SerialNum+0x4c>)
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8007454:	68fa      	ldr	r2, [r7, #12]
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	4413      	add	r3, r2
 800745a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	2b00      	cmp	r3, #0
 8007460:	d009      	beq.n	8007476 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8007462:	2208      	movs	r2, #8
 8007464:	4909      	ldr	r1, [pc, #36]	@ (800748c <Get_SerialNum+0x50>)
 8007466:	68f8      	ldr	r0, [r7, #12]
 8007468:	f000 f814 	bl	8007494 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800746c:	2204      	movs	r2, #4
 800746e:	4908      	ldr	r1, [pc, #32]	@ (8007490 <Get_SerialNum+0x54>)
 8007470:	68b8      	ldr	r0, [r7, #8]
 8007472:	f000 f80f 	bl	8007494 <IntToUnicode>
  }
}
 8007476:	bf00      	nop
 8007478:	3710      	adds	r7, #16
 800747a:	46bd      	mov	sp, r7
 800747c:	bd80      	pop	{r7, pc}
 800747e:	bf00      	nop
 8007480:	1fff7a10 	.word	0x1fff7a10
 8007484:	1fff7a14 	.word	0x1fff7a14
 8007488:	1fff7a18 	.word	0x1fff7a18
 800748c:	2000004a 	.word	0x2000004a
 8007490:	2000005a 	.word	0x2000005a

08007494 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8007494:	b480      	push	{r7}
 8007496:	b087      	sub	sp, #28
 8007498:	af00      	add	r7, sp, #0
 800749a:	60f8      	str	r0, [r7, #12]
 800749c:	60b9      	str	r1, [r7, #8]
 800749e:	4613      	mov	r3, r2
 80074a0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80074a2:	2300      	movs	r3, #0
 80074a4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80074a6:	2300      	movs	r3, #0
 80074a8:	75fb      	strb	r3, [r7, #23]
 80074aa:	e027      	b.n	80074fc <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	0f1b      	lsrs	r3, r3, #28
 80074b0:	2b09      	cmp	r3, #9
 80074b2:	d80b      	bhi.n	80074cc <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	0f1b      	lsrs	r3, r3, #28
 80074b8:	b2da      	uxtb	r2, r3
 80074ba:	7dfb      	ldrb	r3, [r7, #23]
 80074bc:	005b      	lsls	r3, r3, #1
 80074be:	4619      	mov	r1, r3
 80074c0:	68bb      	ldr	r3, [r7, #8]
 80074c2:	440b      	add	r3, r1
 80074c4:	3230      	adds	r2, #48	@ 0x30
 80074c6:	b2d2      	uxtb	r2, r2
 80074c8:	701a      	strb	r2, [r3, #0]
 80074ca:	e00a      	b.n	80074e2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	0f1b      	lsrs	r3, r3, #28
 80074d0:	b2da      	uxtb	r2, r3
 80074d2:	7dfb      	ldrb	r3, [r7, #23]
 80074d4:	005b      	lsls	r3, r3, #1
 80074d6:	4619      	mov	r1, r3
 80074d8:	68bb      	ldr	r3, [r7, #8]
 80074da:	440b      	add	r3, r1
 80074dc:	3237      	adds	r2, #55	@ 0x37
 80074de:	b2d2      	uxtb	r2, r2
 80074e0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	011b      	lsls	r3, r3, #4
 80074e6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80074e8:	7dfb      	ldrb	r3, [r7, #23]
 80074ea:	005b      	lsls	r3, r3, #1
 80074ec:	3301      	adds	r3, #1
 80074ee:	68ba      	ldr	r2, [r7, #8]
 80074f0:	4413      	add	r3, r2
 80074f2:	2200      	movs	r2, #0
 80074f4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80074f6:	7dfb      	ldrb	r3, [r7, #23]
 80074f8:	3301      	adds	r3, #1
 80074fa:	75fb      	strb	r3, [r7, #23]
 80074fc:	7dfa      	ldrb	r2, [r7, #23]
 80074fe:	79fb      	ldrb	r3, [r7, #7]
 8007500:	429a      	cmp	r2, r3
 8007502:	d3d3      	bcc.n	80074ac <IntToUnicode+0x18>
  }
}
 8007504:	bf00      	nop
 8007506:	bf00      	nop
 8007508:	371c      	adds	r7, #28
 800750a:	46bd      	mov	sp, r7
 800750c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007510:	4770      	bx	lr
	...

08007514 <bldc_interface_process_packet>:
 * The buffer to process.
 *
 * @param len
 * The length of the buffer.
 */
void bldc_interface_process_packet(unsigned char *data, unsigned int len) {
 8007514:	b580      	push	{r7, lr}
 8007516:	b088      	sub	sp, #32
 8007518:	af00      	add	r7, sp, #0
 800751a:	6078      	str	r0, [r7, #4]
 800751c:	6039      	str	r1, [r7, #0]
	if (!len) {
 800751e:	683b      	ldr	r3, [r7, #0]
 8007520:	2b00      	cmp	r3, #0
 8007522:	f001 8437 	beq.w	8008d94 <bldc_interface_process_packet+0x1880>
		return;
	}

	if (forward_func) {
 8007526:	4bc3      	ldr	r3, [pc, #780]	@ (8007834 <bldc_interface_process_packet+0x320>)
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	2b00      	cmp	r3, #0
 800752c:	d006      	beq.n	800753c <bldc_interface_process_packet+0x28>
		forward_func(data, len);
 800752e:	4bc1      	ldr	r3, [pc, #772]	@ (8007834 <bldc_interface_process_packet+0x320>)
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	6839      	ldr	r1, [r7, #0]
 8007534:	6878      	ldr	r0, [r7, #4]
 8007536:	4798      	blx	r3
		return;
 8007538:	f001 bc43 	b.w	8008dc2 <bldc_interface_process_packet+0x18ae>
	}

	int32_t ind = 0;
 800753c:	2300      	movs	r3, #0
 800753e:	60fb      	str	r3, [r7, #12]
	uint32_t mask = 0;
 8007540:	2300      	movs	r3, #0
 8007542:	617b      	str	r3, [r7, #20]
	uint32_t hahaha = 0;
 8007544:	2300      	movs	r3, #0
 8007546:	61fb      	str	r3, [r7, #28]
	int i = 0;
 8007548:	2300      	movs	r3, #0
 800754a:	61bb      	str	r3, [r7, #24]
	unsigned char id = data[0];
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	781b      	ldrb	r3, [r3, #0]
 8007550:	74fb      	strb	r3, [r7, #19]
	data++;
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	3301      	adds	r3, #1
 8007556:	607b      	str	r3, [r7, #4]
	len--;
 8007558:	683b      	ldr	r3, [r7, #0]
 800755a:	3b01      	subs	r3, #1
 800755c:	603b      	str	r3, [r7, #0]

	switch (id) {
 800755e:	7cfb      	ldrb	r3, [r7, #19]
 8007560:	2b32      	cmp	r3, #50	@ 0x32
 8007562:	f201 8419 	bhi.w	8008d98 <bldc_interface_process_packet+0x1884>
 8007566:	a201      	add	r2, pc, #4	@ (adr r2, 800756c <bldc_interface_process_packet+0x58>)
 8007568:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800756c:	08007639 	.word	0x08007639
 8007570:	08008d99 	.word	0x08008d99
 8007574:	08008d99 	.word	0x08008d99
 8007578:	08008d99 	.word	0x08008d99
 800757c:	08007683 	.word	0x08007683
 8007580:	08008d99 	.word	0x08008d99
 8007584:	08008d99 	.word	0x08008d99
 8007588:	08008d99 	.word	0x08008d99
 800758c:	08008d99 	.word	0x08008d99
 8007590:	08008d99 	.word	0x08008d99
 8007594:	08008d99 	.word	0x08008d99
 8007598:	08008d99 	.word	0x08008d99
 800759c:	08008d99 	.word	0x08008d99
 80075a0:	08008d75 	.word	0x08008d75
 80075a4:	08007cfd 	.word	0x08007cfd
 80075a8:	08007cfd 	.word	0x08007cfd
 80075ac:	08008d85 	.word	0x08008d85
 80075b0:	080085b9 	.word	0x080085b9
 80075b4:	080085b9 	.word	0x080085b9
 80075b8:	08008d99 	.word	0x08008d99
 80075bc:	08008d99 	.word	0x08008d99
 80075c0:	08007c79 	.word	0x08007c79
 80075c4:	08007c99 	.word	0x08007c99
 80075c8:	08008d99 	.word	0x08008d99
 80075cc:	08008bdd 	.word	0x08008bdd
 80075d0:	08008d99 	.word	0x08008d99
 80075d4:	08008d99 	.word	0x08008d99
 80075d8:	08008d99 	.word	0x08008d99
 80075dc:	08008d99 	.word	0x08008d99
 80075e0:	08008d99 	.word	0x08008d99
 80075e4:	08008d99 	.word	0x08008d99
 80075e8:	08008c85 	.word	0x08008c85
 80075ec:	08008ce1 	.word	0x08008ce1
 80075f0:	08008d3d 	.word	0x08008d3d
 80075f4:	08008d99 	.word	0x08008d99
 80075f8:	08008d99 	.word	0x08008d99
 80075fc:	08008d99 	.word	0x08008d99
 8007600:	08008d99 	.word	0x08008d99
 8007604:	08008d99 	.word	0x08008d99
 8007608:	08008d99 	.word	0x08008d99
 800760c:	08008d99 	.word	0x08008d99
 8007610:	08008d99 	.word	0x08008d99
 8007614:	08008d99 	.word	0x08008d99
 8007618:	08008d99 	.word	0x08008d99
 800761c:	08008d99 	.word	0x08008d99
 8007620:	08008d99 	.word	0x08008d99
 8007624:	08008d99 	.word	0x08008d99
 8007628:	08008d99 	.word	0x08008d99
 800762c:	08008d99 	.word	0x08008d99
 8007630:	08008d99 	.word	0x08008d99
 8007634:	080078bd 	.word	0x080078bd
	case COMM_FW_VERSION:
		if (len == 2) {
 8007638:	683b      	ldr	r3, [r7, #0]
 800763a:	2b02      	cmp	r3, #2
 800763c:	d117      	bne.n	800766e <bldc_interface_process_packet+0x15a>
			ind = 0;
 800763e:	2300      	movs	r3, #0
 8007640:	60fb      	str	r3, [r7, #12]
			fw_major = data[ind++];
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	1c5a      	adds	r2, r3, #1
 8007646:	60fa      	str	r2, [r7, #12]
 8007648:	461a      	mov	r2, r3
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	4413      	add	r3, r2
 800764e:	781b      	ldrb	r3, [r3, #0]
 8007650:	461a      	mov	r2, r3
 8007652:	4b79      	ldr	r3, [pc, #484]	@ (8007838 <bldc_interface_process_packet+0x324>)
 8007654:	601a      	str	r2, [r3, #0]
			fw_minor = data[ind++];
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	1c5a      	adds	r2, r3, #1
 800765a:	60fa      	str	r2, [r7, #12]
 800765c:	461a      	mov	r2, r3
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	4413      	add	r3, r2
 8007662:	781b      	ldrb	r3, [r3, #0]
 8007664:	461a      	mov	r2, r3
 8007666:	4b75      	ldr	r3, [pc, #468]	@ (800783c <bldc_interface_process_packet+0x328>)
 8007668:	601a      	str	r2, [r3, #0]
		} else {
			fw_major = -1;
			fw_minor = -1;
		}
		break;
 800766a:	f001 bbaa 	b.w	8008dc2 <bldc_interface_process_packet+0x18ae>
			fw_major = -1;
 800766e:	4b72      	ldr	r3, [pc, #456]	@ (8007838 <bldc_interface_process_packet+0x324>)
 8007670:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007674:	601a      	str	r2, [r3, #0]
			fw_minor = -1;
 8007676:	4b71      	ldr	r3, [pc, #452]	@ (800783c <bldc_interface_process_packet+0x328>)
 8007678:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800767c:	601a      	str	r2, [r3, #0]
		break;
 800767e:	f001 bba0 	b.w	8008dc2 <bldc_interface_process_packet+0x18ae>
	case COMM_WRITE_NEW_APP_DATA:
		// TODO
		break;

	case COMM_GET_VALUES:
		ind = 0;
 8007682:	2300      	movs	r3, #0
 8007684:	60fb      	str	r3, [r7, #12]
		values.temp_mos = buffer_get_float16(data, 1e1, &ind);
 8007686:	f107 030c 	add.w	r3, r7, #12
 800768a:	4619      	mov	r1, r3
 800768c:	eeb2 0a04 	vmov.f32	s0, #36	@ 0x41200000  10.0
 8007690:	6878      	ldr	r0, [r7, #4]
 8007692:	f001 fc65 	bl	8008f60 <buffer_get_float16>
 8007696:	eef0 7a40 	vmov.f32	s15, s0
 800769a:	4b69      	ldr	r3, [pc, #420]	@ (8007840 <bldc_interface_process_packet+0x32c>)
 800769c:	edc3 7a01 	vstr	s15, [r3, #4]
		values.temp_motor = buffer_get_float16(data, 1e1, &ind);
 80076a0:	f107 030c 	add.w	r3, r7, #12
 80076a4:	4619      	mov	r1, r3
 80076a6:	eeb2 0a04 	vmov.f32	s0, #36	@ 0x41200000  10.0
 80076aa:	6878      	ldr	r0, [r7, #4]
 80076ac:	f001 fc58 	bl	8008f60 <buffer_get_float16>
 80076b0:	eef0 7a40 	vmov.f32	s15, s0
 80076b4:	4b62      	ldr	r3, [pc, #392]	@ (8007840 <bldc_interface_process_packet+0x32c>)
 80076b6:	edc3 7a02 	vstr	s15, [r3, #8]
		values.current_motor = buffer_get_float32(data, 1e2, &ind);
 80076ba:	f107 030c 	add.w	r3, r7, #12
 80076be:	4619      	mov	r1, r3
 80076c0:	ed9f 0a60 	vldr	s0, [pc, #384]	@ 8007844 <bldc_interface_process_packet+0x330>
 80076c4:	6878      	ldr	r0, [r7, #4]
 80076c6:	f001 fc66 	bl	8008f96 <buffer_get_float32>
 80076ca:	eef0 7a40 	vmov.f32	s15, s0
 80076ce:	4b5c      	ldr	r3, [pc, #368]	@ (8007840 <bldc_interface_process_packet+0x32c>)
 80076d0:	edc3 7a03 	vstr	s15, [r3, #12]
		values.current_in = buffer_get_float32(data, 1e2, &ind);
 80076d4:	f107 030c 	add.w	r3, r7, #12
 80076d8:	4619      	mov	r1, r3
 80076da:	ed9f 0a5a 	vldr	s0, [pc, #360]	@ 8007844 <bldc_interface_process_packet+0x330>
 80076de:	6878      	ldr	r0, [r7, #4]
 80076e0:	f001 fc59 	bl	8008f96 <buffer_get_float32>
 80076e4:	eef0 7a40 	vmov.f32	s15, s0
 80076e8:	4b55      	ldr	r3, [pc, #340]	@ (8007840 <bldc_interface_process_packet+0x32c>)
 80076ea:	edc3 7a04 	vstr	s15, [r3, #16]
		values.id = buffer_get_float32(data, 1e2, &ind);
 80076ee:	f107 030c 	add.w	r3, r7, #12
 80076f2:	4619      	mov	r1, r3
 80076f4:	ed9f 0a53 	vldr	s0, [pc, #332]	@ 8007844 <bldc_interface_process_packet+0x330>
 80076f8:	6878      	ldr	r0, [r7, #4]
 80076fa:	f001 fc4c 	bl	8008f96 <buffer_get_float32>
 80076fe:	eef0 7a40 	vmov.f32	s15, s0
 8007702:	4b4f      	ldr	r3, [pc, #316]	@ (8007840 <bldc_interface_process_packet+0x32c>)
 8007704:	edc3 7a05 	vstr	s15, [r3, #20]
		values.iq = buffer_get_float32(data, 1e2, &ind);
 8007708:	f107 030c 	add.w	r3, r7, #12
 800770c:	4619      	mov	r1, r3
 800770e:	ed9f 0a4d 	vldr	s0, [pc, #308]	@ 8007844 <bldc_interface_process_packet+0x330>
 8007712:	6878      	ldr	r0, [r7, #4]
 8007714:	f001 fc3f 	bl	8008f96 <buffer_get_float32>
 8007718:	eef0 7a40 	vmov.f32	s15, s0
 800771c:	4b48      	ldr	r3, [pc, #288]	@ (8007840 <bldc_interface_process_packet+0x32c>)
 800771e:	edc3 7a06 	vstr	s15, [r3, #24]
		values.duty_now = buffer_get_float16(data, 1e3, &ind);
 8007722:	f107 030c 	add.w	r3, r7, #12
 8007726:	4619      	mov	r1, r3
 8007728:	ed9f 0a47 	vldr	s0, [pc, #284]	@ 8007848 <bldc_interface_process_packet+0x334>
 800772c:	6878      	ldr	r0, [r7, #4]
 800772e:	f001 fc17 	bl	8008f60 <buffer_get_float16>
 8007732:	eef0 7a40 	vmov.f32	s15, s0
 8007736:	4b42      	ldr	r3, [pc, #264]	@ (8007840 <bldc_interface_process_packet+0x32c>)
 8007738:	edc3 7a08 	vstr	s15, [r3, #32]
		values.rpm = buffer_get_float32(data, 1e0, &ind);
 800773c:	f107 030c 	add.w	r3, r7, #12
 8007740:	4619      	mov	r1, r3
 8007742:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8007746:	6878      	ldr	r0, [r7, #4]
 8007748:	f001 fc25 	bl	8008f96 <buffer_get_float32>
 800774c:	eef0 7a40 	vmov.f32	s15, s0
 8007750:	4b3b      	ldr	r3, [pc, #236]	@ (8007840 <bldc_interface_process_packet+0x32c>)
 8007752:	edc3 7a07 	vstr	s15, [r3, #28]
		values.v_in = buffer_get_float16(data, 1e1, &ind);
 8007756:	f107 030c 	add.w	r3, r7, #12
 800775a:	4619      	mov	r1, r3
 800775c:	eeb2 0a04 	vmov.f32	s0, #36	@ 0x41200000  10.0
 8007760:	6878      	ldr	r0, [r7, #4]
 8007762:	f001 fbfd 	bl	8008f60 <buffer_get_float16>
 8007766:	eef0 7a40 	vmov.f32	s15, s0
 800776a:	4b35      	ldr	r3, [pc, #212]	@ (8007840 <bldc_interface_process_packet+0x32c>)
 800776c:	edc3 7a00 	vstr	s15, [r3]
		values.amp_hours = buffer_get_float32(data, 1e4, &ind);
 8007770:	f107 030c 	add.w	r3, r7, #12
 8007774:	4619      	mov	r1, r3
 8007776:	ed9f 0a35 	vldr	s0, [pc, #212]	@ 800784c <bldc_interface_process_packet+0x338>
 800777a:	6878      	ldr	r0, [r7, #4]
 800777c:	f001 fc0b 	bl	8008f96 <buffer_get_float32>
 8007780:	eef0 7a40 	vmov.f32	s15, s0
 8007784:	4b2e      	ldr	r3, [pc, #184]	@ (8007840 <bldc_interface_process_packet+0x32c>)
 8007786:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
		values.amp_hours_charged = buffer_get_float32(data, 1e4, &ind);
 800778a:	f107 030c 	add.w	r3, r7, #12
 800778e:	4619      	mov	r1, r3
 8007790:	ed9f 0a2e 	vldr	s0, [pc, #184]	@ 800784c <bldc_interface_process_packet+0x338>
 8007794:	6878      	ldr	r0, [r7, #4]
 8007796:	f001 fbfe 	bl	8008f96 <buffer_get_float32>
 800779a:	eef0 7a40 	vmov.f32	s15, s0
 800779e:	4b28      	ldr	r3, [pc, #160]	@ (8007840 <bldc_interface_process_packet+0x32c>)
 80077a0:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
		values.watt_hours = buffer_get_float32(data, 1e4, &ind);
 80077a4:	f107 030c 	add.w	r3, r7, #12
 80077a8:	4619      	mov	r1, r3
 80077aa:	ed9f 0a28 	vldr	s0, [pc, #160]	@ 800784c <bldc_interface_process_packet+0x338>
 80077ae:	6878      	ldr	r0, [r7, #4]
 80077b0:	f001 fbf1 	bl	8008f96 <buffer_get_float32>
 80077b4:	eef0 7a40 	vmov.f32	s15, s0
 80077b8:	4b21      	ldr	r3, [pc, #132]	@ (8007840 <bldc_interface_process_packet+0x32c>)
 80077ba:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
		values.watt_hours_charged = buffer_get_float32(data, 1e4, &ind);
 80077be:	f107 030c 	add.w	r3, r7, #12
 80077c2:	4619      	mov	r1, r3
 80077c4:	ed9f 0a21 	vldr	s0, [pc, #132]	@ 800784c <bldc_interface_process_packet+0x338>
 80077c8:	6878      	ldr	r0, [r7, #4]
 80077ca:	f001 fbe4 	bl	8008f96 <buffer_get_float32>
 80077ce:	eef0 7a40 	vmov.f32	s15, s0
 80077d2:	4b1b      	ldr	r3, [pc, #108]	@ (8007840 <bldc_interface_process_packet+0x32c>)
 80077d4:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
		values.tachometer = buffer_get_int32(data, &ind);
 80077d8:	f107 030c 	add.w	r3, r7, #12
 80077dc:	4619      	mov	r1, r3
 80077de:	6878      	ldr	r0, [r7, #4]
 80077e0:	f001 fb5e 	bl	8008ea0 <buffer_get_int32>
 80077e4:	4603      	mov	r3, r0
 80077e6:	4a16      	ldr	r2, [pc, #88]	@ (8007840 <bldc_interface_process_packet+0x32c>)
 80077e8:	6353      	str	r3, [r2, #52]	@ 0x34
		values.tachometer_abs = buffer_get_int32(data, &ind);
 80077ea:	f107 030c 	add.w	r3, r7, #12
 80077ee:	4619      	mov	r1, r3
 80077f0:	6878      	ldr	r0, [r7, #4]
 80077f2:	f001 fb55 	bl	8008ea0 <buffer_get_int32>
 80077f6:	4603      	mov	r3, r0
 80077f8:	4a11      	ldr	r2, [pc, #68]	@ (8007840 <bldc_interface_process_packet+0x32c>)
 80077fa:	6393      	str	r3, [r2, #56]	@ 0x38
		values.fault_code = (mc_fault_code)data[ind++];
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	1c5a      	adds	r2, r3, #1
 8007800:	60fa      	str	r2, [r7, #12]
 8007802:	461a      	mov	r2, r3
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	4413      	add	r3, r2
 8007808:	781a      	ldrb	r2, [r3, #0]
 800780a:	4b0d      	ldr	r3, [pc, #52]	@ (8007840 <bldc_interface_process_packet+0x32c>)
 800780c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

		if (ind < (int)len) {
 8007810:	68fa      	ldr	r2, [r7, #12]
 8007812:	683b      	ldr	r3, [r7, #0]
 8007814:	429a      	cmp	r2, r3
 8007816:	da1d      	bge.n	8007854 <bldc_interface_process_packet+0x340>
			values.pid_pos = buffer_get_float32(data, 1e6, &ind);
 8007818:	f107 030c 	add.w	r3, r7, #12
 800781c:	4619      	mov	r1, r3
 800781e:	ed9f 0a0c 	vldr	s0, [pc, #48]	@ 8007850 <bldc_interface_process_packet+0x33c>
 8007822:	6878      	ldr	r0, [r7, #4]
 8007824:	f001 fbb7 	bl	8008f96 <buffer_get_float32>
 8007828:	eef0 7a40 	vmov.f32	s15, s0
 800782c:	4b04      	ldr	r3, [pc, #16]	@ (8007840 <bldc_interface_process_packet+0x32c>)
 800782e:	edc3 7a11 	vstr	s15, [r3, #68]	@ 0x44
 8007832:	e013      	b.n	800785c <bldc_interface_process_packet+0x348>
 8007834:	200007f4 	.word	0x200007f4
 8007838:	2000056c 	.word	0x2000056c
 800783c:	20000570 	.word	0x20000570
 8007840:	2000050c 	.word	0x2000050c
 8007844:	42c80000 	.word	0x42c80000
 8007848:	447a0000 	.word	0x447a0000
 800784c:	461c4000 	.word	0x461c4000
 8007850:	49742400 	.word	0x49742400
		} else {
			values.pid_pos = 0.0;
 8007854:	4b15      	ldr	r3, [pc, #84]	@ (80078ac <bldc_interface_process_packet+0x398>)
 8007856:	f04f 0200 	mov.w	r2, #0
 800785a:	645a      	str	r2, [r3, #68]	@ 0x44
		}

		if (ind < (int)len) {
 800785c:	68fa      	ldr	r2, [r7, #12]
 800785e:	683b      	ldr	r3, [r7, #0]
 8007860:	429a      	cmp	r2, r3
 8007862:	da0a      	bge.n	800787a <bldc_interface_process_packet+0x366>
			values.vesc_id = data[ind++];
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	1c5a      	adds	r2, r3, #1
 8007868:	60fa      	str	r2, [r7, #12]
 800786a:	461a      	mov	r2, r3
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	4413      	add	r3, r2
 8007870:	781a      	ldrb	r2, [r3, #0]
 8007872:	4b0e      	ldr	r3, [pc, #56]	@ (80078ac <bldc_interface_process_packet+0x398>)
 8007874:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
 8007878:	e003      	b.n	8007882 <bldc_interface_process_packet+0x36e>
		} else {
			values.vesc_id = 255;
 800787a:	4b0c      	ldr	r3, [pc, #48]	@ (80078ac <bldc_interface_process_packet+0x398>)
 800787c:	22ff      	movs	r2, #255	@ 0xff
 800787e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
		}

		rx_value_buf = values;
 8007882:	4a0b      	ldr	r2, [pc, #44]	@ (80078b0 <bldc_interface_process_packet+0x39c>)
 8007884:	4b09      	ldr	r3, [pc, #36]	@ (80078ac <bldc_interface_process_packet+0x398>)
 8007886:	4610      	mov	r0, r2
 8007888:	4619      	mov	r1, r3
 800788a:	2360      	movs	r3, #96	@ 0x60
 800788c:	461a      	mov	r2, r3
 800788e:	f016 fa3a 	bl	801dd06 <memcpy>

		if (rx_value_func) {
 8007892:	4b08      	ldr	r3, [pc, #32]	@ (80078b4 <bldc_interface_process_packet+0x3a0>)
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	2b00      	cmp	r3, #0
 8007898:	d003      	beq.n	80078a2 <bldc_interface_process_packet+0x38e>
			rx_value_func(&values);
 800789a:	4b06      	ldr	r3, [pc, #24]	@ (80078b4 <bldc_interface_process_packet+0x3a0>)
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	4803      	ldr	r0, [pc, #12]	@ (80078ac <bldc_interface_process_packet+0x398>)
 80078a0:	4798      	blx	r3
		}

		rx_value_complete = true;
 80078a2:	4b05      	ldr	r3, [pc, #20]	@ (80078b8 <bldc_interface_process_packet+0x3a4>)
 80078a4:	2201      	movs	r2, #1
 80078a6:	701a      	strb	r2, [r3, #0]

		break;
 80078a8:	f001 ba8b 	b.w	8008dc2 <bldc_interface_process_packet+0x18ae>
 80078ac:	2000050c 	.word	0x2000050c
 80078b0:	20008c54 	.word	0x20008c54
 80078b4:	200007f8 	.word	0x200007f8
 80078b8:	20009c5c 	.word	0x20009c5c

	case COMM_GET_VALUES_SELECTIVE:
		ind = 0;
 80078bc:	2300      	movs	r3, #0
 80078be:	60fb      	str	r3, [r7, #12]
		mask = buffer_get_uint32(data, &ind);
 80078c0:	f107 030c 	add.w	r3, r7, #12
 80078c4:	4619      	mov	r1, r3
 80078c6:	6878      	ldr	r0, [r7, #4]
 80078c8:	f001 fb1a 	bl	8008f00 <buffer_get_uint32>
 80078cc:	6178      	str	r0, [r7, #20]

		if (mask & ((uint32_t)1 << 0)) {
 80078ce:	697b      	ldr	r3, [r7, #20]
 80078d0:	f003 0301 	and.w	r3, r3, #1
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d00e      	beq.n	80078f6 <bldc_interface_process_packet+0x3e2>
			values.temp_mos = buffer_get_float16(data, 1e1, &ind);
 80078d8:	f107 030c 	add.w	r3, r7, #12
 80078dc:	4619      	mov	r1, r3
 80078de:	eeb2 0a04 	vmov.f32	s0, #36	@ 0x41200000  10.0
 80078e2:	6878      	ldr	r0, [r7, #4]
 80078e4:	f001 fb3c 	bl	8008f60 <buffer_get_float16>
 80078e8:	eef0 7a40 	vmov.f32	s15, s0
 80078ec:	4bbc      	ldr	r3, [pc, #752]	@ (8007be0 <bldc_interface_process_packet+0x6cc>)
 80078ee:	edc3 7a01 	vstr	s15, [r3, #4]
			hahaha = 0;
 80078f2:	2300      	movs	r3, #0
 80078f4:	61fb      	str	r3, [r7, #28]
		}
		if (mask & ((uint32_t)1 << 1)) {
 80078f6:	697b      	ldr	r3, [r7, #20]
 80078f8:	f003 0302 	and.w	r3, r3, #2
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d00e      	beq.n	800791e <bldc_interface_process_packet+0x40a>
			values.temp_motor = buffer_get_float16(data, 1e1, &ind);
 8007900:	f107 030c 	add.w	r3, r7, #12
 8007904:	4619      	mov	r1, r3
 8007906:	eeb2 0a04 	vmov.f32	s0, #36	@ 0x41200000  10.0
 800790a:	6878      	ldr	r0, [r7, #4]
 800790c:	f001 fb28 	bl	8008f60 <buffer_get_float16>
 8007910:	eef0 7a40 	vmov.f32	s15, s0
 8007914:	4bb2      	ldr	r3, [pc, #712]	@ (8007be0 <bldc_interface_process_packet+0x6cc>)
 8007916:	edc3 7a02 	vstr	s15, [r3, #8]
			hahaha = 1;
 800791a:	2301      	movs	r3, #1
 800791c:	61fb      	str	r3, [r7, #28]
		}
		if (mask & ((uint32_t)1 << 2)) {
 800791e:	697b      	ldr	r3, [r7, #20]
 8007920:	f003 0304 	and.w	r3, r3, #4
 8007924:	2b00      	cmp	r3, #0
 8007926:	d00e      	beq.n	8007946 <bldc_interface_process_packet+0x432>
			values.current_motor = buffer_get_float32(data, 1e2, &ind);
 8007928:	f107 030c 	add.w	r3, r7, #12
 800792c:	4619      	mov	r1, r3
 800792e:	ed9f 0aad 	vldr	s0, [pc, #692]	@ 8007be4 <bldc_interface_process_packet+0x6d0>
 8007932:	6878      	ldr	r0, [r7, #4]
 8007934:	f001 fb2f 	bl	8008f96 <buffer_get_float32>
 8007938:	eef0 7a40 	vmov.f32	s15, s0
 800793c:	4ba8      	ldr	r3, [pc, #672]	@ (8007be0 <bldc_interface_process_packet+0x6cc>)
 800793e:	edc3 7a03 	vstr	s15, [r3, #12]
			hahaha = 2;
 8007942:	2302      	movs	r3, #2
 8007944:	61fb      	str	r3, [r7, #28]
		}
		if (mask & ((uint32_t)1 << 3)) {
 8007946:	697b      	ldr	r3, [r7, #20]
 8007948:	f003 0308 	and.w	r3, r3, #8
 800794c:	2b00      	cmp	r3, #0
 800794e:	d00e      	beq.n	800796e <bldc_interface_process_packet+0x45a>
			values.current_in = buffer_get_float32(data, 1e2, &ind);
 8007950:	f107 030c 	add.w	r3, r7, #12
 8007954:	4619      	mov	r1, r3
 8007956:	ed9f 0aa3 	vldr	s0, [pc, #652]	@ 8007be4 <bldc_interface_process_packet+0x6d0>
 800795a:	6878      	ldr	r0, [r7, #4]
 800795c:	f001 fb1b 	bl	8008f96 <buffer_get_float32>
 8007960:	eef0 7a40 	vmov.f32	s15, s0
 8007964:	4b9e      	ldr	r3, [pc, #632]	@ (8007be0 <bldc_interface_process_packet+0x6cc>)
 8007966:	edc3 7a04 	vstr	s15, [r3, #16]
			hahaha = 3;
 800796a:	2303      	movs	r3, #3
 800796c:	61fb      	str	r3, [r7, #28]
		}
		if (mask & ((uint32_t)1 << 4)) {
 800796e:	697b      	ldr	r3, [r7, #20]
 8007970:	f003 0310 	and.w	r3, r3, #16
 8007974:	2b00      	cmp	r3, #0
 8007976:	d00e      	beq.n	8007996 <bldc_interface_process_packet+0x482>
			values.id = buffer_get_float32(data, 1e2, &ind);
 8007978:	f107 030c 	add.w	r3, r7, #12
 800797c:	4619      	mov	r1, r3
 800797e:	ed9f 0a99 	vldr	s0, [pc, #612]	@ 8007be4 <bldc_interface_process_packet+0x6d0>
 8007982:	6878      	ldr	r0, [r7, #4]
 8007984:	f001 fb07 	bl	8008f96 <buffer_get_float32>
 8007988:	eef0 7a40 	vmov.f32	s15, s0
 800798c:	4b94      	ldr	r3, [pc, #592]	@ (8007be0 <bldc_interface_process_packet+0x6cc>)
 800798e:	edc3 7a05 	vstr	s15, [r3, #20]
			hahaha = 4;
 8007992:	2304      	movs	r3, #4
 8007994:	61fb      	str	r3, [r7, #28]
		}
		if (mask & ((uint32_t)1 << 5)) {
 8007996:	697b      	ldr	r3, [r7, #20]
 8007998:	f003 0320 	and.w	r3, r3, #32
 800799c:	2b00      	cmp	r3, #0
 800799e:	d00e      	beq.n	80079be <bldc_interface_process_packet+0x4aa>
			values.iq = buffer_get_float32(data, 1e2, &ind);
 80079a0:	f107 030c 	add.w	r3, r7, #12
 80079a4:	4619      	mov	r1, r3
 80079a6:	ed9f 0a8f 	vldr	s0, [pc, #572]	@ 8007be4 <bldc_interface_process_packet+0x6d0>
 80079aa:	6878      	ldr	r0, [r7, #4]
 80079ac:	f001 faf3 	bl	8008f96 <buffer_get_float32>
 80079b0:	eef0 7a40 	vmov.f32	s15, s0
 80079b4:	4b8a      	ldr	r3, [pc, #552]	@ (8007be0 <bldc_interface_process_packet+0x6cc>)
 80079b6:	edc3 7a06 	vstr	s15, [r3, #24]
			hahaha = 5;
 80079ba:	2305      	movs	r3, #5
 80079bc:	61fb      	str	r3, [r7, #28]
		}
		if (mask & ((uint32_t)1 << 6)) {
 80079be:	697b      	ldr	r3, [r7, #20]
 80079c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	d00e      	beq.n	80079e6 <bldc_interface_process_packet+0x4d2>
			values.duty_now = buffer_get_float16(data, 1e3, &ind);
 80079c8:	f107 030c 	add.w	r3, r7, #12
 80079cc:	4619      	mov	r1, r3
 80079ce:	ed9f 0a88 	vldr	s0, [pc, #544]	@ 8007bf0 <bldc_interface_process_packet+0x6dc>
 80079d2:	6878      	ldr	r0, [r7, #4]
 80079d4:	f001 fac4 	bl	8008f60 <buffer_get_float16>
 80079d8:	eef0 7a40 	vmov.f32	s15, s0
 80079dc:	4b80      	ldr	r3, [pc, #512]	@ (8007be0 <bldc_interface_process_packet+0x6cc>)
 80079de:	edc3 7a08 	vstr	s15, [r3, #32]
			hahaha = 6;
 80079e2:	2306      	movs	r3, #6
 80079e4:	61fb      	str	r3, [r7, #28]
		}
		if (mask & ((uint32_t)1 << 7)) {
 80079e6:	697b      	ldr	r3, [r7, #20]
 80079e8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d00e      	beq.n	8007a0e <bldc_interface_process_packet+0x4fa>
			values.rpm = buffer_get_float32(data, 1e0, &ind); // has to be divided by pole pairs
 80079f0:	f107 030c 	add.w	r3, r7, #12
 80079f4:	4619      	mov	r1, r3
 80079f6:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 80079fa:	6878      	ldr	r0, [r7, #4]
 80079fc:	f001 facb 	bl	8008f96 <buffer_get_float32>
 8007a00:	eef0 7a40 	vmov.f32	s15, s0
 8007a04:	4b76      	ldr	r3, [pc, #472]	@ (8007be0 <bldc_interface_process_packet+0x6cc>)
 8007a06:	edc3 7a07 	vstr	s15, [r3, #28]
			hahaha = 7;
 8007a0a:	2307      	movs	r3, #7
 8007a0c:	61fb      	str	r3, [r7, #28]
		}
		if (mask & ((uint32_t)1 << 8)) {
 8007a0e:	697b      	ldr	r3, [r7, #20]
 8007a10:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d00e      	beq.n	8007a36 <bldc_interface_process_packet+0x522>
			values.v_in = buffer_get_float16(data, 1e1, &ind);
 8007a18:	f107 030c 	add.w	r3, r7, #12
 8007a1c:	4619      	mov	r1, r3
 8007a1e:	eeb2 0a04 	vmov.f32	s0, #36	@ 0x41200000  10.0
 8007a22:	6878      	ldr	r0, [r7, #4]
 8007a24:	f001 fa9c 	bl	8008f60 <buffer_get_float16>
 8007a28:	eef0 7a40 	vmov.f32	s15, s0
 8007a2c:	4b6c      	ldr	r3, [pc, #432]	@ (8007be0 <bldc_interface_process_packet+0x6cc>)
 8007a2e:	edc3 7a00 	vstr	s15, [r3]
			hahaha = 8;
 8007a32:	2308      	movs	r3, #8
 8007a34:	61fb      	str	r3, [r7, #28]
		}
		if (mask & ((uint32_t)1 << 9)) {
 8007a36:	697b      	ldr	r3, [r7, #20]
 8007a38:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	d00e      	beq.n	8007a5e <bldc_interface_process_packet+0x54a>
			values.amp_hours = buffer_get_float32(data, 1e4, &ind);
 8007a40:	f107 030c 	add.w	r3, r7, #12
 8007a44:	4619      	mov	r1, r3
 8007a46:	ed9f 0a68 	vldr	s0, [pc, #416]	@ 8007be8 <bldc_interface_process_packet+0x6d4>
 8007a4a:	6878      	ldr	r0, [r7, #4]
 8007a4c:	f001 faa3 	bl	8008f96 <buffer_get_float32>
 8007a50:	eef0 7a40 	vmov.f32	s15, s0
 8007a54:	4b62      	ldr	r3, [pc, #392]	@ (8007be0 <bldc_interface_process_packet+0x6cc>)
 8007a56:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
			hahaha = 9;
 8007a5a:	2309      	movs	r3, #9
 8007a5c:	61fb      	str	r3, [r7, #28]
		}
		if (mask & ((uint32_t)1 << 10)) {
 8007a5e:	697b      	ldr	r3, [r7, #20]
 8007a60:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d00e      	beq.n	8007a86 <bldc_interface_process_packet+0x572>
			values.amp_hours_charged = buffer_get_float32(data, 1e4, &ind);
 8007a68:	f107 030c 	add.w	r3, r7, #12
 8007a6c:	4619      	mov	r1, r3
 8007a6e:	ed9f 0a5e 	vldr	s0, [pc, #376]	@ 8007be8 <bldc_interface_process_packet+0x6d4>
 8007a72:	6878      	ldr	r0, [r7, #4]
 8007a74:	f001 fa8f 	bl	8008f96 <buffer_get_float32>
 8007a78:	eef0 7a40 	vmov.f32	s15, s0
 8007a7c:	4b58      	ldr	r3, [pc, #352]	@ (8007be0 <bldc_interface_process_packet+0x6cc>)
 8007a7e:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
			hahaha = 10;
 8007a82:	230a      	movs	r3, #10
 8007a84:	61fb      	str	r3, [r7, #28]
		}
		if (mask & ((uint32_t)1 << 11)) {
 8007a86:	697b      	ldr	r3, [r7, #20]
 8007a88:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d00e      	beq.n	8007aae <bldc_interface_process_packet+0x59a>
			values.watt_hours = buffer_get_float32(data, 1e4, &ind);
 8007a90:	f107 030c 	add.w	r3, r7, #12
 8007a94:	4619      	mov	r1, r3
 8007a96:	ed9f 0a54 	vldr	s0, [pc, #336]	@ 8007be8 <bldc_interface_process_packet+0x6d4>
 8007a9a:	6878      	ldr	r0, [r7, #4]
 8007a9c:	f001 fa7b 	bl	8008f96 <buffer_get_float32>
 8007aa0:	eef0 7a40 	vmov.f32	s15, s0
 8007aa4:	4b4e      	ldr	r3, [pc, #312]	@ (8007be0 <bldc_interface_process_packet+0x6cc>)
 8007aa6:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
			hahaha = 11;
 8007aaa:	230b      	movs	r3, #11
 8007aac:	61fb      	str	r3, [r7, #28]
		}
		if (mask & ((uint32_t)1 << 12)) {
 8007aae:	697b      	ldr	r3, [r7, #20]
 8007ab0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	d00e      	beq.n	8007ad6 <bldc_interface_process_packet+0x5c2>
			values.watt_hours_charged = buffer_get_float32(data, 1e4, &ind);
 8007ab8:	f107 030c 	add.w	r3, r7, #12
 8007abc:	4619      	mov	r1, r3
 8007abe:	ed9f 0a4a 	vldr	s0, [pc, #296]	@ 8007be8 <bldc_interface_process_packet+0x6d4>
 8007ac2:	6878      	ldr	r0, [r7, #4]
 8007ac4:	f001 fa67 	bl	8008f96 <buffer_get_float32>
 8007ac8:	eef0 7a40 	vmov.f32	s15, s0
 8007acc:	4b44      	ldr	r3, [pc, #272]	@ (8007be0 <bldc_interface_process_packet+0x6cc>)
 8007ace:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
			hahaha = 12;
 8007ad2:	230c      	movs	r3, #12
 8007ad4:	61fb      	str	r3, [r7, #28]
		}
		if (mask & ((uint32_t)1 << 13)) {
 8007ad6:	697b      	ldr	r3, [r7, #20]
 8007ad8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	d00a      	beq.n	8007af6 <bldc_interface_process_packet+0x5e2>
			values.tachometer = buffer_get_int32(data, &ind);
 8007ae0:	f107 030c 	add.w	r3, r7, #12
 8007ae4:	4619      	mov	r1, r3
 8007ae6:	6878      	ldr	r0, [r7, #4]
 8007ae8:	f001 f9da 	bl	8008ea0 <buffer_get_int32>
 8007aec:	4603      	mov	r3, r0
 8007aee:	4a3c      	ldr	r2, [pc, #240]	@ (8007be0 <bldc_interface_process_packet+0x6cc>)
 8007af0:	6353      	str	r3, [r2, #52]	@ 0x34
			hahaha = 13;
 8007af2:	230d      	movs	r3, #13
 8007af4:	61fb      	str	r3, [r7, #28]
		}
		if (mask & ((uint32_t)1 << 14)) {
 8007af6:	697b      	ldr	r3, [r7, #20]
 8007af8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	d00a      	beq.n	8007b16 <bldc_interface_process_packet+0x602>
			values.tachometer_abs = buffer_get_int32(data, &ind);
 8007b00:	f107 030c 	add.w	r3, r7, #12
 8007b04:	4619      	mov	r1, r3
 8007b06:	6878      	ldr	r0, [r7, #4]
 8007b08:	f001 f9ca 	bl	8008ea0 <buffer_get_int32>
 8007b0c:	4603      	mov	r3, r0
 8007b0e:	4a34      	ldr	r2, [pc, #208]	@ (8007be0 <bldc_interface_process_packet+0x6cc>)
 8007b10:	6393      	str	r3, [r2, #56]	@ 0x38
			hahaha = 14;
 8007b12:	230e      	movs	r3, #14
 8007b14:	61fb      	str	r3, [r7, #28]
		}
		if (mask & ((uint32_t)1 << 15)) {
 8007b16:	697b      	ldr	r3, [r7, #20]
 8007b18:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d00b      	beq.n	8007b38 <bldc_interface_process_packet+0x624>
			values.fault_code = (mc_fault_code)data[ind++];
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	1c5a      	adds	r2, r3, #1
 8007b24:	60fa      	str	r2, [r7, #12]
 8007b26:	461a      	mov	r2, r3
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	4413      	add	r3, r2
 8007b2c:	781a      	ldrb	r2, [r3, #0]
 8007b2e:	4b2c      	ldr	r3, [pc, #176]	@ (8007be0 <bldc_interface_process_packet+0x6cc>)
 8007b30:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
			hahaha = 15;
 8007b34:	230f      	movs	r3, #15
 8007b36:	61fb      	str	r3, [r7, #28]
		}
		if (mask & ((uint32_t)1 << 16)) {
 8007b38:	697b      	ldr	r3, [r7, #20]
 8007b3a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d00e      	beq.n	8007b60 <bldc_interface_process_packet+0x64c>
			values.pid_pos = buffer_get_float32(data, 1e6, &ind);
 8007b42:	f107 030c 	add.w	r3, r7, #12
 8007b46:	4619      	mov	r1, r3
 8007b48:	ed9f 0a28 	vldr	s0, [pc, #160]	@ 8007bec <bldc_interface_process_packet+0x6d8>
 8007b4c:	6878      	ldr	r0, [r7, #4]
 8007b4e:	f001 fa22 	bl	8008f96 <buffer_get_float32>
 8007b52:	eef0 7a40 	vmov.f32	s15, s0
 8007b56:	4b22      	ldr	r3, [pc, #136]	@ (8007be0 <bldc_interface_process_packet+0x6cc>)
 8007b58:	edc3 7a11 	vstr	s15, [r3, #68]	@ 0x44
			hahaha = 16;
 8007b5c:	2310      	movs	r3, #16
 8007b5e:	61fb      	str	r3, [r7, #28]
		}
		if (mask & ((uint32_t)1 << 17)) {
 8007b60:	697b      	ldr	r3, [r7, #20]
 8007b62:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d00b      	beq.n	8007b82 <bldc_interface_process_packet+0x66e>
			values.vesc_id = data[ind++];
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	1c5a      	adds	r2, r3, #1
 8007b6e:	60fa      	str	r2, [r7, #12]
 8007b70:	461a      	mov	r2, r3
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	4413      	add	r3, r2
 8007b76:	781a      	ldrb	r2, [r3, #0]
 8007b78:	4b19      	ldr	r3, [pc, #100]	@ (8007be0 <bldc_interface_process_packet+0x6cc>)
 8007b7a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
			hahaha = 17;
 8007b7e:	2311      	movs	r3, #17
 8007b80:	61fb      	str	r3, [r7, #28]
		}
		if (mask & ((uint32_t)1 << 18)) {
 8007b82:	697b      	ldr	r3, [r7, #20]
 8007b84:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	d033      	beq.n	8007bf4 <bldc_interface_process_packet+0x6e0>
			values.temp_mos1 = buffer_get_float16(data, 1e1, &ind);
 8007b8c:	f107 030c 	add.w	r3, r7, #12
 8007b90:	4619      	mov	r1, r3
 8007b92:	eeb2 0a04 	vmov.f32	s0, #36	@ 0x41200000  10.0
 8007b96:	6878      	ldr	r0, [r7, #4]
 8007b98:	f001 f9e2 	bl	8008f60 <buffer_get_float16>
 8007b9c:	eef0 7a40 	vmov.f32	s15, s0
 8007ba0:	4b0f      	ldr	r3, [pc, #60]	@ (8007be0 <bldc_interface_process_packet+0x6cc>)
 8007ba2:	edc3 7a13 	vstr	s15, [r3, #76]	@ 0x4c
			values.temp_mos2 = buffer_get_float16(data, 1e1, &ind);
 8007ba6:	f107 030c 	add.w	r3, r7, #12
 8007baa:	4619      	mov	r1, r3
 8007bac:	eeb2 0a04 	vmov.f32	s0, #36	@ 0x41200000  10.0
 8007bb0:	6878      	ldr	r0, [r7, #4]
 8007bb2:	f001 f9d5 	bl	8008f60 <buffer_get_float16>
 8007bb6:	eef0 7a40 	vmov.f32	s15, s0
 8007bba:	4b09      	ldr	r3, [pc, #36]	@ (8007be0 <bldc_interface_process_packet+0x6cc>)
 8007bbc:	edc3 7a14 	vstr	s15, [r3, #80]	@ 0x50
			values.temp_mos3 = buffer_get_float16(data, 1e1, &ind);
 8007bc0:	f107 030c 	add.w	r3, r7, #12
 8007bc4:	4619      	mov	r1, r3
 8007bc6:	eeb2 0a04 	vmov.f32	s0, #36	@ 0x41200000  10.0
 8007bca:	6878      	ldr	r0, [r7, #4]
 8007bcc:	f001 f9c8 	bl	8008f60 <buffer_get_float16>
 8007bd0:	eef0 7a40 	vmov.f32	s15, s0
 8007bd4:	4b02      	ldr	r3, [pc, #8]	@ (8007be0 <bldc_interface_process_packet+0x6cc>)
 8007bd6:	edc3 7a15 	vstr	s15, [r3, #84]	@ 0x54
			hahaha = 18;
 8007bda:	2312      	movs	r3, #18
 8007bdc:	61fb      	str	r3, [r7, #28]
 8007bde:	e009      	b.n	8007bf4 <bldc_interface_process_packet+0x6e0>
 8007be0:	2000050c 	.word	0x2000050c
 8007be4:	42c80000 	.word	0x42c80000
 8007be8:	461c4000 	.word	0x461c4000
 8007bec:	49742400 	.word	0x49742400
 8007bf0:	447a0000 	.word	0x447a0000
		}
		if (mask & ((uint32_t)1 << 19)) {
 8007bf4:	697b      	ldr	r3, [r7, #20]
 8007bf6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	d00e      	beq.n	8007c1c <bldc_interface_process_packet+0x708>
			values.vd = buffer_get_float32(data, 1e3, &ind);
 8007bfe:	f107 030c 	add.w	r3, r7, #12
 8007c02:	4619      	mov	r1, r3
 8007c04:	ed1f 0a06 	vldr	s0, [pc, #-24]	@ 8007bf0 <bldc_interface_process_packet+0x6dc>
 8007c08:	6878      	ldr	r0, [r7, #4]
 8007c0a:	f001 f9c4 	bl	8008f96 <buffer_get_float32>
 8007c0e:	eef0 7a40 	vmov.f32	s15, s0
 8007c12:	4b30      	ldr	r3, [pc, #192]	@ (8007cd4 <bldc_interface_process_packet+0x7c0>)
 8007c14:	edc3 7a16 	vstr	s15, [r3, #88]	@ 0x58
			hahaha = 19;
 8007c18:	2313      	movs	r3, #19
 8007c1a:	61fb      	str	r3, [r7, #28]
		}
		if (mask & ((uint32_t)1 << 20)) {
 8007c1c:	697b      	ldr	r3, [r7, #20]
 8007c1e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	d00e      	beq.n	8007c44 <bldc_interface_process_packet+0x730>
			values.vq = buffer_get_float32(data, 1e3, &ind);
 8007c26:	f107 030c 	add.w	r3, r7, #12
 8007c2a:	4619      	mov	r1, r3
 8007c2c:	ed9f 0a2a 	vldr	s0, [pc, #168]	@ 8007cd8 <bldc_interface_process_packet+0x7c4>
 8007c30:	6878      	ldr	r0, [r7, #4]
 8007c32:	f001 f9b0 	bl	8008f96 <buffer_get_float32>
 8007c36:	eef0 7a40 	vmov.f32	s15, s0
 8007c3a:	4b26      	ldr	r3, [pc, #152]	@ (8007cd4 <bldc_interface_process_packet+0x7c0>)
 8007c3c:	edc3 7a17 	vstr	s15, [r3, #92]	@ 0x5c
			hahaha = 20;
 8007c40:	2314      	movs	r3, #20
 8007c42:	61fb      	str	r3, [r7, #28]
		}

		rx_value_buf = values;
 8007c44:	4a25      	ldr	r2, [pc, #148]	@ (8007cdc <bldc_interface_process_packet+0x7c8>)
 8007c46:	4b23      	ldr	r3, [pc, #140]	@ (8007cd4 <bldc_interface_process_packet+0x7c0>)
 8007c48:	4610      	mov	r0, r2
 8007c4a:	4619      	mov	r1, r3
 8007c4c:	2360      	movs	r3, #96	@ 0x60
 8007c4e:	461a      	mov	r2, r3
 8007c50:	f016 f859 	bl	801dd06 <memcpy>

		if(rx_value_selective_print){
 8007c54:	4b22      	ldr	r3, [pc, #136]	@ (8007ce0 <bldc_interface_process_packet+0x7cc>)
 8007c56:	781b      	ldrb	r3, [r3, #0]
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	d008      	beq.n	8007c6e <bldc_interface_process_packet+0x75a>
			if (rx_value_selective_func) {
 8007c5c:	4b21      	ldr	r3, [pc, #132]	@ (8007ce4 <bldc_interface_process_packet+0x7d0>)
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	d004      	beq.n	8007c6e <bldc_interface_process_packet+0x75a>
				rx_value_selective_func(hahaha, &values);
 8007c64:	4b1f      	ldr	r3, [pc, #124]	@ (8007ce4 <bldc_interface_process_packet+0x7d0>)
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	491a      	ldr	r1, [pc, #104]	@ (8007cd4 <bldc_interface_process_packet+0x7c0>)
 8007c6a:	69f8      	ldr	r0, [r7, #28]
 8007c6c:	4798      	blx	r3
			}
		}

		rx_value_complete = true;
 8007c6e:	4b1e      	ldr	r3, [pc, #120]	@ (8007ce8 <bldc_interface_process_packet+0x7d4>)
 8007c70:	2201      	movs	r2, #1
 8007c72:	701a      	strb	r2, [r3, #0]
		break;
 8007c74:	f001 b8a5 	b.w	8008dc2 <bldc_interface_process_packet+0x18ae>

	case COMM_PRINT:
		if (rx_printf_func) {
 8007c78:	4b1c      	ldr	r3, [pc, #112]	@ (8007cec <bldc_interface_process_packet+0x7d8>)
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	f001 808d 	beq.w	8008d9c <bldc_interface_process_packet+0x1888>
			data[len] = '\0';
 8007c82:	687a      	ldr	r2, [r7, #4]
 8007c84:	683b      	ldr	r3, [r7, #0]
 8007c86:	4413      	add	r3, r2
 8007c88:	2200      	movs	r2, #0
 8007c8a:	701a      	strb	r2, [r3, #0]
			rx_printf_func((char*)data);
 8007c8c:	4b17      	ldr	r3, [pc, #92]	@ (8007cec <bldc_interface_process_packet+0x7d8>)
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	6878      	ldr	r0, [r7, #4]
 8007c92:	4798      	blx	r3
		}
		break;
 8007c94:	f001 b882 	b.w	8008d9c <bldc_interface_process_packet+0x1888>
	case COMM_SAMPLE_PRINT:
		// TODO
		break;

	case COMM_ROTOR_POSITION:
		ind = 0;
 8007c98:	2300      	movs	r3, #0
 8007c9a:	60fb      	str	r3, [r7, #12]
		rotor_pos = buffer_get_float32(data, 100000.0, &ind);
 8007c9c:	f107 030c 	add.w	r3, r7, #12
 8007ca0:	4619      	mov	r1, r3
 8007ca2:	ed9f 0a13 	vldr	s0, [pc, #76]	@ 8007cf0 <bldc_interface_process_packet+0x7dc>
 8007ca6:	6878      	ldr	r0, [r7, #4]
 8007ca8:	f001 f975 	bl	8008f96 <buffer_get_float32>
 8007cac:	eef0 7a40 	vmov.f32	s15, s0
 8007cb0:	4b10      	ldr	r3, [pc, #64]	@ (8007cf4 <bldc_interface_process_packet+0x7e0>)
 8007cb2:	edc3 7a00 	vstr	s15, [r3]

		if (rx_rotor_pos_func) {
 8007cb6:	4b10      	ldr	r3, [pc, #64]	@ (8007cf8 <bldc_interface_process_packet+0x7e4>)
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	f001 8070 	beq.w	8008da0 <bldc_interface_process_packet+0x188c>
			rx_rotor_pos_func(rotor_pos);
 8007cc0:	4b0d      	ldr	r3, [pc, #52]	@ (8007cf8 <bldc_interface_process_packet+0x7e4>)
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	4a0b      	ldr	r2, [pc, #44]	@ (8007cf4 <bldc_interface_process_packet+0x7e0>)
 8007cc6:	edd2 7a00 	vldr	s15, [r2]
 8007cca:	eeb0 0a67 	vmov.f32	s0, s15
 8007cce:	4798      	blx	r3
		}
		break;
 8007cd0:	f001 b866 	b.w	8008da0 <bldc_interface_process_packet+0x188c>
 8007cd4:	2000050c 	.word	0x2000050c
 8007cd8:	447a0000 	.word	0x447a0000
 8007cdc:	20008c54 	.word	0x20008c54
 8007ce0:	20009eb4 	.word	0x20009eb4
 8007ce4:	200007fc 	.word	0x200007fc
 8007ce8:	20009c5c 	.word	0x20009c5c
 8007cec:	20000800 	.word	0x20000800
 8007cf0:	47c35000 	.word	0x47c35000
 8007cf4:	20000574 	.word	0x20000574
 8007cf8:	20000804 	.word	0x20000804
		// TODO
		break;

	case COMM_GET_MCCONF:
	case COMM_GET_MCCONF_DEFAULT:
		ind = 0;
 8007cfc:	2300      	movs	r3, #0
 8007cfe:	60fb      	str	r3, [r7, #12]

		mcconf.signature = buffer_get_uint32(data, &ind);
 8007d00:	f107 030c 	add.w	r3, r7, #12
 8007d04:	4619      	mov	r1, r3
 8007d06:	6878      	ldr	r0, [r7, #4]
 8007d08:	f001 f8fa 	bl	8008f00 <buffer_get_uint32>
 8007d0c:	4603      	mov	r3, r0
 8007d0e:	4ac5      	ldr	r2, [pc, #788]	@ (8008024 <bldc_interface_process_packet+0xb10>)
 8007d10:	6013      	str	r3, [r2, #0]

		mcconf.pwm_mode = data[ind++];
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	1c5a      	adds	r2, r3, #1
 8007d16:	60fa      	str	r2, [r7, #12]
 8007d18:	461a      	mov	r2, r3
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	4413      	add	r3, r2
 8007d1e:	781a      	ldrb	r2, [r3, #0]
 8007d20:	4bc0      	ldr	r3, [pc, #768]	@ (8008024 <bldc_interface_process_packet+0xb10>)
 8007d22:	711a      	strb	r2, [r3, #4]
		mcconf.comm_mode = data[ind++];
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	1c5a      	adds	r2, r3, #1
 8007d28:	60fa      	str	r2, [r7, #12]
 8007d2a:	461a      	mov	r2, r3
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	4413      	add	r3, r2
 8007d30:	781a      	ldrb	r2, [r3, #0]
 8007d32:	4bbc      	ldr	r3, [pc, #752]	@ (8008024 <bldc_interface_process_packet+0xb10>)
 8007d34:	715a      	strb	r2, [r3, #5]
		mcconf.motor_type = data[ind++];
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	1c5a      	adds	r2, r3, #1
 8007d3a:	60fa      	str	r2, [r7, #12]
 8007d3c:	461a      	mov	r2, r3
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	4413      	add	r3, r2
 8007d42:	781a      	ldrb	r2, [r3, #0]
 8007d44:	4bb7      	ldr	r3, [pc, #732]	@ (8008024 <bldc_interface_process_packet+0xb10>)
 8007d46:	719a      	strb	r2, [r3, #6]
		mcconf.sensor_mode = data[ind++];
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	1c5a      	adds	r2, r3, #1
 8007d4c:	60fa      	str	r2, [r7, #12]
 8007d4e:	461a      	mov	r2, r3
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	4413      	add	r3, r2
 8007d54:	781a      	ldrb	r2, [r3, #0]
 8007d56:	4bb3      	ldr	r3, [pc, #716]	@ (8008024 <bldc_interface_process_packet+0xb10>)
 8007d58:	71da      	strb	r2, [r3, #7]

		mcconf.l_current_max = buffer_get_float32_auto(data, &ind);
 8007d5a:	f107 030c 	add.w	r3, r7, #12
 8007d5e:	4619      	mov	r1, r3
 8007d60:	6878      	ldr	r0, [r7, #4]
 8007d62:	f001 f933 	bl	8008fcc <buffer_get_float32_auto>
 8007d66:	eef0 7a40 	vmov.f32	s15, s0
 8007d6a:	4bae      	ldr	r3, [pc, #696]	@ (8008024 <bldc_interface_process_packet+0xb10>)
 8007d6c:	edc3 7a02 	vstr	s15, [r3, #8]
		mcconf.l_current_min = buffer_get_float32_auto(data, &ind);
 8007d70:	f107 030c 	add.w	r3, r7, #12
 8007d74:	4619      	mov	r1, r3
 8007d76:	6878      	ldr	r0, [r7, #4]
 8007d78:	f001 f928 	bl	8008fcc <buffer_get_float32_auto>
 8007d7c:	eef0 7a40 	vmov.f32	s15, s0
 8007d80:	4ba8      	ldr	r3, [pc, #672]	@ (8008024 <bldc_interface_process_packet+0xb10>)
 8007d82:	edc3 7a03 	vstr	s15, [r3, #12]
		mcconf.l_in_current_max = buffer_get_float32_auto(data, &ind);
 8007d86:	f107 030c 	add.w	r3, r7, #12
 8007d8a:	4619      	mov	r1, r3
 8007d8c:	6878      	ldr	r0, [r7, #4]
 8007d8e:	f001 f91d 	bl	8008fcc <buffer_get_float32_auto>
 8007d92:	eef0 7a40 	vmov.f32	s15, s0
 8007d96:	4ba3      	ldr	r3, [pc, #652]	@ (8008024 <bldc_interface_process_packet+0xb10>)
 8007d98:	edc3 7a04 	vstr	s15, [r3, #16]
		mcconf.l_in_current_min = buffer_get_float32_auto(data, &ind);
 8007d9c:	f107 030c 	add.w	r3, r7, #12
 8007da0:	4619      	mov	r1, r3
 8007da2:	6878      	ldr	r0, [r7, #4]
 8007da4:	f001 f912 	bl	8008fcc <buffer_get_float32_auto>
 8007da8:	eef0 7a40 	vmov.f32	s15, s0
 8007dac:	4b9d      	ldr	r3, [pc, #628]	@ (8008024 <bldc_interface_process_packet+0xb10>)
 8007dae:	edc3 7a05 	vstr	s15, [r3, #20]
		mcconf.l_abs_current_max = buffer_get_float32_auto(data, &ind);
 8007db2:	f107 030c 	add.w	r3, r7, #12
 8007db6:	4619      	mov	r1, r3
 8007db8:	6878      	ldr	r0, [r7, #4]
 8007dba:	f001 f907 	bl	8008fcc <buffer_get_float32_auto>
 8007dbe:	eef0 7a40 	vmov.f32	s15, s0
 8007dc2:	4b98      	ldr	r3, [pc, #608]	@ (8008024 <bldc_interface_process_packet+0xb10>)
 8007dc4:	edc3 7a06 	vstr	s15, [r3, #24]
		mcconf.l_min_erpm = buffer_get_float32_auto(data, &ind);
 8007dc8:	f107 030c 	add.w	r3, r7, #12
 8007dcc:	4619      	mov	r1, r3
 8007dce:	6878      	ldr	r0, [r7, #4]
 8007dd0:	f001 f8fc 	bl	8008fcc <buffer_get_float32_auto>
 8007dd4:	eef0 7a40 	vmov.f32	s15, s0
 8007dd8:	4b92      	ldr	r3, [pc, #584]	@ (8008024 <bldc_interface_process_packet+0xb10>)
 8007dda:	edc3 7a07 	vstr	s15, [r3, #28]
		mcconf.l_max_erpm = buffer_get_float32_auto(data, &ind);
 8007dde:	f107 030c 	add.w	r3, r7, #12
 8007de2:	4619      	mov	r1, r3
 8007de4:	6878      	ldr	r0, [r7, #4]
 8007de6:	f001 f8f1 	bl	8008fcc <buffer_get_float32_auto>
 8007dea:	eef0 7a40 	vmov.f32	s15, s0
 8007dee:	4b8d      	ldr	r3, [pc, #564]	@ (8008024 <bldc_interface_process_packet+0xb10>)
 8007df0:	edc3 7a08 	vstr	s15, [r3, #32]
		mcconf.l_erpm_start = buffer_get_float32_auto(data, &ind);
 8007df4:	f107 030c 	add.w	r3, r7, #12
 8007df8:	4619      	mov	r1, r3
 8007dfa:	6878      	ldr	r0, [r7, #4]
 8007dfc:	f001 f8e6 	bl	8008fcc <buffer_get_float32_auto>
 8007e00:	eef0 7a40 	vmov.f32	s15, s0
 8007e04:	4b87      	ldr	r3, [pc, #540]	@ (8008024 <bldc_interface_process_packet+0xb10>)
 8007e06:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
		mcconf.l_max_erpm_fbrake = buffer_get_float32_auto(data, &ind);
 8007e0a:	f107 030c 	add.w	r3, r7, #12
 8007e0e:	4619      	mov	r1, r3
 8007e10:	6878      	ldr	r0, [r7, #4]
 8007e12:	f001 f8db 	bl	8008fcc <buffer_get_float32_auto>
 8007e16:	eef0 7a40 	vmov.f32	s15, s0
 8007e1a:	4b82      	ldr	r3, [pc, #520]	@ (8008024 <bldc_interface_process_packet+0xb10>)
 8007e1c:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
		mcconf.l_max_erpm_fbrake_cc = buffer_get_float32_auto(data, &ind);
 8007e20:	f107 030c 	add.w	r3, r7, #12
 8007e24:	4619      	mov	r1, r3
 8007e26:	6878      	ldr	r0, [r7, #4]
 8007e28:	f001 f8d0 	bl	8008fcc <buffer_get_float32_auto>
 8007e2c:	eef0 7a40 	vmov.f32	s15, s0
 8007e30:	4b7c      	ldr	r3, [pc, #496]	@ (8008024 <bldc_interface_process_packet+0xb10>)
 8007e32:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
		mcconf.l_min_vin = buffer_get_float32_auto(data, &ind);
 8007e36:	f107 030c 	add.w	r3, r7, #12
 8007e3a:	4619      	mov	r1, r3
 8007e3c:	6878      	ldr	r0, [r7, #4]
 8007e3e:	f001 f8c5 	bl	8008fcc <buffer_get_float32_auto>
 8007e42:	eef0 7a40 	vmov.f32	s15, s0
 8007e46:	4b77      	ldr	r3, [pc, #476]	@ (8008024 <bldc_interface_process_packet+0xb10>)
 8007e48:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
		mcconf.l_max_vin = buffer_get_float32_auto(data, &ind);
 8007e4c:	f107 030c 	add.w	r3, r7, #12
 8007e50:	4619      	mov	r1, r3
 8007e52:	6878      	ldr	r0, [r7, #4]
 8007e54:	f001 f8ba 	bl	8008fcc <buffer_get_float32_auto>
 8007e58:	eef0 7a40 	vmov.f32	s15, s0
 8007e5c:	4b71      	ldr	r3, [pc, #452]	@ (8008024 <bldc_interface_process_packet+0xb10>)
 8007e5e:	edc3 7a0d 	vstr	s15, [r3, #52]	@ 0x34
		mcconf.l_battery_cut_start = buffer_get_float32_auto(data, &ind);
 8007e62:	f107 030c 	add.w	r3, r7, #12
 8007e66:	4619      	mov	r1, r3
 8007e68:	6878      	ldr	r0, [r7, #4]
 8007e6a:	f001 f8af 	bl	8008fcc <buffer_get_float32_auto>
 8007e6e:	eef0 7a40 	vmov.f32	s15, s0
 8007e72:	4b6c      	ldr	r3, [pc, #432]	@ (8008024 <bldc_interface_process_packet+0xb10>)
 8007e74:	edc3 7a0e 	vstr	s15, [r3, #56]	@ 0x38
		mcconf.l_battery_cut_end = buffer_get_float32_auto(data, &ind);
 8007e78:	f107 030c 	add.w	r3, r7, #12
 8007e7c:	4619      	mov	r1, r3
 8007e7e:	6878      	ldr	r0, [r7, #4]
 8007e80:	f001 f8a4 	bl	8008fcc <buffer_get_float32_auto>
 8007e84:	eef0 7a40 	vmov.f32	s15, s0
 8007e88:	4b66      	ldr	r3, [pc, #408]	@ (8008024 <bldc_interface_process_packet+0xb10>)
 8007e8a:	edc3 7a0f 	vstr	s15, [r3, #60]	@ 0x3c
		mcconf.l_slow_abs_current = data[ind++];
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	1c5a      	adds	r2, r3, #1
 8007e92:	60fa      	str	r2, [r7, #12]
 8007e94:	461a      	mov	r2, r3
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	4413      	add	r3, r2
 8007e9a:	781b      	ldrb	r3, [r3, #0]
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	bf14      	ite	ne
 8007ea0:	2301      	movne	r3, #1
 8007ea2:	2300      	moveq	r3, #0
 8007ea4:	b2da      	uxtb	r2, r3
 8007ea6:	4b5f      	ldr	r3, [pc, #380]	@ (8008024 <bldc_interface_process_packet+0xb10>)
 8007ea8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
		mcconf.l_temp_fet_start = buffer_get_float32_auto(data, &ind);
 8007eac:	f107 030c 	add.w	r3, r7, #12
 8007eb0:	4619      	mov	r1, r3
 8007eb2:	6878      	ldr	r0, [r7, #4]
 8007eb4:	f001 f88a 	bl	8008fcc <buffer_get_float32_auto>
 8007eb8:	eef0 7a40 	vmov.f32	s15, s0
 8007ebc:	4b59      	ldr	r3, [pc, #356]	@ (8008024 <bldc_interface_process_packet+0xb10>)
 8007ebe:	edc3 7a11 	vstr	s15, [r3, #68]	@ 0x44
		mcconf.l_temp_fet_end = buffer_get_float32_auto(data, &ind);
 8007ec2:	f107 030c 	add.w	r3, r7, #12
 8007ec6:	4619      	mov	r1, r3
 8007ec8:	6878      	ldr	r0, [r7, #4]
 8007eca:	f001 f87f 	bl	8008fcc <buffer_get_float32_auto>
 8007ece:	eef0 7a40 	vmov.f32	s15, s0
 8007ed2:	4b54      	ldr	r3, [pc, #336]	@ (8008024 <bldc_interface_process_packet+0xb10>)
 8007ed4:	edc3 7a12 	vstr	s15, [r3, #72]	@ 0x48
		mcconf.l_temp_motor_start = buffer_get_float32_auto(data, &ind);
 8007ed8:	f107 030c 	add.w	r3, r7, #12
 8007edc:	4619      	mov	r1, r3
 8007ede:	6878      	ldr	r0, [r7, #4]
 8007ee0:	f001 f874 	bl	8008fcc <buffer_get_float32_auto>
 8007ee4:	eef0 7a40 	vmov.f32	s15, s0
 8007ee8:	4b4e      	ldr	r3, [pc, #312]	@ (8008024 <bldc_interface_process_packet+0xb10>)
 8007eea:	edc3 7a13 	vstr	s15, [r3, #76]	@ 0x4c
		mcconf.l_temp_motor_end = buffer_get_float32_auto(data, &ind);
 8007eee:	f107 030c 	add.w	r3, r7, #12
 8007ef2:	4619      	mov	r1, r3
 8007ef4:	6878      	ldr	r0, [r7, #4]
 8007ef6:	f001 f869 	bl	8008fcc <buffer_get_float32_auto>
 8007efa:	eef0 7a40 	vmov.f32	s15, s0
 8007efe:	4b49      	ldr	r3, [pc, #292]	@ (8008024 <bldc_interface_process_packet+0xb10>)
 8007f00:	edc3 7a14 	vstr	s15, [r3, #80]	@ 0x50
		mcconf.l_temp_accel_dec = buffer_get_float32_auto(data, &ind);
 8007f04:	f107 030c 	add.w	r3, r7, #12
 8007f08:	4619      	mov	r1, r3
 8007f0a:	6878      	ldr	r0, [r7, #4]
 8007f0c:	f001 f85e 	bl	8008fcc <buffer_get_float32_auto>
 8007f10:	eef0 7a40 	vmov.f32	s15, s0
 8007f14:	4b43      	ldr	r3, [pc, #268]	@ (8008024 <bldc_interface_process_packet+0xb10>)
 8007f16:	edc3 7a15 	vstr	s15, [r3, #84]	@ 0x54
		mcconf.l_min_duty = buffer_get_float32_auto(data, &ind);
 8007f1a:	f107 030c 	add.w	r3, r7, #12
 8007f1e:	4619      	mov	r1, r3
 8007f20:	6878      	ldr	r0, [r7, #4]
 8007f22:	f001 f853 	bl	8008fcc <buffer_get_float32_auto>
 8007f26:	eef0 7a40 	vmov.f32	s15, s0
 8007f2a:	4b3e      	ldr	r3, [pc, #248]	@ (8008024 <bldc_interface_process_packet+0xb10>)
 8007f2c:	edc3 7a16 	vstr	s15, [r3, #88]	@ 0x58
		mcconf.l_max_duty = buffer_get_float32_auto(data, &ind);
 8007f30:	f107 030c 	add.w	r3, r7, #12
 8007f34:	4619      	mov	r1, r3
 8007f36:	6878      	ldr	r0, [r7, #4]
 8007f38:	f001 f848 	bl	8008fcc <buffer_get_float32_auto>
 8007f3c:	eef0 7a40 	vmov.f32	s15, s0
 8007f40:	4b38      	ldr	r3, [pc, #224]	@ (8008024 <bldc_interface_process_packet+0xb10>)
 8007f42:	edc3 7a17 	vstr	s15, [r3, #92]	@ 0x5c
		mcconf.l_watt_max = buffer_get_float32_auto(data, &ind);
 8007f46:	f107 030c 	add.w	r3, r7, #12
 8007f4a:	4619      	mov	r1, r3
 8007f4c:	6878      	ldr	r0, [r7, #4]
 8007f4e:	f001 f83d 	bl	8008fcc <buffer_get_float32_auto>
 8007f52:	eef0 7a40 	vmov.f32	s15, s0
 8007f56:	4b33      	ldr	r3, [pc, #204]	@ (8008024 <bldc_interface_process_packet+0xb10>)
 8007f58:	edc3 7a18 	vstr	s15, [r3, #96]	@ 0x60
		mcconf.l_watt_min = buffer_get_float32_auto(data, &ind);
 8007f5c:	f107 030c 	add.w	r3, r7, #12
 8007f60:	4619      	mov	r1, r3
 8007f62:	6878      	ldr	r0, [r7, #4]
 8007f64:	f001 f832 	bl	8008fcc <buffer_get_float32_auto>
 8007f68:	eef0 7a40 	vmov.f32	s15, s0
 8007f6c:	4b2d      	ldr	r3, [pc, #180]	@ (8008024 <bldc_interface_process_packet+0xb10>)
 8007f6e:	edc3 7a19 	vstr	s15, [r3, #100]	@ 0x64

		mcconf.lo_current_max = mcconf.l_current_max;
 8007f72:	4b2c      	ldr	r3, [pc, #176]	@ (8008024 <bldc_interface_process_packet+0xb10>)
 8007f74:	689b      	ldr	r3, [r3, #8]
 8007f76:	4a2b      	ldr	r2, [pc, #172]	@ (8008024 <bldc_interface_process_packet+0xb10>)
 8007f78:	6693      	str	r3, [r2, #104]	@ 0x68
		mcconf.lo_current_min = mcconf.l_current_min;
 8007f7a:	4b2a      	ldr	r3, [pc, #168]	@ (8008024 <bldc_interface_process_packet+0xb10>)
 8007f7c:	68db      	ldr	r3, [r3, #12]
 8007f7e:	4a29      	ldr	r2, [pc, #164]	@ (8008024 <bldc_interface_process_packet+0xb10>)
 8007f80:	66d3      	str	r3, [r2, #108]	@ 0x6c
		mcconf.lo_in_current_max = mcconf.l_in_current_max;
 8007f82:	4b28      	ldr	r3, [pc, #160]	@ (8008024 <bldc_interface_process_packet+0xb10>)
 8007f84:	691b      	ldr	r3, [r3, #16]
 8007f86:	4a27      	ldr	r2, [pc, #156]	@ (8008024 <bldc_interface_process_packet+0xb10>)
 8007f88:	6713      	str	r3, [r2, #112]	@ 0x70
		mcconf.lo_in_current_min = mcconf.l_in_current_min;
 8007f8a:	4b26      	ldr	r3, [pc, #152]	@ (8008024 <bldc_interface_process_packet+0xb10>)
 8007f8c:	695b      	ldr	r3, [r3, #20]
 8007f8e:	4a25      	ldr	r2, [pc, #148]	@ (8008024 <bldc_interface_process_packet+0xb10>)
 8007f90:	6753      	str	r3, [r2, #116]	@ 0x74
		mcconf.lo_current_motor_max_now = mcconf.l_current_max;
 8007f92:	4b24      	ldr	r3, [pc, #144]	@ (8008024 <bldc_interface_process_packet+0xb10>)
 8007f94:	689b      	ldr	r3, [r3, #8]
 8007f96:	4a23      	ldr	r2, [pc, #140]	@ (8008024 <bldc_interface_process_packet+0xb10>)
 8007f98:	6793      	str	r3, [r2, #120]	@ 0x78
		mcconf.lo_current_motor_min_now = mcconf.l_current_min;
 8007f9a:	4b22      	ldr	r3, [pc, #136]	@ (8008024 <bldc_interface_process_packet+0xb10>)
 8007f9c:	68db      	ldr	r3, [r3, #12]
 8007f9e:	4a21      	ldr	r2, [pc, #132]	@ (8008024 <bldc_interface_process_packet+0xb10>)
 8007fa0:	67d3      	str	r3, [r2, #124]	@ 0x7c

		mcconf.sl_min_erpm = buffer_get_float32_auto(data, &ind);
 8007fa2:	f107 030c 	add.w	r3, r7, #12
 8007fa6:	4619      	mov	r1, r3
 8007fa8:	6878      	ldr	r0, [r7, #4]
 8007faa:	f001 f80f 	bl	8008fcc <buffer_get_float32_auto>
 8007fae:	eef0 7a40 	vmov.f32	s15, s0
 8007fb2:	4b1c      	ldr	r3, [pc, #112]	@ (8008024 <bldc_interface_process_packet+0xb10>)
 8007fb4:	edc3 7a20 	vstr	s15, [r3, #128]	@ 0x80
		mcconf.sl_min_erpm_cycle_int_limit = buffer_get_float32_auto(data, &ind);
 8007fb8:	f107 030c 	add.w	r3, r7, #12
 8007fbc:	4619      	mov	r1, r3
 8007fbe:	6878      	ldr	r0, [r7, #4]
 8007fc0:	f001 f804 	bl	8008fcc <buffer_get_float32_auto>
 8007fc4:	eef0 7a40 	vmov.f32	s15, s0
 8007fc8:	4b16      	ldr	r3, [pc, #88]	@ (8008024 <bldc_interface_process_packet+0xb10>)
 8007fca:	edc3 7a21 	vstr	s15, [r3, #132]	@ 0x84
		mcconf.sl_max_fullbreak_current_dir_change = buffer_get_float32_auto(data, &ind);
 8007fce:	f107 030c 	add.w	r3, r7, #12
 8007fd2:	4619      	mov	r1, r3
 8007fd4:	6878      	ldr	r0, [r7, #4]
 8007fd6:	f000 fff9 	bl	8008fcc <buffer_get_float32_auto>
 8007fda:	eef0 7a40 	vmov.f32	s15, s0
 8007fde:	4b11      	ldr	r3, [pc, #68]	@ (8008024 <bldc_interface_process_packet+0xb10>)
 8007fe0:	edc3 7a22 	vstr	s15, [r3, #136]	@ 0x88
		mcconf.sl_cycle_int_limit = buffer_get_float32_auto(data, &ind);
 8007fe4:	f107 030c 	add.w	r3, r7, #12
 8007fe8:	4619      	mov	r1, r3
 8007fea:	6878      	ldr	r0, [r7, #4]
 8007fec:	f000 ffee 	bl	8008fcc <buffer_get_float32_auto>
 8007ff0:	eef0 7a40 	vmov.f32	s15, s0
 8007ff4:	4b0b      	ldr	r3, [pc, #44]	@ (8008024 <bldc_interface_process_packet+0xb10>)
 8007ff6:	edc3 7a23 	vstr	s15, [r3, #140]	@ 0x8c
		mcconf.sl_phase_advance_at_br = buffer_get_float32_auto(data, &ind);
 8007ffa:	f107 030c 	add.w	r3, r7, #12
 8007ffe:	4619      	mov	r1, r3
 8008000:	6878      	ldr	r0, [r7, #4]
 8008002:	f000 ffe3 	bl	8008fcc <buffer_get_float32_auto>
 8008006:	eef0 7a40 	vmov.f32	s15, s0
 800800a:	4b06      	ldr	r3, [pc, #24]	@ (8008024 <bldc_interface_process_packet+0xb10>)
 800800c:	edc3 7a24 	vstr	s15, [r3, #144]	@ 0x90
		mcconf.sl_cycle_int_rpm_br = buffer_get_float32_auto(data, &ind);
 8008010:	f107 030c 	add.w	r3, r7, #12
 8008014:	4619      	mov	r1, r3
 8008016:	6878      	ldr	r0, [r7, #4]
 8008018:	f000 ffd8 	bl	8008fcc <buffer_get_float32_auto>
 800801c:	eef0 7a40 	vmov.f32	s15, s0
 8008020:	e002      	b.n	8008028 <bldc_interface_process_packet+0xb14>
 8008022:	bf00      	nop
 8008024:	20000578 	.word	0x20000578
 8008028:	4bc7      	ldr	r3, [pc, #796]	@ (8008348 <bldc_interface_process_packet+0xe34>)
 800802a:	edc3 7a25 	vstr	s15, [r3, #148]	@ 0x94
		mcconf.sl_bemf_coupling_k = buffer_get_float32_auto(data, &ind);
 800802e:	f107 030c 	add.w	r3, r7, #12
 8008032:	4619      	mov	r1, r3
 8008034:	6878      	ldr	r0, [r7, #4]
 8008036:	f000 ffc9 	bl	8008fcc <buffer_get_float32_auto>
 800803a:	eef0 7a40 	vmov.f32	s15, s0
 800803e:	4bc2      	ldr	r3, [pc, #776]	@ (8008348 <bldc_interface_process_packet+0xe34>)
 8008040:	edc3 7a26 	vstr	s15, [r3, #152]	@ 0x98

		memcpy(mcconf.hall_table, data + ind, 8);
 8008044:	68fb      	ldr	r3, [r7, #12]
 8008046:	461a      	mov	r2, r3
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	441a      	add	r2, r3
 800804c:	4bbe      	ldr	r3, [pc, #760]	@ (8008348 <bldc_interface_process_packet+0xe34>)
 800804e:	339c      	adds	r3, #156	@ 0x9c
 8008050:	6810      	ldr	r0, [r2, #0]
 8008052:	6851      	ldr	r1, [r2, #4]
 8008054:	c303      	stmia	r3!, {r0, r1}
		ind += 8;
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	3308      	adds	r3, #8
 800805a:	60fb      	str	r3, [r7, #12]
		mcconf.hall_sl_erpm = buffer_get_float32_auto(data, &ind);
 800805c:	f107 030c 	add.w	r3, r7, #12
 8008060:	4619      	mov	r1, r3
 8008062:	6878      	ldr	r0, [r7, #4]
 8008064:	f000 ffb2 	bl	8008fcc <buffer_get_float32_auto>
 8008068:	eef0 7a40 	vmov.f32	s15, s0
 800806c:	4bb6      	ldr	r3, [pc, #728]	@ (8008348 <bldc_interface_process_packet+0xe34>)
 800806e:	edc3 7a29 	vstr	s15, [r3, #164]	@ 0xa4

		mcconf.foc_current_kp = buffer_get_float32_auto(data, &ind);
 8008072:	f107 030c 	add.w	r3, r7, #12
 8008076:	4619      	mov	r1, r3
 8008078:	6878      	ldr	r0, [r7, #4]
 800807a:	f000 ffa7 	bl	8008fcc <buffer_get_float32_auto>
 800807e:	eef0 7a40 	vmov.f32	s15, s0
 8008082:	4bb1      	ldr	r3, [pc, #708]	@ (8008348 <bldc_interface_process_packet+0xe34>)
 8008084:	edc3 7a2a 	vstr	s15, [r3, #168]	@ 0xa8
		mcconf.foc_current_ki = buffer_get_float32_auto(data, &ind);
 8008088:	f107 030c 	add.w	r3, r7, #12
 800808c:	4619      	mov	r1, r3
 800808e:	6878      	ldr	r0, [r7, #4]
 8008090:	f000 ff9c 	bl	8008fcc <buffer_get_float32_auto>
 8008094:	eef0 7a40 	vmov.f32	s15, s0
 8008098:	4bab      	ldr	r3, [pc, #684]	@ (8008348 <bldc_interface_process_packet+0xe34>)
 800809a:	edc3 7a2b 	vstr	s15, [r3, #172]	@ 0xac
		mcconf.foc_f_sw = buffer_get_float32_auto(data, &ind);
 800809e:	f107 030c 	add.w	r3, r7, #12
 80080a2:	4619      	mov	r1, r3
 80080a4:	6878      	ldr	r0, [r7, #4]
 80080a6:	f000 ff91 	bl	8008fcc <buffer_get_float32_auto>
 80080aa:	eef0 7a40 	vmov.f32	s15, s0
 80080ae:	4ba6      	ldr	r3, [pc, #664]	@ (8008348 <bldc_interface_process_packet+0xe34>)
 80080b0:	edc3 7a2c 	vstr	s15, [r3, #176]	@ 0xb0
		mcconf.foc_dt_us = buffer_get_float32_auto(data, &ind);
 80080b4:	f107 030c 	add.w	r3, r7, #12
 80080b8:	4619      	mov	r1, r3
 80080ba:	6878      	ldr	r0, [r7, #4]
 80080bc:	f000 ff86 	bl	8008fcc <buffer_get_float32_auto>
 80080c0:	eef0 7a40 	vmov.f32	s15, s0
 80080c4:	4ba0      	ldr	r3, [pc, #640]	@ (8008348 <bldc_interface_process_packet+0xe34>)
 80080c6:	edc3 7a2d 	vstr	s15, [r3, #180]	@ 0xb4
		mcconf.foc_encoder_inverted = data[ind++];
 80080ca:	68fb      	ldr	r3, [r7, #12]
 80080cc:	1c5a      	adds	r2, r3, #1
 80080ce:	60fa      	str	r2, [r7, #12]
 80080d0:	461a      	mov	r2, r3
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	4413      	add	r3, r2
 80080d6:	781b      	ldrb	r3, [r3, #0]
 80080d8:	2b00      	cmp	r3, #0
 80080da:	bf14      	ite	ne
 80080dc:	2301      	movne	r3, #1
 80080de:	2300      	moveq	r3, #0
 80080e0:	b2da      	uxtb	r2, r3
 80080e2:	4b99      	ldr	r3, [pc, #612]	@ (8008348 <bldc_interface_process_packet+0xe34>)
 80080e4:	f883 20bc 	strb.w	r2, [r3, #188]	@ 0xbc
		mcconf.foc_encoder_offset = buffer_get_float32_auto(data, &ind);
 80080e8:	f107 030c 	add.w	r3, r7, #12
 80080ec:	4619      	mov	r1, r3
 80080ee:	6878      	ldr	r0, [r7, #4]
 80080f0:	f000 ff6c 	bl	8008fcc <buffer_get_float32_auto>
 80080f4:	eef0 7a40 	vmov.f32	s15, s0
 80080f8:	4b93      	ldr	r3, [pc, #588]	@ (8008348 <bldc_interface_process_packet+0xe34>)
 80080fa:	edc3 7a2e 	vstr	s15, [r3, #184]	@ 0xb8
		mcconf.foc_encoder_ratio = buffer_get_float32_auto(data, &ind);
 80080fe:	f107 030c 	add.w	r3, r7, #12
 8008102:	4619      	mov	r1, r3
 8008104:	6878      	ldr	r0, [r7, #4]
 8008106:	f000 ff61 	bl	8008fcc <buffer_get_float32_auto>
 800810a:	eef0 7a40 	vmov.f32	s15, s0
 800810e:	4b8e      	ldr	r3, [pc, #568]	@ (8008348 <bldc_interface_process_packet+0xe34>)
 8008110:	edc3 7a30 	vstr	s15, [r3, #192]	@ 0xc0
		mcconf.foc_sensor_mode = data[ind++];
 8008114:	68fb      	ldr	r3, [r7, #12]
 8008116:	1c5a      	adds	r2, r3, #1
 8008118:	60fa      	str	r2, [r7, #12]
 800811a:	461a      	mov	r2, r3
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	4413      	add	r3, r2
 8008120:	781a      	ldrb	r2, [r3, #0]
 8008122:	4b89      	ldr	r3, [pc, #548]	@ (8008348 <bldc_interface_process_packet+0xe34>)
 8008124:	f883 20fc 	strb.w	r2, [r3, #252]	@ 0xfc
		mcconf.foc_pll_kp = buffer_get_float32_auto(data, &ind);
 8008128:	f107 030c 	add.w	r3, r7, #12
 800812c:	4619      	mov	r1, r3
 800812e:	6878      	ldr	r0, [r7, #4]
 8008130:	f000 ff4c 	bl	8008fcc <buffer_get_float32_auto>
 8008134:	eef0 7a40 	vmov.f32	s15, s0
 8008138:	4b83      	ldr	r3, [pc, #524]	@ (8008348 <bldc_interface_process_packet+0xe34>)
 800813a:	edc3 7a36 	vstr	s15, [r3, #216]	@ 0xd8
		mcconf.foc_pll_ki = buffer_get_float32_auto(data, &ind);
 800813e:	f107 030c 	add.w	r3, r7, #12
 8008142:	4619      	mov	r1, r3
 8008144:	6878      	ldr	r0, [r7, #4]
 8008146:	f000 ff41 	bl	8008fcc <buffer_get_float32_auto>
 800814a:	eef0 7a40 	vmov.f32	s15, s0
 800814e:	4b7e      	ldr	r3, [pc, #504]	@ (8008348 <bldc_interface_process_packet+0xe34>)
 8008150:	edc3 7a37 	vstr	s15, [r3, #220]	@ 0xdc
		mcconf.foc_motor_l = buffer_get_float32_auto(data, &ind);
 8008154:	f107 030c 	add.w	r3, r7, #12
 8008158:	4619      	mov	r1, r3
 800815a:	6878      	ldr	r0, [r7, #4]
 800815c:	f000 ff36 	bl	8008fcc <buffer_get_float32_auto>
 8008160:	eef0 7a40 	vmov.f32	s15, s0
 8008164:	4b78      	ldr	r3, [pc, #480]	@ (8008348 <bldc_interface_process_packet+0xe34>)
 8008166:	edc3 7a31 	vstr	s15, [r3, #196]	@ 0xc4
		mcconf.foc_motor_r = buffer_get_float32_auto(data, &ind);
 800816a:	f107 030c 	add.w	r3, r7, #12
 800816e:	4619      	mov	r1, r3
 8008170:	6878      	ldr	r0, [r7, #4]
 8008172:	f000 ff2b 	bl	8008fcc <buffer_get_float32_auto>
 8008176:	eef0 7a40 	vmov.f32	s15, s0
 800817a:	4b73      	ldr	r3, [pc, #460]	@ (8008348 <bldc_interface_process_packet+0xe34>)
 800817c:	edc3 7a32 	vstr	s15, [r3, #200]	@ 0xc8
		mcconf.foc_motor_flux_linkage = buffer_get_float32_auto(data, &ind);
 8008180:	f107 030c 	add.w	r3, r7, #12
 8008184:	4619      	mov	r1, r3
 8008186:	6878      	ldr	r0, [r7, #4]
 8008188:	f000 ff20 	bl	8008fcc <buffer_get_float32_auto>
 800818c:	eef0 7a40 	vmov.f32	s15, s0
 8008190:	4b6d      	ldr	r3, [pc, #436]	@ (8008348 <bldc_interface_process_packet+0xe34>)
 8008192:	edc3 7a33 	vstr	s15, [r3, #204]	@ 0xcc
		mcconf.foc_observer_gain = buffer_get_float32_auto(data, &ind);
 8008196:	f107 030c 	add.w	r3, r7, #12
 800819a:	4619      	mov	r1, r3
 800819c:	6878      	ldr	r0, [r7, #4]
 800819e:	f000 ff15 	bl	8008fcc <buffer_get_float32_auto>
 80081a2:	eef0 7a40 	vmov.f32	s15, s0
 80081a6:	4b68      	ldr	r3, [pc, #416]	@ (8008348 <bldc_interface_process_packet+0xe34>)
 80081a8:	edc3 7a34 	vstr	s15, [r3, #208]	@ 0xd0
		mcconf.foc_observer_gain_slow = buffer_get_float32_auto(data, &ind);
 80081ac:	f107 030c 	add.w	r3, r7, #12
 80081b0:	4619      	mov	r1, r3
 80081b2:	6878      	ldr	r0, [r7, #4]
 80081b4:	f000 ff0a 	bl	8008fcc <buffer_get_float32_auto>
 80081b8:	eef0 7a40 	vmov.f32	s15, s0
 80081bc:	4b62      	ldr	r3, [pc, #392]	@ (8008348 <bldc_interface_process_packet+0xe34>)
 80081be:	edc3 7a35 	vstr	s15, [r3, #212]	@ 0xd4
		mcconf.foc_duty_dowmramp_kp = buffer_get_float32_auto(data, &ind);
 80081c2:	f107 030c 	add.w	r3, r7, #12
 80081c6:	4619      	mov	r1, r3
 80081c8:	6878      	ldr	r0, [r7, #4]
 80081ca:	f000 feff 	bl	8008fcc <buffer_get_float32_auto>
 80081ce:	eef0 7a40 	vmov.f32	s15, s0
 80081d2:	4b5d      	ldr	r3, [pc, #372]	@ (8008348 <bldc_interface_process_packet+0xe34>)
 80081d4:	edc3 7a38 	vstr	s15, [r3, #224]	@ 0xe0
		mcconf.foc_duty_dowmramp_ki = buffer_get_float32_auto(data, &ind);
 80081d8:	f107 030c 	add.w	r3, r7, #12
 80081dc:	4619      	mov	r1, r3
 80081de:	6878      	ldr	r0, [r7, #4]
 80081e0:	f000 fef4 	bl	8008fcc <buffer_get_float32_auto>
 80081e4:	eef0 7a40 	vmov.f32	s15, s0
 80081e8:	4b57      	ldr	r3, [pc, #348]	@ (8008348 <bldc_interface_process_packet+0xe34>)
 80081ea:	edc3 7a39 	vstr	s15, [r3, #228]	@ 0xe4
		mcconf.foc_openloop_rpm = buffer_get_float32_auto(data, &ind);
 80081ee:	f107 030c 	add.w	r3, r7, #12
 80081f2:	4619      	mov	r1, r3
 80081f4:	6878      	ldr	r0, [r7, #4]
 80081f6:	f000 fee9 	bl	8008fcc <buffer_get_float32_auto>
 80081fa:	eef0 7a40 	vmov.f32	s15, s0
 80081fe:	4b52      	ldr	r3, [pc, #328]	@ (8008348 <bldc_interface_process_packet+0xe34>)
 8008200:	edc3 7a3a 	vstr	s15, [r3, #232]	@ 0xe8
		mcconf.foc_sl_openloop_hyst = buffer_get_float32_auto(data, &ind);
 8008204:	f107 030c 	add.w	r3, r7, #12
 8008208:	4619      	mov	r1, r3
 800820a:	6878      	ldr	r0, [r7, #4]
 800820c:	f000 fede 	bl	8008fcc <buffer_get_float32_auto>
 8008210:	eef0 7a40 	vmov.f32	s15, s0
 8008214:	4b4c      	ldr	r3, [pc, #304]	@ (8008348 <bldc_interface_process_packet+0xe34>)
 8008216:	edc3 7a3b 	vstr	s15, [r3, #236]	@ 0xec
		mcconf.foc_sl_openloop_time = buffer_get_float32_auto(data, &ind);
 800821a:	f107 030c 	add.w	r3, r7, #12
 800821e:	4619      	mov	r1, r3
 8008220:	6878      	ldr	r0, [r7, #4]
 8008222:	f000 fed3 	bl	8008fcc <buffer_get_float32_auto>
 8008226:	eef0 7a40 	vmov.f32	s15, s0
 800822a:	4b47      	ldr	r3, [pc, #284]	@ (8008348 <bldc_interface_process_packet+0xe34>)
 800822c:	edc3 7a3c 	vstr	s15, [r3, #240]	@ 0xf0
		mcconf.foc_sl_d_current_duty = buffer_get_float32_auto(data, &ind);
 8008230:	f107 030c 	add.w	r3, r7, #12
 8008234:	4619      	mov	r1, r3
 8008236:	6878      	ldr	r0, [r7, #4]
 8008238:	f000 fec8 	bl	8008fcc <buffer_get_float32_auto>
 800823c:	eef0 7a40 	vmov.f32	s15, s0
 8008240:	4b41      	ldr	r3, [pc, #260]	@ (8008348 <bldc_interface_process_packet+0xe34>)
 8008242:	edc3 7a3d 	vstr	s15, [r3, #244]	@ 0xf4
		mcconf.foc_sl_d_current_factor = buffer_get_float32_auto(data, &ind);
 8008246:	f107 030c 	add.w	r3, r7, #12
 800824a:	4619      	mov	r1, r3
 800824c:	6878      	ldr	r0, [r7, #4]
 800824e:	f000 febd 	bl	8008fcc <buffer_get_float32_auto>
 8008252:	eef0 7a40 	vmov.f32	s15, s0
 8008256:	4b3c      	ldr	r3, [pc, #240]	@ (8008348 <bldc_interface_process_packet+0xe34>)
 8008258:	edc3 7a3e 	vstr	s15, [r3, #248]	@ 0xf8
		memcpy(mcconf.foc_hall_table, data + ind, 8);
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	461a      	mov	r2, r3
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	441a      	add	r2, r3
 8008264:	4b38      	ldr	r3, [pc, #224]	@ (8008348 <bldc_interface_process_packet+0xe34>)
 8008266:	33fd      	adds	r3, #253	@ 0xfd
 8008268:	6811      	ldr	r1, [r2, #0]
 800826a:	6852      	ldr	r2, [r2, #4]
 800826c:	6019      	str	r1, [r3, #0]
 800826e:	605a      	str	r2, [r3, #4]
		ind += 8;
 8008270:	68fb      	ldr	r3, [r7, #12]
 8008272:	3308      	adds	r3, #8
 8008274:	60fb      	str	r3, [r7, #12]
		mcconf.foc_sl_erpm = buffer_get_float32_auto(data, &ind);
 8008276:	f107 030c 	add.w	r3, r7, #12
 800827a:	4619      	mov	r1, r3
 800827c:	6878      	ldr	r0, [r7, #4]
 800827e:	f000 fea5 	bl	8008fcc <buffer_get_float32_auto>
 8008282:	eef0 7a40 	vmov.f32	s15, s0
 8008286:	4b30      	ldr	r3, [pc, #192]	@ (8008348 <bldc_interface_process_packet+0xe34>)
 8008288:	edc3 7a42 	vstr	s15, [r3, #264]	@ 0x108
		mcconf.foc_sample_v0_v7 = data[ind++];
 800828c:	68fb      	ldr	r3, [r7, #12]
 800828e:	1c5a      	adds	r2, r3, #1
 8008290:	60fa      	str	r2, [r7, #12]
 8008292:	461a      	mov	r2, r3
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	4413      	add	r3, r2
 8008298:	781b      	ldrb	r3, [r3, #0]
 800829a:	2b00      	cmp	r3, #0
 800829c:	bf14      	ite	ne
 800829e:	2301      	movne	r3, #1
 80082a0:	2300      	moveq	r3, #0
 80082a2:	b2da      	uxtb	r2, r3
 80082a4:	4b28      	ldr	r3, [pc, #160]	@ (8008348 <bldc_interface_process_packet+0xe34>)
 80082a6:	f883 210c 	strb.w	r2, [r3, #268]	@ 0x10c
		mcconf.foc_sample_high_current = data[ind++];
 80082aa:	68fb      	ldr	r3, [r7, #12]
 80082ac:	1c5a      	adds	r2, r3, #1
 80082ae:	60fa      	str	r2, [r7, #12]
 80082b0:	461a      	mov	r2, r3
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	4413      	add	r3, r2
 80082b6:	781b      	ldrb	r3, [r3, #0]
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	bf14      	ite	ne
 80082bc:	2301      	movne	r3, #1
 80082be:	2300      	moveq	r3, #0
 80082c0:	b2da      	uxtb	r2, r3
 80082c2:	4b21      	ldr	r3, [pc, #132]	@ (8008348 <bldc_interface_process_packet+0xe34>)
 80082c4:	f883 210d 	strb.w	r2, [r3, #269]	@ 0x10d
		mcconf.foc_sat_comp = buffer_get_float32_auto(data, &ind);
 80082c8:	f107 030c 	add.w	r3, r7, #12
 80082cc:	4619      	mov	r1, r3
 80082ce:	6878      	ldr	r0, [r7, #4]
 80082d0:	f000 fe7c 	bl	8008fcc <buffer_get_float32_auto>
 80082d4:	eef0 7a40 	vmov.f32	s15, s0
 80082d8:	4b1b      	ldr	r3, [pc, #108]	@ (8008348 <bldc_interface_process_packet+0xe34>)
 80082da:	edc3 7a44 	vstr	s15, [r3, #272]	@ 0x110
		mcconf.foc_temp_comp = data[ind++];
 80082de:	68fb      	ldr	r3, [r7, #12]
 80082e0:	1c5a      	adds	r2, r3, #1
 80082e2:	60fa      	str	r2, [r7, #12]
 80082e4:	461a      	mov	r2, r3
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	4413      	add	r3, r2
 80082ea:	781b      	ldrb	r3, [r3, #0]
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	bf14      	ite	ne
 80082f0:	2301      	movne	r3, #1
 80082f2:	2300      	moveq	r3, #0
 80082f4:	b2da      	uxtb	r2, r3
 80082f6:	4b14      	ldr	r3, [pc, #80]	@ (8008348 <bldc_interface_process_packet+0xe34>)
 80082f8:	f883 2114 	strb.w	r2, [r3, #276]	@ 0x114
		mcconf.foc_temp_comp_base_temp = buffer_get_float32_auto(data, &ind);
 80082fc:	f107 030c 	add.w	r3, r7, #12
 8008300:	4619      	mov	r1, r3
 8008302:	6878      	ldr	r0, [r7, #4]
 8008304:	f000 fe62 	bl	8008fcc <buffer_get_float32_auto>
 8008308:	eef0 7a40 	vmov.f32	s15, s0
 800830c:	4b0e      	ldr	r3, [pc, #56]	@ (8008348 <bldc_interface_process_packet+0xe34>)
 800830e:	edc3 7a46 	vstr	s15, [r3, #280]	@ 0x118
		mcconf.foc_current_filter_const = buffer_get_float32_auto(data, &ind);
 8008312:	f107 030c 	add.w	r3, r7, #12
 8008316:	4619      	mov	r1, r3
 8008318:	6878      	ldr	r0, [r7, #4]
 800831a:	f000 fe57 	bl	8008fcc <buffer_get_float32_auto>
 800831e:	eef0 7a40 	vmov.f32	s15, s0
 8008322:	4b09      	ldr	r3, [pc, #36]	@ (8008348 <bldc_interface_process_packet+0xe34>)
 8008324:	edc3 7a47 	vstr	s15, [r3, #284]	@ 0x11c

		mcconf.s_pid_kp = buffer_get_float32_auto(data, &ind);
 8008328:	f107 030c 	add.w	r3, r7, #12
 800832c:	4619      	mov	r1, r3
 800832e:	6878      	ldr	r0, [r7, #4]
 8008330:	f000 fe4c 	bl	8008fcc <buffer_get_float32_auto>
 8008334:	eef0 7a40 	vmov.f32	s15, s0
 8008338:	4b03      	ldr	r3, [pc, #12]	@ (8008348 <bldc_interface_process_packet+0xe34>)
 800833a:	edc3 7a48 	vstr	s15, [r3, #288]	@ 0x120
		mcconf.s_pid_ki = buffer_get_float32_auto(data, &ind);
 800833e:	f107 030c 	add.w	r3, r7, #12
 8008342:	4619      	mov	r1, r3
 8008344:	6878      	ldr	r0, [r7, #4]
 8008346:	e001      	b.n	800834c <bldc_interface_process_packet+0xe38>
 8008348:	20000578 	.word	0x20000578
 800834c:	f000 fe3e 	bl	8008fcc <buffer_get_float32_auto>
 8008350:	eef0 7a40 	vmov.f32	s15, s0
 8008354:	4b96      	ldr	r3, [pc, #600]	@ (80085b0 <bldc_interface_process_packet+0x109c>)
 8008356:	edc3 7a49 	vstr	s15, [r3, #292]	@ 0x124
		mcconf.s_pid_kd = buffer_get_float32_auto(data, &ind);
 800835a:	f107 030c 	add.w	r3, r7, #12
 800835e:	4619      	mov	r1, r3
 8008360:	6878      	ldr	r0, [r7, #4]
 8008362:	f000 fe33 	bl	8008fcc <buffer_get_float32_auto>
 8008366:	eef0 7a40 	vmov.f32	s15, s0
 800836a:	4b91      	ldr	r3, [pc, #580]	@ (80085b0 <bldc_interface_process_packet+0x109c>)
 800836c:	edc3 7a4a 	vstr	s15, [r3, #296]	@ 0x128
		mcconf.s_pid_kd_filter = buffer_get_float32_auto(data, &ind);
 8008370:	f107 030c 	add.w	r3, r7, #12
 8008374:	4619      	mov	r1, r3
 8008376:	6878      	ldr	r0, [r7, #4]
 8008378:	f000 fe28 	bl	8008fcc <buffer_get_float32_auto>
 800837c:	eef0 7a40 	vmov.f32	s15, s0
 8008380:	4b8b      	ldr	r3, [pc, #556]	@ (80085b0 <bldc_interface_process_packet+0x109c>)
 8008382:	edc3 7a4b 	vstr	s15, [r3, #300]	@ 0x12c
		mcconf.s_pid_min_erpm = buffer_get_float32_auto(data, &ind);
 8008386:	f107 030c 	add.w	r3, r7, #12
 800838a:	4619      	mov	r1, r3
 800838c:	6878      	ldr	r0, [r7, #4]
 800838e:	f000 fe1d 	bl	8008fcc <buffer_get_float32_auto>
 8008392:	eef0 7a40 	vmov.f32	s15, s0
 8008396:	4b86      	ldr	r3, [pc, #536]	@ (80085b0 <bldc_interface_process_packet+0x109c>)
 8008398:	edc3 7a4c 	vstr	s15, [r3, #304]	@ 0x130
		mcconf.s_pid_allow_braking = data[ind++];
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	1c5a      	adds	r2, r3, #1
 80083a0:	60fa      	str	r2, [r7, #12]
 80083a2:	461a      	mov	r2, r3
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	4413      	add	r3, r2
 80083a8:	781b      	ldrb	r3, [r3, #0]
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	bf14      	ite	ne
 80083ae:	2301      	movne	r3, #1
 80083b0:	2300      	moveq	r3, #0
 80083b2:	b2da      	uxtb	r2, r3
 80083b4:	4b7e      	ldr	r3, [pc, #504]	@ (80085b0 <bldc_interface_process_packet+0x109c>)
 80083b6:	f883 2134 	strb.w	r2, [r3, #308]	@ 0x134

		mcconf.p_pid_kp = buffer_get_float32_auto(data, &ind);
 80083ba:	f107 030c 	add.w	r3, r7, #12
 80083be:	4619      	mov	r1, r3
 80083c0:	6878      	ldr	r0, [r7, #4]
 80083c2:	f000 fe03 	bl	8008fcc <buffer_get_float32_auto>
 80083c6:	eef0 7a40 	vmov.f32	s15, s0
 80083ca:	4b79      	ldr	r3, [pc, #484]	@ (80085b0 <bldc_interface_process_packet+0x109c>)
 80083cc:	edc3 7a4e 	vstr	s15, [r3, #312]	@ 0x138
		mcconf.p_pid_ki = buffer_get_float32_auto(data, &ind);
 80083d0:	f107 030c 	add.w	r3, r7, #12
 80083d4:	4619      	mov	r1, r3
 80083d6:	6878      	ldr	r0, [r7, #4]
 80083d8:	f000 fdf8 	bl	8008fcc <buffer_get_float32_auto>
 80083dc:	eef0 7a40 	vmov.f32	s15, s0
 80083e0:	4b73      	ldr	r3, [pc, #460]	@ (80085b0 <bldc_interface_process_packet+0x109c>)
 80083e2:	edc3 7a4f 	vstr	s15, [r3, #316]	@ 0x13c
		mcconf.p_pid_kd = buffer_get_float32_auto(data, &ind);
 80083e6:	f107 030c 	add.w	r3, r7, #12
 80083ea:	4619      	mov	r1, r3
 80083ec:	6878      	ldr	r0, [r7, #4]
 80083ee:	f000 fded 	bl	8008fcc <buffer_get_float32_auto>
 80083f2:	eef0 7a40 	vmov.f32	s15, s0
 80083f6:	4b6e      	ldr	r3, [pc, #440]	@ (80085b0 <bldc_interface_process_packet+0x109c>)
 80083f8:	edc3 7a50 	vstr	s15, [r3, #320]	@ 0x140
		mcconf.p_pid_kd_filter = buffer_get_float32_auto(data, &ind);
 80083fc:	f107 030c 	add.w	r3, r7, #12
 8008400:	4619      	mov	r1, r3
 8008402:	6878      	ldr	r0, [r7, #4]
 8008404:	f000 fde2 	bl	8008fcc <buffer_get_float32_auto>
 8008408:	eef0 7a40 	vmov.f32	s15, s0
 800840c:	4b68      	ldr	r3, [pc, #416]	@ (80085b0 <bldc_interface_process_packet+0x109c>)
 800840e:	edc3 7a51 	vstr	s15, [r3, #324]	@ 0x144
		mcconf.p_pid_ang_div = buffer_get_float32_auto(data, &ind);
 8008412:	f107 030c 	add.w	r3, r7, #12
 8008416:	4619      	mov	r1, r3
 8008418:	6878      	ldr	r0, [r7, #4]
 800841a:	f000 fdd7 	bl	8008fcc <buffer_get_float32_auto>
 800841e:	eef0 7a40 	vmov.f32	s15, s0
 8008422:	4b63      	ldr	r3, [pc, #396]	@ (80085b0 <bldc_interface_process_packet+0x109c>)
 8008424:	edc3 7a52 	vstr	s15, [r3, #328]	@ 0x148

		mcconf.cc_startup_boost_duty = buffer_get_float32_auto(data, &ind);
 8008428:	f107 030c 	add.w	r3, r7, #12
 800842c:	4619      	mov	r1, r3
 800842e:	6878      	ldr	r0, [r7, #4]
 8008430:	f000 fdcc 	bl	8008fcc <buffer_get_float32_auto>
 8008434:	eef0 7a40 	vmov.f32	s15, s0
 8008438:	4b5d      	ldr	r3, [pc, #372]	@ (80085b0 <bldc_interface_process_packet+0x109c>)
 800843a:	edc3 7a53 	vstr	s15, [r3, #332]	@ 0x14c
		mcconf.cc_min_current = buffer_get_float32_auto(data, &ind);
 800843e:	f107 030c 	add.w	r3, r7, #12
 8008442:	4619      	mov	r1, r3
 8008444:	6878      	ldr	r0, [r7, #4]
 8008446:	f000 fdc1 	bl	8008fcc <buffer_get_float32_auto>
 800844a:	eef0 7a40 	vmov.f32	s15, s0
 800844e:	4b58      	ldr	r3, [pc, #352]	@ (80085b0 <bldc_interface_process_packet+0x109c>)
 8008450:	edc3 7a54 	vstr	s15, [r3, #336]	@ 0x150
		mcconf.cc_gain = buffer_get_float32_auto(data, &ind);
 8008454:	f107 030c 	add.w	r3, r7, #12
 8008458:	4619      	mov	r1, r3
 800845a:	6878      	ldr	r0, [r7, #4]
 800845c:	f000 fdb6 	bl	8008fcc <buffer_get_float32_auto>
 8008460:	eef0 7a40 	vmov.f32	s15, s0
 8008464:	4b52      	ldr	r3, [pc, #328]	@ (80085b0 <bldc_interface_process_packet+0x109c>)
 8008466:	edc3 7a55 	vstr	s15, [r3, #340]	@ 0x154
		mcconf.cc_ramp_step_max = buffer_get_float32_auto(data, &ind);
 800846a:	f107 030c 	add.w	r3, r7, #12
 800846e:	4619      	mov	r1, r3
 8008470:	6878      	ldr	r0, [r7, #4]
 8008472:	f000 fdab 	bl	8008fcc <buffer_get_float32_auto>
 8008476:	eef0 7a40 	vmov.f32	s15, s0
 800847a:	4b4d      	ldr	r3, [pc, #308]	@ (80085b0 <bldc_interface_process_packet+0x109c>)
 800847c:	edc3 7a56 	vstr	s15, [r3, #344]	@ 0x158

		mcconf.m_fault_stop_time_ms = buffer_get_int32(data, &ind);
 8008480:	f107 030c 	add.w	r3, r7, #12
 8008484:	4619      	mov	r1, r3
 8008486:	6878      	ldr	r0, [r7, #4]
 8008488:	f000 fd0a 	bl	8008ea0 <buffer_get_int32>
 800848c:	4603      	mov	r3, r0
 800848e:	4a48      	ldr	r2, [pc, #288]	@ (80085b0 <bldc_interface_process_packet+0x109c>)
 8008490:	f8c2 315c 	str.w	r3, [r2, #348]	@ 0x15c
		mcconf.m_duty_ramp_step = buffer_get_float32_auto(data, &ind);
 8008494:	f107 030c 	add.w	r3, r7, #12
 8008498:	4619      	mov	r1, r3
 800849a:	6878      	ldr	r0, [r7, #4]
 800849c:	f000 fd96 	bl	8008fcc <buffer_get_float32_auto>
 80084a0:	eef0 7a40 	vmov.f32	s15, s0
 80084a4:	4b42      	ldr	r3, [pc, #264]	@ (80085b0 <bldc_interface_process_packet+0x109c>)
 80084a6:	edc3 7a58 	vstr	s15, [r3, #352]	@ 0x160
		mcconf.m_current_backoff_gain = buffer_get_float32_auto(data, &ind);
 80084aa:	f107 030c 	add.w	r3, r7, #12
 80084ae:	4619      	mov	r1, r3
 80084b0:	6878      	ldr	r0, [r7, #4]
 80084b2:	f000 fd8b 	bl	8008fcc <buffer_get_float32_auto>
 80084b6:	eef0 7a40 	vmov.f32	s15, s0
 80084ba:	4b3d      	ldr	r3, [pc, #244]	@ (80085b0 <bldc_interface_process_packet+0x109c>)
 80084bc:	edc3 7a59 	vstr	s15, [r3, #356]	@ 0x164
		mcconf.m_encoder_counts = buffer_get_uint32(data, &ind);
 80084c0:	f107 030c 	add.w	r3, r7, #12
 80084c4:	4619      	mov	r1, r3
 80084c6:	6878      	ldr	r0, [r7, #4]
 80084c8:	f000 fd1a 	bl	8008f00 <buffer_get_uint32>
 80084cc:	4603      	mov	r3, r0
 80084ce:	4a38      	ldr	r2, [pc, #224]	@ (80085b0 <bldc_interface_process_packet+0x109c>)
 80084d0:	f8c2 3168 	str.w	r3, [r2, #360]	@ 0x168
		mcconf.m_sensor_port_mode = data[ind++];
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	1c5a      	adds	r2, r3, #1
 80084d8:	60fa      	str	r2, [r7, #12]
 80084da:	461a      	mov	r2, r3
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	4413      	add	r3, r2
 80084e0:	781a      	ldrb	r2, [r3, #0]
 80084e2:	4b33      	ldr	r3, [pc, #204]	@ (80085b0 <bldc_interface_process_packet+0x109c>)
 80084e4:	f883 216c 	strb.w	r2, [r3, #364]	@ 0x16c
		mcconf.m_invert_direction = data[ind++];
 80084e8:	68fb      	ldr	r3, [r7, #12]
 80084ea:	1c5a      	adds	r2, r3, #1
 80084ec:	60fa      	str	r2, [r7, #12]
 80084ee:	461a      	mov	r2, r3
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	4413      	add	r3, r2
 80084f4:	781b      	ldrb	r3, [r3, #0]
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	bf14      	ite	ne
 80084fa:	2301      	movne	r3, #1
 80084fc:	2300      	moveq	r3, #0
 80084fe:	b2da      	uxtb	r2, r3
 8008500:	4b2b      	ldr	r3, [pc, #172]	@ (80085b0 <bldc_interface_process_packet+0x109c>)
 8008502:	f883 216d 	strb.w	r2, [r3, #365]	@ 0x16d
		mcconf.m_drv8301_oc_mode = data[ind++];
 8008506:	68fb      	ldr	r3, [r7, #12]
 8008508:	1c5a      	adds	r2, r3, #1
 800850a:	60fa      	str	r2, [r7, #12]
 800850c:	461a      	mov	r2, r3
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	4413      	add	r3, r2
 8008512:	781a      	ldrb	r2, [r3, #0]
 8008514:	4b26      	ldr	r3, [pc, #152]	@ (80085b0 <bldc_interface_process_packet+0x109c>)
 8008516:	f883 216e 	strb.w	r2, [r3, #366]	@ 0x16e
		mcconf.m_drv8301_oc_adj = data[ind++];
 800851a:	68fb      	ldr	r3, [r7, #12]
 800851c:	1c5a      	adds	r2, r3, #1
 800851e:	60fa      	str	r2, [r7, #12]
 8008520:	461a      	mov	r2, r3
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	4413      	add	r3, r2
 8008526:	781b      	ldrb	r3, [r3, #0]
 8008528:	461a      	mov	r2, r3
 800852a:	4b21      	ldr	r3, [pc, #132]	@ (80085b0 <bldc_interface_process_packet+0x109c>)
 800852c:	f8c3 2170 	str.w	r2, [r3, #368]	@ 0x170
		mcconf.m_bldc_f_sw_min = buffer_get_float32_auto(data, &ind);
 8008530:	f107 030c 	add.w	r3, r7, #12
 8008534:	4619      	mov	r1, r3
 8008536:	6878      	ldr	r0, [r7, #4]
 8008538:	f000 fd48 	bl	8008fcc <buffer_get_float32_auto>
 800853c:	eef0 7a40 	vmov.f32	s15, s0
 8008540:	4b1b      	ldr	r3, [pc, #108]	@ (80085b0 <bldc_interface_process_packet+0x109c>)
 8008542:	edc3 7a5d 	vstr	s15, [r3, #372]	@ 0x174
		mcconf.m_bldc_f_sw_max = buffer_get_float32_auto(data, &ind);
 8008546:	f107 030c 	add.w	r3, r7, #12
 800854a:	4619      	mov	r1, r3
 800854c:	6878      	ldr	r0, [r7, #4]
 800854e:	f000 fd3d 	bl	8008fcc <buffer_get_float32_auto>
 8008552:	eef0 7a40 	vmov.f32	s15, s0
 8008556:	4b16      	ldr	r3, [pc, #88]	@ (80085b0 <bldc_interface_process_packet+0x109c>)
 8008558:	edc3 7a5e 	vstr	s15, [r3, #376]	@ 0x178
		mcconf.m_dc_f_sw = buffer_get_float32_auto(data, &ind);
 800855c:	f107 030c 	add.w	r3, r7, #12
 8008560:	4619      	mov	r1, r3
 8008562:	6878      	ldr	r0, [r7, #4]
 8008564:	f000 fd32 	bl	8008fcc <buffer_get_float32_auto>
 8008568:	eef0 7a40 	vmov.f32	s15, s0
 800856c:	4b10      	ldr	r3, [pc, #64]	@ (80085b0 <bldc_interface_process_packet+0x109c>)
 800856e:	edc3 7a5f 	vstr	s15, [r3, #380]	@ 0x17c
		mcconf.m_ntc_motor_beta = buffer_get_float32_auto(data, &ind);
 8008572:	f107 030c 	add.w	r3, r7, #12
 8008576:	4619      	mov	r1, r3
 8008578:	6878      	ldr	r0, [r7, #4]
 800857a:	f000 fd27 	bl	8008fcc <buffer_get_float32_auto>
 800857e:	eef0 7a40 	vmov.f32	s15, s0
 8008582:	4b0b      	ldr	r3, [pc, #44]	@ (80085b0 <bldc_interface_process_packet+0x109c>)
 8008584:	edc3 7a60 	vstr	s15, [r3, #384]	@ 0x180
		mcconf.m_out_aux_mode = data[ind++];
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	1c5a      	adds	r2, r3, #1
 800858c:	60fa      	str	r2, [r7, #12]
 800858e:	461a      	mov	r2, r3
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	4413      	add	r3, r2
 8008594:	781a      	ldrb	r2, [r3, #0]
 8008596:	4b06      	ldr	r3, [pc, #24]	@ (80085b0 <bldc_interface_process_packet+0x109c>)
 8008598:	f883 2184 	strb.w	r2, [r3, #388]	@ 0x184

		if (rx_mcconf_func) {
 800859c:	4b05      	ldr	r3, [pc, #20]	@ (80085b4 <bldc_interface_process_packet+0x10a0>)
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	f000 83ff 	beq.w	8008da4 <bldc_interface_process_packet+0x1890>
			rx_mcconf_func(&mcconf);
 80085a6:	4b03      	ldr	r3, [pc, #12]	@ (80085b4 <bldc_interface_process_packet+0x10a0>)
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	4801      	ldr	r0, [pc, #4]	@ (80085b0 <bldc_interface_process_packet+0x109c>)
 80085ac:	4798      	blx	r3
		}
		break;
 80085ae:	e3f9      	b.n	8008da4 <bldc_interface_process_packet+0x1890>
 80085b0:	20000578 	.word	0x20000578
 80085b4:	20000808 	.word	0x20000808

	case COMM_GET_APPCONF:
	case COMM_GET_APPCONF_DEFAULT:
		ind = 0;
 80085b8:	2300      	movs	r3, #0
 80085ba:	60fb      	str	r3, [r7, #12]
		appconf.signature = buffer_get_uint32(data, &ind);
 80085bc:	f107 030c 	add.w	r3, r7, #12
 80085c0:	4619      	mov	r1, r3
 80085c2:	6878      	ldr	r0, [r7, #4]
 80085c4:	f000 fc9c 	bl	8008f00 <buffer_get_uint32>
 80085c8:	4603      	mov	r3, r0
 80085ca:	4aba      	ldr	r2, [pc, #744]	@ (80088b4 <bldc_interface_process_packet+0x13a0>)
 80085cc:	6013      	str	r3, [r2, #0]
		appconf.controller_id = data[ind++];
 80085ce:	68fb      	ldr	r3, [r7, #12]
 80085d0:	1c5a      	adds	r2, r3, #1
 80085d2:	60fa      	str	r2, [r7, #12]
 80085d4:	461a      	mov	r2, r3
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	4413      	add	r3, r2
 80085da:	781a      	ldrb	r2, [r3, #0]
 80085dc:	4bb5      	ldr	r3, [pc, #724]	@ (80088b4 <bldc_interface_process_packet+0x13a0>)
 80085de:	711a      	strb	r2, [r3, #4]
		appconf.timeout_msec = buffer_get_uint32(data, &ind);
 80085e0:	f107 030c 	add.w	r3, r7, #12
 80085e4:	4619      	mov	r1, r3
 80085e6:	6878      	ldr	r0, [r7, #4]
 80085e8:	f000 fc8a 	bl	8008f00 <buffer_get_uint32>
 80085ec:	4603      	mov	r3, r0
 80085ee:	4ab1      	ldr	r2, [pc, #708]	@ (80088b4 <bldc_interface_process_packet+0x13a0>)
 80085f0:	6093      	str	r3, [r2, #8]
		appconf.timeout_brake_current = buffer_get_float32_auto(data, &ind);
 80085f2:	f107 030c 	add.w	r3, r7, #12
 80085f6:	4619      	mov	r1, r3
 80085f8:	6878      	ldr	r0, [r7, #4]
 80085fa:	f000 fce7 	bl	8008fcc <buffer_get_float32_auto>
 80085fe:	eef0 7a40 	vmov.f32	s15, s0
 8008602:	4bac      	ldr	r3, [pc, #688]	@ (80088b4 <bldc_interface_process_packet+0x13a0>)
 8008604:	edc3 7a03 	vstr	s15, [r3, #12]
		appconf.send_can_status = data[ind++];
 8008608:	68fb      	ldr	r3, [r7, #12]
 800860a:	1c5a      	adds	r2, r3, #1
 800860c:	60fa      	str	r2, [r7, #12]
 800860e:	461a      	mov	r2, r3
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	4413      	add	r3, r2
 8008614:	781b      	ldrb	r3, [r3, #0]
 8008616:	2b00      	cmp	r3, #0
 8008618:	bf14      	ite	ne
 800861a:	2301      	movne	r3, #1
 800861c:	2300      	moveq	r3, #0
 800861e:	b2da      	uxtb	r2, r3
 8008620:	4ba4      	ldr	r3, [pc, #656]	@ (80088b4 <bldc_interface_process_packet+0x13a0>)
 8008622:	741a      	strb	r2, [r3, #16]
		appconf.send_can_status_rate_hz = buffer_get_uint16(data, &ind);
 8008624:	f107 030c 	add.w	r3, r7, #12
 8008628:	4619      	mov	r1, r3
 800862a:	6878      	ldr	r0, [r7, #4]
 800862c:	f000 fc15 	bl	8008e5a <buffer_get_uint16>
 8008630:	4603      	mov	r3, r0
 8008632:	461a      	mov	r2, r3
 8008634:	4b9f      	ldr	r3, [pc, #636]	@ (80088b4 <bldc_interface_process_packet+0x13a0>)
 8008636:	615a      	str	r2, [r3, #20]
		appconf.can_baud_rate = data[ind++];
 8008638:	68fb      	ldr	r3, [r7, #12]
 800863a:	1c5a      	adds	r2, r3, #1
 800863c:	60fa      	str	r2, [r7, #12]
 800863e:	461a      	mov	r2, r3
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	4413      	add	r3, r2
 8008644:	781a      	ldrb	r2, [r3, #0]
 8008646:	4b9b      	ldr	r3, [pc, #620]	@ (80088b4 <bldc_interface_process_packet+0x13a0>)
 8008648:	761a      	strb	r2, [r3, #24]

		appconf.app_to_use = data[ind++];
 800864a:	68fb      	ldr	r3, [r7, #12]
 800864c:	1c5a      	adds	r2, r3, #1
 800864e:	60fa      	str	r2, [r7, #12]
 8008650:	461a      	mov	r2, r3
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	4413      	add	r3, r2
 8008656:	781a      	ldrb	r2, [r3, #0]
 8008658:	4b96      	ldr	r3, [pc, #600]	@ (80088b4 <bldc_interface_process_packet+0x13a0>)
 800865a:	765a      	strb	r2, [r3, #25]

		appconf.app_ppm_conf.ctrl_type = data[ind++];
 800865c:	68fb      	ldr	r3, [r7, #12]
 800865e:	1c5a      	adds	r2, r3, #1
 8008660:	60fa      	str	r2, [r7, #12]
 8008662:	461a      	mov	r2, r3
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	4413      	add	r3, r2
 8008668:	781a      	ldrb	r2, [r3, #0]
 800866a:	4b92      	ldr	r3, [pc, #584]	@ (80088b4 <bldc_interface_process_packet+0x13a0>)
 800866c:	771a      	strb	r2, [r3, #28]
		appconf.app_ppm_conf.pid_max_erpm = buffer_get_float32_auto(data, &ind);
 800866e:	f107 030c 	add.w	r3, r7, #12
 8008672:	4619      	mov	r1, r3
 8008674:	6878      	ldr	r0, [r7, #4]
 8008676:	f000 fca9 	bl	8008fcc <buffer_get_float32_auto>
 800867a:	eef0 7a40 	vmov.f32	s15, s0
 800867e:	4b8d      	ldr	r3, [pc, #564]	@ (80088b4 <bldc_interface_process_packet+0x13a0>)
 8008680:	edc3 7a08 	vstr	s15, [r3, #32]
		appconf.app_ppm_conf.hyst = buffer_get_float32_auto(data, &ind);
 8008684:	f107 030c 	add.w	r3, r7, #12
 8008688:	4619      	mov	r1, r3
 800868a:	6878      	ldr	r0, [r7, #4]
 800868c:	f000 fc9e 	bl	8008fcc <buffer_get_float32_auto>
 8008690:	eef0 7a40 	vmov.f32	s15, s0
 8008694:	4b87      	ldr	r3, [pc, #540]	@ (80088b4 <bldc_interface_process_packet+0x13a0>)
 8008696:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
		appconf.app_ppm_conf.pulse_start = buffer_get_float32_auto(data, &ind);
 800869a:	f107 030c 	add.w	r3, r7, #12
 800869e:	4619      	mov	r1, r3
 80086a0:	6878      	ldr	r0, [r7, #4]
 80086a2:	f000 fc93 	bl	8008fcc <buffer_get_float32_auto>
 80086a6:	eef0 7a40 	vmov.f32	s15, s0
 80086aa:	4b82      	ldr	r3, [pc, #520]	@ (80088b4 <bldc_interface_process_packet+0x13a0>)
 80086ac:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
		appconf.app_ppm_conf.pulse_end = buffer_get_float32_auto(data, &ind);
 80086b0:	f107 030c 	add.w	r3, r7, #12
 80086b4:	4619      	mov	r1, r3
 80086b6:	6878      	ldr	r0, [r7, #4]
 80086b8:	f000 fc88 	bl	8008fcc <buffer_get_float32_auto>
 80086bc:	eef0 7a40 	vmov.f32	s15, s0
 80086c0:	4b7c      	ldr	r3, [pc, #496]	@ (80088b4 <bldc_interface_process_packet+0x13a0>)
 80086c2:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
		appconf.app_ppm_conf.pulse_center = buffer_get_float32_auto(data, &ind);
 80086c6:	f107 030c 	add.w	r3, r7, #12
 80086ca:	4619      	mov	r1, r3
 80086cc:	6878      	ldr	r0, [r7, #4]
 80086ce:	f000 fc7d 	bl	8008fcc <buffer_get_float32_auto>
 80086d2:	eef0 7a40 	vmov.f32	s15, s0
 80086d6:	4b77      	ldr	r3, [pc, #476]	@ (80088b4 <bldc_interface_process_packet+0x13a0>)
 80086d8:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
		appconf.app_ppm_conf.median_filter = data[ind++];
 80086dc:	68fb      	ldr	r3, [r7, #12]
 80086de:	1c5a      	adds	r2, r3, #1
 80086e0:	60fa      	str	r2, [r7, #12]
 80086e2:	461a      	mov	r2, r3
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	4413      	add	r3, r2
 80086e8:	781b      	ldrb	r3, [r3, #0]
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	bf14      	ite	ne
 80086ee:	2301      	movne	r3, #1
 80086f0:	2300      	moveq	r3, #0
 80086f2:	b2da      	uxtb	r2, r3
 80086f4:	4b6f      	ldr	r3, [pc, #444]	@ (80088b4 <bldc_interface_process_packet+0x13a0>)
 80086f6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
		appconf.app_ppm_conf.safe_start = data[ind++];
 80086fa:	68fb      	ldr	r3, [r7, #12]
 80086fc:	1c5a      	adds	r2, r3, #1
 80086fe:	60fa      	str	r2, [r7, #12]
 8008700:	461a      	mov	r2, r3
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	4413      	add	r3, r2
 8008706:	781b      	ldrb	r3, [r3, #0]
 8008708:	2b00      	cmp	r3, #0
 800870a:	bf14      	ite	ne
 800870c:	2301      	movne	r3, #1
 800870e:	2300      	moveq	r3, #0
 8008710:	b2da      	uxtb	r2, r3
 8008712:	4b68      	ldr	r3, [pc, #416]	@ (80088b4 <bldc_interface_process_packet+0x13a0>)
 8008714:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
		appconf.app_ppm_conf.throttle_exp = buffer_get_float32_auto(data, &ind);
 8008718:	f107 030c 	add.w	r3, r7, #12
 800871c:	4619      	mov	r1, r3
 800871e:	6878      	ldr	r0, [r7, #4]
 8008720:	f000 fc54 	bl	8008fcc <buffer_get_float32_auto>
 8008724:	eef0 7a40 	vmov.f32	s15, s0
 8008728:	4b62      	ldr	r3, [pc, #392]	@ (80088b4 <bldc_interface_process_packet+0x13a0>)
 800872a:	edc3 7a0e 	vstr	s15, [r3, #56]	@ 0x38
		appconf.app_ppm_conf.throttle_exp_brake = buffer_get_float32_auto(data, &ind);
 800872e:	f107 030c 	add.w	r3, r7, #12
 8008732:	4619      	mov	r1, r3
 8008734:	6878      	ldr	r0, [r7, #4]
 8008736:	f000 fc49 	bl	8008fcc <buffer_get_float32_auto>
 800873a:	eef0 7a40 	vmov.f32	s15, s0
 800873e:	4b5d      	ldr	r3, [pc, #372]	@ (80088b4 <bldc_interface_process_packet+0x13a0>)
 8008740:	edc3 7a0f 	vstr	s15, [r3, #60]	@ 0x3c
		appconf.app_ppm_conf.throttle_exp_mode = data[ind++];
 8008744:	68fb      	ldr	r3, [r7, #12]
 8008746:	1c5a      	adds	r2, r3, #1
 8008748:	60fa      	str	r2, [r7, #12]
 800874a:	461a      	mov	r2, r3
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	4413      	add	r3, r2
 8008750:	781a      	ldrb	r2, [r3, #0]
 8008752:	4b58      	ldr	r3, [pc, #352]	@ (80088b4 <bldc_interface_process_packet+0x13a0>)
 8008754:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
		appconf.app_ppm_conf.ramp_time_pos = buffer_get_float32_auto(data, &ind);
 8008758:	f107 030c 	add.w	r3, r7, #12
 800875c:	4619      	mov	r1, r3
 800875e:	6878      	ldr	r0, [r7, #4]
 8008760:	f000 fc34 	bl	8008fcc <buffer_get_float32_auto>
 8008764:	eef0 7a40 	vmov.f32	s15, s0
 8008768:	4b52      	ldr	r3, [pc, #328]	@ (80088b4 <bldc_interface_process_packet+0x13a0>)
 800876a:	edc3 7a11 	vstr	s15, [r3, #68]	@ 0x44
		appconf.app_ppm_conf.ramp_time_neg = buffer_get_float32_auto(data, &ind);
 800876e:	f107 030c 	add.w	r3, r7, #12
 8008772:	4619      	mov	r1, r3
 8008774:	6878      	ldr	r0, [r7, #4]
 8008776:	f000 fc29 	bl	8008fcc <buffer_get_float32_auto>
 800877a:	eef0 7a40 	vmov.f32	s15, s0
 800877e:	4b4d      	ldr	r3, [pc, #308]	@ (80088b4 <bldc_interface_process_packet+0x13a0>)
 8008780:	edc3 7a12 	vstr	s15, [r3, #72]	@ 0x48
		appconf.app_ppm_conf.multi_esc = data[ind++];
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	1c5a      	adds	r2, r3, #1
 8008788:	60fa      	str	r2, [r7, #12]
 800878a:	461a      	mov	r2, r3
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	4413      	add	r3, r2
 8008790:	781b      	ldrb	r3, [r3, #0]
 8008792:	2b00      	cmp	r3, #0
 8008794:	bf14      	ite	ne
 8008796:	2301      	movne	r3, #1
 8008798:	2300      	moveq	r3, #0
 800879a:	b2da      	uxtb	r2, r3
 800879c:	4b45      	ldr	r3, [pc, #276]	@ (80088b4 <bldc_interface_process_packet+0x13a0>)
 800879e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		appconf.app_ppm_conf.tc = data[ind++];
 80087a2:	68fb      	ldr	r3, [r7, #12]
 80087a4:	1c5a      	adds	r2, r3, #1
 80087a6:	60fa      	str	r2, [r7, #12]
 80087a8:	461a      	mov	r2, r3
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	4413      	add	r3, r2
 80087ae:	781b      	ldrb	r3, [r3, #0]
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	bf14      	ite	ne
 80087b4:	2301      	movne	r3, #1
 80087b6:	2300      	moveq	r3, #0
 80087b8:	b2da      	uxtb	r2, r3
 80087ba:	4b3e      	ldr	r3, [pc, #248]	@ (80088b4 <bldc_interface_process_packet+0x13a0>)
 80087bc:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
		appconf.app_ppm_conf.tc_max_diff = buffer_get_float32_auto(data, &ind);
 80087c0:	f107 030c 	add.w	r3, r7, #12
 80087c4:	4619      	mov	r1, r3
 80087c6:	6878      	ldr	r0, [r7, #4]
 80087c8:	f000 fc00 	bl	8008fcc <buffer_get_float32_auto>
 80087cc:	eef0 7a40 	vmov.f32	s15, s0
 80087d0:	4b38      	ldr	r3, [pc, #224]	@ (80088b4 <bldc_interface_process_packet+0x13a0>)
 80087d2:	edc3 7a14 	vstr	s15, [r3, #80]	@ 0x50

		appconf.app_adc_conf.ctrl_type = data[ind++];
 80087d6:	68fb      	ldr	r3, [r7, #12]
 80087d8:	1c5a      	adds	r2, r3, #1
 80087da:	60fa      	str	r2, [r7, #12]
 80087dc:	461a      	mov	r2, r3
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	4413      	add	r3, r2
 80087e2:	781a      	ldrb	r2, [r3, #0]
 80087e4:	4b33      	ldr	r3, [pc, #204]	@ (80088b4 <bldc_interface_process_packet+0x13a0>)
 80087e6:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
		appconf.app_adc_conf.hyst = buffer_get_float32_auto(data, &ind);
 80087ea:	f107 030c 	add.w	r3, r7, #12
 80087ee:	4619      	mov	r1, r3
 80087f0:	6878      	ldr	r0, [r7, #4]
 80087f2:	f000 fbeb 	bl	8008fcc <buffer_get_float32_auto>
 80087f6:	eef0 7a40 	vmov.f32	s15, s0
 80087fa:	4b2e      	ldr	r3, [pc, #184]	@ (80088b4 <bldc_interface_process_packet+0x13a0>)
 80087fc:	edc3 7a16 	vstr	s15, [r3, #88]	@ 0x58
		appconf.app_adc_conf.voltage_start = buffer_get_float32_auto(data, &ind);
 8008800:	f107 030c 	add.w	r3, r7, #12
 8008804:	4619      	mov	r1, r3
 8008806:	6878      	ldr	r0, [r7, #4]
 8008808:	f000 fbe0 	bl	8008fcc <buffer_get_float32_auto>
 800880c:	eef0 7a40 	vmov.f32	s15, s0
 8008810:	4b28      	ldr	r3, [pc, #160]	@ (80088b4 <bldc_interface_process_packet+0x13a0>)
 8008812:	edc3 7a17 	vstr	s15, [r3, #92]	@ 0x5c
		appconf.app_adc_conf.voltage_end = buffer_get_float32_auto(data, &ind);
 8008816:	f107 030c 	add.w	r3, r7, #12
 800881a:	4619      	mov	r1, r3
 800881c:	6878      	ldr	r0, [r7, #4]
 800881e:	f000 fbd5 	bl	8008fcc <buffer_get_float32_auto>
 8008822:	eef0 7a40 	vmov.f32	s15, s0
 8008826:	4b23      	ldr	r3, [pc, #140]	@ (80088b4 <bldc_interface_process_packet+0x13a0>)
 8008828:	edc3 7a18 	vstr	s15, [r3, #96]	@ 0x60
		appconf.app_adc_conf.voltage_center = buffer_get_float32_auto(data, &ind);
 800882c:	f107 030c 	add.w	r3, r7, #12
 8008830:	4619      	mov	r1, r3
 8008832:	6878      	ldr	r0, [r7, #4]
 8008834:	f000 fbca 	bl	8008fcc <buffer_get_float32_auto>
 8008838:	eef0 7a40 	vmov.f32	s15, s0
 800883c:	4b1d      	ldr	r3, [pc, #116]	@ (80088b4 <bldc_interface_process_packet+0x13a0>)
 800883e:	edc3 7a19 	vstr	s15, [r3, #100]	@ 0x64
		appconf.app_adc_conf.voltage2_start = buffer_get_float32_auto(data, &ind);
 8008842:	f107 030c 	add.w	r3, r7, #12
 8008846:	4619      	mov	r1, r3
 8008848:	6878      	ldr	r0, [r7, #4]
 800884a:	f000 fbbf 	bl	8008fcc <buffer_get_float32_auto>
 800884e:	eef0 7a40 	vmov.f32	s15, s0
 8008852:	4b18      	ldr	r3, [pc, #96]	@ (80088b4 <bldc_interface_process_packet+0x13a0>)
 8008854:	edc3 7a1a 	vstr	s15, [r3, #104]	@ 0x68
		appconf.app_adc_conf.voltage2_end = buffer_get_float32_auto(data, &ind);
 8008858:	f107 030c 	add.w	r3, r7, #12
 800885c:	4619      	mov	r1, r3
 800885e:	6878      	ldr	r0, [r7, #4]
 8008860:	f000 fbb4 	bl	8008fcc <buffer_get_float32_auto>
 8008864:	eef0 7a40 	vmov.f32	s15, s0
 8008868:	4b12      	ldr	r3, [pc, #72]	@ (80088b4 <bldc_interface_process_packet+0x13a0>)
 800886a:	edc3 7a1b 	vstr	s15, [r3, #108]	@ 0x6c
		appconf.app_adc_conf.use_filter = data[ind++];
 800886e:	68fb      	ldr	r3, [r7, #12]
 8008870:	1c5a      	adds	r2, r3, #1
 8008872:	60fa      	str	r2, [r7, #12]
 8008874:	461a      	mov	r2, r3
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	4413      	add	r3, r2
 800887a:	781b      	ldrb	r3, [r3, #0]
 800887c:	2b00      	cmp	r3, #0
 800887e:	bf14      	ite	ne
 8008880:	2301      	movne	r3, #1
 8008882:	2300      	moveq	r3, #0
 8008884:	b2da      	uxtb	r2, r3
 8008886:	4b0b      	ldr	r3, [pc, #44]	@ (80088b4 <bldc_interface_process_packet+0x13a0>)
 8008888:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
		appconf.app_adc_conf.safe_start = data[ind++];
 800888c:	68fb      	ldr	r3, [r7, #12]
 800888e:	1c5a      	adds	r2, r3, #1
 8008890:	60fa      	str	r2, [r7, #12]
 8008892:	461a      	mov	r2, r3
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	4413      	add	r3, r2
 8008898:	781b      	ldrb	r3, [r3, #0]
 800889a:	2b00      	cmp	r3, #0
 800889c:	bf14      	ite	ne
 800889e:	2301      	movne	r3, #1
 80088a0:	2300      	moveq	r3, #0
 80088a2:	b2da      	uxtb	r2, r3
 80088a4:	4b03      	ldr	r3, [pc, #12]	@ (80088b4 <bldc_interface_process_packet+0x13a0>)
 80088a6:	f883 2071 	strb.w	r2, [r3, #113]	@ 0x71
		appconf.app_adc_conf.cc_button_inverted = data[ind++];
 80088aa:	68fb      	ldr	r3, [r7, #12]
 80088ac:	1c5a      	adds	r2, r3, #1
 80088ae:	60fa      	str	r2, [r7, #12]
 80088b0:	e002      	b.n	80088b8 <bldc_interface_process_packet+0x13a4>
 80088b2:	bf00      	nop
 80088b4:	20000700 	.word	0x20000700
 80088b8:	461a      	mov	r2, r3
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	4413      	add	r3, r2
 80088be:	781b      	ldrb	r3, [r3, #0]
 80088c0:	2b00      	cmp	r3, #0
 80088c2:	bf14      	ite	ne
 80088c4:	2301      	movne	r3, #1
 80088c6:	2300      	moveq	r3, #0
 80088c8:	b2da      	uxtb	r2, r3
 80088ca:	4bb7      	ldr	r3, [pc, #732]	@ (8008ba8 <bldc_interface_process_packet+0x1694>)
 80088cc:	f883 2072 	strb.w	r2, [r3, #114]	@ 0x72
		appconf.app_adc_conf.rev_button_inverted = data[ind++];
 80088d0:	68fb      	ldr	r3, [r7, #12]
 80088d2:	1c5a      	adds	r2, r3, #1
 80088d4:	60fa      	str	r2, [r7, #12]
 80088d6:	461a      	mov	r2, r3
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	4413      	add	r3, r2
 80088dc:	781b      	ldrb	r3, [r3, #0]
 80088de:	2b00      	cmp	r3, #0
 80088e0:	bf14      	ite	ne
 80088e2:	2301      	movne	r3, #1
 80088e4:	2300      	moveq	r3, #0
 80088e6:	b2da      	uxtb	r2, r3
 80088e8:	4baf      	ldr	r3, [pc, #700]	@ (8008ba8 <bldc_interface_process_packet+0x1694>)
 80088ea:	f883 2073 	strb.w	r2, [r3, #115]	@ 0x73
		appconf.app_adc_conf.voltage_inverted = data[ind++];
 80088ee:	68fb      	ldr	r3, [r7, #12]
 80088f0:	1c5a      	adds	r2, r3, #1
 80088f2:	60fa      	str	r2, [r7, #12]
 80088f4:	461a      	mov	r2, r3
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	4413      	add	r3, r2
 80088fa:	781b      	ldrb	r3, [r3, #0]
 80088fc:	2b00      	cmp	r3, #0
 80088fe:	bf14      	ite	ne
 8008900:	2301      	movne	r3, #1
 8008902:	2300      	moveq	r3, #0
 8008904:	b2da      	uxtb	r2, r3
 8008906:	4ba8      	ldr	r3, [pc, #672]	@ (8008ba8 <bldc_interface_process_packet+0x1694>)
 8008908:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74
		appconf.app_adc_conf.voltage2_inverted = data[ind++];
 800890c:	68fb      	ldr	r3, [r7, #12]
 800890e:	1c5a      	adds	r2, r3, #1
 8008910:	60fa      	str	r2, [r7, #12]
 8008912:	461a      	mov	r2, r3
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	4413      	add	r3, r2
 8008918:	781b      	ldrb	r3, [r3, #0]
 800891a:	2b00      	cmp	r3, #0
 800891c:	bf14      	ite	ne
 800891e:	2301      	movne	r3, #1
 8008920:	2300      	moveq	r3, #0
 8008922:	b2da      	uxtb	r2, r3
 8008924:	4ba0      	ldr	r3, [pc, #640]	@ (8008ba8 <bldc_interface_process_packet+0x1694>)
 8008926:	f883 2075 	strb.w	r2, [r3, #117]	@ 0x75
		appconf.app_adc_conf.throttle_exp = buffer_get_float32_auto(data, &ind);
 800892a:	f107 030c 	add.w	r3, r7, #12
 800892e:	4619      	mov	r1, r3
 8008930:	6878      	ldr	r0, [r7, #4]
 8008932:	f000 fb4b 	bl	8008fcc <buffer_get_float32_auto>
 8008936:	eef0 7a40 	vmov.f32	s15, s0
 800893a:	4b9b      	ldr	r3, [pc, #620]	@ (8008ba8 <bldc_interface_process_packet+0x1694>)
 800893c:	edc3 7a1e 	vstr	s15, [r3, #120]	@ 0x78
		appconf.app_adc_conf.throttle_exp_brake = buffer_get_float32_auto(data, &ind);
 8008940:	f107 030c 	add.w	r3, r7, #12
 8008944:	4619      	mov	r1, r3
 8008946:	6878      	ldr	r0, [r7, #4]
 8008948:	f000 fb40 	bl	8008fcc <buffer_get_float32_auto>
 800894c:	eef0 7a40 	vmov.f32	s15, s0
 8008950:	4b95      	ldr	r3, [pc, #596]	@ (8008ba8 <bldc_interface_process_packet+0x1694>)
 8008952:	edc3 7a1f 	vstr	s15, [r3, #124]	@ 0x7c
		appconf.app_adc_conf.throttle_exp_mode = data[ind++];
 8008956:	68fb      	ldr	r3, [r7, #12]
 8008958:	1c5a      	adds	r2, r3, #1
 800895a:	60fa      	str	r2, [r7, #12]
 800895c:	461a      	mov	r2, r3
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	4413      	add	r3, r2
 8008962:	781a      	ldrb	r2, [r3, #0]
 8008964:	4b90      	ldr	r3, [pc, #576]	@ (8008ba8 <bldc_interface_process_packet+0x1694>)
 8008966:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
		appconf.app_adc_conf.ramp_time_pos = buffer_get_float32_auto(data, &ind);
 800896a:	f107 030c 	add.w	r3, r7, #12
 800896e:	4619      	mov	r1, r3
 8008970:	6878      	ldr	r0, [r7, #4]
 8008972:	f000 fb2b 	bl	8008fcc <buffer_get_float32_auto>
 8008976:	eef0 7a40 	vmov.f32	s15, s0
 800897a:	4b8b      	ldr	r3, [pc, #556]	@ (8008ba8 <bldc_interface_process_packet+0x1694>)
 800897c:	edc3 7a21 	vstr	s15, [r3, #132]	@ 0x84
		appconf.app_adc_conf.ramp_time_neg = buffer_get_float32_auto(data, &ind);
 8008980:	f107 030c 	add.w	r3, r7, #12
 8008984:	4619      	mov	r1, r3
 8008986:	6878      	ldr	r0, [r7, #4]
 8008988:	f000 fb20 	bl	8008fcc <buffer_get_float32_auto>
 800898c:	eef0 7a40 	vmov.f32	s15, s0
 8008990:	4b85      	ldr	r3, [pc, #532]	@ (8008ba8 <bldc_interface_process_packet+0x1694>)
 8008992:	edc3 7a22 	vstr	s15, [r3, #136]	@ 0x88
		appconf.app_adc_conf.multi_esc = data[ind++];
 8008996:	68fb      	ldr	r3, [r7, #12]
 8008998:	1c5a      	adds	r2, r3, #1
 800899a:	60fa      	str	r2, [r7, #12]
 800899c:	461a      	mov	r2, r3
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	4413      	add	r3, r2
 80089a2:	781b      	ldrb	r3, [r3, #0]
 80089a4:	2b00      	cmp	r3, #0
 80089a6:	bf14      	ite	ne
 80089a8:	2301      	movne	r3, #1
 80089aa:	2300      	moveq	r3, #0
 80089ac:	b2da      	uxtb	r2, r3
 80089ae:	4b7e      	ldr	r3, [pc, #504]	@ (8008ba8 <bldc_interface_process_packet+0x1694>)
 80089b0:	f883 208c 	strb.w	r2, [r3, #140]	@ 0x8c
		appconf.app_adc_conf.tc = data[ind++];
 80089b4:	68fb      	ldr	r3, [r7, #12]
 80089b6:	1c5a      	adds	r2, r3, #1
 80089b8:	60fa      	str	r2, [r7, #12]
 80089ba:	461a      	mov	r2, r3
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	4413      	add	r3, r2
 80089c0:	781b      	ldrb	r3, [r3, #0]
 80089c2:	2b00      	cmp	r3, #0
 80089c4:	bf14      	ite	ne
 80089c6:	2301      	movne	r3, #1
 80089c8:	2300      	moveq	r3, #0
 80089ca:	b2da      	uxtb	r2, r3
 80089cc:	4b76      	ldr	r3, [pc, #472]	@ (8008ba8 <bldc_interface_process_packet+0x1694>)
 80089ce:	f883 208d 	strb.w	r2, [r3, #141]	@ 0x8d
		appconf.app_adc_conf.tc_max_diff = buffer_get_float32_auto(data, &ind);
 80089d2:	f107 030c 	add.w	r3, r7, #12
 80089d6:	4619      	mov	r1, r3
 80089d8:	6878      	ldr	r0, [r7, #4]
 80089da:	f000 faf7 	bl	8008fcc <buffer_get_float32_auto>
 80089de:	eef0 7a40 	vmov.f32	s15, s0
 80089e2:	4b71      	ldr	r3, [pc, #452]	@ (8008ba8 <bldc_interface_process_packet+0x1694>)
 80089e4:	edc3 7a24 	vstr	s15, [r3, #144]	@ 0x90
		appconf.app_adc_conf.update_rate_hz = buffer_get_uint16(data, &ind);
 80089e8:	f107 030c 	add.w	r3, r7, #12
 80089ec:	4619      	mov	r1, r3
 80089ee:	6878      	ldr	r0, [r7, #4]
 80089f0:	f000 fa33 	bl	8008e5a <buffer_get_uint16>
 80089f4:	4603      	mov	r3, r0
 80089f6:	461a      	mov	r2, r3
 80089f8:	4b6b      	ldr	r3, [pc, #428]	@ (8008ba8 <bldc_interface_process_packet+0x1694>)
 80089fa:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

		appconf.app_uart_baudrate = buffer_get_uint32(data, &ind);
 80089fe:	f107 030c 	add.w	r3, r7, #12
 8008a02:	4619      	mov	r1, r3
 8008a04:	6878      	ldr	r0, [r7, #4]
 8008a06:	f000 fa7b 	bl	8008f00 <buffer_get_uint32>
 8008a0a:	4603      	mov	r3, r0
 8008a0c:	4a66      	ldr	r2, [pc, #408]	@ (8008ba8 <bldc_interface_process_packet+0x1694>)
 8008a0e:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

		appconf.app_chuk_conf.ctrl_type = data[ind++];
 8008a12:	68fb      	ldr	r3, [r7, #12]
 8008a14:	1c5a      	adds	r2, r3, #1
 8008a16:	60fa      	str	r2, [r7, #12]
 8008a18:	461a      	mov	r2, r3
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	4413      	add	r3, r2
 8008a1e:	781a      	ldrb	r2, [r3, #0]
 8008a20:	4b61      	ldr	r3, [pc, #388]	@ (8008ba8 <bldc_interface_process_packet+0x1694>)
 8008a22:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
		appconf.app_chuk_conf.hyst = buffer_get_float32_auto(data, &ind);
 8008a26:	f107 030c 	add.w	r3, r7, #12
 8008a2a:	4619      	mov	r1, r3
 8008a2c:	6878      	ldr	r0, [r7, #4]
 8008a2e:	f000 facd 	bl	8008fcc <buffer_get_float32_auto>
 8008a32:	eef0 7a40 	vmov.f32	s15, s0
 8008a36:	4b5c      	ldr	r3, [pc, #368]	@ (8008ba8 <bldc_interface_process_packet+0x1694>)
 8008a38:	edc3 7a28 	vstr	s15, [r3, #160]	@ 0xa0
		appconf.app_chuk_conf.ramp_time_pos = buffer_get_float32_auto(data, &ind);
 8008a3c:	f107 030c 	add.w	r3, r7, #12
 8008a40:	4619      	mov	r1, r3
 8008a42:	6878      	ldr	r0, [r7, #4]
 8008a44:	f000 fac2 	bl	8008fcc <buffer_get_float32_auto>
 8008a48:	eef0 7a40 	vmov.f32	s15, s0
 8008a4c:	4b56      	ldr	r3, [pc, #344]	@ (8008ba8 <bldc_interface_process_packet+0x1694>)
 8008a4e:	edc3 7a29 	vstr	s15, [r3, #164]	@ 0xa4
		appconf.app_chuk_conf.ramp_time_neg = buffer_get_float32_auto(data, &ind);
 8008a52:	f107 030c 	add.w	r3, r7, #12
 8008a56:	4619      	mov	r1, r3
 8008a58:	6878      	ldr	r0, [r7, #4]
 8008a5a:	f000 fab7 	bl	8008fcc <buffer_get_float32_auto>
 8008a5e:	eef0 7a40 	vmov.f32	s15, s0
 8008a62:	4b51      	ldr	r3, [pc, #324]	@ (8008ba8 <bldc_interface_process_packet+0x1694>)
 8008a64:	edc3 7a2a 	vstr	s15, [r3, #168]	@ 0xa8
		appconf.app_chuk_conf.stick_erpm_per_s_in_cc = buffer_get_float32_auto(data, &ind);
 8008a68:	f107 030c 	add.w	r3, r7, #12
 8008a6c:	4619      	mov	r1, r3
 8008a6e:	6878      	ldr	r0, [r7, #4]
 8008a70:	f000 faac 	bl	8008fcc <buffer_get_float32_auto>
 8008a74:	eef0 7a40 	vmov.f32	s15, s0
 8008a78:	4b4b      	ldr	r3, [pc, #300]	@ (8008ba8 <bldc_interface_process_packet+0x1694>)
 8008a7a:	edc3 7a2b 	vstr	s15, [r3, #172]	@ 0xac
		appconf.app_chuk_conf.throttle_exp = buffer_get_float32_auto(data, &ind);
 8008a7e:	f107 030c 	add.w	r3, r7, #12
 8008a82:	4619      	mov	r1, r3
 8008a84:	6878      	ldr	r0, [r7, #4]
 8008a86:	f000 faa1 	bl	8008fcc <buffer_get_float32_auto>
 8008a8a:	eef0 7a40 	vmov.f32	s15, s0
 8008a8e:	4b46      	ldr	r3, [pc, #280]	@ (8008ba8 <bldc_interface_process_packet+0x1694>)
 8008a90:	edc3 7a2c 	vstr	s15, [r3, #176]	@ 0xb0
		appconf.app_chuk_conf.throttle_exp_brake = buffer_get_float32_auto(data, &ind);
 8008a94:	f107 030c 	add.w	r3, r7, #12
 8008a98:	4619      	mov	r1, r3
 8008a9a:	6878      	ldr	r0, [r7, #4]
 8008a9c:	f000 fa96 	bl	8008fcc <buffer_get_float32_auto>
 8008aa0:	eef0 7a40 	vmov.f32	s15, s0
 8008aa4:	4b40      	ldr	r3, [pc, #256]	@ (8008ba8 <bldc_interface_process_packet+0x1694>)
 8008aa6:	edc3 7a2d 	vstr	s15, [r3, #180]	@ 0xb4
		appconf.app_chuk_conf.throttle_exp_mode = data[ind++];
 8008aaa:	68fb      	ldr	r3, [r7, #12]
 8008aac:	1c5a      	adds	r2, r3, #1
 8008aae:	60fa      	str	r2, [r7, #12]
 8008ab0:	461a      	mov	r2, r3
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	4413      	add	r3, r2
 8008ab6:	781a      	ldrb	r2, [r3, #0]
 8008ab8:	4b3b      	ldr	r3, [pc, #236]	@ (8008ba8 <bldc_interface_process_packet+0x1694>)
 8008aba:	f883 20b8 	strb.w	r2, [r3, #184]	@ 0xb8
		appconf.app_chuk_conf.multi_esc = data[ind++];
 8008abe:	68fb      	ldr	r3, [r7, #12]
 8008ac0:	1c5a      	adds	r2, r3, #1
 8008ac2:	60fa      	str	r2, [r7, #12]
 8008ac4:	461a      	mov	r2, r3
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	4413      	add	r3, r2
 8008aca:	781b      	ldrb	r3, [r3, #0]
 8008acc:	2b00      	cmp	r3, #0
 8008ace:	bf14      	ite	ne
 8008ad0:	2301      	movne	r3, #1
 8008ad2:	2300      	moveq	r3, #0
 8008ad4:	b2da      	uxtb	r2, r3
 8008ad6:	4b34      	ldr	r3, [pc, #208]	@ (8008ba8 <bldc_interface_process_packet+0x1694>)
 8008ad8:	f883 20b9 	strb.w	r2, [r3, #185]	@ 0xb9
		appconf.app_chuk_conf.tc = data[ind++];
 8008adc:	68fb      	ldr	r3, [r7, #12]
 8008ade:	1c5a      	adds	r2, r3, #1
 8008ae0:	60fa      	str	r2, [r7, #12]
 8008ae2:	461a      	mov	r2, r3
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	4413      	add	r3, r2
 8008ae8:	781b      	ldrb	r3, [r3, #0]
 8008aea:	2b00      	cmp	r3, #0
 8008aec:	bf14      	ite	ne
 8008aee:	2301      	movne	r3, #1
 8008af0:	2300      	moveq	r3, #0
 8008af2:	b2da      	uxtb	r2, r3
 8008af4:	4b2c      	ldr	r3, [pc, #176]	@ (8008ba8 <bldc_interface_process_packet+0x1694>)
 8008af6:	f883 20ba 	strb.w	r2, [r3, #186]	@ 0xba
		appconf.app_chuk_conf.tc_max_diff = buffer_get_float32_auto(data, &ind);
 8008afa:	f107 030c 	add.w	r3, r7, #12
 8008afe:	4619      	mov	r1, r3
 8008b00:	6878      	ldr	r0, [r7, #4]
 8008b02:	f000 fa63 	bl	8008fcc <buffer_get_float32_auto>
 8008b06:	eef0 7a40 	vmov.f32	s15, s0
 8008b0a:	4b27      	ldr	r3, [pc, #156]	@ (8008ba8 <bldc_interface_process_packet+0x1694>)
 8008b0c:	edc3 7a2f 	vstr	s15, [r3, #188]	@ 0xbc

		appconf.app_nrf_conf.speed = data[ind++];
 8008b10:	68fb      	ldr	r3, [r7, #12]
 8008b12:	1c5a      	adds	r2, r3, #1
 8008b14:	60fa      	str	r2, [r7, #12]
 8008b16:	461a      	mov	r2, r3
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	4413      	add	r3, r2
 8008b1c:	781a      	ldrb	r2, [r3, #0]
 8008b1e:	4b22      	ldr	r3, [pc, #136]	@ (8008ba8 <bldc_interface_process_packet+0x1694>)
 8008b20:	f883 20c0 	strb.w	r2, [r3, #192]	@ 0xc0
		appconf.app_nrf_conf.power = data[ind++];
 8008b24:	68fb      	ldr	r3, [r7, #12]
 8008b26:	1c5a      	adds	r2, r3, #1
 8008b28:	60fa      	str	r2, [r7, #12]
 8008b2a:	461a      	mov	r2, r3
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	4413      	add	r3, r2
 8008b30:	781a      	ldrb	r2, [r3, #0]
 8008b32:	4b1d      	ldr	r3, [pc, #116]	@ (8008ba8 <bldc_interface_process_packet+0x1694>)
 8008b34:	f883 20c1 	strb.w	r2, [r3, #193]	@ 0xc1
		appconf.app_nrf_conf.crc_type = data[ind++];
 8008b38:	68fb      	ldr	r3, [r7, #12]
 8008b3a:	1c5a      	adds	r2, r3, #1
 8008b3c:	60fa      	str	r2, [r7, #12]
 8008b3e:	461a      	mov	r2, r3
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	4413      	add	r3, r2
 8008b44:	781a      	ldrb	r2, [r3, #0]
 8008b46:	4b18      	ldr	r3, [pc, #96]	@ (8008ba8 <bldc_interface_process_packet+0x1694>)
 8008b48:	f883 20c2 	strb.w	r2, [r3, #194]	@ 0xc2
		appconf.app_nrf_conf.retry_delay = data[ind++];
 8008b4c:	68fb      	ldr	r3, [r7, #12]
 8008b4e:	1c5a      	adds	r2, r3, #1
 8008b50:	60fa      	str	r2, [r7, #12]
 8008b52:	461a      	mov	r2, r3
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	4413      	add	r3, r2
 8008b58:	781a      	ldrb	r2, [r3, #0]
 8008b5a:	4b13      	ldr	r3, [pc, #76]	@ (8008ba8 <bldc_interface_process_packet+0x1694>)
 8008b5c:	f883 20c3 	strb.w	r2, [r3, #195]	@ 0xc3
		appconf.app_nrf_conf.retries = data[ind++];
 8008b60:	68fb      	ldr	r3, [r7, #12]
 8008b62:	1c5a      	adds	r2, r3, #1
 8008b64:	60fa      	str	r2, [r7, #12]
 8008b66:	461a      	mov	r2, r3
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	4413      	add	r3, r2
 8008b6c:	781a      	ldrb	r2, [r3, #0]
 8008b6e:	4b0e      	ldr	r3, [pc, #56]	@ (8008ba8 <bldc_interface_process_packet+0x1694>)
 8008b70:	f883 20c4 	strb.w	r2, [r3, #196]	@ 0xc4
		appconf.app_nrf_conf.channel = data[ind++];
 8008b74:	68fb      	ldr	r3, [r7, #12]
 8008b76:	1c5a      	adds	r2, r3, #1
 8008b78:	60fa      	str	r2, [r7, #12]
 8008b7a:	461a      	mov	r2, r3
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	4413      	add	r3, r2
 8008b80:	781a      	ldrb	r2, [r3, #0]
 8008b82:	4b09      	ldr	r3, [pc, #36]	@ (8008ba8 <bldc_interface_process_packet+0x1694>)
 8008b84:	f883 20c5 	strb.w	r2, [r3, #197]	@ 0xc5
		memcpy(appconf.app_nrf_conf.address, data + ind, 3);
 8008b88:	68fb      	ldr	r3, [r7, #12]
 8008b8a:	461a      	mov	r2, r3
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	441a      	add	r2, r3
 8008b90:	4b05      	ldr	r3, [pc, #20]	@ (8008ba8 <bldc_interface_process_packet+0x1694>)
 8008b92:	33c6      	adds	r3, #198	@ 0xc6
 8008b94:	8811      	ldrh	r1, [r2, #0]
 8008b96:	7892      	ldrb	r2, [r2, #2]
 8008b98:	8019      	strh	r1, [r3, #0]
 8008b9a:	709a      	strb	r2, [r3, #2]
		ind += 3;
 8008b9c:	68fb      	ldr	r3, [r7, #12]
 8008b9e:	3303      	adds	r3, #3
 8008ba0:	60fb      	str	r3, [r7, #12]
		appconf.app_nrf_conf.send_crc_ack = data[ind++];
 8008ba2:	68fb      	ldr	r3, [r7, #12]
 8008ba4:	e002      	b.n	8008bac <bldc_interface_process_packet+0x1698>
 8008ba6:	bf00      	nop
 8008ba8:	20000700 	.word	0x20000700
 8008bac:	1c5a      	adds	r2, r3, #1
 8008bae:	60fa      	str	r2, [r7, #12]
 8008bb0:	461a      	mov	r2, r3
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	4413      	add	r3, r2
 8008bb6:	781b      	ldrb	r3, [r3, #0]
 8008bb8:	2b00      	cmp	r3, #0
 8008bba:	bf14      	ite	ne
 8008bbc:	2301      	movne	r3, #1
 8008bbe:	2300      	moveq	r3, #0
 8008bc0:	b2da      	uxtb	r2, r3
 8008bc2:	4b81      	ldr	r3, [pc, #516]	@ (8008dc8 <bldc_interface_process_packet+0x18b4>)
 8008bc4:	f883 20c9 	strb.w	r2, [r3, #201]	@ 0xc9

		if (rx_appconf_func) {
 8008bc8:	4b80      	ldr	r3, [pc, #512]	@ (8008dcc <bldc_interface_process_packet+0x18b8>)
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	2b00      	cmp	r3, #0
 8008bce:	f000 80eb 	beq.w	8008da8 <bldc_interface_process_packet+0x1894>
			rx_appconf_func(&appconf);
 8008bd2:	4b7e      	ldr	r3, [pc, #504]	@ (8008dcc <bldc_interface_process_packet+0x18b8>)
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	487c      	ldr	r0, [pc, #496]	@ (8008dc8 <bldc_interface_process_packet+0x18b4>)
 8008bd8:	4798      	blx	r3
		}
		break;
 8008bda:	e0e5      	b.n	8008da8 <bldc_interface_process_packet+0x1894>

	case COMM_DETECT_MOTOR_PARAM:
		ind = 0;
 8008bdc:	2300      	movs	r3, #0
 8008bde:	60fb      	str	r3, [r7, #12]
		detect_cycle_int_limit = buffer_get_float32(data, 1000.0, &ind);
 8008be0:	f107 030c 	add.w	r3, r7, #12
 8008be4:	4619      	mov	r1, r3
 8008be6:	ed9f 0a7a 	vldr	s0, [pc, #488]	@ 8008dd0 <bldc_interface_process_packet+0x18bc>
 8008bea:	6878      	ldr	r0, [r7, #4]
 8008bec:	f000 f9d3 	bl	8008f96 <buffer_get_float32>
 8008bf0:	eef0 7a40 	vmov.f32	s15, s0
 8008bf4:	4b77      	ldr	r3, [pc, #476]	@ (8008dd4 <bldc_interface_process_packet+0x18c0>)
 8008bf6:	edc3 7a00 	vstr	s15, [r3]
		detect_coupling_k = buffer_get_float32(data, 1000.0, &ind);
 8008bfa:	f107 030c 	add.w	r3, r7, #12
 8008bfe:	4619      	mov	r1, r3
 8008c00:	ed9f 0a73 	vldr	s0, [pc, #460]	@ 8008dd0 <bldc_interface_process_packet+0x18bc>
 8008c04:	6878      	ldr	r0, [r7, #4]
 8008c06:	f000 f9c6 	bl	8008f96 <buffer_get_float32>
 8008c0a:	eef0 7a40 	vmov.f32	s15, s0
 8008c0e:	4b72      	ldr	r3, [pc, #456]	@ (8008dd8 <bldc_interface_process_packet+0x18c4>)
 8008c10:	edc3 7a00 	vstr	s15, [r3]
		for (i = 0;i < 8;i++) {
 8008c14:	2300      	movs	r3, #0
 8008c16:	61bb      	str	r3, [r7, #24]
 8008c18:	e00f      	b.n	8008c3a <bldc_interface_process_packet+0x1726>
			detect_hall_table[i] = (const signed char)(data[ind++]);
 8008c1a:	68fb      	ldr	r3, [r7, #12]
 8008c1c:	1c5a      	adds	r2, r3, #1
 8008c1e:	60fa      	str	r2, [r7, #12]
 8008c20:	461a      	mov	r2, r3
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	4413      	add	r3, r2
 8008c26:	781b      	ldrb	r3, [r3, #0]
 8008c28:	b259      	sxtb	r1, r3
 8008c2a:	4a6c      	ldr	r2, [pc, #432]	@ (8008ddc <bldc_interface_process_packet+0x18c8>)
 8008c2c:	69bb      	ldr	r3, [r7, #24]
 8008c2e:	4413      	add	r3, r2
 8008c30:	460a      	mov	r2, r1
 8008c32:	701a      	strb	r2, [r3, #0]
		for (i = 0;i < 8;i++) {
 8008c34:	69bb      	ldr	r3, [r7, #24]
 8008c36:	3301      	adds	r3, #1
 8008c38:	61bb      	str	r3, [r7, #24]
 8008c3a:	69bb      	ldr	r3, [r7, #24]
 8008c3c:	2b07      	cmp	r3, #7
 8008c3e:	ddec      	ble.n	8008c1a <bldc_interface_process_packet+0x1706>
		}
		detect_hall_res = (const signed char)(data[ind++]);
 8008c40:	68fb      	ldr	r3, [r7, #12]
 8008c42:	1c5a      	adds	r2, r3, #1
 8008c44:	60fa      	str	r2, [r7, #12]
 8008c46:	461a      	mov	r2, r3
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	4413      	add	r3, r2
 8008c4c:	781b      	ldrb	r3, [r3, #0]
 8008c4e:	b25a      	sxtb	r2, r3
 8008c50:	4b63      	ldr	r3, [pc, #396]	@ (8008de0 <bldc_interface_process_packet+0x18cc>)
 8008c52:	701a      	strb	r2, [r3, #0]

		if (rx_detect_func) {
 8008c54:	4b63      	ldr	r3, [pc, #396]	@ (8008de4 <bldc_interface_process_packet+0x18d0>)
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	2b00      	cmp	r3, #0
 8008c5a:	f000 80a7 	beq.w	8008dac <bldc_interface_process_packet+0x1898>
			rx_detect_func(detect_cycle_int_limit, detect_coupling_k,
 8008c5e:	4b61      	ldr	r3, [pc, #388]	@ (8008de4 <bldc_interface_process_packet+0x18d0>)
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	4a5c      	ldr	r2, [pc, #368]	@ (8008dd4 <bldc_interface_process_packet+0x18c0>)
 8008c64:	edd2 7a00 	vldr	s15, [r2]
 8008c68:	4a5b      	ldr	r2, [pc, #364]	@ (8008dd8 <bldc_interface_process_packet+0x18c4>)
 8008c6a:	ed92 7a00 	vldr	s14, [r2]
 8008c6e:	4a5c      	ldr	r2, [pc, #368]	@ (8008de0 <bldc_interface_process_packet+0x18cc>)
 8008c70:	f992 2000 	ldrsb.w	r2, [r2]
 8008c74:	4611      	mov	r1, r2
 8008c76:	4859      	ldr	r0, [pc, #356]	@ (8008ddc <bldc_interface_process_packet+0x18c8>)
 8008c78:	eef0 0a47 	vmov.f32	s1, s14
 8008c7c:	eeb0 0a67 	vmov.f32	s0, s15
 8008c80:	4798      	blx	r3
					detect_hall_table, detect_hall_res);
		}
		break;
 8008c82:	e093      	b.n	8008dac <bldc_interface_process_packet+0x1898>
	case COMM_DETECT_HALL_FOC: {
		// TODO!
	} break;

	case COMM_GET_DECODED_PPM:
		ind = 0;
 8008c84:	2300      	movs	r3, #0
 8008c86:	60fb      	str	r3, [r7, #12]
		dec_ppm = buffer_get_float32(data, 1000000.0, &ind);
 8008c88:	f107 030c 	add.w	r3, r7, #12
 8008c8c:	4619      	mov	r1, r3
 8008c8e:	ed9f 0a56 	vldr	s0, [pc, #344]	@ 8008de8 <bldc_interface_process_packet+0x18d4>
 8008c92:	6878      	ldr	r0, [r7, #4]
 8008c94:	f000 f97f 	bl	8008f96 <buffer_get_float32>
 8008c98:	eef0 7a40 	vmov.f32	s15, s0
 8008c9c:	4b53      	ldr	r3, [pc, #332]	@ (8008dec <bldc_interface_process_packet+0x18d8>)
 8008c9e:	edc3 7a00 	vstr	s15, [r3]
		dec_ppm_len = buffer_get_float32(data, 1000000.0, &ind);
 8008ca2:	f107 030c 	add.w	r3, r7, #12
 8008ca6:	4619      	mov	r1, r3
 8008ca8:	ed9f 0a4f 	vldr	s0, [pc, #316]	@ 8008de8 <bldc_interface_process_packet+0x18d4>
 8008cac:	6878      	ldr	r0, [r7, #4]
 8008cae:	f000 f972 	bl	8008f96 <buffer_get_float32>
 8008cb2:	eef0 7a40 	vmov.f32	s15, s0
 8008cb6:	4b4e      	ldr	r3, [pc, #312]	@ (8008df0 <bldc_interface_process_packet+0x18dc>)
 8008cb8:	edc3 7a00 	vstr	s15, [r3]

		if (rx_dec_ppm_func) {
 8008cbc:	4b4d      	ldr	r3, [pc, #308]	@ (8008df4 <bldc_interface_process_packet+0x18e0>)
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	2b00      	cmp	r3, #0
 8008cc2:	d075      	beq.n	8008db0 <bldc_interface_process_packet+0x189c>
			rx_dec_ppm_func(dec_ppm, dec_ppm_len);
 8008cc4:	4b4b      	ldr	r3, [pc, #300]	@ (8008df4 <bldc_interface_process_packet+0x18e0>)
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	4a48      	ldr	r2, [pc, #288]	@ (8008dec <bldc_interface_process_packet+0x18d8>)
 8008cca:	edd2 7a00 	vldr	s15, [r2]
 8008cce:	4a48      	ldr	r2, [pc, #288]	@ (8008df0 <bldc_interface_process_packet+0x18dc>)
 8008cd0:	ed92 7a00 	vldr	s14, [r2]
 8008cd4:	eef0 0a47 	vmov.f32	s1, s14
 8008cd8:	eeb0 0a67 	vmov.f32	s0, s15
 8008cdc:	4798      	blx	r3
		}
		break;
 8008cde:	e067      	b.n	8008db0 <bldc_interface_process_packet+0x189c>

	case COMM_GET_DECODED_ADC:
		ind = 0;
 8008ce0:	2300      	movs	r3, #0
 8008ce2:	60fb      	str	r3, [r7, #12]
		dec_adc = buffer_get_float32(data, 1000000.0, &ind);
 8008ce4:	f107 030c 	add.w	r3, r7, #12
 8008ce8:	4619      	mov	r1, r3
 8008cea:	ed9f 0a3f 	vldr	s0, [pc, #252]	@ 8008de8 <bldc_interface_process_packet+0x18d4>
 8008cee:	6878      	ldr	r0, [r7, #4]
 8008cf0:	f000 f951 	bl	8008f96 <buffer_get_float32>
 8008cf4:	eef0 7a40 	vmov.f32	s15, s0
 8008cf8:	4b3f      	ldr	r3, [pc, #252]	@ (8008df8 <bldc_interface_process_packet+0x18e4>)
 8008cfa:	edc3 7a00 	vstr	s15, [r3]
		dec_adc_voltage = buffer_get_float32(data, 1000000.0, &ind);
 8008cfe:	f107 030c 	add.w	r3, r7, #12
 8008d02:	4619      	mov	r1, r3
 8008d04:	ed9f 0a38 	vldr	s0, [pc, #224]	@ 8008de8 <bldc_interface_process_packet+0x18d4>
 8008d08:	6878      	ldr	r0, [r7, #4]
 8008d0a:	f000 f944 	bl	8008f96 <buffer_get_float32>
 8008d0e:	eef0 7a40 	vmov.f32	s15, s0
 8008d12:	4b3a      	ldr	r3, [pc, #232]	@ (8008dfc <bldc_interface_process_packet+0x18e8>)
 8008d14:	edc3 7a00 	vstr	s15, [r3]
		// TODO for adc2

		if (rx_dec_adc_func) {
 8008d18:	4b39      	ldr	r3, [pc, #228]	@ (8008e00 <bldc_interface_process_packet+0x18ec>)
 8008d1a:	681b      	ldr	r3, [r3, #0]
 8008d1c:	2b00      	cmp	r3, #0
 8008d1e:	d049      	beq.n	8008db4 <bldc_interface_process_packet+0x18a0>
			rx_dec_adc_func(dec_adc, dec_adc_voltage);
 8008d20:	4b37      	ldr	r3, [pc, #220]	@ (8008e00 <bldc_interface_process_packet+0x18ec>)
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	4a34      	ldr	r2, [pc, #208]	@ (8008df8 <bldc_interface_process_packet+0x18e4>)
 8008d26:	edd2 7a00 	vldr	s15, [r2]
 8008d2a:	4a34      	ldr	r2, [pc, #208]	@ (8008dfc <bldc_interface_process_packet+0x18e8>)
 8008d2c:	ed92 7a00 	vldr	s14, [r2]
 8008d30:	eef0 0a47 	vmov.f32	s1, s14
 8008d34:	eeb0 0a67 	vmov.f32	s0, s15
 8008d38:	4798      	blx	r3
		}
		break;
 8008d3a:	e03b      	b.n	8008db4 <bldc_interface_process_packet+0x18a0>

	case COMM_GET_DECODED_CHUK:
		ind = 0;
 8008d3c:	2300      	movs	r3, #0
 8008d3e:	60fb      	str	r3, [r7, #12]
		dec_chuk = buffer_get_float32(data, 1000000.0, &ind);
 8008d40:	f107 030c 	add.w	r3, r7, #12
 8008d44:	4619      	mov	r1, r3
 8008d46:	ed9f 0a28 	vldr	s0, [pc, #160]	@ 8008de8 <bldc_interface_process_packet+0x18d4>
 8008d4a:	6878      	ldr	r0, [r7, #4]
 8008d4c:	f000 f923 	bl	8008f96 <buffer_get_float32>
 8008d50:	eef0 7a40 	vmov.f32	s15, s0
 8008d54:	4b2b      	ldr	r3, [pc, #172]	@ (8008e04 <bldc_interface_process_packet+0x18f0>)
 8008d56:	edc3 7a00 	vstr	s15, [r3]

		if (rx_dec_chuk_func) {
 8008d5a:	4b2b      	ldr	r3, [pc, #172]	@ (8008e08 <bldc_interface_process_packet+0x18f4>)
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	2b00      	cmp	r3, #0
 8008d60:	d02a      	beq.n	8008db8 <bldc_interface_process_packet+0x18a4>
			rx_dec_chuk_func(dec_chuk);
 8008d62:	4b29      	ldr	r3, [pc, #164]	@ (8008e08 <bldc_interface_process_packet+0x18f4>)
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	4a27      	ldr	r2, [pc, #156]	@ (8008e04 <bldc_interface_process_packet+0x18f0>)
 8008d68:	edd2 7a00 	vldr	s15, [r2]
 8008d6c:	eeb0 0a67 	vmov.f32	s0, s15
 8008d70:	4798      	blx	r3
		}
		break;
 8008d72:	e021      	b.n	8008db8 <bldc_interface_process_packet+0x18a4>

	case COMM_SET_MCCONF:
		// This is a confirmation that the new mcconf is received.
		if (rx_mcconf_received_func) {
 8008d74:	4b25      	ldr	r3, [pc, #148]	@ (8008e0c <bldc_interface_process_packet+0x18f8>)
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	2b00      	cmp	r3, #0
 8008d7a:	d01f      	beq.n	8008dbc <bldc_interface_process_packet+0x18a8>
			rx_mcconf_received_func();
 8008d7c:	4b23      	ldr	r3, [pc, #140]	@ (8008e0c <bldc_interface_process_packet+0x18f8>)
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	4798      	blx	r3
		}
		break;
 8008d82:	e01b      	b.n	8008dbc <bldc_interface_process_packet+0x18a8>

	case COMM_SET_APPCONF:
		// This is a confirmation that the new appconf is received.
		if (rx_appconf_received_func) {
 8008d84:	4b22      	ldr	r3, [pc, #136]	@ (8008e10 <bldc_interface_process_packet+0x18fc>)
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	2b00      	cmp	r3, #0
 8008d8a:	d019      	beq.n	8008dc0 <bldc_interface_process_packet+0x18ac>
			rx_appconf_received_func();
 8008d8c:	4b20      	ldr	r3, [pc, #128]	@ (8008e10 <bldc_interface_process_packet+0x18fc>)
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	4798      	blx	r3
		}
		break;
 8008d92:	e015      	b.n	8008dc0 <bldc_interface_process_packet+0x18ac>
		return;
 8008d94:	bf00      	nop
 8008d96:	e014      	b.n	8008dc2 <bldc_interface_process_packet+0x18ae>

	default:
		break;
 8008d98:	bf00      	nop
 8008d9a:	e012      	b.n	8008dc2 <bldc_interface_process_packet+0x18ae>
		break;
 8008d9c:	bf00      	nop
 8008d9e:	e010      	b.n	8008dc2 <bldc_interface_process_packet+0x18ae>
		break;
 8008da0:	bf00      	nop
 8008da2:	e00e      	b.n	8008dc2 <bldc_interface_process_packet+0x18ae>
		break;
 8008da4:	bf00      	nop
 8008da6:	e00c      	b.n	8008dc2 <bldc_interface_process_packet+0x18ae>
		break;
 8008da8:	bf00      	nop
 8008daa:	e00a      	b.n	8008dc2 <bldc_interface_process_packet+0x18ae>
		break;
 8008dac:	bf00      	nop
 8008dae:	e008      	b.n	8008dc2 <bldc_interface_process_packet+0x18ae>
		break;
 8008db0:	bf00      	nop
 8008db2:	e006      	b.n	8008dc2 <bldc_interface_process_packet+0x18ae>
		break;
 8008db4:	bf00      	nop
 8008db6:	e004      	b.n	8008dc2 <bldc_interface_process_packet+0x18ae>
		break;
 8008db8:	bf00      	nop
 8008dba:	e002      	b.n	8008dc2 <bldc_interface_process_packet+0x18ae>
		break;
 8008dbc:	bf00      	nop
 8008dbe:	e000      	b.n	8008dc2 <bldc_interface_process_packet+0x18ae>
		break;
 8008dc0:	bf00      	nop
	}
}
 8008dc2:	3720      	adds	r7, #32
 8008dc4:	46bd      	mov	sp, r7
 8008dc6:	bd80      	pop	{r7, pc}
 8008dc8:	20000700 	.word	0x20000700
 8008dcc:	2000080c 	.word	0x2000080c
 8008dd0:	447a0000 	.word	0x447a0000
 8008dd4:	200007cc 	.word	0x200007cc
 8008dd8:	200007d0 	.word	0x200007d0
 8008ddc:	200007d4 	.word	0x200007d4
 8008de0:	200007dc 	.word	0x200007dc
 8008de4:	20000810 	.word	0x20000810
 8008de8:	49742400 	.word	0x49742400
 8008dec:	200007e0 	.word	0x200007e0
 8008df0:	200007e4 	.word	0x200007e4
 8008df4:	20000814 	.word	0x20000814
 8008df8:	200007e8 	.word	0x200007e8
 8008dfc:	200007ec 	.word	0x200007ec
 8008e00:	20000818 	.word	0x20000818
 8008e04:	200007f0 	.word	0x200007f0
 8008e08:	2000081c 	.word	0x2000081c
 8008e0c:	20000820 	.word	0x20000820
 8008e10:	20000824 	.word	0x20000824

08008e14 <buffer_get_int16>:
	}

	buffer_append_uint32(buffer, res, index);
}

int16_t buffer_get_int16(const uint8_t *buffer, int32_t *index) {
 8008e14:	b480      	push	{r7}
 8008e16:	b085      	sub	sp, #20
 8008e18:	af00      	add	r7, sp, #0
 8008e1a:	6078      	str	r0, [r7, #4]
 8008e1c:	6039      	str	r1, [r7, #0]
	int16_t res =	((uint16_t) buffer[*index]) << 8 |
 8008e1e:	683b      	ldr	r3, [r7, #0]
 8008e20:	681b      	ldr	r3, [r3, #0]
 8008e22:	461a      	mov	r2, r3
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	4413      	add	r3, r2
 8008e28:	781b      	ldrb	r3, [r3, #0]
 8008e2a:	021b      	lsls	r3, r3, #8
 8008e2c:	b21a      	sxth	r2, r3
					((uint16_t) buffer[*index + 1]);
 8008e2e:	683b      	ldr	r3, [r7, #0]
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	3301      	adds	r3, #1
 8008e34:	6879      	ldr	r1, [r7, #4]
 8008e36:	440b      	add	r3, r1
 8008e38:	781b      	ldrb	r3, [r3, #0]
 8008e3a:	b21b      	sxth	r3, r3
	int16_t res =	((uint16_t) buffer[*index]) << 8 |
 8008e3c:	4313      	orrs	r3, r2
 8008e3e:	81fb      	strh	r3, [r7, #14]
	*index += 2;
 8008e40:	683b      	ldr	r3, [r7, #0]
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	1c9a      	adds	r2, r3, #2
 8008e46:	683b      	ldr	r3, [r7, #0]
 8008e48:	601a      	str	r2, [r3, #0]
	return res;
 8008e4a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8008e4e:	4618      	mov	r0, r3
 8008e50:	3714      	adds	r7, #20
 8008e52:	46bd      	mov	sp, r7
 8008e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e58:	4770      	bx	lr

08008e5a <buffer_get_uint16>:

uint16_t buffer_get_uint16(const uint8_t *buffer, int32_t *index) {
 8008e5a:	b480      	push	{r7}
 8008e5c:	b085      	sub	sp, #20
 8008e5e:	af00      	add	r7, sp, #0
 8008e60:	6078      	str	r0, [r7, #4]
 8008e62:	6039      	str	r1, [r7, #0]
	uint16_t res = 	((uint16_t) buffer[*index]) << 8 |
 8008e64:	683b      	ldr	r3, [r7, #0]
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	461a      	mov	r2, r3
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	4413      	add	r3, r2
 8008e6e:	781b      	ldrb	r3, [r3, #0]
 8008e70:	021b      	lsls	r3, r3, #8
 8008e72:	b21a      	sxth	r2, r3
					((uint16_t) buffer[*index + 1]);
 8008e74:	683b      	ldr	r3, [r7, #0]
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	3301      	adds	r3, #1
 8008e7a:	6879      	ldr	r1, [r7, #4]
 8008e7c:	440b      	add	r3, r1
 8008e7e:	781b      	ldrb	r3, [r3, #0]
 8008e80:	b21b      	sxth	r3, r3
	uint16_t res = 	((uint16_t) buffer[*index]) << 8 |
 8008e82:	4313      	orrs	r3, r2
 8008e84:	b21b      	sxth	r3, r3
 8008e86:	81fb      	strh	r3, [r7, #14]
	*index += 2;
 8008e88:	683b      	ldr	r3, [r7, #0]
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	1c9a      	adds	r2, r3, #2
 8008e8e:	683b      	ldr	r3, [r7, #0]
 8008e90:	601a      	str	r2, [r3, #0]
	return res;
 8008e92:	89fb      	ldrh	r3, [r7, #14]
}
 8008e94:	4618      	mov	r0, r3
 8008e96:	3714      	adds	r7, #20
 8008e98:	46bd      	mov	sp, r7
 8008e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e9e:	4770      	bx	lr

08008ea0 <buffer_get_int32>:

int32_t buffer_get_int32(const uint8_t *buffer, int32_t *index) {
 8008ea0:	b480      	push	{r7}
 8008ea2:	b085      	sub	sp, #20
 8008ea4:	af00      	add	r7, sp, #0
 8008ea6:	6078      	str	r0, [r7, #4]
 8008ea8:	6039      	str	r1, [r7, #0]
	int32_t res =	((uint32_t) buffer[*index]) << 24 |
 8008eaa:	683b      	ldr	r3, [r7, #0]
 8008eac:	681b      	ldr	r3, [r3, #0]
 8008eae:	461a      	mov	r2, r3
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	4413      	add	r3, r2
 8008eb4:	781b      	ldrb	r3, [r3, #0]
 8008eb6:	061a      	lsls	r2, r3, #24
					((uint32_t) buffer[*index + 1]) << 16 |
 8008eb8:	683b      	ldr	r3, [r7, #0]
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	3301      	adds	r3, #1
 8008ebe:	6879      	ldr	r1, [r7, #4]
 8008ec0:	440b      	add	r3, r1
 8008ec2:	781b      	ldrb	r3, [r3, #0]
 8008ec4:	041b      	lsls	r3, r3, #16
	int32_t res =	((uint32_t) buffer[*index]) << 24 |
 8008ec6:	431a      	orrs	r2, r3
					((uint32_t) buffer[*index + 2]) << 8 |
 8008ec8:	683b      	ldr	r3, [r7, #0]
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	3302      	adds	r3, #2
 8008ece:	6879      	ldr	r1, [r7, #4]
 8008ed0:	440b      	add	r3, r1
 8008ed2:	781b      	ldrb	r3, [r3, #0]
 8008ed4:	021b      	lsls	r3, r3, #8
					((uint32_t) buffer[*index + 1]) << 16 |
 8008ed6:	4313      	orrs	r3, r2
					((uint32_t) buffer[*index + 3]);
 8008ed8:	683a      	ldr	r2, [r7, #0]
 8008eda:	6812      	ldr	r2, [r2, #0]
 8008edc:	3203      	adds	r2, #3
 8008ede:	6879      	ldr	r1, [r7, #4]
 8008ee0:	440a      	add	r2, r1
 8008ee2:	7812      	ldrb	r2, [r2, #0]
					((uint32_t) buffer[*index + 2]) << 8 |
 8008ee4:	4313      	orrs	r3, r2
	int32_t res =	((uint32_t) buffer[*index]) << 24 |
 8008ee6:	60fb      	str	r3, [r7, #12]
	*index += 4;
 8008ee8:	683b      	ldr	r3, [r7, #0]
 8008eea:	681b      	ldr	r3, [r3, #0]
 8008eec:	1d1a      	adds	r2, r3, #4
 8008eee:	683b      	ldr	r3, [r7, #0]
 8008ef0:	601a      	str	r2, [r3, #0]
	return res;
 8008ef2:	68fb      	ldr	r3, [r7, #12]
}
 8008ef4:	4618      	mov	r0, r3
 8008ef6:	3714      	adds	r7, #20
 8008ef8:	46bd      	mov	sp, r7
 8008efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008efe:	4770      	bx	lr

08008f00 <buffer_get_uint32>:

uint32_t buffer_get_uint32(const uint8_t *buffer, int32_t *index) {
 8008f00:	b480      	push	{r7}
 8008f02:	b085      	sub	sp, #20
 8008f04:	af00      	add	r7, sp, #0
 8008f06:	6078      	str	r0, [r7, #4]
 8008f08:	6039      	str	r1, [r7, #0]
	uint32_t res =	((uint32_t) buffer[*index]) << 24 |
 8008f0a:	683b      	ldr	r3, [r7, #0]
 8008f0c:	681b      	ldr	r3, [r3, #0]
 8008f0e:	461a      	mov	r2, r3
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	4413      	add	r3, r2
 8008f14:	781b      	ldrb	r3, [r3, #0]
 8008f16:	061a      	lsls	r2, r3, #24
					((uint32_t) buffer[*index + 1]) << 16 |
 8008f18:	683b      	ldr	r3, [r7, #0]
 8008f1a:	681b      	ldr	r3, [r3, #0]
 8008f1c:	3301      	adds	r3, #1
 8008f1e:	6879      	ldr	r1, [r7, #4]
 8008f20:	440b      	add	r3, r1
 8008f22:	781b      	ldrb	r3, [r3, #0]
 8008f24:	041b      	lsls	r3, r3, #16
	uint32_t res =	((uint32_t) buffer[*index]) << 24 |
 8008f26:	431a      	orrs	r2, r3
					((uint32_t) buffer[*index + 2]) << 8 |
 8008f28:	683b      	ldr	r3, [r7, #0]
 8008f2a:	681b      	ldr	r3, [r3, #0]
 8008f2c:	3302      	adds	r3, #2
 8008f2e:	6879      	ldr	r1, [r7, #4]
 8008f30:	440b      	add	r3, r1
 8008f32:	781b      	ldrb	r3, [r3, #0]
 8008f34:	021b      	lsls	r3, r3, #8
					((uint32_t) buffer[*index + 1]) << 16 |
 8008f36:	4313      	orrs	r3, r2
					((uint32_t) buffer[*index + 3]);
 8008f38:	683a      	ldr	r2, [r7, #0]
 8008f3a:	6812      	ldr	r2, [r2, #0]
 8008f3c:	3203      	adds	r2, #3
 8008f3e:	6879      	ldr	r1, [r7, #4]
 8008f40:	440a      	add	r2, r1
 8008f42:	7812      	ldrb	r2, [r2, #0]
	uint32_t res =	((uint32_t) buffer[*index]) << 24 |
 8008f44:	4313      	orrs	r3, r2
 8008f46:	60fb      	str	r3, [r7, #12]
	*index += 4;
 8008f48:	683b      	ldr	r3, [r7, #0]
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	1d1a      	adds	r2, r3, #4
 8008f4e:	683b      	ldr	r3, [r7, #0]
 8008f50:	601a      	str	r2, [r3, #0]
	return res;
 8008f52:	68fb      	ldr	r3, [r7, #12]
}
 8008f54:	4618      	mov	r0, r3
 8008f56:	3714      	adds	r7, #20
 8008f58:	46bd      	mov	sp, r7
 8008f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f5e:	4770      	bx	lr

08008f60 <buffer_get_float16>:
					((uint64_t) buffer[*index + 7]);
	*index += 8;
	return res;
}

float buffer_get_float16(const uint8_t *buffer, float scale, int32_t *index) {
 8008f60:	b580      	push	{r7, lr}
 8008f62:	b084      	sub	sp, #16
 8008f64:	af00      	add	r7, sp, #0
 8008f66:	60f8      	str	r0, [r7, #12]
 8008f68:	ed87 0a02 	vstr	s0, [r7, #8]
 8008f6c:	6079      	str	r1, [r7, #4]
    return (float)buffer_get_int16(buffer, index) / scale;
 8008f6e:	6879      	ldr	r1, [r7, #4]
 8008f70:	68f8      	ldr	r0, [r7, #12]
 8008f72:	f7ff ff4f 	bl	8008e14 <buffer_get_int16>
 8008f76:	4603      	mov	r3, r0
 8008f78:	ee07 3a90 	vmov	s15, r3
 8008f7c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8008f80:	edd7 7a02 	vldr	s15, [r7, #8]
 8008f84:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8008f88:	eef0 7a66 	vmov.f32	s15, s13
}
 8008f8c:	eeb0 0a67 	vmov.f32	s0, s15
 8008f90:	3710      	adds	r7, #16
 8008f92:	46bd      	mov	sp, r7
 8008f94:	bd80      	pop	{r7, pc}

08008f96 <buffer_get_float32>:

float buffer_get_float32(const uint8_t *buffer, float scale, int32_t *index) {
 8008f96:	b580      	push	{r7, lr}
 8008f98:	b084      	sub	sp, #16
 8008f9a:	af00      	add	r7, sp, #0
 8008f9c:	60f8      	str	r0, [r7, #12]
 8008f9e:	ed87 0a02 	vstr	s0, [r7, #8]
 8008fa2:	6079      	str	r1, [r7, #4]
    return (float)buffer_get_int32(buffer, index) / scale;
 8008fa4:	6879      	ldr	r1, [r7, #4]
 8008fa6:	68f8      	ldr	r0, [r7, #12]
 8008fa8:	f7ff ff7a 	bl	8008ea0 <buffer_get_int32>
 8008fac:	ee07 0a90 	vmov	s15, r0
 8008fb0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8008fb4:	edd7 7a02 	vldr	s15, [r7, #8]
 8008fb8:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8008fbc:	eef0 7a66 	vmov.f32	s15, s13
}
 8008fc0:	eeb0 0a67 	vmov.f32	s0, s15
 8008fc4:	3710      	adds	r7, #16
 8008fc6:	46bd      	mov	sp, r7
 8008fc8:	bd80      	pop	{r7, pc}
	...

08008fcc <buffer_get_float32_auto>:

double buffer_get_double64(const uint8_t *buffer, double scale, int32_t *index) {
    return (double)buffer_get_int64(buffer, index) / scale;
}

float buffer_get_float32_auto(const uint8_t *buffer, int32_t *index) {
 8008fcc:	b580      	push	{r7, lr}
 8008fce:	b088      	sub	sp, #32
 8008fd0:	af00      	add	r7, sp, #0
 8008fd2:	6078      	str	r0, [r7, #4]
 8008fd4:	6039      	str	r1, [r7, #0]
	uint32_t res = buffer_get_uint32(buffer, index);
 8008fd6:	6839      	ldr	r1, [r7, #0]
 8008fd8:	6878      	ldr	r0, [r7, #4]
 8008fda:	f7ff ff91 	bl	8008f00 <buffer_get_uint32>
 8008fde:	6178      	str	r0, [r7, #20]

	int e = (res >> 23) & 0xFF;
 8008fe0:	697b      	ldr	r3, [r7, #20]
 8008fe2:	0ddb      	lsrs	r3, r3, #23
 8008fe4:	b2db      	uxtb	r3, r3
 8008fe6:	61fb      	str	r3, [r7, #28]
	uint32_t sig_i = res & 0x7FFFFF;
 8008fe8:	697b      	ldr	r3, [r7, #20]
 8008fea:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8008fee:	613b      	str	r3, [r7, #16]
	bool neg = res & (1 << 31);
 8008ff0:	697b      	ldr	r3, [r7, #20]
 8008ff2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008ff6:	2b00      	cmp	r3, #0
 8008ff8:	bf14      	ite	ne
 8008ffa:	2301      	movne	r3, #1
 8008ffc:	2300      	moveq	r3, #0
 8008ffe:	73fb      	strb	r3, [r7, #15]

	float sig = 0.0;
 8009000:	f04f 0300 	mov.w	r3, #0
 8009004:	61bb      	str	r3, [r7, #24]
	if (e != 0 || sig_i != 0) {
 8009006:	69fb      	ldr	r3, [r7, #28]
 8009008:	2b00      	cmp	r3, #0
 800900a:	d102      	bne.n	8009012 <buffer_get_float32_auto+0x46>
 800900c:	693b      	ldr	r3, [r7, #16]
 800900e:	2b00      	cmp	r3, #0
 8009010:	d021      	beq.n	8009056 <buffer_get_float32_auto+0x8a>
		sig = (float)sig_i / (8388608.0 * 2.0) + 0.5;
 8009012:	693b      	ldr	r3, [r7, #16]
 8009014:	ee07 3a90 	vmov	s15, r3
 8009018:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800901c:	ee17 0a90 	vmov	r0, s15
 8009020:	f7f7 fa92 	bl	8000548 <__aeabi_f2d>
 8009024:	f04f 0200 	mov.w	r2, #0
 8009028:	4b15      	ldr	r3, [pc, #84]	@ (8009080 <buffer_get_float32_auto+0xb4>)
 800902a:	f7f7 fc0f 	bl	800084c <__aeabi_ddiv>
 800902e:	4602      	mov	r2, r0
 8009030:	460b      	mov	r3, r1
 8009032:	4610      	mov	r0, r2
 8009034:	4619      	mov	r1, r3
 8009036:	f04f 0200 	mov.w	r2, #0
 800903a:	4b12      	ldr	r3, [pc, #72]	@ (8009084 <buffer_get_float32_auto+0xb8>)
 800903c:	f7f7 f926 	bl	800028c <__adddf3>
 8009040:	4602      	mov	r2, r0
 8009042:	460b      	mov	r3, r1
 8009044:	4610      	mov	r0, r2
 8009046:	4619      	mov	r1, r3
 8009048:	f7f7 fdce 	bl	8000be8 <__aeabi_d2f>
 800904c:	4603      	mov	r3, r0
 800904e:	61bb      	str	r3, [r7, #24]
		e -= 126;
 8009050:	69fb      	ldr	r3, [r7, #28]
 8009052:	3b7e      	subs	r3, #126	@ 0x7e
 8009054:	61fb      	str	r3, [r7, #28]
	}

	if (neg) {
 8009056:	7bfb      	ldrb	r3, [r7, #15]
 8009058:	2b00      	cmp	r3, #0
 800905a:	d005      	beq.n	8009068 <buffer_get_float32_auto+0x9c>
		sig = -sig;
 800905c:	edd7 7a06 	vldr	s15, [r7, #24]
 8009060:	eef1 7a67 	vneg.f32	s15, s15
 8009064:	edc7 7a06 	vstr	s15, [r7, #24]
	}

	return ldexpf(sig, e);
 8009068:	69f8      	ldr	r0, [r7, #28]
 800906a:	ed97 0a06 	vldr	s0, [r7, #24]
 800906e:	f014 fe5f 	bl	801dd30 <ldexpf>
 8009072:	eef0 7a40 	vmov.f32	s15, s0
}
 8009076:	eeb0 0a67 	vmov.f32	s0, s15
 800907a:	3720      	adds	r7, #32
 800907c:	46bd      	mov	sp, r7
 800907e:	bd80      	pop	{r7, pc}
 8009080:	41700000 	.word	0x41700000
 8009084:	3fe00000 	.word	0x3fe00000

08009088 <crc16>:
		0x1ad0, 0x2ab3, 0x3a92, 0xfd2e, 0xed0f, 0xdd6c, 0xcd4d, 0xbdaa, 0xad8b,
		0x9de8, 0x8dc9, 0x7c26, 0x6c07, 0x5c64, 0x4c45, 0x3ca2, 0x2c83, 0x1ce0,
		0x0cc1, 0xef1f, 0xff3e, 0xcf5d, 0xdf7c, 0xaf9b, 0xbfba, 0x8fd9, 0x9ff8,
		0x6e17, 0x7e36, 0x4e55, 0x5e74, 0x2e93, 0x3eb2, 0x0ed1, 0x1ef0 };

unsigned short crc16(unsigned char *buf, unsigned int len) {
 8009088:	b480      	push	{r7}
 800908a:	b085      	sub	sp, #20
 800908c:	af00      	add	r7, sp, #0
 800908e:	6078      	str	r0, [r7, #4]
 8009090:	6039      	str	r1, [r7, #0]
	unsigned int i;
	unsigned short cksum = 0;
 8009092:	2300      	movs	r3, #0
 8009094:	817b      	strh	r3, [r7, #10]
	for (i = 0; i < len; i++) {
 8009096:	2300      	movs	r3, #0
 8009098:	60fb      	str	r3, [r7, #12]
 800909a:	e016      	b.n	80090ca <crc16+0x42>
		cksum = crc16_tab[(((cksum >> 8) ^ *buf++) & 0xFF)] ^ (cksum << 8);
 800909c:	897b      	ldrh	r3, [r7, #10]
 800909e:	0a1b      	lsrs	r3, r3, #8
 80090a0:	b29b      	uxth	r3, r3
 80090a2:	4619      	mov	r1, r3
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	1c5a      	adds	r2, r3, #1
 80090a8:	607a      	str	r2, [r7, #4]
 80090aa:	781b      	ldrb	r3, [r3, #0]
 80090ac:	404b      	eors	r3, r1
 80090ae:	b2db      	uxtb	r3, r3
 80090b0:	4a0b      	ldr	r2, [pc, #44]	@ (80090e0 <crc16+0x58>)
 80090b2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80090b6:	b21a      	sxth	r2, r3
 80090b8:	897b      	ldrh	r3, [r7, #10]
 80090ba:	021b      	lsls	r3, r3, #8
 80090bc:	b21b      	sxth	r3, r3
 80090be:	4053      	eors	r3, r2
 80090c0:	b21b      	sxth	r3, r3
 80090c2:	817b      	strh	r3, [r7, #10]
	for (i = 0; i < len; i++) {
 80090c4:	68fb      	ldr	r3, [r7, #12]
 80090c6:	3301      	adds	r3, #1
 80090c8:	60fb      	str	r3, [r7, #12]
 80090ca:	68fa      	ldr	r2, [r7, #12]
 80090cc:	683b      	ldr	r3, [r7, #0]
 80090ce:	429a      	cmp	r2, r3
 80090d0:	d3e4      	bcc.n	800909c <crc16+0x14>
	}
	return cksum;
 80090d2:	897b      	ldrh	r3, [r7, #10]
}
 80090d4:	4618      	mov	r0, r3
 80090d6:	3714      	adds	r7, #20
 80090d8:	46bd      	mov	sp, r7
 80090da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090de:	4770      	bx	lr
 80090e0:	08021dd0 	.word	0x08021dd0

080090e4 <decode_VESC>:
			((uint32_t)(flash ? CAN_PACKET_CONF_STORE_FOC_ERPMS :
					CAN_PACKET_CONF_FOC_ERPMS) << 8), buffer, send_index);
#endif
}

void decode_VESC(void){
 80090e4:	b590      	push	{r4, r7, lr}
 80090e6:	b08f      	sub	sp, #60	@ 0x3c
 80090e8:	af00      	add	r7, sp, #0
	int32_t ind = 0;
 80090ea:	2300      	movs	r3, #0
 80090ec:	60bb      	str	r3, [r7, #8]
	uint8_t vesc_index = 0;
 80090ee:	2300      	movs	r3, #0
 80090f0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	unsigned int rxbuf_len;
	unsigned int rxbuf_ind;
	uint8_t crc_low;
	uint8_t crc_high;
	uint8_t commands_send;
	int32_t indexbuf = 0;
 80090f4:	2300      	movs	r3, #0
 80090f6:	607b      	str	r3, [r7, #4]
	//			CAN_PACKET_ID cmd = rxmsg.Rxmsg.ExtId >> 8;
	//
	//			if (id == 255 || id == RNS_TO_VESC) {
	//				switch (cmd) {

	uint8_t id = vescmsg.Rxmsg.ExtId & 0xFF;
 80090f8:	4bbc      	ldr	r3, [pc, #752]	@ (80093ec <decode_VESC+0x308>)
 80090fa:	685b      	ldr	r3, [r3, #4]
 80090fc:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	CAN_PACKET_ID cmd = vescmsg.Rxmsg.ExtId >> 8;
 8009100:	4bba      	ldr	r3, [pc, #744]	@ (80093ec <decode_VESC+0x308>)
 8009102:	685b      	ldr	r3, [r3, #4]
 8009104:	0a1b      	lsrs	r3, r3, #8
 8009106:	623b      	str	r3, [r7, #32]

	vesc_index = id - VESC1;
 8009108:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800910c:	3b70      	subs	r3, #112	@ 0x70
 800910e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

	if(vesc_index < 0 || vesc_index > VESCPOSLAST - VESC1){	//out of id range
 8009112:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009116:	2b09      	cmp	r3, #9
 8009118:	d90f      	bls.n	800913a <decode_VESC+0x56>
		vesc.error_flag = 1;
 800911a:	4ab5      	ldr	r2, [pc, #724]	@ (80093f0 <decode_VESC+0x30c>)
 800911c:	f892 3130 	ldrb.w	r3, [r2, #304]	@ 0x130
 8009120:	f043 0308 	orr.w	r3, r3, #8
 8009124:	f882 3130 	strb.w	r3, [r2, #304]	@ 0x130
		sprintf(vescerror, "VESC id (%d) is not in range", (int)id);
 8009128:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800912c:	461a      	mov	r2, r3
 800912e:	49b1      	ldr	r1, [pc, #708]	@ (80093f4 <decode_VESC+0x310>)
 8009130:	48b1      	ldr	r0, [pc, #708]	@ (80093f8 <decode_VESC+0x314>)
 8009132:	f014 fc87 	bl	801da44 <siprintf>
 8009136:	f000 bc3f 	b.w	80099b8 <decode_VESC+0x8d4>
		return;
	}else
		infolist[vesc_index].CANid = id;
 800913a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800913e:	4aaf      	ldr	r2, [pc, #700]	@ (80093fc <decode_VESC+0x318>)
 8009140:	2174      	movs	r1, #116	@ 0x74
 8009142:	fb01 f303 	mul.w	r3, r1, r3
 8009146:	4413      	add	r3, r2
 8009148:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800914c:	701a      	strb	r2, [r3, #0]

	switch (cmd) {
 800914e:	6a3b      	ldr	r3, [r7, #32]
 8009150:	3b05      	subs	r3, #5
 8009152:	2b3d      	cmp	r3, #61	@ 0x3d
 8009154:	f200 83c8 	bhi.w	80098e8 <decode_VESC+0x804>
 8009158:	a201      	add	r2, pc, #4	@ (adr r2, 8009160 <decode_VESC+0x7c>)
 800915a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800915e:	bf00      	nop
 8009160:	08009259 	.word	0x08009259
 8009164:	08009273 	.word	0x08009273
 8009168:	080092a7 	.word	0x080092a7
 800916c:	08009341 	.word	0x08009341
 8009170:	08009377 	.word	0x08009377
 8009174:	080098e9 	.word	0x080098e9
 8009178:	080098e9 	.word	0x080098e9
 800917c:	080098e9 	.word	0x080098e9
 8009180:	080098e9 	.word	0x080098e9
 8009184:	08009415 	.word	0x08009415
 8009188:	08009463 	.word	0x08009463
 800918c:	080094b1 	.word	0x080094b1
 8009190:	080098e9 	.word	0x080098e9
 8009194:	080098e9 	.word	0x080098e9
 8009198:	080098e9 	.word	0x080098e9
 800919c:	080098e9 	.word	0x080098e9
 80091a0:	080098e9 	.word	0x080098e9
 80091a4:	080098e9 	.word	0x080098e9
 80091a8:	080098e9 	.word	0x080098e9
 80091ac:	080098e9 	.word	0x080098e9
 80091b0:	080098e9 	.word	0x080098e9
 80091b4:	080098e9 	.word	0x080098e9
 80091b8:	0800954b 	.word	0x0800954b
 80091bc:	080098e9 	.word	0x080098e9
 80091c0:	080098e9 	.word	0x080098e9
 80091c4:	080098e9 	.word	0x080098e9
 80091c8:	080098e9 	.word	0x080098e9
 80091cc:	080097e1 	.word	0x080097e1
 80091d0:	08009865 	.word	0x08009865
 80091d4:	080098e9 	.word	0x080098e9
 80091d8:	080098e9 	.word	0x080098e9
 80091dc:	080098e9 	.word	0x080098e9
 80091e0:	080098e9 	.word	0x080098e9
 80091e4:	080098e9 	.word	0x080098e9
 80091e8:	080098e9 	.word	0x080098e9
 80091ec:	080098e9 	.word	0x080098e9
 80091f0:	080098e9 	.word	0x080098e9
 80091f4:	080098e9 	.word	0x080098e9
 80091f8:	080098e9 	.word	0x080098e9
 80091fc:	080098e9 	.word	0x080098e9
 8009200:	080098e9 	.word	0x080098e9
 8009204:	080098e9 	.word	0x080098e9
 8009208:	080098e9 	.word	0x080098e9
 800920c:	080098e9 	.word	0x080098e9
 8009210:	080098e9 	.word	0x080098e9
 8009214:	080098e9 	.word	0x080098e9
 8009218:	080098e9 	.word	0x080098e9
 800921c:	080098e9 	.word	0x080098e9
 8009220:	080098e9 	.word	0x080098e9
 8009224:	080098e9 	.word	0x080098e9
 8009228:	080098e9 	.word	0x080098e9
 800922c:	080097b9 	.word	0x080097b9
 8009230:	080098e9 	.word	0x080098e9
 8009234:	080095c3 	.word	0x080095c3
 8009238:	080098e9 	.word	0x080098e9
 800923c:	080098e9 	.word	0x080098e9
 8009240:	080098e9 	.word	0x080098e9
 8009244:	080098e9 	.word	0x080098e9
 8009248:	0800965d 	.word	0x0800965d
 800924c:	080096ab 	.word	0x080096ab
 8009250:	080096f9 	.word	0x080096f9
 8009254:	08009747 	.word	0x08009747
	case CAN_PACKET_FILL_RX_BUFFER:
		memcpy(rx_buffer + vescmsg.Data[0], vescmsg.Data + 1, vescmsg.Rxmsg.DLC - 1);
 8009258:	4b64      	ldr	r3, [pc, #400]	@ (80093ec <decode_VESC+0x308>)
 800925a:	7f1b      	ldrb	r3, [r3, #28]
 800925c:	461a      	mov	r2, r3
 800925e:	4b68      	ldr	r3, [pc, #416]	@ (8009400 <decode_VESC+0x31c>)
 8009260:	18d0      	adds	r0, r2, r3
 8009262:	4968      	ldr	r1, [pc, #416]	@ (8009404 <decode_VESC+0x320>)
 8009264:	4b61      	ldr	r3, [pc, #388]	@ (80093ec <decode_VESC+0x308>)
 8009266:	691b      	ldr	r3, [r3, #16]
 8009268:	3b01      	subs	r3, #1
 800926a:	461a      	mov	r2, r3
 800926c:	f014 fd4b 	bl	801dd06 <memcpy>
		break;
 8009270:	e343      	b.n	80098fa <decode_VESC+0x816>

	case CAN_PACKET_FILL_RX_BUFFER_LONG:
		rxbuf_ind = (unsigned int)vescmsg.Data[0] << 8;
 8009272:	4b5e      	ldr	r3, [pc, #376]	@ (80093ec <decode_VESC+0x308>)
 8009274:	7f1b      	ldrb	r3, [r3, #28]
 8009276:	021b      	lsls	r3, r3, #8
 8009278:	60fb      	str	r3, [r7, #12]
		rxbuf_ind |= vescmsg.Data[1];
 800927a:	4b5c      	ldr	r3, [pc, #368]	@ (80093ec <decode_VESC+0x308>)
 800927c:	7f5b      	ldrb	r3, [r3, #29]
 800927e:	461a      	mov	r2, r3
 8009280:	68fb      	ldr	r3, [r7, #12]
 8009282:	4313      	orrs	r3, r2
 8009284:	60fb      	str	r3, [r7, #12]
		if (rxbuf_ind < RX_BUFFER_SIZE) {
 8009286:	68fb      	ldr	r3, [r7, #12]
 8009288:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800928c:	f080 832e 	bcs.w	80098ec <decode_VESC+0x808>
			memcpy(rx_buffer + rxbuf_ind, vescmsg.Data + 2, vescmsg.Rxmsg.DLC - 2);
 8009290:	68fb      	ldr	r3, [r7, #12]
 8009292:	4a5b      	ldr	r2, [pc, #364]	@ (8009400 <decode_VESC+0x31c>)
 8009294:	1898      	adds	r0, r3, r2
 8009296:	495c      	ldr	r1, [pc, #368]	@ (8009408 <decode_VESC+0x324>)
 8009298:	4b54      	ldr	r3, [pc, #336]	@ (80093ec <decode_VESC+0x308>)
 800929a:	691b      	ldr	r3, [r3, #16]
 800929c:	3b02      	subs	r3, #2
 800929e:	461a      	mov	r2, r3
 80092a0:	f014 fd31 	bl	801dd06 <memcpy>
		}
		break;
 80092a4:	e322      	b.n	80098ec <decode_VESC+0x808>

	case CAN_PACKET_PROCESS_RX_BUFFER:
		ind = 0;
 80092a6:	2300      	movs	r3, #0
 80092a8:	60bb      	str	r3, [r7, #8]
		rx_buffer_last_id = vescmsg.Data[ind++];
 80092aa:	68bb      	ldr	r3, [r7, #8]
 80092ac:	1c5a      	adds	r2, r3, #1
 80092ae:	60ba      	str	r2, [r7, #8]
 80092b0:	4a4e      	ldr	r2, [pc, #312]	@ (80093ec <decode_VESC+0x308>)
 80092b2:	4413      	add	r3, r2
 80092b4:	7f1b      	ldrb	r3, [r3, #28]
 80092b6:	461a      	mov	r2, r3
 80092b8:	4b54      	ldr	r3, [pc, #336]	@ (800940c <decode_VESC+0x328>)
 80092ba:	601a      	str	r2, [r3, #0]
		commands_send = vescmsg.Data[ind++];
 80092bc:	68bb      	ldr	r3, [r7, #8]
 80092be:	1c5a      	adds	r2, r3, #1
 80092c0:	60ba      	str	r2, [r7, #8]
 80092c2:	4a4a      	ldr	r2, [pc, #296]	@ (80093ec <decode_VESC+0x308>)
 80092c4:	4413      	add	r3, r2
 80092c6:	7f1b      	ldrb	r3, [r3, #28]
 80092c8:	74fb      	strb	r3, [r7, #19]
		rxbuf_len = (unsigned int)vescmsg.Data[ind++] << 8;
 80092ca:	68bb      	ldr	r3, [r7, #8]
 80092cc:	1c5a      	adds	r2, r3, #1
 80092ce:	60ba      	str	r2, [r7, #8]
 80092d0:	4a46      	ldr	r2, [pc, #280]	@ (80093ec <decode_VESC+0x308>)
 80092d2:	4413      	add	r3, r2
 80092d4:	7f1b      	ldrb	r3, [r3, #28]
 80092d6:	021b      	lsls	r3, r3, #8
 80092d8:	61bb      	str	r3, [r7, #24]
		rxbuf_len |= (unsigned int)vescmsg.Data[ind++];
 80092da:	68bb      	ldr	r3, [r7, #8]
 80092dc:	1c5a      	adds	r2, r3, #1
 80092de:	60ba      	str	r2, [r7, #8]
 80092e0:	4a42      	ldr	r2, [pc, #264]	@ (80093ec <decode_VESC+0x308>)
 80092e2:	4413      	add	r3, r2
 80092e4:	7f1b      	ldrb	r3, [r3, #28]
 80092e6:	461a      	mov	r2, r3
 80092e8:	69bb      	ldr	r3, [r7, #24]
 80092ea:	4313      	orrs	r3, r2
 80092ec:	61bb      	str	r3, [r7, #24]

		if (rxbuf_len > RX_BUFFER_SIZE) {
 80092ee:	69bb      	ldr	r3, [r7, #24]
 80092f0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80092f4:	f200 82fc 	bhi.w	80098f0 <decode_VESC+0x80c>
			break;
		}

		crc_high = vescmsg.Data[ind++];
 80092f8:	68bb      	ldr	r3, [r7, #8]
 80092fa:	1c5a      	adds	r2, r3, #1
 80092fc:	60ba      	str	r2, [r7, #8]
 80092fe:	4a3b      	ldr	r2, [pc, #236]	@ (80093ec <decode_VESC+0x308>)
 8009300:	4413      	add	r3, r2
 8009302:	7f1b      	ldrb	r3, [r3, #28]
 8009304:	74bb      	strb	r3, [r7, #18]
		crc_low = vescmsg.Data[ind++];
 8009306:	68bb      	ldr	r3, [r7, #8]
 8009308:	1c5a      	adds	r2, r3, #1
 800930a:	60ba      	str	r2, [r7, #8]
 800930c:	4a37      	ldr	r2, [pc, #220]	@ (80093ec <decode_VESC+0x308>)
 800930e:	4413      	add	r3, r2
 8009310:	7f1b      	ldrb	r3, [r3, #28]
 8009312:	747b      	strb	r3, [r7, #17]

		if (crc16(rx_buffer, rxbuf_len)
 8009314:	69b9      	ldr	r1, [r7, #24]
 8009316:	483a      	ldr	r0, [pc, #232]	@ (8009400 <decode_VESC+0x31c>)
 8009318:	f7ff feb6 	bl	8009088 <crc16>
 800931c:	4603      	mov	r3, r0
 800931e:	4619      	mov	r1, r3
				== ((unsigned short) crc_high << 8
 8009320:	7cbb      	ldrb	r3, [r7, #18]
 8009322:	021a      	lsls	r2, r3, #8
						| (unsigned short) crc_low)) {
 8009324:	7c7b      	ldrb	r3, [r7, #17]
 8009326:	4313      	orrs	r3, r2
		if (crc16(rx_buffer, rxbuf_len)
 8009328:	4299      	cmp	r1, r3
 800932a:	f040 82e3 	bne.w	80098f4 <decode_VESC+0x810>
			if(commands_send==1)
 800932e:	7cfb      	ldrb	r3, [r7, #19]
 8009330:	2b01      	cmp	r3, #1
 8009332:	f040 82df 	bne.w	80098f4 <decode_VESC+0x810>
				bldc_interface_process_packet(rx_buffer, rxbuf_len);
 8009336:	69b9      	ldr	r1, [r7, #24]
 8009338:	4831      	ldr	r0, [pc, #196]	@ (8009400 <decode_VESC+0x31c>)
 800933a:	f7fe f8eb 	bl	8007514 <bldc_interface_process_packet>
		}
		break;
 800933e:	e2d9      	b.n	80098f4 <decode_VESC+0x810>

	case CAN_PACKET_PROCESS_SHORT_BUFFER:
		ind = 0;
 8009340:	2300      	movs	r3, #0
 8009342:	60bb      	str	r3, [r7, #8]
		rx_buffer_last_id = vescmsg.Data[ind++];
 8009344:	68bb      	ldr	r3, [r7, #8]
 8009346:	1c5a      	adds	r2, r3, #1
 8009348:	60ba      	str	r2, [r7, #8]
 800934a:	4a28      	ldr	r2, [pc, #160]	@ (80093ec <decode_VESC+0x308>)
 800934c:	4413      	add	r3, r2
 800934e:	7f1b      	ldrb	r3, [r3, #28]
 8009350:	461a      	mov	r2, r3
 8009352:	4b2e      	ldr	r3, [pc, #184]	@ (800940c <decode_VESC+0x328>)
 8009354:	601a      	str	r2, [r3, #0]
		commands_send = vescmsg.Data[ind++];
 8009356:	68bb      	ldr	r3, [r7, #8]
 8009358:	1c5a      	adds	r2, r3, #1
 800935a:	60ba      	str	r2, [r7, #8]
 800935c:	4a23      	ldr	r2, [pc, #140]	@ (80093ec <decode_VESC+0x308>)
 800935e:	4413      	add	r3, r2
 8009360:	7f1b      	ldrb	r3, [r3, #28]
 8009362:	74fb      	strb	r3, [r7, #19]

		if(commands_send==1)
 8009364:	7cfb      	ldrb	r3, [r7, #19]
 8009366:	2b01      	cmp	r3, #1
 8009368:	f040 82c6 	bne.w	80098f8 <decode_VESC+0x814>
			bldc_interface_process_packet(rx_buffer, rxbuf_len);
 800936c:	69b9      	ldr	r1, [r7, #24]
 800936e:	4824      	ldr	r0, [pc, #144]	@ (8009400 <decode_VESC+0x31c>)
 8009370:	f7fe f8d0 	bl	8007514 <bldc_interface_process_packet>
		break;
 8009374:	e2c0      	b.n	80098f8 <decode_VESC+0x814>
	default:
		break;

	case CAN_PACKET_STATUS:
		infolist[vesc_index].rpm = buffer_get_float32((uint8_t*)&vescmsg.Data, 1.0, &indexbuf);
 8009376:	f897 4027 	ldrb.w	r4, [r7, #39]	@ 0x27
 800937a:	1d3b      	adds	r3, r7, #4
 800937c:	4619      	mov	r1, r3
 800937e:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8009382:	4823      	ldr	r0, [pc, #140]	@ (8009410 <decode_VESC+0x32c>)
 8009384:	f7ff fe07 	bl	8008f96 <buffer_get_float32>
 8009388:	eef0 7a40 	vmov.f32	s15, s0
 800938c:	4a1b      	ldr	r2, [pc, #108]	@ (80093fc <decode_VESC+0x318>)
 800938e:	2374      	movs	r3, #116	@ 0x74
 8009390:	fb04 f303 	mul.w	r3, r4, r3
 8009394:	4413      	add	r3, r2
 8009396:	3304      	adds	r3, #4
 8009398:	edc3 7a00 	vstr	s15, [r3]
		infolist[vesc_index].current = buffer_get_float16((uint8_t*)&vescmsg.Data, 1e1, &indexbuf);
 800939c:	f897 4027 	ldrb.w	r4, [r7, #39]	@ 0x27
 80093a0:	1d3b      	adds	r3, r7, #4
 80093a2:	4619      	mov	r1, r3
 80093a4:	eeb2 0a04 	vmov.f32	s0, #36	@ 0x41200000  10.0
 80093a8:	4819      	ldr	r0, [pc, #100]	@ (8009410 <decode_VESC+0x32c>)
 80093aa:	f7ff fdd9 	bl	8008f60 <buffer_get_float16>
 80093ae:	eef0 7a40 	vmov.f32	s15, s0
 80093b2:	4a12      	ldr	r2, [pc, #72]	@ (80093fc <decode_VESC+0x318>)
 80093b4:	2374      	movs	r3, #116	@ 0x74
 80093b6:	fb04 f303 	mul.w	r3, r4, r3
 80093ba:	4413      	add	r3, r2
 80093bc:	3308      	adds	r3, #8
 80093be:	edc3 7a00 	vstr	s15, [r3]
		infolist[vesc_index].duty_cycle = buffer_get_float16((uint8_t*)&vescmsg.Data, 1e1, &indexbuf);
 80093c2:	f897 4027 	ldrb.w	r4, [r7, #39]	@ 0x27
 80093c6:	1d3b      	adds	r3, r7, #4
 80093c8:	4619      	mov	r1, r3
 80093ca:	eeb2 0a04 	vmov.f32	s0, #36	@ 0x41200000  10.0
 80093ce:	4810      	ldr	r0, [pc, #64]	@ (8009410 <decode_VESC+0x32c>)
 80093d0:	f7ff fdc6 	bl	8008f60 <buffer_get_float16>
 80093d4:	eef0 7a40 	vmov.f32	s15, s0
 80093d8:	4a08      	ldr	r2, [pc, #32]	@ (80093fc <decode_VESC+0x318>)
 80093da:	2374      	movs	r3, #116	@ 0x74
 80093dc:	fb04 f303 	mul.w	r3, r4, r3
 80093e0:	4413      	add	r3, r2
 80093e2:	330c      	adds	r3, #12
 80093e4:	edc3 7a00 	vstr	s15, [r3]
		break;
 80093e8:	e287      	b.n	80098fa <decode_VESC+0x816>
 80093ea:	bf00      	nop
 80093ec:	20009140 	.word	0x20009140
 80093f0:	20008a38 	.word	0x20008a38
 80093f4:	080215bc 	.word	0x080215bc
 80093f8:	200092c8 	.word	0x200092c8
 80093fc:	20007ed0 	.word	0x20007ed0
 8009400:	20008d94 	.word	0x20008d94
 8009404:	2000915d 	.word	0x2000915d
 8009408:	2000915e 	.word	0x2000915e
 800940c:	20000828 	.word	0x20000828
 8009410:	2000915c 	.word	0x2000915c
	case CAN_PACKET_STATUS_2:
		infolist[vesc_index].amp_hours = buffer_get_float32((uint8_t*)&vescmsg.Data, 1e1, &indexbuf);
 8009414:	f897 4027 	ldrb.w	r4, [r7, #39]	@ 0x27
 8009418:	1d3b      	adds	r3, r7, #4
 800941a:	4619      	mov	r1, r3
 800941c:	eeb2 0a04 	vmov.f32	s0, #36	@ 0x41200000  10.0
 8009420:	48de      	ldr	r0, [pc, #888]	@ (800979c <decode_VESC+0x6b8>)
 8009422:	f7ff fdb8 	bl	8008f96 <buffer_get_float32>
 8009426:	eef0 7a40 	vmov.f32	s15, s0
 800942a:	4add      	ldr	r2, [pc, #884]	@ (80097a0 <decode_VESC+0x6bc>)
 800942c:	2374      	movs	r3, #116	@ 0x74
 800942e:	fb04 f303 	mul.w	r3, r4, r3
 8009432:	4413      	add	r3, r2
 8009434:	3310      	adds	r3, #16
 8009436:	edc3 7a00 	vstr	s15, [r3]
		infolist[vesc_index].amp_hours_charged = buffer_get_float32((uint8_t*)&vescmsg.Data, 1e1, &indexbuf);
 800943a:	f897 4027 	ldrb.w	r4, [r7, #39]	@ 0x27
 800943e:	1d3b      	adds	r3, r7, #4
 8009440:	4619      	mov	r1, r3
 8009442:	eeb2 0a04 	vmov.f32	s0, #36	@ 0x41200000  10.0
 8009446:	48d5      	ldr	r0, [pc, #852]	@ (800979c <decode_VESC+0x6b8>)
 8009448:	f7ff fda5 	bl	8008f96 <buffer_get_float32>
 800944c:	eef0 7a40 	vmov.f32	s15, s0
 8009450:	4ad3      	ldr	r2, [pc, #844]	@ (80097a0 <decode_VESC+0x6bc>)
 8009452:	2374      	movs	r3, #116	@ 0x74
 8009454:	fb04 f303 	mul.w	r3, r4, r3
 8009458:	4413      	add	r3, r2
 800945a:	3314      	adds	r3, #20
 800945c:	edc3 7a00 	vstr	s15, [r3]
		break;
 8009460:	e24b      	b.n	80098fa <decode_VESC+0x816>
	case CAN_PACKET_STATUS_3:
		infolist[vesc_index].watt_hours = buffer_get_float32((uint8_t*)&vescmsg.Data, 1e1, &indexbuf);
 8009462:	f897 4027 	ldrb.w	r4, [r7, #39]	@ 0x27
 8009466:	1d3b      	adds	r3, r7, #4
 8009468:	4619      	mov	r1, r3
 800946a:	eeb2 0a04 	vmov.f32	s0, #36	@ 0x41200000  10.0
 800946e:	48cb      	ldr	r0, [pc, #812]	@ (800979c <decode_VESC+0x6b8>)
 8009470:	f7ff fd91 	bl	8008f96 <buffer_get_float32>
 8009474:	eef0 7a40 	vmov.f32	s15, s0
 8009478:	4ac9      	ldr	r2, [pc, #804]	@ (80097a0 <decode_VESC+0x6bc>)
 800947a:	2374      	movs	r3, #116	@ 0x74
 800947c:	fb04 f303 	mul.w	r3, r4, r3
 8009480:	4413      	add	r3, r2
 8009482:	3318      	adds	r3, #24
 8009484:	edc3 7a00 	vstr	s15, [r3]
		infolist[vesc_index].watt_hours_charged = buffer_get_float32((uint8_t*)&vescmsg.Data, 1e1, &indexbuf);
 8009488:	f897 4027 	ldrb.w	r4, [r7, #39]	@ 0x27
 800948c:	1d3b      	adds	r3, r7, #4
 800948e:	4619      	mov	r1, r3
 8009490:	eeb2 0a04 	vmov.f32	s0, #36	@ 0x41200000  10.0
 8009494:	48c1      	ldr	r0, [pc, #772]	@ (800979c <decode_VESC+0x6b8>)
 8009496:	f7ff fd7e 	bl	8008f96 <buffer_get_float32>
 800949a:	eef0 7a40 	vmov.f32	s15, s0
 800949e:	4ac0      	ldr	r2, [pc, #768]	@ (80097a0 <decode_VESC+0x6bc>)
 80094a0:	2374      	movs	r3, #116	@ 0x74
 80094a2:	fb04 f303 	mul.w	r3, r4, r3
 80094a6:	4413      	add	r3, r2
 80094a8:	331c      	adds	r3, #28
 80094aa:	edc3 7a00 	vstr	s15, [r3]
		break;
 80094ae:	e224      	b.n	80098fa <decode_VESC+0x816>
	case CAN_PACKET_STATUS_4:
		infolist[vesc_index].temp_fet = buffer_get_float16((uint8_t*)&vescmsg.Data, 1e1, &indexbuf);
 80094b0:	f897 4027 	ldrb.w	r4, [r7, #39]	@ 0x27
 80094b4:	1d3b      	adds	r3, r7, #4
 80094b6:	4619      	mov	r1, r3
 80094b8:	eeb2 0a04 	vmov.f32	s0, #36	@ 0x41200000  10.0
 80094bc:	48b7      	ldr	r0, [pc, #732]	@ (800979c <decode_VESC+0x6b8>)
 80094be:	f7ff fd4f 	bl	8008f60 <buffer_get_float16>
 80094c2:	eef0 7a40 	vmov.f32	s15, s0
 80094c6:	4ab6      	ldr	r2, [pc, #728]	@ (80097a0 <decode_VESC+0x6bc>)
 80094c8:	2374      	movs	r3, #116	@ 0x74
 80094ca:	fb04 f303 	mul.w	r3, r4, r3
 80094ce:	4413      	add	r3, r2
 80094d0:	3320      	adds	r3, #32
 80094d2:	edc3 7a00 	vstr	s15, [r3]
		infolist[vesc_index].temp_motor = buffer_get_float16((uint8_t*)&vescmsg.Data, 1e1, &indexbuf);
 80094d6:	f897 4027 	ldrb.w	r4, [r7, #39]	@ 0x27
 80094da:	1d3b      	adds	r3, r7, #4
 80094dc:	4619      	mov	r1, r3
 80094de:	eeb2 0a04 	vmov.f32	s0, #36	@ 0x41200000  10.0
 80094e2:	48ae      	ldr	r0, [pc, #696]	@ (800979c <decode_VESC+0x6b8>)
 80094e4:	f7ff fd3c 	bl	8008f60 <buffer_get_float16>
 80094e8:	eef0 7a40 	vmov.f32	s15, s0
 80094ec:	4aac      	ldr	r2, [pc, #688]	@ (80097a0 <decode_VESC+0x6bc>)
 80094ee:	2374      	movs	r3, #116	@ 0x74
 80094f0:	fb04 f303 	mul.w	r3, r4, r3
 80094f4:	4413      	add	r3, r2
 80094f6:	3324      	adds	r3, #36	@ 0x24
 80094f8:	edc3 7a00 	vstr	s15, [r3]
		infolist[vesc_index].current_in = buffer_get_float16((uint8_t*)&vescmsg.Data, 1e1, &indexbuf);
 80094fc:	f897 4027 	ldrb.w	r4, [r7, #39]	@ 0x27
 8009500:	1d3b      	adds	r3, r7, #4
 8009502:	4619      	mov	r1, r3
 8009504:	eeb2 0a04 	vmov.f32	s0, #36	@ 0x41200000  10.0
 8009508:	48a4      	ldr	r0, [pc, #656]	@ (800979c <decode_VESC+0x6b8>)
 800950a:	f7ff fd29 	bl	8008f60 <buffer_get_float16>
 800950e:	eef0 7a40 	vmov.f32	s15, s0
 8009512:	4aa3      	ldr	r2, [pc, #652]	@ (80097a0 <decode_VESC+0x6bc>)
 8009514:	2374      	movs	r3, #116	@ 0x74
 8009516:	fb04 f303 	mul.w	r3, r4, r3
 800951a:	4413      	add	r3, r2
 800951c:	3328      	adds	r3, #40	@ 0x28
 800951e:	edc3 7a00 	vstr	s15, [r3]
		infolist[vesc_index].pos = buffer_get_float16((uint8_t*)&vescmsg.Data, 50, &indexbuf);
 8009522:	f897 4027 	ldrb.w	r4, [r7, #39]	@ 0x27
 8009526:	1d3b      	adds	r3, r7, #4
 8009528:	4619      	mov	r1, r3
 800952a:	ed9f 0a9e 	vldr	s0, [pc, #632]	@ 80097a4 <decode_VESC+0x6c0>
 800952e:	489b      	ldr	r0, [pc, #620]	@ (800979c <decode_VESC+0x6b8>)
 8009530:	f7ff fd16 	bl	8008f60 <buffer_get_float16>
 8009534:	eef0 7a40 	vmov.f32	s15, s0
 8009538:	4a99      	ldr	r2, [pc, #612]	@ (80097a0 <decode_VESC+0x6bc>)
 800953a:	2374      	movs	r3, #116	@ 0x74
 800953c:	fb04 f303 	mul.w	r3, r4, r3
 8009540:	4413      	add	r3, r2
 8009542:	332c      	adds	r3, #44	@ 0x2c
 8009544:	edc3 7a00 	vstr	s15, [r3]
		break;
 8009548:	e1d7      	b.n	80098fa <decode_VESC+0x816>
	case CAN_PACKET_STATUS_5:
		infolist[vesc_index].tacho_value = buffer_get_float32((uint8_t*)&vescmsg.Data, 1.0, &indexbuf) / (MCCONF_SI_MOTOR_POLES * 3);
 800954a:	1d3b      	adds	r3, r7, #4
 800954c:	4619      	mov	r1, r3
 800954e:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8009552:	4892      	ldr	r0, [pc, #584]	@ (800979c <decode_VESC+0x6b8>)
 8009554:	f7ff fd1f 	bl	8008f96 <buffer_get_float32>
 8009558:	eeb0 7a40 	vmov.f32	s14, s0
 800955c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009560:	eddf 6a91 	vldr	s13, [pc, #580]	@ 80097a8 <decode_VESC+0x6c4>
 8009564:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8009568:	4a8d      	ldr	r2, [pc, #564]	@ (80097a0 <decode_VESC+0x6bc>)
 800956a:	2174      	movs	r1, #116	@ 0x74
 800956c:	fb01 f303 	mul.w	r3, r1, r3
 8009570:	4413      	add	r3, r2
 8009572:	3330      	adds	r3, #48	@ 0x30
 8009574:	edc3 7a00 	vstr	s15, [r3]
		infolist[vesc_index].v_in = buffer_get_float16((uint8_t*)&vescmsg.Data, 1e1, &indexbuf);
 8009578:	f897 4027 	ldrb.w	r4, [r7, #39]	@ 0x27
 800957c:	1d3b      	adds	r3, r7, #4
 800957e:	4619      	mov	r1, r3
 8009580:	eeb2 0a04 	vmov.f32	s0, #36	@ 0x41200000  10.0
 8009584:	4885      	ldr	r0, [pc, #532]	@ (800979c <decode_VESC+0x6b8>)
 8009586:	f7ff fceb 	bl	8008f60 <buffer_get_float16>
 800958a:	eef0 7a40 	vmov.f32	s15, s0
 800958e:	4a84      	ldr	r2, [pc, #528]	@ (80097a0 <decode_VESC+0x6bc>)
 8009590:	2374      	movs	r3, #116	@ 0x74
 8009592:	fb04 f303 	mul.w	r3, r4, r3
 8009596:	4413      	add	r3, r2
 8009598:	3334      	adds	r3, #52	@ 0x34
 800959a:	edc3 7a00 	vstr	s15, [r3]
		infolist[vesc_index].Fault = buffer_get_int16((uint8_t*)&vescmsg.Data, &indexbuf);
 800959e:	1d3b      	adds	r3, r7, #4
 80095a0:	4619      	mov	r1, r3
 80095a2:	487e      	ldr	r0, [pc, #504]	@ (800979c <decode_VESC+0x6b8>)
 80095a4:	f7ff fc36 	bl	8008e14 <buffer_get_int16>
 80095a8:	4603      	mov	r3, r0
 80095aa:	461a      	mov	r2, r3
 80095ac:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80095b0:	4610      	mov	r0, r2
 80095b2:	4a7b      	ldr	r2, [pc, #492]	@ (80097a0 <decode_VESC+0x6bc>)
 80095b4:	2174      	movs	r1, #116	@ 0x74
 80095b6:	fb01 f303 	mul.w	r3, r1, r3
 80095ba:	4413      	add	r3, r2
 80095bc:	3338      	adds	r3, #56	@ 0x38
 80095be:	6018      	str	r0, [r3, #0]
		break;
 80095c0:	e19b      	b.n	80098fa <decode_VESC+0x816>
	case CAN_PACKET_STATUS_6:
		infolist[vesc_index].adc_1 = buffer_get_float16((uint8_t*)&vescmsg.Data, 1e3, &indexbuf);
 80095c2:	f897 4027 	ldrb.w	r4, [r7, #39]	@ 0x27
 80095c6:	1d3b      	adds	r3, r7, #4
 80095c8:	4619      	mov	r1, r3
 80095ca:	ed9f 0a78 	vldr	s0, [pc, #480]	@ 80097ac <decode_VESC+0x6c8>
 80095ce:	4873      	ldr	r0, [pc, #460]	@ (800979c <decode_VESC+0x6b8>)
 80095d0:	f7ff fcc6 	bl	8008f60 <buffer_get_float16>
 80095d4:	eef0 7a40 	vmov.f32	s15, s0
 80095d8:	4a71      	ldr	r2, [pc, #452]	@ (80097a0 <decode_VESC+0x6bc>)
 80095da:	2374      	movs	r3, #116	@ 0x74
 80095dc:	fb04 f303 	mul.w	r3, r4, r3
 80095e0:	4413      	add	r3, r2
 80095e2:	333c      	adds	r3, #60	@ 0x3c
 80095e4:	edc3 7a00 	vstr	s15, [r3]
		infolist[vesc_index].adc_2 = buffer_get_float16((uint8_t*)&vescmsg.Data, 1e3, &indexbuf);
 80095e8:	f897 4027 	ldrb.w	r4, [r7, #39]	@ 0x27
 80095ec:	1d3b      	adds	r3, r7, #4
 80095ee:	4619      	mov	r1, r3
 80095f0:	ed9f 0a6e 	vldr	s0, [pc, #440]	@ 80097ac <decode_VESC+0x6c8>
 80095f4:	4869      	ldr	r0, [pc, #420]	@ (800979c <decode_VESC+0x6b8>)
 80095f6:	f7ff fcb3 	bl	8008f60 <buffer_get_float16>
 80095fa:	eef0 7a40 	vmov.f32	s15, s0
 80095fe:	4a68      	ldr	r2, [pc, #416]	@ (80097a0 <decode_VESC+0x6bc>)
 8009600:	2374      	movs	r3, #116	@ 0x74
 8009602:	fb04 f303 	mul.w	r3, r4, r3
 8009606:	4413      	add	r3, r2
 8009608:	3340      	adds	r3, #64	@ 0x40
 800960a:	edc3 7a00 	vstr	s15, [r3]
		infolist[vesc_index].adc_3 = buffer_get_float16((uint8_t*)&vescmsg.Data, 1e3, &indexbuf);
 800960e:	f897 4027 	ldrb.w	r4, [r7, #39]	@ 0x27
 8009612:	1d3b      	adds	r3, r7, #4
 8009614:	4619      	mov	r1, r3
 8009616:	ed9f 0a65 	vldr	s0, [pc, #404]	@ 80097ac <decode_VESC+0x6c8>
 800961a:	4860      	ldr	r0, [pc, #384]	@ (800979c <decode_VESC+0x6b8>)
 800961c:	f7ff fca0 	bl	8008f60 <buffer_get_float16>
 8009620:	eef0 7a40 	vmov.f32	s15, s0
 8009624:	4a5e      	ldr	r2, [pc, #376]	@ (80097a0 <decode_VESC+0x6bc>)
 8009626:	2374      	movs	r3, #116	@ 0x74
 8009628:	fb04 f303 	mul.w	r3, r4, r3
 800962c:	4413      	add	r3, r2
 800962e:	3344      	adds	r3, #68	@ 0x44
 8009630:	edc3 7a00 	vstr	s15, [r3]
		infolist[vesc_index].ppm = buffer_get_float16((uint8_t*)&vescmsg.Data, 1e3, &indexbuf);
 8009634:	f897 4027 	ldrb.w	r4, [r7, #39]	@ 0x27
 8009638:	1d3b      	adds	r3, r7, #4
 800963a:	4619      	mov	r1, r3
 800963c:	ed9f 0a5b 	vldr	s0, [pc, #364]	@ 80097ac <decode_VESC+0x6c8>
 8009640:	4856      	ldr	r0, [pc, #344]	@ (800979c <decode_VESC+0x6b8>)
 8009642:	f7ff fc8d 	bl	8008f60 <buffer_get_float16>
 8009646:	eef0 7a40 	vmov.f32	s15, s0
 800964a:	4a55      	ldr	r2, [pc, #340]	@ (80097a0 <decode_VESC+0x6bc>)
 800964c:	2374      	movs	r3, #116	@ 0x74
 800964e:	fb04 f303 	mul.w	r3, r4, r3
 8009652:	4413      	add	r3, r2
 8009654:	3348      	adds	r3, #72	@ 0x48
 8009656:	edc3 7a00 	vstr	s15, [r3]
		break;
 800965a:	e14e      	b.n	80098fa <decode_VESC+0x816>
	case CAN_PACKET_STATUS_7:
		infolist[vesc_index].speed = buffer_get_float32((uint8_t*)&vescmsg.Data, 1e5, &indexbuf);
 800965c:	f897 4027 	ldrb.w	r4, [r7, #39]	@ 0x27
 8009660:	1d3b      	adds	r3, r7, #4
 8009662:	4619      	mov	r1, r3
 8009664:	ed9f 0a53 	vldr	s0, [pc, #332]	@ 80097b4 <decode_VESC+0x6d0>
 8009668:	484c      	ldr	r0, [pc, #304]	@ (800979c <decode_VESC+0x6b8>)
 800966a:	f7ff fc94 	bl	8008f96 <buffer_get_float32>
 800966e:	eef0 7a40 	vmov.f32	s15, s0
 8009672:	4a4b      	ldr	r2, [pc, #300]	@ (80097a0 <decode_VESC+0x6bc>)
 8009674:	2374      	movs	r3, #116	@ 0x74
 8009676:	fb04 f303 	mul.w	r3, r4, r3
 800967a:	4413      	add	r3, r2
 800967c:	334c      	adds	r3, #76	@ 0x4c
 800967e:	edc3 7a00 	vstr	s15, [r3]
		infolist[vesc_index].dist = buffer_get_float32((uint8_t*)&vescmsg.Data, 1e5, &indexbuf);
 8009682:	f897 4027 	ldrb.w	r4, [r7, #39]	@ 0x27
 8009686:	1d3b      	adds	r3, r7, #4
 8009688:	4619      	mov	r1, r3
 800968a:	ed9f 0a4a 	vldr	s0, [pc, #296]	@ 80097b4 <decode_VESC+0x6d0>
 800968e:	4843      	ldr	r0, [pc, #268]	@ (800979c <decode_VESC+0x6b8>)
 8009690:	f7ff fc81 	bl	8008f96 <buffer_get_float32>
 8009694:	eef0 7a40 	vmov.f32	s15, s0
 8009698:	4a41      	ldr	r2, [pc, #260]	@ (80097a0 <decode_VESC+0x6bc>)
 800969a:	2374      	movs	r3, #116	@ 0x74
 800969c:	fb04 f303 	mul.w	r3, r4, r3
 80096a0:	4413      	add	r3, r2
 80096a2:	3350      	adds	r3, #80	@ 0x50
 80096a4:	edc3 7a00 	vstr	s15, [r3]
		break;
 80096a8:	e127      	b.n	80098fa <decode_VESC+0x816>
	case CAN_PACKET_STATUS_8:
		infolist[vesc_index].Id = buffer_get_float32((uint8_t*)&vescmsg.Data, 1e3, &indexbuf);
 80096aa:	f897 4027 	ldrb.w	r4, [r7, #39]	@ 0x27
 80096ae:	1d3b      	adds	r3, r7, #4
 80096b0:	4619      	mov	r1, r3
 80096b2:	ed9f 0a3e 	vldr	s0, [pc, #248]	@ 80097ac <decode_VESC+0x6c8>
 80096b6:	4839      	ldr	r0, [pc, #228]	@ (800979c <decode_VESC+0x6b8>)
 80096b8:	f7ff fc6d 	bl	8008f96 <buffer_get_float32>
 80096bc:	eef0 7a40 	vmov.f32	s15, s0
 80096c0:	4a37      	ldr	r2, [pc, #220]	@ (80097a0 <decode_VESC+0x6bc>)
 80096c2:	2374      	movs	r3, #116	@ 0x74
 80096c4:	fb04 f303 	mul.w	r3, r4, r3
 80096c8:	4413      	add	r3, r2
 80096ca:	3354      	adds	r3, #84	@ 0x54
 80096cc:	edc3 7a00 	vstr	s15, [r3]
		infolist[vesc_index].Iq = buffer_get_float32((uint8_t*)&vescmsg.Data, 1e2, &indexbuf);
 80096d0:	f897 4027 	ldrb.w	r4, [r7, #39]	@ 0x27
 80096d4:	1d3b      	adds	r3, r7, #4
 80096d6:	4619      	mov	r1, r3
 80096d8:	ed9f 0a35 	vldr	s0, [pc, #212]	@ 80097b0 <decode_VESC+0x6cc>
 80096dc:	482f      	ldr	r0, [pc, #188]	@ (800979c <decode_VESC+0x6b8>)
 80096de:	f7ff fc5a 	bl	8008f96 <buffer_get_float32>
 80096e2:	eef0 7a40 	vmov.f32	s15, s0
 80096e6:	4a2e      	ldr	r2, [pc, #184]	@ (80097a0 <decode_VESC+0x6bc>)
 80096e8:	2374      	movs	r3, #116	@ 0x74
 80096ea:	fb04 f303 	mul.w	r3, r4, r3
 80096ee:	4413      	add	r3, r2
 80096f0:	3358      	adds	r3, #88	@ 0x58
 80096f2:	edc3 7a00 	vstr	s15, [r3]
		break;
 80096f6:	e100      	b.n	80098fa <decode_VESC+0x816>
	case CAN_PACKET_STATUS_9:
		infolist[vesc_index].Vd = buffer_get_float32((uint8_t*)&vescmsg.Data, 1e3, &indexbuf);
 80096f8:	f897 4027 	ldrb.w	r4, [r7, #39]	@ 0x27
 80096fc:	1d3b      	adds	r3, r7, #4
 80096fe:	4619      	mov	r1, r3
 8009700:	ed9f 0a2a 	vldr	s0, [pc, #168]	@ 80097ac <decode_VESC+0x6c8>
 8009704:	4825      	ldr	r0, [pc, #148]	@ (800979c <decode_VESC+0x6b8>)
 8009706:	f7ff fc46 	bl	8008f96 <buffer_get_float32>
 800970a:	eef0 7a40 	vmov.f32	s15, s0
 800970e:	4a24      	ldr	r2, [pc, #144]	@ (80097a0 <decode_VESC+0x6bc>)
 8009710:	2374      	movs	r3, #116	@ 0x74
 8009712:	fb04 f303 	mul.w	r3, r4, r3
 8009716:	4413      	add	r3, r2
 8009718:	335c      	adds	r3, #92	@ 0x5c
 800971a:	edc3 7a00 	vstr	s15, [r3]
		infolist[vesc_index].Vq = buffer_get_float32((uint8_t*)&vescmsg.Data, 1e3, &indexbuf);
 800971e:	f897 4027 	ldrb.w	r4, [r7, #39]	@ 0x27
 8009722:	1d3b      	adds	r3, r7, #4
 8009724:	4619      	mov	r1, r3
 8009726:	ed9f 0a21 	vldr	s0, [pc, #132]	@ 80097ac <decode_VESC+0x6c8>
 800972a:	481c      	ldr	r0, [pc, #112]	@ (800979c <decode_VESC+0x6b8>)
 800972c:	f7ff fc33 	bl	8008f96 <buffer_get_float32>
 8009730:	eef0 7a40 	vmov.f32	s15, s0
 8009734:	4a1a      	ldr	r2, [pc, #104]	@ (80097a0 <decode_VESC+0x6bc>)
 8009736:	2374      	movs	r3, #116	@ 0x74
 8009738:	fb04 f303 	mul.w	r3, r4, r3
 800973c:	4413      	add	r3, r2
 800973e:	3360      	adds	r3, #96	@ 0x60
 8009740:	edc3 7a00 	vstr	s15, [r3]
		break;
 8009744:	e0d9      	b.n	80098fa <decode_VESC+0x816>
	case CAN_PACKET_STATUS_10:
		infolist[vesc_index].KV = buffer_get_float32((uint8_t*)&vescmsg.Data, 1e3, &indexbuf) / (MCCONF_SI_MOTOR_POLES / 2);
 8009746:	1d3b      	adds	r3, r7, #4
 8009748:	4619      	mov	r1, r3
 800974a:	ed9f 0a18 	vldr	s0, [pc, #96]	@ 80097ac <decode_VESC+0x6c8>
 800974e:	4813      	ldr	r0, [pc, #76]	@ (800979c <decode_VESC+0x6b8>)
 8009750:	f7ff fc21 	bl	8008f96 <buffer_get_float32>
 8009754:	eeb0 7a40 	vmov.f32	s14, s0
 8009758:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800975c:	eef1 6a0c 	vmov.f32	s13, #28	@ 0x40e00000  7.0
 8009760:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8009764:	4a0e      	ldr	r2, [pc, #56]	@ (80097a0 <decode_VESC+0x6bc>)
 8009766:	2174      	movs	r1, #116	@ 0x74
 8009768:	fb01 f303 	mul.w	r3, r1, r3
 800976c:	4413      	add	r3, r2
 800976e:	3364      	adds	r3, #100	@ 0x64
 8009770:	edc3 7a00 	vstr	s15, [r3]
		infolist[vesc_index].testdata = buffer_get_float32((uint8_t*)&vescmsg.Data, 1e3, &indexbuf);
 8009774:	f897 4027 	ldrb.w	r4, [r7, #39]	@ 0x27
 8009778:	1d3b      	adds	r3, r7, #4
 800977a:	4619      	mov	r1, r3
 800977c:	ed9f 0a0b 	vldr	s0, [pc, #44]	@ 80097ac <decode_VESC+0x6c8>
 8009780:	4806      	ldr	r0, [pc, #24]	@ (800979c <decode_VESC+0x6b8>)
 8009782:	f7ff fc08 	bl	8008f96 <buffer_get_float32>
 8009786:	eef0 7a40 	vmov.f32	s15, s0
 800978a:	4a05      	ldr	r2, [pc, #20]	@ (80097a0 <decode_VESC+0x6bc>)
 800978c:	2374      	movs	r3, #116	@ 0x74
 800978e:	fb04 f303 	mul.w	r3, r4, r3
 8009792:	4413      	add	r3, r2
 8009794:	336c      	adds	r3, #108	@ 0x6c
 8009796:	edc3 7a00 	vstr	s15, [r3]
		break;
 800979a:	e0ae      	b.n	80098fa <decode_VESC+0x816>
 800979c:	2000915c 	.word	0x2000915c
 80097a0:	20007ed0 	.word	0x20007ed0
 80097a4:	42480000 	.word	0x42480000
 80097a8:	42280000 	.word	0x42280000
 80097ac:	447a0000 	.word	0x447a0000
 80097b0:	42c80000 	.word	0x42c80000
 80097b4:	47c35000 	.word	0x47c35000
	case CAN_PACKET_POLL_ROTOR_POS:
		infolist[vesc_index].enc_pos = buffer_get_float32((uint8_t*)&vescmsg.Data, 1e5, &indexbuf);
 80097b8:	f897 4027 	ldrb.w	r4, [r7, #39]	@ 0x27
 80097bc:	1d3b      	adds	r3, r7, #4
 80097be:	4619      	mov	r1, r3
 80097c0:	ed1f 0a04 	vldr	s0, [pc, #-16]	@ 80097b4 <decode_VESC+0x6d0>
 80097c4:	487e      	ldr	r0, [pc, #504]	@ (80099c0 <decode_VESC+0x8dc>)
 80097c6:	f7ff fbe6 	bl	8008f96 <buffer_get_float32>
 80097ca:	eef0 7a40 	vmov.f32	s15, s0
 80097ce:	4a7d      	ldr	r2, [pc, #500]	@ (80099c4 <decode_VESC+0x8e0>)
 80097d0:	2374      	movs	r3, #116	@ 0x74
 80097d2:	fb04 f303 	mul.w	r3, r4, r3
 80097d6:	4413      	add	r3, r2
 80097d8:	3368      	adds	r3, #104	@ 0x68
 80097da:	edc3 7a00 	vstr	s15, [r3]
		break;
 80097de:	e08c      	b.n	80098fa <decode_VESC+0x816>
	case CAN_PACKET_IO_BOARD_ADC_1_TO_4:
		//adc voltage
		for (int i = 0;i < 10;i++) {
 80097e0:	2300      	movs	r3, #0
 80097e2:	637b      	str	r3, [r7, #52]	@ 0x34
 80097e4:	e039      	b.n	800985a <decode_VESC+0x776>
			io_board_adc_values *msg = &io_board_adc_1_4[i];
 80097e6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80097e8:	4613      	mov	r3, r2
 80097ea:	005b      	lsls	r3, r3, #1
 80097ec:	4413      	add	r3, r2
 80097ee:	00db      	lsls	r3, r3, #3
 80097f0:	4a75      	ldr	r2, [pc, #468]	@ (80099c8 <decode_VESC+0x8e4>)
 80097f2:	4413      	add	r3, r2
 80097f4:	617b      	str	r3, [r7, #20]
			if (msg->id == id || msg->id == -1) {
 80097f6:	697b      	ldr	r3, [r7, #20]
 80097f8:	681a      	ldr	r2, [r3, #0]
 80097fa:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80097fe:	429a      	cmp	r2, r3
 8009800:	d004      	beq.n	800980c <decode_VESC+0x728>
 8009802:	697b      	ldr	r3, [r7, #20]
 8009804:	681b      	ldr	r3, [r3, #0]
 8009806:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800980a:	d123      	bne.n	8009854 <decode_VESC+0x770>
				ind = 0;
 800980c:	2300      	movs	r3, #0
 800980e:	60bb      	str	r3, [r7, #8]
				msg->id = id;
 8009810:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8009814:	697b      	ldr	r3, [r7, #20]
 8009816:	601a      	str	r2, [r3, #0]
				//							msg->rx_time = HAL_GetTick();
				ind = 0;
 8009818:	2300      	movs	r3, #0
 800981a:	60bb      	str	r3, [r7, #8]
				int j = 0;
 800981c:	2300      	movs	r3, #0
 800981e:	633b      	str	r3, [r7, #48]	@ 0x30
				while (ind < rxbuf_len) {
 8009820:	e012      	b.n	8009848 <decode_VESC+0x764>
					msg->adc_voltages[j++] = buffer_get_float16(vescmsg.Data, 1e2, &ind);
 8009822:	6b3c      	ldr	r4, [r7, #48]	@ 0x30
 8009824:	1c63      	adds	r3, r4, #1
 8009826:	633b      	str	r3, [r7, #48]	@ 0x30
 8009828:	f107 0308 	add.w	r3, r7, #8
 800982c:	4619      	mov	r1, r3
 800982e:	ed9f 0a67 	vldr	s0, [pc, #412]	@ 80099cc <decode_VESC+0x8e8>
 8009832:	4863      	ldr	r0, [pc, #396]	@ (80099c0 <decode_VESC+0x8dc>)
 8009834:	f7ff fb94 	bl	8008f60 <buffer_get_float16>
 8009838:	eef0 7a40 	vmov.f32	s15, s0
 800983c:	697a      	ldr	r2, [r7, #20]
 800983e:	1ca3      	adds	r3, r4, #2
 8009840:	009b      	lsls	r3, r3, #2
 8009842:	4413      	add	r3, r2
 8009844:	edc3 7a00 	vstr	s15, [r3]
				while (ind < rxbuf_len) {
 8009848:	68bb      	ldr	r3, [r7, #8]
 800984a:	461a      	mov	r2, r3
 800984c:	69bb      	ldr	r3, [r7, #24]
 800984e:	4293      	cmp	r3, r2
 8009850:	d8e7      	bhi.n	8009822 <decode_VESC+0x73e>
				}
				break;
 8009852:	e006      	b.n	8009862 <decode_VESC+0x77e>
		for (int i = 0;i < 10;i++) {
 8009854:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009856:	3301      	adds	r3, #1
 8009858:	637b      	str	r3, [r7, #52]	@ 0x34
 800985a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800985c:	2b09      	cmp	r3, #9
 800985e:	ddc2      	ble.n	80097e6 <decode_VESC+0x702>
			}
		}
		break;
 8009860:	e04b      	b.n	80098fa <decode_VESC+0x816>
 8009862:	e04a      	b.n	80098fa <decode_VESC+0x816>

	case CAN_PACKET_IO_BOARD_ADC_5_TO_8:
		//adc voltage
		for (int i = 0;i < 10;i++) {
 8009864:	2300      	movs	r3, #0
 8009866:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009868:	e039      	b.n	80098de <decode_VESC+0x7fa>
			io_board_adc_values *msg = &io_board_adc_5_8[i];
 800986a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800986c:	4613      	mov	r3, r2
 800986e:	005b      	lsls	r3, r3, #1
 8009870:	4413      	add	r3, r2
 8009872:	00db      	lsls	r3, r3, #3
 8009874:	4a56      	ldr	r2, [pc, #344]	@ (80099d0 <decode_VESC+0x8ec>)
 8009876:	4413      	add	r3, r2
 8009878:	61fb      	str	r3, [r7, #28]
			if (msg->id == id || msg->id == -1) {
 800987a:	69fb      	ldr	r3, [r7, #28]
 800987c:	681a      	ldr	r2, [r3, #0]
 800987e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8009882:	429a      	cmp	r2, r3
 8009884:	d004      	beq.n	8009890 <decode_VESC+0x7ac>
 8009886:	69fb      	ldr	r3, [r7, #28]
 8009888:	681b      	ldr	r3, [r3, #0]
 800988a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800988e:	d123      	bne.n	80098d8 <decode_VESC+0x7f4>
				ind = 0;
 8009890:	2300      	movs	r3, #0
 8009892:	60bb      	str	r3, [r7, #8]
				msg->id = id;
 8009894:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8009898:	69fb      	ldr	r3, [r7, #28]
 800989a:	601a      	str	r2, [r3, #0]
				//							msg->rx_time = HAL_GetTick();
				ind = 0;
 800989c:	2300      	movs	r3, #0
 800989e:	60bb      	str	r3, [r7, #8]
				int j = 0;
 80098a0:	2300      	movs	r3, #0
 80098a2:	62bb      	str	r3, [r7, #40]	@ 0x28
				while (ind < rxbuf_len) {
 80098a4:	e012      	b.n	80098cc <decode_VESC+0x7e8>
					msg->adc_voltages[j++] = buffer_get_float16(vescmsg.Data, 1e2, &ind);
 80098a6:	6abc      	ldr	r4, [r7, #40]	@ 0x28
 80098a8:	1c63      	adds	r3, r4, #1
 80098aa:	62bb      	str	r3, [r7, #40]	@ 0x28
 80098ac:	f107 0308 	add.w	r3, r7, #8
 80098b0:	4619      	mov	r1, r3
 80098b2:	ed9f 0a46 	vldr	s0, [pc, #280]	@ 80099cc <decode_VESC+0x8e8>
 80098b6:	4842      	ldr	r0, [pc, #264]	@ (80099c0 <decode_VESC+0x8dc>)
 80098b8:	f7ff fb52 	bl	8008f60 <buffer_get_float16>
 80098bc:	eef0 7a40 	vmov.f32	s15, s0
 80098c0:	69fa      	ldr	r2, [r7, #28]
 80098c2:	1ca3      	adds	r3, r4, #2
 80098c4:	009b      	lsls	r3, r3, #2
 80098c6:	4413      	add	r3, r2
 80098c8:	edc3 7a00 	vstr	s15, [r3]
				while (ind < rxbuf_len) {
 80098cc:	68bb      	ldr	r3, [r7, #8]
 80098ce:	461a      	mov	r2, r3
 80098d0:	69bb      	ldr	r3, [r7, #24]
 80098d2:	4293      	cmp	r3, r2
 80098d4:	d8e7      	bhi.n	80098a6 <decode_VESC+0x7c2>
				}
				break;
 80098d6:	e006      	b.n	80098e6 <decode_VESC+0x802>
		for (int i = 0;i < 10;i++) {
 80098d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80098da:	3301      	adds	r3, #1
 80098dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80098de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80098e0:	2b09      	cmp	r3, #9
 80098e2:	ddc2      	ble.n	800986a <decode_VESC+0x786>
			}
		}
		break;
 80098e4:	e009      	b.n	80098fa <decode_VESC+0x816>
 80098e6:	e008      	b.n	80098fa <decode_VESC+0x816>
		break;
 80098e8:	bf00      	nop
 80098ea:	e006      	b.n	80098fa <decode_VESC+0x816>
		break;
 80098ec:	bf00      	nop
 80098ee:	e004      	b.n	80098fa <decode_VESC+0x816>
			break;
 80098f0:	bf00      	nop
 80098f2:	e002      	b.n	80098fa <decode_VESC+0x816>
		break;
 80098f4:	bf00      	nop
 80098f6:	e000      	b.n	80098fa <decode_VESC+0x816>
		break;
 80098f8:	bf00      	nop
	}
	if(infolist[vesc_index].Fault){
 80098fa:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80098fe:	4a31      	ldr	r2, [pc, #196]	@ (80099c4 <decode_VESC+0x8e0>)
 8009900:	2174      	movs	r1, #116	@ 0x74
 8009902:	fb01 f303 	mul.w	r3, r1, r3
 8009906:	4413      	add	r3, r2
 8009908:	3338      	adds	r3, #56	@ 0x38
 800990a:	681b      	ldr	r3, [r3, #0]
 800990c:	2b00      	cmp	r3, #0
 800990e:	d032      	beq.n	8009976 <decode_VESC+0x892>
		vesc.error_flag = 1;
 8009910:	4a30      	ldr	r2, [pc, #192]	@ (80099d4 <decode_VESC+0x8f0>)
 8009912:	f892 3130 	ldrb.w	r3, [r2, #304]	@ 0x130
 8009916:	f043 0308 	orr.w	r3, r3, #8
 800991a:	f882 3130 	strb.w	r3, [r2, #304]	@ 0x130
		sprintf(vescerror, "VESC id: %d, ", (int)infolist[vesc_index].CANid);
 800991e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009922:	4a28      	ldr	r2, [pc, #160]	@ (80099c4 <decode_VESC+0x8e0>)
 8009924:	2174      	movs	r1, #116	@ 0x74
 8009926:	fb01 f303 	mul.w	r3, r1, r3
 800992a:	4413      	add	r3, r2
 800992c:	781b      	ldrb	r3, [r3, #0]
 800992e:	b2db      	uxtb	r3, r3
 8009930:	461a      	mov	r2, r3
 8009932:	4929      	ldr	r1, [pc, #164]	@ (80099d8 <decode_VESC+0x8f4>)
 8009934:	4829      	ldr	r0, [pc, #164]	@ (80099dc <decode_VESC+0x8f8>)
 8009936:	f014 f885 	bl	801da44 <siprintf>
		strcat(vescerror, mc_interface_fault_to_string((mc_fault_code)infolist[vesc_index].Fault));
 800993a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800993e:	4a21      	ldr	r2, [pc, #132]	@ (80099c4 <decode_VESC+0x8e0>)
 8009940:	2174      	movs	r1, #116	@ 0x74
 8009942:	fb01 f303 	mul.w	r3, r1, r3
 8009946:	4413      	add	r3, r2
 8009948:	3338      	adds	r3, #56	@ 0x38
 800994a:	681b      	ldr	r3, [r3, #0]
 800994c:	b2db      	uxtb	r3, r3
 800994e:	4618      	mov	r0, r3
 8009950:	f000 f84a 	bl	80099e8 <mc_interface_fault_to_string>
 8009954:	4603      	mov	r3, r0
 8009956:	4619      	mov	r1, r3
 8009958:	4820      	ldr	r0, [pc, #128]	@ (80099dc <decode_VESC+0x8f8>)
 800995a:	f014 f8f8 	bl	801db4e <strcat>
		strcat(vescerror, "\n");
 800995e:	481f      	ldr	r0, [pc, #124]	@ (80099dc <decode_VESC+0x8f8>)
 8009960:	f7f6 fc86 	bl	8000270 <strlen>
 8009964:	4603      	mov	r3, r0
 8009966:	461a      	mov	r2, r3
 8009968:	4b1c      	ldr	r3, [pc, #112]	@ (80099dc <decode_VESC+0x8f8>)
 800996a:	4413      	add	r3, r2
 800996c:	491c      	ldr	r1, [pc, #112]	@ (80099e0 <decode_VESC+0x8fc>)
 800996e:	461a      	mov	r2, r3
 8009970:	460b      	mov	r3, r1
 8009972:	881b      	ldrh	r3, [r3, #0]
 8009974:	8013      	strh	r3, [r2, #0]
	}
	infolist[vesc_index].tol_angle = infolist[vesc_index].tacho_value * 360.0;
 8009976:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800997a:	4a12      	ldr	r2, [pc, #72]	@ (80099c4 <decode_VESC+0x8e0>)
 800997c:	2174      	movs	r1, #116	@ 0x74
 800997e:	fb01 f303 	mul.w	r3, r1, r3
 8009982:	4413      	add	r3, r2
 8009984:	3330      	adds	r3, #48	@ 0x30
 8009986:	681b      	ldr	r3, [r3, #0]
 8009988:	4618      	mov	r0, r3
 800998a:	f7f6 fddd 	bl	8000548 <__aeabi_f2d>
 800998e:	f04f 0200 	mov.w	r2, #0
 8009992:	4b14      	ldr	r3, [pc, #80]	@ (80099e4 <decode_VESC+0x900>)
 8009994:	f7f6 fe30 	bl	80005f8 <__aeabi_dmul>
 8009998:	4602      	mov	r2, r0
 800999a:	460b      	mov	r3, r1
 800999c:	f897 4027 	ldrb.w	r4, [r7, #39]	@ 0x27
 80099a0:	4610      	mov	r0, r2
 80099a2:	4619      	mov	r1, r3
 80099a4:	f7f7 f920 	bl	8000be8 <__aeabi_d2f>
 80099a8:	4602      	mov	r2, r0
 80099aa:	4906      	ldr	r1, [pc, #24]	@ (80099c4 <decode_VESC+0x8e0>)
 80099ac:	2374      	movs	r3, #116	@ 0x74
 80099ae:	fb04 f303 	mul.w	r3, r4, r3
 80099b2:	440b      	add	r3, r1
 80099b4:	3370      	adds	r3, #112	@ 0x70
 80099b6:	601a      	str	r2, [r3, #0]
}
 80099b8:	373c      	adds	r7, #60	@ 0x3c
 80099ba:	46bd      	mov	sp, r7
 80099bc:	bd90      	pop	{r4, r7, pc}
 80099be:	bf00      	nop
 80099c0:	2000915c 	.word	0x2000915c
 80099c4:	20007ed0 	.word	0x20007ed0
 80099c8:	20008358 	.word	0x20008358
 80099cc:	42c80000 	.word	0x42c80000
 80099d0:	20009cb4 	.word	0x20009cb4
 80099d4:	20008a38 	.word	0x20008a38
 80099d8:	080215dc 	.word	0x080215dc
 80099dc:	200092c8 	.word	0x200092c8
 80099e0:	080215ec 	.word	0x080215ec
 80099e4:	40768000 	.word	0x40768000

080099e8 <mc_interface_fault_to_string>:

const char* mc_interface_fault_to_string(mc_fault_code fault) {
 80099e8:	b480      	push	{r7}
 80099ea:	b083      	sub	sp, #12
 80099ec:	af00      	add	r7, sp, #0
 80099ee:	4603      	mov	r3, r0
 80099f0:	71fb      	strb	r3, [r7, #7]
	switch (fault) {
 80099f2:	79fb      	ldrb	r3, [r7, #7]
 80099f4:	2b1d      	cmp	r3, #29
 80099f6:	d87b      	bhi.n	8009af0 <mc_interface_fault_to_string+0x108>
 80099f8:	a201      	add	r2, pc, #4	@ (adr r2, 8009a00 <mc_interface_fault_to_string+0x18>)
 80099fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80099fe:	bf00      	nop
 8009a00:	08009a79 	.word	0x08009a79
 8009a04:	08009a7d 	.word	0x08009a7d
 8009a08:	08009a81 	.word	0x08009a81
 8009a0c:	08009a85 	.word	0x08009a85
 8009a10:	08009a89 	.word	0x08009a89
 8009a14:	08009a8d 	.word	0x08009a8d
 8009a18:	08009a91 	.word	0x08009a91
 8009a1c:	08009a95 	.word	0x08009a95
 8009a20:	08009a99 	.word	0x08009a99
 8009a24:	08009a9d 	.word	0x08009a9d
 8009a28:	08009aa1 	.word	0x08009aa1
 8009a2c:	08009aa5 	.word	0x08009aa5
 8009a30:	08009aa9 	.word	0x08009aa9
 8009a34:	08009aad 	.word	0x08009aad
 8009a38:	08009ab1 	.word	0x08009ab1
 8009a3c:	08009abd 	.word	0x08009abd
 8009a40:	08009ac1 	.word	0x08009ac1
 8009a44:	08009ac5 	.word	0x08009ac5
 8009a48:	08009ac9 	.word	0x08009ac9
 8009a4c:	08009acd 	.word	0x08009acd
 8009a50:	08009ad1 	.word	0x08009ad1
 8009a54:	08009ad5 	.word	0x08009ad5
 8009a58:	08009ad9 	.word	0x08009ad9
 8009a5c:	08009ab5 	.word	0x08009ab5
 8009a60:	08009ab9 	.word	0x08009ab9
 8009a64:	08009add 	.word	0x08009add
 8009a68:	08009ae1 	.word	0x08009ae1
 8009a6c:	08009ae5 	.word	0x08009ae5
 8009a70:	08009ae9 	.word	0x08009ae9
 8009a74:	08009aed 	.word	0x08009aed
	case FAULT_CODE_NONE: return "FAULT_CODE_NONE";
 8009a78:	4b21      	ldr	r3, [pc, #132]	@ (8009b00 <mc_interface_fault_to_string+0x118>)
 8009a7a:	e03a      	b.n	8009af2 <mc_interface_fault_to_string+0x10a>
	case FAULT_CODE_OVER_VOLTAGE: return "FAULT_CODE_OVER_VOLTAGE";
 8009a7c:	4b21      	ldr	r3, [pc, #132]	@ (8009b04 <mc_interface_fault_to_string+0x11c>)
 8009a7e:	e038      	b.n	8009af2 <mc_interface_fault_to_string+0x10a>
	case FAULT_CODE_UNDER_VOLTAGE: return "FAULT_CODE_UNDER_VOLTAGE";
 8009a80:	4b21      	ldr	r3, [pc, #132]	@ (8009b08 <mc_interface_fault_to_string+0x120>)
 8009a82:	e036      	b.n	8009af2 <mc_interface_fault_to_string+0x10a>
	case FAULT_CODE_DRV: return "FAULT_CODE_DRV";
 8009a84:	4b21      	ldr	r3, [pc, #132]	@ (8009b0c <mc_interface_fault_to_string+0x124>)
 8009a86:	e034      	b.n	8009af2 <mc_interface_fault_to_string+0x10a>
	case FAULT_CODE_ABS_OVER_CURRENT: return "FAULT_CODE_ABS_OVER_CURRENT";
 8009a88:	4b21      	ldr	r3, [pc, #132]	@ (8009b10 <mc_interface_fault_to_string+0x128>)
 8009a8a:	e032      	b.n	8009af2 <mc_interface_fault_to_string+0x10a>
	case FAULT_CODE_OVER_TEMP_FET: return "FAULT_CODE_OVER_TEMP_FET";
 8009a8c:	4b21      	ldr	r3, [pc, #132]	@ (8009b14 <mc_interface_fault_to_string+0x12c>)
 8009a8e:	e030      	b.n	8009af2 <mc_interface_fault_to_string+0x10a>
	case FAULT_CODE_OVER_TEMP_MOTOR: return "FAULT_CODE_OVER_TEMP_MOTOR";
 8009a90:	4b21      	ldr	r3, [pc, #132]	@ (8009b18 <mc_interface_fault_to_string+0x130>)
 8009a92:	e02e      	b.n	8009af2 <mc_interface_fault_to_string+0x10a>
	case FAULT_CODE_GATE_DRIVER_OVER_VOLTAGE: return "FAULT_CODE_GATE_DRIVER_OVER_VOLTAGE";
 8009a94:	4b21      	ldr	r3, [pc, #132]	@ (8009b1c <mc_interface_fault_to_string+0x134>)
 8009a96:	e02c      	b.n	8009af2 <mc_interface_fault_to_string+0x10a>
	case FAULT_CODE_GATE_DRIVER_UNDER_VOLTAGE: return "FAULT_CODE_GATE_DRIVER_UNDER_VOLTAGE";
 8009a98:	4b21      	ldr	r3, [pc, #132]	@ (8009b20 <mc_interface_fault_to_string+0x138>)
 8009a9a:	e02a      	b.n	8009af2 <mc_interface_fault_to_string+0x10a>
	case FAULT_CODE_MCU_UNDER_VOLTAGE: return "FAULT_CODE_MCU_UNDER_VOLTAGE";
 8009a9c:	4b21      	ldr	r3, [pc, #132]	@ (8009b24 <mc_interface_fault_to_string+0x13c>)
 8009a9e:	e028      	b.n	8009af2 <mc_interface_fault_to_string+0x10a>
	case FAULT_CODE_BOOTING_FROM_WATCHDOG_RESET: return "FAULT_CODE_BOOTING_FROM_WATCHDOG_RESET";
 8009aa0:	4b21      	ldr	r3, [pc, #132]	@ (8009b28 <mc_interface_fault_to_string+0x140>)
 8009aa2:	e026      	b.n	8009af2 <mc_interface_fault_to_string+0x10a>
	case FAULT_CODE_ENCODER_SPI: return "FAULT_CODE_ENCODER_SPI";
 8009aa4:	4b21      	ldr	r3, [pc, #132]	@ (8009b2c <mc_interface_fault_to_string+0x144>)
 8009aa6:	e024      	b.n	8009af2 <mc_interface_fault_to_string+0x10a>
	case FAULT_CODE_ENCODER_SINCOS_BELOW_MIN_AMPLITUDE: return "FAULT_CODE_ENCODER_SINCOS_BELOW_MIN_AMPLITUDE";
 8009aa8:	4b21      	ldr	r3, [pc, #132]	@ (8009b30 <mc_interface_fault_to_string+0x148>)
 8009aaa:	e022      	b.n	8009af2 <mc_interface_fault_to_string+0x10a>
	case FAULT_CODE_ENCODER_SINCOS_ABOVE_MAX_AMPLITUDE: return "FAULT_CODE_ENCODER_SINCOS_ABOVE_MAX_AMPLITUDE";
 8009aac:	4b21      	ldr	r3, [pc, #132]	@ (8009b34 <mc_interface_fault_to_string+0x14c>)
 8009aae:	e020      	b.n	8009af2 <mc_interface_fault_to_string+0x10a>
	case FAULT_CODE_FLASH_CORRUPTION: return "FAULT_CODE_FLASH_CORRUPTION";
 8009ab0:	4b21      	ldr	r3, [pc, #132]	@ (8009b38 <mc_interface_fault_to_string+0x150>)
 8009ab2:	e01e      	b.n	8009af2 <mc_interface_fault_to_string+0x10a>
	case FAULT_CODE_FLASH_CORRUPTION_APP_CFG: return "FAULT_CODE_FLASH_CORRUPTION_APP_CFG";
 8009ab4:	4b21      	ldr	r3, [pc, #132]	@ (8009b3c <mc_interface_fault_to_string+0x154>)
 8009ab6:	e01c      	b.n	8009af2 <mc_interface_fault_to_string+0x10a>
	case FAULT_CODE_FLASH_CORRUPTION_MC_CFG: return "FAULT_CODE_FLASH_CORRUPTION_MC_CFG";
 8009ab8:	4b21      	ldr	r3, [pc, #132]	@ (8009b40 <mc_interface_fault_to_string+0x158>)
 8009aba:	e01a      	b.n	8009af2 <mc_interface_fault_to_string+0x10a>
	case FAULT_CODE_HIGH_OFFSET_CURRENT_SENSOR_1: return "FAULT_CODE_HIGH_OFFSET_CURRENT_SENSOR_1";
 8009abc:	4b21      	ldr	r3, [pc, #132]	@ (8009b44 <mc_interface_fault_to_string+0x15c>)
 8009abe:	e018      	b.n	8009af2 <mc_interface_fault_to_string+0x10a>
	case FAULT_CODE_HIGH_OFFSET_CURRENT_SENSOR_2: return "FAULT_CODE_HIGH_OFFSET_CURRENT_SENSOR_2";
 8009ac0:	4b21      	ldr	r3, [pc, #132]	@ (8009b48 <mc_interface_fault_to_string+0x160>)
 8009ac2:	e016      	b.n	8009af2 <mc_interface_fault_to_string+0x10a>
	case FAULT_CODE_HIGH_OFFSET_CURRENT_SENSOR_3: return "FAULT_CODE_HIGH_OFFSET_CURRENT_SENSOR_3";
 8009ac4:	4b21      	ldr	r3, [pc, #132]	@ (8009b4c <mc_interface_fault_to_string+0x164>)
 8009ac6:	e014      	b.n	8009af2 <mc_interface_fault_to_string+0x10a>
	case FAULT_CODE_UNBALANCED_CURRENTS: return "FAULT_CODE_UNBALANCED_CURRENTS";
 8009ac8:	4b21      	ldr	r3, [pc, #132]	@ (8009b50 <mc_interface_fault_to_string+0x168>)
 8009aca:	e012      	b.n	8009af2 <mc_interface_fault_to_string+0x10a>
	case FAULT_CODE_BRK: return "FAULT_CODE_BRK";
 8009acc:	4b21      	ldr	r3, [pc, #132]	@ (8009b54 <mc_interface_fault_to_string+0x16c>)
 8009ace:	e010      	b.n	8009af2 <mc_interface_fault_to_string+0x10a>
	case FAULT_CODE_RESOLVER_LOT: return "FAULT_CODE_RESOLVER_LOT";
 8009ad0:	4b21      	ldr	r3, [pc, #132]	@ (8009b58 <mc_interface_fault_to_string+0x170>)
 8009ad2:	e00e      	b.n	8009af2 <mc_interface_fault_to_string+0x10a>
	case FAULT_CODE_RESOLVER_DOS: return "FAULT_CODE_RESOLVER_DOS";
 8009ad4:	4b21      	ldr	r3, [pc, #132]	@ (8009b5c <mc_interface_fault_to_string+0x174>)
 8009ad6:	e00c      	b.n	8009af2 <mc_interface_fault_to_string+0x10a>
	case FAULT_CODE_RESOLVER_LOS: return "FAULT_CODE_RESOLVER_LOS";
 8009ad8:	4b21      	ldr	r3, [pc, #132]	@ (8009b60 <mc_interface_fault_to_string+0x178>)
 8009ada:	e00a      	b.n	8009af2 <mc_interface_fault_to_string+0x10a>
	case FAULT_CODE_ENCODER_NO_MAGNET: return "FAULT_CODE_ENCODER_NO_MAGNET";
 8009adc:	4b21      	ldr	r3, [pc, #132]	@ (8009b64 <mc_interface_fault_to_string+0x17c>)
 8009ade:	e008      	b.n	8009af2 <mc_interface_fault_to_string+0x10a>
	case FAULT_CODE_ENCODER_MAGNET_TOO_STRONG: return "FAULT_CODE_ENCODER_MAGNET_TOO_STRONG";
 8009ae0:	4b21      	ldr	r3, [pc, #132]	@ (8009b68 <mc_interface_fault_to_string+0x180>)
 8009ae2:	e006      	b.n	8009af2 <mc_interface_fault_to_string+0x10a>
	case FAULT_CODE_PHASE_FILTER: return "FAULT_CODE_PHASE_FILTER";
 8009ae4:	4b21      	ldr	r3, [pc, #132]	@ (8009b6c <mc_interface_fault_to_string+0x184>)
 8009ae6:	e004      	b.n	8009af2 <mc_interface_fault_to_string+0x10a>
	case FAULT_CODE_ENCODER_FAULT: return "FAULT_CODE_ENCODER_FAULT";
 8009ae8:	4b21      	ldr	r3, [pc, #132]	@ (8009b70 <mc_interface_fault_to_string+0x188>)
 8009aea:	e002      	b.n	8009af2 <mc_interface_fault_to_string+0x10a>
	case FAULT_CODE_LV_OUTPUT_FAULT: return "FAULT_CODE_LV_OUTPUT_FAULT";
 8009aec:	4b21      	ldr	r3, [pc, #132]	@ (8009b74 <mc_interface_fault_to_string+0x18c>)
 8009aee:	e000      	b.n	8009af2 <mc_interface_fault_to_string+0x10a>
	}

	return "Unknown fault";
 8009af0:	4b21      	ldr	r3, [pc, #132]	@ (8009b78 <mc_interface_fault_to_string+0x190>)
}
 8009af2:	4618      	mov	r0, r3
 8009af4:	370c      	adds	r7, #12
 8009af6:	46bd      	mov	sp, r7
 8009af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009afc:	4770      	bx	lr
 8009afe:	bf00      	nop
 8009b00:	080215f0 	.word	0x080215f0
 8009b04:	08021600 	.word	0x08021600
 8009b08:	08021618 	.word	0x08021618
 8009b0c:	08021634 	.word	0x08021634
 8009b10:	08021644 	.word	0x08021644
 8009b14:	08021660 	.word	0x08021660
 8009b18:	0802167c 	.word	0x0802167c
 8009b1c:	08021698 	.word	0x08021698
 8009b20:	080216bc 	.word	0x080216bc
 8009b24:	080216e4 	.word	0x080216e4
 8009b28:	08021704 	.word	0x08021704
 8009b2c:	0802172c 	.word	0x0802172c
 8009b30:	08021744 	.word	0x08021744
 8009b34:	08021774 	.word	0x08021774
 8009b38:	080217a4 	.word	0x080217a4
 8009b3c:	080217c0 	.word	0x080217c0
 8009b40:	080217e4 	.word	0x080217e4
 8009b44:	08021808 	.word	0x08021808
 8009b48:	08021830 	.word	0x08021830
 8009b4c:	08021858 	.word	0x08021858
 8009b50:	08021880 	.word	0x08021880
 8009b54:	080218a0 	.word	0x080218a0
 8009b58:	080218b0 	.word	0x080218b0
 8009b5c:	080218c8 	.word	0x080218c8
 8009b60:	080218e0 	.word	0x080218e0
 8009b64:	080218f8 	.word	0x080218f8
 8009b68:	08021918 	.word	0x08021918
 8009b6c:	08021940 	.word	0x08021940
 8009b70:	08021958 	.word	0x08021958
 8009b74:	08021974 	.word	0x08021974
 8009b78:	08021990 	.word	0x08021990

08009b7c <set_rx_frames>:
		return res;
	} else
		return 0;
}

uint8_t set_rx_frames(Vescmsg* CANRxFrame) {
 8009b7c:	b4b0      	push	{r4, r5, r7}
 8009b7e:	b085      	sub	sp, #20
 8009b80:	af00      	add	r7, sp, #0
 8009b82:	6078      	str	r0, [r7, #4]
	uint32_t cmd;

	rx_frames[rx_frame_write++] = *CANRxFrame;
 8009b84:	4b16      	ldr	r3, [pc, #88]	@ (8009be0 <set_rx_frames+0x64>)
 8009b86:	681a      	ldr	r2, [r3, #0]
 8009b88:	1c53      	adds	r3, r2, #1
 8009b8a:	4915      	ldr	r1, [pc, #84]	@ (8009be0 <set_rx_frames+0x64>)
 8009b8c:	600b      	str	r3, [r1, #0]
 8009b8e:	4915      	ldr	r1, [pc, #84]	@ (8009be4 <set_rx_frames+0x68>)
 8009b90:	4613      	mov	r3, r2
 8009b92:	00db      	lsls	r3, r3, #3
 8009b94:	4413      	add	r3, r2
 8009b96:	009b      	lsls	r3, r3, #2
 8009b98:	18ca      	adds	r2, r1, r3
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	4614      	mov	r4, r2
 8009b9e:	461d      	mov	r5, r3
 8009ba0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009ba2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009ba4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009ba6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009ba8:	682b      	ldr	r3, [r5, #0]
 8009baa:	6023      	str	r3, [r4, #0]
	if (rx_frame_write == RX_FRAMES_SIZE) {
 8009bac:	4b0c      	ldr	r3, [pc, #48]	@ (8009be0 <set_rx_frames+0x64>)
 8009bae:	681b      	ldr	r3, [r3, #0]
 8009bb0:	2b64      	cmp	r3, #100	@ 0x64
 8009bb2:	d102      	bne.n	8009bba <set_rx_frames+0x3e>
		rx_frame_write = 0;
 8009bb4:	4b0a      	ldr	r3, [pc, #40]	@ (8009be0 <set_rx_frames+0x64>)
 8009bb6:	2200      	movs	r2, #0
 8009bb8:	601a      	str	r2, [r3, #0]
	}

	cmd = CANRxFrame->Rxmsg.ExtId >> 8;
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	685b      	ldr	r3, [r3, #4]
 8009bbe:	0a1b      	lsrs	r3, r3, #8
 8009bc0:	60fb      	str	r3, [r7, #12]
	if(cmd == (uint32_t)CAN_PACKET_PROCESS_RX_BUFFER || cmd == (uint32_t)CAN_PACKET_PROCESS_SHORT_BUFFER)
 8009bc2:	68fb      	ldr	r3, [r7, #12]
 8009bc4:	2b07      	cmp	r3, #7
 8009bc6:	d002      	beq.n	8009bce <set_rx_frames+0x52>
 8009bc8:	68fb      	ldr	r3, [r7, #12]
 8009bca:	2b08      	cmp	r3, #8
 8009bcc:	d101      	bne.n	8009bd2 <set_rx_frames+0x56>
		return 112;
 8009bce:	2370      	movs	r3, #112	@ 0x70
 8009bd0:	e000      	b.n	8009bd4 <set_rx_frames+0x58>
	else
		return 0;
 8009bd2:	2300      	movs	r3, #0
}
 8009bd4:	4618      	mov	r0, r3
 8009bd6:	3714      	adds	r7, #20
 8009bd8:	46bd      	mov	sp, r7
 8009bda:	bcb0      	pop	{r4, r5, r7}
 8009bdc:	4770      	bx	lr
 8009bde:	bf00      	nop
 8009be0:	2000163c 	.word	0x2000163c
 8009be4:	2000082c 	.word	0x2000082c

08009be8 <Initialize>:
uint8_t buf2_flag = 0;

/************************************************/
/*		 	 	Functions		       		  	*/
/************************************************/
void Initialize(){
 8009be8:	b580      	push	{r7, lr}
 8009bea:	b086      	sub	sp, #24
 8009bec:	af06      	add	r7, sp, #24
	/* MCU Configuration--------------------------------------------------------*/
	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8009bee:	f002 f973 	bl	800bed8 <HAL_Init>

	/* Configure the system clock */
	SystemClock_Config();
 8009bf2:	f7f9 fbb3 	bl	800335c <SystemClock_Config>

	/* Initialize all configured peripherals */
	GPIOPinsInit (LED1_PIN, GPIO_MODE_OUTPUT_PP,GPIO_SPEED_FREQ_HIGH, GPIO_PULLUP);
 8009bf6:	2301      	movs	r3, #1
 8009bf8:	9300      	str	r3, [sp, #0]
 8009bfa:	2302      	movs	r3, #2
 8009bfc:	2201      	movs	r2, #1
 8009bfe:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8009c02:	48c6      	ldr	r0, [pc, #792]	@ (8009f1c <Initialize+0x334>)
 8009c04:	f7f7 fc40 	bl	8001488 <GPIOPinsInit>
	GPIOPinsInit (LED2_PIN, GPIO_MODE_OUTPUT_PP,GPIO_SPEED_FREQ_HIGH, GPIO_PULLUP);
 8009c08:	2301      	movs	r3, #1
 8009c0a:	9300      	str	r3, [sp, #0]
 8009c0c:	2302      	movs	r3, #2
 8009c0e:	2201      	movs	r2, #1
 8009c10:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8009c14:	48c1      	ldr	r0, [pc, #772]	@ (8009f1c <Initialize+0x334>)
 8009c16:	f7f7 fc37 	bl	8001488 <GPIOPinsInit>
	GPIOPinsInit (LED3_PIN, GPIO_MODE_OUTPUT_PP,GPIO_SPEED_FREQ_HIGH, GPIO_PULLUP);
 8009c1a:	2301      	movs	r3, #1
 8009c1c:	9300      	str	r3, [sp, #0]
 8009c1e:	2302      	movs	r3, #2
 8009c20:	2201      	movs	r2, #1
 8009c22:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8009c26:	48bd      	ldr	r0, [pc, #756]	@ (8009f1c <Initialize+0x334>)
 8009c28:	f7f7 fc2e 	bl	8001488 <GPIOPinsInit>

	GPIOPinsInit (PB1_PIN, GPIO_MODE_INPUT,GPIO_SPEED_FREQ_HIGH, GPIO_PULLUP);
 8009c2c:	2301      	movs	r3, #1
 8009c2e:	9300      	str	r3, [sp, #0]
 8009c30:	2302      	movs	r3, #2
 8009c32:	2200      	movs	r2, #0
 8009c34:	2180      	movs	r1, #128	@ 0x80
 8009c36:	48ba      	ldr	r0, [pc, #744]	@ (8009f20 <Initialize+0x338>)
 8009c38:	f7f7 fc26 	bl	8001488 <GPIOPinsInit>
	GPIOPinsInit (PB2_PIN, GPIO_MODE_INPUT,GPIO_SPEED_FREQ_HIGH, GPIO_PULLUP);
 8009c3c:	2301      	movs	r3, #1
 8009c3e:	9300      	str	r3, [sp, #0]
 8009c40:	2302      	movs	r3, #2
 8009c42:	2200      	movs	r2, #0
 8009c44:	2101      	movs	r1, #1
 8009c46:	48b7      	ldr	r0, [pc, #732]	@ (8009f24 <Initialize+0x33c>)
 8009c48:	f7f7 fc1e 	bl	8001488 <GPIOPinsInit>

	/*Normal IOs*/
	GPIOPinsInit (IP1_PIN, GPIO_MODE_INPUT,GPIO_SPEED_FREQ_MEDIUM, GPIO_PULLUP);
 8009c4c:	2301      	movs	r3, #1
 8009c4e:	9300      	str	r3, [sp, #0]
 8009c50:	2301      	movs	r3, #1
 8009c52:	2200      	movs	r2, #0
 8009c54:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8009c58:	48b2      	ldr	r0, [pc, #712]	@ (8009f24 <Initialize+0x33c>)
 8009c5a:	f7f7 fc15 	bl	8001488 <GPIOPinsInit>
	GPIOPinsInit (IP2_PIN, GPIO_MODE_INPUT,GPIO_SPEED_FREQ_MEDIUM, GPIO_PULLUP);
 8009c5e:	2301      	movs	r3, #1
 8009c60:	9300      	str	r3, [sp, #0]
 8009c62:	2301      	movs	r3, #1
 8009c64:	2200      	movs	r2, #0
 8009c66:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8009c6a:	48ae      	ldr	r0, [pc, #696]	@ (8009f24 <Initialize+0x33c>)
 8009c6c:	f7f7 fc0c 	bl	8001488 <GPIOPinsInit>
	GPIOPinsInit (IP3_PIN, GPIO_MODE_INPUT,GPIO_SPEED_FREQ_MEDIUM, GPIO_PULLUP);
 8009c70:	2301      	movs	r3, #1
 8009c72:	9300      	str	r3, [sp, #0]
 8009c74:	2301      	movs	r3, #1
 8009c76:	2200      	movs	r2, #0
 8009c78:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8009c7c:	48a9      	ldr	r0, [pc, #676]	@ (8009f24 <Initialize+0x33c>)
 8009c7e:	f7f7 fc03 	bl	8001488 <GPIOPinsInit>
	GPIOPinsInit (IP4_PIN, GPIO_MODE_INPUT,GPIO_SPEED_FREQ_MEDIUM, GPIO_PULLUP);
 8009c82:	2301      	movs	r3, #1
 8009c84:	9300      	str	r3, [sp, #0]
 8009c86:	2301      	movs	r3, #1
 8009c88:	2200      	movs	r2, #0
 8009c8a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8009c8e:	48a5      	ldr	r0, [pc, #660]	@ (8009f24 <Initialize+0x33c>)
 8009c90:	f7f7 fbfa 	bl	8001488 <GPIOPinsInit>
	GPIOPinsInit (IP5_PIN, GPIO_MODE_INPUT,GPIO_SPEED_FREQ_MEDIUM, GPIO_PULLUP);
 8009c94:	2301      	movs	r3, #1
 8009c96:	9300      	str	r3, [sp, #0]
 8009c98:	2301      	movs	r3, #1
 8009c9a:	2200      	movs	r2, #0
 8009c9c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8009ca0:	489f      	ldr	r0, [pc, #636]	@ (8009f20 <Initialize+0x338>)
 8009ca2:	f7f7 fbf1 	bl	8001488 <GPIOPinsInit>
	GPIOPinsInit (IP6_PIN, GPIO_MODE_INPUT,GPIO_SPEED_FREQ_MEDIUM, GPIO_PULLUP);
 8009ca6:	2301      	movs	r3, #1
 8009ca8:	9300      	str	r3, [sp, #0]
 8009caa:	2301      	movs	r3, #1
 8009cac:	2200      	movs	r2, #0
 8009cae:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8009cb2:	489b      	ldr	r0, [pc, #620]	@ (8009f20 <Initialize+0x338>)
 8009cb4:	f7f7 fbe8 	bl	8001488 <GPIOPinsInit>
#ifdef mainboard
	GPIOPinsInit (IP7_PIN, GPIO_MODE_INPUT,GPIO_SPEED_FREQ_MEDIUM, GPIO_PULLUP);
 8009cb8:	2301      	movs	r3, #1
 8009cba:	9300      	str	r3, [sp, #0]
 8009cbc:	2301      	movs	r3, #1
 8009cbe:	2200      	movs	r2, #0
 8009cc0:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8009cc4:	4898      	ldr	r0, [pc, #608]	@ (8009f28 <Initialize+0x340>)
 8009cc6:	f7f7 fbdf 	bl	8001488 <GPIOPinsInit>
	GPIOPinsInit (IP8_PIN, GPIO_MODE_INPUT,GPIO_SPEED_FREQ_MEDIUM, GPIO_PULLUP);
 8009cca:	2301      	movs	r3, #1
 8009ccc:	9300      	str	r3, [sp, #0]
 8009cce:	2301      	movs	r3, #1
 8009cd0:	2200      	movs	r2, #0
 8009cd2:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8009cd6:	4894      	ldr	r0, [pc, #592]	@ (8009f28 <Initialize+0x340>)
 8009cd8:	f7f7 fbd6 	bl	8001488 <GPIOPinsInit>
	GPIOPinsInit (IP9_PIN, GPIO_MODE_INPUT,GPIO_SPEED_FREQ_MEDIUM, GPIO_PULLUP);
 8009cdc:	2301      	movs	r3, #1
 8009cde:	9300      	str	r3, [sp, #0]
 8009ce0:	2301      	movs	r3, #1
 8009ce2:	2200      	movs	r2, #0
 8009ce4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8009ce8:	488c      	ldr	r0, [pc, #560]	@ (8009f1c <Initialize+0x334>)
 8009cea:	f7f7 fbcd 	bl	8001488 <GPIOPinsInit>
	GPIOPinsInit (IP10_PIN, GPIO_MODE_INPUT,GPIO_SPEED_FREQ_MEDIUM, GPIO_PULLUP);
 8009cee:	2301      	movs	r3, #1
 8009cf0:	9300      	str	r3, [sp, #0]
 8009cf2:	2301      	movs	r3, #1
 8009cf4:	2200      	movs	r2, #0
 8009cf6:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8009cfa:	488c      	ldr	r0, [pc, #560]	@ (8009f2c <Initialize+0x344>)
 8009cfc:	f7f7 fbc4 	bl	8001488 <GPIOPinsInit>
	GPIOPinsInit (IP11_PIN, GPIO_MODE_INPUT,GPIO_SPEED_FREQ_MEDIUM, GPIO_PULLUP);
 8009d00:	2301      	movs	r3, #1
 8009d02:	9300      	str	r3, [sp, #0]
 8009d04:	2301      	movs	r3, #1
 8009d06:	2200      	movs	r2, #0
 8009d08:	2108      	movs	r1, #8
 8009d0a:	4887      	ldr	r0, [pc, #540]	@ (8009f28 <Initialize+0x340>)
 8009d0c:	f7f7 fbbc 	bl	8001488 <GPIOPinsInit>
	GPIOPinsInit (IP12_PIN, GPIO_MODE_INPUT,GPIO_SPEED_FREQ_MEDIUM, GPIO_PULLUP);
 8009d10:	2301      	movs	r3, #1
 8009d12:	9300      	str	r3, [sp, #0]
 8009d14:	2301      	movs	r3, #1
 8009d16:	2200      	movs	r2, #0
 8009d18:	2110      	movs	r1, #16
 8009d1a:	4883      	ldr	r0, [pc, #524]	@ (8009f28 <Initialize+0x340>)
 8009d1c:	f7f7 fbb4 	bl	8001488 <GPIOPinsInit>
	GPIOPinsInit (IP13_PIN, GPIO_MODE_INPUT,GPIO_SPEED_FREQ_MEDIUM, GPIO_PULLUP);
 8009d20:	2301      	movs	r3, #1
 8009d22:	9300      	str	r3, [sp, #0]
 8009d24:	2301      	movs	r3, #1
 8009d26:	2200      	movs	r2, #0
 8009d28:	2180      	movs	r1, #128	@ 0x80
 8009d2a:	487f      	ldr	r0, [pc, #508]	@ (8009f28 <Initialize+0x340>)
 8009d2c:	f7f7 fbac 	bl	8001488 <GPIOPinsInit>
	GPIOPinsInit (IP14_PIN, GPIO_MODE_INPUT,GPIO_SPEED_FREQ_MEDIUM, GPIO_PULLUP);
 8009d30:	2301      	movs	r3, #1
 8009d32:	9300      	str	r3, [sp, #0]
 8009d34:	2301      	movs	r3, #1
 8009d36:	2200      	movs	r2, #0
 8009d38:	2120      	movs	r1, #32
 8009d3a:	4879      	ldr	r0, [pc, #484]	@ (8009f20 <Initialize+0x338>)
 8009d3c:	f7f7 fba4 	bl	8001488 <GPIOPinsInit>
	GPIOPinsInit (IP15_PIN, GPIO_MODE_INPUT,GPIO_SPEED_FREQ_MEDIUM, GPIO_PULLUP);
 8009d40:	2301      	movs	r3, #1
 8009d42:	9300      	str	r3, [sp, #0]
 8009d44:	2301      	movs	r3, #1
 8009d46:	2200      	movs	r2, #0
 8009d48:	2140      	movs	r1, #64	@ 0x40
 8009d4a:	4875      	ldr	r0, [pc, #468]	@ (8009f20 <Initialize+0x338>)
 8009d4c:	f7f7 fb9c 	bl	8001488 <GPIOPinsInit>

	GPIOPinsInit (IP16_Analog1_PIN, GPIO_MODE_INPUT,GPIO_SPEED_FREQ_MEDIUM, GPIO_PULLUP);
 8009d50:	2301      	movs	r3, #1
 8009d52:	9300      	str	r3, [sp, #0]
 8009d54:	2301      	movs	r3, #1
 8009d56:	2200      	movs	r2, #0
 8009d58:	2101      	movs	r1, #1
 8009d5a:	4870      	ldr	r0, [pc, #448]	@ (8009f1c <Initialize+0x334>)
 8009d5c:	f7f7 fb94 	bl	8001488 <GPIOPinsInit>
	GPIOPinsInit (IP17_Analog2_PIN, GPIO_MODE_INPUT,GPIO_SPEED_FREQ_MEDIUM, GPIO_PULLUP);
 8009d60:	2301      	movs	r3, #1
 8009d62:	9300      	str	r3, [sp, #0]
 8009d64:	2301      	movs	r3, #1
 8009d66:	2200      	movs	r2, #0
 8009d68:	2102      	movs	r1, #2
 8009d6a:	486c      	ldr	r0, [pc, #432]	@ (8009f1c <Initialize+0x334>)
 8009d6c:	f7f7 fb8c 	bl	8001488 <GPIOPinsInit>
	GPIOPinsInit (IP18_Analog3_PIN, GPIO_MODE_INPUT,GPIO_SPEED_FREQ_MEDIUM, GPIO_PULLUP);
 8009d70:	2301      	movs	r3, #1
 8009d72:	9300      	str	r3, [sp, #0]
 8009d74:	2301      	movs	r3, #1
 8009d76:	2200      	movs	r2, #0
 8009d78:	2104      	movs	r1, #4
 8009d7a:	4868      	ldr	r0, [pc, #416]	@ (8009f1c <Initialize+0x334>)
 8009d7c:	f7f7 fb84 	bl	8001488 <GPIOPinsInit>
	GPIOPinsInit (IP19_Analog4_PIN, GPIO_MODE_INPUT,GPIO_SPEED_FREQ_MEDIUM, GPIO_PULLUP);
 8009d80:	2301      	movs	r3, #1
 8009d82:	9300      	str	r3, [sp, #0]
 8009d84:	2301      	movs	r3, #1
 8009d86:	2200      	movs	r2, #0
 8009d88:	2108      	movs	r1, #8
 8009d8a:	4864      	ldr	r0, [pc, #400]	@ (8009f1c <Initialize+0x334>)
 8009d8c:	f7f7 fb7c 	bl	8001488 <GPIOPinsInit>
	GPIOPinsInit (IP20_Analog5_PIN, GPIO_MODE_INPUT,GPIO_SPEED_FREQ_MEDIUM, GPIO_PULLUP);
 8009d90:	2301      	movs	r3, #1
 8009d92:	9300      	str	r3, [sp, #0]
 8009d94:	2301      	movs	r3, #1
 8009d96:	2200      	movs	r2, #0
 8009d98:	2110      	movs	r1, #16
 8009d9a:	4860      	ldr	r0, [pc, #384]	@ (8009f1c <Initialize+0x334>)
 8009d9c:	f7f7 fb74 	bl	8001488 <GPIOPinsInit>
	GPIOPinsInit (IP21_Analog6_PIN, GPIO_MODE_INPUT,GPIO_SPEED_FREQ_MEDIUM, GPIO_PULLUP);
 8009da0:	2301      	movs	r3, #1
 8009da2:	9300      	str	r3, [sp, #0]
 8009da4:	2301      	movs	r3, #1
 8009da6:	2200      	movs	r2, #0
 8009da8:	2120      	movs	r1, #32
 8009daa:	485c      	ldr	r0, [pc, #368]	@ (8009f1c <Initialize+0x334>)
 8009dac:	f7f7 fb6c 	bl	8001488 <GPIOPinsInit>

	MUXInit(&MUX, MUX1_INPUT_PIN, MUX1_S0_PIN, MUX1_S1_PIN, MUX1_S2_PIN);
 8009db0:	2310      	movs	r3, #16
 8009db2:	9304      	str	r3, [sp, #16]
 8009db4:	4b5b      	ldr	r3, [pc, #364]	@ (8009f24 <Initialize+0x33c>)
 8009db6:	9303      	str	r3, [sp, #12]
 8009db8:	2308      	movs	r3, #8
 8009dba:	9302      	str	r3, [sp, #8]
 8009dbc:	4b59      	ldr	r3, [pc, #356]	@ (8009f24 <Initialize+0x33c>)
 8009dbe:	9301      	str	r3, [sp, #4]
 8009dc0:	2304      	movs	r3, #4
 8009dc2:	9300      	str	r3, [sp, #0]
 8009dc4:	4b57      	ldr	r3, [pc, #348]	@ (8009f24 <Initialize+0x33c>)
 8009dc6:	2202      	movs	r2, #2
 8009dc8:	4956      	ldr	r1, [pc, #344]	@ (8009f24 <Initialize+0x33c>)
 8009dca:	4859      	ldr	r0, [pc, #356]	@ (8009f30 <Initialize+0x348>)
 8009dcc:	f7f7 fc56 	bl	800167c <MUXInit>
	GPIOPinsInit (IP7_Analog1_PIN, GPIO_MODE_INPUT,GPIO_SPEED_FREQ_MEDIUM, GPIO_PULLUP);
	GPIOPinsInit (IP8_Analog2_PIN, GPIO_MODE_INPUT,GPIO_SPEED_FREQ_MEDIUM, GPIO_PULLUP);
//	UARTInit(&huart1, 115200, ENABLE);
//	QEIInit(&htim3);
#endif
	SHIFTREGInit (&SR, CASCADE_1, SR_SCK_PIN, SR_RCK_PIN, SR_SI_PIN);
 8009dd0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009dd4:	9303      	str	r3, [sp, #12]
 8009dd6:	4b53      	ldr	r3, [pc, #332]	@ (8009f24 <Initialize+0x33c>)
 8009dd8:	9302      	str	r3, [sp, #8]
 8009dda:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8009dde:	9301      	str	r3, [sp, #4]
 8009de0:	4b50      	ldr	r3, [pc, #320]	@ (8009f24 <Initialize+0x33c>)
 8009de2:	9300      	str	r3, [sp, #0]
 8009de4:	2380      	movs	r3, #128	@ 0x80
 8009de6:	4a4f      	ldr	r2, [pc, #316]	@ (8009f24 <Initialize+0x33c>)
 8009de8:	2101      	movs	r1, #1
 8009dea:	4852      	ldr	r0, [pc, #328]	@ (8009f34 <Initialize+0x34c>)
 8009dec:	f7f8 f9aa 	bl	8002144 <SHIFTREGInit>

	//https://stackoverflow.com/questions/50243996/what-are-valid-values-of-hal-nvic-setpriority-when-using-stm32-and-freertos
	HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8009df0:	2003      	movs	r0, #3
 8009df2:	f003 f854 	bl	800ce9e <HAL_NVIC_SetPriorityGrouping>

	/*************** Set Interrupt Priorities in BIOS/priorities.h ***************/
	I2CxInit (&hi2c1, main_board_1, CLOCK_SPEED_100KHz, ENABLE);
 8009df6:	2301      	movs	r3, #1
 8009df8:	4a4f      	ldr	r2, [pc, #316]	@ (8009f38 <Initialize+0x350>)
 8009dfa:	2108      	movs	r1, #8
 8009dfc:	484f      	ldr	r0, [pc, #316]	@ (8009f3c <Initialize+0x354>)
 8009dfe:	f7f9 ff1b 	bl	8003c38 <I2CxInit>
	I2CxInit (&hi2c2, main_board_2, CLOCK_SPEED_100KHz, ENABLE);
 8009e02:	2301      	movs	r3, #1
 8009e04:	4a4c      	ldr	r2, [pc, #304]	@ (8009f38 <Initialize+0x350>)
 8009e06:	2109      	movs	r1, #9
 8009e08:	484d      	ldr	r0, [pc, #308]	@ (8009f40 <Initialize+0x358>)
 8009e0a:	f7f9 ff15 	bl	8003c38 <I2CxInit>
	I2CxInit (&hi2c3, main_board_3, CLOCK_SPEED_100KHz, ENABLE);
 8009e0e:	2301      	movs	r3, #1
 8009e10:	4a49      	ldr	r2, [pc, #292]	@ (8009f38 <Initialize+0x350>)
 8009e12:	210a      	movs	r1, #10
 8009e14:	484b      	ldr	r0, [pc, #300]	@ (8009f44 <Initialize+0x35c>)
 8009e16:	f7f9 ff0f 	bl	8003c38 <I2CxInit>
//	UARTx_DMA_Rx_Init(&huart4, &hdma_uart4_rx, 115200);
//	UARTx_DMA_Rx_Init(&huart2, &hdma_usart2_rx, 115200);//Bluebee Tuning
#ifdef newpin
	UARTInit(&huart1, 115200, ENABLE);
#endif
	UARTInit(&huart2, 115200, ENABLE);					//ros
 8009e1a:	2201      	movs	r2, #1
 8009e1c:	f44f 31e1 	mov.w	r1, #115200	@ 0x1c200
 8009e20:	4849      	ldr	r0, [pc, #292]	@ (8009f48 <Initialize+0x360>)
 8009e22:	f7f9 fca3 	bl	800376c <UARTInit>
	UARTInit(&huart3, 115200, ENABLE);
 8009e26:	2201      	movs	r2, #1
 8009e28:	f44f 31e1 	mov.w	r1, #115200	@ 0x1c200
 8009e2c:	4847      	ldr	r0, [pc, #284]	@ (8009f4c <Initialize+0x364>)
 8009e2e:	f7f9 fc9d 	bl	800376c <UARTInit>
	UARTInit(&huart4, 115200, ENABLE);					//tfmini
 8009e32:	2201      	movs	r2, #1
 8009e34:	f44f 31e1 	mov.w	r1, #115200	@ 0x1c200
 8009e38:	4845      	ldr	r0, [pc, #276]	@ (8009f50 <Initialize+0x368>)
 8009e3a:	f7f9 fc97 	bl	800376c <UARTInit>
	UARTInit(&huart5, 115200, ENABLE);
 8009e3e:	2201      	movs	r2, #1
 8009e40:	f44f 31e1 	mov.w	r1, #115200	@ 0x1c200
 8009e44:	4843      	ldr	r0, [pc, #268]	@ (8009f54 <Initialize+0x36c>)
 8009e46:	f7f9 fc91 	bl	800376c <UARTInit>

	QEIInit(&htim1);	//X
 8009e4a:	4843      	ldr	r0, [pc, #268]	@ (8009f58 <Initialize+0x370>)
 8009e4c:	f7f7 fff2 	bl	8001e34 <QEIInit>
	QEIInit(&htim4);
 8009e50:	4842      	ldr	r0, [pc, #264]	@ (8009f5c <Initialize+0x374>)
 8009e52:	f7f7 ffef 	bl	8001e34 <QEIInit>
	QEIInit(&htim8);
 8009e56:	4842      	ldr	r0, [pc, #264]	@ (8009f60 <Initialize+0x378>)
 8009e58:	f7f7 ffec 	bl	8001e34 <QEIInit>
//	CANxInit(&hcan1,4,CAN_FILTER_FIFO0,CAN_FILTERSCALE_16BIT,RNS_TO_mainboard,(0x7FF - 0x3),0,CAN_500KHz);	//receive data from RNS board only
//	CANxInit(&hcan1,4,CAN_FILTER_FIFO0,CAN_FILTERSCALE_32BIT,0,0,10,CAN_1MHz);
//	CANxInit(&hcan2,4,CAN_FILTER_FIFO1,CAN_FILTERSCALE_32BIT,0,0,14,CAN_500KHz);
//	CANxInit(&hcan2,4,CAN_FILTER_FIFO1,CAN_FILTERSCALE_32BIT,0,0,14,CAN_1MHz);

	CANxInit(&hcan1, CAN_FILTER_FIFO0, CAN_FILTERSCALE_32BIT, 0, 0, 10, CAN_1MHz);// RNS, 3 vesc, 1 robomaster
 8009e5c:	2301      	movs	r3, #1
 8009e5e:	9302      	str	r3, [sp, #8]
 8009e60:	230a      	movs	r3, #10
 8009e62:	9301      	str	r3, [sp, #4]
 8009e64:	2300      	movs	r3, #0
 8009e66:	9300      	str	r3, [sp, #0]
 8009e68:	2300      	movs	r3, #0
 8009e6a:	2201      	movs	r2, #1
 8009e6c:	2100      	movs	r1, #0
 8009e6e:	483d      	ldr	r0, [pc, #244]	@ (8009f64 <Initialize+0x37c>)
 8009e70:	f7f9 fd8a 	bl	8003988 <CANxInit>
	CANxInit(&hcan2, CAN_FILTER_FIFO1, CAN_FILTERSCALE_32BIT, 0, 0, 14, CAN_1MHz);// 5 vesc
 8009e74:	2301      	movs	r3, #1
 8009e76:	9302      	str	r3, [sp, #8]
 8009e78:	230e      	movs	r3, #14
 8009e7a:	9301      	str	r3, [sp, #4]
 8009e7c:	2300      	movs	r3, #0
 8009e7e:	9300      	str	r3, [sp, #0]
 8009e80:	2300      	movs	r3, #0
 8009e82:	2201      	movs	r2, #1
 8009e84:	2101      	movs	r1, #1
 8009e86:	4838      	ldr	r0, [pc, #224]	@ (8009f68 <Initialize+0x380>)
 8009e88:	f7f9 fd7e 	bl	8003988 <CANxInit>


	PWMTimeBaseInit(&htim3, 20000, 84);
 8009e8c:	2254      	movs	r2, #84	@ 0x54
 8009e8e:	f644 6120 	movw	r1, #20000	@ 0x4e20
 8009e92:	4836      	ldr	r0, [pc, #216]	@ (8009f6c <Initialize+0x384>)
 8009e94:	f7f7 fd5c 	bl	8001950 <PWMTimeBaseInit>
	PWMChannelConfig(&htim3, TIM_CHANNEL_3, TIM3_CHANNEL3_PIN);
 8009e98:	2301      	movs	r3, #1
 8009e9a:	4a21      	ldr	r2, [pc, #132]	@ (8009f20 <Initialize+0x338>)
 8009e9c:	2108      	movs	r1, #8
 8009e9e:	4833      	ldr	r0, [pc, #204]	@ (8009f6c <Initialize+0x384>)
 8009ea0:	f7f7 fe3c 	bl	8001b1c <PWMChannelConfig>
	PWMChannelConfig(&htim3, TIM_CHANNEL_4 , TIM3_CHANNEL4_PIN);
 8009ea4:	2302      	movs	r3, #2
 8009ea6:	4a1e      	ldr	r2, [pc, #120]	@ (8009f20 <Initialize+0x338>)
 8009ea8:	210c      	movs	r1, #12
 8009eaa:	4830      	ldr	r0, [pc, #192]	@ (8009f6c <Initialize+0x384>)
 8009eac:	f7f7 fe36 	bl	8001b1c <PWMChannelConfig>

	PWMTimeBaseInit(&htim5, 20000, 84);
 8009eb0:	2254      	movs	r2, #84	@ 0x54
 8009eb2:	f644 6120 	movw	r1, #20000	@ 0x4e20
 8009eb6:	482e      	ldr	r0, [pc, #184]	@ (8009f70 <Initialize+0x388>)
 8009eb8:	f7f7 fd4a 	bl	8001950 <PWMTimeBaseInit>
	PWMChannelConfig(&htim5, TIM_CHANNEL_1, TIM5_CHANNEL1_PIN);
 8009ebc:	2301      	movs	r3, #1
 8009ebe:	4a1b      	ldr	r2, [pc, #108]	@ (8009f2c <Initialize+0x344>)
 8009ec0:	2100      	movs	r1, #0
 8009ec2:	482b      	ldr	r0, [pc, #172]	@ (8009f70 <Initialize+0x388>)
 8009ec4:	f7f7 fe2a 	bl	8001b1c <PWMChannelConfig>
	PWMChannelConfig(&htim5, TIM_CHANNEL_2, TIM5_CHANNEL2_PIN);
 8009ec8:	2302      	movs	r3, #2
 8009eca:	4a18      	ldr	r2, [pc, #96]	@ (8009f2c <Initialize+0x344>)
 8009ecc:	2104      	movs	r1, #4
 8009ece:	4828      	ldr	r0, [pc, #160]	@ (8009f70 <Initialize+0x388>)
 8009ed0:	f7f7 fe24 	bl	8001b1c <PWMChannelConfig>
	PWMChannelConfig(&htim5, TIM_CHANNEL_3, TIM5_CHANNEL3_PIN);
 8009ed4:	2304      	movs	r3, #4
 8009ed6:	4a15      	ldr	r2, [pc, #84]	@ (8009f2c <Initialize+0x344>)
 8009ed8:	2108      	movs	r1, #8
 8009eda:	4825      	ldr	r0, [pc, #148]	@ (8009f70 <Initialize+0x388>)
 8009edc:	f7f7 fe1e 	bl	8001b1c <PWMChannelConfig>
	PWMChannelConfig(&htim5, TIM_CHANNEL_4, TIM5_CHANNEL4_PIN);
 8009ee0:	2308      	movs	r3, #8
 8009ee2:	4a12      	ldr	r2, [pc, #72]	@ (8009f2c <Initialize+0x344>)
 8009ee4:	210c      	movs	r1, #12
 8009ee6:	4822      	ldr	r0, [pc, #136]	@ (8009f70 <Initialize+0x388>)
 8009ee8:	f7f7 fe18 	bl	8001b1c <PWMChannelConfig>

	PWMTimeBaseInit(&htim9, 20000, 168);
 8009eec:	22a8      	movs	r2, #168	@ 0xa8
 8009eee:	f644 6120 	movw	r1, #20000	@ 0x4e20
 8009ef2:	4820      	ldr	r0, [pc, #128]	@ (8009f74 <Initialize+0x38c>)
 8009ef4:	f7f7 fd2c 	bl	8001950 <PWMTimeBaseInit>
	PWMChannelConfig(&htim9, TIM_CHANNEL_1, TIM9_CHANNEL1_PIN);
 8009ef8:	2320      	movs	r3, #32
 8009efa:	4a0a      	ldr	r2, [pc, #40]	@ (8009f24 <Initialize+0x33c>)
 8009efc:	2100      	movs	r1, #0
 8009efe:	481d      	ldr	r0, [pc, #116]	@ (8009f74 <Initialize+0x38c>)
 8009f00:	f7f7 fe0c 	bl	8001b1c <PWMChannelConfig>
	PWMChannelConfig(&htim9, TIM_CHANNEL_2, TIM9_CHANNEL2_PIN);
 8009f04:	2340      	movs	r3, #64	@ 0x40
 8009f06:	4a07      	ldr	r2, [pc, #28]	@ (8009f24 <Initialize+0x33c>)
 8009f08:	2104      	movs	r1, #4
 8009f0a:	481a      	ldr	r0, [pc, #104]	@ (8009f74 <Initialize+0x38c>)
 8009f0c:	f7f7 fe06 	bl	8001b1c <PWMChannelConfig>

	BDCInit(&BDC1, &htim3, TIM_CHANNEL_4, SHIFTREG, &(SR.cast[1]), Bit6, Bit7);
 8009f10:	2380      	movs	r3, #128	@ 0x80
 8009f12:	9302      	str	r3, [sp, #8]
 8009f14:	2340      	movs	r3, #64	@ 0x40
 8009f16:	9301      	str	r3, [sp, #4]
 8009f18:	e02e      	b.n	8009f78 <Initialize+0x390>
 8009f1a:	bf00      	nop
 8009f1c:	40020800 	.word	0x40020800
 8009f20:	40020400 	.word	0x40020400
 8009f24:	40021000 	.word	0x40021000
 8009f28:	40020c00 	.word	0x40020c00
 8009f2c:	40020000 	.word	0x40020000
 8009f30:	2000906c 	.word	0x2000906c
 8009f34:	2000903c 	.word	0x2000903c
 8009f38:	000186a0 	.word	0x000186a0
 8009f3c:	200070cc 	.word	0x200070cc
 8009f40:	20007120 	.word	0x20007120
 8009f44:	20006f14 	.word	0x20006f14
 8009f48:	20006874 	.word	0x20006874
 8009f4c:	20006300 	.word	0x20006300
 8009f50:	200067e8 	.word	0x200067e8
 8009f54:	20006484 	.word	0x20006484
 8009f58:	20006710 	.word	0x20006710
 8009f5c:	20006258 	.word	0x20006258
 8009f60:	20006210 	.word	0x20006210
 8009f64:	20006d44 	.word	0x20006d44
 8009f68:	20006d1c 	.word	0x20006d1c
 8009f6c:	20006438 	.word	0x20006438
 8009f70:	200063f0 	.word	0x200063f0
 8009f74:	20006758 	.word	0x20006758
 8009f78:	4b37      	ldr	r3, [pc, #220]	@ (800a058 <Initialize+0x470>)
 8009f7a:	9300      	str	r3, [sp, #0]
 8009f7c:	2300      	movs	r3, #0
 8009f7e:	220c      	movs	r2, #12
 8009f80:	4936      	ldr	r1, [pc, #216]	@ (800a05c <Initialize+0x474>)
 8009f82:	4837      	ldr	r0, [pc, #220]	@ (800a060 <Initialize+0x478>)
 8009f84:	f7f7 f93c 	bl	8001200 <BDCInit>
	BDCInit(&BDC2, &htim3, TIM_CHANNEL_3, SHIFTREG, &(SR.cast[1]), Bit4, Bit5);
 8009f88:	2320      	movs	r3, #32
 8009f8a:	9302      	str	r3, [sp, #8]
 8009f8c:	2310      	movs	r3, #16
 8009f8e:	9301      	str	r3, [sp, #4]
 8009f90:	4b31      	ldr	r3, [pc, #196]	@ (800a058 <Initialize+0x470>)
 8009f92:	9300      	str	r3, [sp, #0]
 8009f94:	2300      	movs	r3, #0
 8009f96:	2208      	movs	r2, #8
 8009f98:	4930      	ldr	r1, [pc, #192]	@ (800a05c <Initialize+0x474>)
 8009f9a:	4832      	ldr	r0, [pc, #200]	@ (800a064 <Initialize+0x47c>)
 8009f9c:	f7f7 f930 	bl	8001200 <BDCInit>
	BDCInit(&BDC3, &htim9, TIM_CHANNEL_1, SHIFTREG, &(SR.cast[1]), Bit2, Bit3);
 8009fa0:	2308      	movs	r3, #8
 8009fa2:	9302      	str	r3, [sp, #8]
 8009fa4:	2304      	movs	r3, #4
 8009fa6:	9301      	str	r3, [sp, #4]
 8009fa8:	4b2b      	ldr	r3, [pc, #172]	@ (800a058 <Initialize+0x470>)
 8009faa:	9300      	str	r3, [sp, #0]
 8009fac:	2300      	movs	r3, #0
 8009fae:	2200      	movs	r2, #0
 8009fb0:	492d      	ldr	r1, [pc, #180]	@ (800a068 <Initialize+0x480>)
 8009fb2:	482e      	ldr	r0, [pc, #184]	@ (800a06c <Initialize+0x484>)
 8009fb4:	f7f7 f924 	bl	8001200 <BDCInit>
	BDCInit(&BDC4, &htim9, TIM_CHANNEL_2, SHIFTREG, &(SR.cast[1]), Bit0, Bit1);
 8009fb8:	2302      	movs	r3, #2
 8009fba:	9302      	str	r3, [sp, #8]
 8009fbc:	2301      	movs	r3, #1
 8009fbe:	9301      	str	r3, [sp, #4]
 8009fc0:	4b25      	ldr	r3, [pc, #148]	@ (800a058 <Initialize+0x470>)
 8009fc2:	9300      	str	r3, [sp, #0]
 8009fc4:	2300      	movs	r3, #0
 8009fc6:	2204      	movs	r2, #4
 8009fc8:	4927      	ldr	r1, [pc, #156]	@ (800a068 <Initialize+0x480>)
 8009fca:	4829      	ldr	r0, [pc, #164]	@ (800a070 <Initialize+0x488>)
 8009fcc:	f7f7 f918 	bl	8001200 <BDCInit>
	BDCInit(&BDC5, &htim5, TIM_CHANNEL_4, SHIFTREG, &(SR.cast[0]), Bit6, Bit7);
 8009fd0:	2380      	movs	r3, #128	@ 0x80
 8009fd2:	9302      	str	r3, [sp, #8]
 8009fd4:	2340      	movs	r3, #64	@ 0x40
 8009fd6:	9301      	str	r3, [sp, #4]
 8009fd8:	4b26      	ldr	r3, [pc, #152]	@ (800a074 <Initialize+0x48c>)
 8009fda:	9300      	str	r3, [sp, #0]
 8009fdc:	2300      	movs	r3, #0
 8009fde:	220c      	movs	r2, #12
 8009fe0:	4925      	ldr	r1, [pc, #148]	@ (800a078 <Initialize+0x490>)
 8009fe2:	4826      	ldr	r0, [pc, #152]	@ (800a07c <Initialize+0x494>)
 8009fe4:	f7f7 f90c 	bl	8001200 <BDCInit>
	BDCInit(&BDC6, &htim5, TIM_CHANNEL_3, SHIFTREG, &(SR.cast[0]), Bit4, Bit5);
 8009fe8:	2320      	movs	r3, #32
 8009fea:	9302      	str	r3, [sp, #8]
 8009fec:	2310      	movs	r3, #16
 8009fee:	9301      	str	r3, [sp, #4]
 8009ff0:	4b20      	ldr	r3, [pc, #128]	@ (800a074 <Initialize+0x48c>)
 8009ff2:	9300      	str	r3, [sp, #0]
 8009ff4:	2300      	movs	r3, #0
 8009ff6:	2208      	movs	r2, #8
 8009ff8:	491f      	ldr	r1, [pc, #124]	@ (800a078 <Initialize+0x490>)
 8009ffa:	4821      	ldr	r0, [pc, #132]	@ (800a080 <Initialize+0x498>)
 8009ffc:	f7f7 f900 	bl	8001200 <BDCInit>
	BDCInit(&BDC7, &htim5, TIM_CHANNEL_2, SHIFTREG, &(SR.cast[0]), Bit2, Bit3);
 800a000:	2308      	movs	r3, #8
 800a002:	9302      	str	r3, [sp, #8]
 800a004:	2304      	movs	r3, #4
 800a006:	9301      	str	r3, [sp, #4]
 800a008:	4b1a      	ldr	r3, [pc, #104]	@ (800a074 <Initialize+0x48c>)
 800a00a:	9300      	str	r3, [sp, #0]
 800a00c:	2300      	movs	r3, #0
 800a00e:	2204      	movs	r2, #4
 800a010:	4919      	ldr	r1, [pc, #100]	@ (800a078 <Initialize+0x490>)
 800a012:	481c      	ldr	r0, [pc, #112]	@ (800a084 <Initialize+0x49c>)
 800a014:	f7f7 f8f4 	bl	8001200 <BDCInit>
	BDCInit(&BDC8, &htim5, TIM_CHANNEL_1, SHIFTREG, &(SR.cast[0]), Bit0, Bit1);
 800a018:	2302      	movs	r3, #2
 800a01a:	9302      	str	r3, [sp, #8]
 800a01c:	2301      	movs	r3, #1
 800a01e:	9301      	str	r3, [sp, #4]
 800a020:	4b14      	ldr	r3, [pc, #80]	@ (800a074 <Initialize+0x48c>)
 800a022:	9300      	str	r3, [sp, #0]
 800a024:	2300      	movs	r3, #0
 800a026:	2200      	movs	r2, #0
 800a028:	4913      	ldr	r1, [pc, #76]	@ (800a078 <Initialize+0x490>)
 800a02a:	4817      	ldr	r0, [pc, #92]	@ (800a088 <Initialize+0x4a0>)
 800a02c:	f7f7 f8e8 	bl	8001200 <BDCInit>
//	SPIx_DMA_TX_Init(&hspi1, &hdma_spi1_tx, SPI1_NSS_PIN, SPI_MODE_MASTER);
#ifndef newpin
#ifdef perfect
	SPIxInit(&hspi1, SPI1_NSS_PIN, SPI_MODE_MASTER, ENABLE);
#else
	SPIxInit(&hspi1, SPI1_NSS_PIN, SPI_MODE_SLAVE, ENABLE);
 800a030:	2301      	movs	r3, #1
 800a032:	9300      	str	r3, [sp, #0]
 800a034:	2300      	movs	r3, #0
 800a036:	2210      	movs	r2, #16
 800a038:	4914      	ldr	r1, [pc, #80]	@ (800a08c <Initialize+0x4a4>)
 800a03a:	4815      	ldr	r0, [pc, #84]	@ (800a090 <Initialize+0x4a8>)
 800a03c:	f7fc fcba 	bl	80069b4 <SPIxInit>
#endif
	GPIOPinsInit(SPI1_MISO_PIN, GPIO_MODE_OUTPUT_PP,GPIO_SPEED_FREQ_HIGH, GPIO_PULLUP);
 800a040:	2301      	movs	r3, #1
 800a042:	9300      	str	r3, [sp, #0]
 800a044:	2302      	movs	r3, #2
 800a046:	2201      	movs	r2, #1
 800a048:	2140      	movs	r1, #64	@ 0x40
 800a04a:	4810      	ldr	r0, [pc, #64]	@ (800a08c <Initialize+0x4a4>)
 800a04c:	f7f7 fa1c 	bl	8001488 <GPIOPinsInit>
//	HAL_Delay(999);	//wait rns board ready
//	IMU_InitI2C(&IMU, &hi2c2);
//	OdriveInit(&odrive, &hcan1, ODRIVE1, ENCODER_MODE_INCREMENTAL);
//	VESCInit(VESC1, VESC2, VESC3, VESC4, &vesc);
//	FHInit(pfh[0], &hcan1, faulhaber1, 0, 3000, 2147483647, -2147483647);
}
 800a050:	bf00      	nop
 800a052:	46bd      	mov	sp, r7
 800a054:	bd80      	pop	{r7, pc}
 800a056:	bf00      	nop
 800a058:	20009058 	.word	0x20009058
 800a05c:	20006438 	.word	0x20006438
 800a060:	20009e80 	.word	0x20009e80
 800a064:	20008cec 	.word	0x20008cec
 800a068:	20006758 	.word	0x20006758
 800a06c:	200089a8 	.word	0x200089a8
 800a070:	2000910c 	.word	0x2000910c
 800a074:	20009054 	.word	0x20009054
 800a078:	200063f0 	.word	0x200063f0
 800a07c:	20009e5c 	.word	0x20009e5c
 800a080:	20009168 	.word	0x20009168
 800a084:	2000918c 	.word	0x2000918c
 800a088:	20008cb4 	.word	0x20008cb4
 800a08c:	40020000 	.word	0x40020000
 800a090:	20009924 	.word	0x20009924

0800a094 <CAN1_RX0_IRQHandler>:


void CAN1_RX0_IRQHandler()
{
 800a094:	b580      	push	{r7, lr}
 800a096:	af00      	add	r7, sp, #0
	HAL_CAN_IRQHandler(&hcan1);
 800a098:	4802      	ldr	r0, [pc, #8]	@ (800a0a4 <CAN1_RX0_IRQHandler+0x10>)
 800a09a:	f002 fbeb 	bl	800c874 <HAL_CAN_IRQHandler>
}
 800a09e:	bf00      	nop
 800a0a0:	bd80      	pop	{r7, pc}
 800a0a2:	bf00      	nop
 800a0a4:	20006d44 	.word	0x20006d44

0800a0a8 <CAN1_RX1_IRQHandler>:

void CAN1_RX1_IRQHandler()
{
 800a0a8:	b580      	push	{r7, lr}
 800a0aa:	af00      	add	r7, sp, #0
	HAL_CAN_IRQHandler(&hcan1);
 800a0ac:	4802      	ldr	r0, [pc, #8]	@ (800a0b8 <CAN1_RX1_IRQHandler+0x10>)
 800a0ae:	f002 fbe1 	bl	800c874 <HAL_CAN_IRQHandler>
}
 800a0b2:	bf00      	nop
 800a0b4:	bd80      	pop	{r7, pc}
 800a0b6:	bf00      	nop
 800a0b8:	20006d44 	.word	0x20006d44

0800a0bc <CAN2_RX0_IRQHandler>:

void CAN2_RX0_IRQHandler()
{
 800a0bc:	b580      	push	{r7, lr}
 800a0be:	af00      	add	r7, sp, #0
	HAL_CAN_IRQHandler(&hcan2);
 800a0c0:	4802      	ldr	r0, [pc, #8]	@ (800a0cc <CAN2_RX0_IRQHandler+0x10>)
 800a0c2:	f002 fbd7 	bl	800c874 <HAL_CAN_IRQHandler>
}
 800a0c6:	bf00      	nop
 800a0c8:	bd80      	pop	{r7, pc}
 800a0ca:	bf00      	nop
 800a0cc:	20006d1c 	.word	0x20006d1c

0800a0d0 <CAN2_RX1_IRQHandler>:

void CAN2_RX1_IRQHandler()
{
 800a0d0:	b580      	push	{r7, lr}
 800a0d2:	af00      	add	r7, sp, #0
	HAL_CAN_IRQHandler(&hcan2);
 800a0d4:	4802      	ldr	r0, [pc, #8]	@ (800a0e0 <CAN2_RX1_IRQHandler+0x10>)
 800a0d6:	f002 fbcd 	bl	800c874 <HAL_CAN_IRQHandler>
}
 800a0da:	bf00      	nop
 800a0dc:	bd80      	pop	{r7, pc}
 800a0de:	bf00      	nop
 800a0e0:	20006d1c 	.word	0x20006d1c

0800a0e4 <CAN_PROCESS>:

void CAN_PROCESS(PACKET_t packet_src) {
 800a0e4:	b580      	push	{r7, lr}
 800a0e6:	b082      	sub	sp, #8
 800a0e8:	af00      	add	r7, sp, #0
 800a0ea:	4603      	mov	r3, r0
 800a0ec:	71fb      	strb	r3, [r7, #7]

	switch (packet_src) {
 800a0ee:	79fb      	ldrb	r3, [r7, #7]
 800a0f0:	2b04      	cmp	r3, #4
 800a0f2:	d017      	beq.n	800a124 <CAN_PROCESS+0x40>
 800a0f4:	2b04      	cmp	r3, #4
 800a0f6:	dc1a      	bgt.n	800a12e <CAN_PROCESS+0x4a>
 800a0f8:	2b01      	cmp	r3, #1
 800a0fa:	d015      	beq.n	800a128 <CAN_PROCESS+0x44>
 800a0fc:	2b02      	cmp	r3, #2
 800a0fe:	d116      	bne.n	800a12e <CAN_PROCESS+0x4a>
	case VESC_PACKET:
		decode_VESC();
 800a100:	f7fe fff0 	bl	80090e4 <decode_VESC>
		if (vesc.error_flag) {
 800a104:	4b0c      	ldr	r3, [pc, #48]	@ (800a138 <CAN_PROCESS+0x54>)
 800a106:	f893 3130 	ldrb.w	r3, [r3, #304]	@ 0x130
 800a10a:	f003 0308 	and.w	r3, r3, #8
 800a10e:	b2db      	uxtb	r3, r3
 800a110:	2b00      	cmp	r3, #0
 800a112:	d00b      	beq.n	800a12c <CAN_PROCESS+0x48>
			vesc.error_flag = 0;
 800a114:	4a08      	ldr	r2, [pc, #32]	@ (800a138 <CAN_PROCESS+0x54>)
 800a116:	f892 3130 	ldrb.w	r3, [r2, #304]	@ 0x130
 800a11a:	f36f 03c3 	bfc	r3, #3, #1
 800a11e:	f882 3130 	strb.w	r3, [r2, #304]	@ 0x130
////			strcpy(data, vescerror);
////			UARTSend
		}
		break;
 800a122:	e003      	b.n	800a12c <CAN_PROCESS+0x48>
//		}
//
//		break;

	case RBMS_PACKET:
		break;
 800a124:	bf00      	nop
 800a126:	e002      	b.n	800a12e <CAN_PROCESS+0x4a>
		break;
 800a128:	bf00      	nop
 800a12a:	e000      	b.n	800a12e <CAN_PROCESS+0x4a>
		break;
 800a12c:	bf00      	nop
//	case CYBERGEAR_PACKET:

//		break;
	}
}
 800a12e:	bf00      	nop
 800a130:	3708      	adds	r7, #8
 800a132:	46bd      	mov	sp, r7
 800a134:	bd80      	pop	{r7, pc}
 800a136:	bf00      	nop
 800a138:	20008a38 	.word	0x20008a38

0800a13c <set>:
/*          Include Header                   */
/*********************************************/

#include "common.h"

void set(void) {
 800a13c:	b580      	push	{r7, lr}
 800a13e:	af00      	add	r7, sp, #0

	Initialize();
 800a140:	f7ff fd52 	bl	8009be8 <Initialize>
//	TIMxInit(&htim7, 20000, 84);
//	PSxInitDMA(&ps4,&hi2c1);
	TIMxInit(&htim6, 20000, 84);	//20ms
 800a144:	2254      	movs	r2, #84	@ 0x54
 800a146:	f644 6120 	movw	r1, #20000	@ 0x4e20
 800a14a:	4822      	ldr	r0, [pc, #136]	@ (800a1d4 <set+0x98>)
 800a14c:	f7f9 f972 	bl	8003434 <TIMxInit>
	TIMxInit(&htim7, 50000, 840);		//500ms
 800a150:	f44f 7252 	mov.w	r2, #840	@ 0x348
 800a154:	f24c 3150 	movw	r1, #50000	@ 0xc350
 800a158:	481f      	ldr	r0, [pc, #124]	@ (800a1d8 <set+0x9c>)
 800a15a:	f7f9 f96b 	bl	8003434 <TIMxInit>
//	FH_WaitInit();

	/***NAVI***/
//	RNS_config(&hcan1);
//	MODNInit(MODN_FWD_OMNI, 2.0, 0.625, 3.0, 0.03, 800);
	RBMS_Init(&rbms1, &hcan1, RBMS_1234);
 800a15e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800a162:	491e      	ldr	r1, [pc, #120]	@ (800a1dc <set+0xa0>)
 800a164:	481e      	ldr	r0, [pc, #120]	@ (800a1e0 <set+0xa4>)
 800a166:	f7fb fbfd 	bl	8005964 <RBMS_Init>
	RBMS_Config(&rbms1, RBMS1, C610, 1);
 800a16a:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800a16e:	2201      	movs	r2, #1
 800a170:	2100      	movs	r1, #0
 800a172:	481b      	ldr	r0, [pc, #108]	@ (800a1e0 <set+0xa4>)
 800a174:	f7fb fc2e 	bl	80059d4 <RBMS_Config>
	RBMS_Config(&rbms1, RBMS2, C610, 1);
 800a178:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800a17c:	2201      	movs	r2, #1
 800a17e:	2101      	movs	r1, #1
 800a180:	4817      	ldr	r0, [pc, #92]	@ (800a1e0 <set+0xa4>)
 800a182:	f7fb fc27 	bl	80059d4 <RBMS_Config>
	RBMS_Config(&rbms1, RBMS3, C610, 1);
 800a186:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800a18a:	2201      	movs	r2, #1
 800a18c:	2102      	movs	r1, #2
 800a18e:	4814      	ldr	r0, [pc, #80]	@ (800a1e0 <set+0xa4>)
 800a190:	f7fb fc20 	bl	80059d4 <RBMS_Config>
	RBMS_Config(&rbms1, RBMS4, C610, 1);
 800a194:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800a198:	2201      	movs	r2, #1
 800a19a:	2103      	movs	r1, #3
 800a19c:	4810      	ldr	r0, [pc, #64]	@ (800a1e0 <set+0xa4>)
 800a19e:	f7fb fc19 	bl	80059d4 <RBMS_Config>
	RBMS_PID_Init(&rbms1);
 800a1a2:	480f      	ldr	r0, [pc, #60]	@ (800a1e0 <set+0xa4>)
 800a1a4:	f7fb fe2c 	bl	8005e00 <RBMS_PID_Init>
	RBMS_Set_Control_Mode(&rbms1, RBMS1, VELOCITY);
 800a1a8:	2202      	movs	r2, #2
 800a1aa:	2100      	movs	r1, #0
 800a1ac:	480c      	ldr	r0, [pc, #48]	@ (800a1e0 <set+0xa4>)
 800a1ae:	f7fb ff3b 	bl	8006028 <RBMS_Set_Control_Mode>
	RBMS_Set_Control_Mode(&rbms1, RBMS2, VELOCITY);
 800a1b2:	2202      	movs	r2, #2
 800a1b4:	2101      	movs	r1, #1
 800a1b6:	480a      	ldr	r0, [pc, #40]	@ (800a1e0 <set+0xa4>)
 800a1b8:	f7fb ff36 	bl	8006028 <RBMS_Set_Control_Mode>
	RBMS_Set_Control_Mode(&rbms1, RBMS3, VELOCITY);
 800a1bc:	2202      	movs	r2, #2
 800a1be:	2102      	movs	r1, #2
 800a1c0:	4807      	ldr	r0, [pc, #28]	@ (800a1e0 <set+0xa4>)
 800a1c2:	f7fb ff31 	bl	8006028 <RBMS_Set_Control_Mode>
	RBMS_Set_Control_Mode(&rbms1, RBMS4, VELOCITY);
 800a1c6:	2202      	movs	r2, #2
 800a1c8:	2103      	movs	r1, #3
 800a1ca:	4805      	ldr	r0, [pc, #20]	@ (800a1e0 <set+0xa4>)
 800a1cc:	f7fb ff2c 	bl	8006028 <RBMS_Set_Control_Mode>

}
 800a1d0:	bf00      	nop
 800a1d2:	bd80      	pop	{r7, pc}
 800a1d4:	200066c8 	.word	0x200066c8
 800a1d8:	200069a8 	.word	0x200069a8
 800a1dc:	20006d44 	.word	0x20006d44
 800a1e0:	2000a3c4 	.word	0x2000a3c4

0800a1e4 <Testboard_Handler>:

void Testboard_Handler(void) {
 800a1e4:	b580      	push	{r7, lr}
 800a1e6:	af00      	add	r7, sp, #0
	switch (state) {
 800a1e8:	4bb5      	ldr	r3, [pc, #724]	@ (800a4c0 <Testboard_Handler+0x2dc>)
 800a1ea:	781b      	ldrb	r3, [r3, #0]
 800a1ec:	2b09      	cmp	r3, #9
 800a1ee:	f200 837f 	bhi.w	800a8f0 <Testboard_Handler+0x70c>
 800a1f2:	a201      	add	r2, pc, #4	@ (adr r2, 800a1f8 <Testboard_Handler+0x14>)
 800a1f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a1f8:	0800a221 	.word	0x0800a221
 800a1fc:	0800a31b 	.word	0x0800a31b
 800a200:	0800a337 	.word	0x0800a337
 800a204:	0800a417 	.word	0x0800a417
 800a208:	0800a433 	.word	0x0800a433
 800a20c:	0800a51b 	.word	0x0800a51b
 800a210:	0800a5f7 	.word	0x0800a5f7
 800a214:	0800a653 	.word	0x0800a653
 800a218:	0800a66f 	.word	0x0800a66f
 800a21c:	0800a6c9 	.word	0x0800a6c9
	case MAIN:
		switch (buff_receive[0]) {
 800a220:	4ba8      	ldr	r3, [pc, #672]	@ (800a4c4 <Testboard_Handler+0x2e0>)
 800a222:	781b      	ldrb	r3, [r3, #0]
 800a224:	3b31      	subs	r3, #49	@ 0x31
 800a226:	2b11      	cmp	r3, #17
 800a228:	f200 8353 	bhi.w	800a8d2 <Testboard_Handler+0x6ee>
 800a22c:	a201      	add	r2, pc, #4	@ (adr r2, 800a234 <Testboard_Handler+0x50>)
 800a22e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a232:	bf00      	nop
 800a234:	0800a27d 	.word	0x0800a27d
 800a238:	0800a28f 	.word	0x0800a28f
 800a23c:	0800a2a1 	.word	0x0800a2a1
 800a240:	0800a2b3 	.word	0x0800a2b3
 800a244:	0800a2c5 	.word	0x0800a2c5
 800a248:	0800a2d7 	.word	0x0800a2d7
 800a24c:	0800a2e9 	.word	0x0800a2e9
 800a250:	0800a2fb 	.word	0x0800a2fb
 800a254:	0800a8d3 	.word	0x0800a8d3
 800a258:	0800a8d3 	.word	0x0800a8d3
 800a25c:	0800a8d3 	.word	0x0800a8d3
 800a260:	0800a8d3 	.word	0x0800a8d3
 800a264:	0800a8d3 	.word	0x0800a8d3
 800a268:	0800a8d3 	.word	0x0800a8d3
 800a26c:	0800a8d3 	.word	0x0800a8d3
 800a270:	0800a8d3 	.word	0x0800a8d3
 800a274:	0800a8d3 	.word	0x0800a8d3
 800a278:	0800a30d 	.word	0x0800a30d
		case '1':
			state = GPIOS;
 800a27c:	4b90      	ldr	r3, [pc, #576]	@ (800a4c0 <Testboard_Handler+0x2dc>)
 800a27e:	2201      	movs	r2, #1
 800a280:	701a      	strb	r2, [r3, #0]
			sys.transmit=1;
 800a282:	4a91      	ldr	r2, [pc, #580]	@ (800a4c8 <Testboard_Handler+0x2e4>)
 800a284:	6813      	ldr	r3, [r2, #0]
 800a286:	f043 0301 	orr.w	r3, r3, #1
 800a28a:	6013      	str	r3, [r2, #0]
			break;
 800a28c:	e044      	b.n	800a318 <Testboard_Handler+0x134>
		case '2':
			state = HSPM;
 800a28e:	4b8c      	ldr	r3, [pc, #560]	@ (800a4c0 <Testboard_Handler+0x2dc>)
 800a290:	2202      	movs	r2, #2
 800a292:	701a      	strb	r2, [r3, #0]
			sys.transmit=1;
 800a294:	4a8c      	ldr	r2, [pc, #560]	@ (800a4c8 <Testboard_Handler+0x2e4>)
 800a296:	6813      	ldr	r3, [r2, #0]
 800a298:	f043 0301 	orr.w	r3, r3, #1
 800a29c:	6013      	str	r3, [r2, #0]
			break;
 800a29e:	e03b      	b.n	800a318 <Testboard_Handler+0x134>
		case '3':
			state = ENCODER;
 800a2a0:	4b87      	ldr	r3, [pc, #540]	@ (800a4c0 <Testboard_Handler+0x2dc>)
 800a2a2:	2203      	movs	r2, #3
 800a2a4:	701a      	strb	r2, [r3, #0]
			sys.transmit=1;
 800a2a6:	4a88      	ldr	r2, [pc, #544]	@ (800a4c8 <Testboard_Handler+0x2e4>)
 800a2a8:	6813      	ldr	r3, [r2, #0]
 800a2aa:	f043 0301 	orr.w	r3, r3, #1
 800a2ae:	6013      	str	r3, [r2, #0]
			break;
 800a2b0:	e032      	b.n	800a318 <Testboard_Handler+0x134>
		case '4':
			state = UART;
 800a2b2:	4b83      	ldr	r3, [pc, #524]	@ (800a4c0 <Testboard_Handler+0x2dc>)
 800a2b4:	2204      	movs	r2, #4
 800a2b6:	701a      	strb	r2, [r3, #0]
			sys.transmit=1;
 800a2b8:	4a83      	ldr	r2, [pc, #524]	@ (800a4c8 <Testboard_Handler+0x2e4>)
 800a2ba:	6813      	ldr	r3, [r2, #0]
 800a2bc:	f043 0301 	orr.w	r3, r3, #1
 800a2c0:	6013      	str	r3, [r2, #0]
			break;
 800a2c2:	e029      	b.n	800a318 <Testboard_Handler+0x134>
		case '5':
			state = I2C;
 800a2c4:	4b7e      	ldr	r3, [pc, #504]	@ (800a4c0 <Testboard_Handler+0x2dc>)
 800a2c6:	2205      	movs	r2, #5
 800a2c8:	701a      	strb	r2, [r3, #0]
			sys.transmit=1;
 800a2ca:	4a7f      	ldr	r2, [pc, #508]	@ (800a4c8 <Testboard_Handler+0x2e4>)
 800a2cc:	6813      	ldr	r3, [r2, #0]
 800a2ce:	f043 0301 	orr.w	r3, r3, #1
 800a2d2:	6013      	str	r3, [r2, #0]
			break;
 800a2d4:	e020      	b.n	800a318 <Testboard_Handler+0x134>
		case '6':
			state = CAN;
 800a2d6:	4b7a      	ldr	r3, [pc, #488]	@ (800a4c0 <Testboard_Handler+0x2dc>)
 800a2d8:	2206      	movs	r2, #6
 800a2da:	701a      	strb	r2, [r3, #0]
			sys.transmit=1;
 800a2dc:	4a7a      	ldr	r2, [pc, #488]	@ (800a4c8 <Testboard_Handler+0x2e4>)
 800a2de:	6813      	ldr	r3, [r2, #0]
 800a2e0:	f043 0301 	orr.w	r3, r3, #1
 800a2e4:	6013      	str	r3, [r2, #0]
			break;
 800a2e6:	e017      	b.n	800a318 <Testboard_Handler+0x134>
		case '7':
			state = USB;
 800a2e8:	4b75      	ldr	r3, [pc, #468]	@ (800a4c0 <Testboard_Handler+0x2dc>)
 800a2ea:	2208      	movs	r2, #8
 800a2ec:	701a      	strb	r2, [r3, #0]
			sys.transmit=1;
 800a2ee:	4a76      	ldr	r2, [pc, #472]	@ (800a4c8 <Testboard_Handler+0x2e4>)
 800a2f0:	6813      	ldr	r3, [r2, #0]
 800a2f2:	f043 0301 	orr.w	r3, r3, #1
 800a2f6:	6013      	str	r3, [r2, #0]
			break;
 800a2f8:	e00e      	b.n	800a318 <Testboard_Handler+0x134>
		case '8':
			state = ROBOMASTER;
 800a2fa:	4b71      	ldr	r3, [pc, #452]	@ (800a4c0 <Testboard_Handler+0x2dc>)
 800a2fc:	2209      	movs	r2, #9
 800a2fe:	701a      	strb	r2, [r3, #0]
			sys.transmit=1;
 800a300:	4a71      	ldr	r2, [pc, #452]	@ (800a4c8 <Testboard_Handler+0x2e4>)
 800a302:	6813      	ldr	r3, [r2, #0]
 800a304:	f043 0301 	orr.w	r3, r3, #1
 800a308:	6013      	str	r3, [r2, #0]
			break;
 800a30a:	e005      	b.n	800a318 <Testboard_Handler+0x134>
		case 'B':
			sys.prompt = 1;
 800a30c:	4a6e      	ldr	r2, [pc, #440]	@ (800a4c8 <Testboard_Handler+0x2e4>)
 800a30e:	6813      	ldr	r3, [r2, #0]
 800a310:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a314:	6013      	str	r3, [r2, #0]
			break;
 800a316:	bf00      	nop
		}
		break;
 800a318:	e2db      	b.n	800a8d2 <Testboard_Handler+0x6ee>
	case GPIOS:
		if (buff_receive[0] == 'B') {
 800a31a:	4b6a      	ldr	r3, [pc, #424]	@ (800a4c4 <Testboard_Handler+0x2e0>)
 800a31c:	781b      	ldrb	r3, [r3, #0]
 800a31e:	2b42      	cmp	r3, #66	@ 0x42
 800a320:	f040 82d9 	bne.w	800a8d6 <Testboard_Handler+0x6f2>
			state = 0;
 800a324:	4b66      	ldr	r3, [pc, #408]	@ (800a4c0 <Testboard_Handler+0x2dc>)
 800a326:	2200      	movs	r2, #0
 800a328:	701a      	strb	r2, [r3, #0]
			sys.prompt = 1;
 800a32a:	4a67      	ldr	r2, [pc, #412]	@ (800a4c8 <Testboard_Handler+0x2e4>)
 800a32c:	6813      	ldr	r3, [r2, #0]
 800a32e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a332:	6013      	str	r3, [r2, #0]
		}
		break;
 800a334:	e2cf      	b.n	800a8d6 <Testboard_Handler+0x6f2>
	case HSPM:
		if (buff_receive[0] == 'B') {
 800a336:	4b63      	ldr	r3, [pc, #396]	@ (800a4c4 <Testboard_Handler+0x2e0>)
 800a338:	781b      	ldrb	r3, [r3, #0]
 800a33a:	2b42      	cmp	r3, #66	@ 0x42
 800a33c:	d108      	bne.n	800a350 <Testboard_Handler+0x16c>
			state = 0;
 800a33e:	4b60      	ldr	r3, [pc, #384]	@ (800a4c0 <Testboard_Handler+0x2dc>)
 800a340:	2200      	movs	r2, #0
 800a342:	701a      	strb	r2, [r3, #0]
			sys.prompt = 1;
 800a344:	4a60      	ldr	r2, [pc, #384]	@ (800a4c8 <Testboard_Handler+0x2e4>)
 800a346:	6813      	ldr	r3, [r2, #0]
 800a348:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a34c:	6013      	str	r3, [r2, #0]
				WriteBDC(&BDC6, -10000);
				WriteBDC(&BDC7, -10000);
				WriteBDC(&BDC8, -10000);
			}
		}
		break;
 800a34e:	e2c4      	b.n	800a8da <Testboard_Handler+0x6f6>
		} else if (buff_receive[0] == 'C') {
 800a350:	4b5c      	ldr	r3, [pc, #368]	@ (800a4c4 <Testboard_Handler+0x2e0>)
 800a352:	781b      	ldrb	r3, [r3, #0]
 800a354:	2b43      	cmp	r3, #67	@ 0x43
 800a356:	f040 82c0 	bne.w	800a8da <Testboard_Handler+0x6f6>
			sys.pwm ^= 1;
 800a35a:	4b5b      	ldr	r3, [pc, #364]	@ (800a4c8 <Testboard_Handler+0x2e4>)
 800a35c:	681b      	ldr	r3, [r3, #0]
 800a35e:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800a362:	b2db      	uxtb	r3, r3
 800a364:	f083 0301 	eor.w	r3, r3, #1
 800a368:	b2d9      	uxtb	r1, r3
 800a36a:	4a57      	ldr	r2, [pc, #348]	@ (800a4c8 <Testboard_Handler+0x2e4>)
 800a36c:	6813      	ldr	r3, [r2, #0]
 800a36e:	f361 1304 	bfi	r3, r1, #4, #1
 800a372:	6013      	str	r3, [r2, #0]
			if (sys.pwm == 0) {
 800a374:	4b54      	ldr	r3, [pc, #336]	@ (800a4c8 <Testboard_Handler+0x2e4>)
 800a376:	681b      	ldr	r3, [r3, #0]
 800a378:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800a37c:	b2db      	uxtb	r3, r3
 800a37e:	2b00      	cmp	r3, #0
 800a380:	d128      	bne.n	800a3d4 <Testboard_Handler+0x1f0>
				WriteBDC(&BDC1, 10000);
 800a382:	f242 7110 	movw	r1, #10000	@ 0x2710
 800a386:	4851      	ldr	r0, [pc, #324]	@ (800a4cc <Testboard_Handler+0x2e8>)
 800a388:	f7f6 ffc3 	bl	8001312 <WriteBDC>
				WriteBDC(&BDC2, 10000);
 800a38c:	f242 7110 	movw	r1, #10000	@ 0x2710
 800a390:	484f      	ldr	r0, [pc, #316]	@ (800a4d0 <Testboard_Handler+0x2ec>)
 800a392:	f7f6 ffbe 	bl	8001312 <WriteBDC>
				WriteBDC(&BDC3, 10000);
 800a396:	f242 7110 	movw	r1, #10000	@ 0x2710
 800a39a:	484e      	ldr	r0, [pc, #312]	@ (800a4d4 <Testboard_Handler+0x2f0>)
 800a39c:	f7f6 ffb9 	bl	8001312 <WriteBDC>
				WriteBDC(&BDC4, 10000);
 800a3a0:	f242 7110 	movw	r1, #10000	@ 0x2710
 800a3a4:	484c      	ldr	r0, [pc, #304]	@ (800a4d8 <Testboard_Handler+0x2f4>)
 800a3a6:	f7f6 ffb4 	bl	8001312 <WriteBDC>
				WriteBDC(&BDC5, 10000);
 800a3aa:	f242 7110 	movw	r1, #10000	@ 0x2710
 800a3ae:	484b      	ldr	r0, [pc, #300]	@ (800a4dc <Testboard_Handler+0x2f8>)
 800a3b0:	f7f6 ffaf 	bl	8001312 <WriteBDC>
				WriteBDC(&BDC6, 10000);
 800a3b4:	f242 7110 	movw	r1, #10000	@ 0x2710
 800a3b8:	4849      	ldr	r0, [pc, #292]	@ (800a4e0 <Testboard_Handler+0x2fc>)
 800a3ba:	f7f6 ffaa 	bl	8001312 <WriteBDC>
				WriteBDC(&BDC7, 10000);
 800a3be:	f242 7110 	movw	r1, #10000	@ 0x2710
 800a3c2:	4848      	ldr	r0, [pc, #288]	@ (800a4e4 <Testboard_Handler+0x300>)
 800a3c4:	f7f6 ffa5 	bl	8001312 <WriteBDC>
				WriteBDC(&BDC8, 10000);
 800a3c8:	f242 7110 	movw	r1, #10000	@ 0x2710
 800a3cc:	4846      	ldr	r0, [pc, #280]	@ (800a4e8 <Testboard_Handler+0x304>)
 800a3ce:	f7f6 ffa0 	bl	8001312 <WriteBDC>
		break;
 800a3d2:	e282      	b.n	800a8da <Testboard_Handler+0x6f6>
				WriteBDC(&BDC1, -10000);
 800a3d4:	4945      	ldr	r1, [pc, #276]	@ (800a4ec <Testboard_Handler+0x308>)
 800a3d6:	483d      	ldr	r0, [pc, #244]	@ (800a4cc <Testboard_Handler+0x2e8>)
 800a3d8:	f7f6 ff9b 	bl	8001312 <WriteBDC>
				WriteBDC(&BDC2, -10000);
 800a3dc:	4943      	ldr	r1, [pc, #268]	@ (800a4ec <Testboard_Handler+0x308>)
 800a3de:	483c      	ldr	r0, [pc, #240]	@ (800a4d0 <Testboard_Handler+0x2ec>)
 800a3e0:	f7f6 ff97 	bl	8001312 <WriteBDC>
				WriteBDC(&BDC3, -10000);
 800a3e4:	4941      	ldr	r1, [pc, #260]	@ (800a4ec <Testboard_Handler+0x308>)
 800a3e6:	483b      	ldr	r0, [pc, #236]	@ (800a4d4 <Testboard_Handler+0x2f0>)
 800a3e8:	f7f6 ff93 	bl	8001312 <WriteBDC>
				WriteBDC(&BDC4, -10000);
 800a3ec:	493f      	ldr	r1, [pc, #252]	@ (800a4ec <Testboard_Handler+0x308>)
 800a3ee:	483a      	ldr	r0, [pc, #232]	@ (800a4d8 <Testboard_Handler+0x2f4>)
 800a3f0:	f7f6 ff8f 	bl	8001312 <WriteBDC>
				WriteBDC(&BDC5, -10000);
 800a3f4:	493d      	ldr	r1, [pc, #244]	@ (800a4ec <Testboard_Handler+0x308>)
 800a3f6:	4839      	ldr	r0, [pc, #228]	@ (800a4dc <Testboard_Handler+0x2f8>)
 800a3f8:	f7f6 ff8b 	bl	8001312 <WriteBDC>
				WriteBDC(&BDC6, -10000);
 800a3fc:	493b      	ldr	r1, [pc, #236]	@ (800a4ec <Testboard_Handler+0x308>)
 800a3fe:	4838      	ldr	r0, [pc, #224]	@ (800a4e0 <Testboard_Handler+0x2fc>)
 800a400:	f7f6 ff87 	bl	8001312 <WriteBDC>
				WriteBDC(&BDC7, -10000);
 800a404:	4939      	ldr	r1, [pc, #228]	@ (800a4ec <Testboard_Handler+0x308>)
 800a406:	4837      	ldr	r0, [pc, #220]	@ (800a4e4 <Testboard_Handler+0x300>)
 800a408:	f7f6 ff83 	bl	8001312 <WriteBDC>
				WriteBDC(&BDC8, -10000);
 800a40c:	4937      	ldr	r1, [pc, #220]	@ (800a4ec <Testboard_Handler+0x308>)
 800a40e:	4836      	ldr	r0, [pc, #216]	@ (800a4e8 <Testboard_Handler+0x304>)
 800a410:	f7f6 ff7f 	bl	8001312 <WriteBDC>
		break;
 800a414:	e261      	b.n	800a8da <Testboard_Handler+0x6f6>
	case ENCODER:
		if (buff_receive[0] == 'B') {
 800a416:	4b2b      	ldr	r3, [pc, #172]	@ (800a4c4 <Testboard_Handler+0x2e0>)
 800a418:	781b      	ldrb	r3, [r3, #0]
 800a41a:	2b42      	cmp	r3, #66	@ 0x42
 800a41c:	f040 825f 	bne.w	800a8de <Testboard_Handler+0x6fa>
			state = 0;
 800a420:	4b27      	ldr	r3, [pc, #156]	@ (800a4c0 <Testboard_Handler+0x2dc>)
 800a422:	2200      	movs	r2, #0
 800a424:	701a      	strb	r2, [r3, #0]
			sys.prompt = 1;
 800a426:	4a28      	ldr	r2, [pc, #160]	@ (800a4c8 <Testboard_Handler+0x2e4>)
 800a428:	6813      	ldr	r3, [r2, #0]
 800a42a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a42e:	6013      	str	r3, [r2, #0]
		}
		break;
 800a430:	e255      	b.n	800a8de <Testboard_Handler+0x6fa>
	case UART:
		switch (buff_receive[0]) {
 800a432:	4b24      	ldr	r3, [pc, #144]	@ (800a4c4 <Testboard_Handler+0x2e0>)
 800a434:	781b      	ldrb	r3, [r3, #0]
 800a436:	3b32      	subs	r3, #50	@ 0x32
 800a438:	2b10      	cmp	r3, #16
 800a43a:	f200 8252 	bhi.w	800a8e2 <Testboard_Handler+0x6fe>
 800a43e:	a201      	add	r2, pc, #4	@ (adr r2, 800a444 <Testboard_Handler+0x260>)
 800a440:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a444:	0800a489 	.word	0x0800a489
 800a448:	0800a49b 	.word	0x0800a49b
 800a44c:	0800a4ad 	.word	0x0800a4ad
 800a450:	0800a4f5 	.word	0x0800a4f5
 800a454:	0800a8e3 	.word	0x0800a8e3
 800a458:	0800a8e3 	.word	0x0800a8e3
 800a45c:	0800a8e3 	.word	0x0800a8e3
 800a460:	0800a8e3 	.word	0x0800a8e3
 800a464:	0800a8e3 	.word	0x0800a8e3
 800a468:	0800a8e3 	.word	0x0800a8e3
 800a46c:	0800a8e3 	.word	0x0800a8e3
 800a470:	0800a8e3 	.word	0x0800a8e3
 800a474:	0800a8e3 	.word	0x0800a8e3
 800a478:	0800a8e3 	.word	0x0800a8e3
 800a47c:	0800a8e3 	.word	0x0800a8e3
 800a480:	0800a8e3 	.word	0x0800a8e3
 800a484:	0800a507 	.word	0x0800a507
			UART_state = 1;
			sys.uart = 1;
			break;
#endif
		case '2':
			UART_state = 2;
 800a488:	4b19      	ldr	r3, [pc, #100]	@ (800a4f0 <Testboard_Handler+0x30c>)
 800a48a:	2202      	movs	r2, #2
 800a48c:	701a      	strb	r2, [r3, #0]
			sys.uart = 1;
 800a48e:	4a0e      	ldr	r2, [pc, #56]	@ (800a4c8 <Testboard_Handler+0x2e4>)
 800a490:	6813      	ldr	r3, [r2, #0]
 800a492:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a496:	6013      	str	r3, [r2, #0]
			break;
 800a498:	e03e      	b.n	800a518 <Testboard_Handler+0x334>
		case '3':
			UART_state = 3;
 800a49a:	4b15      	ldr	r3, [pc, #84]	@ (800a4f0 <Testboard_Handler+0x30c>)
 800a49c:	2203      	movs	r2, #3
 800a49e:	701a      	strb	r2, [r3, #0]
			sys.uart = 1;
 800a4a0:	4a09      	ldr	r2, [pc, #36]	@ (800a4c8 <Testboard_Handler+0x2e4>)
 800a4a2:	6813      	ldr	r3, [r2, #0]
 800a4a4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a4a8:	6013      	str	r3, [r2, #0]
			break;
 800a4aa:	e035      	b.n	800a518 <Testboard_Handler+0x334>
		case '4':
			UART_state = 4;
 800a4ac:	4b10      	ldr	r3, [pc, #64]	@ (800a4f0 <Testboard_Handler+0x30c>)
 800a4ae:	2204      	movs	r2, #4
 800a4b0:	701a      	strb	r2, [r3, #0]
			sys.uart = 1;
 800a4b2:	4a05      	ldr	r2, [pc, #20]	@ (800a4c8 <Testboard_Handler+0x2e4>)
 800a4b4:	6813      	ldr	r3, [r2, #0]
 800a4b6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a4ba:	6013      	str	r3, [r2, #0]
			break;
 800a4bc:	e02c      	b.n	800a518 <Testboard_Handler+0x334>
 800a4be:	bf00      	nop
 800a4c0:	20008d24 	.word	0x20008d24
 800a4c4:	20009e50 	.word	0x20009e50
 800a4c8:	20008bf8 	.word	0x20008bf8
 800a4cc:	20009e80 	.word	0x20009e80
 800a4d0:	20008cec 	.word	0x20008cec
 800a4d4:	200089a8 	.word	0x200089a8
 800a4d8:	2000910c 	.word	0x2000910c
 800a4dc:	20009e5c 	.word	0x20009e5c
 800a4e0:	20009168 	.word	0x20009168
 800a4e4:	2000918c 	.word	0x2000918c
 800a4e8:	20008cb4 	.word	0x20008cb4
 800a4ec:	ffffd8f0 	.word	0xffffd8f0
 800a4f0:	20008cdc 	.word	0x20008cdc
		case '5':
			UART_state = 5;
 800a4f4:	4b6c      	ldr	r3, [pc, #432]	@ (800a6a8 <Testboard_Handler+0x4c4>)
 800a4f6:	2205      	movs	r2, #5
 800a4f8:	701a      	strb	r2, [r3, #0]
			sys.uart = 1;
 800a4fa:	4a6c      	ldr	r2, [pc, #432]	@ (800a6ac <Testboard_Handler+0x4c8>)
 800a4fc:	6813      	ldr	r3, [r2, #0]
 800a4fe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a502:	6013      	str	r3, [r2, #0]
			break;
 800a504:	e008      	b.n	800a518 <Testboard_Handler+0x334>
		case 'B':
			state = 0;
 800a506:	4b6a      	ldr	r3, [pc, #424]	@ (800a6b0 <Testboard_Handler+0x4cc>)
 800a508:	2200      	movs	r2, #0
 800a50a:	701a      	strb	r2, [r3, #0]
			sys.prompt = 1;
 800a50c:	4a67      	ldr	r2, [pc, #412]	@ (800a6ac <Testboard_Handler+0x4c8>)
 800a50e:	6813      	ldr	r3, [r2, #0]
 800a510:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a514:	6013      	str	r3, [r2, #0]
			break;
 800a516:	bf00      	nop
		}
		break;
 800a518:	e1e3      	b.n	800a8e2 <Testboard_Handler+0x6fe>
	case I2C:
		switch (buff_receive[0]) {
 800a51a:	4b66      	ldr	r3, [pc, #408]	@ (800a6b4 <Testboard_Handler+0x4d0>)
 800a51c:	781b      	ldrb	r3, [r3, #0]
 800a51e:	3b31      	subs	r3, #49	@ 0x31
 800a520:	2b11      	cmp	r3, #17
 800a522:	d866      	bhi.n	800a5f2 <Testboard_Handler+0x40e>
 800a524:	a201      	add	r2, pc, #4	@ (adr r2, 800a52c <Testboard_Handler+0x348>)
 800a526:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a52a:	bf00      	nop
 800a52c:	0800a575 	.word	0x0800a575
 800a530:	0800a587 	.word	0x0800a587
 800a534:	0800a599 	.word	0x0800a599
 800a538:	0800a5ab 	.word	0x0800a5ab
 800a53c:	0800a5bd 	.word	0x0800a5bd
 800a540:	0800a5cf 	.word	0x0800a5cf
 800a544:	0800a5f3 	.word	0x0800a5f3
 800a548:	0800a5f3 	.word	0x0800a5f3
 800a54c:	0800a5f3 	.word	0x0800a5f3
 800a550:	0800a5f3 	.word	0x0800a5f3
 800a554:	0800a5f3 	.word	0x0800a5f3
 800a558:	0800a5f3 	.word	0x0800a5f3
 800a55c:	0800a5f3 	.word	0x0800a5f3
 800a560:	0800a5f3 	.word	0x0800a5f3
 800a564:	0800a5f3 	.word	0x0800a5f3
 800a568:	0800a5f3 	.word	0x0800a5f3
 800a56c:	0800a5f3 	.word	0x0800a5f3
 800a570:	0800a5e1 	.word	0x0800a5e1
		case '1':
			i2c_state = 1;
 800a574:	4b50      	ldr	r3, [pc, #320]	@ (800a6b8 <Testboard_Handler+0x4d4>)
 800a576:	2201      	movs	r2, #1
 800a578:	701a      	strb	r2, [r3, #0]
			sys.i2c = 1;
 800a57a:	4a4c      	ldr	r2, [pc, #304]	@ (800a6ac <Testboard_Handler+0x4c8>)
 800a57c:	6813      	ldr	r3, [r2, #0]
 800a57e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a582:	6013      	str	r3, [r2, #0]
			break;
 800a584:	e036      	b.n	800a5f4 <Testboard_Handler+0x410>
		case '2':
			i2c_state = 2;
 800a586:	4b4c      	ldr	r3, [pc, #304]	@ (800a6b8 <Testboard_Handler+0x4d4>)
 800a588:	2202      	movs	r2, #2
 800a58a:	701a      	strb	r2, [r3, #0]
			sys.i2c = 1;
 800a58c:	4a47      	ldr	r2, [pc, #284]	@ (800a6ac <Testboard_Handler+0x4c8>)
 800a58e:	6813      	ldr	r3, [r2, #0]
 800a590:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a594:	6013      	str	r3, [r2, #0]
			break;
 800a596:	e02d      	b.n	800a5f4 <Testboard_Handler+0x410>
		case '3':
#ifndef newboard
			i2c_state = 3;
 800a598:	4b47      	ldr	r3, [pc, #284]	@ (800a6b8 <Testboard_Handler+0x4d4>)
 800a59a:	2203      	movs	r2, #3
 800a59c:	701a      	strb	r2, [r3, #0]
			sys.i2c = 1;
 800a59e:	4a43      	ldr	r2, [pc, #268]	@ (800a6ac <Testboard_Handler+0x4c8>)
 800a5a0:	6813      	ldr	r3, [r2, #0]
 800a5a2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a5a6:	6013      	str	r3, [r2, #0]
			break;
 800a5a8:	e024      	b.n	800a5f4 <Testboard_Handler+0x410>
		case '4':
			i2c_state = 4;
 800a5aa:	4b43      	ldr	r3, [pc, #268]	@ (800a6b8 <Testboard_Handler+0x4d4>)
 800a5ac:	2204      	movs	r2, #4
 800a5ae:	701a      	strb	r2, [r3, #0]
			sys.i2c = 1;
 800a5b0:	4a3e      	ldr	r2, [pc, #248]	@ (800a6ac <Testboard_Handler+0x4c8>)
 800a5b2:	6813      	ldr	r3, [r2, #0]
 800a5b4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a5b8:	6013      	str	r3, [r2, #0]
			break;
 800a5ba:	e01b      	b.n	800a5f4 <Testboard_Handler+0x410>
		case '5':
			i2c_state = 5;
 800a5bc:	4b3e      	ldr	r3, [pc, #248]	@ (800a6b8 <Testboard_Handler+0x4d4>)
 800a5be:	2205      	movs	r2, #5
 800a5c0:	701a      	strb	r2, [r3, #0]
			sys.i2c = 1;
 800a5c2:	4a3a      	ldr	r2, [pc, #232]	@ (800a6ac <Testboard_Handler+0x4c8>)
 800a5c4:	6813      	ldr	r3, [r2, #0]
 800a5c6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a5ca:	6013      	str	r3, [r2, #0]
			break;
 800a5cc:	e012      	b.n	800a5f4 <Testboard_Handler+0x410>
		case '6':
			i2c_state = 6;
 800a5ce:	4b3a      	ldr	r3, [pc, #232]	@ (800a6b8 <Testboard_Handler+0x4d4>)
 800a5d0:	2206      	movs	r2, #6
 800a5d2:	701a      	strb	r2, [r3, #0]
			sys.i2c = 1;
 800a5d4:	4a35      	ldr	r2, [pc, #212]	@ (800a6ac <Testboard_Handler+0x4c8>)
 800a5d6:	6813      	ldr	r3, [r2, #0]
 800a5d8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a5dc:	6013      	str	r3, [r2, #0]
			break;
 800a5de:	e009      	b.n	800a5f4 <Testboard_Handler+0x410>
#endif
		case 'B':
			state = 0;
 800a5e0:	4b33      	ldr	r3, [pc, #204]	@ (800a6b0 <Testboard_Handler+0x4cc>)
 800a5e2:	2200      	movs	r2, #0
 800a5e4:	701a      	strb	r2, [r3, #0]
			sys.prompt = 1;
 800a5e6:	4a31      	ldr	r2, [pc, #196]	@ (800a6ac <Testboard_Handler+0x4c8>)
 800a5e8:	6813      	ldr	r3, [r2, #0]
 800a5ea:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a5ee:	6013      	str	r3, [r2, #0]
			break;
 800a5f0:	e000      	b.n	800a5f4 <Testboard_Handler+0x410>
		default:
			break;
 800a5f2:	bf00      	nop
		}
		break;
 800a5f4:	e17c      	b.n	800a8f0 <Testboard_Handler+0x70c>
	case CAN:
		if (buff_receive[0] == '1') {
 800a5f6:	4b2f      	ldr	r3, [pc, #188]	@ (800a6b4 <Testboard_Handler+0x4d0>)
 800a5f8:	781b      	ldrb	r3, [r3, #0]
 800a5fa:	2b31      	cmp	r3, #49	@ 0x31
 800a5fc:	d10b      	bne.n	800a616 <Testboard_Handler+0x432>
			CAN_TxMsg(&hcan1, 32, complete, 1);
 800a5fe:	2301      	movs	r3, #1
 800a600:	4a2e      	ldr	r2, [pc, #184]	@ (800a6bc <Testboard_Handler+0x4d8>)
 800a602:	2120      	movs	r1, #32
 800a604:	482e      	ldr	r0, [pc, #184]	@ (800a6c0 <Testboard_Handler+0x4dc>)
 800a606:	f7f9 fa9f 	bl	8003b48 <CAN_TxMsg>
			sys.can = 1;
 800a60a:	4a28      	ldr	r2, [pc, #160]	@ (800a6ac <Testboard_Handler+0x4c8>)
 800a60c:	6813      	ldr	r3, [r2, #0]
 800a60e:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800a612:	6013      	str	r3, [r2, #0]
		} else if (buff_receive[0] == 'B') {
			state = 0;
			sys.prompt = 1;
		}

		break;
 800a614:	e167      	b.n	800a8e6 <Testboard_Handler+0x702>
		} else if (buff_receive[0] == '2') {
 800a616:	4b27      	ldr	r3, [pc, #156]	@ (800a6b4 <Testboard_Handler+0x4d0>)
 800a618:	781b      	ldrb	r3, [r3, #0]
 800a61a:	2b32      	cmp	r3, #50	@ 0x32
 800a61c:	d10b      	bne.n	800a636 <Testboard_Handler+0x452>
			CAN_TxMsg(&hcan2, 33, complete, 1);
 800a61e:	2301      	movs	r3, #1
 800a620:	4a26      	ldr	r2, [pc, #152]	@ (800a6bc <Testboard_Handler+0x4d8>)
 800a622:	2121      	movs	r1, #33	@ 0x21
 800a624:	4827      	ldr	r0, [pc, #156]	@ (800a6c4 <Testboard_Handler+0x4e0>)
 800a626:	f7f9 fa8f 	bl	8003b48 <CAN_TxMsg>
			sys.can = 1;
 800a62a:	4a20      	ldr	r2, [pc, #128]	@ (800a6ac <Testboard_Handler+0x4c8>)
 800a62c:	6813      	ldr	r3, [r2, #0]
 800a62e:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800a632:	6013      	str	r3, [r2, #0]
		break;
 800a634:	e157      	b.n	800a8e6 <Testboard_Handler+0x702>
		} else if (buff_receive[0] == 'B') {
 800a636:	4b1f      	ldr	r3, [pc, #124]	@ (800a6b4 <Testboard_Handler+0x4d0>)
 800a638:	781b      	ldrb	r3, [r3, #0]
 800a63a:	2b42      	cmp	r3, #66	@ 0x42
 800a63c:	f040 8153 	bne.w	800a8e6 <Testboard_Handler+0x702>
			state = 0;
 800a640:	4b1b      	ldr	r3, [pc, #108]	@ (800a6b0 <Testboard_Handler+0x4cc>)
 800a642:	2200      	movs	r2, #0
 800a644:	701a      	strb	r2, [r3, #0]
			sys.prompt = 1;
 800a646:	4a19      	ldr	r2, [pc, #100]	@ (800a6ac <Testboard_Handler+0x4c8>)
 800a648:	6813      	ldr	r3, [r2, #0]
 800a64a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a64e:	6013      	str	r3, [r2, #0]
		break;
 800a650:	e149      	b.n	800a8e6 <Testboard_Handler+0x702>
	case CHANGEUART:
		if (buff_receive[0] == 'C') {
 800a652:	4b18      	ldr	r3, [pc, #96]	@ (800a6b4 <Testboard_Handler+0x4d0>)
 800a654:	781b      	ldrb	r3, [r3, #0]
 800a656:	2b43      	cmp	r3, #67	@ 0x43
 800a658:	f040 8147 	bne.w	800a8ea <Testboard_Handler+0x706>
			state = UART;
 800a65c:	4b14      	ldr	r3, [pc, #80]	@ (800a6b0 <Testboard_Handler+0x4cc>)
 800a65e:	2204      	movs	r2, #4
 800a660:	701a      	strb	r2, [r3, #0]
			sys.transmit = 1;
 800a662:	4a12      	ldr	r2, [pc, #72]	@ (800a6ac <Testboard_Handler+0x4c8>)
 800a664:	6813      	ldr	r3, [r2, #0]
 800a666:	f043 0301 	orr.w	r3, r3, #1
 800a66a:	6013      	str	r3, [r2, #0]
		}
		break;
 800a66c:	e13d      	b.n	800a8ea <Testboard_Handler+0x706>

	case USB:
		if(buff_receive[0] == 'B') {
 800a66e:	4b11      	ldr	r3, [pc, #68]	@ (800a6b4 <Testboard_Handler+0x4d0>)
 800a670:	781b      	ldrb	r3, [r3, #0]
 800a672:	2b42      	cmp	r3, #66	@ 0x42
 800a674:	d10d      	bne.n	800a692 <Testboard_Handler+0x4ae>
			sys.usb = 0;
 800a676:	4a0d      	ldr	r2, [pc, #52]	@ (800a6ac <Testboard_Handler+0x4c8>)
 800a678:	6813      	ldr	r3, [r2, #0]
 800a67a:	f36f 330c 	bfc	r3, #12, #1
 800a67e:	6013      	str	r3, [r2, #0]
			state = 0;
 800a680:	4b0b      	ldr	r3, [pc, #44]	@ (800a6b0 <Testboard_Handler+0x4cc>)
 800a682:	2200      	movs	r2, #0
 800a684:	701a      	strb	r2, [r3, #0]
			sys.transmit = 1;
 800a686:	4a09      	ldr	r2, [pc, #36]	@ (800a6ac <Testboard_Handler+0x4c8>)
 800a688:	6813      	ldr	r3, [r2, #0]
 800a68a:	f043 0301 	orr.w	r3, r3, #1
 800a68e:	6013      	str	r3, [r2, #0]
		}
		else if (buff_receive[0] == 'C'){
			sys.usb = 1;
		}
		break;
 800a690:	e12d      	b.n	800a8ee <Testboard_Handler+0x70a>
		else if (buff_receive[0] == 'C'){
 800a692:	4b08      	ldr	r3, [pc, #32]	@ (800a6b4 <Testboard_Handler+0x4d0>)
 800a694:	781b      	ldrb	r3, [r3, #0]
 800a696:	2b43      	cmp	r3, #67	@ 0x43
 800a698:	f040 8129 	bne.w	800a8ee <Testboard_Handler+0x70a>
			sys.usb = 1;
 800a69c:	4a03      	ldr	r2, [pc, #12]	@ (800a6ac <Testboard_Handler+0x4c8>)
 800a69e:	6813      	ldr	r3, [r2, #0]
 800a6a0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800a6a4:	6013      	str	r3, [r2, #0]
		break;
 800a6a6:	e122      	b.n	800a8ee <Testboard_Handler+0x70a>
 800a6a8:	20008cdc 	.word	0x20008cdc
 800a6ac:	20008bf8 	.word	0x20008bf8
 800a6b0:	20008d24 	.word	0x20008d24
 800a6b4:	20009e50 	.word	0x20009e50
 800a6b8:	20008bf4 	.word	0x20008bf4
 800a6bc:	20007e70 	.word	0x20007e70
 800a6c0:	20006d44 	.word	0x20006d44
 800a6c4:	20006d1c 	.word	0x20006d1c

	case ROBOMASTER:
		if (buff_receive[0] == '1'){
 800a6c8:	4b8a      	ldr	r3, [pc, #552]	@ (800a8f4 <Testboard_Handler+0x710>)
 800a6ca:	781b      	ldrb	r3, [r3, #0]
 800a6cc:	2b31      	cmp	r3, #49	@ 0x31
 800a6ce:	d159      	bne.n	800a784 <Testboard_Handler+0x5a0>
			FLAG = C610;
 800a6d0:	4b89      	ldr	r3, [pc, #548]	@ (800a8f8 <Testboard_Handler+0x714>)
 800a6d2:	2201      	movs	r2, #1
 800a6d4:	701a      	strb	r2, [r3, #0]
			RBMS_Init(&rbms1, &hcan1, RBMS_1234);
 800a6d6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800a6da:	4988      	ldr	r1, [pc, #544]	@ (800a8fc <Testboard_Handler+0x718>)
 800a6dc:	4888      	ldr	r0, [pc, #544]	@ (800a900 <Testboard_Handler+0x71c>)
 800a6de:	f7fb f941 	bl	8005964 <RBMS_Init>
			RBMS_Config(&rbms1, RBMS1, C610, 1);
 800a6e2:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800a6e6:	2201      	movs	r2, #1
 800a6e8:	2100      	movs	r1, #0
 800a6ea:	4885      	ldr	r0, [pc, #532]	@ (800a900 <Testboard_Handler+0x71c>)
 800a6ec:	f7fb f972 	bl	80059d4 <RBMS_Config>
			RBMS_Config(&rbms1, RBMS2, C610, 1);
 800a6f0:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800a6f4:	2201      	movs	r2, #1
 800a6f6:	2101      	movs	r1, #1
 800a6f8:	4881      	ldr	r0, [pc, #516]	@ (800a900 <Testboard_Handler+0x71c>)
 800a6fa:	f7fb f96b 	bl	80059d4 <RBMS_Config>
			RBMS_Config(&rbms1, RBMS3, C610, 1);
 800a6fe:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800a702:	2201      	movs	r2, #1
 800a704:	2102      	movs	r1, #2
 800a706:	487e      	ldr	r0, [pc, #504]	@ (800a900 <Testboard_Handler+0x71c>)
 800a708:	f7fb f964 	bl	80059d4 <RBMS_Config>
			RBMS_Config(&rbms1, RBMS4, C610, 1);
 800a70c:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800a710:	2201      	movs	r2, #1
 800a712:	2103      	movs	r1, #3
 800a714:	487a      	ldr	r0, [pc, #488]	@ (800a900 <Testboard_Handler+0x71c>)
 800a716:	f7fb f95d 	bl	80059d4 <RBMS_Config>
			RBMS_PID_Init(&rbms1);
 800a71a:	4879      	ldr	r0, [pc, #484]	@ (800a900 <Testboard_Handler+0x71c>)
 800a71c:	f7fb fb70 	bl	8005e00 <RBMS_PID_Init>
			RBMS_Set_Control_Mode(&rbms1, RBMS1, VELOCITY);
 800a720:	2202      	movs	r2, #2
 800a722:	2100      	movs	r1, #0
 800a724:	4876      	ldr	r0, [pc, #472]	@ (800a900 <Testboard_Handler+0x71c>)
 800a726:	f7fb fc7f 	bl	8006028 <RBMS_Set_Control_Mode>
			RBMS_Set_Control_Mode(&rbms1, RBMS2, VELOCITY);
 800a72a:	2202      	movs	r2, #2
 800a72c:	2101      	movs	r1, #1
 800a72e:	4874      	ldr	r0, [pc, #464]	@ (800a900 <Testboard_Handler+0x71c>)
 800a730:	f7fb fc7a 	bl	8006028 <RBMS_Set_Control_Mode>
			RBMS_Set_Control_Mode(&rbms1, RBMS3, VELOCITY);
 800a734:	2202      	movs	r2, #2
 800a736:	2102      	movs	r1, #2
 800a738:	4871      	ldr	r0, [pc, #452]	@ (800a900 <Testboard_Handler+0x71c>)
 800a73a:	f7fb fc75 	bl	8006028 <RBMS_Set_Control_Mode>
			RBMS_Set_Control_Mode(&rbms1, RBMS4, VELOCITY);
 800a73e:	2202      	movs	r2, #2
 800a740:	2103      	movs	r1, #3
 800a742:	486f      	ldr	r0, [pc, #444]	@ (800a900 <Testboard_Handler+0x71c>)
 800a744:	f7fb fc70 	bl	8006028 <RBMS_Set_Control_Mode>
			RBMS_Set_Target_Velocity(&rbms1, RBMS1, 150);
 800a748:	ed9f 0a6e 	vldr	s0, [pc, #440]	@ 800a904 <Testboard_Handler+0x720>
 800a74c:	2100      	movs	r1, #0
 800a74e:	486c      	ldr	r0, [pc, #432]	@ (800a900 <Testboard_Handler+0x71c>)
 800a750:	f7fb fc83 	bl	800605a <RBMS_Set_Target_Velocity>
			RBMS_Set_Target_Velocity(&rbms1, RBMS2, 150);
 800a754:	ed9f 0a6b 	vldr	s0, [pc, #428]	@ 800a904 <Testboard_Handler+0x720>
 800a758:	2101      	movs	r1, #1
 800a75a:	4869      	ldr	r0, [pc, #420]	@ (800a900 <Testboard_Handler+0x71c>)
 800a75c:	f7fb fc7d 	bl	800605a <RBMS_Set_Target_Velocity>
			RBMS_Set_Target_Velocity(&rbms1, RBMS3, 150);
 800a760:	ed9f 0a68 	vldr	s0, [pc, #416]	@ 800a904 <Testboard_Handler+0x720>
 800a764:	2102      	movs	r1, #2
 800a766:	4866      	ldr	r0, [pc, #408]	@ (800a900 <Testboard_Handler+0x71c>)
 800a768:	f7fb fc77 	bl	800605a <RBMS_Set_Target_Velocity>
			RBMS_Set_Target_Velocity(&rbms1, RBMS4, 150);
 800a76c:	ed9f 0a65 	vldr	s0, [pc, #404]	@ 800a904 <Testboard_Handler+0x720>
 800a770:	2103      	movs	r1, #3
 800a772:	4863      	ldr	r0, [pc, #396]	@ (800a900 <Testboard_Handler+0x71c>)
 800a774:	f7fb fc71 	bl	800605a <RBMS_Set_Target_Velocity>
			sprintf(buff_transmit,"Type C to change motor type or B to exit\n");
 800a778:	4963      	ldr	r1, [pc, #396]	@ (800a908 <Testboard_Handler+0x724>)
 800a77a:	4864      	ldr	r0, [pc, #400]	@ (800a90c <Testboard_Handler+0x728>)
 800a77c:	f013 f962 	bl	801da44 <siprintf>
			UART_Send();
 800a780:	f000 f8cc 	bl	800a91c <UART_Send>

		}
		if (buff_receive[0] == '2'){
 800a784:	4b5b      	ldr	r3, [pc, #364]	@ (800a8f4 <Testboard_Handler+0x710>)
 800a786:	781b      	ldrb	r3, [r3, #0]
 800a788:	2b32      	cmp	r3, #50	@ 0x32
 800a78a:	d159      	bne.n	800a840 <Testboard_Handler+0x65c>
			FLAG = C620;
 800a78c:	4b5a      	ldr	r3, [pc, #360]	@ (800a8f8 <Testboard_Handler+0x714>)
 800a78e:	2202      	movs	r2, #2
 800a790:	701a      	strb	r2, [r3, #0]
			RBMS_Init(&rbms1, &hcan1, RBMS_1234);
 800a792:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800a796:	4959      	ldr	r1, [pc, #356]	@ (800a8fc <Testboard_Handler+0x718>)
 800a798:	4859      	ldr	r0, [pc, #356]	@ (800a900 <Testboard_Handler+0x71c>)
 800a79a:	f7fb f8e3 	bl	8005964 <RBMS_Init>
			RBMS_Config(&rbms1, RBMS1, C620, 1);
 800a79e:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800a7a2:	2202      	movs	r2, #2
 800a7a4:	2100      	movs	r1, #0
 800a7a6:	4856      	ldr	r0, [pc, #344]	@ (800a900 <Testboard_Handler+0x71c>)
 800a7a8:	f7fb f914 	bl	80059d4 <RBMS_Config>
			RBMS_Config(&rbms1, RBMS2, C620, 1);
 800a7ac:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800a7b0:	2202      	movs	r2, #2
 800a7b2:	2101      	movs	r1, #1
 800a7b4:	4852      	ldr	r0, [pc, #328]	@ (800a900 <Testboard_Handler+0x71c>)
 800a7b6:	f7fb f90d 	bl	80059d4 <RBMS_Config>
			RBMS_Config(&rbms1, RBMS3, C620, 1);
 800a7ba:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800a7be:	2202      	movs	r2, #2
 800a7c0:	2102      	movs	r1, #2
 800a7c2:	484f      	ldr	r0, [pc, #316]	@ (800a900 <Testboard_Handler+0x71c>)
 800a7c4:	f7fb f906 	bl	80059d4 <RBMS_Config>
			RBMS_Config(&rbms1, RBMS4, C620, 1);
 800a7c8:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800a7cc:	2202      	movs	r2, #2
 800a7ce:	2103      	movs	r1, #3
 800a7d0:	484b      	ldr	r0, [pc, #300]	@ (800a900 <Testboard_Handler+0x71c>)
 800a7d2:	f7fb f8ff 	bl	80059d4 <RBMS_Config>
			RBMS_PID_Init(&rbms1);
 800a7d6:	484a      	ldr	r0, [pc, #296]	@ (800a900 <Testboard_Handler+0x71c>)
 800a7d8:	f7fb fb12 	bl	8005e00 <RBMS_PID_Init>
			RBMS_Set_Control_Mode(&rbms1, RBMS1, VELOCITY);
 800a7dc:	2202      	movs	r2, #2
 800a7de:	2100      	movs	r1, #0
 800a7e0:	4847      	ldr	r0, [pc, #284]	@ (800a900 <Testboard_Handler+0x71c>)
 800a7e2:	f7fb fc21 	bl	8006028 <RBMS_Set_Control_Mode>
			RBMS_Set_Control_Mode(&rbms1, RBMS2, VELOCITY);
 800a7e6:	2202      	movs	r2, #2
 800a7e8:	2101      	movs	r1, #1
 800a7ea:	4845      	ldr	r0, [pc, #276]	@ (800a900 <Testboard_Handler+0x71c>)
 800a7ec:	f7fb fc1c 	bl	8006028 <RBMS_Set_Control_Mode>
			RBMS_Set_Control_Mode(&rbms1, RBMS3, VELOCITY);
 800a7f0:	2202      	movs	r2, #2
 800a7f2:	2102      	movs	r1, #2
 800a7f4:	4842      	ldr	r0, [pc, #264]	@ (800a900 <Testboard_Handler+0x71c>)
 800a7f6:	f7fb fc17 	bl	8006028 <RBMS_Set_Control_Mode>
			RBMS_Set_Control_Mode(&rbms1, RBMS4, VELOCITY);
 800a7fa:	2202      	movs	r2, #2
 800a7fc:	2103      	movs	r1, #3
 800a7fe:	4840      	ldr	r0, [pc, #256]	@ (800a900 <Testboard_Handler+0x71c>)
 800a800:	f7fb fc12 	bl	8006028 <RBMS_Set_Control_Mode>
			RBMS_Set_Target_Velocity(&rbms1, RBMS1, 150);
 800a804:	ed9f 0a3f 	vldr	s0, [pc, #252]	@ 800a904 <Testboard_Handler+0x720>
 800a808:	2100      	movs	r1, #0
 800a80a:	483d      	ldr	r0, [pc, #244]	@ (800a900 <Testboard_Handler+0x71c>)
 800a80c:	f7fb fc25 	bl	800605a <RBMS_Set_Target_Velocity>
			RBMS_Set_Target_Velocity(&rbms1, RBMS2, 150);
 800a810:	ed9f 0a3c 	vldr	s0, [pc, #240]	@ 800a904 <Testboard_Handler+0x720>
 800a814:	2101      	movs	r1, #1
 800a816:	483a      	ldr	r0, [pc, #232]	@ (800a900 <Testboard_Handler+0x71c>)
 800a818:	f7fb fc1f 	bl	800605a <RBMS_Set_Target_Velocity>
			RBMS_Set_Target_Velocity(&rbms1, RBMS3, 150);
 800a81c:	ed9f 0a39 	vldr	s0, [pc, #228]	@ 800a904 <Testboard_Handler+0x720>
 800a820:	2102      	movs	r1, #2
 800a822:	4837      	ldr	r0, [pc, #220]	@ (800a900 <Testboard_Handler+0x71c>)
 800a824:	f7fb fc19 	bl	800605a <RBMS_Set_Target_Velocity>
			RBMS_Set_Target_Velocity(&rbms1, RBMS4, 150);
 800a828:	ed9f 0a36 	vldr	s0, [pc, #216]	@ 800a904 <Testboard_Handler+0x720>
 800a82c:	2103      	movs	r1, #3
 800a82e:	4834      	ldr	r0, [pc, #208]	@ (800a900 <Testboard_Handler+0x71c>)
 800a830:	f7fb fc13 	bl	800605a <RBMS_Set_Target_Velocity>
			sprintf(buff_transmit,"Type C to change motor type or B to exit\n");
 800a834:	4934      	ldr	r1, [pc, #208]	@ (800a908 <Testboard_Handler+0x724>)
 800a836:	4835      	ldr	r0, [pc, #212]	@ (800a90c <Testboard_Handler+0x728>)
 800a838:	f013 f904 	bl	801da44 <siprintf>
			UART_Send();
 800a83c:	f000 f86e 	bl	800a91c <UART_Send>

		}
		if(buff_receive[0] == 'C') {
 800a840:	4b2c      	ldr	r3, [pc, #176]	@ (800a8f4 <Testboard_Handler+0x710>)
 800a842:	781b      	ldrb	r3, [r3, #0]
 800a844:	2b43      	cmp	r3, #67	@ 0x43
 800a846:	d11f      	bne.n	800a888 <Testboard_Handler+0x6a4>
			RBMS_Set_Target_Velocity(&rbms1, RBMS1, 0);
 800a848:	ed9f 0a31 	vldr	s0, [pc, #196]	@ 800a910 <Testboard_Handler+0x72c>
 800a84c:	2100      	movs	r1, #0
 800a84e:	482c      	ldr	r0, [pc, #176]	@ (800a900 <Testboard_Handler+0x71c>)
 800a850:	f7fb fc03 	bl	800605a <RBMS_Set_Target_Velocity>
			RBMS_Set_Target_Velocity(&rbms1, RBMS2, 0);
 800a854:	ed9f 0a2e 	vldr	s0, [pc, #184]	@ 800a910 <Testboard_Handler+0x72c>
 800a858:	2101      	movs	r1, #1
 800a85a:	4829      	ldr	r0, [pc, #164]	@ (800a900 <Testboard_Handler+0x71c>)
 800a85c:	f7fb fbfd 	bl	800605a <RBMS_Set_Target_Velocity>
			RBMS_Set_Target_Velocity(&rbms1, RBMS3, 0);
 800a860:	ed9f 0a2b 	vldr	s0, [pc, #172]	@ 800a910 <Testboard_Handler+0x72c>
 800a864:	2102      	movs	r1, #2
 800a866:	4826      	ldr	r0, [pc, #152]	@ (800a900 <Testboard_Handler+0x71c>)
 800a868:	f7fb fbf7 	bl	800605a <RBMS_Set_Target_Velocity>
			RBMS_Set_Target_Velocity(&rbms1, RBMS4, 0);
 800a86c:	ed9f 0a28 	vldr	s0, [pc, #160]	@ 800a910 <Testboard_Handler+0x72c>
 800a870:	2103      	movs	r1, #3
 800a872:	4823      	ldr	r0, [pc, #140]	@ (800a900 <Testboard_Handler+0x71c>)
 800a874:	f7fb fbf1 	bl	800605a <RBMS_Set_Target_Velocity>
			state = 9;
 800a878:	4b26      	ldr	r3, [pc, #152]	@ (800a914 <Testboard_Handler+0x730>)
 800a87a:	2209      	movs	r2, #9
 800a87c:	701a      	strb	r2, [r3, #0]
			sys.transmit = 1;
 800a87e:	4a26      	ldr	r2, [pc, #152]	@ (800a918 <Testboard_Handler+0x734>)
 800a880:	6813      	ldr	r3, [r2, #0]
 800a882:	f043 0301 	orr.w	r3, r3, #1
 800a886:	6013      	str	r3, [r2, #0]
		}
		if(buff_receive[0] == 'B') {
 800a888:	4b1a      	ldr	r3, [pc, #104]	@ (800a8f4 <Testboard_Handler+0x710>)
 800a88a:	781b      	ldrb	r3, [r3, #0]
 800a88c:	2b42      	cmp	r3, #66	@ 0x42
 800a88e:	d12f      	bne.n	800a8f0 <Testboard_Handler+0x70c>
			RBMS_Set_Target_Velocity(&rbms1, RBMS1, 0);
 800a890:	ed9f 0a1f 	vldr	s0, [pc, #124]	@ 800a910 <Testboard_Handler+0x72c>
 800a894:	2100      	movs	r1, #0
 800a896:	481a      	ldr	r0, [pc, #104]	@ (800a900 <Testboard_Handler+0x71c>)
 800a898:	f7fb fbdf 	bl	800605a <RBMS_Set_Target_Velocity>
			RBMS_Set_Target_Velocity(&rbms1, RBMS2, 0);
 800a89c:	ed9f 0a1c 	vldr	s0, [pc, #112]	@ 800a910 <Testboard_Handler+0x72c>
 800a8a0:	2101      	movs	r1, #1
 800a8a2:	4817      	ldr	r0, [pc, #92]	@ (800a900 <Testboard_Handler+0x71c>)
 800a8a4:	f7fb fbd9 	bl	800605a <RBMS_Set_Target_Velocity>
			RBMS_Set_Target_Velocity(&rbms1, RBMS3, 0);
 800a8a8:	ed9f 0a19 	vldr	s0, [pc, #100]	@ 800a910 <Testboard_Handler+0x72c>
 800a8ac:	2102      	movs	r1, #2
 800a8ae:	4814      	ldr	r0, [pc, #80]	@ (800a900 <Testboard_Handler+0x71c>)
 800a8b0:	f7fb fbd3 	bl	800605a <RBMS_Set_Target_Velocity>
			RBMS_Set_Target_Velocity(&rbms1, RBMS4, 0);
 800a8b4:	ed9f 0a16 	vldr	s0, [pc, #88]	@ 800a910 <Testboard_Handler+0x72c>
 800a8b8:	2103      	movs	r1, #3
 800a8ba:	4811      	ldr	r0, [pc, #68]	@ (800a900 <Testboard_Handler+0x71c>)
 800a8bc:	f7fb fbcd 	bl	800605a <RBMS_Set_Target_Velocity>
			state = 0;
 800a8c0:	4b14      	ldr	r3, [pc, #80]	@ (800a914 <Testboard_Handler+0x730>)
 800a8c2:	2200      	movs	r2, #0
 800a8c4:	701a      	strb	r2, [r3, #0]
			sys.transmit = 1;
 800a8c6:	4a14      	ldr	r2, [pc, #80]	@ (800a918 <Testboard_Handler+0x734>)
 800a8c8:	6813      	ldr	r3, [r2, #0]
 800a8ca:	f043 0301 	orr.w	r3, r3, #1
 800a8ce:	6013      	str	r3, [r2, #0]
		}
   }
}
 800a8d0:	e00e      	b.n	800a8f0 <Testboard_Handler+0x70c>
		break;
 800a8d2:	bf00      	nop
 800a8d4:	e00c      	b.n	800a8f0 <Testboard_Handler+0x70c>
		break;
 800a8d6:	bf00      	nop
 800a8d8:	e00a      	b.n	800a8f0 <Testboard_Handler+0x70c>
		break;
 800a8da:	bf00      	nop
 800a8dc:	e008      	b.n	800a8f0 <Testboard_Handler+0x70c>
		break;
 800a8de:	bf00      	nop
 800a8e0:	e006      	b.n	800a8f0 <Testboard_Handler+0x70c>
		break;
 800a8e2:	bf00      	nop
 800a8e4:	e004      	b.n	800a8f0 <Testboard_Handler+0x70c>
		break;
 800a8e6:	bf00      	nop
 800a8e8:	e002      	b.n	800a8f0 <Testboard_Handler+0x70c>
		break;
 800a8ea:	bf00      	nop
 800a8ec:	e000      	b.n	800a8f0 <Testboard_Handler+0x70c>
		break;
 800a8ee:	bf00      	nop
}
 800a8f0:	bf00      	nop
 800a8f2:	bd80      	pop	{r7, pc}
 800a8f4:	20009e50 	.word	0x20009e50
 800a8f8:	20009eb5 	.word	0x20009eb5
 800a8fc:	20006d44 	.word	0x20006d44
 800a900:	2000a3c4 	.word	0x2000a3c4
 800a904:	43160000 	.word	0x43160000
 800a908:	080219a0 	.word	0x080219a0
 800a90c:	20009a84 	.word	0x20009a84
 800a910:	00000000 	.word	0x00000000
 800a914:	20008d24 	.word	0x20008d24
 800a918:	20008bf8 	.word	0x20008bf8

0800a91c <UART_Send>:

void UART_Send(void){
 800a91c:	b580      	push	{r7, lr}
 800a91e:	af00      	add	r7, sp, #0
	HAL_UART_Transmit(&Uarts, (uint8_t*)buff_transmit, strlen(buff_transmit), 1000);
 800a920:	4807      	ldr	r0, [pc, #28]	@ (800a940 <UART_Send+0x24>)
 800a922:	f7f5 fca5 	bl	8000270 <strlen>
 800a926:	4603      	mov	r3, r0
 800a928:	b29a      	uxth	r2, r3
 800a92a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800a92e:	4904      	ldr	r1, [pc, #16]	@ (800a940 <UART_Send+0x24>)
 800a930:	4804      	ldr	r0, [pc, #16]	@ (800a944 <UART_Send+0x28>)
 800a932:	f009 fdf6 	bl	8014522 <HAL_UART_Transmit>
	HAL_Delay(100);
 800a936:	2064      	movs	r0, #100	@ 0x64
 800a938:	f001 fb10 	bl	800bf5c <HAL_Delay>
}
 800a93c:	bf00      	nop
 800a93e:	bd80      	pop	{r7, pc}
 800a940:	20009a84 	.word	0x20009a84
 800a944:	20009c60 	.word	0x20009c60

0800a948 <Prompt>:

void Prompt(void){
 800a948:	b5b0      	push	{r4, r5, r7, lr}
 800a94a:	b082      	sub	sp, #8
 800a94c:	af02      	add	r7, sp, #8
	if (sys.transmit == 1 || sys.prompt == 1) {
 800a94e:	4b45      	ldr	r3, [pc, #276]	@ (800aa64 <Prompt+0x11c>)
 800a950:	681b      	ldr	r3, [r3, #0]
 800a952:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800a956:	b2db      	uxtb	r3, r3
 800a958:	2b01      	cmp	r3, #1
 800a95a:	d007      	beq.n	800a96c <Prompt+0x24>
 800a95c:	4b41      	ldr	r3, [pc, #260]	@ (800aa64 <Prompt+0x11c>)
 800a95e:	681b      	ldr	r3, [r3, #0]
 800a960:	f3c3 2300 	ubfx	r3, r3, #8, #1
 800a964:	b2db      	uxtb	r3, r3
 800a966:	2b01      	cmp	r3, #1
 800a968:	f040 8464 	bne.w	800b234 <Prompt+0x8ec>
				switch (state) {
 800a96c:	4b3e      	ldr	r3, [pc, #248]	@ (800aa68 <Prompt+0x120>)
 800a96e:	781b      	ldrb	r3, [r3, #0]
 800a970:	2b09      	cmp	r3, #9
 800a972:	f200 845a 	bhi.w	800b22a <Prompt+0x8e2>
 800a976:	a201      	add	r2, pc, #4	@ (adr r2, 800a97c <Prompt+0x34>)
 800a978:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a97c:	0800a9a5 	.word	0x0800a9a5
 800a980:	0800aa41 	.word	0x0800aa41
 800a984:	0800af75 	.word	0x0800af75
 800a988:	0800b005 	.word	0x0800b005
 800a98c:	0800b031 	.word	0x0800b031
 800a990:	0800b07b 	.word	0x0800b07b
 800a994:	0800b17d 	.word	0x0800b17d
 800a998:	0800b1af 	.word	0x0800b1af
 800a99c:	0800b1bd 	.word	0x0800b1bd
 800a9a0:	0800b1e3 	.word	0x0800b1e3
				case MAIN:
					sprintf(buff_transmit, "Welcome to board testing program.\n");
 800a9a4:	4931      	ldr	r1, [pc, #196]	@ (800aa6c <Prompt+0x124>)
 800a9a6:	4832      	ldr	r0, [pc, #200]	@ (800aa70 <Prompt+0x128>)
 800a9a8:	f013 f84c 	bl	801da44 <siprintf>
					UART_Send();
 800a9ac:	f7ff ffb6 	bl	800a91c <UART_Send>
				#ifdef newpin
					sprintf(buff_transmit,"The board being tested is: Mainboard V3\n");
					UART_Send();
				#endif
				#ifdef mainboard
					sprintf(buff_transmit,"The board being tested is: Mainboard V2\n");
 800a9b0:	4930      	ldr	r1, [pc, #192]	@ (800aa74 <Prompt+0x12c>)
 800a9b2:	482f      	ldr	r0, [pc, #188]	@ (800aa70 <Prompt+0x128>)
 800a9b4:	f013 f846 	bl	801da44 <siprintf>
					UART_Send();
 800a9b8:	f7ff ffb0 	bl	800a91c <UART_Send>
				#endif
				#ifdef newboard
					sprintf(buff_transmit,"The board being tested is: Mainboard V3.3\n");
					UART_Send();
					#endif
					sprintf(buff_transmit,
 800a9bc:	492e      	ldr	r1, [pc, #184]	@ (800aa78 <Prompt+0x130>)
 800a9be:	482c      	ldr	r0, [pc, #176]	@ (800aa70 <Prompt+0x128>)
 800a9c0:	f013 f840 	bl	801da44 <siprintf>
							"Please select what you like to test \n");
					UART_Send();
 800a9c4:	f7ff ffaa 	bl	800a91c <UART_Send>
					sprintf(buff_transmit, "1) GPIO\n");
 800a9c8:	492c      	ldr	r1, [pc, #176]	@ (800aa7c <Prompt+0x134>)
 800a9ca:	4829      	ldr	r0, [pc, #164]	@ (800aa70 <Prompt+0x128>)
 800a9cc:	f013 f83a 	bl	801da44 <siprintf>
					UART_Send();
 800a9d0:	f7ff ffa4 	bl	800a91c <UART_Send>
					sprintf(buff_transmit, "2) HSPM\n");
 800a9d4:	492a      	ldr	r1, [pc, #168]	@ (800aa80 <Prompt+0x138>)
 800a9d6:	4826      	ldr	r0, [pc, #152]	@ (800aa70 <Prompt+0x128>)
 800a9d8:	f013 f834 	bl	801da44 <siprintf>
					UART_Send();
 800a9dc:	f7ff ff9e 	bl	800a91c <UART_Send>
					sprintf(buff_transmit, "3) Encoder\n");
 800a9e0:	4928      	ldr	r1, [pc, #160]	@ (800aa84 <Prompt+0x13c>)
 800a9e2:	4823      	ldr	r0, [pc, #140]	@ (800aa70 <Prompt+0x128>)
 800a9e4:	f013 f82e 	bl	801da44 <siprintf>
					UART_Send();
 800a9e8:	f7ff ff98 	bl	800a91c <UART_Send>
					sprintf(buff_transmit, "4) UART\n");
 800a9ec:	4926      	ldr	r1, [pc, #152]	@ (800aa88 <Prompt+0x140>)
 800a9ee:	4820      	ldr	r0, [pc, #128]	@ (800aa70 <Prompt+0x128>)
 800a9f0:	f013 f828 	bl	801da44 <siprintf>
					UART_Send();
 800a9f4:	f7ff ff92 	bl	800a91c <UART_Send>
					sprintf(buff_transmit, "5) I2C\n");
 800a9f8:	4924      	ldr	r1, [pc, #144]	@ (800aa8c <Prompt+0x144>)
 800a9fa:	481d      	ldr	r0, [pc, #116]	@ (800aa70 <Prompt+0x128>)
 800a9fc:	f013 f822 	bl	801da44 <siprintf>
					UART_Send();
 800aa00:	f7ff ff8c 	bl	800a91c <UART_Send>
					sprintf(buff_transmit, "6) CAN\n");
 800aa04:	4922      	ldr	r1, [pc, #136]	@ (800aa90 <Prompt+0x148>)
 800aa06:	481a      	ldr	r0, [pc, #104]	@ (800aa70 <Prompt+0x128>)
 800aa08:	f013 f81c 	bl	801da44 <siprintf>
					UART_Send();
 800aa0c:	f7ff ff86 	bl	800a91c <UART_Send>
					sprintf(buff_transmit, "7) USB\n");
 800aa10:	4920      	ldr	r1, [pc, #128]	@ (800aa94 <Prompt+0x14c>)
 800aa12:	4817      	ldr	r0, [pc, #92]	@ (800aa70 <Prompt+0x128>)
 800aa14:	f013 f816 	bl	801da44 <siprintf>
					UART_Send();
 800aa18:	f7ff ff80 	bl	800a91c <UART_Send>
					sprintf(buff_transmit, "8) Robomaster\n");
 800aa1c:	491e      	ldr	r1, [pc, #120]	@ (800aa98 <Prompt+0x150>)
 800aa1e:	4814      	ldr	r0, [pc, #80]	@ (800aa70 <Prompt+0x128>)
 800aa20:	f013 f810 	bl	801da44 <siprintf>
					UART_Send();
 800aa24:	f7ff ff7a 	bl	800a91c <UART_Send>
					sprintf(buff_transmit,
 800aa28:	491c      	ldr	r1, [pc, #112]	@ (800aa9c <Prompt+0x154>)
 800aa2a:	4811      	ldr	r0, [pc, #68]	@ (800aa70 <Prompt+0x128>)
 800aa2c:	f013 f80a 	bl	801da44 <siprintf>
							"Type B to exit after entering a test mode\n");
					UART_Send();
 800aa30:	f7ff ff74 	bl	800a91c <UART_Send>
					sys.prompt = 0;
 800aa34:	4a0b      	ldr	r2, [pc, #44]	@ (800aa64 <Prompt+0x11c>)
 800aa36:	6813      	ldr	r3, [r2, #0]
 800aa38:	f36f 2308 	bfc	r3, #8, #1
 800aa3c:	6013      	str	r3, [r2, #0]
					break;
 800aa3e:	e3f4      	b.n	800b22a <Prompt+0x8e2>
				case GPIOS:
					sprintf(buff_transmit, "PIN: ");
 800aa40:	4917      	ldr	r1, [pc, #92]	@ (800aaa0 <Prompt+0x158>)
 800aa42:	480b      	ldr	r0, [pc, #44]	@ (800aa70 <Prompt+0x128>)
 800aa44:	f012 fffe 	bl	801da44 <siprintf>
					UART_Send();
 800aa48:	f7ff ff68 	bl	800a91c <UART_Send>
					if(PB1) {sprintf(buff_transmit, "");} else{ sprintf(buff_transmit, "B1 ");};
 800aa4c:	4b15      	ldr	r3, [pc, #84]	@ (800aaa4 <Prompt+0x15c>)
 800aa4e:	781b      	ldrb	r3, [r3, #0]
 800aa50:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800aa54:	b2db      	uxtb	r3, r3
 800aa56:	2b00      	cmp	r3, #0
 800aa58:	d028      	beq.n	800aaac <Prompt+0x164>
 800aa5a:	4913      	ldr	r1, [pc, #76]	@ (800aaa8 <Prompt+0x160>)
 800aa5c:	4804      	ldr	r0, [pc, #16]	@ (800aa70 <Prompt+0x128>)
 800aa5e:	f012 fff1 	bl	801da44 <siprintf>
 800aa62:	e027      	b.n	800aab4 <Prompt+0x16c>
 800aa64:	20008bf8 	.word	0x20008bf8
 800aa68:	20008d24 	.word	0x20008d24
 800aa6c:	080219cc 	.word	0x080219cc
 800aa70:	20009a84 	.word	0x20009a84
 800aa74:	080219f0 	.word	0x080219f0
 800aa78:	08021a1c 	.word	0x08021a1c
 800aa7c:	08021a44 	.word	0x08021a44
 800aa80:	08021a50 	.word	0x08021a50
 800aa84:	08021a5c 	.word	0x08021a5c
 800aa88:	08021a68 	.word	0x08021a68
 800aa8c:	08021a74 	.word	0x08021a74
 800aa90:	08021a7c 	.word	0x08021a7c
 800aa94:	08021a84 	.word	0x08021a84
 800aa98:	08021a8c 	.word	0x08021a8c
 800aa9c:	08021a9c 	.word	0x08021a9c
 800aaa0:	08021ac8 	.word	0x08021ac8
 800aaa4:	40020410 	.word	0x40020410
 800aaa8:	08021ad0 	.word	0x08021ad0
 800aaac:	49b5      	ldr	r1, [pc, #724]	@ (800ad84 <Prompt+0x43c>)
 800aaae:	48b6      	ldr	r0, [pc, #728]	@ (800ad88 <Prompt+0x440>)
 800aab0:	f012 ffc8 	bl	801da44 <siprintf>
					PB2 ? strcat(buff_transmit, "") : strcat(buff_transmit, "B2 ");
 800aab4:	4bb5      	ldr	r3, [pc, #724]	@ (800ad8c <Prompt+0x444>)
 800aab6:	781b      	ldrb	r3, [r3, #0]
 800aab8:	f003 0301 	and.w	r3, r3, #1
 800aabc:	b2db      	uxtb	r3, r3
 800aabe:	2b00      	cmp	r3, #0
 800aac0:	d109      	bne.n	800aad6 <Prompt+0x18e>
 800aac2:	48b1      	ldr	r0, [pc, #708]	@ (800ad88 <Prompt+0x440>)
 800aac4:	f7f5 fbd4 	bl	8000270 <strlen>
 800aac8:	4603      	mov	r3, r0
 800aaca:	461a      	mov	r2, r3
 800aacc:	4bae      	ldr	r3, [pc, #696]	@ (800ad88 <Prompt+0x440>)
 800aace:	4413      	add	r3, r2
 800aad0:	4aaf      	ldr	r2, [pc, #700]	@ (800ad90 <Prompt+0x448>)
 800aad2:	6810      	ldr	r0, [r2, #0]
 800aad4:	6018      	str	r0, [r3, #0]
#ifdef newboard
					PB3 ? strcat(buff_transmit, "") : strcat(buff_transmit, "B3 ");
#endif
					IP1 ? strcat(buff_transmit, "") : strcat(buff_transmit, "D1 ");
 800aad6:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800aada:	48ae      	ldr	r0, [pc, #696]	@ (800ad94 <Prompt+0x44c>)
 800aadc:	f003 f942 	bl	800dd64 <HAL_GPIO_ReadPin>
 800aae0:	4603      	mov	r3, r0
 800aae2:	2b00      	cmp	r3, #0
 800aae4:	d109      	bne.n	800aafa <Prompt+0x1b2>
 800aae6:	48a8      	ldr	r0, [pc, #672]	@ (800ad88 <Prompt+0x440>)
 800aae8:	f7f5 fbc2 	bl	8000270 <strlen>
 800aaec:	4603      	mov	r3, r0
 800aaee:	461a      	mov	r2, r3
 800aaf0:	4ba5      	ldr	r3, [pc, #660]	@ (800ad88 <Prompt+0x440>)
 800aaf2:	4413      	add	r3, r2
 800aaf4:	4aa8      	ldr	r2, [pc, #672]	@ (800ad98 <Prompt+0x450>)
 800aaf6:	6810      	ldr	r0, [r2, #0]
 800aaf8:	6018      	str	r0, [r3, #0]
					IP2 ? strcat(buff_transmit, "") : strcat(buff_transmit, "D2 ");
 800aafa:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800aafe:	48a5      	ldr	r0, [pc, #660]	@ (800ad94 <Prompt+0x44c>)
 800ab00:	f003 f930 	bl	800dd64 <HAL_GPIO_ReadPin>
 800ab04:	4603      	mov	r3, r0
 800ab06:	2b00      	cmp	r3, #0
 800ab08:	d109      	bne.n	800ab1e <Prompt+0x1d6>
 800ab0a:	489f      	ldr	r0, [pc, #636]	@ (800ad88 <Prompt+0x440>)
 800ab0c:	f7f5 fbb0 	bl	8000270 <strlen>
 800ab10:	4603      	mov	r3, r0
 800ab12:	461a      	mov	r2, r3
 800ab14:	4b9c      	ldr	r3, [pc, #624]	@ (800ad88 <Prompt+0x440>)
 800ab16:	4413      	add	r3, r2
 800ab18:	4aa0      	ldr	r2, [pc, #640]	@ (800ad9c <Prompt+0x454>)
 800ab1a:	6810      	ldr	r0, [r2, #0]
 800ab1c:	6018      	str	r0, [r3, #0]
					IP3 ? strcat(buff_transmit, "") : strcat(buff_transmit, "D3 ");
 800ab1e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800ab22:	489c      	ldr	r0, [pc, #624]	@ (800ad94 <Prompt+0x44c>)
 800ab24:	f003 f91e 	bl	800dd64 <HAL_GPIO_ReadPin>
 800ab28:	4603      	mov	r3, r0
 800ab2a:	2b00      	cmp	r3, #0
 800ab2c:	d109      	bne.n	800ab42 <Prompt+0x1fa>
 800ab2e:	4896      	ldr	r0, [pc, #600]	@ (800ad88 <Prompt+0x440>)
 800ab30:	f7f5 fb9e 	bl	8000270 <strlen>
 800ab34:	4603      	mov	r3, r0
 800ab36:	461a      	mov	r2, r3
 800ab38:	4b93      	ldr	r3, [pc, #588]	@ (800ad88 <Prompt+0x440>)
 800ab3a:	4413      	add	r3, r2
 800ab3c:	4a98      	ldr	r2, [pc, #608]	@ (800ada0 <Prompt+0x458>)
 800ab3e:	6810      	ldr	r0, [r2, #0]
 800ab40:	6018      	str	r0, [r3, #0]
					IP4 ? strcat(buff_transmit, "") : strcat(buff_transmit, "D4 ");
 800ab42:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800ab46:	4893      	ldr	r0, [pc, #588]	@ (800ad94 <Prompt+0x44c>)
 800ab48:	f003 f90c 	bl	800dd64 <HAL_GPIO_ReadPin>
 800ab4c:	4603      	mov	r3, r0
 800ab4e:	2b00      	cmp	r3, #0
 800ab50:	d109      	bne.n	800ab66 <Prompt+0x21e>
 800ab52:	488d      	ldr	r0, [pc, #564]	@ (800ad88 <Prompt+0x440>)
 800ab54:	f7f5 fb8c 	bl	8000270 <strlen>
 800ab58:	4603      	mov	r3, r0
 800ab5a:	461a      	mov	r2, r3
 800ab5c:	4b8a      	ldr	r3, [pc, #552]	@ (800ad88 <Prompt+0x440>)
 800ab5e:	4413      	add	r3, r2
 800ab60:	4a90      	ldr	r2, [pc, #576]	@ (800ada4 <Prompt+0x45c>)
 800ab62:	6810      	ldr	r0, [r2, #0]
 800ab64:	6018      	str	r0, [r3, #0]
					IP5 ? strcat(buff_transmit, "") : strcat(buff_transmit, "D5 ");
 800ab66:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800ab6a:	488f      	ldr	r0, [pc, #572]	@ (800ada8 <Prompt+0x460>)
 800ab6c:	f003 f8fa 	bl	800dd64 <HAL_GPIO_ReadPin>
 800ab70:	4603      	mov	r3, r0
 800ab72:	2b00      	cmp	r3, #0
 800ab74:	d109      	bne.n	800ab8a <Prompt+0x242>
 800ab76:	4884      	ldr	r0, [pc, #528]	@ (800ad88 <Prompt+0x440>)
 800ab78:	f7f5 fb7a 	bl	8000270 <strlen>
 800ab7c:	4603      	mov	r3, r0
 800ab7e:	461a      	mov	r2, r3
 800ab80:	4b81      	ldr	r3, [pc, #516]	@ (800ad88 <Prompt+0x440>)
 800ab82:	4413      	add	r3, r2
 800ab84:	4a89      	ldr	r2, [pc, #548]	@ (800adac <Prompt+0x464>)
 800ab86:	6810      	ldr	r0, [r2, #0]
 800ab88:	6018      	str	r0, [r3, #0]
					IP6 ? strcat(buff_transmit, "") : strcat(buff_transmit, "D6 ");
 800ab8a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800ab8e:	4886      	ldr	r0, [pc, #536]	@ (800ada8 <Prompt+0x460>)
 800ab90:	f003 f8e8 	bl	800dd64 <HAL_GPIO_ReadPin>
 800ab94:	4603      	mov	r3, r0
 800ab96:	2b00      	cmp	r3, #0
 800ab98:	d109      	bne.n	800abae <Prompt+0x266>
 800ab9a:	487b      	ldr	r0, [pc, #492]	@ (800ad88 <Prompt+0x440>)
 800ab9c:	f7f5 fb68 	bl	8000270 <strlen>
 800aba0:	4603      	mov	r3, r0
 800aba2:	461a      	mov	r2, r3
 800aba4:	4b78      	ldr	r3, [pc, #480]	@ (800ad88 <Prompt+0x440>)
 800aba6:	4413      	add	r3, r2
 800aba8:	4a81      	ldr	r2, [pc, #516]	@ (800adb0 <Prompt+0x468>)
 800abaa:	6810      	ldr	r0, [r2, #0]
 800abac:	6018      	str	r0, [r3, #0]
#ifdef newpin
					IP7 ? strcat(buff_transmit, "") : strcat(buff_transmit, "A1 ");
					IP8 ? strcat(buff_transmit, "") : strcat(buff_transmit, "A2");
#else

					IP7 ? strcat(buff_transmit, "") : strcat(buff_transmit, "D7 ");
 800abae:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800abb2:	4880      	ldr	r0, [pc, #512]	@ (800adb4 <Prompt+0x46c>)
 800abb4:	f003 f8d6 	bl	800dd64 <HAL_GPIO_ReadPin>
 800abb8:	4603      	mov	r3, r0
 800abba:	2b00      	cmp	r3, #0
 800abbc:	d109      	bne.n	800abd2 <Prompt+0x28a>
 800abbe:	4872      	ldr	r0, [pc, #456]	@ (800ad88 <Prompt+0x440>)
 800abc0:	f7f5 fb56 	bl	8000270 <strlen>
 800abc4:	4603      	mov	r3, r0
 800abc6:	461a      	mov	r2, r3
 800abc8:	4b6f      	ldr	r3, [pc, #444]	@ (800ad88 <Prompt+0x440>)
 800abca:	4413      	add	r3, r2
 800abcc:	4a7a      	ldr	r2, [pc, #488]	@ (800adb8 <Prompt+0x470>)
 800abce:	6810      	ldr	r0, [r2, #0]
 800abd0:	6018      	str	r0, [r3, #0]
					IP8 ? strcat(buff_transmit, "") : strcat(buff_transmit, "D8 ");
 800abd2:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800abd6:	4877      	ldr	r0, [pc, #476]	@ (800adb4 <Prompt+0x46c>)
 800abd8:	f003 f8c4 	bl	800dd64 <HAL_GPIO_ReadPin>
 800abdc:	4603      	mov	r3, r0
 800abde:	2b00      	cmp	r3, #0
 800abe0:	d109      	bne.n	800abf6 <Prompt+0x2ae>
 800abe2:	4869      	ldr	r0, [pc, #420]	@ (800ad88 <Prompt+0x440>)
 800abe4:	f7f5 fb44 	bl	8000270 <strlen>
 800abe8:	4603      	mov	r3, r0
 800abea:	461a      	mov	r2, r3
 800abec:	4b66      	ldr	r3, [pc, #408]	@ (800ad88 <Prompt+0x440>)
 800abee:	4413      	add	r3, r2
 800abf0:	4a72      	ldr	r2, [pc, #456]	@ (800adbc <Prompt+0x474>)
 800abf2:	6810      	ldr	r0, [r2, #0]
 800abf4:	6018      	str	r0, [r3, #0]
					IP9 ? strcat(buff_transmit, "") : strcat(buff_transmit, "D9 ");
 800abf6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800abfa:	4871      	ldr	r0, [pc, #452]	@ (800adc0 <Prompt+0x478>)
 800abfc:	f003 f8b2 	bl	800dd64 <HAL_GPIO_ReadPin>
 800ac00:	4603      	mov	r3, r0
 800ac02:	2b00      	cmp	r3, #0
 800ac04:	d109      	bne.n	800ac1a <Prompt+0x2d2>
 800ac06:	4860      	ldr	r0, [pc, #384]	@ (800ad88 <Prompt+0x440>)
 800ac08:	f7f5 fb32 	bl	8000270 <strlen>
 800ac0c:	4603      	mov	r3, r0
 800ac0e:	461a      	mov	r2, r3
 800ac10:	4b5d      	ldr	r3, [pc, #372]	@ (800ad88 <Prompt+0x440>)
 800ac12:	4413      	add	r3, r2
 800ac14:	4a6b      	ldr	r2, [pc, #428]	@ (800adc4 <Prompt+0x47c>)
 800ac16:	6810      	ldr	r0, [r2, #0]
 800ac18:	6018      	str	r0, [r3, #0]
					IP10 ? strcat(buff_transmit, "") : strcat(buff_transmit, "D10 ");
 800ac1a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800ac1e:	486a      	ldr	r0, [pc, #424]	@ (800adc8 <Prompt+0x480>)
 800ac20:	f003 f8a0 	bl	800dd64 <HAL_GPIO_ReadPin>
 800ac24:	4603      	mov	r3, r0
 800ac26:	2b00      	cmp	r3, #0
 800ac28:	d10b      	bne.n	800ac42 <Prompt+0x2fa>
 800ac2a:	4857      	ldr	r0, [pc, #348]	@ (800ad88 <Prompt+0x440>)
 800ac2c:	f7f5 fb20 	bl	8000270 <strlen>
 800ac30:	4603      	mov	r3, r0
 800ac32:	461a      	mov	r2, r3
 800ac34:	4b54      	ldr	r3, [pc, #336]	@ (800ad88 <Prompt+0x440>)
 800ac36:	4413      	add	r3, r2
 800ac38:	4a64      	ldr	r2, [pc, #400]	@ (800adcc <Prompt+0x484>)
 800ac3a:	6810      	ldr	r0, [r2, #0]
 800ac3c:	6018      	str	r0, [r3, #0]
 800ac3e:	7912      	ldrb	r2, [r2, #4]
 800ac40:	711a      	strb	r2, [r3, #4]
					IP11 ? strcat(buff_transmit, "") : strcat(buff_transmit, "D11 ");
 800ac42:	2108      	movs	r1, #8
 800ac44:	485b      	ldr	r0, [pc, #364]	@ (800adb4 <Prompt+0x46c>)
 800ac46:	f003 f88d 	bl	800dd64 <HAL_GPIO_ReadPin>
 800ac4a:	4603      	mov	r3, r0
 800ac4c:	2b00      	cmp	r3, #0
 800ac4e:	d10b      	bne.n	800ac68 <Prompt+0x320>
 800ac50:	484d      	ldr	r0, [pc, #308]	@ (800ad88 <Prompt+0x440>)
 800ac52:	f7f5 fb0d 	bl	8000270 <strlen>
 800ac56:	4603      	mov	r3, r0
 800ac58:	461a      	mov	r2, r3
 800ac5a:	4b4b      	ldr	r3, [pc, #300]	@ (800ad88 <Prompt+0x440>)
 800ac5c:	4413      	add	r3, r2
 800ac5e:	4a5c      	ldr	r2, [pc, #368]	@ (800add0 <Prompt+0x488>)
 800ac60:	6810      	ldr	r0, [r2, #0]
 800ac62:	6018      	str	r0, [r3, #0]
 800ac64:	7912      	ldrb	r2, [r2, #4]
 800ac66:	711a      	strb	r2, [r3, #4]
					IP12 ? strcat(buff_transmit, "") : strcat(buff_transmit, "D12 ");
 800ac68:	2110      	movs	r1, #16
 800ac6a:	4852      	ldr	r0, [pc, #328]	@ (800adb4 <Prompt+0x46c>)
 800ac6c:	f003 f87a 	bl	800dd64 <HAL_GPIO_ReadPin>
 800ac70:	4603      	mov	r3, r0
 800ac72:	2b00      	cmp	r3, #0
 800ac74:	d10b      	bne.n	800ac8e <Prompt+0x346>
 800ac76:	4844      	ldr	r0, [pc, #272]	@ (800ad88 <Prompt+0x440>)
 800ac78:	f7f5 fafa 	bl	8000270 <strlen>
 800ac7c:	4603      	mov	r3, r0
 800ac7e:	461a      	mov	r2, r3
 800ac80:	4b41      	ldr	r3, [pc, #260]	@ (800ad88 <Prompt+0x440>)
 800ac82:	4413      	add	r3, r2
 800ac84:	4a53      	ldr	r2, [pc, #332]	@ (800add4 <Prompt+0x48c>)
 800ac86:	6810      	ldr	r0, [r2, #0]
 800ac88:	6018      	str	r0, [r3, #0]
 800ac8a:	7912      	ldrb	r2, [r2, #4]
 800ac8c:	711a      	strb	r2, [r3, #4]
#endif
#ifdef mainboard
					IP13 ? strcat(buff_transmit, "") : strcat(buff_transmit, "D13 ");
 800ac8e:	2180      	movs	r1, #128	@ 0x80
 800ac90:	4848      	ldr	r0, [pc, #288]	@ (800adb4 <Prompt+0x46c>)
 800ac92:	f003 f867 	bl	800dd64 <HAL_GPIO_ReadPin>
 800ac96:	4603      	mov	r3, r0
 800ac98:	2b00      	cmp	r3, #0
 800ac9a:	d10b      	bne.n	800acb4 <Prompt+0x36c>
 800ac9c:	483a      	ldr	r0, [pc, #232]	@ (800ad88 <Prompt+0x440>)
 800ac9e:	f7f5 fae7 	bl	8000270 <strlen>
 800aca2:	4603      	mov	r3, r0
 800aca4:	461a      	mov	r2, r3
 800aca6:	4b38      	ldr	r3, [pc, #224]	@ (800ad88 <Prompt+0x440>)
 800aca8:	4413      	add	r3, r2
 800acaa:	4a4b      	ldr	r2, [pc, #300]	@ (800add8 <Prompt+0x490>)
 800acac:	6810      	ldr	r0, [r2, #0]
 800acae:	6018      	str	r0, [r3, #0]
 800acb0:	7912      	ldrb	r2, [r2, #4]
 800acb2:	711a      	strb	r2, [r3, #4]
					IP14 ? strcat(buff_transmit, "") : strcat(buff_transmit, "D14 ");
 800acb4:	2120      	movs	r1, #32
 800acb6:	483c      	ldr	r0, [pc, #240]	@ (800ada8 <Prompt+0x460>)
 800acb8:	f003 f854 	bl	800dd64 <HAL_GPIO_ReadPin>
 800acbc:	4603      	mov	r3, r0
 800acbe:	2b00      	cmp	r3, #0
 800acc0:	d10b      	bne.n	800acda <Prompt+0x392>
 800acc2:	4831      	ldr	r0, [pc, #196]	@ (800ad88 <Prompt+0x440>)
 800acc4:	f7f5 fad4 	bl	8000270 <strlen>
 800acc8:	4603      	mov	r3, r0
 800acca:	461a      	mov	r2, r3
 800accc:	4b2e      	ldr	r3, [pc, #184]	@ (800ad88 <Prompt+0x440>)
 800acce:	4413      	add	r3, r2
 800acd0:	4a42      	ldr	r2, [pc, #264]	@ (800addc <Prompt+0x494>)
 800acd2:	6810      	ldr	r0, [r2, #0]
 800acd4:	6018      	str	r0, [r3, #0]
 800acd6:	7912      	ldrb	r2, [r2, #4]
 800acd8:	711a      	strb	r2, [r3, #4]
					IP15 ? strcat(buff_transmit, "") : strcat(buff_transmit, "D15 ");
 800acda:	2140      	movs	r1, #64	@ 0x40
 800acdc:	4832      	ldr	r0, [pc, #200]	@ (800ada8 <Prompt+0x460>)
 800acde:	f003 f841 	bl	800dd64 <HAL_GPIO_ReadPin>
 800ace2:	4603      	mov	r3, r0
 800ace4:	2b00      	cmp	r3, #0
 800ace6:	d10b      	bne.n	800ad00 <Prompt+0x3b8>
 800ace8:	4827      	ldr	r0, [pc, #156]	@ (800ad88 <Prompt+0x440>)
 800acea:	f7f5 fac1 	bl	8000270 <strlen>
 800acee:	4603      	mov	r3, r0
 800acf0:	461a      	mov	r2, r3
 800acf2:	4b25      	ldr	r3, [pc, #148]	@ (800ad88 <Prompt+0x440>)
 800acf4:	4413      	add	r3, r2
 800acf6:	4a3a      	ldr	r2, [pc, #232]	@ (800ade0 <Prompt+0x498>)
 800acf8:	6810      	ldr	r0, [r2, #0]
 800acfa:	6018      	str	r0, [r3, #0]
 800acfc:	7912      	ldrb	r2, [r2, #4]
 800acfe:	711a      	strb	r2, [r3, #4]
#endif
#ifndef newpin
					IP16 ? strcat(buff_transmit, "") : strcat(buff_transmit, "A0 ");
 800ad00:	2101      	movs	r1, #1
 800ad02:	482f      	ldr	r0, [pc, #188]	@ (800adc0 <Prompt+0x478>)
 800ad04:	f003 f82e 	bl	800dd64 <HAL_GPIO_ReadPin>
 800ad08:	4603      	mov	r3, r0
 800ad0a:	2b00      	cmp	r3, #0
 800ad0c:	d109      	bne.n	800ad22 <Prompt+0x3da>
 800ad0e:	481e      	ldr	r0, [pc, #120]	@ (800ad88 <Prompt+0x440>)
 800ad10:	f7f5 faae 	bl	8000270 <strlen>
 800ad14:	4603      	mov	r3, r0
 800ad16:	461a      	mov	r2, r3
 800ad18:	4b1b      	ldr	r3, [pc, #108]	@ (800ad88 <Prompt+0x440>)
 800ad1a:	4413      	add	r3, r2
 800ad1c:	4a31      	ldr	r2, [pc, #196]	@ (800ade4 <Prompt+0x49c>)
 800ad1e:	6810      	ldr	r0, [r2, #0]
 800ad20:	6018      	str	r0, [r3, #0]
					IP17 ? strcat(buff_transmit, "") : strcat(buff_transmit, "A1 ");
 800ad22:	2102      	movs	r1, #2
 800ad24:	4826      	ldr	r0, [pc, #152]	@ (800adc0 <Prompt+0x478>)
 800ad26:	f003 f81d 	bl	800dd64 <HAL_GPIO_ReadPin>
 800ad2a:	4603      	mov	r3, r0
 800ad2c:	2b00      	cmp	r3, #0
 800ad2e:	d109      	bne.n	800ad44 <Prompt+0x3fc>
 800ad30:	4815      	ldr	r0, [pc, #84]	@ (800ad88 <Prompt+0x440>)
 800ad32:	f7f5 fa9d 	bl	8000270 <strlen>
 800ad36:	4603      	mov	r3, r0
 800ad38:	461a      	mov	r2, r3
 800ad3a:	4b13      	ldr	r3, [pc, #76]	@ (800ad88 <Prompt+0x440>)
 800ad3c:	4413      	add	r3, r2
 800ad3e:	4a2a      	ldr	r2, [pc, #168]	@ (800ade8 <Prompt+0x4a0>)
 800ad40:	6810      	ldr	r0, [r2, #0]
 800ad42:	6018      	str	r0, [r3, #0]
					IP18 ? strcat(buff_transmit, "") : strcat(buff_transmit, "A2 ");
 800ad44:	2104      	movs	r1, #4
 800ad46:	481e      	ldr	r0, [pc, #120]	@ (800adc0 <Prompt+0x478>)
 800ad48:	f003 f80c 	bl	800dd64 <HAL_GPIO_ReadPin>
 800ad4c:	4603      	mov	r3, r0
 800ad4e:	2b00      	cmp	r3, #0
 800ad50:	d109      	bne.n	800ad66 <Prompt+0x41e>
 800ad52:	480d      	ldr	r0, [pc, #52]	@ (800ad88 <Prompt+0x440>)
 800ad54:	f7f5 fa8c 	bl	8000270 <strlen>
 800ad58:	4603      	mov	r3, r0
 800ad5a:	461a      	mov	r2, r3
 800ad5c:	4b0a      	ldr	r3, [pc, #40]	@ (800ad88 <Prompt+0x440>)
 800ad5e:	4413      	add	r3, r2
 800ad60:	4a22      	ldr	r2, [pc, #136]	@ (800adec <Prompt+0x4a4>)
 800ad62:	6810      	ldr	r0, [r2, #0]
 800ad64:	6018      	str	r0, [r3, #0]
					IP19 ? strcat(buff_transmit, "") : strcat(buff_transmit, "A3 ");
 800ad66:	2108      	movs	r1, #8
 800ad68:	4815      	ldr	r0, [pc, #84]	@ (800adc0 <Prompt+0x478>)
 800ad6a:	f002 fffb 	bl	800dd64 <HAL_GPIO_ReadPin>
 800ad6e:	4603      	mov	r3, r0
 800ad70:	2b00      	cmp	r3, #0
 800ad72:	d140      	bne.n	800adf6 <Prompt+0x4ae>
 800ad74:	4804      	ldr	r0, [pc, #16]	@ (800ad88 <Prompt+0x440>)
 800ad76:	f7f5 fa7b 	bl	8000270 <strlen>
 800ad7a:	4603      	mov	r3, r0
 800ad7c:	461a      	mov	r2, r3
 800ad7e:	4b02      	ldr	r3, [pc, #8]	@ (800ad88 <Prompt+0x440>)
 800ad80:	4413      	add	r3, r2
 800ad82:	e035      	b.n	800adf0 <Prompt+0x4a8>
 800ad84:	08021ad4 	.word	0x08021ad4
 800ad88:	20009a84 	.word	0x20009a84
 800ad8c:	40021010 	.word	0x40021010
 800ad90:	08021ad8 	.word	0x08021ad8
 800ad94:	40021000 	.word	0x40021000
 800ad98:	08021adc 	.word	0x08021adc
 800ad9c:	08021ae0 	.word	0x08021ae0
 800ada0:	08021ae4 	.word	0x08021ae4
 800ada4:	08021ae8 	.word	0x08021ae8
 800ada8:	40020400 	.word	0x40020400
 800adac:	08021aec 	.word	0x08021aec
 800adb0:	08021af0 	.word	0x08021af0
 800adb4:	40020c00 	.word	0x40020c00
 800adb8:	08021af4 	.word	0x08021af4
 800adbc:	08021af8 	.word	0x08021af8
 800adc0:	40020800 	.word	0x40020800
 800adc4:	08021afc 	.word	0x08021afc
 800adc8:	40020000 	.word	0x40020000
 800adcc:	08021b00 	.word	0x08021b00
 800add0:	08021b08 	.word	0x08021b08
 800add4:	08021b10 	.word	0x08021b10
 800add8:	08021b18 	.word	0x08021b18
 800addc:	08021b20 	.word	0x08021b20
 800ade0:	08021b28 	.word	0x08021b28
 800ade4:	08021b30 	.word	0x08021b30
 800ade8:	08021b34 	.word	0x08021b34
 800adec:	08021b38 	.word	0x08021b38
 800adf0:	4aba      	ldr	r2, [pc, #744]	@ (800b0dc <Prompt+0x794>)
 800adf2:	6810      	ldr	r0, [r2, #0]
 800adf4:	6018      	str	r0, [r3, #0]
					IP20 ? strcat(buff_transmit, "") : strcat(buff_transmit, "A4 ");
 800adf6:	2110      	movs	r1, #16
 800adf8:	48b9      	ldr	r0, [pc, #740]	@ (800b0e0 <Prompt+0x798>)
 800adfa:	f002 ffb3 	bl	800dd64 <HAL_GPIO_ReadPin>
 800adfe:	4603      	mov	r3, r0
 800ae00:	2b00      	cmp	r3, #0
 800ae02:	d109      	bne.n	800ae18 <Prompt+0x4d0>
 800ae04:	48b7      	ldr	r0, [pc, #732]	@ (800b0e4 <Prompt+0x79c>)
 800ae06:	f7f5 fa33 	bl	8000270 <strlen>
 800ae0a:	4603      	mov	r3, r0
 800ae0c:	461a      	mov	r2, r3
 800ae0e:	4bb5      	ldr	r3, [pc, #724]	@ (800b0e4 <Prompt+0x79c>)
 800ae10:	4413      	add	r3, r2
 800ae12:	4ab5      	ldr	r2, [pc, #724]	@ (800b0e8 <Prompt+0x7a0>)
 800ae14:	6810      	ldr	r0, [r2, #0]
 800ae16:	6018      	str	r0, [r3, #0]
					IP21 ? strcat(buff_transmit, "") : strcat(buff_transmit, "A5");
 800ae18:	2120      	movs	r1, #32
 800ae1a:	48b1      	ldr	r0, [pc, #708]	@ (800b0e0 <Prompt+0x798>)
 800ae1c:	f002 ffa2 	bl	800dd64 <HAL_GPIO_ReadPin>
 800ae20:	4603      	mov	r3, r0
 800ae22:	2b00      	cmp	r3, #0
 800ae24:	d10b      	bne.n	800ae3e <Prompt+0x4f6>
 800ae26:	48af      	ldr	r0, [pc, #700]	@ (800b0e4 <Prompt+0x79c>)
 800ae28:	f7f5 fa22 	bl	8000270 <strlen>
 800ae2c:	4603      	mov	r3, r0
 800ae2e:	461a      	mov	r2, r3
 800ae30:	4bac      	ldr	r3, [pc, #688]	@ (800b0e4 <Prompt+0x79c>)
 800ae32:	4413      	add	r3, r2
 800ae34:	4aad      	ldr	r2, [pc, #692]	@ (800b0ec <Prompt+0x7a4>)
 800ae36:	8811      	ldrh	r1, [r2, #0]
 800ae38:	7892      	ldrb	r2, [r2, #2]
 800ae3a:	8019      	strh	r1, [r3, #0]
 800ae3c:	709a      	strb	r2, [r3, #2]
#endif
#ifdef mainboard
					Mux1 ? strcat(buff_transmit, "") : strcat(buff_transmit, "M1 ");
 800ae3e:	4bac      	ldr	r3, [pc, #688]	@ (800b0f0 <Prompt+0x7a8>)
 800ae40:	f893 3020 	ldrb.w	r3, [r3, #32]
 800ae44:	f003 0301 	and.w	r3, r3, #1
 800ae48:	b2db      	uxtb	r3, r3
 800ae4a:	2b00      	cmp	r3, #0
 800ae4c:	d109      	bne.n	800ae62 <Prompt+0x51a>
 800ae4e:	48a5      	ldr	r0, [pc, #660]	@ (800b0e4 <Prompt+0x79c>)
 800ae50:	f7f5 fa0e 	bl	8000270 <strlen>
 800ae54:	4603      	mov	r3, r0
 800ae56:	461a      	mov	r2, r3
 800ae58:	4ba2      	ldr	r3, [pc, #648]	@ (800b0e4 <Prompt+0x79c>)
 800ae5a:	4413      	add	r3, r2
 800ae5c:	4aa5      	ldr	r2, [pc, #660]	@ (800b0f4 <Prompt+0x7ac>)
 800ae5e:	6810      	ldr	r0, [r2, #0]
 800ae60:	6018      	str	r0, [r3, #0]
					Mux2 ? strcat(buff_transmit, "") : strcat(buff_transmit, "M2 ");
 800ae62:	4ba3      	ldr	r3, [pc, #652]	@ (800b0f0 <Prompt+0x7a8>)
 800ae64:	f893 3020 	ldrb.w	r3, [r3, #32]
 800ae68:	f003 0302 	and.w	r3, r3, #2
 800ae6c:	b2db      	uxtb	r3, r3
 800ae6e:	2b00      	cmp	r3, #0
 800ae70:	d109      	bne.n	800ae86 <Prompt+0x53e>
 800ae72:	489c      	ldr	r0, [pc, #624]	@ (800b0e4 <Prompt+0x79c>)
 800ae74:	f7f5 f9fc 	bl	8000270 <strlen>
 800ae78:	4603      	mov	r3, r0
 800ae7a:	461a      	mov	r2, r3
 800ae7c:	4b99      	ldr	r3, [pc, #612]	@ (800b0e4 <Prompt+0x79c>)
 800ae7e:	4413      	add	r3, r2
 800ae80:	4a9d      	ldr	r2, [pc, #628]	@ (800b0f8 <Prompt+0x7b0>)
 800ae82:	6810      	ldr	r0, [r2, #0]
 800ae84:	6018      	str	r0, [r3, #0]
					Mux3 ? strcat(buff_transmit, "") : strcat(buff_transmit, "M3 ");
 800ae86:	4b9a      	ldr	r3, [pc, #616]	@ (800b0f0 <Prompt+0x7a8>)
 800ae88:	f893 3020 	ldrb.w	r3, [r3, #32]
 800ae8c:	f003 0304 	and.w	r3, r3, #4
 800ae90:	b2db      	uxtb	r3, r3
 800ae92:	2b00      	cmp	r3, #0
 800ae94:	d109      	bne.n	800aeaa <Prompt+0x562>
 800ae96:	4893      	ldr	r0, [pc, #588]	@ (800b0e4 <Prompt+0x79c>)
 800ae98:	f7f5 f9ea 	bl	8000270 <strlen>
 800ae9c:	4603      	mov	r3, r0
 800ae9e:	461a      	mov	r2, r3
 800aea0:	4b90      	ldr	r3, [pc, #576]	@ (800b0e4 <Prompt+0x79c>)
 800aea2:	4413      	add	r3, r2
 800aea4:	4a95      	ldr	r2, [pc, #596]	@ (800b0fc <Prompt+0x7b4>)
 800aea6:	6810      	ldr	r0, [r2, #0]
 800aea8:	6018      	str	r0, [r3, #0]
					Mux4 ? strcat(buff_transmit, "") : strcat(buff_transmit, "M4 ");
 800aeaa:	4b91      	ldr	r3, [pc, #580]	@ (800b0f0 <Prompt+0x7a8>)
 800aeac:	f893 3020 	ldrb.w	r3, [r3, #32]
 800aeb0:	f003 0308 	and.w	r3, r3, #8
 800aeb4:	b2db      	uxtb	r3, r3
 800aeb6:	2b00      	cmp	r3, #0
 800aeb8:	d109      	bne.n	800aece <Prompt+0x586>
 800aeba:	488a      	ldr	r0, [pc, #552]	@ (800b0e4 <Prompt+0x79c>)
 800aebc:	f7f5 f9d8 	bl	8000270 <strlen>
 800aec0:	4603      	mov	r3, r0
 800aec2:	461a      	mov	r2, r3
 800aec4:	4b87      	ldr	r3, [pc, #540]	@ (800b0e4 <Prompt+0x79c>)
 800aec6:	4413      	add	r3, r2
 800aec8:	4a8d      	ldr	r2, [pc, #564]	@ (800b100 <Prompt+0x7b8>)
 800aeca:	6810      	ldr	r0, [r2, #0]
 800aecc:	6018      	str	r0, [r3, #0]
					Mux5 ? strcat(buff_transmit, "") : strcat(buff_transmit, "M5 ");
 800aece:	4b88      	ldr	r3, [pc, #544]	@ (800b0f0 <Prompt+0x7a8>)
 800aed0:	f893 3020 	ldrb.w	r3, [r3, #32]
 800aed4:	f003 0310 	and.w	r3, r3, #16
 800aed8:	b2db      	uxtb	r3, r3
 800aeda:	2b00      	cmp	r3, #0
 800aedc:	d109      	bne.n	800aef2 <Prompt+0x5aa>
 800aede:	4881      	ldr	r0, [pc, #516]	@ (800b0e4 <Prompt+0x79c>)
 800aee0:	f7f5 f9c6 	bl	8000270 <strlen>
 800aee4:	4603      	mov	r3, r0
 800aee6:	461a      	mov	r2, r3
 800aee8:	4b7e      	ldr	r3, [pc, #504]	@ (800b0e4 <Prompt+0x79c>)
 800aeea:	4413      	add	r3, r2
 800aeec:	4a85      	ldr	r2, [pc, #532]	@ (800b104 <Prompt+0x7bc>)
 800aeee:	6810      	ldr	r0, [r2, #0]
 800aef0:	6018      	str	r0, [r3, #0]
					Mux6 ? strcat(buff_transmit, "") : strcat(buff_transmit, "M6 ");
 800aef2:	4b7f      	ldr	r3, [pc, #508]	@ (800b0f0 <Prompt+0x7a8>)
 800aef4:	f893 3020 	ldrb.w	r3, [r3, #32]
 800aef8:	f003 0320 	and.w	r3, r3, #32
 800aefc:	b2db      	uxtb	r3, r3
 800aefe:	2b00      	cmp	r3, #0
 800af00:	d109      	bne.n	800af16 <Prompt+0x5ce>
 800af02:	4878      	ldr	r0, [pc, #480]	@ (800b0e4 <Prompt+0x79c>)
 800af04:	f7f5 f9b4 	bl	8000270 <strlen>
 800af08:	4603      	mov	r3, r0
 800af0a:	461a      	mov	r2, r3
 800af0c:	4b75      	ldr	r3, [pc, #468]	@ (800b0e4 <Prompt+0x79c>)
 800af0e:	4413      	add	r3, r2
 800af10:	4a7d      	ldr	r2, [pc, #500]	@ (800b108 <Prompt+0x7c0>)
 800af12:	6810      	ldr	r0, [r2, #0]
 800af14:	6018      	str	r0, [r3, #0]
					Mux7 ? strcat(buff_transmit, "") : strcat(buff_transmit, "M7 ");
 800af16:	4b76      	ldr	r3, [pc, #472]	@ (800b0f0 <Prompt+0x7a8>)
 800af18:	f893 3020 	ldrb.w	r3, [r3, #32]
 800af1c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800af20:	b2db      	uxtb	r3, r3
 800af22:	2b00      	cmp	r3, #0
 800af24:	d109      	bne.n	800af3a <Prompt+0x5f2>
 800af26:	486f      	ldr	r0, [pc, #444]	@ (800b0e4 <Prompt+0x79c>)
 800af28:	f7f5 f9a2 	bl	8000270 <strlen>
 800af2c:	4603      	mov	r3, r0
 800af2e:	461a      	mov	r2, r3
 800af30:	4b6c      	ldr	r3, [pc, #432]	@ (800b0e4 <Prompt+0x79c>)
 800af32:	4413      	add	r3, r2
 800af34:	4a75      	ldr	r2, [pc, #468]	@ (800b10c <Prompt+0x7c4>)
 800af36:	6810      	ldr	r0, [r2, #0]
 800af38:	6018      	str	r0, [r3, #0]
					Mux8 ? strcat(buff_transmit, "") : strcat(buff_transmit, "M8");
 800af3a:	4b6d      	ldr	r3, [pc, #436]	@ (800b0f0 <Prompt+0x7a8>)
 800af3c:	f893 3020 	ldrb.w	r3, [r3, #32]
 800af40:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800af44:	b2db      	uxtb	r3, r3
 800af46:	2b00      	cmp	r3, #0
 800af48:	d10b      	bne.n	800af62 <Prompt+0x61a>
 800af4a:	4866      	ldr	r0, [pc, #408]	@ (800b0e4 <Prompt+0x79c>)
 800af4c:	f7f5 f990 	bl	8000270 <strlen>
 800af50:	4603      	mov	r3, r0
 800af52:	461a      	mov	r2, r3
 800af54:	4b63      	ldr	r3, [pc, #396]	@ (800b0e4 <Prompt+0x79c>)
 800af56:	4413      	add	r3, r2
 800af58:	4a6d      	ldr	r2, [pc, #436]	@ (800b110 <Prompt+0x7c8>)
 800af5a:	8811      	ldrh	r1, [r2, #0]
 800af5c:	7892      	ldrb	r2, [r2, #2]
 800af5e:	8019      	strh	r1, [r3, #0]
 800af60:	709a      	strb	r2, [r3, #2]
#endif
					UART_Send();
 800af62:	f7ff fcdb 	bl	800a91c <UART_Send>
					sprintf(buff_transmit,"\n");
 800af66:	496b      	ldr	r1, [pc, #428]	@ (800b114 <Prompt+0x7cc>)
 800af68:	485e      	ldr	r0, [pc, #376]	@ (800b0e4 <Prompt+0x79c>)
 800af6a:	f012 fd6b 	bl	801da44 <siprintf>
					UART_Send();
 800af6e:	f7ff fcd5 	bl	800a91c <UART_Send>
					break;
 800af72:	e15a      	b.n	800b22a <Prompt+0x8e2>
				case HSPM:
					led3^=1;
 800af74:	4b68      	ldr	r3, [pc, #416]	@ (800b118 <Prompt+0x7d0>)
 800af76:	785b      	ldrb	r3, [r3, #1]
 800af78:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800af7c:	b2db      	uxtb	r3, r3
 800af7e:	4a66      	ldr	r2, [pc, #408]	@ (800b118 <Prompt+0x7d0>)
 800af80:	f083 0301 	eor.w	r3, r3, #1
 800af84:	b2d9      	uxtb	r1, r3
 800af86:	7853      	ldrb	r3, [r2, #1]
 800af88:	f361 13c7 	bfi	r3, r1, #7, #1
 800af8c:	7053      	strb	r3, [r2, #1]
					sprintf(buff_transmit, "HSPM mode\n");
 800af8e:	4963      	ldr	r1, [pc, #396]	@ (800b11c <Prompt+0x7d4>)
 800af90:	4854      	ldr	r0, [pc, #336]	@ (800b0e4 <Prompt+0x79c>)
 800af92:	f012 fd57 	bl	801da44 <siprintf>
					UART_Send();
 800af96:	f7ff fcc1 	bl	800a91c <UART_Send>
					sprintf(buff_transmit, "Type C to change motor direction\n");
 800af9a:	4961      	ldr	r1, [pc, #388]	@ (800b120 <Prompt+0x7d8>)
 800af9c:	4851      	ldr	r0, [pc, #324]	@ (800b0e4 <Prompt+0x79c>)
 800af9e:	f012 fd51 	bl	801da44 <siprintf>
					UART_Send();
 800afa2:	f7ff fcbb 	bl	800a91c <UART_Send>
					sprintf(buff_transmit, "Type B to exit\n");
 800afa6:	495f      	ldr	r1, [pc, #380]	@ (800b124 <Prompt+0x7dc>)
 800afa8:	484e      	ldr	r0, [pc, #312]	@ (800b0e4 <Prompt+0x79c>)
 800afaa:	f012 fd4b 	bl	801da44 <siprintf>
					UART_Send();
 800afae:	f7ff fcb5 	bl	800a91c <UART_Send>
					WriteBDC(&BDC1, 10000);
 800afb2:	f242 7110 	movw	r1, #10000	@ 0x2710
 800afb6:	485c      	ldr	r0, [pc, #368]	@ (800b128 <Prompt+0x7e0>)
 800afb8:	f7f6 f9ab 	bl	8001312 <WriteBDC>
					WriteBDC(&BDC2, 10000);
 800afbc:	f242 7110 	movw	r1, #10000	@ 0x2710
 800afc0:	485a      	ldr	r0, [pc, #360]	@ (800b12c <Prompt+0x7e4>)
 800afc2:	f7f6 f9a6 	bl	8001312 <WriteBDC>
					WriteBDC(&BDC3, 10000);
 800afc6:	f242 7110 	movw	r1, #10000	@ 0x2710
 800afca:	4859      	ldr	r0, [pc, #356]	@ (800b130 <Prompt+0x7e8>)
 800afcc:	f7f6 f9a1 	bl	8001312 <WriteBDC>
					WriteBDC(&BDC4, 10000);
 800afd0:	f242 7110 	movw	r1, #10000	@ 0x2710
 800afd4:	4857      	ldr	r0, [pc, #348]	@ (800b134 <Prompt+0x7ec>)
 800afd6:	f7f6 f99c 	bl	8001312 <WriteBDC>
					WriteBDC(&BDC5, 10000);
 800afda:	f242 7110 	movw	r1, #10000	@ 0x2710
 800afde:	4856      	ldr	r0, [pc, #344]	@ (800b138 <Prompt+0x7f0>)
 800afe0:	f7f6 f997 	bl	8001312 <WriteBDC>
					WriteBDC(&BDC6, 10000);
 800afe4:	f242 7110 	movw	r1, #10000	@ 0x2710
 800afe8:	4854      	ldr	r0, [pc, #336]	@ (800b13c <Prompt+0x7f4>)
 800afea:	f7f6 f992 	bl	8001312 <WriteBDC>
					WriteBDC(&BDC7, 10000);
 800afee:	f242 7110 	movw	r1, #10000	@ 0x2710
 800aff2:	4853      	ldr	r0, [pc, #332]	@ (800b140 <Prompt+0x7f8>)
 800aff4:	f7f6 f98d 	bl	8001312 <WriteBDC>
					WriteBDC(&BDC8, 10000);
 800aff8:	f242 7110 	movw	r1, #10000	@ 0x2710
 800affc:	4851      	ldr	r0, [pc, #324]	@ (800b144 <Prompt+0x7fc>)
 800affe:	f7f6 f988 	bl	8001312 <WriteBDC>
					break;
 800b002:	e112      	b.n	800b22a <Prompt+0x8e2>
				case ENCODER:
	#ifdef newpin
					sprintf(buff_transmit, "QEI1: %d, QEI3: %d, QEI4: %d, QEI8: %d\n",QEIRead(QEI1),QEIRead(QEI3), QEIRead(QEI4), QEIRead(QEI6));
	#else
					sprintf(buff_transmit, "QEI1: %d, QEI4: %d, QEI8: %d\n",QEIRead(QEI1), QEIRead(QEI4), QEIRead(QEI6));
 800b004:	2001      	movs	r0, #1
 800b006:	f7f7 f82f 	bl	8002068 <QEIRead>
 800b00a:	4604      	mov	r4, r0
 800b00c:	2004      	movs	r0, #4
 800b00e:	f7f7 f82b 	bl	8002068 <QEIRead>
 800b012:	4605      	mov	r5, r0
 800b014:	2006      	movs	r0, #6
 800b016:	f7f7 f827 	bl	8002068 <QEIRead>
 800b01a:	4603      	mov	r3, r0
 800b01c:	9300      	str	r3, [sp, #0]
 800b01e:	462b      	mov	r3, r5
 800b020:	4622      	mov	r2, r4
 800b022:	4949      	ldr	r1, [pc, #292]	@ (800b148 <Prompt+0x800>)
 800b024:	482f      	ldr	r0, [pc, #188]	@ (800b0e4 <Prompt+0x79c>)
 800b026:	f012 fd0d 	bl	801da44 <siprintf>
	#endif
					UART_Send();
 800b02a:	f7ff fc77 	bl	800a91c <UART_Send>
					break;
 800b02e:	e0fc      	b.n	800b22a <Prompt+0x8e2>
				case UART:
					sprintf(buff_transmit, "Please select UART\n");
 800b030:	4946      	ldr	r1, [pc, #280]	@ (800b14c <Prompt+0x804>)
 800b032:	482c      	ldr	r0, [pc, #176]	@ (800b0e4 <Prompt+0x79c>)
 800b034:	f012 fd06 	bl	801da44 <siprintf>
					UART_Send();
 800b038:	f7ff fc70 	bl	800a91c <UART_Send>
	#ifdef newpin
					sprintf(buff_transmit, "1) UART1\n");
					UART_Send();
	#endif
					sprintf(buff_transmit, "2) UART2\n");
 800b03c:	4944      	ldr	r1, [pc, #272]	@ (800b150 <Prompt+0x808>)
 800b03e:	4829      	ldr	r0, [pc, #164]	@ (800b0e4 <Prompt+0x79c>)
 800b040:	f012 fd00 	bl	801da44 <siprintf>
					UART_Send();
 800b044:	f7ff fc6a 	bl	800a91c <UART_Send>
					sprintf(buff_transmit, "3) UART3\n");
 800b048:	4942      	ldr	r1, [pc, #264]	@ (800b154 <Prompt+0x80c>)
 800b04a:	4826      	ldr	r0, [pc, #152]	@ (800b0e4 <Prompt+0x79c>)
 800b04c:	f012 fcfa 	bl	801da44 <siprintf>
					UART_Send();
 800b050:	f7ff fc64 	bl	800a91c <UART_Send>
					sprintf(buff_transmit, "4) UART4\n");
 800b054:	4940      	ldr	r1, [pc, #256]	@ (800b158 <Prompt+0x810>)
 800b056:	4823      	ldr	r0, [pc, #140]	@ (800b0e4 <Prompt+0x79c>)
 800b058:	f012 fcf4 	bl	801da44 <siprintf>
					UART_Send();
 800b05c:	f7ff fc5e 	bl	800a91c <UART_Send>
					sprintf(buff_transmit, "5) UART5\n");
 800b060:	493e      	ldr	r1, [pc, #248]	@ (800b15c <Prompt+0x814>)
 800b062:	4820      	ldr	r0, [pc, #128]	@ (800b0e4 <Prompt+0x79c>)
 800b064:	f012 fcee 	bl	801da44 <siprintf>
					UART_Send();
 800b068:	f7ff fc58 	bl	800a91c <UART_Send>
					sprintf(buff_transmit, "Type B to exit\n");
 800b06c:	492d      	ldr	r1, [pc, #180]	@ (800b124 <Prompt+0x7dc>)
 800b06e:	481d      	ldr	r0, [pc, #116]	@ (800b0e4 <Prompt+0x79c>)
 800b070:	f012 fce8 	bl	801da44 <siprintf>
					UART_Send();
 800b074:	f7ff fc52 	bl	800a91c <UART_Send>
					break;
 800b078:	e0d7      	b.n	800b22a <Prompt+0x8e2>
				case I2C:
					sprintf(buff_transmit, "Please select I2C test\n");
 800b07a:	4939      	ldr	r1, [pc, #228]	@ (800b160 <Prompt+0x818>)
 800b07c:	4819      	ldr	r0, [pc, #100]	@ (800b0e4 <Prompt+0x79c>)
 800b07e:	f012 fce1 	bl	801da44 <siprintf>
					UART_Send();
 800b082:	f7ff fc4b 	bl	800a91c <UART_Send>
					sprintf(buff_transmit, "1) I2C1 to I2C2\n");
 800b086:	4937      	ldr	r1, [pc, #220]	@ (800b164 <Prompt+0x81c>)
 800b088:	4816      	ldr	r0, [pc, #88]	@ (800b0e4 <Prompt+0x79c>)
 800b08a:	f012 fcdb 	bl	801da44 <siprintf>
					UART_Send();
 800b08e:	f7ff fc45 	bl	800a91c <UART_Send>
					sprintf(buff_transmit, "2) I2C2 to I2C1\n");
 800b092:	4935      	ldr	r1, [pc, #212]	@ (800b168 <Prompt+0x820>)
 800b094:	4813      	ldr	r0, [pc, #76]	@ (800b0e4 <Prompt+0x79c>)
 800b096:	f012 fcd5 	bl	801da44 <siprintf>
					UART_Send();
 800b09a:	f7ff fc3f 	bl	800a91c <UART_Send>
#ifndef newboard
					sprintf(buff_transmit, "3) I2C1 to I2C3\n");
 800b09e:	4933      	ldr	r1, [pc, #204]	@ (800b16c <Prompt+0x824>)
 800b0a0:	4810      	ldr	r0, [pc, #64]	@ (800b0e4 <Prompt+0x79c>)
 800b0a2:	f012 fccf 	bl	801da44 <siprintf>
					UART_Send();
 800b0a6:	f7ff fc39 	bl	800a91c <UART_Send>
					sprintf(buff_transmit, "4) I2C3 to I2C1\n");
 800b0aa:	4931      	ldr	r1, [pc, #196]	@ (800b170 <Prompt+0x828>)
 800b0ac:	480d      	ldr	r0, [pc, #52]	@ (800b0e4 <Prompt+0x79c>)
 800b0ae:	f012 fcc9 	bl	801da44 <siprintf>
					UART_Send();
 800b0b2:	f7ff fc33 	bl	800a91c <UART_Send>
					sprintf(buff_transmit, "5) I2C2 to I2C3\n");
 800b0b6:	492f      	ldr	r1, [pc, #188]	@ (800b174 <Prompt+0x82c>)
 800b0b8:	480a      	ldr	r0, [pc, #40]	@ (800b0e4 <Prompt+0x79c>)
 800b0ba:	f012 fcc3 	bl	801da44 <siprintf>
					UART_Send();
 800b0be:	f7ff fc2d 	bl	800a91c <UART_Send>
					sprintf(buff_transmit, "6) I2C3 to I2C2\n");
 800b0c2:	492d      	ldr	r1, [pc, #180]	@ (800b178 <Prompt+0x830>)
 800b0c4:	4807      	ldr	r0, [pc, #28]	@ (800b0e4 <Prompt+0x79c>)
 800b0c6:	f012 fcbd 	bl	801da44 <siprintf>
					UART_Send();
 800b0ca:	f7ff fc27 	bl	800a91c <UART_Send>
#endif
					sprintf(buff_transmit, "Type B to exit\n");
 800b0ce:	4915      	ldr	r1, [pc, #84]	@ (800b124 <Prompt+0x7dc>)
 800b0d0:	4804      	ldr	r0, [pc, #16]	@ (800b0e4 <Prompt+0x79c>)
 800b0d2:	f012 fcb7 	bl	801da44 <siprintf>
					UART_Send();
 800b0d6:	f7ff fc21 	bl	800a91c <UART_Send>
					break;
 800b0da:	e0a6      	b.n	800b22a <Prompt+0x8e2>
 800b0dc:	08021b3c 	.word	0x08021b3c
 800b0e0:	40020800 	.word	0x40020800
 800b0e4:	20009a84 	.word	0x20009a84
 800b0e8:	08021b40 	.word	0x08021b40
 800b0ec:	08021b44 	.word	0x08021b44
 800b0f0:	2000906c 	.word	0x2000906c
 800b0f4:	08021b48 	.word	0x08021b48
 800b0f8:	08021b4c 	.word	0x08021b4c
 800b0fc:	08021b50 	.word	0x08021b50
 800b100:	08021b54 	.word	0x08021b54
 800b104:	08021b58 	.word	0x08021b58
 800b108:	08021b5c 	.word	0x08021b5c
 800b10c:	08021b60 	.word	0x08021b60
 800b110:	08021b64 	.word	0x08021b64
 800b114:	08021b68 	.word	0x08021b68
 800b118:	40020814 	.word	0x40020814
 800b11c:	08021b6c 	.word	0x08021b6c
 800b120:	08021b78 	.word	0x08021b78
 800b124:	08021b9c 	.word	0x08021b9c
 800b128:	20009e80 	.word	0x20009e80
 800b12c:	20008cec 	.word	0x20008cec
 800b130:	200089a8 	.word	0x200089a8
 800b134:	2000910c 	.word	0x2000910c
 800b138:	20009e5c 	.word	0x20009e5c
 800b13c:	20009168 	.word	0x20009168
 800b140:	2000918c 	.word	0x2000918c
 800b144:	20008cb4 	.word	0x20008cb4
 800b148:	08021bac 	.word	0x08021bac
 800b14c:	08021bcc 	.word	0x08021bcc
 800b150:	08021be0 	.word	0x08021be0
 800b154:	08021bec 	.word	0x08021bec
 800b158:	08021bf8 	.word	0x08021bf8
 800b15c:	08021c04 	.word	0x08021c04
 800b160:	08021c10 	.word	0x08021c10
 800b164:	08021c28 	.word	0x08021c28
 800b168:	08021c3c 	.word	0x08021c3c
 800b16c:	08021c50 	.word	0x08021c50
 800b170:	08021c64 	.word	0x08021c64
 800b174:	08021c78 	.word	0x08021c78
 800b178:	08021c8c 	.word	0x08021c8c
				case CAN:
					sprintf(buff_transmit, "Please select CAN test\n");
 800b17c:	492f      	ldr	r1, [pc, #188]	@ (800b23c <Prompt+0x8f4>)
 800b17e:	4830      	ldr	r0, [pc, #192]	@ (800b240 <Prompt+0x8f8>)
 800b180:	f012 fc60 	bl	801da44 <siprintf>
					UART_Send();
 800b184:	f7ff fbca 	bl	800a91c <UART_Send>
					sprintf(buff_transmit, "1) CAN1 to CAN2\n");
 800b188:	492e      	ldr	r1, [pc, #184]	@ (800b244 <Prompt+0x8fc>)
 800b18a:	482d      	ldr	r0, [pc, #180]	@ (800b240 <Prompt+0x8f8>)
 800b18c:	f012 fc5a 	bl	801da44 <siprintf>
					UART_Send();
 800b190:	f7ff fbc4 	bl	800a91c <UART_Send>
					sprintf(buff_transmit, "2) CAN2 to CAN1\n");
 800b194:	492c      	ldr	r1, [pc, #176]	@ (800b248 <Prompt+0x900>)
 800b196:	482a      	ldr	r0, [pc, #168]	@ (800b240 <Prompt+0x8f8>)
 800b198:	f012 fc54 	bl	801da44 <siprintf>
					UART_Send();
 800b19c:	f7ff fbbe 	bl	800a91c <UART_Send>
					sprintf(buff_transmit, "Type B to exit\n");
 800b1a0:	492a      	ldr	r1, [pc, #168]	@ (800b24c <Prompt+0x904>)
 800b1a2:	4827      	ldr	r0, [pc, #156]	@ (800b240 <Prompt+0x8f8>)
 800b1a4:	f012 fc4e 	bl	801da44 <siprintf>
					UART_Send();
 800b1a8:	f7ff fbb8 	bl	800a91c <UART_Send>

					break;
 800b1ac:	e03d      	b.n	800b22a <Prompt+0x8e2>
				case CHANGEUART:
					sprintf(buff_transmit, "Type C to continue\n");
 800b1ae:	4928      	ldr	r1, [pc, #160]	@ (800b250 <Prompt+0x908>)
 800b1b0:	4823      	ldr	r0, [pc, #140]	@ (800b240 <Prompt+0x8f8>)
 800b1b2:	f012 fc47 	bl	801da44 <siprintf>
					UART_Send();
 800b1b6:	f7ff fbb1 	bl	800a91c <UART_Send>
					break;
 800b1ba:	e036      	b.n	800b22a <Prompt+0x8e2>

				case USB:
					sprintf(buff_transmit, "On your PC check Serial Studio for message\n");
 800b1bc:	4925      	ldr	r1, [pc, #148]	@ (800b254 <Prompt+0x90c>)
 800b1be:	4820      	ldr	r0, [pc, #128]	@ (800b240 <Prompt+0x8f8>)
 800b1c0:	f012 fc40 	bl	801da44 <siprintf>
					UART_Send();
 800b1c4:	f7ff fbaa 	bl	800a91c <UART_Send>
					sprintf(buff_transmit, "Then type C to continue\n");
 800b1c8:	4923      	ldr	r1, [pc, #140]	@ (800b258 <Prompt+0x910>)
 800b1ca:	481d      	ldr	r0, [pc, #116]	@ (800b240 <Prompt+0x8f8>)
 800b1cc:	f012 fc3a 	bl	801da44 <siprintf>
					UART_Send();
 800b1d0:	f7ff fba4 	bl	800a91c <UART_Send>
					sprintf(buff_transmit, "Type B to exit\n");
 800b1d4:	491d      	ldr	r1, [pc, #116]	@ (800b24c <Prompt+0x904>)
 800b1d6:	481a      	ldr	r0, [pc, #104]	@ (800b240 <Prompt+0x8f8>)
 800b1d8:	f012 fc34 	bl	801da44 <siprintf>
					UART_Send();
 800b1dc:	f7ff fb9e 	bl	800a91c <UART_Send>
					break;
 800b1e0:	e023      	b.n	800b22a <Prompt+0x8e2>

				case ROBOMASTER:
					sprintf(buff_transmit, "Please test the CAN bus\n");
 800b1e2:	491e      	ldr	r1, [pc, #120]	@ (800b25c <Prompt+0x914>)
 800b1e4:	4816      	ldr	r0, [pc, #88]	@ (800b240 <Prompt+0x8f8>)
 800b1e6:	f012 fc2d 	bl	801da44 <siprintf>
					UART_Send();
 800b1ea:	f7ff fb97 	bl	800a91c <UART_Send>
					sprintf(buff_transmit, "before attempting the Robomaster test\n");
 800b1ee:	491c      	ldr	r1, [pc, #112]	@ (800b260 <Prompt+0x918>)
 800b1f0:	4813      	ldr	r0, [pc, #76]	@ (800b240 <Prompt+0x8f8>)
 800b1f2:	f012 fc27 	bl	801da44 <siprintf>
					UART_Send();
 800b1f6:	f7ff fb91 	bl	800a91c <UART_Send>
					sprintf(buff_transmit, "Select Motor Type:\n");
 800b1fa:	491a      	ldr	r1, [pc, #104]	@ (800b264 <Prompt+0x91c>)
 800b1fc:	4810      	ldr	r0, [pc, #64]	@ (800b240 <Prompt+0x8f8>)
 800b1fe:	f012 fc21 	bl	801da44 <siprintf>
					UART_Send();
 800b202:	f7ff fb8b 	bl	800a91c <UART_Send>
					sprintf(buff_transmit, "1) C610\n");
 800b206:	4918      	ldr	r1, [pc, #96]	@ (800b268 <Prompt+0x920>)
 800b208:	480d      	ldr	r0, [pc, #52]	@ (800b240 <Prompt+0x8f8>)
 800b20a:	f012 fc1b 	bl	801da44 <siprintf>
					UART_Send();
 800b20e:	f7ff fb85 	bl	800a91c <UART_Send>
					sprintf(buff_transmit, "2) C620\n");
 800b212:	4916      	ldr	r1, [pc, #88]	@ (800b26c <Prompt+0x924>)
 800b214:	480a      	ldr	r0, [pc, #40]	@ (800b240 <Prompt+0x8f8>)
 800b216:	f012 fc15 	bl	801da44 <siprintf>
					UART_Send();
 800b21a:	f7ff fb7f 	bl	800a91c <UART_Send>
					sprintf(buff_transmit, "Type B to exit\n");
 800b21e:	490b      	ldr	r1, [pc, #44]	@ (800b24c <Prompt+0x904>)
 800b220:	4807      	ldr	r0, [pc, #28]	@ (800b240 <Prompt+0x8f8>)
 800b222:	f012 fc0f 	bl	801da44 <siprintf>
					UART_Send();
 800b226:	f7ff fb79 	bl	800a91c <UART_Send>

				}

				sys.transmit = 0;
 800b22a:	4a11      	ldr	r2, [pc, #68]	@ (800b270 <Prompt+0x928>)
 800b22c:	6813      	ldr	r3, [r2, #0]
 800b22e:	f36f 0300 	bfc	r3, #0, #1
 800b232:	6013      	str	r3, [r2, #0]
			}
}
 800b234:	bf00      	nop
 800b236:	46bd      	mov	sp, r7
 800b238:	bdb0      	pop	{r4, r5, r7, pc}
 800b23a:	bf00      	nop
 800b23c:	08021ca0 	.word	0x08021ca0
 800b240:	20009a84 	.word	0x20009a84
 800b244:	08021cb8 	.word	0x08021cb8
 800b248:	08021ccc 	.word	0x08021ccc
 800b24c:	08021b9c 	.word	0x08021b9c
 800b250:	08021ce0 	.word	0x08021ce0
 800b254:	08021cf4 	.word	0x08021cf4
 800b258:	08021d20 	.word	0x08021d20
 800b25c:	08021d3c 	.word	0x08021d3c
 800b260:	08021d58 	.word	0x08021d58
 800b264:	08021d80 	.word	0x08021d80
 800b268:	08021d94 	.word	0x08021d94
 800b26c:	08021da0 	.word	0x08021da0
 800b270:	20008bf8 	.word	0x20008bf8

0800b274 <DMA1_Stream0_IRQHandler>:
//#include "adapter.h"

/*I2C*/

void DMA1_Stream0_IRQHandler(void)
{
 800b274:	b580      	push	{r7, lr}
 800b276:	af00      	add	r7, sp, #0
	HAL_DMA_IRQHandler(&hi2c1_rx_dma);
 800b278:	4802      	ldr	r0, [pc, #8]	@ (800b284 <DMA1_Stream0_IRQHandler+0x10>)
 800b27a:	f002 f857 	bl	800d32c <HAL_DMA_IRQHandler>
//	HAL_DMA_IRQHandler(&hdma_uart5_rx);

}
 800b27e:	bf00      	nop
 800b280:	bd80      	pop	{r7, pc}
 800b282:	bf00      	nop
 800b284:	20007b54 	.word	0x20007b54

0800b288 <DMA1_Stream3_IRQHandler>:

void DMA1_Stream3_IRQHandler(void)
{
 800b288:	b580      	push	{r7, lr}
 800b28a:	af00      	add	r7, sp, #0
//	HAL_DMA_IRQHandler(&hdma_usart3_rx);
	HAL_DMA_IRQHandler(&hi2c2_rx_dma);
 800b28c:	4802      	ldr	r0, [pc, #8]	@ (800b298 <DMA1_Stream3_IRQHandler+0x10>)
 800b28e:	f002 f84d 	bl	800d32c <HAL_DMA_IRQHandler>
}
 800b292:	bf00      	nop
 800b294:	bd80      	pop	{r7, pc}
 800b296:	bf00      	nop
 800b298:	20006db4 	.word	0x20006db4

0800b29c <DMA1_Stream2_IRQHandler>:

void DMA1_Stream2_IRQHandler(void)
{
 800b29c:	b580      	push	{r7, lr}
 800b29e:	af00      	add	r7, sp, #0
	HAL_DMA_IRQHandler(&hdma_uart4_rx);
 800b2a0:	4802      	ldr	r0, [pc, #8]	@ (800b2ac <DMA1_Stream2_IRQHandler+0x10>)
 800b2a2:	f002 f843 	bl	800d32c <HAL_DMA_IRQHandler>
//	HAL_DMA_IRQHandler(&hi2c2_rx_dma);
//	HAL_DMA_IRQHandler(&hi2c3_rx_dma);
}
 800b2a6:	bf00      	nop
 800b2a8:	bd80      	pop	{r7, pc}
 800b2aa:	bf00      	nop
 800b2ac:	2000614c 	.word	0x2000614c

0800b2b0 <DMA1_Stream1_IRQHandler>:

/*UART*/
void DMA1_Stream1_IRQHandler(void)
{
 800b2b0:	b580      	push	{r7, lr}
 800b2b2:	af00      	add	r7, sp, #0
	HAL_DMA_IRQHandler(&hdma_usart3_rx);
 800b2b4:	4802      	ldr	r0, [pc, #8]	@ (800b2c0 <DMA1_Stream1_IRQHandler+0x10>)
 800b2b6:	f002 f839 	bl	800d32c <HAL_DMA_IRQHandler>
}
 800b2ba:	bf00      	nop
 800b2bc:	bd80      	pop	{r7, pc}
 800b2be:	bf00      	nop
 800b2c0:	200062a0 	.word	0x200062a0

0800b2c4 <DMA1_Stream4_IRQHandler>:

void DMA1_Stream4_IRQHandler(void)
{
 800b2c4:	b580      	push	{r7, lr}
 800b2c6:	af00      	add	r7, sp, #0
	HAL_DMA_IRQHandler(&hdma_uart4_tx);
 800b2c8:	4802      	ldr	r0, [pc, #8]	@ (800b2d4 <DMA1_Stream4_IRQHandler+0x10>)
 800b2ca:	f002 f82f 	bl	800d32c <HAL_DMA_IRQHandler>
//	HAL_DMA_IRQHandler(&hdma_usart3_tx);
//	HAL_DMA_IRQHandler(&hi2c3_tx_dma);
}
 800b2ce:	bf00      	nop
 800b2d0:	bd80      	pop	{r7, pc}
 800b2d2:	bf00      	nop
 800b2d4:	200069f0 	.word	0x200069f0

0800b2d8 <DMA1_Stream5_IRQHandler>:

void DMA1_Stream5_IRQHandler(void)
{
 800b2d8:	b580      	push	{r7, lr}
 800b2da:	af00      	add	r7, sp, #0
//	HAL_DMA_IRQHandler(&hi2c1_rx_dma);
	HAL_DMA_IRQHandler(&hdma_usart2_rx);
 800b2dc:	4802      	ldr	r0, [pc, #8]	@ (800b2e8 <DMA1_Stream5_IRQHandler+0x10>)
 800b2de:	f002 f825 	bl	800d32c <HAL_DMA_IRQHandler>
}
 800b2e2:	bf00      	nop
 800b2e4:	bd80      	pop	{r7, pc}
 800b2e6:	bf00      	nop
 800b2e8:	200061ac 	.word	0x200061ac

0800b2ec <DMA1_Stream6_IRQHandler>:

void DMA1_Stream6_IRQHandler(void)
{
 800b2ec:	b580      	push	{r7, lr}
 800b2ee:	af00      	add	r7, sp, #0

//	HAL_DMA_IRQHandler(&hi2c1_tx_dma);
	HAL_DMA_IRQHandler(&hdma_usart2_tx);
 800b2f0:	4802      	ldr	r0, [pc, #8]	@ (800b2fc <DMA1_Stream6_IRQHandler+0x10>)
 800b2f2:	f002 f81b 	bl	800d32c <HAL_DMA_IRQHandler>
}
 800b2f6:	bf00      	nop
 800b2f8:	bd80      	pop	{r7, pc}
 800b2fa:	bf00      	nop
 800b2fc:	200064c8 	.word	0x200064c8

0800b300 <DMA1_Stream7_IRQHandler>:

void DMA1_Stream7_IRQHandler(void){
 800b300:	b580      	push	{r7, lr}
 800b302:	af00      	add	r7, sp, #0
//	HAL_DMA_IRQHandler(&hi2c1_tx_dma);
//	HAL_DMA_IRQHandler(&hi2c2_tx_dma);
	HAL_DMA_IRQHandler(&hdma_uart5_tx);
 800b304:	4802      	ldr	r0, [pc, #8]	@ (800b310 <DMA1_Stream7_IRQHandler+0x10>)
 800b306:	f002 f811 	bl	800d32c <HAL_DMA_IRQHandler>
}
 800b30a:	bf00      	nop
 800b30c:	bd80      	pop	{r7, pc}
 800b30e:	bf00      	nop
 800b310:	20006a50 	.word	0x20006a50

0800b314 <DMA2_Stream0_IRQHandler>:


void DMA2_Stream0_IRQHandler(void)
{
 800b314:	b480      	push	{r7}
 800b316:	af00      	add	r7, sp, #0

}
 800b318:	bf00      	nop
 800b31a:	46bd      	mov	sp, r7
 800b31c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b320:	4770      	bx	lr
	...

0800b324 <DMA2_Stream1_IRQHandler>:

void DMA2_Stream1_IRQHandler(void)
{
 800b324:	b580      	push	{r7, lr}
 800b326:	af00      	add	r7, sp, #0
	HAL_DMA_IRQHandler(&hdma_adc3);
 800b328:	4802      	ldr	r0, [pc, #8]	@ (800b334 <DMA2_Stream1_IRQHandler+0x10>)
 800b32a:	f001 ffff 	bl	800d32c <HAL_DMA_IRQHandler>
}
 800b32e:	bf00      	nop
 800b330:	bd80      	pop	{r7, pc}
 800b332:	bf00      	nop
 800b334:	20006af8 	.word	0x20006af8

0800b338 <DMA2_Stream2_IRQHandler>:

void DMA2_Stream2_IRQHandler(void)
{
 800b338:	b580      	push	{r7, lr}
 800b33a:	af00      	add	r7, sp, #0
	//	Moving_Average_Filter (&move_aveX);
	//	Moving_Average_Filter (&move_aveY);
	LaserUpdate(&X_laser, 0);
 800b33c:	2100      	movs	r1, #0
 800b33e:	4809      	ldr	r0, [pc, #36]	@ (800b364 <DMA2_Stream2_IRQHandler+0x2c>)
 800b340:	f7f9 f9c0 	bl	80046c4 <LaserUpdate>
	LaserUpdate(&Y_laser, 1);
 800b344:	2101      	movs	r1, #1
 800b346:	4808      	ldr	r0, [pc, #32]	@ (800b368 <DMA2_Stream2_IRQHandler+0x30>)
 800b348:	f7f9 f9bc 	bl	80046c4 <LaserUpdate>
	Laser(&X_laser);
 800b34c:	4805      	ldr	r0, [pc, #20]	@ (800b364 <DMA2_Stream2_IRQHandler+0x2c>)
 800b34e:	f7f9 f969 	bl	8004624 <Laser>
	Laser(&Y_laser);
 800b352:	4805      	ldr	r0, [pc, #20]	@ (800b368 <DMA2_Stream2_IRQHandler+0x30>)
 800b354:	f7f9 f966 	bl	8004624 <Laser>
	HAL_DMA_IRQHandler(&hdma_adc1);
 800b358:	4804      	ldr	r0, [pc, #16]	@ (800b36c <DMA2_Stream2_IRQHandler+0x34>)
 800b35a:	f001 ffe7 	bl	800d32c <HAL_DMA_IRQHandler>
	//	HAL_DMA_IRQHandler(&hdma_spi1_rx);
}
 800b35e:	bf00      	nop
 800b360:	bd80      	pop	{r7, pc}
 800b362:	bf00      	nop
 800b364:	20009278 	.word	0x20009278
 800b368:	20009370 	.word	0x20009370
 800b36c:	20006be8 	.word	0x20006be8

0800b370 <DMA2_Stream3_IRQHandler>:

void DMA2_Stream3_IRQHandler(void)
{
 800b370:	b580      	push	{r7, lr}
 800b372:	af00      	add	r7, sp, #0
	HAL_DMA_IRQHandler(&hdma_adc2);
 800b374:	4802      	ldr	r0, [pc, #8]	@ (800b380 <DMA2_Stream3_IRQHandler+0x10>)
 800b376:	f001 ffd9 	bl	800d32c <HAL_DMA_IRQHandler>
}
 800b37a:	bf00      	nop
 800b37c:	bd80      	pop	{r7, pc}
 800b37e:	bf00      	nop
 800b380:	20006c48 	.word	0x20006c48

0800b384 <DMA2_Stream5_IRQHandler>:

void DMA2_Stream5_IRQHandler(void)
{
 800b384:	b580      	push	{r7, lr}
 800b386:	af00      	add	r7, sp, #0
	HAL_DMA_IRQHandler(&hdma_spi1_tx);
 800b388:	4802      	ldr	r0, [pc, #8]	@ (800b394 <DMA2_Stream5_IRQHandler+0x10>)
 800b38a:	f001 ffcf 	bl	800d32c <HAL_DMA_IRQHandler>
}
 800b38e:	bf00      	nop
 800b390:	bd80      	pop	{r7, pc}
 800b392:	bf00      	nop
 800b394:	20009da4 	.word	0x20009da4

0800b398 <SysTick_Handler>:
int count = 0;
int count2 = 0;
int count3 = 0;
int _counter = 0;

void SysTick_Handler(void) {
 800b398:	b580      	push	{r7, lr}
 800b39a:	af00      	add	r7, sp, #0

	HAL_IncTick();
 800b39c:	f000 fdbe 	bl	800bf1c <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
	if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800b3a0:	f010 f9be 	bl	801b720 <xTaskGetSchedulerState>
 800b3a4:	4603      	mov	r3, r0
 800b3a6:	2b01      	cmp	r3, #1
 800b3a8:	d001      	beq.n	800b3ae <SysTick_Handler+0x16>
#endif /* INCLUDE_xTaskGetSchedulerState */
		xPortSysTickHandler();
 800b3aa:	f011 f99d 	bl	801c6e8 <xPortSysTickHandler>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
	}
#endif /* INCLUDE_xTaskGetSchedulerState */

}
 800b3ae:	bf00      	nop
 800b3b0:	bd80      	pop	{r7, pc}

0800b3b2 <NMI_Handler>:

/**
 * * @brief This function handles Non maskable interrupt.
 */
void NMI_Handler(void) {
 800b3b2:	b480      	push	{r7}
 800b3b4:	af00      	add	r7, sp, #0

}
 800b3b6:	bf00      	nop
 800b3b8:	46bd      	mov	sp, r7
 800b3ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3be:	4770      	bx	lr

0800b3c0 <HardFault_Handler>:

/**
 * @brief This function handles Hard fault interrupt.
 */
void HardFault_Handler(void) {
 800b3c0:	b480      	push	{r7}
 800b3c2:	af00      	add	r7, sp, #0

}
 800b3c4:	bf00      	nop
 800b3c6:	46bd      	mov	sp, r7
 800b3c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3cc:	4770      	bx	lr

0800b3ce <MemManage_Handler>:

/**
 * @brief This function handles Memory management fault.
 */
void MemManage_Handler(void) {
 800b3ce:	b480      	push	{r7}
 800b3d0:	af00      	add	r7, sp, #0

	while (1) {
 800b3d2:	bf00      	nop
 800b3d4:	e7fd      	b.n	800b3d2 <MemManage_Handler+0x4>

0800b3d6 <BusFault_Handler>:
}

/**
 * @brief This function handles Pre-fetch fault, memory access fault.
 */
void BusFault_Handler(void) {
 800b3d6:	b480      	push	{r7}
 800b3d8:	af00      	add	r7, sp, #0

}
 800b3da:	bf00      	nop
 800b3dc:	46bd      	mov	sp, r7
 800b3de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3e2:	4770      	bx	lr

0800b3e4 <UsageFault_Handler>:

/**
 * @brief This function handles Undefined instruction or illegal state.
 */
void UsageFault_Handler(void) {
 800b3e4:	b480      	push	{r7}
 800b3e6:	af00      	add	r7, sp, #0

}
 800b3e8:	bf00      	nop
 800b3ea:	46bd      	mov	sp, r7
 800b3ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3f0:	4770      	bx	lr

0800b3f2 <DebugMon_Handler>:
//
//}
/**
 * @brief This function handles Debug monitor.
 */
void DebugMon_Handler(void) {
 800b3f2:	b480      	push	{r7}
 800b3f4:	af00      	add	r7, sp, #0

}
 800b3f6:	bf00      	nop
 800b3f8:	46bd      	mov	sp, r7
 800b3fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3fe:	4770      	bx	lr

0800b400 <TIM1_UP_TIM10_IRQHandler>:
//{
//
//	HAL_IncTick();
//
//}
void TIM1_UP_TIM10_IRQHandler(void) {
 800b400:	b580      	push	{r7, lr}
 800b402:	af00      	add	r7, sp, #0
#ifdef USED_QEI1
	if (htim1.Instance->CR1 == 129) {
 800b404:	4b12      	ldr	r3, [pc, #72]	@ (800b450 <TIM1_UP_TIM10_IRQHandler+0x50>)
 800b406:	681b      	ldr	r3, [r3, #0]
 800b408:	681b      	ldr	r3, [r3, #0]
 800b40a:	2b81      	cmp	r3, #129	@ 0x81
 800b40c:	d109      	bne.n	800b422 <TIM1_UP_TIM10_IRQHandler+0x22>
		BIOS_QEI1.signbit += 1;
 800b40e:	4b11      	ldr	r3, [pc, #68]	@ (800b454 <TIM1_UP_TIM10_IRQHandler+0x54>)
 800b410:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800b414:	b29b      	uxth	r3, r3
 800b416:	3301      	adds	r3, #1
 800b418:	b29b      	uxth	r3, r3
 800b41a:	b21a      	sxth	r2, r3
 800b41c:	4b0d      	ldr	r3, [pc, #52]	@ (800b454 <TIM1_UP_TIM10_IRQHandler+0x54>)
 800b41e:	805a      	strh	r2, [r3, #2]
 800b420:	e00d      	b.n	800b43e <TIM1_UP_TIM10_IRQHandler+0x3e>
	} else if (htim1.Instance->CR1 == 145) {
 800b422:	4b0b      	ldr	r3, [pc, #44]	@ (800b450 <TIM1_UP_TIM10_IRQHandler+0x50>)
 800b424:	681b      	ldr	r3, [r3, #0]
 800b426:	681b      	ldr	r3, [r3, #0]
 800b428:	2b91      	cmp	r3, #145	@ 0x91
 800b42a:	d108      	bne.n	800b43e <TIM1_UP_TIM10_IRQHandler+0x3e>
		BIOS_QEI1.signbit -= 1;
 800b42c:	4b09      	ldr	r3, [pc, #36]	@ (800b454 <TIM1_UP_TIM10_IRQHandler+0x54>)
 800b42e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800b432:	b29b      	uxth	r3, r3
 800b434:	3b01      	subs	r3, #1
 800b436:	b29b      	uxth	r3, r3
 800b438:	b21a      	sxth	r2, r3
 800b43a:	4b06      	ldr	r3, [pc, #24]	@ (800b454 <TIM1_UP_TIM10_IRQHandler+0x54>)
 800b43c:	805a      	strh	r2, [r3, #2]
	}
	htim1.Instance->SR = 0;
 800b43e:	4b04      	ldr	r3, [pc, #16]	@ (800b450 <TIM1_UP_TIM10_IRQHandler+0x50>)
 800b440:	681b      	ldr	r3, [r3, #0]
 800b442:	2200      	movs	r2, #0
 800b444:	611a      	str	r2, [r3, #16]
	QEIDelay(200);
 800b446:	20c8      	movs	r0, #200	@ 0xc8
 800b448:	f7f6 fdf2 	bl	8002030 <QEIDelay>
#else
	HAL_TIM_IRQHandler(&htim1);
#endif
//	HAL_TIM_IRQHandler(&htim10);
	return;
 800b44c:	bf00      	nop

}
 800b44e:	bd80      	pop	{r7, pc}
 800b450:	20006710 	.word	0x20006710
 800b454:	20006cac 	.word	0x20006cac

0800b458 <TIM4_IRQHandler>:

void TIM4_IRQHandler(void) {
 800b458:	b580      	push	{r7, lr}
 800b45a:	af00      	add	r7, sp, #0

#ifdef USED_QEI4
	if (htim4.Instance->CR1 == 129) {
 800b45c:	4b12      	ldr	r3, [pc, #72]	@ (800b4a8 <TIM4_IRQHandler+0x50>)
 800b45e:	681b      	ldr	r3, [r3, #0]
 800b460:	681b      	ldr	r3, [r3, #0]
 800b462:	2b81      	cmp	r3, #129	@ 0x81
 800b464:	d109      	bne.n	800b47a <TIM4_IRQHandler+0x22>
		BIOS_QEI4.signbit += 1;
 800b466:	4b11      	ldr	r3, [pc, #68]	@ (800b4ac <TIM4_IRQHandler+0x54>)
 800b468:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800b46c:	b29b      	uxth	r3, r3
 800b46e:	3301      	adds	r3, #1
 800b470:	b29b      	uxth	r3, r3
 800b472:	b21a      	sxth	r2, r3
 800b474:	4b0d      	ldr	r3, [pc, #52]	@ (800b4ac <TIM4_IRQHandler+0x54>)
 800b476:	805a      	strh	r2, [r3, #2]
 800b478:	e00d      	b.n	800b496 <TIM4_IRQHandler+0x3e>
	} else if (htim4.Instance->CR1 == 145) {
 800b47a:	4b0b      	ldr	r3, [pc, #44]	@ (800b4a8 <TIM4_IRQHandler+0x50>)
 800b47c:	681b      	ldr	r3, [r3, #0]
 800b47e:	681b      	ldr	r3, [r3, #0]
 800b480:	2b91      	cmp	r3, #145	@ 0x91
 800b482:	d108      	bne.n	800b496 <TIM4_IRQHandler+0x3e>
		BIOS_QEI4.signbit -= 1;
 800b484:	4b09      	ldr	r3, [pc, #36]	@ (800b4ac <TIM4_IRQHandler+0x54>)
 800b486:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800b48a:	b29b      	uxth	r3, r3
 800b48c:	3b01      	subs	r3, #1
 800b48e:	b29b      	uxth	r3, r3
 800b490:	b21a      	sxth	r2, r3
 800b492:	4b06      	ldr	r3, [pc, #24]	@ (800b4ac <TIM4_IRQHandler+0x54>)
 800b494:	805a      	strh	r2, [r3, #2]
	}
	htim4.Instance->SR = 0;
 800b496:	4b04      	ldr	r3, [pc, #16]	@ (800b4a8 <TIM4_IRQHandler+0x50>)
 800b498:	681b      	ldr	r3, [r3, #0]
 800b49a:	2200      	movs	r2, #0
 800b49c:	611a      	str	r2, [r3, #16]
	QEIDelay(100);
 800b49e:	2064      	movs	r0, #100	@ 0x64
 800b4a0:	f7f6 fdc6 	bl	8002030 <QEIDelay>
	HAL_TIM_IRQHandler(&htim4);

	return;
#endif

}
 800b4a4:	bf00      	nop
 800b4a6:	bd80      	pop	{r7, pc}
 800b4a8:	20006258 	.word	0x20006258
 800b4ac:	20006cd0 	.word	0x20006cd0

0800b4b0 <TIM8_UP_TIM13_IRQHandler>:

void TIM8_UP_TIM13_IRQHandler(void) {
 800b4b0:	b580      	push	{r7, lr}
 800b4b2:	af00      	add	r7, sp, #0
#ifdef USED_QEI6
	if (htim8.Instance -> CR1 == 129)
 800b4b4:	4b12      	ldr	r3, [pc, #72]	@ (800b500 <TIM8_UP_TIM13_IRQHandler+0x50>)
 800b4b6:	681b      	ldr	r3, [r3, #0]
 800b4b8:	681b      	ldr	r3, [r3, #0]
 800b4ba:	2b81      	cmp	r3, #129	@ 0x81
 800b4bc:	d109      	bne.n	800b4d2 <TIM8_UP_TIM13_IRQHandler+0x22>
	{
		BIOS_QEI6.signbit += 1;
 800b4be:	4b11      	ldr	r3, [pc, #68]	@ (800b504 <TIM8_UP_TIM13_IRQHandler+0x54>)
 800b4c0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800b4c4:	b29b      	uxth	r3, r3
 800b4c6:	3301      	adds	r3, #1
 800b4c8:	b29b      	uxth	r3, r3
 800b4ca:	b21a      	sxth	r2, r3
 800b4cc:	4b0d      	ldr	r3, [pc, #52]	@ (800b504 <TIM8_UP_TIM13_IRQHandler+0x54>)
 800b4ce:	805a      	strh	r2, [r3, #2]
 800b4d0:	e00d      	b.n	800b4ee <TIM8_UP_TIM13_IRQHandler+0x3e>
	}
	else if (htim8.Instance ->CR1 == 145)
 800b4d2:	4b0b      	ldr	r3, [pc, #44]	@ (800b500 <TIM8_UP_TIM13_IRQHandler+0x50>)
 800b4d4:	681b      	ldr	r3, [r3, #0]
 800b4d6:	681b      	ldr	r3, [r3, #0]
 800b4d8:	2b91      	cmp	r3, #145	@ 0x91
 800b4da:	d108      	bne.n	800b4ee <TIM8_UP_TIM13_IRQHandler+0x3e>
	{
		BIOS_QEI6.signbit -= 1;
 800b4dc:	4b09      	ldr	r3, [pc, #36]	@ (800b504 <TIM8_UP_TIM13_IRQHandler+0x54>)
 800b4de:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800b4e2:	b29b      	uxth	r3, r3
 800b4e4:	3b01      	subs	r3, #1
 800b4e6:	b29b      	uxth	r3, r3
 800b4e8:	b21a      	sxth	r2, r3
 800b4ea:	4b06      	ldr	r3, [pc, #24]	@ (800b504 <TIM8_UP_TIM13_IRQHandler+0x54>)
 800b4ec:	805a      	strh	r2, [r3, #2]
	}
	htim8.Instance -> SR = 0;
 800b4ee:	4b04      	ldr	r3, [pc, #16]	@ (800b500 <TIM8_UP_TIM13_IRQHandler+0x50>)
 800b4f0:	681b      	ldr	r3, [r3, #0]
 800b4f2:	2200      	movs	r2, #0
 800b4f4:	611a      	str	r2, [r3, #16]
	QEIDelay(200);
 800b4f6:	20c8      	movs	r0, #200	@ 0xc8
 800b4f8:	f7f6 fd9a 	bl	8002030 <QEIDelay>
#else
	HAL_TIM_IRQHandler(&htim8);
#endif
//	HAL_TIM_IRQHandler(&htim13);
	return;
 800b4fc:	bf00      	nop
}
 800b4fe:	bd80      	pop	{r7, pc}
 800b500:	20006210 	.word	0x20006210
 800b504:	20006cd4 	.word	0x20006cd4

0800b508 <TIM2_IRQHandler>:

void TIM2_IRQHandler(void) {
 800b508:	b580      	push	{r7, lr}
 800b50a:	af00      	add	r7, sp, #0
	HAL_TIM_IRQHandler(&htim2);
 800b50c:	4802      	ldr	r0, [pc, #8]	@ (800b518 <TIM2_IRQHandler+0x10>)
 800b50e:	f008 f961 	bl	80137d4 <HAL_TIM_IRQHandler>
}
 800b512:	bf00      	nop
 800b514:	bd80      	pop	{r7, pc}
 800b516:	bf00      	nop
 800b518:	2000682c 	.word	0x2000682c

0800b51c <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 800b51c:	b580      	push	{r7, lr}
 800b51e:	b082      	sub	sp, #8
 800b520:	af00      	add	r7, sp, #0
 800b522:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM2) {
 800b524:	687b      	ldr	r3, [r7, #4]
 800b526:	681b      	ldr	r3, [r3, #0]
 800b528:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b52c:	d111      	bne.n	800b552 <HAL_TIM_PeriodElapsedCallback+0x36>
		HAL_IncTick();
 800b52e:	f000 fcf5 	bl	800bf1c <HAL_IncTick>
		MUXUpdate(&MUX);
 800b532:	480a      	ldr	r0, [pc, #40]	@ (800b55c <HAL_TIM_PeriodElapsedCallback+0x40>)
 800b534:	f7f6 f950 	bl	80017d8 <MUXUpdate>
		SHIFTREGShift(&SR);
 800b538:	4809      	ldr	r0, [pc, #36]	@ (800b560 <HAL_TIM_PeriodElapsedCallback+0x44>)
 800b53a:	f7f6 fe44 	bl	80021c6 <SHIFTREGShift>
		counter++;
 800b53e:	4b09      	ldr	r3, [pc, #36]	@ (800b564 <HAL_TIM_PeriodElapsedCallback+0x48>)
 800b540:	681b      	ldr	r3, [r3, #0]
 800b542:	3301      	adds	r3, #1
 800b544:	4a07      	ldr	r2, [pc, #28]	@ (800b564 <HAL_TIM_PeriodElapsedCallback+0x48>)
 800b546:	6013      	str	r3, [r2, #0]
		smttime++;
 800b548:	4b07      	ldr	r3, [pc, #28]	@ (800b568 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 800b54a:	681b      	ldr	r3, [r3, #0]
 800b54c:	3301      	adds	r3, #1
 800b54e:	4a06      	ldr	r2, [pc, #24]	@ (800b568 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 800b550:	6013      	str	r3, [r2, #0]
	}
}
 800b552:	bf00      	nop
 800b554:	3708      	adds	r7, #8
 800b556:	46bd      	mov	sp, r7
 800b558:	bd80      	pop	{r7, pc}
 800b55a:	bf00      	nop
 800b55c:	2000906c 	.word	0x2000906c
 800b560:	2000903c 	.word	0x2000903c
 800b564:	20009164 	.word	0x20009164
 800b568:	20008c50 	.word	0x20008c50

0800b56c <HAL_I2C_MasterRxCpltCallback>:

int ERflag = 0;
//Callback for I2C RXBuffer
void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c) {
 800b56c:	b580      	push	{r7, lr}
 800b56e:	b082      	sub	sp, #8
 800b570:	af00      	add	r7, sp, #0
 800b572:	6078      	str	r0, [r7, #4]
	if (hi2c == ps4.hi2cps4) {
 800b574:	4b0b      	ldr	r3, [pc, #44]	@ (800b5a4 <HAL_I2C_MasterRxCpltCallback+0x38>)
 800b576:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800b578:	687a      	ldr	r2, [r7, #4]
 800b57a:	429a      	cmp	r2, r3
 800b57c:	d103      	bne.n	800b586 <HAL_I2C_MasterRxCpltCallback+0x1a>
		PSxConnectDMA(&ps4);
 800b57e:	4809      	ldr	r0, [pc, #36]	@ (800b5a4 <HAL_I2C_MasterRxCpltCallback+0x38>)
 800b580:	f7f9 fe85 	bl	800528e <PSxConnectDMA>
 800b584:	e007      	b.n	800b596 <HAL_I2C_MasterRxCpltCallback+0x2a>
	} else if (hi2c == IMU.hi2cimu) {
 800b586:	4b08      	ldr	r3, [pc, #32]	@ (800b5a8 <HAL_I2C_MasterRxCpltCallback+0x3c>)
 800b588:	681b      	ldr	r3, [r3, #0]
 800b58a:	687a      	ldr	r2, [r7, #4]
 800b58c:	429a      	cmp	r2, r3
 800b58e:	d102      	bne.n	800b596 <HAL_I2C_MasterRxCpltCallback+0x2a>
		IMUConnectI2C(&IMU);
 800b590:	4805      	ldr	r0, [pc, #20]	@ (800b5a8 <HAL_I2C_MasterRxCpltCallback+0x3c>)
 800b592:	f7f8 fdd9 	bl	8004148 <IMUConnectI2C>
	}
	ERflag = 1;
 800b596:	4b05      	ldr	r3, [pc, #20]	@ (800b5ac <HAL_I2C_MasterRxCpltCallback+0x40>)
 800b598:	2201      	movs	r2, #1
 800b59a:	601a      	str	r2, [r3, #0]
}
 800b59c:	bf00      	nop
 800b59e:	3708      	adds	r7, #8
 800b5a0:	46bd      	mov	sp, r7
 800b5a2:	bd80      	pop	{r7, pc}
 800b5a4:	20009bd8 	.word	0x20009bd8
 800b5a8:	200089cc 	.word	0x200089cc
 800b5ac:	20001644 	.word	0x20001644

0800b5b0 <I2C1_ER_IRQHandler>:

void I2C1_ER_IRQHandler(void) {
 800b5b0:	b580      	push	{r7, lr}
 800b5b2:	af00      	add	r7, sp, #0
	HAL_I2C_ER_IRQHandler(&hi2c1);
 800b5b4:	481b      	ldr	r0, [pc, #108]	@ (800b624 <I2C1_ER_IRQHandler+0x74>)
 800b5b6:	f003 fa1a 	bl	800e9ee <HAL_I2C_ER_IRQHandler>

	if (ERflag) {
 800b5ba:	4b1b      	ldr	r3, [pc, #108]	@ (800b628 <I2C1_ER_IRQHandler+0x78>)
 800b5bc:	681b      	ldr	r3, [r3, #0]
 800b5be:	2b00      	cmp	r3, #0
 800b5c0:	d02d      	beq.n	800b61e <I2C1_ER_IRQHandler+0x6e>
		if (ps4.hi2cps4 == &hi2c1) {
 800b5c2:	4b1a      	ldr	r3, [pc, #104]	@ (800b62c <I2C1_ER_IRQHandler+0x7c>)
 800b5c4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800b5c6:	4a17      	ldr	r2, [pc, #92]	@ (800b624 <I2C1_ER_IRQHandler+0x74>)
 800b5c8:	4293      	cmp	r3, r2
 800b5ca:	d110      	bne.n	800b5ee <I2C1_ER_IRQHandler+0x3e>
			HAL_DMA_DeInit(&hi2c1_rx_dma);
 800b5cc:	4818      	ldr	r0, [pc, #96]	@ (800b630 <I2C1_ER_IRQHandler+0x80>)
 800b5ce:	f001 fd65 	bl	800d09c <HAL_DMA_DeInit>
			HAL_I2C_DeInit(&hi2c1);
 800b5d2:	4814      	ldr	r0, [pc, #80]	@ (800b624 <I2C1_ER_IRQHandler+0x74>)
 800b5d4:	f002 fd3c 	bl	800e050 <HAL_I2C_DeInit>
			I2CX_DMA_RX_Init(&hi2c1, &hi2c1_rx_dma, main_board_1,
 800b5d8:	4b16      	ldr	r3, [pc, #88]	@ (800b634 <I2C1_ER_IRQHandler+0x84>)
 800b5da:	2208      	movs	r2, #8
 800b5dc:	4914      	ldr	r1, [pc, #80]	@ (800b630 <I2C1_ER_IRQHandler+0x80>)
 800b5de:	4811      	ldr	r0, [pc, #68]	@ (800b624 <I2C1_ER_IRQHandler+0x74>)
 800b5e0:	f7f8 fbda 	bl	8003d98 <I2CX_DMA_RX_Init>
			CLOCK_SPEED_400KHz);
			PSxInitDMA(&ps4, &hi2c1);
 800b5e4:	490f      	ldr	r1, [pc, #60]	@ (800b624 <I2C1_ER_IRQHandler+0x74>)
 800b5e6:	4811      	ldr	r0, [pc, #68]	@ (800b62c <I2C1_ER_IRQHandler+0x7c>)
 800b5e8:	f7f9 fe64 	bl	80052b4 <PSxInitDMA>
 800b5ec:	e014      	b.n	800b618 <I2C1_ER_IRQHandler+0x68>
		} else if (IMU.hi2cimu == &hi2c1) {
 800b5ee:	4b12      	ldr	r3, [pc, #72]	@ (800b638 <I2C1_ER_IRQHandler+0x88>)
 800b5f0:	681b      	ldr	r3, [r3, #0]
 800b5f2:	4a0c      	ldr	r2, [pc, #48]	@ (800b624 <I2C1_ER_IRQHandler+0x74>)
 800b5f4:	4293      	cmp	r3, r2
 800b5f6:	d10f      	bne.n	800b618 <I2C1_ER_IRQHandler+0x68>
			HAL_I2C_DeInit(&hi2c1);
 800b5f8:	480a      	ldr	r0, [pc, #40]	@ (800b624 <I2C1_ER_IRQHandler+0x74>)
 800b5fa:	f002 fd29 	bl	800e050 <HAL_I2C_DeInit>
			I2CxInit(&hi2c1, main_board_1, CLOCK_SPEED_100KHz, ENABLE);
 800b5fe:	2301      	movs	r3, #1
 800b600:	4a0e      	ldr	r2, [pc, #56]	@ (800b63c <I2C1_ER_IRQHandler+0x8c>)
 800b602:	2108      	movs	r1, #8
 800b604:	4807      	ldr	r0, [pc, #28]	@ (800b624 <I2C1_ER_IRQHandler+0x74>)
 800b606:	f7f8 fb17 	bl	8003c38 <I2CxInit>
			HAL_I2C_Master_Receive_IT(IMU.hi2cimu, 0x35 << 1,
 800b60a:	4b0b      	ldr	r3, [pc, #44]	@ (800b638 <I2C1_ER_IRQHandler+0x88>)
 800b60c:	6818      	ldr	r0, [r3, #0]
 800b60e:	2314      	movs	r3, #20
 800b610:	4a0b      	ldr	r2, [pc, #44]	@ (800b640 <I2C1_ER_IRQHandler+0x90>)
 800b612:	216a      	movs	r1, #106	@ 0x6a
 800b614:	f002 fe4a 	bl	800e2ac <HAL_I2C_Master_Receive_IT>
					(uint8_t*) IMU.Buffer, 20);
		}
		ERflag = 0;
 800b618:	4b03      	ldr	r3, [pc, #12]	@ (800b628 <I2C1_ER_IRQHandler+0x78>)
 800b61a:	2200      	movs	r2, #0
 800b61c:	601a      	str	r2, [r3, #0]
	}
}
 800b61e:	bf00      	nop
 800b620:	bd80      	pop	{r7, pc}
 800b622:	bf00      	nop
 800b624:	200070cc 	.word	0x200070cc
 800b628:	20001644 	.word	0x20001644
 800b62c:	20009bd8 	.word	0x20009bd8
 800b630:	20007b54 	.word	0x20007b54
 800b634:	00061a80 	.word	0x00061a80
 800b638:	200089cc 	.word	0x200089cc
 800b63c:	000186a0 	.word	0x000186a0
 800b640:	200089d4 	.word	0x200089d4

0800b644 <I2C2_ER_IRQHandler>:

void I2C2_ER_IRQHandler(void) {
 800b644:	b580      	push	{r7, lr}
 800b646:	af00      	add	r7, sp, #0
	HAL_I2C_ER_IRQHandler(&hi2c2);
 800b648:	4810      	ldr	r0, [pc, #64]	@ (800b68c <I2C2_ER_IRQHandler+0x48>)
 800b64a:	f003 f9d0 	bl	800e9ee <HAL_I2C_ER_IRQHandler>

	if (ERflag) {
 800b64e:	4b10      	ldr	r3, [pc, #64]	@ (800b690 <I2C2_ER_IRQHandler+0x4c>)
 800b650:	681b      	ldr	r3, [r3, #0]
 800b652:	2b00      	cmp	r3, #0
 800b654:	d017      	beq.n	800b686 <I2C2_ER_IRQHandler+0x42>
		if (IMU.hi2cimu == &hi2c2) {
 800b656:	4b0f      	ldr	r3, [pc, #60]	@ (800b694 <I2C2_ER_IRQHandler+0x50>)
 800b658:	681b      	ldr	r3, [r3, #0]
 800b65a:	4a0c      	ldr	r2, [pc, #48]	@ (800b68c <I2C2_ER_IRQHandler+0x48>)
 800b65c:	4293      	cmp	r3, r2
 800b65e:	d10f      	bne.n	800b680 <I2C2_ER_IRQHandler+0x3c>
			HAL_I2C_DeInit(&hi2c2);
 800b660:	480a      	ldr	r0, [pc, #40]	@ (800b68c <I2C2_ER_IRQHandler+0x48>)
 800b662:	f002 fcf5 	bl	800e050 <HAL_I2C_DeInit>
			I2CxInit(&hi2c2, main_board_2, CLOCK_SPEED_100KHz, ENABLE);
 800b666:	2301      	movs	r3, #1
 800b668:	4a0b      	ldr	r2, [pc, #44]	@ (800b698 <I2C2_ER_IRQHandler+0x54>)
 800b66a:	2109      	movs	r1, #9
 800b66c:	4807      	ldr	r0, [pc, #28]	@ (800b68c <I2C2_ER_IRQHandler+0x48>)
 800b66e:	f7f8 fae3 	bl	8003c38 <I2CxInit>
			HAL_I2C_Master_Receive_IT(IMU.hi2cimu, 0x35 << 1,
 800b672:	4b08      	ldr	r3, [pc, #32]	@ (800b694 <I2C2_ER_IRQHandler+0x50>)
 800b674:	6818      	ldr	r0, [r3, #0]
 800b676:	2314      	movs	r3, #20
 800b678:	4a08      	ldr	r2, [pc, #32]	@ (800b69c <I2C2_ER_IRQHandler+0x58>)
 800b67a:	216a      	movs	r1, #106	@ 0x6a
 800b67c:	f002 fe16 	bl	800e2ac <HAL_I2C_Master_Receive_IT>
					(uint8_t*) IMU.Buffer, 20);
		}
		ERflag = 0;
 800b680:	4b03      	ldr	r3, [pc, #12]	@ (800b690 <I2C2_ER_IRQHandler+0x4c>)
 800b682:	2200      	movs	r2, #0
 800b684:	601a      	str	r2, [r3, #0]
	}
}
 800b686:	bf00      	nop
 800b688:	bd80      	pop	{r7, pc}
 800b68a:	bf00      	nop
 800b68c:	20007120 	.word	0x20007120
 800b690:	20001644 	.word	0x20001644
 800b694:	200089cc 	.word	0x200089cc
 800b698:	000186a0 	.word	0x000186a0
 800b69c:	200089d4 	.word	0x200089d4

0800b6a0 <I2C3_ER_IRQHandler>:
 * Function Remarks		: This interrupt handle the error event of I2C3.
 * Function Arguments	: None
 * Function Return		: None
 * Function Example		: None
 */
void I2C3_ER_IRQHandler(void) {
 800b6a0:	b580      	push	{r7, lr}
 800b6a2:	af00      	add	r7, sp, #0
	HAL_I2C_ER_IRQHandler(&hi2c3);
 800b6a4:	4810      	ldr	r0, [pc, #64]	@ (800b6e8 <I2C3_ER_IRQHandler+0x48>)
 800b6a6:	f003 f9a2 	bl	800e9ee <HAL_I2C_ER_IRQHandler>

	if (ERflag) {
 800b6aa:	4b10      	ldr	r3, [pc, #64]	@ (800b6ec <I2C3_ER_IRQHandler+0x4c>)
 800b6ac:	681b      	ldr	r3, [r3, #0]
 800b6ae:	2b00      	cmp	r3, #0
 800b6b0:	d017      	beq.n	800b6e2 <I2C3_ER_IRQHandler+0x42>

//		HAL_DMA_DeInit(&hi2c3_rx_dma);
		HAL_I2C_DeInit(&hi2c3);
 800b6b2:	480d      	ldr	r0, [pc, #52]	@ (800b6e8 <I2C3_ER_IRQHandler+0x48>)
 800b6b4:	f002 fccc 	bl	800e050 <HAL_I2C_DeInit>

//		I2CX_DMA_RX_Init(&hi2c3, &hi2c3_rx_dma, main_board_3, CLOCK_SPEED_100KHz);
		I2CxInit(&hi2c3, main_board_3, CLOCK_SPEED_100KHz, ENABLE);
 800b6b8:	2301      	movs	r3, #1
 800b6ba:	4a0d      	ldr	r2, [pc, #52]	@ (800b6f0 <I2C3_ER_IRQHandler+0x50>)
 800b6bc:	210a      	movs	r1, #10
 800b6be:	480a      	ldr	r0, [pc, #40]	@ (800b6e8 <I2C3_ER_IRQHandler+0x48>)
 800b6c0:	f7f8 faba 	bl	8003c38 <I2CxInit>

		if (IMU.hi2cimu == &hi2c3) {
 800b6c4:	4b0b      	ldr	r3, [pc, #44]	@ (800b6f4 <I2C3_ER_IRQHandler+0x54>)
 800b6c6:	681b      	ldr	r3, [r3, #0]
 800b6c8:	4a07      	ldr	r2, [pc, #28]	@ (800b6e8 <I2C3_ER_IRQHandler+0x48>)
 800b6ca:	4293      	cmp	r3, r2
 800b6cc:	d106      	bne.n	800b6dc <I2C3_ER_IRQHandler+0x3c>
			HAL_I2C_Master_Receive_IT(IMU.hi2cimu, 0x35 << 1,
 800b6ce:	4b09      	ldr	r3, [pc, #36]	@ (800b6f4 <I2C3_ER_IRQHandler+0x54>)
 800b6d0:	6818      	ldr	r0, [r3, #0]
 800b6d2:	2314      	movs	r3, #20
 800b6d4:	4a08      	ldr	r2, [pc, #32]	@ (800b6f8 <I2C3_ER_IRQHandler+0x58>)
 800b6d6:	216a      	movs	r1, #106	@ 0x6a
 800b6d8:	f002 fde8 	bl	800e2ac <HAL_I2C_Master_Receive_IT>
					(uint8_t*) IMU.Buffer, 20);
		}
		ERflag = 0;
 800b6dc:	4b03      	ldr	r3, [pc, #12]	@ (800b6ec <I2C3_ER_IRQHandler+0x4c>)
 800b6de:	2200      	movs	r2, #0
 800b6e0:	601a      	str	r2, [r3, #0]
	}
}
 800b6e2:	bf00      	nop
 800b6e4:	bd80      	pop	{r7, pc}
 800b6e6:	bf00      	nop
 800b6e8:	20006f14 	.word	0x20006f14
 800b6ec:	20001644 	.word	0x20001644
 800b6f0:	000186a0 	.word	0x000186a0
 800b6f4:	200089cc 	.word	0x200089cc
 800b6f8:	200089d4 	.word	0x200089d4

0800b6fc <USART1_IRQHandler>:
//
//	HAL_I2C_ER_IRQHandler(&hi2c3);
//
//}

void USART1_IRQHandler(void) {
 800b6fc:	b580      	push	{r7, lr}
 800b6fe:	af00      	add	r7, sp, #0

	HAL_UART_IRQHandler(&huart1);
 800b700:	4802      	ldr	r0, [pc, #8]	@ (800b70c <USART1_IRQHandler+0x10>)
 800b702:	f008 ffd1 	bl	80146a8 <HAL_UART_IRQHandler>
}
 800b706:	bf00      	nop
 800b708:	bd80      	pop	{r7, pc}
 800b70a:	bf00      	nop
 800b70c:	20006570 	.word	0x20006570

0800b710 <USART2_IRQHandler>:

void USART2_IRQHandler(void) {
 800b710:	b580      	push	{r7, lr}
 800b712:	af00      	add	r7, sp, #0

	HAL_UART_IRQHandler(&huart2);
 800b714:	4802      	ldr	r0, [pc, #8]	@ (800b720 <USART2_IRQHandler+0x10>)
 800b716:	f008 ffc7 	bl	80146a8 <HAL_UART_IRQHandler>
}
 800b71a:	bf00      	nop
 800b71c:	bd80      	pop	{r7, pc}
 800b71e:	bf00      	nop
 800b720:	20006874 	.word	0x20006874

0800b724 <USART3_IRQHandler>:

void USART3_IRQHandler(void) {
 800b724:	b580      	push	{r7, lr}
 800b726:	af00      	add	r7, sp, #0

	HAL_UART_IRQHandler(&huart3);
 800b728:	4802      	ldr	r0, [pc, #8]	@ (800b734 <USART3_IRQHandler+0x10>)
 800b72a:	f008 ffbd 	bl	80146a8 <HAL_UART_IRQHandler>
}
 800b72e:	bf00      	nop
 800b730:	bd80      	pop	{r7, pc}
 800b732:	bf00      	nop
 800b734:	20006300 	.word	0x20006300

0800b738 <UART4_IRQHandler>:

void UART4_IRQHandler(void) {
 800b738:	b580      	push	{r7, lr}
 800b73a:	af00      	add	r7, sp, #0

	HAL_UART_IRQHandler(&huart4);
 800b73c:	4802      	ldr	r0, [pc, #8]	@ (800b748 <UART4_IRQHandler+0x10>)
 800b73e:	f008 ffb3 	bl	80146a8 <HAL_UART_IRQHandler>
}
 800b742:	bf00      	nop
 800b744:	bd80      	pop	{r7, pc}
 800b746:	bf00      	nop
 800b748:	200067e8 	.word	0x200067e8

0800b74c <UART5_IRQHandler>:

void UART5_IRQHandler(void) {
 800b74c:	b580      	push	{r7, lr}
 800b74e:	af00      	add	r7, sp, #0

	HAL_UART_IRQHandler(&huart5);
 800b750:	4802      	ldr	r0, [pc, #8]	@ (800b75c <UART5_IRQHandler+0x10>)
 800b752:	f008 ffa9 	bl	80146a8 <HAL_UART_IRQHandler>
}
 800b756:	bf00      	nop
 800b758:	bd80      	pop	{r7, pc}
 800b75a:	bf00      	nop
 800b75c:	20006484 	.word	0x20006484

0800b760 <USART6_IRQHandler>:

void USART6_IRQHandler(void) {
 800b760:	b580      	push	{r7, lr}
 800b762:	af00      	add	r7, sp, #0

	HAL_UART_IRQHandler(&huart6);
 800b764:	4802      	ldr	r0, [pc, #8]	@ (800b770 <USART6_IRQHandler+0x10>)
 800b766:	f008 ff9f 	bl	80146a8 <HAL_UART_IRQHandler>
}
 800b76a:	bf00      	nop
 800b76c:	bd80      	pop	{r7, pc}
 800b76e:	bf00      	nop
 800b770:	200067a0 	.word	0x200067a0

0800b774 <OTG_FS_IRQHandler>:

/**
 * @brief This function handles USB On The Go FS global interrupt.
 */
void OTG_FS_IRQHandler(void) {
 800b774:	b580      	push	{r7, lr}
 800b776:	af00      	add	r7, sp, #0

//	led3 = !led3;
	HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 800b778:	4802      	ldr	r0, [pc, #8]	@ (800b784 <OTG_FS_IRQHandler+0x10>)
 800b77a:	f005 f8ef 	bl	801095c <HAL_PCD_IRQHandler>

}
 800b77e:	bf00      	nop
 800b780:	bd80      	pop	{r7, pc}
 800b782:	bf00      	nop
 800b784:	2000844c 	.word	0x2000844c

0800b788 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 800b788:	b480      	push	{r7}
 800b78a:	b083      	sub	sp, #12
 800b78c:	af00      	add	r7, sp, #0
 800b78e:	6078      	str	r0, [r7, #4]
//	if (huart == &huart5) {
//		usbPrint();
//	}
}
 800b790:	bf00      	nop
 800b792:	370c      	adds	r7, #12
 800b794:	46bd      	mov	sp, r7
 800b796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b79a:	4770      	bx	lr

0800b79c <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 800b79c:	b580      	push	{r7, lr}
 800b79e:	b082      	sub	sp, #8
 800b7a0:	af00      	add	r7, sp, #0
 800b7a2:	6078      	str	r0, [r7, #4]

	Testboard_Handler();
 800b7a4:	f7fe fd1e 	bl	800a1e4 <Testboard_Handler>
	HAL_UART_Receive_IT(huart,buff_receive,1);
 800b7a8:	2201      	movs	r2, #1
 800b7aa:	4904      	ldr	r1, [pc, #16]	@ (800b7bc <HAL_UART_RxCpltCallback+0x20>)
 800b7ac:	6878      	ldr	r0, [r7, #4]
 800b7ae:	f008 ff4a 	bl	8014646 <HAL_UART_Receive_IT>

}
 800b7b2:	bf00      	nop
 800b7b4:	3708      	adds	r7, #8
 800b7b6:	46bd      	mov	sp, r7
 800b7b8:	bd80      	pop	{r7, pc}
 800b7ba:	bf00      	nop
 800b7bc:	20009e50 	.word	0x20009e50

0800b7c0 <HAL_CAN_RxFifo0MsgPendingCallback>:
uint8_t aData[8] = {0};
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800b7c0:	b5b0      	push	{r4, r5, r7, lr}
 800b7c2:	b088      	sub	sp, #32
 800b7c4:	af00      	add	r7, sp, #0
 800b7c6:	6078      	str	r0, [r7, #4]
	if(sys.can){
 800b7c8:	4b60      	ldr	r3, [pc, #384]	@ (800b94c <HAL_CAN_RxFifo0MsgPendingCallback+0x18c>)
 800b7ca:	681b      	ldr	r3, [r3, #0]
 800b7cc:	f3c3 23c0 	ubfx	r3, r3, #11, #1
 800b7d0:	b2db      	uxtb	r3, r3
 800b7d2:	2b00      	cmp	r3, #0
 800b7d4:	d02d      	beq.n	800b832 <HAL_CAN_RxFifo0MsgPendingCallback+0x72>
		uint8_t aData[8];
		if(hcan == &hcan1){
 800b7d6:	687b      	ldr	r3, [r7, #4]
 800b7d8:	4a5d      	ldr	r2, [pc, #372]	@ (800b950 <HAL_CAN_RxFifo0MsgPendingCallback+0x190>)
 800b7da:	4293      	cmp	r3, r2
 800b7dc:	d125      	bne.n	800b82a <HAL_CAN_RxFifo0MsgPendingCallback+0x6a>
			HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &CAN1RxMessage, aData);
 800b7de:	f107 030c 	add.w	r3, r7, #12
 800b7e2:	4a5c      	ldr	r2, [pc, #368]	@ (800b954 <HAL_CAN_RxFifo0MsgPendingCallback+0x194>)
 800b7e4:	2100      	movs	r1, #0
 800b7e6:	6878      	ldr	r0, [r7, #4]
 800b7e8:	f000 ff0c 	bl	800c604 <HAL_CAN_GetRxMessage>
			if(CAN1RxMessage.StdId==33)
 800b7ec:	4b59      	ldr	r3, [pc, #356]	@ (800b954 <HAL_CAN_RxFifo0MsgPendingCallback+0x194>)
 800b7ee:	681b      	ldr	r3, [r3, #0]
 800b7f0:	2b21      	cmp	r3, #33	@ 0x21
 800b7f2:	d11a      	bne.n	800b82a <HAL_CAN_RxFifo0MsgPendingCallback+0x6a>
			{
				if (aData[0]=='S') {
 800b7f4:	7b3b      	ldrb	r3, [r7, #12]
 800b7f6:	2b53      	cmp	r3, #83	@ 0x53
 800b7f8:	d117      	bne.n	800b82a <HAL_CAN_RxFifo0MsgPendingCallback+0x6a>
					sprintf(buff_transmit, "\nSUCCESS\n\n");
 800b7fa:	4957      	ldr	r1, [pc, #348]	@ (800b958 <HAL_CAN_RxFifo0MsgPendingCallback+0x198>)
 800b7fc:	4857      	ldr	r0, [pc, #348]	@ (800b95c <HAL_CAN_RxFifo0MsgPendingCallback+0x19c>)
 800b7fe:	f012 f921 	bl	801da44 <siprintf>
					sys.can=0;
 800b802:	4a52      	ldr	r2, [pc, #328]	@ (800b94c <HAL_CAN_RxFifo0MsgPendingCallback+0x18c>)
 800b804:	6813      	ldr	r3, [r2, #0]
 800b806:	f36f 23cb 	bfc	r3, #11, #1
 800b80a:	6013      	str	r3, [r2, #0]
					HAL_UART_Transmit(&huart2,(uint8_t *)buff_transmit,strlen(buff_transmit),100);
 800b80c:	4853      	ldr	r0, [pc, #332]	@ (800b95c <HAL_CAN_RxFifo0MsgPendingCallback+0x19c>)
 800b80e:	f7f4 fd2f 	bl	8000270 <strlen>
 800b812:	4603      	mov	r3, r0
 800b814:	b29a      	uxth	r2, r3
 800b816:	2364      	movs	r3, #100	@ 0x64
 800b818:	4950      	ldr	r1, [pc, #320]	@ (800b95c <HAL_CAN_RxFifo0MsgPendingCallback+0x19c>)
 800b81a:	4851      	ldr	r0, [pc, #324]	@ (800b960 <HAL_CAN_RxFifo0MsgPendingCallback+0x1a0>)
 800b81c:	f008 fe81 	bl	8014522 <HAL_UART_Transmit>
					sys.transmit=1;
 800b820:	4a4a      	ldr	r2, [pc, #296]	@ (800b94c <HAL_CAN_RxFifo0MsgPendingCallback+0x18c>)
 800b822:	6813      	ldr	r3, [r2, #0]
 800b824:	f043 0301 	orr.w	r3, r3, #1
 800b828:	6013      	str	r3, [r2, #0]

				}
			}
		}
		HAL_CAN_ActivateNotification(hcan, CAN_IT_RX_FIFO0_MSG_PENDING);
 800b82a:	2102      	movs	r1, #2
 800b82c:	6878      	ldr	r0, [r7, #4]
 800b82e:	f000 fffb 	bl	800c828 <HAL_CAN_ActivateNotification>
	}
	PACKET_t source = 0;
 800b832:	2300      	movs	r3, #0
 800b834:	77fb      	strb	r3, [r7, #31]
	if (hcan == &hcan1) {
 800b836:	687b      	ldr	r3, [r7, #4]
 800b838:	4a45      	ldr	r2, [pc, #276]	@ (800b950 <HAL_CAN_RxFifo0MsgPendingCallback+0x190>)
 800b83a:	4293      	cmp	r3, r2
 800b83c:	d148      	bne.n	800b8d0 <HAL_CAN_RxFifo0MsgPendingCallback+0x110>
		HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &CAN1RxMessage, aData);
 800b83e:	4b49      	ldr	r3, [pc, #292]	@ (800b964 <HAL_CAN_RxFifo0MsgPendingCallback+0x1a4>)
 800b840:	4a44      	ldr	r2, [pc, #272]	@ (800b954 <HAL_CAN_RxFifo0MsgPendingCallback+0x194>)
 800b842:	2100      	movs	r1, #0
 800b844:	6878      	ldr	r0, [r7, #4]
 800b846:	f000 fedd 	bl	800c604 <HAL_CAN_GetRxMessage>

		if (CAN1RxMessage.IDE == CAN_ID_EXT) {
 800b84a:	4b42      	ldr	r3, [pc, #264]	@ (800b954 <HAL_CAN_RxFifo0MsgPendingCallback+0x194>)
 800b84c:	689b      	ldr	r3, [r3, #8]
 800b84e:	2b04      	cmp	r3, #4
 800b850:	d113      	bne.n	800b87a <HAL_CAN_RxFifo0MsgPendingCallback+0xba>
//			led2 = !led2;
			vescmsg.Rxmsg = CAN1RxMessage;
 800b852:	4a45      	ldr	r2, [pc, #276]	@ (800b968 <HAL_CAN_RxFifo0MsgPendingCallback+0x1a8>)
 800b854:	4b3f      	ldr	r3, [pc, #252]	@ (800b954 <HAL_CAN_RxFifo0MsgPendingCallback+0x194>)
 800b856:	4614      	mov	r4, r2
 800b858:	461d      	mov	r5, r3
 800b85a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b85c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b85e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800b862:	e884 0007 	stmia.w	r4, {r0, r1, r2}
			memcpy(vescmsg.Data, aData, 8);
 800b866:	4b40      	ldr	r3, [pc, #256]	@ (800b968 <HAL_CAN_RxFifo0MsgPendingCallback+0x1a8>)
 800b868:	4a3e      	ldr	r2, [pc, #248]	@ (800b964 <HAL_CAN_RxFifo0MsgPendingCallback+0x1a4>)
 800b86a:	331c      	adds	r3, #28
 800b86c:	e892 0003 	ldmia.w	r2, {r0, r1}
 800b870:	e883 0003 	stmia.w	r3, {r0, r1}
			source = VESC_PACKET;
 800b874:	2302      	movs	r3, #2
 800b876:	77fb      	strb	r3, [r7, #31]
 800b878:	e021      	b.n	800b8be <HAL_CAN_RxFifo0MsgPendingCallback+0xfe>


		} else if (CAN1RxMessage.IDE == CAN_ID_STD) {
 800b87a:	4b36      	ldr	r3, [pc, #216]	@ (800b954 <HAL_CAN_RxFifo0MsgPendingCallback+0x194>)
 800b87c:	689b      	ldr	r3, [r3, #8]
 800b87e:	2b00      	cmp	r3, #0
 800b880:	d11d      	bne.n	800b8be <HAL_CAN_RxFifo0MsgPendingCallback+0xfe>
			uint16_t command_mask = 0x7E0; // mask first 7 bits, get only the id
 800b882:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 800b886:	83bb      	strh	r3, [r7, #28]
			uint16_t id = CAN1RxMessage.StdId & command_mask;
 800b888:	4b32      	ldr	r3, [pc, #200]	@ (800b954 <HAL_CAN_RxFifo0MsgPendingCallback+0x194>)
 800b88a:	681b      	ldr	r3, [r3, #0]
 800b88c:	b29a      	uxth	r2, r3
 800b88e:	8bbb      	ldrh	r3, [r7, #28]
 800b890:	4013      	ands	r3, r2
 800b892:	837b      	strh	r3, [r7, #26]
			id = id >> 5;
 800b894:	8b7b      	ldrh	r3, [r7, #26]
 800b896:	095b      	lsrs	r3, r3, #5
 800b898:	837b      	strh	r3, [r7, #26]
			int i = 0;
 800b89a:	2300      	movs	r3, #0
 800b89c:	617b      	str	r3, [r7, #20]
//					memcpy(Odrvmsg.Data, aData, 8);
//					decode_Odrive(P_to_Odrive[i]);
//					break;
//				}
//			}
			if (CAN1RxMessage.StdId >= 0x201 && CAN1RxMessage.StdId <= 0x208){
 800b89e:	4b2d      	ldr	r3, [pc, #180]	@ (800b954 <HAL_CAN_RxFifo0MsgPendingCallback+0x194>)
 800b8a0:	681b      	ldr	r3, [r3, #0]
 800b8a2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b8a6:	d90a      	bls.n	800b8be <HAL_CAN_RxFifo0MsgPendingCallback+0xfe>
 800b8a8:	4b2a      	ldr	r3, [pc, #168]	@ (800b954 <HAL_CAN_RxFifo0MsgPendingCallback+0x194>)
 800b8aa:	681b      	ldr	r3, [r3, #0]
 800b8ac:	f5b3 7f02 	cmp.w	r3, #520	@ 0x208
 800b8b0:	d805      	bhi.n	800b8be <HAL_CAN_RxFifo0MsgPendingCallback+0xfe>
				RBMS_CAN_Handler(&CAN1RxMessage, aData);
 800b8b2:	492c      	ldr	r1, [pc, #176]	@ (800b964 <HAL_CAN_RxFifo0MsgPendingCallback+0x1a4>)
 800b8b4:	4827      	ldr	r0, [pc, #156]	@ (800b954 <HAL_CAN_RxFifo0MsgPendingCallback+0x194>)
 800b8b6:	f7fb f84f 	bl	8006958 <RBMS_CAN_Handler>
//				led2 = !led2;
				source = RBMS_PACKET;
 800b8ba:	2304      	movs	r3, #4
 800b8bc:	77fb      	strb	r3, [r7, #31]
			}
		}
		CAN_PROCESS(source);
 800b8be:	7ffb      	ldrb	r3, [r7, #31]
 800b8c0:	4618      	mov	r0, r3
 800b8c2:	f7fe fc0f 	bl	800a0e4 <CAN_PROCESS>
		HAL_CAN_ActivateNotification(hcan, CAN_IT_RX_FIFO0_MSG_PENDING);
 800b8c6:	2102      	movs	r1, #2
 800b8c8:	6878      	ldr	r0, [r7, #4]
 800b8ca:	f000 ffad 	bl	800c828 <HAL_CAN_ActivateNotification>

		}
		CAN_PROCESS(source);
		HAL_CAN_ActivateNotification(hcan, CAN_IT_RX_FIFO0_MSG_PENDING);
	}
}
 800b8ce:	e038      	b.n	800b942 <HAL_CAN_RxFifo0MsgPendingCallback+0x182>
		HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &CAN2RxMessage, aData);
 800b8d0:	4b24      	ldr	r3, [pc, #144]	@ (800b964 <HAL_CAN_RxFifo0MsgPendingCallback+0x1a4>)
 800b8d2:	4a26      	ldr	r2, [pc, #152]	@ (800b96c <HAL_CAN_RxFifo0MsgPendingCallback+0x1ac>)
 800b8d4:	2100      	movs	r1, #0
 800b8d6:	6878      	ldr	r0, [r7, #4]
 800b8d8:	f000 fe94 	bl	800c604 <HAL_CAN_GetRxMessage>
		if (CAN2RxMessage.IDE == CAN_ID_EXT) {
 800b8dc:	4b23      	ldr	r3, [pc, #140]	@ (800b96c <HAL_CAN_RxFifo0MsgPendingCallback+0x1ac>)
 800b8de:	689b      	ldr	r3, [r3, #8]
 800b8e0:	2b04      	cmp	r3, #4
 800b8e2:	d116      	bne.n	800b912 <HAL_CAN_RxFifo0MsgPendingCallback+0x152>
			vescmsg.Rxmsg = CAN2RxMessage;
 800b8e4:	4a20      	ldr	r2, [pc, #128]	@ (800b968 <HAL_CAN_RxFifo0MsgPendingCallback+0x1a8>)
 800b8e6:	4b21      	ldr	r3, [pc, #132]	@ (800b96c <HAL_CAN_RxFifo0MsgPendingCallback+0x1ac>)
 800b8e8:	4614      	mov	r4, r2
 800b8ea:	461d      	mov	r5, r3
 800b8ec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b8ee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b8f0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800b8f4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
			memcpy(vescmsg.Data, aData, 8);
 800b8f8:	4b1b      	ldr	r3, [pc, #108]	@ (800b968 <HAL_CAN_RxFifo0MsgPendingCallback+0x1a8>)
 800b8fa:	4a1a      	ldr	r2, [pc, #104]	@ (800b964 <HAL_CAN_RxFifo0MsgPendingCallback+0x1a4>)
 800b8fc:	331c      	adds	r3, #28
 800b8fe:	e892 0003 	ldmia.w	r2, {r0, r1}
 800b902:	e883 0003 	stmia.w	r3, {r0, r1}
			set_rx_frames(&vescmsg);
 800b906:	4818      	ldr	r0, [pc, #96]	@ (800b968 <HAL_CAN_RxFifo0MsgPendingCallback+0x1a8>)
 800b908:	f7fe f938 	bl	8009b7c <set_rx_frames>
			source = VESC_PACKET;
 800b90c:	2302      	movs	r3, #2
 800b90e:	77fb      	strb	r3, [r7, #31]
 800b910:	e00f      	b.n	800b932 <HAL_CAN_RxFifo0MsgPendingCallback+0x172>
			if (CAN2RxMessage.StdId >= 0x201 && CAN2RxMessage.StdId <= 0x208){
 800b912:	4b16      	ldr	r3, [pc, #88]	@ (800b96c <HAL_CAN_RxFifo0MsgPendingCallback+0x1ac>)
 800b914:	681b      	ldr	r3, [r3, #0]
 800b916:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b91a:	d90a      	bls.n	800b932 <HAL_CAN_RxFifo0MsgPendingCallback+0x172>
 800b91c:	4b13      	ldr	r3, [pc, #76]	@ (800b96c <HAL_CAN_RxFifo0MsgPendingCallback+0x1ac>)
 800b91e:	681b      	ldr	r3, [r3, #0]
 800b920:	f5b3 7f02 	cmp.w	r3, #520	@ 0x208
 800b924:	d805      	bhi.n	800b932 <HAL_CAN_RxFifo0MsgPendingCallback+0x172>
				RBMS_CAN_Handler(&CAN2RxMessage, aData);
 800b926:	490f      	ldr	r1, [pc, #60]	@ (800b964 <HAL_CAN_RxFifo0MsgPendingCallback+0x1a4>)
 800b928:	4810      	ldr	r0, [pc, #64]	@ (800b96c <HAL_CAN_RxFifo0MsgPendingCallback+0x1ac>)
 800b92a:	f7fb f815 	bl	8006958 <RBMS_CAN_Handler>
				source = RBMS_PACKET;
 800b92e:	2304      	movs	r3, #4
 800b930:	77fb      	strb	r3, [r7, #31]
		CAN_PROCESS(source);
 800b932:	7ffb      	ldrb	r3, [r7, #31]
 800b934:	4618      	mov	r0, r3
 800b936:	f7fe fbd5 	bl	800a0e4 <CAN_PROCESS>
		HAL_CAN_ActivateNotification(hcan, CAN_IT_RX_FIFO0_MSG_PENDING);
 800b93a:	2102      	movs	r1, #2
 800b93c:	6878      	ldr	r0, [r7, #4]
 800b93e:	f000 ff73 	bl	800c828 <HAL_CAN_ActivateNotification>
}
 800b942:	bf00      	nop
 800b944:	3720      	adds	r7, #32
 800b946:	46bd      	mov	sp, r7
 800b948:	bdb0      	pop	{r4, r5, r7, pc}
 800b94a:	bf00      	nop
 800b94c:	20008bf8 	.word	0x20008bf8
 800b950:	20006d44 	.word	0x20006d44
 800b954:	20006d6c 	.word	0x20006d6c
 800b958:	08021dac 	.word	0x08021dac
 800b95c:	20009a84 	.word	0x20009a84
 800b960:	20006874 	.word	0x20006874
 800b964:	20001648 	.word	0x20001648
 800b968:	20009140 	.word	0x20009140
 800b96c:	20006cd8 	.word	0x20006cd8

0800b970 <HAL_CAN_RxFifo1MsgPendingCallback>:

void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800b970:	b5b0      	push	{r4, r5, r7, lr}
 800b972:	b08a      	sub	sp, #40	@ 0x28
 800b974:	af00      	add	r7, sp, #0
 800b976:	6078      	str	r0, [r7, #4]
	if(sys.can){
 800b978:	4b6d      	ldr	r3, [pc, #436]	@ (800bb30 <HAL_CAN_RxFifo1MsgPendingCallback+0x1c0>)
 800b97a:	681b      	ldr	r3, [r3, #0]
 800b97c:	f3c3 23c0 	ubfx	r3, r3, #11, #1
 800b980:	b2db      	uxtb	r3, r3
 800b982:	2b00      	cmp	r3, #0
 800b984:	d032      	beq.n	800b9ec <HAL_CAN_RxFifo1MsgPendingCallback+0x7c>
		uint8_t aData[8];
		led3=0;
 800b986:	4a6b      	ldr	r2, [pc, #428]	@ (800bb34 <HAL_CAN_RxFifo1MsgPendingCallback+0x1c4>)
 800b988:	7853      	ldrb	r3, [r2, #1]
 800b98a:	f36f 13c7 	bfc	r3, #7, #1
 800b98e:	7053      	strb	r3, [r2, #1]
		if(hcan == &hcan2){
 800b990:	687b      	ldr	r3, [r7, #4]
 800b992:	4a69      	ldr	r2, [pc, #420]	@ (800bb38 <HAL_CAN_RxFifo1MsgPendingCallback+0x1c8>)
 800b994:	4293      	cmp	r3, r2
 800b996:	d125      	bne.n	800b9e4 <HAL_CAN_RxFifo1MsgPendingCallback+0x74>
			HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO1, &CAN2RxMessage, aData);
 800b998:	f107 030c 	add.w	r3, r7, #12
 800b99c:	4a67      	ldr	r2, [pc, #412]	@ (800bb3c <HAL_CAN_RxFifo1MsgPendingCallback+0x1cc>)
 800b99e:	2101      	movs	r1, #1
 800b9a0:	6878      	ldr	r0, [r7, #4]
 800b9a2:	f000 fe2f 	bl	800c604 <HAL_CAN_GetRxMessage>
			if(CAN2RxMessage.StdId==32)
 800b9a6:	4b65      	ldr	r3, [pc, #404]	@ (800bb3c <HAL_CAN_RxFifo1MsgPendingCallback+0x1cc>)
 800b9a8:	681b      	ldr	r3, [r3, #0]
 800b9aa:	2b20      	cmp	r3, #32
 800b9ac:	d11a      	bne.n	800b9e4 <HAL_CAN_RxFifo1MsgPendingCallback+0x74>
			{
				if (aData[0] == 'S') {
 800b9ae:	7b3b      	ldrb	r3, [r7, #12]
 800b9b0:	2b53      	cmp	r3, #83	@ 0x53
 800b9b2:	d117      	bne.n	800b9e4 <HAL_CAN_RxFifo1MsgPendingCallback+0x74>
					sprintf(buff_transmit, "\nSUCCESS\n\n");
 800b9b4:	4962      	ldr	r1, [pc, #392]	@ (800bb40 <HAL_CAN_RxFifo1MsgPendingCallback+0x1d0>)
 800b9b6:	4863      	ldr	r0, [pc, #396]	@ (800bb44 <HAL_CAN_RxFifo1MsgPendingCallback+0x1d4>)
 800b9b8:	f012 f844 	bl	801da44 <siprintf>
					sys.can=0;
 800b9bc:	4a5c      	ldr	r2, [pc, #368]	@ (800bb30 <HAL_CAN_RxFifo1MsgPendingCallback+0x1c0>)
 800b9be:	6813      	ldr	r3, [r2, #0]
 800b9c0:	f36f 23cb 	bfc	r3, #11, #1
 800b9c4:	6013      	str	r3, [r2, #0]
					HAL_UART_Transmit(&huart2,(uint8_t *)buff_transmit,strlen(buff_transmit),100);
 800b9c6:	485f      	ldr	r0, [pc, #380]	@ (800bb44 <HAL_CAN_RxFifo1MsgPendingCallback+0x1d4>)
 800b9c8:	f7f4 fc52 	bl	8000270 <strlen>
 800b9cc:	4603      	mov	r3, r0
 800b9ce:	b29a      	uxth	r2, r3
 800b9d0:	2364      	movs	r3, #100	@ 0x64
 800b9d2:	495c      	ldr	r1, [pc, #368]	@ (800bb44 <HAL_CAN_RxFifo1MsgPendingCallback+0x1d4>)
 800b9d4:	485c      	ldr	r0, [pc, #368]	@ (800bb48 <HAL_CAN_RxFifo1MsgPendingCallback+0x1d8>)
 800b9d6:	f008 fda4 	bl	8014522 <HAL_UART_Transmit>
					sys.transmit=1;
 800b9da:	4a55      	ldr	r2, [pc, #340]	@ (800bb30 <HAL_CAN_RxFifo1MsgPendingCallback+0x1c0>)
 800b9dc:	6813      	ldr	r3, [r2, #0]
 800b9de:	f043 0301 	orr.w	r3, r3, #1
 800b9e2:	6013      	str	r3, [r2, #0]
				}
			}
		}
		HAL_CAN_ActivateNotification(hcan, CAN_IT_RX_FIFO1_MSG_PENDING);
 800b9e4:	2110      	movs	r1, #16
 800b9e6:	6878      	ldr	r0, [r7, #4]
 800b9e8:	f000 ff1e 	bl	800c828 <HAL_CAN_ActivateNotification>
	}
	uint8_t aData[8] = {0};
 800b9ec:	2300      	movs	r3, #0
 800b9ee:	617b      	str	r3, [r7, #20]
 800b9f0:	2300      	movs	r3, #0
 800b9f2:	61bb      	str	r3, [r7, #24]
	PACKET_t source = 0;
 800b9f4:	2300      	movs	r3, #0
 800b9f6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	if (hcan == &hcan1) {
 800b9fa:	687b      	ldr	r3, [r7, #4]
 800b9fc:	4a53      	ldr	r2, [pc, #332]	@ (800bb4c <HAL_CAN_RxFifo1MsgPendingCallback+0x1dc>)
 800b9fe:	4293      	cmp	r3, r2
 800ba00:	d140      	bne.n	800ba84 <HAL_CAN_RxFifo1MsgPendingCallback+0x114>

		HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO1, &CAN1RxMessage, aData);
 800ba02:	f107 0314 	add.w	r3, r7, #20
 800ba06:	4a52      	ldr	r2, [pc, #328]	@ (800bb50 <HAL_CAN_RxFifo1MsgPendingCallback+0x1e0>)
 800ba08:	2101      	movs	r1, #1
 800ba0a:	6878      	ldr	r0, [r7, #4]
 800ba0c:	f000 fdfa 	bl	800c604 <HAL_CAN_GetRxMessage>

		if (CAN1RxMessage.IDE == CAN_ID_EXT) {
 800ba10:	4b4f      	ldr	r3, [pc, #316]	@ (800bb50 <HAL_CAN_RxFifo1MsgPendingCallback+0x1e0>)
 800ba12:	689b      	ldr	r3, [r3, #8]
 800ba14:	2b04      	cmp	r3, #4
 800ba16:	d118      	bne.n	800ba4a <HAL_CAN_RxFifo1MsgPendingCallback+0xda>
			vescmsg.Rxmsg = CAN1RxMessage;
 800ba18:	4a4e      	ldr	r2, [pc, #312]	@ (800bb54 <HAL_CAN_RxFifo1MsgPendingCallback+0x1e4>)
 800ba1a:	4b4d      	ldr	r3, [pc, #308]	@ (800bb50 <HAL_CAN_RxFifo1MsgPendingCallback+0x1e0>)
 800ba1c:	4614      	mov	r4, r2
 800ba1e:	461d      	mov	r5, r3
 800ba20:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ba22:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ba24:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800ba28:	e884 0007 	stmia.w	r4, {r0, r1, r2}
			memcpy(vescmsg.Data, aData, 8);
 800ba2c:	4b49      	ldr	r3, [pc, #292]	@ (800bb54 <HAL_CAN_RxFifo1MsgPendingCallback+0x1e4>)
 800ba2e:	331c      	adds	r3, #28
 800ba30:	f107 0214 	add.w	r2, r7, #20
 800ba34:	e892 0003 	ldmia.w	r2, {r0, r1}
 800ba38:	e883 0003 	stmia.w	r3, {r0, r1}
			set_rx_frames(&vescmsg);
 800ba3c:	4845      	ldr	r0, [pc, #276]	@ (800bb54 <HAL_CAN_RxFifo1MsgPendingCallback+0x1e4>)
 800ba3e:	f7fe f89d 	bl	8009b7c <set_rx_frames>
			source = VESC_PACKET;
 800ba42:	2302      	movs	r3, #2
 800ba44:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800ba48:	e012      	b.n	800ba70 <HAL_CAN_RxFifo1MsgPendingCallback+0x100>

		} else {
			if (CAN1RxMessage.StdId >= 0x201 && CAN1RxMessage.StdId <= 0x208){
 800ba4a:	4b41      	ldr	r3, [pc, #260]	@ (800bb50 <HAL_CAN_RxFifo1MsgPendingCallback+0x1e0>)
 800ba4c:	681b      	ldr	r3, [r3, #0]
 800ba4e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ba52:	d90d      	bls.n	800ba70 <HAL_CAN_RxFifo1MsgPendingCallback+0x100>
 800ba54:	4b3e      	ldr	r3, [pc, #248]	@ (800bb50 <HAL_CAN_RxFifo1MsgPendingCallback+0x1e0>)
 800ba56:	681b      	ldr	r3, [r3, #0]
 800ba58:	f5b3 7f02 	cmp.w	r3, #520	@ 0x208
 800ba5c:	d808      	bhi.n	800ba70 <HAL_CAN_RxFifo1MsgPendingCallback+0x100>
				RBMS_CAN_Handler(&CAN1RxMessage, aData);
 800ba5e:	f107 0314 	add.w	r3, r7, #20
 800ba62:	4619      	mov	r1, r3
 800ba64:	483a      	ldr	r0, [pc, #232]	@ (800bb50 <HAL_CAN_RxFifo1MsgPendingCallback+0x1e0>)
 800ba66:	f7fa ff77 	bl	8006958 <RBMS_CAN_Handler>
				source = RBMS_PACKET;
 800ba6a:	2304      	movs	r3, #4
 800ba6c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			}
		}
		CAN_PROCESS(source);
 800ba70:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ba74:	4618      	mov	r0, r3
 800ba76:	f7fe fb35 	bl	800a0e4 <CAN_PROCESS>
		HAL_CAN_ActivateNotification(hcan, CAN_IT_RX_FIFO1_MSG_PENDING);
 800ba7a:	2110      	movs	r1, #16
 800ba7c:	6878      	ldr	r0, [r7, #4]
 800ba7e:	f000 fed3 	bl	800c828 <HAL_CAN_ActivateNotification>
		}
		CAN_PROCESS(source);
		HAL_CAN_ActivateNotification(hcan, CAN_IT_RX_FIFO1_MSG_PENDING);
	}

}
 800ba82:	e051      	b.n	800bb28 <HAL_CAN_RxFifo1MsgPendingCallback+0x1b8>
		HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO1, &CAN2RxMessage, aData);
 800ba84:	f107 0314 	add.w	r3, r7, #20
 800ba88:	4a2c      	ldr	r2, [pc, #176]	@ (800bb3c <HAL_CAN_RxFifo1MsgPendingCallback+0x1cc>)
 800ba8a:	2101      	movs	r1, #1
 800ba8c:	6878      	ldr	r0, [r7, #4]
 800ba8e:	f000 fdb9 	bl	800c604 <HAL_CAN_GetRxMessage>
		if (CAN2RxMessage.IDE == CAN_ID_EXT) {
 800ba92:	4b2a      	ldr	r3, [pc, #168]	@ (800bb3c <HAL_CAN_RxFifo1MsgPendingCallback+0x1cc>)
 800ba94:	689b      	ldr	r3, [r3, #8]
 800ba96:	2b04      	cmp	r3, #4
 800ba98:	d118      	bne.n	800bacc <HAL_CAN_RxFifo1MsgPendingCallback+0x15c>
			vescmsg.Rxmsg = CAN2RxMessage;
 800ba9a:	4a2e      	ldr	r2, [pc, #184]	@ (800bb54 <HAL_CAN_RxFifo1MsgPendingCallback+0x1e4>)
 800ba9c:	4b27      	ldr	r3, [pc, #156]	@ (800bb3c <HAL_CAN_RxFifo1MsgPendingCallback+0x1cc>)
 800ba9e:	4614      	mov	r4, r2
 800baa0:	461d      	mov	r5, r3
 800baa2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800baa4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800baa6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800baaa:	e884 0007 	stmia.w	r4, {r0, r1, r2}
			memcpy(vescmsg.Data, aData, 8);
 800baae:	4b29      	ldr	r3, [pc, #164]	@ (800bb54 <HAL_CAN_RxFifo1MsgPendingCallback+0x1e4>)
 800bab0:	331c      	adds	r3, #28
 800bab2:	f107 0214 	add.w	r2, r7, #20
 800bab6:	e892 0003 	ldmia.w	r2, {r0, r1}
 800baba:	e883 0003 	stmia.w	r3, {r0, r1}
			set_rx_frames(&vescmsg);
 800babe:	4825      	ldr	r0, [pc, #148]	@ (800bb54 <HAL_CAN_RxFifo1MsgPendingCallback+0x1e4>)
 800bac0:	f7fe f85c 	bl	8009b7c <set_rx_frames>
			source = VESC_PACKET;
 800bac4:	2302      	movs	r3, #2
 800bac6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800baca:	e024      	b.n	800bb16 <HAL_CAN_RxFifo1MsgPendingCallback+0x1a6>
		} else if (CAN2RxMessage.IDE == CAN_ID_STD) {
 800bacc:	4b1b      	ldr	r3, [pc, #108]	@ (800bb3c <HAL_CAN_RxFifo1MsgPendingCallback+0x1cc>)
 800bace:	689b      	ldr	r3, [r3, #8]
 800bad0:	2b00      	cmp	r3, #0
 800bad2:	d120      	bne.n	800bb16 <HAL_CAN_RxFifo1MsgPendingCallback+0x1a6>
			uint16_t command_mask = 0x7E0; // mask first 7 bits, get only the id
 800bad4:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 800bad8:	84bb      	strh	r3, [r7, #36]	@ 0x24
			uint16_t id = CAN2RxMessage.StdId & command_mask;
 800bada:	4b18      	ldr	r3, [pc, #96]	@ (800bb3c <HAL_CAN_RxFifo1MsgPendingCallback+0x1cc>)
 800badc:	681b      	ldr	r3, [r3, #0]
 800bade:	b29a      	uxth	r2, r3
 800bae0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800bae2:	4013      	ands	r3, r2
 800bae4:	847b      	strh	r3, [r7, #34]	@ 0x22
			id = id >> 5;
 800bae6:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800bae8:	095b      	lsrs	r3, r3, #5
 800baea:	847b      	strh	r3, [r7, #34]	@ 0x22
			int i = 0;
 800baec:	2300      	movs	r3, #0
 800baee:	61fb      	str	r3, [r7, #28]
			if (CAN2RxMessage.StdId >= 0x201  && CAN2RxMessage.StdId <= 0x208){
 800baf0:	4b12      	ldr	r3, [pc, #72]	@ (800bb3c <HAL_CAN_RxFifo1MsgPendingCallback+0x1cc>)
 800baf2:	681b      	ldr	r3, [r3, #0]
 800baf4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800baf8:	d90d      	bls.n	800bb16 <HAL_CAN_RxFifo1MsgPendingCallback+0x1a6>
 800bafa:	4b10      	ldr	r3, [pc, #64]	@ (800bb3c <HAL_CAN_RxFifo1MsgPendingCallback+0x1cc>)
 800bafc:	681b      	ldr	r3, [r3, #0]
 800bafe:	f5b3 7f02 	cmp.w	r3, #520	@ 0x208
 800bb02:	d808      	bhi.n	800bb16 <HAL_CAN_RxFifo1MsgPendingCallback+0x1a6>
				RBMS_CAN_Handler(&CAN2RxMessage, aData);
 800bb04:	f107 0314 	add.w	r3, r7, #20
 800bb08:	4619      	mov	r1, r3
 800bb0a:	480c      	ldr	r0, [pc, #48]	@ (800bb3c <HAL_CAN_RxFifo1MsgPendingCallback+0x1cc>)
 800bb0c:	f7fa ff24 	bl	8006958 <RBMS_CAN_Handler>
				source = RBMS_PACKET;
 800bb10:	2304      	movs	r3, #4
 800bb12:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		CAN_PROCESS(source);
 800bb16:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800bb1a:	4618      	mov	r0, r3
 800bb1c:	f7fe fae2 	bl	800a0e4 <CAN_PROCESS>
		HAL_CAN_ActivateNotification(hcan, CAN_IT_RX_FIFO1_MSG_PENDING);
 800bb20:	2110      	movs	r1, #16
 800bb22:	6878      	ldr	r0, [r7, #4]
 800bb24:	f000 fe80 	bl	800c828 <HAL_CAN_ActivateNotification>
}
 800bb28:	bf00      	nop
 800bb2a:	3728      	adds	r7, #40	@ 0x28
 800bb2c:	46bd      	mov	sp, r7
 800bb2e:	bdb0      	pop	{r4, r5, r7, pc}
 800bb30:	20008bf8 	.word	0x20008bf8
 800bb34:	40020814 	.word	0x40020814
 800bb38:	20006d1c 	.word	0x20006d1c
 800bb3c:	20006cd8 	.word	0x20006cd8
 800bb40:	08021dac 	.word	0x08021dac
 800bb44:	20009a84 	.word	0x20009a84
 800bb48:	20006874 	.word	0x20006874
 800bb4c:	20006d44 	.word	0x20006d44
 800bb50:	20006d6c 	.word	0x20006d6c
 800bb54:	20009140 	.word	0x20009140

0800bb58 <HAL_I2C_SlaveRxCpltCallback>:
void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c) {
 800bb58:	b580      	push	{r7, lr}
 800bb5a:	b082      	sub	sp, #8
 800bb5c:	af00      	add	r7, sp, #0
 800bb5e:	6078      	str	r0, [r7, #4]
	sprintf(buff_transmit, "\nSUCCESS\n\n");
 800bb60:	490e      	ldr	r1, [pc, #56]	@ (800bb9c <HAL_I2C_SlaveRxCpltCallback+0x44>)
 800bb62:	480f      	ldr	r0, [pc, #60]	@ (800bba0 <HAL_I2C_SlaveRxCpltCallback+0x48>)
 800bb64:	f011 ff6e 	bl	801da44 <siprintf>
	HAL_UART_Transmit(&Uarts, (uint8_t*)buff_transmit, strlen(buff_transmit), 1000);
 800bb68:	480d      	ldr	r0, [pc, #52]	@ (800bba0 <HAL_I2C_SlaveRxCpltCallback+0x48>)
 800bb6a:	f7f4 fb81 	bl	8000270 <strlen>
 800bb6e:	4603      	mov	r3, r0
 800bb70:	b29a      	uxth	r2, r3
 800bb72:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800bb76:	490a      	ldr	r1, [pc, #40]	@ (800bba0 <HAL_I2C_SlaveRxCpltCallback+0x48>)
 800bb78:	480a      	ldr	r0, [pc, #40]	@ (800bba4 <HAL_I2C_SlaveRxCpltCallback+0x4c>)
 800bb7a:	f008 fcd2 	bl	8014522 <HAL_UART_Transmit>
	sys.transmit=1;
 800bb7e:	4a0a      	ldr	r2, [pc, #40]	@ (800bba8 <HAL_I2C_SlaveRxCpltCallback+0x50>)
 800bb80:	6813      	ldr	r3, [r2, #0]
 800bb82:	f043 0301 	orr.w	r3, r3, #1
 800bb86:	6013      	str	r3, [r2, #0]
	sys.i2c=0;
 800bb88:	4a07      	ldr	r2, [pc, #28]	@ (800bba8 <HAL_I2C_SlaveRxCpltCallback+0x50>)
 800bb8a:	6813      	ldr	r3, [r2, #0]
 800bb8c:	f36f 13c7 	bfc	r3, #7, #1
 800bb90:	6013      	str	r3, [r2, #0]
}
 800bb92:	bf00      	nop
 800bb94:	3708      	adds	r7, #8
 800bb96:	46bd      	mov	sp, r7
 800bb98:	bd80      	pop	{r7, pc}
 800bb9a:	bf00      	nop
 800bb9c:	08021dac 	.word	0x08021dac
 800bba0:	20009a84 	.word	0x20009a84
 800bba4:	20009c60 	.word	0x20009c60
 800bba8:	20008bf8 	.word	0x20008bf8

0800bbac <HAL_SPI_RxCpltCallback>:
void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef * hspi)
{
 800bbac:	b580      	push	{r7, lr}
 800bbae:	b082      	sub	sp, #8
 800bbb0:	af00      	add	r7, sp, #0
 800bbb2:	6078      	str	r0, [r7, #4]
#ifndef perfect
	sprintf(buff_transmit, "\nSUCCESS\n\n");
 800bbb4:	4910      	ldr	r1, [pc, #64]	@ (800bbf8 <HAL_SPI_RxCpltCallback+0x4c>)
 800bbb6:	4811      	ldr	r0, [pc, #68]	@ (800bbfc <HAL_SPI_RxCpltCallback+0x50>)
 800bbb8:	f011 ff44 	bl	801da44 <siprintf>
	HAL_UART_Transmit(&Uarts, (uint8_t*)buff_transmit, strlen(buff_transmit), 1000);
 800bbbc:	480f      	ldr	r0, [pc, #60]	@ (800bbfc <HAL_SPI_RxCpltCallback+0x50>)
 800bbbe:	f7f4 fb57 	bl	8000270 <strlen>
 800bbc2:	4603      	mov	r3, r0
 800bbc4:	b29a      	uxth	r2, r3
 800bbc6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800bbca:	490c      	ldr	r1, [pc, #48]	@ (800bbfc <HAL_SPI_RxCpltCallback+0x50>)
 800bbcc:	480c      	ldr	r0, [pc, #48]	@ (800bc00 <HAL_SPI_RxCpltCallback+0x54>)
 800bbce:	f008 fca8 	bl	8014522 <HAL_UART_Transmit>
	sys.transmit=1;
 800bbd2:	4a0c      	ldr	r2, [pc, #48]	@ (800bc04 <HAL_SPI_RxCpltCallback+0x58>)
 800bbd4:	6813      	ldr	r3, [r2, #0]
 800bbd6:	f043 0301 	orr.w	r3, r3, #1
 800bbda:	6013      	str	r3, [r2, #0]
	sys.i2c=0;
 800bbdc:	4a09      	ldr	r2, [pc, #36]	@ (800bc04 <HAL_SPI_RxCpltCallback+0x58>)
 800bbde:	6813      	ldr	r3, [r2, #0]
 800bbe0:	f36f 13c7 	bfc	r3, #7, #1
 800bbe4:	6013      	str	r3, [r2, #0]
#endif
	HAL_SPI_Receive_IT(&hspi1,(uint8_t*) buff_transmit, 1);
 800bbe6:	2201      	movs	r2, #1
 800bbe8:	4904      	ldr	r1, [pc, #16]	@ (800bbfc <HAL_SPI_RxCpltCallback+0x50>)
 800bbea:	4807      	ldr	r0, [pc, #28]	@ (800bc08 <HAL_SPI_RxCpltCallback+0x5c>)
 800bbec:	f006 fd44 	bl	8012678 <HAL_SPI_Receive_IT>
}
 800bbf0:	bf00      	nop
 800bbf2:	3708      	adds	r7, #8
 800bbf4:	46bd      	mov	sp, r7
 800bbf6:	bd80      	pop	{r7, pc}
 800bbf8:	08021dac 	.word	0x08021dac
 800bbfc:	20009a84 	.word	0x20009a84
 800bc00:	20009c60 	.word	0x20009c60
 800bc04:	20008bf8 	.word	0x20008bf8
 800bc08:	20009924 	.word	0x20009924

0800bc0c <Error_Handler>:

void Error_Handler(void) {
 800bc0c:	b480      	push	{r7}
 800bc0e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800bc10:	b672      	cpsid	i
}
 800bc12:	bf00      	nop

	__disable_irq();
	while (1) {
 800bc14:	bf00      	nop
 800bc16:	e7fd      	b.n	800bc14 <Error_Handler+0x8>

0800bc18 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800bc18:	b580      	push	{r7, lr}
 800bc1a:	b08c      	sub	sp, #48	@ 0x30
 800bc1c:	af00      	add	r7, sp, #0
 800bc1e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800bc20:	2300      	movs	r3, #0
 800bc22:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t              uwPrescalerValue = 0;
 800bc24:	2300      	movs	r3, #0
 800bc26:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  /*Configure the TIM2 IRQ priority */
  HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority ,0);
 800bc28:	2200      	movs	r2, #0
 800bc2a:	6879      	ldr	r1, [r7, #4]
 800bc2c:	201c      	movs	r0, #28
 800bc2e:	f001 f941 	bl	800ceb4 <HAL_NVIC_SetPriority>

  /* Enable the TIM2 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800bc32:	201c      	movs	r0, #28
 800bc34:	f001 f95a 	bl	800ceec <HAL_NVIC_EnableIRQ>
  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 800bc38:	2300      	movs	r3, #0
 800bc3a:	60fb      	str	r3, [r7, #12]
 800bc3c:	4b20      	ldr	r3, [pc, #128]	@ (800bcc0 <HAL_InitTick+0xa8>)
 800bc3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bc40:	4a1f      	ldr	r2, [pc, #124]	@ (800bcc0 <HAL_InitTick+0xa8>)
 800bc42:	f043 0301 	orr.w	r3, r3, #1
 800bc46:	6413      	str	r3, [r2, #64]	@ 0x40
 800bc48:	4b1d      	ldr	r3, [pc, #116]	@ (800bcc0 <HAL_InitTick+0xa8>)
 800bc4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bc4c:	f003 0301 	and.w	r3, r3, #1
 800bc50:	60fb      	str	r3, [r7, #12]
 800bc52:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800bc54:	f107 0210 	add.w	r2, r7, #16
 800bc58:	f107 0314 	add.w	r3, r7, #20
 800bc5c:	4611      	mov	r1, r2
 800bc5e:	4618      	mov	r0, r3
 800bc60:	f006 fc4e 	bl	8012500 <HAL_RCC_GetClockConfig>

  /* Compute TIM2 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 800bc64:	f006 fc24 	bl	80124b0 <HAL_RCC_GetPCLK1Freq>
 800bc68:	4603      	mov	r3, r0
 800bc6a:	005b      	lsls	r3, r3, #1
 800bc6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800bc6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bc70:	4a14      	ldr	r2, [pc, #80]	@ (800bcc4 <HAL_InitTick+0xac>)
 800bc72:	fba2 2303 	umull	r2, r3, r2, r3
 800bc76:	0c9b      	lsrs	r3, r3, #18
 800bc78:	3b01      	subs	r3, #1
 800bc7a:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 800bc7c:	4b12      	ldr	r3, [pc, #72]	@ (800bcc8 <HAL_InitTick+0xb0>)
 800bc7e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800bc82:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 800bc84:	4b10      	ldr	r3, [pc, #64]	@ (800bcc8 <HAL_InitTick+0xb0>)
 800bc86:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800bc8a:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 800bc8c:	4a0e      	ldr	r2, [pc, #56]	@ (800bcc8 <HAL_InitTick+0xb0>)
 800bc8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bc90:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 800bc92:	4b0d      	ldr	r3, [pc, #52]	@ (800bcc8 <HAL_InitTick+0xb0>)
 800bc94:	2200      	movs	r2, #0
 800bc96:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800bc98:	4b0b      	ldr	r3, [pc, #44]	@ (800bcc8 <HAL_InitTick+0xb0>)
 800bc9a:	2200      	movs	r2, #0
 800bc9c:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim2) == HAL_OK)
 800bc9e:	480a      	ldr	r0, [pc, #40]	@ (800bcc8 <HAL_InitTick+0xb0>)
 800bca0:	f007 fa25 	bl	80130ee <HAL_TIM_Base_Init>
 800bca4:	4603      	mov	r3, r0
 800bca6:	2b00      	cmp	r3, #0
 800bca8:	d104      	bne.n	800bcb4 <HAL_InitTick+0x9c>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim2);
 800bcaa:	4807      	ldr	r0, [pc, #28]	@ (800bcc8 <HAL_InitTick+0xb0>)
 800bcac:	f007 fad6 	bl	801325c <HAL_TIM_Base_Start_IT>
 800bcb0:	4603      	mov	r3, r0
 800bcb2:	e000      	b.n	800bcb6 <HAL_InitTick+0x9e>
  }

  /* Return function status */
  return HAL_ERROR;
 800bcb4:	2301      	movs	r3, #1
}
 800bcb6:	4618      	mov	r0, r3
 800bcb8:	3730      	adds	r7, #48	@ 0x30
 800bcba:	46bd      	mov	sp, r7
 800bcbc:	bd80      	pop	{r7, pc}
 800bcbe:	bf00      	nop
 800bcc0:	40023800 	.word	0x40023800
 800bcc4:	431bde83 	.word	0x431bde83
 800bcc8:	2000682c 	.word	0x2000682c

0800bccc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800bccc:	b480      	push	{r7}
 800bcce:	af00      	add	r7, sp, #0
	return 1;
 800bcd0:	2301      	movs	r3, #1
}
 800bcd2:	4618      	mov	r0, r3
 800bcd4:	46bd      	mov	sp, r7
 800bcd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcda:	4770      	bx	lr

0800bcdc <_kill>:

int _kill(int pid, int sig)
{
 800bcdc:	b580      	push	{r7, lr}
 800bcde:	b082      	sub	sp, #8
 800bce0:	af00      	add	r7, sp, #0
 800bce2:	6078      	str	r0, [r7, #4]
 800bce4:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800bce6:	f011 ffe1 	bl	801dcac <__errno>
 800bcea:	4603      	mov	r3, r0
 800bcec:	2216      	movs	r2, #22
 800bcee:	601a      	str	r2, [r3, #0]
	return -1;
 800bcf0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 800bcf4:	4618      	mov	r0, r3
 800bcf6:	3708      	adds	r7, #8
 800bcf8:	46bd      	mov	sp, r7
 800bcfa:	bd80      	pop	{r7, pc}

0800bcfc <_exit>:

void _exit (int status)
{
 800bcfc:	b580      	push	{r7, lr}
 800bcfe:	b082      	sub	sp, #8
 800bd00:	af00      	add	r7, sp, #0
 800bd02:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800bd04:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800bd08:	6878      	ldr	r0, [r7, #4]
 800bd0a:	f7ff ffe7 	bl	800bcdc <_kill>
	while (1) {}		/* Make sure we hang here */
 800bd0e:	bf00      	nop
 800bd10:	e7fd      	b.n	800bd0e <_exit+0x12>

0800bd12 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800bd12:	b580      	push	{r7, lr}
 800bd14:	b086      	sub	sp, #24
 800bd16:	af00      	add	r7, sp, #0
 800bd18:	60f8      	str	r0, [r7, #12]
 800bd1a:	60b9      	str	r1, [r7, #8]
 800bd1c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800bd1e:	2300      	movs	r3, #0
 800bd20:	617b      	str	r3, [r7, #20]
 800bd22:	e00a      	b.n	800bd3a <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800bd24:	f3af 8000 	nop.w
 800bd28:	4601      	mov	r1, r0
 800bd2a:	68bb      	ldr	r3, [r7, #8]
 800bd2c:	1c5a      	adds	r2, r3, #1
 800bd2e:	60ba      	str	r2, [r7, #8]
 800bd30:	b2ca      	uxtb	r2, r1
 800bd32:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800bd34:	697b      	ldr	r3, [r7, #20]
 800bd36:	3301      	adds	r3, #1
 800bd38:	617b      	str	r3, [r7, #20]
 800bd3a:	697a      	ldr	r2, [r7, #20]
 800bd3c:	687b      	ldr	r3, [r7, #4]
 800bd3e:	429a      	cmp	r2, r3
 800bd40:	dbf0      	blt.n	800bd24 <_read+0x12>
	}

return len;
 800bd42:	687b      	ldr	r3, [r7, #4]
}
 800bd44:	4618      	mov	r0, r3
 800bd46:	3718      	adds	r7, #24
 800bd48:	46bd      	mov	sp, r7
 800bd4a:	bd80      	pop	{r7, pc}

0800bd4c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800bd4c:	b580      	push	{r7, lr}
 800bd4e:	b086      	sub	sp, #24
 800bd50:	af00      	add	r7, sp, #0
 800bd52:	60f8      	str	r0, [r7, #12]
 800bd54:	60b9      	str	r1, [r7, #8]
 800bd56:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800bd58:	2300      	movs	r3, #0
 800bd5a:	617b      	str	r3, [r7, #20]
 800bd5c:	e009      	b.n	800bd72 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800bd5e:	68bb      	ldr	r3, [r7, #8]
 800bd60:	1c5a      	adds	r2, r3, #1
 800bd62:	60ba      	str	r2, [r7, #8]
 800bd64:	781b      	ldrb	r3, [r3, #0]
 800bd66:	4618      	mov	r0, r3
 800bd68:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800bd6c:	697b      	ldr	r3, [r7, #20]
 800bd6e:	3301      	adds	r3, #1
 800bd70:	617b      	str	r3, [r7, #20]
 800bd72:	697a      	ldr	r2, [r7, #20]
 800bd74:	687b      	ldr	r3, [r7, #4]
 800bd76:	429a      	cmp	r2, r3
 800bd78:	dbf1      	blt.n	800bd5e <_write+0x12>
	}
	return len;
 800bd7a:	687b      	ldr	r3, [r7, #4]
}
 800bd7c:	4618      	mov	r0, r3
 800bd7e:	3718      	adds	r7, #24
 800bd80:	46bd      	mov	sp, r7
 800bd82:	bd80      	pop	{r7, pc}

0800bd84 <_close>:

int _close(int file)
{
 800bd84:	b480      	push	{r7}
 800bd86:	b083      	sub	sp, #12
 800bd88:	af00      	add	r7, sp, #0
 800bd8a:	6078      	str	r0, [r7, #4]
	return -1;
 800bd8c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 800bd90:	4618      	mov	r0, r3
 800bd92:	370c      	adds	r7, #12
 800bd94:	46bd      	mov	sp, r7
 800bd96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd9a:	4770      	bx	lr

0800bd9c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800bd9c:	b480      	push	{r7}
 800bd9e:	b083      	sub	sp, #12
 800bda0:	af00      	add	r7, sp, #0
 800bda2:	6078      	str	r0, [r7, #4]
 800bda4:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800bda6:	683b      	ldr	r3, [r7, #0]
 800bda8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800bdac:	605a      	str	r2, [r3, #4]
	return 0;
 800bdae:	2300      	movs	r3, #0
}
 800bdb0:	4618      	mov	r0, r3
 800bdb2:	370c      	adds	r7, #12
 800bdb4:	46bd      	mov	sp, r7
 800bdb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdba:	4770      	bx	lr

0800bdbc <_isatty>:

int _isatty(int file)
{
 800bdbc:	b480      	push	{r7}
 800bdbe:	b083      	sub	sp, #12
 800bdc0:	af00      	add	r7, sp, #0
 800bdc2:	6078      	str	r0, [r7, #4]
	return 1;
 800bdc4:	2301      	movs	r3, #1
}
 800bdc6:	4618      	mov	r0, r3
 800bdc8:	370c      	adds	r7, #12
 800bdca:	46bd      	mov	sp, r7
 800bdcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdd0:	4770      	bx	lr

0800bdd2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800bdd2:	b480      	push	{r7}
 800bdd4:	b085      	sub	sp, #20
 800bdd6:	af00      	add	r7, sp, #0
 800bdd8:	60f8      	str	r0, [r7, #12]
 800bdda:	60b9      	str	r1, [r7, #8]
 800bddc:	607a      	str	r2, [r7, #4]
	return 0;
 800bdde:	2300      	movs	r3, #0
}
 800bde0:	4618      	mov	r0, r3
 800bde2:	3714      	adds	r7, #20
 800bde4:	46bd      	mov	sp, r7
 800bde6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdea:	4770      	bx	lr

0800bdec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800bdec:	b580      	push	{r7, lr}
 800bdee:	b086      	sub	sp, #24
 800bdf0:	af00      	add	r7, sp, #0
 800bdf2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800bdf4:	4a14      	ldr	r2, [pc, #80]	@ (800be48 <_sbrk+0x5c>)
 800bdf6:	4b15      	ldr	r3, [pc, #84]	@ (800be4c <_sbrk+0x60>)
 800bdf8:	1ad3      	subs	r3, r2, r3
 800bdfa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800bdfc:	697b      	ldr	r3, [r7, #20]
 800bdfe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800be00:	4b13      	ldr	r3, [pc, #76]	@ (800be50 <_sbrk+0x64>)
 800be02:	681b      	ldr	r3, [r3, #0]
 800be04:	2b00      	cmp	r3, #0
 800be06:	d102      	bne.n	800be0e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800be08:	4b11      	ldr	r3, [pc, #68]	@ (800be50 <_sbrk+0x64>)
 800be0a:	4a12      	ldr	r2, [pc, #72]	@ (800be54 <_sbrk+0x68>)
 800be0c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800be0e:	4b10      	ldr	r3, [pc, #64]	@ (800be50 <_sbrk+0x64>)
 800be10:	681a      	ldr	r2, [r3, #0]
 800be12:	687b      	ldr	r3, [r7, #4]
 800be14:	4413      	add	r3, r2
 800be16:	693a      	ldr	r2, [r7, #16]
 800be18:	429a      	cmp	r2, r3
 800be1a:	d207      	bcs.n	800be2c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800be1c:	f011 ff46 	bl	801dcac <__errno>
 800be20:	4603      	mov	r3, r0
 800be22:	220c      	movs	r2, #12
 800be24:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800be26:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800be2a:	e009      	b.n	800be40 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800be2c:	4b08      	ldr	r3, [pc, #32]	@ (800be50 <_sbrk+0x64>)
 800be2e:	681b      	ldr	r3, [r3, #0]
 800be30:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800be32:	4b07      	ldr	r3, [pc, #28]	@ (800be50 <_sbrk+0x64>)
 800be34:	681a      	ldr	r2, [r3, #0]
 800be36:	687b      	ldr	r3, [r7, #4]
 800be38:	4413      	add	r3, r2
 800be3a:	4a05      	ldr	r2, [pc, #20]	@ (800be50 <_sbrk+0x64>)
 800be3c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800be3e:	68fb      	ldr	r3, [r7, #12]
}
 800be40:	4618      	mov	r0, r3
 800be42:	3718      	adds	r7, #24
 800be44:	46bd      	mov	sp, r7
 800be46:	bd80      	pop	{r7, pc}
 800be48:	20020000 	.word	0x20020000
 800be4c:	00000400 	.word	0x00000400
 800be50:	20001650 	.word	0x20001650
 800be54:	2000bdf0 	.word	0x2000bdf0

0800be58 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800be58:	b480      	push	{r7}
 800be5a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800be5c:	4b08      	ldr	r3, [pc, #32]	@ (800be80 <SystemInit+0x28>)
 800be5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800be62:	4a07      	ldr	r2, [pc, #28]	@ (800be80 <SystemInit+0x28>)
 800be64:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800be68:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800be6c:	4b04      	ldr	r3, [pc, #16]	@ (800be80 <SystemInit+0x28>)
 800be6e:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800be72:	609a      	str	r2, [r3, #8]
#endif
}
 800be74:	bf00      	nop
 800be76:	46bd      	mov	sp, r7
 800be78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be7c:	4770      	bx	lr
 800be7e:	bf00      	nop
 800be80:	e000ed00 	.word	0xe000ed00

0800be84 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800be84:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800bebc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800be88:	480d      	ldr	r0, [pc, #52]	@ (800bec0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800be8a:	490e      	ldr	r1, [pc, #56]	@ (800bec4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800be8c:	4a0e      	ldr	r2, [pc, #56]	@ (800bec8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800be8e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800be90:	e002      	b.n	800be98 <LoopCopyDataInit>

0800be92 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800be92:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800be94:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800be96:	3304      	adds	r3, #4

0800be98 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800be98:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800be9a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800be9c:	d3f9      	bcc.n	800be92 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800be9e:	4a0b      	ldr	r2, [pc, #44]	@ (800becc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800bea0:	4c0b      	ldr	r4, [pc, #44]	@ (800bed0 <LoopFillZerobss+0x26>)
  movs r3, #0
 800bea2:	2300      	movs	r3, #0
  b LoopFillZerobss
 800bea4:	e001      	b.n	800beaa <LoopFillZerobss>

0800bea6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800bea6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800bea8:	3204      	adds	r2, #4

0800beaa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800beaa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800beac:	d3fb      	bcc.n	800bea6 <FillZerobss>


/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800beae:	f7ff ffd3 	bl	800be58 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800beb2:	f011 ff01 	bl	801dcb8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800beb6:	f7f8 fc2d 	bl	8004714 <main>
  bx  lr    
 800beba:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800bebc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800bec0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800bec4:	200002c8 	.word	0x200002c8
  ldr r2, =_sidata
 800bec8:	08022430 	.word	0x08022430
  ldr r2, =_sbss
 800becc:	200002c8 	.word	0x200002c8
  ldr r4, =_ebss
 800bed0:	2000bdf0 	.word	0x2000bdf0

0800bed4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800bed4:	e7fe      	b.n	800bed4 <ADC_IRQHandler>
	...

0800bed8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800bed8:	b580      	push	{r7, lr}
 800beda:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800bedc:	4b0e      	ldr	r3, [pc, #56]	@ (800bf18 <HAL_Init+0x40>)
 800bede:	681b      	ldr	r3, [r3, #0]
 800bee0:	4a0d      	ldr	r2, [pc, #52]	@ (800bf18 <HAL_Init+0x40>)
 800bee2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800bee6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800bee8:	4b0b      	ldr	r3, [pc, #44]	@ (800bf18 <HAL_Init+0x40>)
 800beea:	681b      	ldr	r3, [r3, #0]
 800beec:	4a0a      	ldr	r2, [pc, #40]	@ (800bf18 <HAL_Init+0x40>)
 800beee:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800bef2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800bef4:	4b08      	ldr	r3, [pc, #32]	@ (800bf18 <HAL_Init+0x40>)
 800bef6:	681b      	ldr	r3, [r3, #0]
 800bef8:	4a07      	ldr	r2, [pc, #28]	@ (800bf18 <HAL_Init+0x40>)
 800befa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800befe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800bf00:	2003      	movs	r0, #3
 800bf02:	f000 ffcc 	bl	800ce9e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800bf06:	200f      	movs	r0, #15
 800bf08:	f7ff fe86 	bl	800bc18 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800bf0c:	f7f6 f9c2 	bl	8002294 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800bf10:	2300      	movs	r3, #0
}
 800bf12:	4618      	mov	r0, r3
 800bf14:	bd80      	pop	{r7, pc}
 800bf16:	bf00      	nop
 800bf18:	40023c00 	.word	0x40023c00

0800bf1c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800bf1c:	b480      	push	{r7}
 800bf1e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800bf20:	4b06      	ldr	r3, [pc, #24]	@ (800bf3c <HAL_IncTick+0x20>)
 800bf22:	781b      	ldrb	r3, [r3, #0]
 800bf24:	461a      	mov	r2, r3
 800bf26:	4b06      	ldr	r3, [pc, #24]	@ (800bf40 <HAL_IncTick+0x24>)
 800bf28:	681b      	ldr	r3, [r3, #0]
 800bf2a:	4413      	add	r3, r2
 800bf2c:	4a04      	ldr	r2, [pc, #16]	@ (800bf40 <HAL_IncTick+0x24>)
 800bf2e:	6013      	str	r3, [r2, #0]
}
 800bf30:	bf00      	nop
 800bf32:	46bd      	mov	sp, r7
 800bf34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf38:	4770      	bx	lr
 800bf3a:	bf00      	nop
 800bf3c:	2000006c 	.word	0x2000006c
 800bf40:	2000bdac 	.word	0x2000bdac

0800bf44 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800bf44:	b480      	push	{r7}
 800bf46:	af00      	add	r7, sp, #0
  return uwTick;
 800bf48:	4b03      	ldr	r3, [pc, #12]	@ (800bf58 <HAL_GetTick+0x14>)
 800bf4a:	681b      	ldr	r3, [r3, #0]
}
 800bf4c:	4618      	mov	r0, r3
 800bf4e:	46bd      	mov	sp, r7
 800bf50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf54:	4770      	bx	lr
 800bf56:	bf00      	nop
 800bf58:	2000bdac 	.word	0x2000bdac

0800bf5c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800bf5c:	b580      	push	{r7, lr}
 800bf5e:	b084      	sub	sp, #16
 800bf60:	af00      	add	r7, sp, #0
 800bf62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800bf64:	f7ff ffee 	bl	800bf44 <HAL_GetTick>
 800bf68:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800bf6a:	687b      	ldr	r3, [r7, #4]
 800bf6c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800bf6e:	68fb      	ldr	r3, [r7, #12]
 800bf70:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800bf74:	d005      	beq.n	800bf82 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800bf76:	4b0a      	ldr	r3, [pc, #40]	@ (800bfa0 <HAL_Delay+0x44>)
 800bf78:	781b      	ldrb	r3, [r3, #0]
 800bf7a:	461a      	mov	r2, r3
 800bf7c:	68fb      	ldr	r3, [r7, #12]
 800bf7e:	4413      	add	r3, r2
 800bf80:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800bf82:	bf00      	nop
 800bf84:	f7ff ffde 	bl	800bf44 <HAL_GetTick>
 800bf88:	4602      	mov	r2, r0
 800bf8a:	68bb      	ldr	r3, [r7, #8]
 800bf8c:	1ad3      	subs	r3, r2, r3
 800bf8e:	68fa      	ldr	r2, [r7, #12]
 800bf90:	429a      	cmp	r2, r3
 800bf92:	d8f7      	bhi.n	800bf84 <HAL_Delay+0x28>
  {
  }
}
 800bf94:	bf00      	nop
 800bf96:	bf00      	nop
 800bf98:	3710      	adds	r7, #16
 800bf9a:	46bd      	mov	sp, r7
 800bf9c:	bd80      	pop	{r7, pc}
 800bf9e:	bf00      	nop
 800bfa0:	2000006c 	.word	0x2000006c

0800bfa4 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 800bfa4:	b580      	push	{r7, lr}
 800bfa6:	b084      	sub	sp, #16
 800bfa8:	af00      	add	r7, sp, #0
 800bfaa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 800bfac:	687b      	ldr	r3, [r7, #4]
 800bfae:	2b00      	cmp	r3, #0
 800bfb0:	d101      	bne.n	800bfb6 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800bfb2:	2301      	movs	r3, #1
 800bfb4:	e0ed      	b.n	800c192 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800bfb6:	687b      	ldr	r3, [r7, #4]
 800bfb8:	f893 3020 	ldrb.w	r3, [r3, #32]
 800bfbc:	b2db      	uxtb	r3, r3
 800bfbe:	2b00      	cmp	r3, #0
 800bfc0:	d102      	bne.n	800bfc8 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800bfc2:	6878      	ldr	r0, [r7, #4]
 800bfc4:	f7f6 f992 	bl	80022ec <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800bfc8:	687b      	ldr	r3, [r7, #4]
 800bfca:	681b      	ldr	r3, [r3, #0]
 800bfcc:	681a      	ldr	r2, [r3, #0]
 800bfce:	687b      	ldr	r3, [r7, #4]
 800bfd0:	681b      	ldr	r3, [r3, #0]
 800bfd2:	f042 0201 	orr.w	r2, r2, #1
 800bfd6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800bfd8:	f7ff ffb4 	bl	800bf44 <HAL_GetTick>
 800bfdc:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800bfde:	e012      	b.n	800c006 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800bfe0:	f7ff ffb0 	bl	800bf44 <HAL_GetTick>
 800bfe4:	4602      	mov	r2, r0
 800bfe6:	68fb      	ldr	r3, [r7, #12]
 800bfe8:	1ad3      	subs	r3, r2, r3
 800bfea:	2b0a      	cmp	r3, #10
 800bfec:	d90b      	bls.n	800c006 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800bfee:	687b      	ldr	r3, [r7, #4]
 800bff0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bff2:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800bff6:	687b      	ldr	r3, [r7, #4]
 800bff8:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800bffa:	687b      	ldr	r3, [r7, #4]
 800bffc:	2205      	movs	r2, #5
 800bffe:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800c002:	2301      	movs	r3, #1
 800c004:	e0c5      	b.n	800c192 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800c006:	687b      	ldr	r3, [r7, #4]
 800c008:	681b      	ldr	r3, [r3, #0]
 800c00a:	685b      	ldr	r3, [r3, #4]
 800c00c:	f003 0301 	and.w	r3, r3, #1
 800c010:	2b00      	cmp	r3, #0
 800c012:	d0e5      	beq.n	800bfe0 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800c014:	687b      	ldr	r3, [r7, #4]
 800c016:	681b      	ldr	r3, [r3, #0]
 800c018:	681a      	ldr	r2, [r3, #0]
 800c01a:	687b      	ldr	r3, [r7, #4]
 800c01c:	681b      	ldr	r3, [r3, #0]
 800c01e:	f022 0202 	bic.w	r2, r2, #2
 800c022:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800c024:	f7ff ff8e 	bl	800bf44 <HAL_GetTick>
 800c028:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800c02a:	e012      	b.n	800c052 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800c02c:	f7ff ff8a 	bl	800bf44 <HAL_GetTick>
 800c030:	4602      	mov	r2, r0
 800c032:	68fb      	ldr	r3, [r7, #12]
 800c034:	1ad3      	subs	r3, r2, r3
 800c036:	2b0a      	cmp	r3, #10
 800c038:	d90b      	bls.n	800c052 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800c03a:	687b      	ldr	r3, [r7, #4]
 800c03c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c03e:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800c042:	687b      	ldr	r3, [r7, #4]
 800c044:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800c046:	687b      	ldr	r3, [r7, #4]
 800c048:	2205      	movs	r2, #5
 800c04a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800c04e:	2301      	movs	r3, #1
 800c050:	e09f      	b.n	800c192 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800c052:	687b      	ldr	r3, [r7, #4]
 800c054:	681b      	ldr	r3, [r3, #0]
 800c056:	685b      	ldr	r3, [r3, #4]
 800c058:	f003 0302 	and.w	r3, r3, #2
 800c05c:	2b00      	cmp	r3, #0
 800c05e:	d1e5      	bne.n	800c02c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800c060:	687b      	ldr	r3, [r7, #4]
 800c062:	7e1b      	ldrb	r3, [r3, #24]
 800c064:	2b01      	cmp	r3, #1
 800c066:	d108      	bne.n	800c07a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800c068:	687b      	ldr	r3, [r7, #4]
 800c06a:	681b      	ldr	r3, [r3, #0]
 800c06c:	681a      	ldr	r2, [r3, #0]
 800c06e:	687b      	ldr	r3, [r7, #4]
 800c070:	681b      	ldr	r3, [r3, #0]
 800c072:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800c076:	601a      	str	r2, [r3, #0]
 800c078:	e007      	b.n	800c08a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800c07a:	687b      	ldr	r3, [r7, #4]
 800c07c:	681b      	ldr	r3, [r3, #0]
 800c07e:	681a      	ldr	r2, [r3, #0]
 800c080:	687b      	ldr	r3, [r7, #4]
 800c082:	681b      	ldr	r3, [r3, #0]
 800c084:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800c088:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800c08a:	687b      	ldr	r3, [r7, #4]
 800c08c:	7e5b      	ldrb	r3, [r3, #25]
 800c08e:	2b01      	cmp	r3, #1
 800c090:	d108      	bne.n	800c0a4 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800c092:	687b      	ldr	r3, [r7, #4]
 800c094:	681b      	ldr	r3, [r3, #0]
 800c096:	681a      	ldr	r2, [r3, #0]
 800c098:	687b      	ldr	r3, [r7, #4]
 800c09a:	681b      	ldr	r3, [r3, #0]
 800c09c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800c0a0:	601a      	str	r2, [r3, #0]
 800c0a2:	e007      	b.n	800c0b4 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800c0a4:	687b      	ldr	r3, [r7, #4]
 800c0a6:	681b      	ldr	r3, [r3, #0]
 800c0a8:	681a      	ldr	r2, [r3, #0]
 800c0aa:	687b      	ldr	r3, [r7, #4]
 800c0ac:	681b      	ldr	r3, [r3, #0]
 800c0ae:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800c0b2:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 800c0b4:	687b      	ldr	r3, [r7, #4]
 800c0b6:	7e9b      	ldrb	r3, [r3, #26]
 800c0b8:	2b01      	cmp	r3, #1
 800c0ba:	d108      	bne.n	800c0ce <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800c0bc:	687b      	ldr	r3, [r7, #4]
 800c0be:	681b      	ldr	r3, [r3, #0]
 800c0c0:	681a      	ldr	r2, [r3, #0]
 800c0c2:	687b      	ldr	r3, [r7, #4]
 800c0c4:	681b      	ldr	r3, [r3, #0]
 800c0c6:	f042 0220 	orr.w	r2, r2, #32
 800c0ca:	601a      	str	r2, [r3, #0]
 800c0cc:	e007      	b.n	800c0de <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800c0ce:	687b      	ldr	r3, [r7, #4]
 800c0d0:	681b      	ldr	r3, [r3, #0]
 800c0d2:	681a      	ldr	r2, [r3, #0]
 800c0d4:	687b      	ldr	r3, [r7, #4]
 800c0d6:	681b      	ldr	r3, [r3, #0]
 800c0d8:	f022 0220 	bic.w	r2, r2, #32
 800c0dc:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800c0de:	687b      	ldr	r3, [r7, #4]
 800c0e0:	7edb      	ldrb	r3, [r3, #27]
 800c0e2:	2b01      	cmp	r3, #1
 800c0e4:	d108      	bne.n	800c0f8 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800c0e6:	687b      	ldr	r3, [r7, #4]
 800c0e8:	681b      	ldr	r3, [r3, #0]
 800c0ea:	681a      	ldr	r2, [r3, #0]
 800c0ec:	687b      	ldr	r3, [r7, #4]
 800c0ee:	681b      	ldr	r3, [r3, #0]
 800c0f0:	f022 0210 	bic.w	r2, r2, #16
 800c0f4:	601a      	str	r2, [r3, #0]
 800c0f6:	e007      	b.n	800c108 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800c0f8:	687b      	ldr	r3, [r7, #4]
 800c0fa:	681b      	ldr	r3, [r3, #0]
 800c0fc:	681a      	ldr	r2, [r3, #0]
 800c0fe:	687b      	ldr	r3, [r7, #4]
 800c100:	681b      	ldr	r3, [r3, #0]
 800c102:	f042 0210 	orr.w	r2, r2, #16
 800c106:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 800c108:	687b      	ldr	r3, [r7, #4]
 800c10a:	7f1b      	ldrb	r3, [r3, #28]
 800c10c:	2b01      	cmp	r3, #1
 800c10e:	d108      	bne.n	800c122 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800c110:	687b      	ldr	r3, [r7, #4]
 800c112:	681b      	ldr	r3, [r3, #0]
 800c114:	681a      	ldr	r2, [r3, #0]
 800c116:	687b      	ldr	r3, [r7, #4]
 800c118:	681b      	ldr	r3, [r3, #0]
 800c11a:	f042 0208 	orr.w	r2, r2, #8
 800c11e:	601a      	str	r2, [r3, #0]
 800c120:	e007      	b.n	800c132 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800c122:	687b      	ldr	r3, [r7, #4]
 800c124:	681b      	ldr	r3, [r3, #0]
 800c126:	681a      	ldr	r2, [r3, #0]
 800c128:	687b      	ldr	r3, [r7, #4]
 800c12a:	681b      	ldr	r3, [r3, #0]
 800c12c:	f022 0208 	bic.w	r2, r2, #8
 800c130:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800c132:	687b      	ldr	r3, [r7, #4]
 800c134:	7f5b      	ldrb	r3, [r3, #29]
 800c136:	2b01      	cmp	r3, #1
 800c138:	d108      	bne.n	800c14c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800c13a:	687b      	ldr	r3, [r7, #4]
 800c13c:	681b      	ldr	r3, [r3, #0]
 800c13e:	681a      	ldr	r2, [r3, #0]
 800c140:	687b      	ldr	r3, [r7, #4]
 800c142:	681b      	ldr	r3, [r3, #0]
 800c144:	f042 0204 	orr.w	r2, r2, #4
 800c148:	601a      	str	r2, [r3, #0]
 800c14a:	e007      	b.n	800c15c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800c14c:	687b      	ldr	r3, [r7, #4]
 800c14e:	681b      	ldr	r3, [r3, #0]
 800c150:	681a      	ldr	r2, [r3, #0]
 800c152:	687b      	ldr	r3, [r7, #4]
 800c154:	681b      	ldr	r3, [r3, #0]
 800c156:	f022 0204 	bic.w	r2, r2, #4
 800c15a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800c15c:	687b      	ldr	r3, [r7, #4]
 800c15e:	689a      	ldr	r2, [r3, #8]
 800c160:	687b      	ldr	r3, [r7, #4]
 800c162:	68db      	ldr	r3, [r3, #12]
 800c164:	431a      	orrs	r2, r3
 800c166:	687b      	ldr	r3, [r7, #4]
 800c168:	691b      	ldr	r3, [r3, #16]
 800c16a:	431a      	orrs	r2, r3
 800c16c:	687b      	ldr	r3, [r7, #4]
 800c16e:	695b      	ldr	r3, [r3, #20]
 800c170:	ea42 0103 	orr.w	r1, r2, r3
 800c174:	687b      	ldr	r3, [r7, #4]
 800c176:	685b      	ldr	r3, [r3, #4]
 800c178:	1e5a      	subs	r2, r3, #1
 800c17a:	687b      	ldr	r3, [r7, #4]
 800c17c:	681b      	ldr	r3, [r3, #0]
 800c17e:	430a      	orrs	r2, r1
 800c180:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800c182:	687b      	ldr	r3, [r7, #4]
 800c184:	2200      	movs	r2, #0
 800c186:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 800c188:	687b      	ldr	r3, [r7, #4]
 800c18a:	2201      	movs	r2, #1
 800c18c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 800c190:	2300      	movs	r3, #0
}
 800c192:	4618      	mov	r0, r3
 800c194:	3710      	adds	r7, #16
 800c196:	46bd      	mov	sp, r7
 800c198:	bd80      	pop	{r7, pc}
	...

0800c19c <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 800c19c:	b480      	push	{r7}
 800c19e:	b087      	sub	sp, #28
 800c1a0:	af00      	add	r7, sp, #0
 800c1a2:	6078      	str	r0, [r7, #4]
 800c1a4:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 800c1a6:	687b      	ldr	r3, [r7, #4]
 800c1a8:	681b      	ldr	r3, [r3, #0]
 800c1aa:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 800c1ac:	687b      	ldr	r3, [r7, #4]
 800c1ae:	f893 3020 	ldrb.w	r3, [r3, #32]
 800c1b2:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 800c1b4:	7cfb      	ldrb	r3, [r7, #19]
 800c1b6:	2b01      	cmp	r3, #1
 800c1b8:	d003      	beq.n	800c1c2 <HAL_CAN_ConfigFilter+0x26>
 800c1ba:	7cfb      	ldrb	r3, [r7, #19]
 800c1bc:	2b02      	cmp	r3, #2
 800c1be:	f040 80be 	bne.w	800c33e <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 800c1c2:	4b65      	ldr	r3, [pc, #404]	@ (800c358 <HAL_CAN_ConfigFilter+0x1bc>)
 800c1c4:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800c1c6:	697b      	ldr	r3, [r7, #20]
 800c1c8:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800c1cc:	f043 0201 	orr.w	r2, r3, #1
 800c1d0:	697b      	ldr	r3, [r7, #20]
 800c1d2:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 800c1d6:	697b      	ldr	r3, [r7, #20]
 800c1d8:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800c1dc:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 800c1e0:	697b      	ldr	r3, [r7, #20]
 800c1e2:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 800c1e6:	697b      	ldr	r3, [r7, #20]
 800c1e8:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 800c1ec:	683b      	ldr	r3, [r7, #0]
 800c1ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c1f0:	021b      	lsls	r3, r3, #8
 800c1f2:	431a      	orrs	r2, r3
 800c1f4:	697b      	ldr	r3, [r7, #20]
 800c1f6:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 800c1fa:	683b      	ldr	r3, [r7, #0]
 800c1fc:	695b      	ldr	r3, [r3, #20]
 800c1fe:	f003 031f 	and.w	r3, r3, #31
 800c202:	2201      	movs	r2, #1
 800c204:	fa02 f303 	lsl.w	r3, r2, r3
 800c208:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 800c20a:	697b      	ldr	r3, [r7, #20]
 800c20c:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 800c210:	68fb      	ldr	r3, [r7, #12]
 800c212:	43db      	mvns	r3, r3
 800c214:	401a      	ands	r2, r3
 800c216:	697b      	ldr	r3, [r7, #20]
 800c218:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 800c21c:	683b      	ldr	r3, [r7, #0]
 800c21e:	69db      	ldr	r3, [r3, #28]
 800c220:	2b00      	cmp	r3, #0
 800c222:	d123      	bne.n	800c26c <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 800c224:	697b      	ldr	r3, [r7, #20]
 800c226:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 800c22a:	68fb      	ldr	r3, [r7, #12]
 800c22c:	43db      	mvns	r3, r3
 800c22e:	401a      	ands	r2, r3
 800c230:	697b      	ldr	r3, [r7, #20]
 800c232:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800c236:	683b      	ldr	r3, [r7, #0]
 800c238:	68db      	ldr	r3, [r3, #12]
 800c23a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800c23c:	683b      	ldr	r3, [r7, #0]
 800c23e:	685b      	ldr	r3, [r3, #4]
 800c240:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800c242:	683a      	ldr	r2, [r7, #0]
 800c244:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800c246:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800c248:	697b      	ldr	r3, [r7, #20]
 800c24a:	3248      	adds	r2, #72	@ 0x48
 800c24c:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800c250:	683b      	ldr	r3, [r7, #0]
 800c252:	689b      	ldr	r3, [r3, #8]
 800c254:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 800c256:	683b      	ldr	r3, [r7, #0]
 800c258:	681b      	ldr	r3, [r3, #0]
 800c25a:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800c25c:	683b      	ldr	r3, [r7, #0]
 800c25e:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800c260:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800c262:	6979      	ldr	r1, [r7, #20]
 800c264:	3348      	adds	r3, #72	@ 0x48
 800c266:	00db      	lsls	r3, r3, #3
 800c268:	440b      	add	r3, r1
 800c26a:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 800c26c:	683b      	ldr	r3, [r7, #0]
 800c26e:	69db      	ldr	r3, [r3, #28]
 800c270:	2b01      	cmp	r3, #1
 800c272:	d122      	bne.n	800c2ba <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 800c274:	697b      	ldr	r3, [r7, #20]
 800c276:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 800c27a:	68fb      	ldr	r3, [r7, #12]
 800c27c:	431a      	orrs	r2, r3
 800c27e:	697b      	ldr	r3, [r7, #20]
 800c280:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800c284:	683b      	ldr	r3, [r7, #0]
 800c286:	681b      	ldr	r3, [r3, #0]
 800c288:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800c28a:	683b      	ldr	r3, [r7, #0]
 800c28c:	685b      	ldr	r3, [r3, #4]
 800c28e:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800c290:	683a      	ldr	r2, [r7, #0]
 800c292:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800c294:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800c296:	697b      	ldr	r3, [r7, #20]
 800c298:	3248      	adds	r2, #72	@ 0x48
 800c29a:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800c29e:	683b      	ldr	r3, [r7, #0]
 800c2a0:	689b      	ldr	r3, [r3, #8]
 800c2a2:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 800c2a4:	683b      	ldr	r3, [r7, #0]
 800c2a6:	68db      	ldr	r3, [r3, #12]
 800c2a8:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800c2aa:	683b      	ldr	r3, [r7, #0]
 800c2ac:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800c2ae:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800c2b0:	6979      	ldr	r1, [r7, #20]
 800c2b2:	3348      	adds	r3, #72	@ 0x48
 800c2b4:	00db      	lsls	r3, r3, #3
 800c2b6:	440b      	add	r3, r1
 800c2b8:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 800c2ba:	683b      	ldr	r3, [r7, #0]
 800c2bc:	699b      	ldr	r3, [r3, #24]
 800c2be:	2b00      	cmp	r3, #0
 800c2c0:	d109      	bne.n	800c2d6 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 800c2c2:	697b      	ldr	r3, [r7, #20]
 800c2c4:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800c2c8:	68fb      	ldr	r3, [r7, #12]
 800c2ca:	43db      	mvns	r3, r3
 800c2cc:	401a      	ands	r2, r3
 800c2ce:	697b      	ldr	r3, [r7, #20]
 800c2d0:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 800c2d4:	e007      	b.n	800c2e6 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 800c2d6:	697b      	ldr	r3, [r7, #20]
 800c2d8:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800c2dc:	68fb      	ldr	r3, [r7, #12]
 800c2de:	431a      	orrs	r2, r3
 800c2e0:	697b      	ldr	r3, [r7, #20]
 800c2e2:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 800c2e6:	683b      	ldr	r3, [r7, #0]
 800c2e8:	691b      	ldr	r3, [r3, #16]
 800c2ea:	2b00      	cmp	r3, #0
 800c2ec:	d109      	bne.n	800c302 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 800c2ee:	697b      	ldr	r3, [r7, #20]
 800c2f0:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 800c2f4:	68fb      	ldr	r3, [r7, #12]
 800c2f6:	43db      	mvns	r3, r3
 800c2f8:	401a      	ands	r2, r3
 800c2fa:	697b      	ldr	r3, [r7, #20]
 800c2fc:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 800c300:	e007      	b.n	800c312 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 800c302:	697b      	ldr	r3, [r7, #20]
 800c304:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 800c308:	68fb      	ldr	r3, [r7, #12]
 800c30a:	431a      	orrs	r2, r3
 800c30c:	697b      	ldr	r3, [r7, #20]
 800c30e:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 800c312:	683b      	ldr	r3, [r7, #0]
 800c314:	6a1b      	ldr	r3, [r3, #32]
 800c316:	2b01      	cmp	r3, #1
 800c318:	d107      	bne.n	800c32a <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 800c31a:	697b      	ldr	r3, [r7, #20]
 800c31c:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 800c320:	68fb      	ldr	r3, [r7, #12]
 800c322:	431a      	orrs	r2, r3
 800c324:	697b      	ldr	r3, [r7, #20]
 800c326:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800c32a:	697b      	ldr	r3, [r7, #20]
 800c32c:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800c330:	f023 0201 	bic.w	r2, r3, #1
 800c334:	697b      	ldr	r3, [r7, #20]
 800c336:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 800c33a:	2300      	movs	r3, #0
 800c33c:	e006      	b.n	800c34c <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800c33e:	687b      	ldr	r3, [r7, #4]
 800c340:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c342:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800c346:	687b      	ldr	r3, [r7, #4]
 800c348:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800c34a:	2301      	movs	r3, #1
  }
}
 800c34c:	4618      	mov	r0, r3
 800c34e:	371c      	adds	r7, #28
 800c350:	46bd      	mov	sp, r7
 800c352:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c356:	4770      	bx	lr
 800c358:	40006400 	.word	0x40006400

0800c35c <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 800c35c:	b580      	push	{r7, lr}
 800c35e:	b084      	sub	sp, #16
 800c360:	af00      	add	r7, sp, #0
 800c362:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 800c364:	687b      	ldr	r3, [r7, #4]
 800c366:	f893 3020 	ldrb.w	r3, [r3, #32]
 800c36a:	b2db      	uxtb	r3, r3
 800c36c:	2b01      	cmp	r3, #1
 800c36e:	d12e      	bne.n	800c3ce <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 800c370:	687b      	ldr	r3, [r7, #4]
 800c372:	2202      	movs	r2, #2
 800c374:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800c378:	687b      	ldr	r3, [r7, #4]
 800c37a:	681b      	ldr	r3, [r3, #0]
 800c37c:	681a      	ldr	r2, [r3, #0]
 800c37e:	687b      	ldr	r3, [r7, #4]
 800c380:	681b      	ldr	r3, [r3, #0]
 800c382:	f022 0201 	bic.w	r2, r2, #1
 800c386:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800c388:	f7ff fddc 	bl	800bf44 <HAL_GetTick>
 800c38c:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800c38e:	e012      	b.n	800c3b6 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800c390:	f7ff fdd8 	bl	800bf44 <HAL_GetTick>
 800c394:	4602      	mov	r2, r0
 800c396:	68fb      	ldr	r3, [r7, #12]
 800c398:	1ad3      	subs	r3, r2, r3
 800c39a:	2b0a      	cmp	r3, #10
 800c39c:	d90b      	bls.n	800c3b6 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800c39e:	687b      	ldr	r3, [r7, #4]
 800c3a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c3a2:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800c3a6:	687b      	ldr	r3, [r7, #4]
 800c3a8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 800c3aa:	687b      	ldr	r3, [r7, #4]
 800c3ac:	2205      	movs	r2, #5
 800c3ae:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800c3b2:	2301      	movs	r3, #1
 800c3b4:	e012      	b.n	800c3dc <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800c3b6:	687b      	ldr	r3, [r7, #4]
 800c3b8:	681b      	ldr	r3, [r3, #0]
 800c3ba:	685b      	ldr	r3, [r3, #4]
 800c3bc:	f003 0301 	and.w	r3, r3, #1
 800c3c0:	2b00      	cmp	r3, #0
 800c3c2:	d1e5      	bne.n	800c390 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800c3c4:	687b      	ldr	r3, [r7, #4]
 800c3c6:	2200      	movs	r2, #0
 800c3c8:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 800c3ca:	2300      	movs	r3, #0
 800c3cc:	e006      	b.n	800c3dc <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 800c3ce:	687b      	ldr	r3, [r7, #4]
 800c3d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c3d2:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 800c3d6:	687b      	ldr	r3, [r7, #4]
 800c3d8:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800c3da:	2301      	movs	r3, #1
  }
}
 800c3dc:	4618      	mov	r0, r3
 800c3de:	3710      	adds	r7, #16
 800c3e0:	46bd      	mov	sp, r7
 800c3e2:	bd80      	pop	{r7, pc}

0800c3e4 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 800c3e4:	b480      	push	{r7}
 800c3e6:	b089      	sub	sp, #36	@ 0x24
 800c3e8:	af00      	add	r7, sp, #0
 800c3ea:	60f8      	str	r0, [r7, #12]
 800c3ec:	60b9      	str	r1, [r7, #8]
 800c3ee:	607a      	str	r2, [r7, #4]
 800c3f0:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 800c3f2:	68fb      	ldr	r3, [r7, #12]
 800c3f4:	f893 3020 	ldrb.w	r3, [r3, #32]
 800c3f8:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 800c3fa:	68fb      	ldr	r3, [r7, #12]
 800c3fc:	681b      	ldr	r3, [r3, #0]
 800c3fe:	689b      	ldr	r3, [r3, #8]
 800c400:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 800c402:	7ffb      	ldrb	r3, [r7, #31]
 800c404:	2b01      	cmp	r3, #1
 800c406:	d003      	beq.n	800c410 <HAL_CAN_AddTxMessage+0x2c>
 800c408:	7ffb      	ldrb	r3, [r7, #31]
 800c40a:	2b02      	cmp	r3, #2
 800c40c:	f040 80b8 	bne.w	800c580 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800c410:	69bb      	ldr	r3, [r7, #24]
 800c412:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800c416:	2b00      	cmp	r3, #0
 800c418:	d10a      	bne.n	800c430 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800c41a:	69bb      	ldr	r3, [r7, #24]
 800c41c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800c420:	2b00      	cmp	r3, #0
 800c422:	d105      	bne.n	800c430 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 800c424:	69bb      	ldr	r3, [r7, #24]
 800c426:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800c42a:	2b00      	cmp	r3, #0
 800c42c:	f000 80a0 	beq.w	800c570 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 800c430:	69bb      	ldr	r3, [r7, #24]
 800c432:	0e1b      	lsrs	r3, r3, #24
 800c434:	f003 0303 	and.w	r3, r3, #3
 800c438:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 800c43a:	697b      	ldr	r3, [r7, #20]
 800c43c:	2b02      	cmp	r3, #2
 800c43e:	d907      	bls.n	800c450 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 800c440:	68fb      	ldr	r3, [r7, #12]
 800c442:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c444:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 800c448:	68fb      	ldr	r3, [r7, #12]
 800c44a:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 800c44c:	2301      	movs	r3, #1
 800c44e:	e09e      	b.n	800c58e <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 800c450:	2201      	movs	r2, #1
 800c452:	697b      	ldr	r3, [r7, #20]
 800c454:	409a      	lsls	r2, r3
 800c456:	683b      	ldr	r3, [r7, #0]
 800c458:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 800c45a:	68bb      	ldr	r3, [r7, #8]
 800c45c:	689b      	ldr	r3, [r3, #8]
 800c45e:	2b00      	cmp	r3, #0
 800c460:	d10d      	bne.n	800c47e <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800c462:	68bb      	ldr	r3, [r7, #8]
 800c464:	681b      	ldr	r3, [r3, #0]
 800c466:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 800c468:	68bb      	ldr	r3, [r7, #8]
 800c46a:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800c46c:	68f9      	ldr	r1, [r7, #12]
 800c46e:	6809      	ldr	r1, [r1, #0]
 800c470:	431a      	orrs	r2, r3
 800c472:	697b      	ldr	r3, [r7, #20]
 800c474:	3318      	adds	r3, #24
 800c476:	011b      	lsls	r3, r3, #4
 800c478:	440b      	add	r3, r1
 800c47a:	601a      	str	r2, [r3, #0]
 800c47c:	e00f      	b.n	800c49e <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800c47e:	68bb      	ldr	r3, [r7, #8]
 800c480:	685b      	ldr	r3, [r3, #4]
 800c482:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 800c484:	68bb      	ldr	r3, [r7, #8]
 800c486:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800c488:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 800c48a:	68bb      	ldr	r3, [r7, #8]
 800c48c:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800c48e:	68f9      	ldr	r1, [r7, #12]
 800c490:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 800c492:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800c494:	697b      	ldr	r3, [r7, #20]
 800c496:	3318      	adds	r3, #24
 800c498:	011b      	lsls	r3, r3, #4
 800c49a:	440b      	add	r3, r1
 800c49c:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 800c49e:	68fb      	ldr	r3, [r7, #12]
 800c4a0:	6819      	ldr	r1, [r3, #0]
 800c4a2:	68bb      	ldr	r3, [r7, #8]
 800c4a4:	691a      	ldr	r2, [r3, #16]
 800c4a6:	697b      	ldr	r3, [r7, #20]
 800c4a8:	3318      	adds	r3, #24
 800c4aa:	011b      	lsls	r3, r3, #4
 800c4ac:	440b      	add	r3, r1
 800c4ae:	3304      	adds	r3, #4
 800c4b0:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 800c4b2:	68bb      	ldr	r3, [r7, #8]
 800c4b4:	7d1b      	ldrb	r3, [r3, #20]
 800c4b6:	2b01      	cmp	r3, #1
 800c4b8:	d111      	bne.n	800c4de <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 800c4ba:	68fb      	ldr	r3, [r7, #12]
 800c4bc:	681a      	ldr	r2, [r3, #0]
 800c4be:	697b      	ldr	r3, [r7, #20]
 800c4c0:	3318      	adds	r3, #24
 800c4c2:	011b      	lsls	r3, r3, #4
 800c4c4:	4413      	add	r3, r2
 800c4c6:	3304      	adds	r3, #4
 800c4c8:	681b      	ldr	r3, [r3, #0]
 800c4ca:	68fa      	ldr	r2, [r7, #12]
 800c4cc:	6811      	ldr	r1, [r2, #0]
 800c4ce:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800c4d2:	697b      	ldr	r3, [r7, #20]
 800c4d4:	3318      	adds	r3, #24
 800c4d6:	011b      	lsls	r3, r3, #4
 800c4d8:	440b      	add	r3, r1
 800c4da:	3304      	adds	r3, #4
 800c4dc:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 800c4de:	687b      	ldr	r3, [r7, #4]
 800c4e0:	3307      	adds	r3, #7
 800c4e2:	781b      	ldrb	r3, [r3, #0]
 800c4e4:	061a      	lsls	r2, r3, #24
 800c4e6:	687b      	ldr	r3, [r7, #4]
 800c4e8:	3306      	adds	r3, #6
 800c4ea:	781b      	ldrb	r3, [r3, #0]
 800c4ec:	041b      	lsls	r3, r3, #16
 800c4ee:	431a      	orrs	r2, r3
 800c4f0:	687b      	ldr	r3, [r7, #4]
 800c4f2:	3305      	adds	r3, #5
 800c4f4:	781b      	ldrb	r3, [r3, #0]
 800c4f6:	021b      	lsls	r3, r3, #8
 800c4f8:	4313      	orrs	r3, r2
 800c4fa:	687a      	ldr	r2, [r7, #4]
 800c4fc:	3204      	adds	r2, #4
 800c4fe:	7812      	ldrb	r2, [r2, #0]
 800c500:	4610      	mov	r0, r2
 800c502:	68fa      	ldr	r2, [r7, #12]
 800c504:	6811      	ldr	r1, [r2, #0]
 800c506:	ea43 0200 	orr.w	r2, r3, r0
 800c50a:	697b      	ldr	r3, [r7, #20]
 800c50c:	011b      	lsls	r3, r3, #4
 800c50e:	440b      	add	r3, r1
 800c510:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 800c514:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 800c516:	687b      	ldr	r3, [r7, #4]
 800c518:	3303      	adds	r3, #3
 800c51a:	781b      	ldrb	r3, [r3, #0]
 800c51c:	061a      	lsls	r2, r3, #24
 800c51e:	687b      	ldr	r3, [r7, #4]
 800c520:	3302      	adds	r3, #2
 800c522:	781b      	ldrb	r3, [r3, #0]
 800c524:	041b      	lsls	r3, r3, #16
 800c526:	431a      	orrs	r2, r3
 800c528:	687b      	ldr	r3, [r7, #4]
 800c52a:	3301      	adds	r3, #1
 800c52c:	781b      	ldrb	r3, [r3, #0]
 800c52e:	021b      	lsls	r3, r3, #8
 800c530:	4313      	orrs	r3, r2
 800c532:	687a      	ldr	r2, [r7, #4]
 800c534:	7812      	ldrb	r2, [r2, #0]
 800c536:	4610      	mov	r0, r2
 800c538:	68fa      	ldr	r2, [r7, #12]
 800c53a:	6811      	ldr	r1, [r2, #0]
 800c53c:	ea43 0200 	orr.w	r2, r3, r0
 800c540:	697b      	ldr	r3, [r7, #20]
 800c542:	011b      	lsls	r3, r3, #4
 800c544:	440b      	add	r3, r1
 800c546:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 800c54a:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 800c54c:	68fb      	ldr	r3, [r7, #12]
 800c54e:	681a      	ldr	r2, [r3, #0]
 800c550:	697b      	ldr	r3, [r7, #20]
 800c552:	3318      	adds	r3, #24
 800c554:	011b      	lsls	r3, r3, #4
 800c556:	4413      	add	r3, r2
 800c558:	681b      	ldr	r3, [r3, #0]
 800c55a:	68fa      	ldr	r2, [r7, #12]
 800c55c:	6811      	ldr	r1, [r2, #0]
 800c55e:	f043 0201 	orr.w	r2, r3, #1
 800c562:	697b      	ldr	r3, [r7, #20]
 800c564:	3318      	adds	r3, #24
 800c566:	011b      	lsls	r3, r3, #4
 800c568:	440b      	add	r3, r1
 800c56a:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 800c56c:	2300      	movs	r3, #0
 800c56e:	e00e      	b.n	800c58e <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800c570:	68fb      	ldr	r3, [r7, #12]
 800c572:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c574:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800c578:	68fb      	ldr	r3, [r7, #12]
 800c57a:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 800c57c:	2301      	movs	r3, #1
 800c57e:	e006      	b.n	800c58e <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800c580:	68fb      	ldr	r3, [r7, #12]
 800c582:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c584:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800c588:	68fb      	ldr	r3, [r7, #12]
 800c58a:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800c58c:	2301      	movs	r3, #1
  }
}
 800c58e:	4618      	mov	r0, r3
 800c590:	3724      	adds	r7, #36	@ 0x24
 800c592:	46bd      	mov	sp, r7
 800c594:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c598:	4770      	bx	lr

0800c59a <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(CAN_HandleTypeDef *hcan)
{
 800c59a:	b480      	push	{r7}
 800c59c:	b085      	sub	sp, #20
 800c59e:	af00      	add	r7, sp, #0
 800c5a0:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 800c5a2:	2300      	movs	r3, #0
 800c5a4:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 800c5a6:	687b      	ldr	r3, [r7, #4]
 800c5a8:	f893 3020 	ldrb.w	r3, [r3, #32]
 800c5ac:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 800c5ae:	7afb      	ldrb	r3, [r7, #11]
 800c5b0:	2b01      	cmp	r3, #1
 800c5b2:	d002      	beq.n	800c5ba <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 800c5b4:	7afb      	ldrb	r3, [r7, #11]
 800c5b6:	2b02      	cmp	r3, #2
 800c5b8:	d11d      	bne.n	800c5f6 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 800c5ba:	687b      	ldr	r3, [r7, #4]
 800c5bc:	681b      	ldr	r3, [r3, #0]
 800c5be:	689b      	ldr	r3, [r3, #8]
 800c5c0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800c5c4:	2b00      	cmp	r3, #0
 800c5c6:	d002      	beq.n	800c5ce <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 800c5c8:	68fb      	ldr	r3, [r7, #12]
 800c5ca:	3301      	adds	r3, #1
 800c5cc:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 800c5ce:	687b      	ldr	r3, [r7, #4]
 800c5d0:	681b      	ldr	r3, [r3, #0]
 800c5d2:	689b      	ldr	r3, [r3, #8]
 800c5d4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800c5d8:	2b00      	cmp	r3, #0
 800c5da:	d002      	beq.n	800c5e2 <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 800c5dc:	68fb      	ldr	r3, [r7, #12]
 800c5de:	3301      	adds	r3, #1
 800c5e0:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 800c5e2:	687b      	ldr	r3, [r7, #4]
 800c5e4:	681b      	ldr	r3, [r3, #0]
 800c5e6:	689b      	ldr	r3, [r3, #8]
 800c5e8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800c5ec:	2b00      	cmp	r3, #0
 800c5ee:	d002      	beq.n	800c5f6 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 800c5f0:	68fb      	ldr	r3, [r7, #12]
 800c5f2:	3301      	adds	r3, #1
 800c5f4:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 800c5f6:	68fb      	ldr	r3, [r7, #12]
}
 800c5f8:	4618      	mov	r0, r3
 800c5fa:	3714      	adds	r7, #20
 800c5fc:	46bd      	mov	sp, r7
 800c5fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c602:	4770      	bx	lr

0800c604 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 800c604:	b480      	push	{r7}
 800c606:	b087      	sub	sp, #28
 800c608:	af00      	add	r7, sp, #0
 800c60a:	60f8      	str	r0, [r7, #12]
 800c60c:	60b9      	str	r1, [r7, #8]
 800c60e:	607a      	str	r2, [r7, #4]
 800c610:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800c612:	68fb      	ldr	r3, [r7, #12]
 800c614:	f893 3020 	ldrb.w	r3, [r3, #32]
 800c618:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 800c61a:	7dfb      	ldrb	r3, [r7, #23]
 800c61c:	2b01      	cmp	r3, #1
 800c61e:	d003      	beq.n	800c628 <HAL_CAN_GetRxMessage+0x24>
 800c620:	7dfb      	ldrb	r3, [r7, #23]
 800c622:	2b02      	cmp	r3, #2
 800c624:	f040 80f3 	bne.w	800c80e <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800c628:	68bb      	ldr	r3, [r7, #8]
 800c62a:	2b00      	cmp	r3, #0
 800c62c:	d10e      	bne.n	800c64c <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 800c62e:	68fb      	ldr	r3, [r7, #12]
 800c630:	681b      	ldr	r3, [r3, #0]
 800c632:	68db      	ldr	r3, [r3, #12]
 800c634:	f003 0303 	and.w	r3, r3, #3
 800c638:	2b00      	cmp	r3, #0
 800c63a:	d116      	bne.n	800c66a <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800c63c:	68fb      	ldr	r3, [r7, #12]
 800c63e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c640:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800c644:	68fb      	ldr	r3, [r7, #12]
 800c646:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 800c648:	2301      	movs	r3, #1
 800c64a:	e0e7      	b.n	800c81c <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 800c64c:	68fb      	ldr	r3, [r7, #12]
 800c64e:	681b      	ldr	r3, [r3, #0]
 800c650:	691b      	ldr	r3, [r3, #16]
 800c652:	f003 0303 	and.w	r3, r3, #3
 800c656:	2b00      	cmp	r3, #0
 800c658:	d107      	bne.n	800c66a <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800c65a:	68fb      	ldr	r3, [r7, #12]
 800c65c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c65e:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800c662:	68fb      	ldr	r3, [r7, #12]
 800c664:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 800c666:	2301      	movs	r3, #1
 800c668:	e0d8      	b.n	800c81c <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 800c66a:	68fb      	ldr	r3, [r7, #12]
 800c66c:	681a      	ldr	r2, [r3, #0]
 800c66e:	68bb      	ldr	r3, [r7, #8]
 800c670:	331b      	adds	r3, #27
 800c672:	011b      	lsls	r3, r3, #4
 800c674:	4413      	add	r3, r2
 800c676:	681b      	ldr	r3, [r3, #0]
 800c678:	f003 0204 	and.w	r2, r3, #4
 800c67c:	687b      	ldr	r3, [r7, #4]
 800c67e:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 800c680:	687b      	ldr	r3, [r7, #4]
 800c682:	689b      	ldr	r3, [r3, #8]
 800c684:	2b00      	cmp	r3, #0
 800c686:	d10c      	bne.n	800c6a2 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 800c688:	68fb      	ldr	r3, [r7, #12]
 800c68a:	681a      	ldr	r2, [r3, #0]
 800c68c:	68bb      	ldr	r3, [r7, #8]
 800c68e:	331b      	adds	r3, #27
 800c690:	011b      	lsls	r3, r3, #4
 800c692:	4413      	add	r3, r2
 800c694:	681b      	ldr	r3, [r3, #0]
 800c696:	0d5b      	lsrs	r3, r3, #21
 800c698:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800c69c:	687b      	ldr	r3, [r7, #4]
 800c69e:	601a      	str	r2, [r3, #0]
 800c6a0:	e00b      	b.n	800c6ba <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 800c6a2:	68fb      	ldr	r3, [r7, #12]
 800c6a4:	681a      	ldr	r2, [r3, #0]
 800c6a6:	68bb      	ldr	r3, [r7, #8]
 800c6a8:	331b      	adds	r3, #27
 800c6aa:	011b      	lsls	r3, r3, #4
 800c6ac:	4413      	add	r3, r2
 800c6ae:	681b      	ldr	r3, [r3, #0]
 800c6b0:	08db      	lsrs	r3, r3, #3
 800c6b2:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 800c6b6:	687b      	ldr	r3, [r7, #4]
 800c6b8:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 800c6ba:	68fb      	ldr	r3, [r7, #12]
 800c6bc:	681a      	ldr	r2, [r3, #0]
 800c6be:	68bb      	ldr	r3, [r7, #8]
 800c6c0:	331b      	adds	r3, #27
 800c6c2:	011b      	lsls	r3, r3, #4
 800c6c4:	4413      	add	r3, r2
 800c6c6:	681b      	ldr	r3, [r3, #0]
 800c6c8:	f003 0202 	and.w	r2, r3, #2
 800c6cc:	687b      	ldr	r3, [r7, #4]
 800c6ce:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 800c6d0:	68fb      	ldr	r3, [r7, #12]
 800c6d2:	681a      	ldr	r2, [r3, #0]
 800c6d4:	68bb      	ldr	r3, [r7, #8]
 800c6d6:	331b      	adds	r3, #27
 800c6d8:	011b      	lsls	r3, r3, #4
 800c6da:	4413      	add	r3, r2
 800c6dc:	3304      	adds	r3, #4
 800c6de:	681b      	ldr	r3, [r3, #0]
 800c6e0:	f003 020f 	and.w	r2, r3, #15
 800c6e4:	687b      	ldr	r3, [r7, #4]
 800c6e6:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 800c6e8:	68fb      	ldr	r3, [r7, #12]
 800c6ea:	681a      	ldr	r2, [r3, #0]
 800c6ec:	68bb      	ldr	r3, [r7, #8]
 800c6ee:	331b      	adds	r3, #27
 800c6f0:	011b      	lsls	r3, r3, #4
 800c6f2:	4413      	add	r3, r2
 800c6f4:	3304      	adds	r3, #4
 800c6f6:	681b      	ldr	r3, [r3, #0]
 800c6f8:	0a1b      	lsrs	r3, r3, #8
 800c6fa:	b2da      	uxtb	r2, r3
 800c6fc:	687b      	ldr	r3, [r7, #4]
 800c6fe:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 800c700:	68fb      	ldr	r3, [r7, #12]
 800c702:	681a      	ldr	r2, [r3, #0]
 800c704:	68bb      	ldr	r3, [r7, #8]
 800c706:	331b      	adds	r3, #27
 800c708:	011b      	lsls	r3, r3, #4
 800c70a:	4413      	add	r3, r2
 800c70c:	3304      	adds	r3, #4
 800c70e:	681b      	ldr	r3, [r3, #0]
 800c710:	0c1b      	lsrs	r3, r3, #16
 800c712:	b29a      	uxth	r2, r3
 800c714:	687b      	ldr	r3, [r7, #4]
 800c716:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 800c718:	68fb      	ldr	r3, [r7, #12]
 800c71a:	681a      	ldr	r2, [r3, #0]
 800c71c:	68bb      	ldr	r3, [r7, #8]
 800c71e:	011b      	lsls	r3, r3, #4
 800c720:	4413      	add	r3, r2
 800c722:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 800c726:	681b      	ldr	r3, [r3, #0]
 800c728:	b2da      	uxtb	r2, r3
 800c72a:	683b      	ldr	r3, [r7, #0]
 800c72c:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 800c72e:	68fb      	ldr	r3, [r7, #12]
 800c730:	681a      	ldr	r2, [r3, #0]
 800c732:	68bb      	ldr	r3, [r7, #8]
 800c734:	011b      	lsls	r3, r3, #4
 800c736:	4413      	add	r3, r2
 800c738:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 800c73c:	681b      	ldr	r3, [r3, #0]
 800c73e:	0a1a      	lsrs	r2, r3, #8
 800c740:	683b      	ldr	r3, [r7, #0]
 800c742:	3301      	adds	r3, #1
 800c744:	b2d2      	uxtb	r2, r2
 800c746:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 800c748:	68fb      	ldr	r3, [r7, #12]
 800c74a:	681a      	ldr	r2, [r3, #0]
 800c74c:	68bb      	ldr	r3, [r7, #8]
 800c74e:	011b      	lsls	r3, r3, #4
 800c750:	4413      	add	r3, r2
 800c752:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 800c756:	681b      	ldr	r3, [r3, #0]
 800c758:	0c1a      	lsrs	r2, r3, #16
 800c75a:	683b      	ldr	r3, [r7, #0]
 800c75c:	3302      	adds	r3, #2
 800c75e:	b2d2      	uxtb	r2, r2
 800c760:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 800c762:	68fb      	ldr	r3, [r7, #12]
 800c764:	681a      	ldr	r2, [r3, #0]
 800c766:	68bb      	ldr	r3, [r7, #8]
 800c768:	011b      	lsls	r3, r3, #4
 800c76a:	4413      	add	r3, r2
 800c76c:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 800c770:	681b      	ldr	r3, [r3, #0]
 800c772:	0e1a      	lsrs	r2, r3, #24
 800c774:	683b      	ldr	r3, [r7, #0]
 800c776:	3303      	adds	r3, #3
 800c778:	b2d2      	uxtb	r2, r2
 800c77a:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 800c77c:	68fb      	ldr	r3, [r7, #12]
 800c77e:	681a      	ldr	r2, [r3, #0]
 800c780:	68bb      	ldr	r3, [r7, #8]
 800c782:	011b      	lsls	r3, r3, #4
 800c784:	4413      	add	r3, r2
 800c786:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 800c78a:	681a      	ldr	r2, [r3, #0]
 800c78c:	683b      	ldr	r3, [r7, #0]
 800c78e:	3304      	adds	r3, #4
 800c790:	b2d2      	uxtb	r2, r2
 800c792:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 800c794:	68fb      	ldr	r3, [r7, #12]
 800c796:	681a      	ldr	r2, [r3, #0]
 800c798:	68bb      	ldr	r3, [r7, #8]
 800c79a:	011b      	lsls	r3, r3, #4
 800c79c:	4413      	add	r3, r2
 800c79e:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 800c7a2:	681b      	ldr	r3, [r3, #0]
 800c7a4:	0a1a      	lsrs	r2, r3, #8
 800c7a6:	683b      	ldr	r3, [r7, #0]
 800c7a8:	3305      	adds	r3, #5
 800c7aa:	b2d2      	uxtb	r2, r2
 800c7ac:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 800c7ae:	68fb      	ldr	r3, [r7, #12]
 800c7b0:	681a      	ldr	r2, [r3, #0]
 800c7b2:	68bb      	ldr	r3, [r7, #8]
 800c7b4:	011b      	lsls	r3, r3, #4
 800c7b6:	4413      	add	r3, r2
 800c7b8:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 800c7bc:	681b      	ldr	r3, [r3, #0]
 800c7be:	0c1a      	lsrs	r2, r3, #16
 800c7c0:	683b      	ldr	r3, [r7, #0]
 800c7c2:	3306      	adds	r3, #6
 800c7c4:	b2d2      	uxtb	r2, r2
 800c7c6:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 800c7c8:	68fb      	ldr	r3, [r7, #12]
 800c7ca:	681a      	ldr	r2, [r3, #0]
 800c7cc:	68bb      	ldr	r3, [r7, #8]
 800c7ce:	011b      	lsls	r3, r3, #4
 800c7d0:	4413      	add	r3, r2
 800c7d2:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 800c7d6:	681b      	ldr	r3, [r3, #0]
 800c7d8:	0e1a      	lsrs	r2, r3, #24
 800c7da:	683b      	ldr	r3, [r7, #0]
 800c7dc:	3307      	adds	r3, #7
 800c7de:	b2d2      	uxtb	r2, r2
 800c7e0:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800c7e2:	68bb      	ldr	r3, [r7, #8]
 800c7e4:	2b00      	cmp	r3, #0
 800c7e6:	d108      	bne.n	800c7fa <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 800c7e8:	68fb      	ldr	r3, [r7, #12]
 800c7ea:	681b      	ldr	r3, [r3, #0]
 800c7ec:	68da      	ldr	r2, [r3, #12]
 800c7ee:	68fb      	ldr	r3, [r7, #12]
 800c7f0:	681b      	ldr	r3, [r3, #0]
 800c7f2:	f042 0220 	orr.w	r2, r2, #32
 800c7f6:	60da      	str	r2, [r3, #12]
 800c7f8:	e007      	b.n	800c80a <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 800c7fa:	68fb      	ldr	r3, [r7, #12]
 800c7fc:	681b      	ldr	r3, [r3, #0]
 800c7fe:	691a      	ldr	r2, [r3, #16]
 800c800:	68fb      	ldr	r3, [r7, #12]
 800c802:	681b      	ldr	r3, [r3, #0]
 800c804:	f042 0220 	orr.w	r2, r2, #32
 800c808:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 800c80a:	2300      	movs	r3, #0
 800c80c:	e006      	b.n	800c81c <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800c80e:	68fb      	ldr	r3, [r7, #12]
 800c810:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c812:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800c816:	68fb      	ldr	r3, [r7, #12]
 800c818:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800c81a:	2301      	movs	r3, #1
  }
}
 800c81c:	4618      	mov	r0, r3
 800c81e:	371c      	adds	r7, #28
 800c820:	46bd      	mov	sp, r7
 800c822:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c826:	4770      	bx	lr

0800c828 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 800c828:	b480      	push	{r7}
 800c82a:	b085      	sub	sp, #20
 800c82c:	af00      	add	r7, sp, #0
 800c82e:	6078      	str	r0, [r7, #4]
 800c830:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800c832:	687b      	ldr	r3, [r7, #4]
 800c834:	f893 3020 	ldrb.w	r3, [r3, #32]
 800c838:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 800c83a:	7bfb      	ldrb	r3, [r7, #15]
 800c83c:	2b01      	cmp	r3, #1
 800c83e:	d002      	beq.n	800c846 <HAL_CAN_ActivateNotification+0x1e>
 800c840:	7bfb      	ldrb	r3, [r7, #15]
 800c842:	2b02      	cmp	r3, #2
 800c844:	d109      	bne.n	800c85a <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 800c846:	687b      	ldr	r3, [r7, #4]
 800c848:	681b      	ldr	r3, [r3, #0]
 800c84a:	6959      	ldr	r1, [r3, #20]
 800c84c:	687b      	ldr	r3, [r7, #4]
 800c84e:	681b      	ldr	r3, [r3, #0]
 800c850:	683a      	ldr	r2, [r7, #0]
 800c852:	430a      	orrs	r2, r1
 800c854:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 800c856:	2300      	movs	r3, #0
 800c858:	e006      	b.n	800c868 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800c85a:	687b      	ldr	r3, [r7, #4]
 800c85c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c85e:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800c862:	687b      	ldr	r3, [r7, #4]
 800c864:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800c866:	2301      	movs	r3, #1
  }
}
 800c868:	4618      	mov	r0, r3
 800c86a:	3714      	adds	r7, #20
 800c86c:	46bd      	mov	sp, r7
 800c86e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c872:	4770      	bx	lr

0800c874 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 800c874:	b580      	push	{r7, lr}
 800c876:	b08a      	sub	sp, #40	@ 0x28
 800c878:	af00      	add	r7, sp, #0
 800c87a:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 800c87c:	2300      	movs	r3, #0
 800c87e:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 800c880:	687b      	ldr	r3, [r7, #4]
 800c882:	681b      	ldr	r3, [r3, #0]
 800c884:	695b      	ldr	r3, [r3, #20]
 800c886:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 800c888:	687b      	ldr	r3, [r7, #4]
 800c88a:	681b      	ldr	r3, [r3, #0]
 800c88c:	685b      	ldr	r3, [r3, #4]
 800c88e:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 800c890:	687b      	ldr	r3, [r7, #4]
 800c892:	681b      	ldr	r3, [r3, #0]
 800c894:	689b      	ldr	r3, [r3, #8]
 800c896:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 800c898:	687b      	ldr	r3, [r7, #4]
 800c89a:	681b      	ldr	r3, [r3, #0]
 800c89c:	68db      	ldr	r3, [r3, #12]
 800c89e:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 800c8a0:	687b      	ldr	r3, [r7, #4]
 800c8a2:	681b      	ldr	r3, [r3, #0]
 800c8a4:	691b      	ldr	r3, [r3, #16]
 800c8a6:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 800c8a8:	687b      	ldr	r3, [r7, #4]
 800c8aa:	681b      	ldr	r3, [r3, #0]
 800c8ac:	699b      	ldr	r3, [r3, #24]
 800c8ae:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 800c8b0:	6a3b      	ldr	r3, [r7, #32]
 800c8b2:	f003 0301 	and.w	r3, r3, #1
 800c8b6:	2b00      	cmp	r3, #0
 800c8b8:	d07c      	beq.n	800c9b4 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 800c8ba:	69bb      	ldr	r3, [r7, #24]
 800c8bc:	f003 0301 	and.w	r3, r3, #1
 800c8c0:	2b00      	cmp	r3, #0
 800c8c2:	d023      	beq.n	800c90c <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 800c8c4:	687b      	ldr	r3, [r7, #4]
 800c8c6:	681b      	ldr	r3, [r3, #0]
 800c8c8:	2201      	movs	r2, #1
 800c8ca:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 800c8cc:	69bb      	ldr	r3, [r7, #24]
 800c8ce:	f003 0302 	and.w	r3, r3, #2
 800c8d2:	2b00      	cmp	r3, #0
 800c8d4:	d003      	beq.n	800c8de <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 800c8d6:	6878      	ldr	r0, [r7, #4]
 800c8d8:	f000 f983 	bl	800cbe2 <HAL_CAN_TxMailbox0CompleteCallback>
 800c8dc:	e016      	b.n	800c90c <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 800c8de:	69bb      	ldr	r3, [r7, #24]
 800c8e0:	f003 0304 	and.w	r3, r3, #4
 800c8e4:	2b00      	cmp	r3, #0
 800c8e6:	d004      	beq.n	800c8f2 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 800c8e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c8ea:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800c8ee:	627b      	str	r3, [r7, #36]	@ 0x24
 800c8f0:	e00c      	b.n	800c90c <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 800c8f2:	69bb      	ldr	r3, [r7, #24]
 800c8f4:	f003 0308 	and.w	r3, r3, #8
 800c8f8:	2b00      	cmp	r3, #0
 800c8fa:	d004      	beq.n	800c906 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 800c8fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c8fe:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800c902:	627b      	str	r3, [r7, #36]	@ 0x24
 800c904:	e002      	b.n	800c90c <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 800c906:	6878      	ldr	r0, [r7, #4]
 800c908:	f000 f989 	bl	800cc1e <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 800c90c:	69bb      	ldr	r3, [r7, #24]
 800c90e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c912:	2b00      	cmp	r3, #0
 800c914:	d024      	beq.n	800c960 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 800c916:	687b      	ldr	r3, [r7, #4]
 800c918:	681b      	ldr	r3, [r3, #0]
 800c91a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800c91e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 800c920:	69bb      	ldr	r3, [r7, #24]
 800c922:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800c926:	2b00      	cmp	r3, #0
 800c928:	d003      	beq.n	800c932 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 800c92a:	6878      	ldr	r0, [r7, #4]
 800c92c:	f000 f963 	bl	800cbf6 <HAL_CAN_TxMailbox1CompleteCallback>
 800c930:	e016      	b.n	800c960 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 800c932:	69bb      	ldr	r3, [r7, #24]
 800c934:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800c938:	2b00      	cmp	r3, #0
 800c93a:	d004      	beq.n	800c946 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 800c93c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c93e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800c942:	627b      	str	r3, [r7, #36]	@ 0x24
 800c944:	e00c      	b.n	800c960 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 800c946:	69bb      	ldr	r3, [r7, #24]
 800c948:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800c94c:	2b00      	cmp	r3, #0
 800c94e:	d004      	beq.n	800c95a <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 800c950:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c952:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800c956:	627b      	str	r3, [r7, #36]	@ 0x24
 800c958:	e002      	b.n	800c960 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 800c95a:	6878      	ldr	r0, [r7, #4]
 800c95c:	f000 f969 	bl	800cc32 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 800c960:	69bb      	ldr	r3, [r7, #24]
 800c962:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800c966:	2b00      	cmp	r3, #0
 800c968:	d024      	beq.n	800c9b4 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 800c96a:	687b      	ldr	r3, [r7, #4]
 800c96c:	681b      	ldr	r3, [r3, #0]
 800c96e:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800c972:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 800c974:	69bb      	ldr	r3, [r7, #24]
 800c976:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c97a:	2b00      	cmp	r3, #0
 800c97c:	d003      	beq.n	800c986 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 800c97e:	6878      	ldr	r0, [r7, #4]
 800c980:	f000 f943 	bl	800cc0a <HAL_CAN_TxMailbox2CompleteCallback>
 800c984:	e016      	b.n	800c9b4 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 800c986:	69bb      	ldr	r3, [r7, #24]
 800c988:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800c98c:	2b00      	cmp	r3, #0
 800c98e:	d004      	beq.n	800c99a <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 800c990:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c992:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c996:	627b      	str	r3, [r7, #36]	@ 0x24
 800c998:	e00c      	b.n	800c9b4 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 800c99a:	69bb      	ldr	r3, [r7, #24]
 800c99c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800c9a0:	2b00      	cmp	r3, #0
 800c9a2:	d004      	beq.n	800c9ae <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 800c9a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c9a6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800c9aa:	627b      	str	r3, [r7, #36]	@ 0x24
 800c9ac:	e002      	b.n	800c9b4 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 800c9ae:	6878      	ldr	r0, [r7, #4]
 800c9b0:	f000 f949 	bl	800cc46 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 800c9b4:	6a3b      	ldr	r3, [r7, #32]
 800c9b6:	f003 0308 	and.w	r3, r3, #8
 800c9ba:	2b00      	cmp	r3, #0
 800c9bc:	d00c      	beq.n	800c9d8 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 800c9be:	697b      	ldr	r3, [r7, #20]
 800c9c0:	f003 0310 	and.w	r3, r3, #16
 800c9c4:	2b00      	cmp	r3, #0
 800c9c6:	d007      	beq.n	800c9d8 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 800c9c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c9ca:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800c9ce:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 800c9d0:	687b      	ldr	r3, [r7, #4]
 800c9d2:	681b      	ldr	r3, [r3, #0]
 800c9d4:	2210      	movs	r2, #16
 800c9d6:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 800c9d8:	6a3b      	ldr	r3, [r7, #32]
 800c9da:	f003 0304 	and.w	r3, r3, #4
 800c9de:	2b00      	cmp	r3, #0
 800c9e0:	d00b      	beq.n	800c9fa <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 800c9e2:	697b      	ldr	r3, [r7, #20]
 800c9e4:	f003 0308 	and.w	r3, r3, #8
 800c9e8:	2b00      	cmp	r3, #0
 800c9ea:	d006      	beq.n	800c9fa <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 800c9ec:	687b      	ldr	r3, [r7, #4]
 800c9ee:	681b      	ldr	r3, [r3, #0]
 800c9f0:	2208      	movs	r2, #8
 800c9f2:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 800c9f4:	6878      	ldr	r0, [r7, #4]
 800c9f6:	f000 f930 	bl	800cc5a <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 800c9fa:	6a3b      	ldr	r3, [r7, #32]
 800c9fc:	f003 0302 	and.w	r3, r3, #2
 800ca00:	2b00      	cmp	r3, #0
 800ca02:	d009      	beq.n	800ca18 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 800ca04:	687b      	ldr	r3, [r7, #4]
 800ca06:	681b      	ldr	r3, [r3, #0]
 800ca08:	68db      	ldr	r3, [r3, #12]
 800ca0a:	f003 0303 	and.w	r3, r3, #3
 800ca0e:	2b00      	cmp	r3, #0
 800ca10:	d002      	beq.n	800ca18 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 800ca12:	6878      	ldr	r0, [r7, #4]
 800ca14:	f7fe fed4 	bl	800b7c0 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 800ca18:	6a3b      	ldr	r3, [r7, #32]
 800ca1a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ca1e:	2b00      	cmp	r3, #0
 800ca20:	d00c      	beq.n	800ca3c <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 800ca22:	693b      	ldr	r3, [r7, #16]
 800ca24:	f003 0310 	and.w	r3, r3, #16
 800ca28:	2b00      	cmp	r3, #0
 800ca2a:	d007      	beq.n	800ca3c <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 800ca2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ca2e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800ca32:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 800ca34:	687b      	ldr	r3, [r7, #4]
 800ca36:	681b      	ldr	r3, [r3, #0]
 800ca38:	2210      	movs	r2, #16
 800ca3a:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 800ca3c:	6a3b      	ldr	r3, [r7, #32]
 800ca3e:	f003 0320 	and.w	r3, r3, #32
 800ca42:	2b00      	cmp	r3, #0
 800ca44:	d00b      	beq.n	800ca5e <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 800ca46:	693b      	ldr	r3, [r7, #16]
 800ca48:	f003 0308 	and.w	r3, r3, #8
 800ca4c:	2b00      	cmp	r3, #0
 800ca4e:	d006      	beq.n	800ca5e <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 800ca50:	687b      	ldr	r3, [r7, #4]
 800ca52:	681b      	ldr	r3, [r3, #0]
 800ca54:	2208      	movs	r2, #8
 800ca56:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 800ca58:	6878      	ldr	r0, [r7, #4]
 800ca5a:	f000 f908 	bl	800cc6e <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 800ca5e:	6a3b      	ldr	r3, [r7, #32]
 800ca60:	f003 0310 	and.w	r3, r3, #16
 800ca64:	2b00      	cmp	r3, #0
 800ca66:	d009      	beq.n	800ca7c <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 800ca68:	687b      	ldr	r3, [r7, #4]
 800ca6a:	681b      	ldr	r3, [r3, #0]
 800ca6c:	691b      	ldr	r3, [r3, #16]
 800ca6e:	f003 0303 	and.w	r3, r3, #3
 800ca72:	2b00      	cmp	r3, #0
 800ca74:	d002      	beq.n	800ca7c <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 800ca76:	6878      	ldr	r0, [r7, #4]
 800ca78:	f7fe ff7a 	bl	800b970 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 800ca7c:	6a3b      	ldr	r3, [r7, #32]
 800ca7e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ca82:	2b00      	cmp	r3, #0
 800ca84:	d00b      	beq.n	800ca9e <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 800ca86:	69fb      	ldr	r3, [r7, #28]
 800ca88:	f003 0310 	and.w	r3, r3, #16
 800ca8c:	2b00      	cmp	r3, #0
 800ca8e:	d006      	beq.n	800ca9e <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 800ca90:	687b      	ldr	r3, [r7, #4]
 800ca92:	681b      	ldr	r3, [r3, #0]
 800ca94:	2210      	movs	r2, #16
 800ca96:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 800ca98:	6878      	ldr	r0, [r7, #4]
 800ca9a:	f000 f8f2 	bl	800cc82 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 800ca9e:	6a3b      	ldr	r3, [r7, #32]
 800caa0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800caa4:	2b00      	cmp	r3, #0
 800caa6:	d00b      	beq.n	800cac0 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 800caa8:	69fb      	ldr	r3, [r7, #28]
 800caaa:	f003 0308 	and.w	r3, r3, #8
 800caae:	2b00      	cmp	r3, #0
 800cab0:	d006      	beq.n	800cac0 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 800cab2:	687b      	ldr	r3, [r7, #4]
 800cab4:	681b      	ldr	r3, [r3, #0]
 800cab6:	2208      	movs	r2, #8
 800cab8:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 800caba:	6878      	ldr	r0, [r7, #4]
 800cabc:	f000 f8eb 	bl	800cc96 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 800cac0:	6a3b      	ldr	r3, [r7, #32]
 800cac2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800cac6:	2b00      	cmp	r3, #0
 800cac8:	d07b      	beq.n	800cbc2 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 800caca:	69fb      	ldr	r3, [r7, #28]
 800cacc:	f003 0304 	and.w	r3, r3, #4
 800cad0:	2b00      	cmp	r3, #0
 800cad2:	d072      	beq.n	800cbba <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800cad4:	6a3b      	ldr	r3, [r7, #32]
 800cad6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800cada:	2b00      	cmp	r3, #0
 800cadc:	d008      	beq.n	800caf0 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 800cade:	68fb      	ldr	r3, [r7, #12]
 800cae0:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800cae4:	2b00      	cmp	r3, #0
 800cae6:	d003      	beq.n	800caf0 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 800cae8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800caea:	f043 0301 	orr.w	r3, r3, #1
 800caee:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800caf0:	6a3b      	ldr	r3, [r7, #32]
 800caf2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800caf6:	2b00      	cmp	r3, #0
 800caf8:	d008      	beq.n	800cb0c <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 800cafa:	68fb      	ldr	r3, [r7, #12]
 800cafc:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800cb00:	2b00      	cmp	r3, #0
 800cb02:	d003      	beq.n	800cb0c <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 800cb04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cb06:	f043 0302 	orr.w	r3, r3, #2
 800cb0a:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800cb0c:	6a3b      	ldr	r3, [r7, #32]
 800cb0e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800cb12:	2b00      	cmp	r3, #0
 800cb14:	d008      	beq.n	800cb28 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 800cb16:	68fb      	ldr	r3, [r7, #12]
 800cb18:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800cb1c:	2b00      	cmp	r3, #0
 800cb1e:	d003      	beq.n	800cb28 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 800cb20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cb22:	f043 0304 	orr.w	r3, r3, #4
 800cb26:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800cb28:	6a3b      	ldr	r3, [r7, #32]
 800cb2a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800cb2e:	2b00      	cmp	r3, #0
 800cb30:	d043      	beq.n	800cbba <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 800cb32:	68fb      	ldr	r3, [r7, #12]
 800cb34:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800cb38:	2b00      	cmp	r3, #0
 800cb3a:	d03e      	beq.n	800cbba <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 800cb3c:	68fb      	ldr	r3, [r7, #12]
 800cb3e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800cb42:	2b60      	cmp	r3, #96	@ 0x60
 800cb44:	d02b      	beq.n	800cb9e <HAL_CAN_IRQHandler+0x32a>
 800cb46:	2b60      	cmp	r3, #96	@ 0x60
 800cb48:	d82e      	bhi.n	800cba8 <HAL_CAN_IRQHandler+0x334>
 800cb4a:	2b50      	cmp	r3, #80	@ 0x50
 800cb4c:	d022      	beq.n	800cb94 <HAL_CAN_IRQHandler+0x320>
 800cb4e:	2b50      	cmp	r3, #80	@ 0x50
 800cb50:	d82a      	bhi.n	800cba8 <HAL_CAN_IRQHandler+0x334>
 800cb52:	2b40      	cmp	r3, #64	@ 0x40
 800cb54:	d019      	beq.n	800cb8a <HAL_CAN_IRQHandler+0x316>
 800cb56:	2b40      	cmp	r3, #64	@ 0x40
 800cb58:	d826      	bhi.n	800cba8 <HAL_CAN_IRQHandler+0x334>
 800cb5a:	2b30      	cmp	r3, #48	@ 0x30
 800cb5c:	d010      	beq.n	800cb80 <HAL_CAN_IRQHandler+0x30c>
 800cb5e:	2b30      	cmp	r3, #48	@ 0x30
 800cb60:	d822      	bhi.n	800cba8 <HAL_CAN_IRQHandler+0x334>
 800cb62:	2b10      	cmp	r3, #16
 800cb64:	d002      	beq.n	800cb6c <HAL_CAN_IRQHandler+0x2f8>
 800cb66:	2b20      	cmp	r3, #32
 800cb68:	d005      	beq.n	800cb76 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 800cb6a:	e01d      	b.n	800cba8 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 800cb6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cb6e:	f043 0308 	orr.w	r3, r3, #8
 800cb72:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800cb74:	e019      	b.n	800cbaa <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 800cb76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cb78:	f043 0310 	orr.w	r3, r3, #16
 800cb7c:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800cb7e:	e014      	b.n	800cbaa <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 800cb80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cb82:	f043 0320 	orr.w	r3, r3, #32
 800cb86:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800cb88:	e00f      	b.n	800cbaa <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 800cb8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cb8c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800cb90:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800cb92:	e00a      	b.n	800cbaa <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 800cb94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cb96:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cb9a:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800cb9c:	e005      	b.n	800cbaa <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 800cb9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cba0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800cba4:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800cba6:	e000      	b.n	800cbaa <HAL_CAN_IRQHandler+0x336>
            break;
 800cba8:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 800cbaa:	687b      	ldr	r3, [r7, #4]
 800cbac:	681b      	ldr	r3, [r3, #0]
 800cbae:	699a      	ldr	r2, [r3, #24]
 800cbb0:	687b      	ldr	r3, [r7, #4]
 800cbb2:	681b      	ldr	r3, [r3, #0]
 800cbb4:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 800cbb8:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 800cbba:	687b      	ldr	r3, [r7, #4]
 800cbbc:	681b      	ldr	r3, [r3, #0]
 800cbbe:	2204      	movs	r2, #4
 800cbc0:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 800cbc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cbc4:	2b00      	cmp	r3, #0
 800cbc6:	d008      	beq.n	800cbda <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 800cbc8:	687b      	ldr	r3, [r7, #4]
 800cbca:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800cbcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cbce:	431a      	orrs	r2, r3
 800cbd0:	687b      	ldr	r3, [r7, #4]
 800cbd2:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 800cbd4:	6878      	ldr	r0, [r7, #4]
 800cbd6:	f000 f868 	bl	800ccaa <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 800cbda:	bf00      	nop
 800cbdc:	3728      	adds	r7, #40	@ 0x28
 800cbde:	46bd      	mov	sp, r7
 800cbe0:	bd80      	pop	{r7, pc}

0800cbe2 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800cbe2:	b480      	push	{r7}
 800cbe4:	b083      	sub	sp, #12
 800cbe6:	af00      	add	r7, sp, #0
 800cbe8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 800cbea:	bf00      	nop
 800cbec:	370c      	adds	r7, #12
 800cbee:	46bd      	mov	sp, r7
 800cbf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbf4:	4770      	bx	lr

0800cbf6 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800cbf6:	b480      	push	{r7}
 800cbf8:	b083      	sub	sp, #12
 800cbfa:	af00      	add	r7, sp, #0
 800cbfc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 800cbfe:	bf00      	nop
 800cc00:	370c      	adds	r7, #12
 800cc02:	46bd      	mov	sp, r7
 800cc04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc08:	4770      	bx	lr

0800cc0a <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800cc0a:	b480      	push	{r7}
 800cc0c:	b083      	sub	sp, #12
 800cc0e:	af00      	add	r7, sp, #0
 800cc10:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 800cc12:	bf00      	nop
 800cc14:	370c      	adds	r7, #12
 800cc16:	46bd      	mov	sp, r7
 800cc18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc1c:	4770      	bx	lr

0800cc1e <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 800cc1e:	b480      	push	{r7}
 800cc20:	b083      	sub	sp, #12
 800cc22:	af00      	add	r7, sp, #0
 800cc24:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 800cc26:	bf00      	nop
 800cc28:	370c      	adds	r7, #12
 800cc2a:	46bd      	mov	sp, r7
 800cc2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc30:	4770      	bx	lr

0800cc32 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 800cc32:	b480      	push	{r7}
 800cc34:	b083      	sub	sp, #12
 800cc36:	af00      	add	r7, sp, #0
 800cc38:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 800cc3a:	bf00      	nop
 800cc3c:	370c      	adds	r7, #12
 800cc3e:	46bd      	mov	sp, r7
 800cc40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc44:	4770      	bx	lr

0800cc46 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 800cc46:	b480      	push	{r7}
 800cc48:	b083      	sub	sp, #12
 800cc4a:	af00      	add	r7, sp, #0
 800cc4c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 800cc4e:	bf00      	nop
 800cc50:	370c      	adds	r7, #12
 800cc52:	46bd      	mov	sp, r7
 800cc54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc58:	4770      	bx	lr

0800cc5a <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 800cc5a:	b480      	push	{r7}
 800cc5c:	b083      	sub	sp, #12
 800cc5e:	af00      	add	r7, sp, #0
 800cc60:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 800cc62:	bf00      	nop
 800cc64:	370c      	adds	r7, #12
 800cc66:	46bd      	mov	sp, r7
 800cc68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc6c:	4770      	bx	lr

0800cc6e <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 800cc6e:	b480      	push	{r7}
 800cc70:	b083      	sub	sp, #12
 800cc72:	af00      	add	r7, sp, #0
 800cc74:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 800cc76:	bf00      	nop
 800cc78:	370c      	adds	r7, #12
 800cc7a:	46bd      	mov	sp, r7
 800cc7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc80:	4770      	bx	lr

0800cc82 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 800cc82:	b480      	push	{r7}
 800cc84:	b083      	sub	sp, #12
 800cc86:	af00      	add	r7, sp, #0
 800cc88:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 800cc8a:	bf00      	nop
 800cc8c:	370c      	adds	r7, #12
 800cc8e:	46bd      	mov	sp, r7
 800cc90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc94:	4770      	bx	lr

0800cc96 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 800cc96:	b480      	push	{r7}
 800cc98:	b083      	sub	sp, #12
 800cc9a:	af00      	add	r7, sp, #0
 800cc9c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 800cc9e:	bf00      	nop
 800cca0:	370c      	adds	r7, #12
 800cca2:	46bd      	mov	sp, r7
 800cca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cca8:	4770      	bx	lr

0800ccaa <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 800ccaa:	b480      	push	{r7}
 800ccac:	b083      	sub	sp, #12
 800ccae:	af00      	add	r7, sp, #0
 800ccb0:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 800ccb2:	bf00      	nop
 800ccb4:	370c      	adds	r7, #12
 800ccb6:	46bd      	mov	sp, r7
 800ccb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccbc:	4770      	bx	lr
	...

0800ccc0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800ccc0:	b480      	push	{r7}
 800ccc2:	b085      	sub	sp, #20
 800ccc4:	af00      	add	r7, sp, #0
 800ccc6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800ccc8:	687b      	ldr	r3, [r7, #4]
 800ccca:	f003 0307 	and.w	r3, r3, #7
 800ccce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800ccd0:	4b0c      	ldr	r3, [pc, #48]	@ (800cd04 <__NVIC_SetPriorityGrouping+0x44>)
 800ccd2:	68db      	ldr	r3, [r3, #12]
 800ccd4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800ccd6:	68ba      	ldr	r2, [r7, #8]
 800ccd8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800ccdc:	4013      	ands	r3, r2
 800ccde:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800cce0:	68fb      	ldr	r3, [r7, #12]
 800cce2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800cce4:	68bb      	ldr	r3, [r7, #8]
 800cce6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800cce8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800ccec:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800ccf0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800ccf2:	4a04      	ldr	r2, [pc, #16]	@ (800cd04 <__NVIC_SetPriorityGrouping+0x44>)
 800ccf4:	68bb      	ldr	r3, [r7, #8]
 800ccf6:	60d3      	str	r3, [r2, #12]
}
 800ccf8:	bf00      	nop
 800ccfa:	3714      	adds	r7, #20
 800ccfc:	46bd      	mov	sp, r7
 800ccfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd02:	4770      	bx	lr
 800cd04:	e000ed00 	.word	0xe000ed00

0800cd08 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800cd08:	b480      	push	{r7}
 800cd0a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800cd0c:	4b04      	ldr	r3, [pc, #16]	@ (800cd20 <__NVIC_GetPriorityGrouping+0x18>)
 800cd0e:	68db      	ldr	r3, [r3, #12]
 800cd10:	0a1b      	lsrs	r3, r3, #8
 800cd12:	f003 0307 	and.w	r3, r3, #7
}
 800cd16:	4618      	mov	r0, r3
 800cd18:	46bd      	mov	sp, r7
 800cd1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd1e:	4770      	bx	lr
 800cd20:	e000ed00 	.word	0xe000ed00

0800cd24 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800cd24:	b480      	push	{r7}
 800cd26:	b083      	sub	sp, #12
 800cd28:	af00      	add	r7, sp, #0
 800cd2a:	4603      	mov	r3, r0
 800cd2c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800cd2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800cd32:	2b00      	cmp	r3, #0
 800cd34:	db0b      	blt.n	800cd4e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800cd36:	79fb      	ldrb	r3, [r7, #7]
 800cd38:	f003 021f 	and.w	r2, r3, #31
 800cd3c:	4907      	ldr	r1, [pc, #28]	@ (800cd5c <__NVIC_EnableIRQ+0x38>)
 800cd3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800cd42:	095b      	lsrs	r3, r3, #5
 800cd44:	2001      	movs	r0, #1
 800cd46:	fa00 f202 	lsl.w	r2, r0, r2
 800cd4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800cd4e:	bf00      	nop
 800cd50:	370c      	adds	r7, #12
 800cd52:	46bd      	mov	sp, r7
 800cd54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd58:	4770      	bx	lr
 800cd5a:	bf00      	nop
 800cd5c:	e000e100 	.word	0xe000e100

0800cd60 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800cd60:	b480      	push	{r7}
 800cd62:	b083      	sub	sp, #12
 800cd64:	af00      	add	r7, sp, #0
 800cd66:	4603      	mov	r3, r0
 800cd68:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800cd6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800cd6e:	2b00      	cmp	r3, #0
 800cd70:	db12      	blt.n	800cd98 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800cd72:	79fb      	ldrb	r3, [r7, #7]
 800cd74:	f003 021f 	and.w	r2, r3, #31
 800cd78:	490a      	ldr	r1, [pc, #40]	@ (800cda4 <__NVIC_DisableIRQ+0x44>)
 800cd7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800cd7e:	095b      	lsrs	r3, r3, #5
 800cd80:	2001      	movs	r0, #1
 800cd82:	fa00 f202 	lsl.w	r2, r0, r2
 800cd86:	3320      	adds	r3, #32
 800cd88:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800cd8c:	f3bf 8f4f 	dsb	sy
}
 800cd90:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800cd92:	f3bf 8f6f 	isb	sy
}
 800cd96:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 800cd98:	bf00      	nop
 800cd9a:	370c      	adds	r7, #12
 800cd9c:	46bd      	mov	sp, r7
 800cd9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cda2:	4770      	bx	lr
 800cda4:	e000e100 	.word	0xe000e100

0800cda8 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 800cda8:	b480      	push	{r7}
 800cdaa:	b083      	sub	sp, #12
 800cdac:	af00      	add	r7, sp, #0
 800cdae:	4603      	mov	r3, r0
 800cdb0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800cdb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800cdb6:	2b00      	cmp	r3, #0
 800cdb8:	db0c      	blt.n	800cdd4 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800cdba:	79fb      	ldrb	r3, [r7, #7]
 800cdbc:	f003 021f 	and.w	r2, r3, #31
 800cdc0:	4907      	ldr	r1, [pc, #28]	@ (800cde0 <__NVIC_ClearPendingIRQ+0x38>)
 800cdc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800cdc6:	095b      	lsrs	r3, r3, #5
 800cdc8:	2001      	movs	r0, #1
 800cdca:	fa00 f202 	lsl.w	r2, r0, r2
 800cdce:	3360      	adds	r3, #96	@ 0x60
 800cdd0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800cdd4:	bf00      	nop
 800cdd6:	370c      	adds	r7, #12
 800cdd8:	46bd      	mov	sp, r7
 800cdda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdde:	4770      	bx	lr
 800cde0:	e000e100 	.word	0xe000e100

0800cde4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800cde4:	b480      	push	{r7}
 800cde6:	b083      	sub	sp, #12
 800cde8:	af00      	add	r7, sp, #0
 800cdea:	4603      	mov	r3, r0
 800cdec:	6039      	str	r1, [r7, #0]
 800cdee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800cdf0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800cdf4:	2b00      	cmp	r3, #0
 800cdf6:	db0a      	blt.n	800ce0e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800cdf8:	683b      	ldr	r3, [r7, #0]
 800cdfa:	b2da      	uxtb	r2, r3
 800cdfc:	490c      	ldr	r1, [pc, #48]	@ (800ce30 <__NVIC_SetPriority+0x4c>)
 800cdfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ce02:	0112      	lsls	r2, r2, #4
 800ce04:	b2d2      	uxtb	r2, r2
 800ce06:	440b      	add	r3, r1
 800ce08:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800ce0c:	e00a      	b.n	800ce24 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800ce0e:	683b      	ldr	r3, [r7, #0]
 800ce10:	b2da      	uxtb	r2, r3
 800ce12:	4908      	ldr	r1, [pc, #32]	@ (800ce34 <__NVIC_SetPriority+0x50>)
 800ce14:	79fb      	ldrb	r3, [r7, #7]
 800ce16:	f003 030f 	and.w	r3, r3, #15
 800ce1a:	3b04      	subs	r3, #4
 800ce1c:	0112      	lsls	r2, r2, #4
 800ce1e:	b2d2      	uxtb	r2, r2
 800ce20:	440b      	add	r3, r1
 800ce22:	761a      	strb	r2, [r3, #24]
}
 800ce24:	bf00      	nop
 800ce26:	370c      	adds	r7, #12
 800ce28:	46bd      	mov	sp, r7
 800ce2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce2e:	4770      	bx	lr
 800ce30:	e000e100 	.word	0xe000e100
 800ce34:	e000ed00 	.word	0xe000ed00

0800ce38 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800ce38:	b480      	push	{r7}
 800ce3a:	b089      	sub	sp, #36	@ 0x24
 800ce3c:	af00      	add	r7, sp, #0
 800ce3e:	60f8      	str	r0, [r7, #12]
 800ce40:	60b9      	str	r1, [r7, #8]
 800ce42:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800ce44:	68fb      	ldr	r3, [r7, #12]
 800ce46:	f003 0307 	and.w	r3, r3, #7
 800ce4a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800ce4c:	69fb      	ldr	r3, [r7, #28]
 800ce4e:	f1c3 0307 	rsb	r3, r3, #7
 800ce52:	2b04      	cmp	r3, #4
 800ce54:	bf28      	it	cs
 800ce56:	2304      	movcs	r3, #4
 800ce58:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800ce5a:	69fb      	ldr	r3, [r7, #28]
 800ce5c:	3304      	adds	r3, #4
 800ce5e:	2b06      	cmp	r3, #6
 800ce60:	d902      	bls.n	800ce68 <NVIC_EncodePriority+0x30>
 800ce62:	69fb      	ldr	r3, [r7, #28]
 800ce64:	3b03      	subs	r3, #3
 800ce66:	e000      	b.n	800ce6a <NVIC_EncodePriority+0x32>
 800ce68:	2300      	movs	r3, #0
 800ce6a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800ce6c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800ce70:	69bb      	ldr	r3, [r7, #24]
 800ce72:	fa02 f303 	lsl.w	r3, r2, r3
 800ce76:	43da      	mvns	r2, r3
 800ce78:	68bb      	ldr	r3, [r7, #8]
 800ce7a:	401a      	ands	r2, r3
 800ce7c:	697b      	ldr	r3, [r7, #20]
 800ce7e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800ce80:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800ce84:	697b      	ldr	r3, [r7, #20]
 800ce86:	fa01 f303 	lsl.w	r3, r1, r3
 800ce8a:	43d9      	mvns	r1, r3
 800ce8c:	687b      	ldr	r3, [r7, #4]
 800ce8e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800ce90:	4313      	orrs	r3, r2
         );
}
 800ce92:	4618      	mov	r0, r3
 800ce94:	3724      	adds	r7, #36	@ 0x24
 800ce96:	46bd      	mov	sp, r7
 800ce98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce9c:	4770      	bx	lr

0800ce9e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800ce9e:	b580      	push	{r7, lr}
 800cea0:	b082      	sub	sp, #8
 800cea2:	af00      	add	r7, sp, #0
 800cea4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800cea6:	6878      	ldr	r0, [r7, #4]
 800cea8:	f7ff ff0a 	bl	800ccc0 <__NVIC_SetPriorityGrouping>
}
 800ceac:	bf00      	nop
 800ceae:	3708      	adds	r7, #8
 800ceb0:	46bd      	mov	sp, r7
 800ceb2:	bd80      	pop	{r7, pc}

0800ceb4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800ceb4:	b580      	push	{r7, lr}
 800ceb6:	b086      	sub	sp, #24
 800ceb8:	af00      	add	r7, sp, #0
 800ceba:	4603      	mov	r3, r0
 800cebc:	60b9      	str	r1, [r7, #8]
 800cebe:	607a      	str	r2, [r7, #4]
 800cec0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800cec2:	2300      	movs	r3, #0
 800cec4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800cec6:	f7ff ff1f 	bl	800cd08 <__NVIC_GetPriorityGrouping>
 800ceca:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800cecc:	687a      	ldr	r2, [r7, #4]
 800cece:	68b9      	ldr	r1, [r7, #8]
 800ced0:	6978      	ldr	r0, [r7, #20]
 800ced2:	f7ff ffb1 	bl	800ce38 <NVIC_EncodePriority>
 800ced6:	4602      	mov	r2, r0
 800ced8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cedc:	4611      	mov	r1, r2
 800cede:	4618      	mov	r0, r3
 800cee0:	f7ff ff80 	bl	800cde4 <__NVIC_SetPriority>
}
 800cee4:	bf00      	nop
 800cee6:	3718      	adds	r7, #24
 800cee8:	46bd      	mov	sp, r7
 800ceea:	bd80      	pop	{r7, pc}

0800ceec <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800ceec:	b580      	push	{r7, lr}
 800ceee:	b082      	sub	sp, #8
 800cef0:	af00      	add	r7, sp, #0
 800cef2:	4603      	mov	r3, r0
 800cef4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800cef6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800cefa:	4618      	mov	r0, r3
 800cefc:	f7ff ff12 	bl	800cd24 <__NVIC_EnableIRQ>
}
 800cf00:	bf00      	nop
 800cf02:	3708      	adds	r7, #8
 800cf04:	46bd      	mov	sp, r7
 800cf06:	bd80      	pop	{r7, pc}

0800cf08 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800cf08:	b580      	push	{r7, lr}
 800cf0a:	b082      	sub	sp, #8
 800cf0c:	af00      	add	r7, sp, #0
 800cf0e:	4603      	mov	r3, r0
 800cf10:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 800cf12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800cf16:	4618      	mov	r0, r3
 800cf18:	f7ff ff22 	bl	800cd60 <__NVIC_DisableIRQ>
}
 800cf1c:	bf00      	nop
 800cf1e:	3708      	adds	r7, #8
 800cf20:	46bd      	mov	sp, r7
 800cf22:	bd80      	pop	{r7, pc}

0800cf24 <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 800cf24:	b580      	push	{r7, lr}
 800cf26:	b082      	sub	sp, #8
 800cf28:	af00      	add	r7, sp, #0
 800cf2a:	4603      	mov	r3, r0
 800cf2c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 800cf2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800cf32:	4618      	mov	r0, r3
 800cf34:	f7ff ff38 	bl	800cda8 <__NVIC_ClearPendingIRQ>
}
 800cf38:	bf00      	nop
 800cf3a:	3708      	adds	r7, #8
 800cf3c:	46bd      	mov	sp, r7
 800cf3e:	bd80      	pop	{r7, pc}

0800cf40 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800cf40:	b580      	push	{r7, lr}
 800cf42:	b086      	sub	sp, #24
 800cf44:	af00      	add	r7, sp, #0
 800cf46:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800cf48:	2300      	movs	r3, #0
 800cf4a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800cf4c:	f7fe fffa 	bl	800bf44 <HAL_GetTick>
 800cf50:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800cf52:	687b      	ldr	r3, [r7, #4]
 800cf54:	2b00      	cmp	r3, #0
 800cf56:	d101      	bne.n	800cf5c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800cf58:	2301      	movs	r3, #1
 800cf5a:	e099      	b.n	800d090 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800cf5c:	687b      	ldr	r3, [r7, #4]
 800cf5e:	2202      	movs	r2, #2
 800cf60:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800cf64:	687b      	ldr	r3, [r7, #4]
 800cf66:	2200      	movs	r2, #0
 800cf68:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800cf6c:	687b      	ldr	r3, [r7, #4]
 800cf6e:	681b      	ldr	r3, [r3, #0]
 800cf70:	681a      	ldr	r2, [r3, #0]
 800cf72:	687b      	ldr	r3, [r7, #4]
 800cf74:	681b      	ldr	r3, [r3, #0]
 800cf76:	f022 0201 	bic.w	r2, r2, #1
 800cf7a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800cf7c:	e00f      	b.n	800cf9e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800cf7e:	f7fe ffe1 	bl	800bf44 <HAL_GetTick>
 800cf82:	4602      	mov	r2, r0
 800cf84:	693b      	ldr	r3, [r7, #16]
 800cf86:	1ad3      	subs	r3, r2, r3
 800cf88:	2b05      	cmp	r3, #5
 800cf8a:	d908      	bls.n	800cf9e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800cf8c:	687b      	ldr	r3, [r7, #4]
 800cf8e:	2220      	movs	r2, #32
 800cf90:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800cf92:	687b      	ldr	r3, [r7, #4]
 800cf94:	2203      	movs	r2, #3
 800cf96:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 800cf9a:	2303      	movs	r3, #3
 800cf9c:	e078      	b.n	800d090 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800cf9e:	687b      	ldr	r3, [r7, #4]
 800cfa0:	681b      	ldr	r3, [r3, #0]
 800cfa2:	681b      	ldr	r3, [r3, #0]
 800cfa4:	f003 0301 	and.w	r3, r3, #1
 800cfa8:	2b00      	cmp	r3, #0
 800cfaa:	d1e8      	bne.n	800cf7e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800cfac:	687b      	ldr	r3, [r7, #4]
 800cfae:	681b      	ldr	r3, [r3, #0]
 800cfb0:	681b      	ldr	r3, [r3, #0]
 800cfb2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800cfb4:	697a      	ldr	r2, [r7, #20]
 800cfb6:	4b38      	ldr	r3, [pc, #224]	@ (800d098 <HAL_DMA_Init+0x158>)
 800cfb8:	4013      	ands	r3, r2
 800cfba:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800cfbc:	687b      	ldr	r3, [r7, #4]
 800cfbe:	685a      	ldr	r2, [r3, #4]
 800cfc0:	687b      	ldr	r3, [r7, #4]
 800cfc2:	689b      	ldr	r3, [r3, #8]
 800cfc4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800cfc6:	687b      	ldr	r3, [r7, #4]
 800cfc8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800cfca:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800cfcc:	687b      	ldr	r3, [r7, #4]
 800cfce:	691b      	ldr	r3, [r3, #16]
 800cfd0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800cfd2:	687b      	ldr	r3, [r7, #4]
 800cfd4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800cfd6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800cfd8:	687b      	ldr	r3, [r7, #4]
 800cfda:	699b      	ldr	r3, [r3, #24]
 800cfdc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800cfde:	687b      	ldr	r3, [r7, #4]
 800cfe0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800cfe2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800cfe4:	687b      	ldr	r3, [r7, #4]
 800cfe6:	6a1b      	ldr	r3, [r3, #32]
 800cfe8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800cfea:	697a      	ldr	r2, [r7, #20]
 800cfec:	4313      	orrs	r3, r2
 800cfee:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800cff0:	687b      	ldr	r3, [r7, #4]
 800cff2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cff4:	2b04      	cmp	r3, #4
 800cff6:	d107      	bne.n	800d008 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800cff8:	687b      	ldr	r3, [r7, #4]
 800cffa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cffc:	687b      	ldr	r3, [r7, #4]
 800cffe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d000:	4313      	orrs	r3, r2
 800d002:	697a      	ldr	r2, [r7, #20]
 800d004:	4313      	orrs	r3, r2
 800d006:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800d008:	687b      	ldr	r3, [r7, #4]
 800d00a:	681b      	ldr	r3, [r3, #0]
 800d00c:	697a      	ldr	r2, [r7, #20]
 800d00e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800d010:	687b      	ldr	r3, [r7, #4]
 800d012:	681b      	ldr	r3, [r3, #0]
 800d014:	695b      	ldr	r3, [r3, #20]
 800d016:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800d018:	697b      	ldr	r3, [r7, #20]
 800d01a:	f023 0307 	bic.w	r3, r3, #7
 800d01e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800d020:	687b      	ldr	r3, [r7, #4]
 800d022:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d024:	697a      	ldr	r2, [r7, #20]
 800d026:	4313      	orrs	r3, r2
 800d028:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800d02a:	687b      	ldr	r3, [r7, #4]
 800d02c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d02e:	2b04      	cmp	r3, #4
 800d030:	d117      	bne.n	800d062 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800d032:	687b      	ldr	r3, [r7, #4]
 800d034:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d036:	697a      	ldr	r2, [r7, #20]
 800d038:	4313      	orrs	r3, r2
 800d03a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800d03c:	687b      	ldr	r3, [r7, #4]
 800d03e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d040:	2b00      	cmp	r3, #0
 800d042:	d00e      	beq.n	800d062 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800d044:	6878      	ldr	r0, [r7, #4]
 800d046:	f000 fb79 	bl	800d73c <DMA_CheckFifoParam>
 800d04a:	4603      	mov	r3, r0
 800d04c:	2b00      	cmp	r3, #0
 800d04e:	d008      	beq.n	800d062 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800d050:	687b      	ldr	r3, [r7, #4]
 800d052:	2240      	movs	r2, #64	@ 0x40
 800d054:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800d056:	687b      	ldr	r3, [r7, #4]
 800d058:	2201      	movs	r2, #1
 800d05a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 800d05e:	2301      	movs	r3, #1
 800d060:	e016      	b.n	800d090 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800d062:	687b      	ldr	r3, [r7, #4]
 800d064:	681b      	ldr	r3, [r3, #0]
 800d066:	697a      	ldr	r2, [r7, #20]
 800d068:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800d06a:	6878      	ldr	r0, [r7, #4]
 800d06c:	f000 fb30 	bl	800d6d0 <DMA_CalcBaseAndBitshift>
 800d070:	4603      	mov	r3, r0
 800d072:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800d074:	687b      	ldr	r3, [r7, #4]
 800d076:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d078:	223f      	movs	r2, #63	@ 0x3f
 800d07a:	409a      	lsls	r2, r3
 800d07c:	68fb      	ldr	r3, [r7, #12]
 800d07e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800d080:	687b      	ldr	r3, [r7, #4]
 800d082:	2200      	movs	r2, #0
 800d084:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800d086:	687b      	ldr	r3, [r7, #4]
 800d088:	2201      	movs	r2, #1
 800d08a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800d08e:	2300      	movs	r3, #0
}
 800d090:	4618      	mov	r0, r3
 800d092:	3718      	adds	r7, #24
 800d094:	46bd      	mov	sp, r7
 800d096:	bd80      	pop	{r7, pc}
 800d098:	f010803f 	.word	0xf010803f

0800d09c <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 800d09c:	b580      	push	{r7, lr}
 800d09e:	b084      	sub	sp, #16
 800d0a0:	af00      	add	r7, sp, #0
 800d0a2:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800d0a4:	687b      	ldr	r3, [r7, #4]
 800d0a6:	2b00      	cmp	r3, #0
 800d0a8:	d101      	bne.n	800d0ae <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 800d0aa:	2301      	movs	r3, #1
 800d0ac:	e050      	b.n	800d150 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 800d0ae:	687b      	ldr	r3, [r7, #4]
 800d0b0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800d0b4:	b2db      	uxtb	r3, r3
 800d0b6:	2b02      	cmp	r3, #2
 800d0b8:	d101      	bne.n	800d0be <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 800d0ba:	2302      	movs	r3, #2
 800d0bc:	e048      	b.n	800d150 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 800d0be:	687b      	ldr	r3, [r7, #4]
 800d0c0:	681b      	ldr	r3, [r3, #0]
 800d0c2:	681a      	ldr	r2, [r3, #0]
 800d0c4:	687b      	ldr	r3, [r7, #4]
 800d0c6:	681b      	ldr	r3, [r3, #0]
 800d0c8:	f022 0201 	bic.w	r2, r2, #1
 800d0cc:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 800d0ce:	687b      	ldr	r3, [r7, #4]
 800d0d0:	681b      	ldr	r3, [r3, #0]
 800d0d2:	2200      	movs	r2, #0
 800d0d4:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 800d0d6:	687b      	ldr	r3, [r7, #4]
 800d0d8:	681b      	ldr	r3, [r3, #0]
 800d0da:	2200      	movs	r2, #0
 800d0dc:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 800d0de:	687b      	ldr	r3, [r7, #4]
 800d0e0:	681b      	ldr	r3, [r3, #0]
 800d0e2:	2200      	movs	r2, #0
 800d0e4:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 800d0e6:	687b      	ldr	r3, [r7, #4]
 800d0e8:	681b      	ldr	r3, [r3, #0]
 800d0ea:	2200      	movs	r2, #0
 800d0ec:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 800d0ee:	687b      	ldr	r3, [r7, #4]
 800d0f0:	681b      	ldr	r3, [r3, #0]
 800d0f2:	2200      	movs	r2, #0
 800d0f4:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 800d0f6:	687b      	ldr	r3, [r7, #4]
 800d0f8:	681b      	ldr	r3, [r3, #0]
 800d0fa:	2221      	movs	r2, #33	@ 0x21
 800d0fc:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800d0fe:	6878      	ldr	r0, [r7, #4]
 800d100:	f000 fae6 	bl	800d6d0 <DMA_CalcBaseAndBitshift>
 800d104:	4603      	mov	r3, r0
 800d106:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 800d108:	687b      	ldr	r3, [r7, #4]
 800d10a:	2200      	movs	r2, #0
 800d10c:	63da      	str	r2, [r3, #60]	@ 0x3c
  hdma->XferHalfCpltCallback = NULL;
 800d10e:	687b      	ldr	r3, [r7, #4]
 800d110:	2200      	movs	r2, #0
 800d112:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->XferM1CpltCallback = NULL;
 800d114:	687b      	ldr	r3, [r7, #4]
 800d116:	2200      	movs	r2, #0
 800d118:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 800d11a:	687b      	ldr	r3, [r7, #4]
 800d11c:	2200      	movs	r2, #0
 800d11e:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->XferErrorCallback = NULL;
 800d120:	687b      	ldr	r3, [r7, #4]
 800d122:	2200      	movs	r2, #0
 800d124:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->XferAbortCallback = NULL;
 800d126:	687b      	ldr	r3, [r7, #4]
 800d128:	2200      	movs	r2, #0
 800d12a:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800d12c:	687b      	ldr	r3, [r7, #4]
 800d12e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d130:	223f      	movs	r2, #63	@ 0x3f
 800d132:	409a      	lsls	r2, r3
 800d134:	68fb      	ldr	r3, [r7, #12]
 800d136:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800d138:	687b      	ldr	r3, [r7, #4]
 800d13a:	2200      	movs	r2, #0
 800d13c:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 800d13e:	687b      	ldr	r3, [r7, #4]
 800d140:	2200      	movs	r2, #0
 800d142:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 800d146:	687b      	ldr	r3, [r7, #4]
 800d148:	2200      	movs	r2, #0
 800d14a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800d14e:	2300      	movs	r3, #0
}
 800d150:	4618      	mov	r0, r3
 800d152:	3710      	adds	r7, #16
 800d154:	46bd      	mov	sp, r7
 800d156:	bd80      	pop	{r7, pc}

0800d158 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800d158:	b580      	push	{r7, lr}
 800d15a:	b086      	sub	sp, #24
 800d15c:	af00      	add	r7, sp, #0
 800d15e:	60f8      	str	r0, [r7, #12]
 800d160:	60b9      	str	r1, [r7, #8]
 800d162:	607a      	str	r2, [r7, #4]
 800d164:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800d166:	2300      	movs	r3, #0
 800d168:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800d16a:	68fb      	ldr	r3, [r7, #12]
 800d16c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d16e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800d170:	68fb      	ldr	r3, [r7, #12]
 800d172:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800d176:	2b01      	cmp	r3, #1
 800d178:	d101      	bne.n	800d17e <HAL_DMA_Start_IT+0x26>
 800d17a:	2302      	movs	r3, #2
 800d17c:	e040      	b.n	800d200 <HAL_DMA_Start_IT+0xa8>
 800d17e:	68fb      	ldr	r3, [r7, #12]
 800d180:	2201      	movs	r2, #1
 800d182:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800d186:	68fb      	ldr	r3, [r7, #12]
 800d188:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800d18c:	b2db      	uxtb	r3, r3
 800d18e:	2b01      	cmp	r3, #1
 800d190:	d12f      	bne.n	800d1f2 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800d192:	68fb      	ldr	r3, [r7, #12]
 800d194:	2202      	movs	r2, #2
 800d196:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800d19a:	68fb      	ldr	r3, [r7, #12]
 800d19c:	2200      	movs	r2, #0
 800d19e:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800d1a0:	683b      	ldr	r3, [r7, #0]
 800d1a2:	687a      	ldr	r2, [r7, #4]
 800d1a4:	68b9      	ldr	r1, [r7, #8]
 800d1a6:	68f8      	ldr	r0, [r7, #12]
 800d1a8:	f000 fa64 	bl	800d674 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800d1ac:	68fb      	ldr	r3, [r7, #12]
 800d1ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d1b0:	223f      	movs	r2, #63	@ 0x3f
 800d1b2:	409a      	lsls	r2, r3
 800d1b4:	693b      	ldr	r3, [r7, #16]
 800d1b6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800d1b8:	68fb      	ldr	r3, [r7, #12]
 800d1ba:	681b      	ldr	r3, [r3, #0]
 800d1bc:	681a      	ldr	r2, [r3, #0]
 800d1be:	68fb      	ldr	r3, [r7, #12]
 800d1c0:	681b      	ldr	r3, [r3, #0]
 800d1c2:	f042 0216 	orr.w	r2, r2, #22
 800d1c6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800d1c8:	68fb      	ldr	r3, [r7, #12]
 800d1ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d1cc:	2b00      	cmp	r3, #0
 800d1ce:	d007      	beq.n	800d1e0 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800d1d0:	68fb      	ldr	r3, [r7, #12]
 800d1d2:	681b      	ldr	r3, [r3, #0]
 800d1d4:	681a      	ldr	r2, [r3, #0]
 800d1d6:	68fb      	ldr	r3, [r7, #12]
 800d1d8:	681b      	ldr	r3, [r3, #0]
 800d1da:	f042 0208 	orr.w	r2, r2, #8
 800d1de:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800d1e0:	68fb      	ldr	r3, [r7, #12]
 800d1e2:	681b      	ldr	r3, [r3, #0]
 800d1e4:	681a      	ldr	r2, [r3, #0]
 800d1e6:	68fb      	ldr	r3, [r7, #12]
 800d1e8:	681b      	ldr	r3, [r3, #0]
 800d1ea:	f042 0201 	orr.w	r2, r2, #1
 800d1ee:	601a      	str	r2, [r3, #0]
 800d1f0:	e005      	b.n	800d1fe <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800d1f2:	68fb      	ldr	r3, [r7, #12]
 800d1f4:	2200      	movs	r2, #0
 800d1f6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800d1fa:	2302      	movs	r3, #2
 800d1fc:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800d1fe:	7dfb      	ldrb	r3, [r7, #23]
}
 800d200:	4618      	mov	r0, r3
 800d202:	3718      	adds	r7, #24
 800d204:	46bd      	mov	sp, r7
 800d206:	bd80      	pop	{r7, pc}

0800d208 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800d208:	b580      	push	{r7, lr}
 800d20a:	b084      	sub	sp, #16
 800d20c:	af00      	add	r7, sp, #0
 800d20e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800d210:	687b      	ldr	r3, [r7, #4]
 800d212:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d214:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800d216:	f7fe fe95 	bl	800bf44 <HAL_GetTick>
 800d21a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800d21c:	687b      	ldr	r3, [r7, #4]
 800d21e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800d222:	b2db      	uxtb	r3, r3
 800d224:	2b02      	cmp	r3, #2
 800d226:	d008      	beq.n	800d23a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800d228:	687b      	ldr	r3, [r7, #4]
 800d22a:	2280      	movs	r2, #128	@ 0x80
 800d22c:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800d22e:	687b      	ldr	r3, [r7, #4]
 800d230:	2200      	movs	r2, #0
 800d232:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 800d236:	2301      	movs	r3, #1
 800d238:	e052      	b.n	800d2e0 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800d23a:	687b      	ldr	r3, [r7, #4]
 800d23c:	681b      	ldr	r3, [r3, #0]
 800d23e:	681a      	ldr	r2, [r3, #0]
 800d240:	687b      	ldr	r3, [r7, #4]
 800d242:	681b      	ldr	r3, [r3, #0]
 800d244:	f022 0216 	bic.w	r2, r2, #22
 800d248:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800d24a:	687b      	ldr	r3, [r7, #4]
 800d24c:	681b      	ldr	r3, [r3, #0]
 800d24e:	695a      	ldr	r2, [r3, #20]
 800d250:	687b      	ldr	r3, [r7, #4]
 800d252:	681b      	ldr	r3, [r3, #0]
 800d254:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800d258:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800d25a:	687b      	ldr	r3, [r7, #4]
 800d25c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d25e:	2b00      	cmp	r3, #0
 800d260:	d103      	bne.n	800d26a <HAL_DMA_Abort+0x62>
 800d262:	687b      	ldr	r3, [r7, #4]
 800d264:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800d266:	2b00      	cmp	r3, #0
 800d268:	d007      	beq.n	800d27a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800d26a:	687b      	ldr	r3, [r7, #4]
 800d26c:	681b      	ldr	r3, [r3, #0]
 800d26e:	681a      	ldr	r2, [r3, #0]
 800d270:	687b      	ldr	r3, [r7, #4]
 800d272:	681b      	ldr	r3, [r3, #0]
 800d274:	f022 0208 	bic.w	r2, r2, #8
 800d278:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800d27a:	687b      	ldr	r3, [r7, #4]
 800d27c:	681b      	ldr	r3, [r3, #0]
 800d27e:	681a      	ldr	r2, [r3, #0]
 800d280:	687b      	ldr	r3, [r7, #4]
 800d282:	681b      	ldr	r3, [r3, #0]
 800d284:	f022 0201 	bic.w	r2, r2, #1
 800d288:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800d28a:	e013      	b.n	800d2b4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800d28c:	f7fe fe5a 	bl	800bf44 <HAL_GetTick>
 800d290:	4602      	mov	r2, r0
 800d292:	68bb      	ldr	r3, [r7, #8]
 800d294:	1ad3      	subs	r3, r2, r3
 800d296:	2b05      	cmp	r3, #5
 800d298:	d90c      	bls.n	800d2b4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800d29a:	687b      	ldr	r3, [r7, #4]
 800d29c:	2220      	movs	r2, #32
 800d29e:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800d2a0:	687b      	ldr	r3, [r7, #4]
 800d2a2:	2203      	movs	r2, #3
 800d2a4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800d2a8:	687b      	ldr	r3, [r7, #4]
 800d2aa:	2200      	movs	r2, #0
 800d2ac:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 800d2b0:	2303      	movs	r3, #3
 800d2b2:	e015      	b.n	800d2e0 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800d2b4:	687b      	ldr	r3, [r7, #4]
 800d2b6:	681b      	ldr	r3, [r3, #0]
 800d2b8:	681b      	ldr	r3, [r3, #0]
 800d2ba:	f003 0301 	and.w	r3, r3, #1
 800d2be:	2b00      	cmp	r3, #0
 800d2c0:	d1e4      	bne.n	800d28c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800d2c2:	687b      	ldr	r3, [r7, #4]
 800d2c4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d2c6:	223f      	movs	r2, #63	@ 0x3f
 800d2c8:	409a      	lsls	r2, r3
 800d2ca:	68fb      	ldr	r3, [r7, #12]
 800d2cc:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800d2ce:	687b      	ldr	r3, [r7, #4]
 800d2d0:	2201      	movs	r2, #1
 800d2d2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800d2d6:	687b      	ldr	r3, [r7, #4]
 800d2d8:	2200      	movs	r2, #0
 800d2da:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 800d2de:	2300      	movs	r3, #0
}
 800d2e0:	4618      	mov	r0, r3
 800d2e2:	3710      	adds	r7, #16
 800d2e4:	46bd      	mov	sp, r7
 800d2e6:	bd80      	pop	{r7, pc}

0800d2e8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800d2e8:	b480      	push	{r7}
 800d2ea:	b083      	sub	sp, #12
 800d2ec:	af00      	add	r7, sp, #0
 800d2ee:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800d2f0:	687b      	ldr	r3, [r7, #4]
 800d2f2:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800d2f6:	b2db      	uxtb	r3, r3
 800d2f8:	2b02      	cmp	r3, #2
 800d2fa:	d004      	beq.n	800d306 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800d2fc:	687b      	ldr	r3, [r7, #4]
 800d2fe:	2280      	movs	r2, #128	@ 0x80
 800d300:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800d302:	2301      	movs	r3, #1
 800d304:	e00c      	b.n	800d320 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800d306:	687b      	ldr	r3, [r7, #4]
 800d308:	2205      	movs	r2, #5
 800d30a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800d30e:	687b      	ldr	r3, [r7, #4]
 800d310:	681b      	ldr	r3, [r3, #0]
 800d312:	681a      	ldr	r2, [r3, #0]
 800d314:	687b      	ldr	r3, [r7, #4]
 800d316:	681b      	ldr	r3, [r3, #0]
 800d318:	f022 0201 	bic.w	r2, r2, #1
 800d31c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800d31e:	2300      	movs	r3, #0
}
 800d320:	4618      	mov	r0, r3
 800d322:	370c      	adds	r7, #12
 800d324:	46bd      	mov	sp, r7
 800d326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d32a:	4770      	bx	lr

0800d32c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800d32c:	b580      	push	{r7, lr}
 800d32e:	b086      	sub	sp, #24
 800d330:	af00      	add	r7, sp, #0
 800d332:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800d334:	2300      	movs	r3, #0
 800d336:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800d338:	4b8e      	ldr	r3, [pc, #568]	@ (800d574 <HAL_DMA_IRQHandler+0x248>)
 800d33a:	681b      	ldr	r3, [r3, #0]
 800d33c:	4a8e      	ldr	r2, [pc, #568]	@ (800d578 <HAL_DMA_IRQHandler+0x24c>)
 800d33e:	fba2 2303 	umull	r2, r3, r2, r3
 800d342:	0a9b      	lsrs	r3, r3, #10
 800d344:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800d346:	687b      	ldr	r3, [r7, #4]
 800d348:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d34a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800d34c:	693b      	ldr	r3, [r7, #16]
 800d34e:	681b      	ldr	r3, [r3, #0]
 800d350:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800d352:	687b      	ldr	r3, [r7, #4]
 800d354:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d356:	2208      	movs	r2, #8
 800d358:	409a      	lsls	r2, r3
 800d35a:	68fb      	ldr	r3, [r7, #12]
 800d35c:	4013      	ands	r3, r2
 800d35e:	2b00      	cmp	r3, #0
 800d360:	d01a      	beq.n	800d398 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800d362:	687b      	ldr	r3, [r7, #4]
 800d364:	681b      	ldr	r3, [r3, #0]
 800d366:	681b      	ldr	r3, [r3, #0]
 800d368:	f003 0304 	and.w	r3, r3, #4
 800d36c:	2b00      	cmp	r3, #0
 800d36e:	d013      	beq.n	800d398 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800d370:	687b      	ldr	r3, [r7, #4]
 800d372:	681b      	ldr	r3, [r3, #0]
 800d374:	681a      	ldr	r2, [r3, #0]
 800d376:	687b      	ldr	r3, [r7, #4]
 800d378:	681b      	ldr	r3, [r3, #0]
 800d37a:	f022 0204 	bic.w	r2, r2, #4
 800d37e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800d380:	687b      	ldr	r3, [r7, #4]
 800d382:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d384:	2208      	movs	r2, #8
 800d386:	409a      	lsls	r2, r3
 800d388:	693b      	ldr	r3, [r7, #16]
 800d38a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800d38c:	687b      	ldr	r3, [r7, #4]
 800d38e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d390:	f043 0201 	orr.w	r2, r3, #1
 800d394:	687b      	ldr	r3, [r7, #4]
 800d396:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800d398:	687b      	ldr	r3, [r7, #4]
 800d39a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d39c:	2201      	movs	r2, #1
 800d39e:	409a      	lsls	r2, r3
 800d3a0:	68fb      	ldr	r3, [r7, #12]
 800d3a2:	4013      	ands	r3, r2
 800d3a4:	2b00      	cmp	r3, #0
 800d3a6:	d012      	beq.n	800d3ce <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800d3a8:	687b      	ldr	r3, [r7, #4]
 800d3aa:	681b      	ldr	r3, [r3, #0]
 800d3ac:	695b      	ldr	r3, [r3, #20]
 800d3ae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d3b2:	2b00      	cmp	r3, #0
 800d3b4:	d00b      	beq.n	800d3ce <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800d3b6:	687b      	ldr	r3, [r7, #4]
 800d3b8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d3ba:	2201      	movs	r2, #1
 800d3bc:	409a      	lsls	r2, r3
 800d3be:	693b      	ldr	r3, [r7, #16]
 800d3c0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800d3c2:	687b      	ldr	r3, [r7, #4]
 800d3c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d3c6:	f043 0202 	orr.w	r2, r3, #2
 800d3ca:	687b      	ldr	r3, [r7, #4]
 800d3cc:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800d3ce:	687b      	ldr	r3, [r7, #4]
 800d3d0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d3d2:	2204      	movs	r2, #4
 800d3d4:	409a      	lsls	r2, r3
 800d3d6:	68fb      	ldr	r3, [r7, #12]
 800d3d8:	4013      	ands	r3, r2
 800d3da:	2b00      	cmp	r3, #0
 800d3dc:	d012      	beq.n	800d404 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800d3de:	687b      	ldr	r3, [r7, #4]
 800d3e0:	681b      	ldr	r3, [r3, #0]
 800d3e2:	681b      	ldr	r3, [r3, #0]
 800d3e4:	f003 0302 	and.w	r3, r3, #2
 800d3e8:	2b00      	cmp	r3, #0
 800d3ea:	d00b      	beq.n	800d404 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800d3ec:	687b      	ldr	r3, [r7, #4]
 800d3ee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d3f0:	2204      	movs	r2, #4
 800d3f2:	409a      	lsls	r2, r3
 800d3f4:	693b      	ldr	r3, [r7, #16]
 800d3f6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800d3f8:	687b      	ldr	r3, [r7, #4]
 800d3fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d3fc:	f043 0204 	orr.w	r2, r3, #4
 800d400:	687b      	ldr	r3, [r7, #4]
 800d402:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800d404:	687b      	ldr	r3, [r7, #4]
 800d406:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d408:	2210      	movs	r2, #16
 800d40a:	409a      	lsls	r2, r3
 800d40c:	68fb      	ldr	r3, [r7, #12]
 800d40e:	4013      	ands	r3, r2
 800d410:	2b00      	cmp	r3, #0
 800d412:	d043      	beq.n	800d49c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800d414:	687b      	ldr	r3, [r7, #4]
 800d416:	681b      	ldr	r3, [r3, #0]
 800d418:	681b      	ldr	r3, [r3, #0]
 800d41a:	f003 0308 	and.w	r3, r3, #8
 800d41e:	2b00      	cmp	r3, #0
 800d420:	d03c      	beq.n	800d49c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800d422:	687b      	ldr	r3, [r7, #4]
 800d424:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d426:	2210      	movs	r2, #16
 800d428:	409a      	lsls	r2, r3
 800d42a:	693b      	ldr	r3, [r7, #16]
 800d42c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800d42e:	687b      	ldr	r3, [r7, #4]
 800d430:	681b      	ldr	r3, [r3, #0]
 800d432:	681b      	ldr	r3, [r3, #0]
 800d434:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800d438:	2b00      	cmp	r3, #0
 800d43a:	d018      	beq.n	800d46e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800d43c:	687b      	ldr	r3, [r7, #4]
 800d43e:	681b      	ldr	r3, [r3, #0]
 800d440:	681b      	ldr	r3, [r3, #0]
 800d442:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800d446:	2b00      	cmp	r3, #0
 800d448:	d108      	bne.n	800d45c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800d44a:	687b      	ldr	r3, [r7, #4]
 800d44c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d44e:	2b00      	cmp	r3, #0
 800d450:	d024      	beq.n	800d49c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800d452:	687b      	ldr	r3, [r7, #4]
 800d454:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d456:	6878      	ldr	r0, [r7, #4]
 800d458:	4798      	blx	r3
 800d45a:	e01f      	b.n	800d49c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800d45c:	687b      	ldr	r3, [r7, #4]
 800d45e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800d460:	2b00      	cmp	r3, #0
 800d462:	d01b      	beq.n	800d49c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800d464:	687b      	ldr	r3, [r7, #4]
 800d466:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800d468:	6878      	ldr	r0, [r7, #4]
 800d46a:	4798      	blx	r3
 800d46c:	e016      	b.n	800d49c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800d46e:	687b      	ldr	r3, [r7, #4]
 800d470:	681b      	ldr	r3, [r3, #0]
 800d472:	681b      	ldr	r3, [r3, #0]
 800d474:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d478:	2b00      	cmp	r3, #0
 800d47a:	d107      	bne.n	800d48c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800d47c:	687b      	ldr	r3, [r7, #4]
 800d47e:	681b      	ldr	r3, [r3, #0]
 800d480:	681a      	ldr	r2, [r3, #0]
 800d482:	687b      	ldr	r3, [r7, #4]
 800d484:	681b      	ldr	r3, [r3, #0]
 800d486:	f022 0208 	bic.w	r2, r2, #8
 800d48a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800d48c:	687b      	ldr	r3, [r7, #4]
 800d48e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d490:	2b00      	cmp	r3, #0
 800d492:	d003      	beq.n	800d49c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800d494:	687b      	ldr	r3, [r7, #4]
 800d496:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d498:	6878      	ldr	r0, [r7, #4]
 800d49a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800d49c:	687b      	ldr	r3, [r7, #4]
 800d49e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d4a0:	2220      	movs	r2, #32
 800d4a2:	409a      	lsls	r2, r3
 800d4a4:	68fb      	ldr	r3, [r7, #12]
 800d4a6:	4013      	ands	r3, r2
 800d4a8:	2b00      	cmp	r3, #0
 800d4aa:	f000 808f 	beq.w	800d5cc <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800d4ae:	687b      	ldr	r3, [r7, #4]
 800d4b0:	681b      	ldr	r3, [r3, #0]
 800d4b2:	681b      	ldr	r3, [r3, #0]
 800d4b4:	f003 0310 	and.w	r3, r3, #16
 800d4b8:	2b00      	cmp	r3, #0
 800d4ba:	f000 8087 	beq.w	800d5cc <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800d4be:	687b      	ldr	r3, [r7, #4]
 800d4c0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d4c2:	2220      	movs	r2, #32
 800d4c4:	409a      	lsls	r2, r3
 800d4c6:	693b      	ldr	r3, [r7, #16]
 800d4c8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800d4ca:	687b      	ldr	r3, [r7, #4]
 800d4cc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800d4d0:	b2db      	uxtb	r3, r3
 800d4d2:	2b05      	cmp	r3, #5
 800d4d4:	d136      	bne.n	800d544 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800d4d6:	687b      	ldr	r3, [r7, #4]
 800d4d8:	681b      	ldr	r3, [r3, #0]
 800d4da:	681a      	ldr	r2, [r3, #0]
 800d4dc:	687b      	ldr	r3, [r7, #4]
 800d4de:	681b      	ldr	r3, [r3, #0]
 800d4e0:	f022 0216 	bic.w	r2, r2, #22
 800d4e4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800d4e6:	687b      	ldr	r3, [r7, #4]
 800d4e8:	681b      	ldr	r3, [r3, #0]
 800d4ea:	695a      	ldr	r2, [r3, #20]
 800d4ec:	687b      	ldr	r3, [r7, #4]
 800d4ee:	681b      	ldr	r3, [r3, #0]
 800d4f0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800d4f4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800d4f6:	687b      	ldr	r3, [r7, #4]
 800d4f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d4fa:	2b00      	cmp	r3, #0
 800d4fc:	d103      	bne.n	800d506 <HAL_DMA_IRQHandler+0x1da>
 800d4fe:	687b      	ldr	r3, [r7, #4]
 800d500:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800d502:	2b00      	cmp	r3, #0
 800d504:	d007      	beq.n	800d516 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800d506:	687b      	ldr	r3, [r7, #4]
 800d508:	681b      	ldr	r3, [r3, #0]
 800d50a:	681a      	ldr	r2, [r3, #0]
 800d50c:	687b      	ldr	r3, [r7, #4]
 800d50e:	681b      	ldr	r3, [r3, #0]
 800d510:	f022 0208 	bic.w	r2, r2, #8
 800d514:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800d516:	687b      	ldr	r3, [r7, #4]
 800d518:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d51a:	223f      	movs	r2, #63	@ 0x3f
 800d51c:	409a      	lsls	r2, r3
 800d51e:	693b      	ldr	r3, [r7, #16]
 800d520:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800d522:	687b      	ldr	r3, [r7, #4]
 800d524:	2201      	movs	r2, #1
 800d526:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800d52a:	687b      	ldr	r3, [r7, #4]
 800d52c:	2200      	movs	r2, #0
 800d52e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 800d532:	687b      	ldr	r3, [r7, #4]
 800d534:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d536:	2b00      	cmp	r3, #0
 800d538:	d07e      	beq.n	800d638 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800d53a:	687b      	ldr	r3, [r7, #4]
 800d53c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d53e:	6878      	ldr	r0, [r7, #4]
 800d540:	4798      	blx	r3
        }
        return;
 800d542:	e079      	b.n	800d638 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800d544:	687b      	ldr	r3, [r7, #4]
 800d546:	681b      	ldr	r3, [r3, #0]
 800d548:	681b      	ldr	r3, [r3, #0]
 800d54a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800d54e:	2b00      	cmp	r3, #0
 800d550:	d01d      	beq.n	800d58e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800d552:	687b      	ldr	r3, [r7, #4]
 800d554:	681b      	ldr	r3, [r3, #0]
 800d556:	681b      	ldr	r3, [r3, #0]
 800d558:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800d55c:	2b00      	cmp	r3, #0
 800d55e:	d10d      	bne.n	800d57c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800d560:	687b      	ldr	r3, [r7, #4]
 800d562:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d564:	2b00      	cmp	r3, #0
 800d566:	d031      	beq.n	800d5cc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800d568:	687b      	ldr	r3, [r7, #4]
 800d56a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d56c:	6878      	ldr	r0, [r7, #4]
 800d56e:	4798      	blx	r3
 800d570:	e02c      	b.n	800d5cc <HAL_DMA_IRQHandler+0x2a0>
 800d572:	bf00      	nop
 800d574:	20000064 	.word	0x20000064
 800d578:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800d57c:	687b      	ldr	r3, [r7, #4]
 800d57e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d580:	2b00      	cmp	r3, #0
 800d582:	d023      	beq.n	800d5cc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800d584:	687b      	ldr	r3, [r7, #4]
 800d586:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d588:	6878      	ldr	r0, [r7, #4]
 800d58a:	4798      	blx	r3
 800d58c:	e01e      	b.n	800d5cc <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800d58e:	687b      	ldr	r3, [r7, #4]
 800d590:	681b      	ldr	r3, [r3, #0]
 800d592:	681b      	ldr	r3, [r3, #0]
 800d594:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d598:	2b00      	cmp	r3, #0
 800d59a:	d10f      	bne.n	800d5bc <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800d59c:	687b      	ldr	r3, [r7, #4]
 800d59e:	681b      	ldr	r3, [r3, #0]
 800d5a0:	681a      	ldr	r2, [r3, #0]
 800d5a2:	687b      	ldr	r3, [r7, #4]
 800d5a4:	681b      	ldr	r3, [r3, #0]
 800d5a6:	f022 0210 	bic.w	r2, r2, #16
 800d5aa:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800d5ac:	687b      	ldr	r3, [r7, #4]
 800d5ae:	2201      	movs	r2, #1
 800d5b0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800d5b4:	687b      	ldr	r3, [r7, #4]
 800d5b6:	2200      	movs	r2, #0
 800d5b8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800d5bc:	687b      	ldr	r3, [r7, #4]
 800d5be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d5c0:	2b00      	cmp	r3, #0
 800d5c2:	d003      	beq.n	800d5cc <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800d5c4:	687b      	ldr	r3, [r7, #4]
 800d5c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d5c8:	6878      	ldr	r0, [r7, #4]
 800d5ca:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800d5cc:	687b      	ldr	r3, [r7, #4]
 800d5ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d5d0:	2b00      	cmp	r3, #0
 800d5d2:	d032      	beq.n	800d63a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800d5d4:	687b      	ldr	r3, [r7, #4]
 800d5d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d5d8:	f003 0301 	and.w	r3, r3, #1
 800d5dc:	2b00      	cmp	r3, #0
 800d5de:	d022      	beq.n	800d626 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800d5e0:	687b      	ldr	r3, [r7, #4]
 800d5e2:	2205      	movs	r2, #5
 800d5e4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800d5e8:	687b      	ldr	r3, [r7, #4]
 800d5ea:	681b      	ldr	r3, [r3, #0]
 800d5ec:	681a      	ldr	r2, [r3, #0]
 800d5ee:	687b      	ldr	r3, [r7, #4]
 800d5f0:	681b      	ldr	r3, [r3, #0]
 800d5f2:	f022 0201 	bic.w	r2, r2, #1
 800d5f6:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800d5f8:	68bb      	ldr	r3, [r7, #8]
 800d5fa:	3301      	adds	r3, #1
 800d5fc:	60bb      	str	r3, [r7, #8]
 800d5fe:	697a      	ldr	r2, [r7, #20]
 800d600:	429a      	cmp	r2, r3
 800d602:	d307      	bcc.n	800d614 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800d604:	687b      	ldr	r3, [r7, #4]
 800d606:	681b      	ldr	r3, [r3, #0]
 800d608:	681b      	ldr	r3, [r3, #0]
 800d60a:	f003 0301 	and.w	r3, r3, #1
 800d60e:	2b00      	cmp	r3, #0
 800d610:	d1f2      	bne.n	800d5f8 <HAL_DMA_IRQHandler+0x2cc>
 800d612:	e000      	b.n	800d616 <HAL_DMA_IRQHandler+0x2ea>
          break;
 800d614:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800d616:	687b      	ldr	r3, [r7, #4]
 800d618:	2201      	movs	r2, #1
 800d61a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800d61e:	687b      	ldr	r3, [r7, #4]
 800d620:	2200      	movs	r2, #0
 800d622:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800d626:	687b      	ldr	r3, [r7, #4]
 800d628:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d62a:	2b00      	cmp	r3, #0
 800d62c:	d005      	beq.n	800d63a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800d62e:	687b      	ldr	r3, [r7, #4]
 800d630:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d632:	6878      	ldr	r0, [r7, #4]
 800d634:	4798      	blx	r3
 800d636:	e000      	b.n	800d63a <HAL_DMA_IRQHandler+0x30e>
        return;
 800d638:	bf00      	nop
    }
  }
}
 800d63a:	3718      	adds	r7, #24
 800d63c:	46bd      	mov	sp, r7
 800d63e:	bd80      	pop	{r7, pc}

0800d640 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800d640:	b480      	push	{r7}
 800d642:	b083      	sub	sp, #12
 800d644:	af00      	add	r7, sp, #0
 800d646:	6078      	str	r0, [r7, #4]
  return hdma->State;
 800d648:	687b      	ldr	r3, [r7, #4]
 800d64a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800d64e:	b2db      	uxtb	r3, r3
}
 800d650:	4618      	mov	r0, r3
 800d652:	370c      	adds	r7, #12
 800d654:	46bd      	mov	sp, r7
 800d656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d65a:	4770      	bx	lr

0800d65c <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 800d65c:	b480      	push	{r7}
 800d65e:	b083      	sub	sp, #12
 800d660:	af00      	add	r7, sp, #0
 800d662:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 800d664:	687b      	ldr	r3, [r7, #4]
 800d666:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 800d668:	4618      	mov	r0, r3
 800d66a:	370c      	adds	r7, #12
 800d66c:	46bd      	mov	sp, r7
 800d66e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d672:	4770      	bx	lr

0800d674 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800d674:	b480      	push	{r7}
 800d676:	b085      	sub	sp, #20
 800d678:	af00      	add	r7, sp, #0
 800d67a:	60f8      	str	r0, [r7, #12]
 800d67c:	60b9      	str	r1, [r7, #8]
 800d67e:	607a      	str	r2, [r7, #4]
 800d680:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800d682:	68fb      	ldr	r3, [r7, #12]
 800d684:	681b      	ldr	r3, [r3, #0]
 800d686:	681a      	ldr	r2, [r3, #0]
 800d688:	68fb      	ldr	r3, [r7, #12]
 800d68a:	681b      	ldr	r3, [r3, #0]
 800d68c:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800d690:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800d692:	68fb      	ldr	r3, [r7, #12]
 800d694:	681b      	ldr	r3, [r3, #0]
 800d696:	683a      	ldr	r2, [r7, #0]
 800d698:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800d69a:	68fb      	ldr	r3, [r7, #12]
 800d69c:	689b      	ldr	r3, [r3, #8]
 800d69e:	2b40      	cmp	r3, #64	@ 0x40
 800d6a0:	d108      	bne.n	800d6b4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800d6a2:	68fb      	ldr	r3, [r7, #12]
 800d6a4:	681b      	ldr	r3, [r3, #0]
 800d6a6:	687a      	ldr	r2, [r7, #4]
 800d6a8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800d6aa:	68fb      	ldr	r3, [r7, #12]
 800d6ac:	681b      	ldr	r3, [r3, #0]
 800d6ae:	68ba      	ldr	r2, [r7, #8]
 800d6b0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800d6b2:	e007      	b.n	800d6c4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800d6b4:	68fb      	ldr	r3, [r7, #12]
 800d6b6:	681b      	ldr	r3, [r3, #0]
 800d6b8:	68ba      	ldr	r2, [r7, #8]
 800d6ba:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800d6bc:	68fb      	ldr	r3, [r7, #12]
 800d6be:	681b      	ldr	r3, [r3, #0]
 800d6c0:	687a      	ldr	r2, [r7, #4]
 800d6c2:	60da      	str	r2, [r3, #12]
}
 800d6c4:	bf00      	nop
 800d6c6:	3714      	adds	r7, #20
 800d6c8:	46bd      	mov	sp, r7
 800d6ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6ce:	4770      	bx	lr

0800d6d0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800d6d0:	b480      	push	{r7}
 800d6d2:	b085      	sub	sp, #20
 800d6d4:	af00      	add	r7, sp, #0
 800d6d6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800d6d8:	687b      	ldr	r3, [r7, #4]
 800d6da:	681b      	ldr	r3, [r3, #0]
 800d6dc:	b2db      	uxtb	r3, r3
 800d6de:	3b10      	subs	r3, #16
 800d6e0:	4a14      	ldr	r2, [pc, #80]	@ (800d734 <DMA_CalcBaseAndBitshift+0x64>)
 800d6e2:	fba2 2303 	umull	r2, r3, r2, r3
 800d6e6:	091b      	lsrs	r3, r3, #4
 800d6e8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800d6ea:	4a13      	ldr	r2, [pc, #76]	@ (800d738 <DMA_CalcBaseAndBitshift+0x68>)
 800d6ec:	68fb      	ldr	r3, [r7, #12]
 800d6ee:	4413      	add	r3, r2
 800d6f0:	781b      	ldrb	r3, [r3, #0]
 800d6f2:	461a      	mov	r2, r3
 800d6f4:	687b      	ldr	r3, [r7, #4]
 800d6f6:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 800d6f8:	68fb      	ldr	r3, [r7, #12]
 800d6fa:	2b03      	cmp	r3, #3
 800d6fc:	d909      	bls.n	800d712 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800d6fe:	687b      	ldr	r3, [r7, #4]
 800d700:	681b      	ldr	r3, [r3, #0]
 800d702:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800d706:	f023 0303 	bic.w	r3, r3, #3
 800d70a:	1d1a      	adds	r2, r3, #4
 800d70c:	687b      	ldr	r3, [r7, #4]
 800d70e:	659a      	str	r2, [r3, #88]	@ 0x58
 800d710:	e007      	b.n	800d722 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800d712:	687b      	ldr	r3, [r7, #4]
 800d714:	681b      	ldr	r3, [r3, #0]
 800d716:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800d71a:	f023 0303 	bic.w	r3, r3, #3
 800d71e:	687a      	ldr	r2, [r7, #4]
 800d720:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 800d722:	687b      	ldr	r3, [r7, #4]
 800d724:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800d726:	4618      	mov	r0, r3
 800d728:	3714      	adds	r7, #20
 800d72a:	46bd      	mov	sp, r7
 800d72c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d730:	4770      	bx	lr
 800d732:	bf00      	nop
 800d734:	aaaaaaab 	.word	0xaaaaaaab
 800d738:	08021fe8 	.word	0x08021fe8

0800d73c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800d73c:	b480      	push	{r7}
 800d73e:	b085      	sub	sp, #20
 800d740:	af00      	add	r7, sp, #0
 800d742:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800d744:	2300      	movs	r3, #0
 800d746:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800d748:	687b      	ldr	r3, [r7, #4]
 800d74a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d74c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800d74e:	687b      	ldr	r3, [r7, #4]
 800d750:	699b      	ldr	r3, [r3, #24]
 800d752:	2b00      	cmp	r3, #0
 800d754:	d11f      	bne.n	800d796 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800d756:	68bb      	ldr	r3, [r7, #8]
 800d758:	2b03      	cmp	r3, #3
 800d75a:	d856      	bhi.n	800d80a <DMA_CheckFifoParam+0xce>
 800d75c:	a201      	add	r2, pc, #4	@ (adr r2, 800d764 <DMA_CheckFifoParam+0x28>)
 800d75e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d762:	bf00      	nop
 800d764:	0800d775 	.word	0x0800d775
 800d768:	0800d787 	.word	0x0800d787
 800d76c:	0800d775 	.word	0x0800d775
 800d770:	0800d80b 	.word	0x0800d80b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800d774:	687b      	ldr	r3, [r7, #4]
 800d776:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d778:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800d77c:	2b00      	cmp	r3, #0
 800d77e:	d046      	beq.n	800d80e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800d780:	2301      	movs	r3, #1
 800d782:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800d784:	e043      	b.n	800d80e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800d786:	687b      	ldr	r3, [r7, #4]
 800d788:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d78a:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800d78e:	d140      	bne.n	800d812 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800d790:	2301      	movs	r3, #1
 800d792:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800d794:	e03d      	b.n	800d812 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800d796:	687b      	ldr	r3, [r7, #4]
 800d798:	699b      	ldr	r3, [r3, #24]
 800d79a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800d79e:	d121      	bne.n	800d7e4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800d7a0:	68bb      	ldr	r3, [r7, #8]
 800d7a2:	2b03      	cmp	r3, #3
 800d7a4:	d837      	bhi.n	800d816 <DMA_CheckFifoParam+0xda>
 800d7a6:	a201      	add	r2, pc, #4	@ (adr r2, 800d7ac <DMA_CheckFifoParam+0x70>)
 800d7a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d7ac:	0800d7bd 	.word	0x0800d7bd
 800d7b0:	0800d7c3 	.word	0x0800d7c3
 800d7b4:	0800d7bd 	.word	0x0800d7bd
 800d7b8:	0800d7d5 	.word	0x0800d7d5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800d7bc:	2301      	movs	r3, #1
 800d7be:	73fb      	strb	r3, [r7, #15]
      break;
 800d7c0:	e030      	b.n	800d824 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800d7c2:	687b      	ldr	r3, [r7, #4]
 800d7c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d7c6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800d7ca:	2b00      	cmp	r3, #0
 800d7cc:	d025      	beq.n	800d81a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800d7ce:	2301      	movs	r3, #1
 800d7d0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800d7d2:	e022      	b.n	800d81a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800d7d4:	687b      	ldr	r3, [r7, #4]
 800d7d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d7d8:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800d7dc:	d11f      	bne.n	800d81e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800d7de:	2301      	movs	r3, #1
 800d7e0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800d7e2:	e01c      	b.n	800d81e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800d7e4:	68bb      	ldr	r3, [r7, #8]
 800d7e6:	2b02      	cmp	r3, #2
 800d7e8:	d903      	bls.n	800d7f2 <DMA_CheckFifoParam+0xb6>
 800d7ea:	68bb      	ldr	r3, [r7, #8]
 800d7ec:	2b03      	cmp	r3, #3
 800d7ee:	d003      	beq.n	800d7f8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800d7f0:	e018      	b.n	800d824 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800d7f2:	2301      	movs	r3, #1
 800d7f4:	73fb      	strb	r3, [r7, #15]
      break;
 800d7f6:	e015      	b.n	800d824 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800d7f8:	687b      	ldr	r3, [r7, #4]
 800d7fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d7fc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800d800:	2b00      	cmp	r3, #0
 800d802:	d00e      	beq.n	800d822 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800d804:	2301      	movs	r3, #1
 800d806:	73fb      	strb	r3, [r7, #15]
      break;
 800d808:	e00b      	b.n	800d822 <DMA_CheckFifoParam+0xe6>
      break;
 800d80a:	bf00      	nop
 800d80c:	e00a      	b.n	800d824 <DMA_CheckFifoParam+0xe8>
      break;
 800d80e:	bf00      	nop
 800d810:	e008      	b.n	800d824 <DMA_CheckFifoParam+0xe8>
      break;
 800d812:	bf00      	nop
 800d814:	e006      	b.n	800d824 <DMA_CheckFifoParam+0xe8>
      break;
 800d816:	bf00      	nop
 800d818:	e004      	b.n	800d824 <DMA_CheckFifoParam+0xe8>
      break;
 800d81a:	bf00      	nop
 800d81c:	e002      	b.n	800d824 <DMA_CheckFifoParam+0xe8>
      break;   
 800d81e:	bf00      	nop
 800d820:	e000      	b.n	800d824 <DMA_CheckFifoParam+0xe8>
      break;
 800d822:	bf00      	nop
    }
  } 
  
  return status; 
 800d824:	7bfb      	ldrb	r3, [r7, #15]
}
 800d826:	4618      	mov	r0, r3
 800d828:	3714      	adds	r7, #20
 800d82a:	46bd      	mov	sp, r7
 800d82c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d830:	4770      	bx	lr
 800d832:	bf00      	nop

0800d834 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800d834:	b480      	push	{r7}
 800d836:	b089      	sub	sp, #36	@ 0x24
 800d838:	af00      	add	r7, sp, #0
 800d83a:	6078      	str	r0, [r7, #4]
 800d83c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800d83e:	2300      	movs	r3, #0
 800d840:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800d842:	2300      	movs	r3, #0
 800d844:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800d846:	2300      	movs	r3, #0
 800d848:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800d84a:	2300      	movs	r3, #0
 800d84c:	61fb      	str	r3, [r7, #28]
 800d84e:	e16b      	b.n	800db28 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800d850:	2201      	movs	r2, #1
 800d852:	69fb      	ldr	r3, [r7, #28]
 800d854:	fa02 f303 	lsl.w	r3, r2, r3
 800d858:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800d85a:	683b      	ldr	r3, [r7, #0]
 800d85c:	681b      	ldr	r3, [r3, #0]
 800d85e:	697a      	ldr	r2, [r7, #20]
 800d860:	4013      	ands	r3, r2
 800d862:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800d864:	693a      	ldr	r2, [r7, #16]
 800d866:	697b      	ldr	r3, [r7, #20]
 800d868:	429a      	cmp	r2, r3
 800d86a:	f040 815a 	bne.w	800db22 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800d86e:	683b      	ldr	r3, [r7, #0]
 800d870:	685b      	ldr	r3, [r3, #4]
 800d872:	f003 0303 	and.w	r3, r3, #3
 800d876:	2b01      	cmp	r3, #1
 800d878:	d005      	beq.n	800d886 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800d87a:	683b      	ldr	r3, [r7, #0]
 800d87c:	685b      	ldr	r3, [r3, #4]
 800d87e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800d882:	2b02      	cmp	r3, #2
 800d884:	d130      	bne.n	800d8e8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800d886:	687b      	ldr	r3, [r7, #4]
 800d888:	689b      	ldr	r3, [r3, #8]
 800d88a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800d88c:	69fb      	ldr	r3, [r7, #28]
 800d88e:	005b      	lsls	r3, r3, #1
 800d890:	2203      	movs	r2, #3
 800d892:	fa02 f303 	lsl.w	r3, r2, r3
 800d896:	43db      	mvns	r3, r3
 800d898:	69ba      	ldr	r2, [r7, #24]
 800d89a:	4013      	ands	r3, r2
 800d89c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800d89e:	683b      	ldr	r3, [r7, #0]
 800d8a0:	68da      	ldr	r2, [r3, #12]
 800d8a2:	69fb      	ldr	r3, [r7, #28]
 800d8a4:	005b      	lsls	r3, r3, #1
 800d8a6:	fa02 f303 	lsl.w	r3, r2, r3
 800d8aa:	69ba      	ldr	r2, [r7, #24]
 800d8ac:	4313      	orrs	r3, r2
 800d8ae:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800d8b0:	687b      	ldr	r3, [r7, #4]
 800d8b2:	69ba      	ldr	r2, [r7, #24]
 800d8b4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800d8b6:	687b      	ldr	r3, [r7, #4]
 800d8b8:	685b      	ldr	r3, [r3, #4]
 800d8ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800d8bc:	2201      	movs	r2, #1
 800d8be:	69fb      	ldr	r3, [r7, #28]
 800d8c0:	fa02 f303 	lsl.w	r3, r2, r3
 800d8c4:	43db      	mvns	r3, r3
 800d8c6:	69ba      	ldr	r2, [r7, #24]
 800d8c8:	4013      	ands	r3, r2
 800d8ca:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800d8cc:	683b      	ldr	r3, [r7, #0]
 800d8ce:	685b      	ldr	r3, [r3, #4]
 800d8d0:	091b      	lsrs	r3, r3, #4
 800d8d2:	f003 0201 	and.w	r2, r3, #1
 800d8d6:	69fb      	ldr	r3, [r7, #28]
 800d8d8:	fa02 f303 	lsl.w	r3, r2, r3
 800d8dc:	69ba      	ldr	r2, [r7, #24]
 800d8de:	4313      	orrs	r3, r2
 800d8e0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800d8e2:	687b      	ldr	r3, [r7, #4]
 800d8e4:	69ba      	ldr	r2, [r7, #24]
 800d8e6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800d8e8:	683b      	ldr	r3, [r7, #0]
 800d8ea:	685b      	ldr	r3, [r3, #4]
 800d8ec:	f003 0303 	and.w	r3, r3, #3
 800d8f0:	2b03      	cmp	r3, #3
 800d8f2:	d017      	beq.n	800d924 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800d8f4:	687b      	ldr	r3, [r7, #4]
 800d8f6:	68db      	ldr	r3, [r3, #12]
 800d8f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800d8fa:	69fb      	ldr	r3, [r7, #28]
 800d8fc:	005b      	lsls	r3, r3, #1
 800d8fe:	2203      	movs	r2, #3
 800d900:	fa02 f303 	lsl.w	r3, r2, r3
 800d904:	43db      	mvns	r3, r3
 800d906:	69ba      	ldr	r2, [r7, #24]
 800d908:	4013      	ands	r3, r2
 800d90a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800d90c:	683b      	ldr	r3, [r7, #0]
 800d90e:	689a      	ldr	r2, [r3, #8]
 800d910:	69fb      	ldr	r3, [r7, #28]
 800d912:	005b      	lsls	r3, r3, #1
 800d914:	fa02 f303 	lsl.w	r3, r2, r3
 800d918:	69ba      	ldr	r2, [r7, #24]
 800d91a:	4313      	orrs	r3, r2
 800d91c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800d91e:	687b      	ldr	r3, [r7, #4]
 800d920:	69ba      	ldr	r2, [r7, #24]
 800d922:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800d924:	683b      	ldr	r3, [r7, #0]
 800d926:	685b      	ldr	r3, [r3, #4]
 800d928:	f003 0303 	and.w	r3, r3, #3
 800d92c:	2b02      	cmp	r3, #2
 800d92e:	d123      	bne.n	800d978 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800d930:	69fb      	ldr	r3, [r7, #28]
 800d932:	08da      	lsrs	r2, r3, #3
 800d934:	687b      	ldr	r3, [r7, #4]
 800d936:	3208      	adds	r2, #8
 800d938:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d93c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800d93e:	69fb      	ldr	r3, [r7, #28]
 800d940:	f003 0307 	and.w	r3, r3, #7
 800d944:	009b      	lsls	r3, r3, #2
 800d946:	220f      	movs	r2, #15
 800d948:	fa02 f303 	lsl.w	r3, r2, r3
 800d94c:	43db      	mvns	r3, r3
 800d94e:	69ba      	ldr	r2, [r7, #24]
 800d950:	4013      	ands	r3, r2
 800d952:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800d954:	683b      	ldr	r3, [r7, #0]
 800d956:	691a      	ldr	r2, [r3, #16]
 800d958:	69fb      	ldr	r3, [r7, #28]
 800d95a:	f003 0307 	and.w	r3, r3, #7
 800d95e:	009b      	lsls	r3, r3, #2
 800d960:	fa02 f303 	lsl.w	r3, r2, r3
 800d964:	69ba      	ldr	r2, [r7, #24]
 800d966:	4313      	orrs	r3, r2
 800d968:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800d96a:	69fb      	ldr	r3, [r7, #28]
 800d96c:	08da      	lsrs	r2, r3, #3
 800d96e:	687b      	ldr	r3, [r7, #4]
 800d970:	3208      	adds	r2, #8
 800d972:	69b9      	ldr	r1, [r7, #24]
 800d974:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800d978:	687b      	ldr	r3, [r7, #4]
 800d97a:	681b      	ldr	r3, [r3, #0]
 800d97c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800d97e:	69fb      	ldr	r3, [r7, #28]
 800d980:	005b      	lsls	r3, r3, #1
 800d982:	2203      	movs	r2, #3
 800d984:	fa02 f303 	lsl.w	r3, r2, r3
 800d988:	43db      	mvns	r3, r3
 800d98a:	69ba      	ldr	r2, [r7, #24]
 800d98c:	4013      	ands	r3, r2
 800d98e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800d990:	683b      	ldr	r3, [r7, #0]
 800d992:	685b      	ldr	r3, [r3, #4]
 800d994:	f003 0203 	and.w	r2, r3, #3
 800d998:	69fb      	ldr	r3, [r7, #28]
 800d99a:	005b      	lsls	r3, r3, #1
 800d99c:	fa02 f303 	lsl.w	r3, r2, r3
 800d9a0:	69ba      	ldr	r2, [r7, #24]
 800d9a2:	4313      	orrs	r3, r2
 800d9a4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800d9a6:	687b      	ldr	r3, [r7, #4]
 800d9a8:	69ba      	ldr	r2, [r7, #24]
 800d9aa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800d9ac:	683b      	ldr	r3, [r7, #0]
 800d9ae:	685b      	ldr	r3, [r3, #4]
 800d9b0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800d9b4:	2b00      	cmp	r3, #0
 800d9b6:	f000 80b4 	beq.w	800db22 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800d9ba:	2300      	movs	r3, #0
 800d9bc:	60fb      	str	r3, [r7, #12]
 800d9be:	4b60      	ldr	r3, [pc, #384]	@ (800db40 <HAL_GPIO_Init+0x30c>)
 800d9c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d9c2:	4a5f      	ldr	r2, [pc, #380]	@ (800db40 <HAL_GPIO_Init+0x30c>)
 800d9c4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800d9c8:	6453      	str	r3, [r2, #68]	@ 0x44
 800d9ca:	4b5d      	ldr	r3, [pc, #372]	@ (800db40 <HAL_GPIO_Init+0x30c>)
 800d9cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d9ce:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800d9d2:	60fb      	str	r3, [r7, #12]
 800d9d4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800d9d6:	4a5b      	ldr	r2, [pc, #364]	@ (800db44 <HAL_GPIO_Init+0x310>)
 800d9d8:	69fb      	ldr	r3, [r7, #28]
 800d9da:	089b      	lsrs	r3, r3, #2
 800d9dc:	3302      	adds	r3, #2
 800d9de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d9e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800d9e4:	69fb      	ldr	r3, [r7, #28]
 800d9e6:	f003 0303 	and.w	r3, r3, #3
 800d9ea:	009b      	lsls	r3, r3, #2
 800d9ec:	220f      	movs	r2, #15
 800d9ee:	fa02 f303 	lsl.w	r3, r2, r3
 800d9f2:	43db      	mvns	r3, r3
 800d9f4:	69ba      	ldr	r2, [r7, #24]
 800d9f6:	4013      	ands	r3, r2
 800d9f8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800d9fa:	687b      	ldr	r3, [r7, #4]
 800d9fc:	4a52      	ldr	r2, [pc, #328]	@ (800db48 <HAL_GPIO_Init+0x314>)
 800d9fe:	4293      	cmp	r3, r2
 800da00:	d02b      	beq.n	800da5a <HAL_GPIO_Init+0x226>
 800da02:	687b      	ldr	r3, [r7, #4]
 800da04:	4a51      	ldr	r2, [pc, #324]	@ (800db4c <HAL_GPIO_Init+0x318>)
 800da06:	4293      	cmp	r3, r2
 800da08:	d025      	beq.n	800da56 <HAL_GPIO_Init+0x222>
 800da0a:	687b      	ldr	r3, [r7, #4]
 800da0c:	4a50      	ldr	r2, [pc, #320]	@ (800db50 <HAL_GPIO_Init+0x31c>)
 800da0e:	4293      	cmp	r3, r2
 800da10:	d01f      	beq.n	800da52 <HAL_GPIO_Init+0x21e>
 800da12:	687b      	ldr	r3, [r7, #4]
 800da14:	4a4f      	ldr	r2, [pc, #316]	@ (800db54 <HAL_GPIO_Init+0x320>)
 800da16:	4293      	cmp	r3, r2
 800da18:	d019      	beq.n	800da4e <HAL_GPIO_Init+0x21a>
 800da1a:	687b      	ldr	r3, [r7, #4]
 800da1c:	4a4e      	ldr	r2, [pc, #312]	@ (800db58 <HAL_GPIO_Init+0x324>)
 800da1e:	4293      	cmp	r3, r2
 800da20:	d013      	beq.n	800da4a <HAL_GPIO_Init+0x216>
 800da22:	687b      	ldr	r3, [r7, #4]
 800da24:	4a4d      	ldr	r2, [pc, #308]	@ (800db5c <HAL_GPIO_Init+0x328>)
 800da26:	4293      	cmp	r3, r2
 800da28:	d00d      	beq.n	800da46 <HAL_GPIO_Init+0x212>
 800da2a:	687b      	ldr	r3, [r7, #4]
 800da2c:	4a4c      	ldr	r2, [pc, #304]	@ (800db60 <HAL_GPIO_Init+0x32c>)
 800da2e:	4293      	cmp	r3, r2
 800da30:	d007      	beq.n	800da42 <HAL_GPIO_Init+0x20e>
 800da32:	687b      	ldr	r3, [r7, #4]
 800da34:	4a4b      	ldr	r2, [pc, #300]	@ (800db64 <HAL_GPIO_Init+0x330>)
 800da36:	4293      	cmp	r3, r2
 800da38:	d101      	bne.n	800da3e <HAL_GPIO_Init+0x20a>
 800da3a:	2307      	movs	r3, #7
 800da3c:	e00e      	b.n	800da5c <HAL_GPIO_Init+0x228>
 800da3e:	2308      	movs	r3, #8
 800da40:	e00c      	b.n	800da5c <HAL_GPIO_Init+0x228>
 800da42:	2306      	movs	r3, #6
 800da44:	e00a      	b.n	800da5c <HAL_GPIO_Init+0x228>
 800da46:	2305      	movs	r3, #5
 800da48:	e008      	b.n	800da5c <HAL_GPIO_Init+0x228>
 800da4a:	2304      	movs	r3, #4
 800da4c:	e006      	b.n	800da5c <HAL_GPIO_Init+0x228>
 800da4e:	2303      	movs	r3, #3
 800da50:	e004      	b.n	800da5c <HAL_GPIO_Init+0x228>
 800da52:	2302      	movs	r3, #2
 800da54:	e002      	b.n	800da5c <HAL_GPIO_Init+0x228>
 800da56:	2301      	movs	r3, #1
 800da58:	e000      	b.n	800da5c <HAL_GPIO_Init+0x228>
 800da5a:	2300      	movs	r3, #0
 800da5c:	69fa      	ldr	r2, [r7, #28]
 800da5e:	f002 0203 	and.w	r2, r2, #3
 800da62:	0092      	lsls	r2, r2, #2
 800da64:	4093      	lsls	r3, r2
 800da66:	69ba      	ldr	r2, [r7, #24]
 800da68:	4313      	orrs	r3, r2
 800da6a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800da6c:	4935      	ldr	r1, [pc, #212]	@ (800db44 <HAL_GPIO_Init+0x310>)
 800da6e:	69fb      	ldr	r3, [r7, #28]
 800da70:	089b      	lsrs	r3, r3, #2
 800da72:	3302      	adds	r3, #2
 800da74:	69ba      	ldr	r2, [r7, #24]
 800da76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800da7a:	4b3b      	ldr	r3, [pc, #236]	@ (800db68 <HAL_GPIO_Init+0x334>)
 800da7c:	689b      	ldr	r3, [r3, #8]
 800da7e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800da80:	693b      	ldr	r3, [r7, #16]
 800da82:	43db      	mvns	r3, r3
 800da84:	69ba      	ldr	r2, [r7, #24]
 800da86:	4013      	ands	r3, r2
 800da88:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800da8a:	683b      	ldr	r3, [r7, #0]
 800da8c:	685b      	ldr	r3, [r3, #4]
 800da8e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800da92:	2b00      	cmp	r3, #0
 800da94:	d003      	beq.n	800da9e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800da96:	69ba      	ldr	r2, [r7, #24]
 800da98:	693b      	ldr	r3, [r7, #16]
 800da9a:	4313      	orrs	r3, r2
 800da9c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800da9e:	4a32      	ldr	r2, [pc, #200]	@ (800db68 <HAL_GPIO_Init+0x334>)
 800daa0:	69bb      	ldr	r3, [r7, #24]
 800daa2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800daa4:	4b30      	ldr	r3, [pc, #192]	@ (800db68 <HAL_GPIO_Init+0x334>)
 800daa6:	68db      	ldr	r3, [r3, #12]
 800daa8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800daaa:	693b      	ldr	r3, [r7, #16]
 800daac:	43db      	mvns	r3, r3
 800daae:	69ba      	ldr	r2, [r7, #24]
 800dab0:	4013      	ands	r3, r2
 800dab2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800dab4:	683b      	ldr	r3, [r7, #0]
 800dab6:	685b      	ldr	r3, [r3, #4]
 800dab8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800dabc:	2b00      	cmp	r3, #0
 800dabe:	d003      	beq.n	800dac8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800dac0:	69ba      	ldr	r2, [r7, #24]
 800dac2:	693b      	ldr	r3, [r7, #16]
 800dac4:	4313      	orrs	r3, r2
 800dac6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800dac8:	4a27      	ldr	r2, [pc, #156]	@ (800db68 <HAL_GPIO_Init+0x334>)
 800daca:	69bb      	ldr	r3, [r7, #24]
 800dacc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800dace:	4b26      	ldr	r3, [pc, #152]	@ (800db68 <HAL_GPIO_Init+0x334>)
 800dad0:	685b      	ldr	r3, [r3, #4]
 800dad2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800dad4:	693b      	ldr	r3, [r7, #16]
 800dad6:	43db      	mvns	r3, r3
 800dad8:	69ba      	ldr	r2, [r7, #24]
 800dada:	4013      	ands	r3, r2
 800dadc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800dade:	683b      	ldr	r3, [r7, #0]
 800dae0:	685b      	ldr	r3, [r3, #4]
 800dae2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800dae6:	2b00      	cmp	r3, #0
 800dae8:	d003      	beq.n	800daf2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800daea:	69ba      	ldr	r2, [r7, #24]
 800daec:	693b      	ldr	r3, [r7, #16]
 800daee:	4313      	orrs	r3, r2
 800daf0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800daf2:	4a1d      	ldr	r2, [pc, #116]	@ (800db68 <HAL_GPIO_Init+0x334>)
 800daf4:	69bb      	ldr	r3, [r7, #24]
 800daf6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800daf8:	4b1b      	ldr	r3, [pc, #108]	@ (800db68 <HAL_GPIO_Init+0x334>)
 800dafa:	681b      	ldr	r3, [r3, #0]
 800dafc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800dafe:	693b      	ldr	r3, [r7, #16]
 800db00:	43db      	mvns	r3, r3
 800db02:	69ba      	ldr	r2, [r7, #24]
 800db04:	4013      	ands	r3, r2
 800db06:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800db08:	683b      	ldr	r3, [r7, #0]
 800db0a:	685b      	ldr	r3, [r3, #4]
 800db0c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800db10:	2b00      	cmp	r3, #0
 800db12:	d003      	beq.n	800db1c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800db14:	69ba      	ldr	r2, [r7, #24]
 800db16:	693b      	ldr	r3, [r7, #16]
 800db18:	4313      	orrs	r3, r2
 800db1a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800db1c:	4a12      	ldr	r2, [pc, #72]	@ (800db68 <HAL_GPIO_Init+0x334>)
 800db1e:	69bb      	ldr	r3, [r7, #24]
 800db20:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800db22:	69fb      	ldr	r3, [r7, #28]
 800db24:	3301      	adds	r3, #1
 800db26:	61fb      	str	r3, [r7, #28]
 800db28:	69fb      	ldr	r3, [r7, #28]
 800db2a:	2b0f      	cmp	r3, #15
 800db2c:	f67f ae90 	bls.w	800d850 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800db30:	bf00      	nop
 800db32:	bf00      	nop
 800db34:	3724      	adds	r7, #36	@ 0x24
 800db36:	46bd      	mov	sp, r7
 800db38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db3c:	4770      	bx	lr
 800db3e:	bf00      	nop
 800db40:	40023800 	.word	0x40023800
 800db44:	40013800 	.word	0x40013800
 800db48:	40020000 	.word	0x40020000
 800db4c:	40020400 	.word	0x40020400
 800db50:	40020800 	.word	0x40020800
 800db54:	40020c00 	.word	0x40020c00
 800db58:	40021000 	.word	0x40021000
 800db5c:	40021400 	.word	0x40021400
 800db60:	40021800 	.word	0x40021800
 800db64:	40021c00 	.word	0x40021c00
 800db68:	40013c00 	.word	0x40013c00

0800db6c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800db6c:	b480      	push	{r7}
 800db6e:	b087      	sub	sp, #28
 800db70:	af00      	add	r7, sp, #0
 800db72:	6078      	str	r0, [r7, #4]
 800db74:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800db76:	2300      	movs	r3, #0
 800db78:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 800db7a:	2300      	movs	r3, #0
 800db7c:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 800db7e:	2300      	movs	r3, #0
 800db80:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800db82:	2300      	movs	r3, #0
 800db84:	617b      	str	r3, [r7, #20]
 800db86:	e0cd      	b.n	800dd24 <HAL_GPIO_DeInit+0x1b8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800db88:	2201      	movs	r2, #1
 800db8a:	697b      	ldr	r3, [r7, #20]
 800db8c:	fa02 f303 	lsl.w	r3, r2, r3
 800db90:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 800db92:	683a      	ldr	r2, [r7, #0]
 800db94:	693b      	ldr	r3, [r7, #16]
 800db96:	4013      	ands	r3, r2
 800db98:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 800db9a:	68fa      	ldr	r2, [r7, #12]
 800db9c:	693b      	ldr	r3, [r7, #16]
 800db9e:	429a      	cmp	r2, r3
 800dba0:	f040 80bd 	bne.w	800dd1e <HAL_GPIO_DeInit+0x1b2>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 800dba4:	4a65      	ldr	r2, [pc, #404]	@ (800dd3c <HAL_GPIO_DeInit+0x1d0>)
 800dba6:	697b      	ldr	r3, [r7, #20]
 800dba8:	089b      	lsrs	r3, r3, #2
 800dbaa:	3302      	adds	r3, #2
 800dbac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800dbb0:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 800dbb2:	697b      	ldr	r3, [r7, #20]
 800dbb4:	f003 0303 	and.w	r3, r3, #3
 800dbb8:	009b      	lsls	r3, r3, #2
 800dbba:	220f      	movs	r2, #15
 800dbbc:	fa02 f303 	lsl.w	r3, r2, r3
 800dbc0:	68ba      	ldr	r2, [r7, #8]
 800dbc2:	4013      	ands	r3, r2
 800dbc4:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 800dbc6:	687b      	ldr	r3, [r7, #4]
 800dbc8:	4a5d      	ldr	r2, [pc, #372]	@ (800dd40 <HAL_GPIO_DeInit+0x1d4>)
 800dbca:	4293      	cmp	r3, r2
 800dbcc:	d02b      	beq.n	800dc26 <HAL_GPIO_DeInit+0xba>
 800dbce:	687b      	ldr	r3, [r7, #4]
 800dbd0:	4a5c      	ldr	r2, [pc, #368]	@ (800dd44 <HAL_GPIO_DeInit+0x1d8>)
 800dbd2:	4293      	cmp	r3, r2
 800dbd4:	d025      	beq.n	800dc22 <HAL_GPIO_DeInit+0xb6>
 800dbd6:	687b      	ldr	r3, [r7, #4]
 800dbd8:	4a5b      	ldr	r2, [pc, #364]	@ (800dd48 <HAL_GPIO_DeInit+0x1dc>)
 800dbda:	4293      	cmp	r3, r2
 800dbdc:	d01f      	beq.n	800dc1e <HAL_GPIO_DeInit+0xb2>
 800dbde:	687b      	ldr	r3, [r7, #4]
 800dbe0:	4a5a      	ldr	r2, [pc, #360]	@ (800dd4c <HAL_GPIO_DeInit+0x1e0>)
 800dbe2:	4293      	cmp	r3, r2
 800dbe4:	d019      	beq.n	800dc1a <HAL_GPIO_DeInit+0xae>
 800dbe6:	687b      	ldr	r3, [r7, #4]
 800dbe8:	4a59      	ldr	r2, [pc, #356]	@ (800dd50 <HAL_GPIO_DeInit+0x1e4>)
 800dbea:	4293      	cmp	r3, r2
 800dbec:	d013      	beq.n	800dc16 <HAL_GPIO_DeInit+0xaa>
 800dbee:	687b      	ldr	r3, [r7, #4]
 800dbf0:	4a58      	ldr	r2, [pc, #352]	@ (800dd54 <HAL_GPIO_DeInit+0x1e8>)
 800dbf2:	4293      	cmp	r3, r2
 800dbf4:	d00d      	beq.n	800dc12 <HAL_GPIO_DeInit+0xa6>
 800dbf6:	687b      	ldr	r3, [r7, #4]
 800dbf8:	4a57      	ldr	r2, [pc, #348]	@ (800dd58 <HAL_GPIO_DeInit+0x1ec>)
 800dbfa:	4293      	cmp	r3, r2
 800dbfc:	d007      	beq.n	800dc0e <HAL_GPIO_DeInit+0xa2>
 800dbfe:	687b      	ldr	r3, [r7, #4]
 800dc00:	4a56      	ldr	r2, [pc, #344]	@ (800dd5c <HAL_GPIO_DeInit+0x1f0>)
 800dc02:	4293      	cmp	r3, r2
 800dc04:	d101      	bne.n	800dc0a <HAL_GPIO_DeInit+0x9e>
 800dc06:	2307      	movs	r3, #7
 800dc08:	e00e      	b.n	800dc28 <HAL_GPIO_DeInit+0xbc>
 800dc0a:	2308      	movs	r3, #8
 800dc0c:	e00c      	b.n	800dc28 <HAL_GPIO_DeInit+0xbc>
 800dc0e:	2306      	movs	r3, #6
 800dc10:	e00a      	b.n	800dc28 <HAL_GPIO_DeInit+0xbc>
 800dc12:	2305      	movs	r3, #5
 800dc14:	e008      	b.n	800dc28 <HAL_GPIO_DeInit+0xbc>
 800dc16:	2304      	movs	r3, #4
 800dc18:	e006      	b.n	800dc28 <HAL_GPIO_DeInit+0xbc>
 800dc1a:	2303      	movs	r3, #3
 800dc1c:	e004      	b.n	800dc28 <HAL_GPIO_DeInit+0xbc>
 800dc1e:	2302      	movs	r3, #2
 800dc20:	e002      	b.n	800dc28 <HAL_GPIO_DeInit+0xbc>
 800dc22:	2301      	movs	r3, #1
 800dc24:	e000      	b.n	800dc28 <HAL_GPIO_DeInit+0xbc>
 800dc26:	2300      	movs	r3, #0
 800dc28:	697a      	ldr	r2, [r7, #20]
 800dc2a:	f002 0203 	and.w	r2, r2, #3
 800dc2e:	0092      	lsls	r2, r2, #2
 800dc30:	4093      	lsls	r3, r2
 800dc32:	68ba      	ldr	r2, [r7, #8]
 800dc34:	429a      	cmp	r2, r3
 800dc36:	d132      	bne.n	800dc9e <HAL_GPIO_DeInit+0x132>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 800dc38:	4b49      	ldr	r3, [pc, #292]	@ (800dd60 <HAL_GPIO_DeInit+0x1f4>)
 800dc3a:	681a      	ldr	r2, [r3, #0]
 800dc3c:	68fb      	ldr	r3, [r7, #12]
 800dc3e:	43db      	mvns	r3, r3
 800dc40:	4947      	ldr	r1, [pc, #284]	@ (800dd60 <HAL_GPIO_DeInit+0x1f4>)
 800dc42:	4013      	ands	r3, r2
 800dc44:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 800dc46:	4b46      	ldr	r3, [pc, #280]	@ (800dd60 <HAL_GPIO_DeInit+0x1f4>)
 800dc48:	685a      	ldr	r2, [r3, #4]
 800dc4a:	68fb      	ldr	r3, [r7, #12]
 800dc4c:	43db      	mvns	r3, r3
 800dc4e:	4944      	ldr	r1, [pc, #272]	@ (800dd60 <HAL_GPIO_DeInit+0x1f4>)
 800dc50:	4013      	ands	r3, r2
 800dc52:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 800dc54:	4b42      	ldr	r3, [pc, #264]	@ (800dd60 <HAL_GPIO_DeInit+0x1f4>)
 800dc56:	68da      	ldr	r2, [r3, #12]
 800dc58:	68fb      	ldr	r3, [r7, #12]
 800dc5a:	43db      	mvns	r3, r3
 800dc5c:	4940      	ldr	r1, [pc, #256]	@ (800dd60 <HAL_GPIO_DeInit+0x1f4>)
 800dc5e:	4013      	ands	r3, r2
 800dc60:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 800dc62:	4b3f      	ldr	r3, [pc, #252]	@ (800dd60 <HAL_GPIO_DeInit+0x1f4>)
 800dc64:	689a      	ldr	r2, [r3, #8]
 800dc66:	68fb      	ldr	r3, [r7, #12]
 800dc68:	43db      	mvns	r3, r3
 800dc6a:	493d      	ldr	r1, [pc, #244]	@ (800dd60 <HAL_GPIO_DeInit+0x1f4>)
 800dc6c:	4013      	ands	r3, r2
 800dc6e:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 800dc70:	697b      	ldr	r3, [r7, #20]
 800dc72:	f003 0303 	and.w	r3, r3, #3
 800dc76:	009b      	lsls	r3, r3, #2
 800dc78:	220f      	movs	r2, #15
 800dc7a:	fa02 f303 	lsl.w	r3, r2, r3
 800dc7e:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 800dc80:	4a2e      	ldr	r2, [pc, #184]	@ (800dd3c <HAL_GPIO_DeInit+0x1d0>)
 800dc82:	697b      	ldr	r3, [r7, #20]
 800dc84:	089b      	lsrs	r3, r3, #2
 800dc86:	3302      	adds	r3, #2
 800dc88:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800dc8c:	68bb      	ldr	r3, [r7, #8]
 800dc8e:	43da      	mvns	r2, r3
 800dc90:	482a      	ldr	r0, [pc, #168]	@ (800dd3c <HAL_GPIO_DeInit+0x1d0>)
 800dc92:	697b      	ldr	r3, [r7, #20]
 800dc94:	089b      	lsrs	r3, r3, #2
 800dc96:	400a      	ands	r2, r1
 800dc98:	3302      	adds	r3, #2
 800dc9a:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800dc9e:	687b      	ldr	r3, [r7, #4]
 800dca0:	681a      	ldr	r2, [r3, #0]
 800dca2:	697b      	ldr	r3, [r7, #20]
 800dca4:	005b      	lsls	r3, r3, #1
 800dca6:	2103      	movs	r1, #3
 800dca8:	fa01 f303 	lsl.w	r3, r1, r3
 800dcac:	43db      	mvns	r3, r3
 800dcae:	401a      	ands	r2, r3
 800dcb0:	687b      	ldr	r3, [r7, #4]
 800dcb2:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800dcb4:	697b      	ldr	r3, [r7, #20]
 800dcb6:	08da      	lsrs	r2, r3, #3
 800dcb8:	687b      	ldr	r3, [r7, #4]
 800dcba:	3208      	adds	r2, #8
 800dcbc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800dcc0:	697b      	ldr	r3, [r7, #20]
 800dcc2:	f003 0307 	and.w	r3, r3, #7
 800dcc6:	009b      	lsls	r3, r3, #2
 800dcc8:	220f      	movs	r2, #15
 800dcca:	fa02 f303 	lsl.w	r3, r2, r3
 800dcce:	43db      	mvns	r3, r3
 800dcd0:	697a      	ldr	r2, [r7, #20]
 800dcd2:	08d2      	lsrs	r2, r2, #3
 800dcd4:	4019      	ands	r1, r3
 800dcd6:	687b      	ldr	r3, [r7, #4]
 800dcd8:	3208      	adds	r2, #8
 800dcda:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800dcde:	687b      	ldr	r3, [r7, #4]
 800dce0:	68da      	ldr	r2, [r3, #12]
 800dce2:	697b      	ldr	r3, [r7, #20]
 800dce4:	005b      	lsls	r3, r3, #1
 800dce6:	2103      	movs	r1, #3
 800dce8:	fa01 f303 	lsl.w	r3, r1, r3
 800dcec:	43db      	mvns	r3, r3
 800dcee:	401a      	ands	r2, r3
 800dcf0:	687b      	ldr	r3, [r7, #4]
 800dcf2:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 800dcf4:	687b      	ldr	r3, [r7, #4]
 800dcf6:	685a      	ldr	r2, [r3, #4]
 800dcf8:	2101      	movs	r1, #1
 800dcfa:	697b      	ldr	r3, [r7, #20]
 800dcfc:	fa01 f303 	lsl.w	r3, r1, r3
 800dd00:	43db      	mvns	r3, r3
 800dd02:	401a      	ands	r2, r3
 800dd04:	687b      	ldr	r3, [r7, #4]
 800dd06:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800dd08:	687b      	ldr	r3, [r7, #4]
 800dd0a:	689a      	ldr	r2, [r3, #8]
 800dd0c:	697b      	ldr	r3, [r7, #20]
 800dd0e:	005b      	lsls	r3, r3, #1
 800dd10:	2103      	movs	r1, #3
 800dd12:	fa01 f303 	lsl.w	r3, r1, r3
 800dd16:	43db      	mvns	r3, r3
 800dd18:	401a      	ands	r2, r3
 800dd1a:	687b      	ldr	r3, [r7, #4]
 800dd1c:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800dd1e:	697b      	ldr	r3, [r7, #20]
 800dd20:	3301      	adds	r3, #1
 800dd22:	617b      	str	r3, [r7, #20]
 800dd24:	697b      	ldr	r3, [r7, #20]
 800dd26:	2b0f      	cmp	r3, #15
 800dd28:	f67f af2e 	bls.w	800db88 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 800dd2c:	bf00      	nop
 800dd2e:	bf00      	nop
 800dd30:	371c      	adds	r7, #28
 800dd32:	46bd      	mov	sp, r7
 800dd34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd38:	4770      	bx	lr
 800dd3a:	bf00      	nop
 800dd3c:	40013800 	.word	0x40013800
 800dd40:	40020000 	.word	0x40020000
 800dd44:	40020400 	.word	0x40020400
 800dd48:	40020800 	.word	0x40020800
 800dd4c:	40020c00 	.word	0x40020c00
 800dd50:	40021000 	.word	0x40021000
 800dd54:	40021400 	.word	0x40021400
 800dd58:	40021800 	.word	0x40021800
 800dd5c:	40021c00 	.word	0x40021c00
 800dd60:	40013c00 	.word	0x40013c00

0800dd64 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800dd64:	b480      	push	{r7}
 800dd66:	b085      	sub	sp, #20
 800dd68:	af00      	add	r7, sp, #0
 800dd6a:	6078      	str	r0, [r7, #4]
 800dd6c:	460b      	mov	r3, r1
 800dd6e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800dd70:	687b      	ldr	r3, [r7, #4]
 800dd72:	691a      	ldr	r2, [r3, #16]
 800dd74:	887b      	ldrh	r3, [r7, #2]
 800dd76:	4013      	ands	r3, r2
 800dd78:	2b00      	cmp	r3, #0
 800dd7a:	d002      	beq.n	800dd82 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800dd7c:	2301      	movs	r3, #1
 800dd7e:	73fb      	strb	r3, [r7, #15]
 800dd80:	e001      	b.n	800dd86 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800dd82:	2300      	movs	r3, #0
 800dd84:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800dd86:	7bfb      	ldrb	r3, [r7, #15]
}
 800dd88:	4618      	mov	r0, r3
 800dd8a:	3714      	adds	r7, #20
 800dd8c:	46bd      	mov	sp, r7
 800dd8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd92:	4770      	bx	lr

0800dd94 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800dd94:	b480      	push	{r7}
 800dd96:	b083      	sub	sp, #12
 800dd98:	af00      	add	r7, sp, #0
 800dd9a:	6078      	str	r0, [r7, #4]
 800dd9c:	460b      	mov	r3, r1
 800dd9e:	807b      	strh	r3, [r7, #2]
 800dda0:	4613      	mov	r3, r2
 800dda2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800dda4:	787b      	ldrb	r3, [r7, #1]
 800dda6:	2b00      	cmp	r3, #0
 800dda8:	d003      	beq.n	800ddb2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800ddaa:	887a      	ldrh	r2, [r7, #2]
 800ddac:	687b      	ldr	r3, [r7, #4]
 800ddae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800ddb0:	e003      	b.n	800ddba <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800ddb2:	887b      	ldrh	r3, [r7, #2]
 800ddb4:	041a      	lsls	r2, r3, #16
 800ddb6:	687b      	ldr	r3, [r7, #4]
 800ddb8:	619a      	str	r2, [r3, #24]
}
 800ddba:	bf00      	nop
 800ddbc:	370c      	adds	r7, #12
 800ddbe:	46bd      	mov	sp, r7
 800ddc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddc4:	4770      	bx	lr
	...

0800ddc8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800ddc8:	b580      	push	{r7, lr}
 800ddca:	b084      	sub	sp, #16
 800ddcc:	af00      	add	r7, sp, #0
 800ddce:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800ddd0:	687b      	ldr	r3, [r7, #4]
 800ddd2:	2b00      	cmp	r3, #0
 800ddd4:	d101      	bne.n	800ddda <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800ddd6:	2301      	movs	r3, #1
 800ddd8:	e12b      	b.n	800e032 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800ddda:	687b      	ldr	r3, [r7, #4]
 800dddc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800dde0:	b2db      	uxtb	r3, r3
 800dde2:	2b00      	cmp	r3, #0
 800dde4:	d106      	bne.n	800ddf4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800dde6:	687b      	ldr	r3, [r7, #4]
 800dde8:	2200      	movs	r2, #0
 800ddea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800ddee:	6878      	ldr	r0, [r7, #4]
 800ddf0:	f7f4 fb1c 	bl	800242c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800ddf4:	687b      	ldr	r3, [r7, #4]
 800ddf6:	2224      	movs	r2, #36	@ 0x24
 800ddf8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800ddfc:	687b      	ldr	r3, [r7, #4]
 800ddfe:	681b      	ldr	r3, [r3, #0]
 800de00:	681a      	ldr	r2, [r3, #0]
 800de02:	687b      	ldr	r3, [r7, #4]
 800de04:	681b      	ldr	r3, [r3, #0]
 800de06:	f022 0201 	bic.w	r2, r2, #1
 800de0a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800de0c:	687b      	ldr	r3, [r7, #4]
 800de0e:	681b      	ldr	r3, [r3, #0]
 800de10:	681a      	ldr	r2, [r3, #0]
 800de12:	687b      	ldr	r3, [r7, #4]
 800de14:	681b      	ldr	r3, [r3, #0]
 800de16:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800de1a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800de1c:	687b      	ldr	r3, [r7, #4]
 800de1e:	681b      	ldr	r3, [r3, #0]
 800de20:	681a      	ldr	r2, [r3, #0]
 800de22:	687b      	ldr	r3, [r7, #4]
 800de24:	681b      	ldr	r3, [r3, #0]
 800de26:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800de2a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800de2c:	f004 fb40 	bl	80124b0 <HAL_RCC_GetPCLK1Freq>
 800de30:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800de32:	687b      	ldr	r3, [r7, #4]
 800de34:	685b      	ldr	r3, [r3, #4]
 800de36:	4a81      	ldr	r2, [pc, #516]	@ (800e03c <HAL_I2C_Init+0x274>)
 800de38:	4293      	cmp	r3, r2
 800de3a:	d807      	bhi.n	800de4c <HAL_I2C_Init+0x84>
 800de3c:	68fb      	ldr	r3, [r7, #12]
 800de3e:	4a80      	ldr	r2, [pc, #512]	@ (800e040 <HAL_I2C_Init+0x278>)
 800de40:	4293      	cmp	r3, r2
 800de42:	bf94      	ite	ls
 800de44:	2301      	movls	r3, #1
 800de46:	2300      	movhi	r3, #0
 800de48:	b2db      	uxtb	r3, r3
 800de4a:	e006      	b.n	800de5a <HAL_I2C_Init+0x92>
 800de4c:	68fb      	ldr	r3, [r7, #12]
 800de4e:	4a7d      	ldr	r2, [pc, #500]	@ (800e044 <HAL_I2C_Init+0x27c>)
 800de50:	4293      	cmp	r3, r2
 800de52:	bf94      	ite	ls
 800de54:	2301      	movls	r3, #1
 800de56:	2300      	movhi	r3, #0
 800de58:	b2db      	uxtb	r3, r3
 800de5a:	2b00      	cmp	r3, #0
 800de5c:	d001      	beq.n	800de62 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800de5e:	2301      	movs	r3, #1
 800de60:	e0e7      	b.n	800e032 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800de62:	68fb      	ldr	r3, [r7, #12]
 800de64:	4a78      	ldr	r2, [pc, #480]	@ (800e048 <HAL_I2C_Init+0x280>)
 800de66:	fba2 2303 	umull	r2, r3, r2, r3
 800de6a:	0c9b      	lsrs	r3, r3, #18
 800de6c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800de6e:	687b      	ldr	r3, [r7, #4]
 800de70:	681b      	ldr	r3, [r3, #0]
 800de72:	685b      	ldr	r3, [r3, #4]
 800de74:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800de78:	687b      	ldr	r3, [r7, #4]
 800de7a:	681b      	ldr	r3, [r3, #0]
 800de7c:	68ba      	ldr	r2, [r7, #8]
 800de7e:	430a      	orrs	r2, r1
 800de80:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800de82:	687b      	ldr	r3, [r7, #4]
 800de84:	681b      	ldr	r3, [r3, #0]
 800de86:	6a1b      	ldr	r3, [r3, #32]
 800de88:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800de8c:	687b      	ldr	r3, [r7, #4]
 800de8e:	685b      	ldr	r3, [r3, #4]
 800de90:	4a6a      	ldr	r2, [pc, #424]	@ (800e03c <HAL_I2C_Init+0x274>)
 800de92:	4293      	cmp	r3, r2
 800de94:	d802      	bhi.n	800de9c <HAL_I2C_Init+0xd4>
 800de96:	68bb      	ldr	r3, [r7, #8]
 800de98:	3301      	adds	r3, #1
 800de9a:	e009      	b.n	800deb0 <HAL_I2C_Init+0xe8>
 800de9c:	68bb      	ldr	r3, [r7, #8]
 800de9e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800dea2:	fb02 f303 	mul.w	r3, r2, r3
 800dea6:	4a69      	ldr	r2, [pc, #420]	@ (800e04c <HAL_I2C_Init+0x284>)
 800dea8:	fba2 2303 	umull	r2, r3, r2, r3
 800deac:	099b      	lsrs	r3, r3, #6
 800deae:	3301      	adds	r3, #1
 800deb0:	687a      	ldr	r2, [r7, #4]
 800deb2:	6812      	ldr	r2, [r2, #0]
 800deb4:	430b      	orrs	r3, r1
 800deb6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800deb8:	687b      	ldr	r3, [r7, #4]
 800deba:	681b      	ldr	r3, [r3, #0]
 800debc:	69db      	ldr	r3, [r3, #28]
 800debe:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800dec2:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800dec6:	687b      	ldr	r3, [r7, #4]
 800dec8:	685b      	ldr	r3, [r3, #4]
 800deca:	495c      	ldr	r1, [pc, #368]	@ (800e03c <HAL_I2C_Init+0x274>)
 800decc:	428b      	cmp	r3, r1
 800dece:	d819      	bhi.n	800df04 <HAL_I2C_Init+0x13c>
 800ded0:	68fb      	ldr	r3, [r7, #12]
 800ded2:	1e59      	subs	r1, r3, #1
 800ded4:	687b      	ldr	r3, [r7, #4]
 800ded6:	685b      	ldr	r3, [r3, #4]
 800ded8:	005b      	lsls	r3, r3, #1
 800deda:	fbb1 f3f3 	udiv	r3, r1, r3
 800dede:	1c59      	adds	r1, r3, #1
 800dee0:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800dee4:	400b      	ands	r3, r1
 800dee6:	2b00      	cmp	r3, #0
 800dee8:	d00a      	beq.n	800df00 <HAL_I2C_Init+0x138>
 800deea:	68fb      	ldr	r3, [r7, #12]
 800deec:	1e59      	subs	r1, r3, #1
 800deee:	687b      	ldr	r3, [r7, #4]
 800def0:	685b      	ldr	r3, [r3, #4]
 800def2:	005b      	lsls	r3, r3, #1
 800def4:	fbb1 f3f3 	udiv	r3, r1, r3
 800def8:	3301      	adds	r3, #1
 800defa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800defe:	e051      	b.n	800dfa4 <HAL_I2C_Init+0x1dc>
 800df00:	2304      	movs	r3, #4
 800df02:	e04f      	b.n	800dfa4 <HAL_I2C_Init+0x1dc>
 800df04:	687b      	ldr	r3, [r7, #4]
 800df06:	689b      	ldr	r3, [r3, #8]
 800df08:	2b00      	cmp	r3, #0
 800df0a:	d111      	bne.n	800df30 <HAL_I2C_Init+0x168>
 800df0c:	68fb      	ldr	r3, [r7, #12]
 800df0e:	1e58      	subs	r0, r3, #1
 800df10:	687b      	ldr	r3, [r7, #4]
 800df12:	6859      	ldr	r1, [r3, #4]
 800df14:	460b      	mov	r3, r1
 800df16:	005b      	lsls	r3, r3, #1
 800df18:	440b      	add	r3, r1
 800df1a:	fbb0 f3f3 	udiv	r3, r0, r3
 800df1e:	3301      	adds	r3, #1
 800df20:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800df24:	2b00      	cmp	r3, #0
 800df26:	bf0c      	ite	eq
 800df28:	2301      	moveq	r3, #1
 800df2a:	2300      	movne	r3, #0
 800df2c:	b2db      	uxtb	r3, r3
 800df2e:	e012      	b.n	800df56 <HAL_I2C_Init+0x18e>
 800df30:	68fb      	ldr	r3, [r7, #12]
 800df32:	1e58      	subs	r0, r3, #1
 800df34:	687b      	ldr	r3, [r7, #4]
 800df36:	6859      	ldr	r1, [r3, #4]
 800df38:	460b      	mov	r3, r1
 800df3a:	009b      	lsls	r3, r3, #2
 800df3c:	440b      	add	r3, r1
 800df3e:	0099      	lsls	r1, r3, #2
 800df40:	440b      	add	r3, r1
 800df42:	fbb0 f3f3 	udiv	r3, r0, r3
 800df46:	3301      	adds	r3, #1
 800df48:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800df4c:	2b00      	cmp	r3, #0
 800df4e:	bf0c      	ite	eq
 800df50:	2301      	moveq	r3, #1
 800df52:	2300      	movne	r3, #0
 800df54:	b2db      	uxtb	r3, r3
 800df56:	2b00      	cmp	r3, #0
 800df58:	d001      	beq.n	800df5e <HAL_I2C_Init+0x196>
 800df5a:	2301      	movs	r3, #1
 800df5c:	e022      	b.n	800dfa4 <HAL_I2C_Init+0x1dc>
 800df5e:	687b      	ldr	r3, [r7, #4]
 800df60:	689b      	ldr	r3, [r3, #8]
 800df62:	2b00      	cmp	r3, #0
 800df64:	d10e      	bne.n	800df84 <HAL_I2C_Init+0x1bc>
 800df66:	68fb      	ldr	r3, [r7, #12]
 800df68:	1e58      	subs	r0, r3, #1
 800df6a:	687b      	ldr	r3, [r7, #4]
 800df6c:	6859      	ldr	r1, [r3, #4]
 800df6e:	460b      	mov	r3, r1
 800df70:	005b      	lsls	r3, r3, #1
 800df72:	440b      	add	r3, r1
 800df74:	fbb0 f3f3 	udiv	r3, r0, r3
 800df78:	3301      	adds	r3, #1
 800df7a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800df7e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800df82:	e00f      	b.n	800dfa4 <HAL_I2C_Init+0x1dc>
 800df84:	68fb      	ldr	r3, [r7, #12]
 800df86:	1e58      	subs	r0, r3, #1
 800df88:	687b      	ldr	r3, [r7, #4]
 800df8a:	6859      	ldr	r1, [r3, #4]
 800df8c:	460b      	mov	r3, r1
 800df8e:	009b      	lsls	r3, r3, #2
 800df90:	440b      	add	r3, r1
 800df92:	0099      	lsls	r1, r3, #2
 800df94:	440b      	add	r3, r1
 800df96:	fbb0 f3f3 	udiv	r3, r0, r3
 800df9a:	3301      	adds	r3, #1
 800df9c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800dfa0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800dfa4:	6879      	ldr	r1, [r7, #4]
 800dfa6:	6809      	ldr	r1, [r1, #0]
 800dfa8:	4313      	orrs	r3, r2
 800dfaa:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800dfac:	687b      	ldr	r3, [r7, #4]
 800dfae:	681b      	ldr	r3, [r3, #0]
 800dfb0:	681b      	ldr	r3, [r3, #0]
 800dfb2:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800dfb6:	687b      	ldr	r3, [r7, #4]
 800dfb8:	69da      	ldr	r2, [r3, #28]
 800dfba:	687b      	ldr	r3, [r7, #4]
 800dfbc:	6a1b      	ldr	r3, [r3, #32]
 800dfbe:	431a      	orrs	r2, r3
 800dfc0:	687b      	ldr	r3, [r7, #4]
 800dfc2:	681b      	ldr	r3, [r3, #0]
 800dfc4:	430a      	orrs	r2, r1
 800dfc6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800dfc8:	687b      	ldr	r3, [r7, #4]
 800dfca:	681b      	ldr	r3, [r3, #0]
 800dfcc:	689b      	ldr	r3, [r3, #8]
 800dfce:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800dfd2:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800dfd6:	687a      	ldr	r2, [r7, #4]
 800dfd8:	6911      	ldr	r1, [r2, #16]
 800dfda:	687a      	ldr	r2, [r7, #4]
 800dfdc:	68d2      	ldr	r2, [r2, #12]
 800dfde:	4311      	orrs	r1, r2
 800dfe0:	687a      	ldr	r2, [r7, #4]
 800dfe2:	6812      	ldr	r2, [r2, #0]
 800dfe4:	430b      	orrs	r3, r1
 800dfe6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800dfe8:	687b      	ldr	r3, [r7, #4]
 800dfea:	681b      	ldr	r3, [r3, #0]
 800dfec:	68db      	ldr	r3, [r3, #12]
 800dfee:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800dff2:	687b      	ldr	r3, [r7, #4]
 800dff4:	695a      	ldr	r2, [r3, #20]
 800dff6:	687b      	ldr	r3, [r7, #4]
 800dff8:	699b      	ldr	r3, [r3, #24]
 800dffa:	431a      	orrs	r2, r3
 800dffc:	687b      	ldr	r3, [r7, #4]
 800dffe:	681b      	ldr	r3, [r3, #0]
 800e000:	430a      	orrs	r2, r1
 800e002:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800e004:	687b      	ldr	r3, [r7, #4]
 800e006:	681b      	ldr	r3, [r3, #0]
 800e008:	681a      	ldr	r2, [r3, #0]
 800e00a:	687b      	ldr	r3, [r7, #4]
 800e00c:	681b      	ldr	r3, [r3, #0]
 800e00e:	f042 0201 	orr.w	r2, r2, #1
 800e012:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800e014:	687b      	ldr	r3, [r7, #4]
 800e016:	2200      	movs	r2, #0
 800e018:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800e01a:	687b      	ldr	r3, [r7, #4]
 800e01c:	2220      	movs	r2, #32
 800e01e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800e022:	687b      	ldr	r3, [r7, #4]
 800e024:	2200      	movs	r2, #0
 800e026:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800e028:	687b      	ldr	r3, [r7, #4]
 800e02a:	2200      	movs	r2, #0
 800e02c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 800e030:	2300      	movs	r3, #0
}
 800e032:	4618      	mov	r0, r3
 800e034:	3710      	adds	r7, #16
 800e036:	46bd      	mov	sp, r7
 800e038:	bd80      	pop	{r7, pc}
 800e03a:	bf00      	nop
 800e03c:	000186a0 	.word	0x000186a0
 800e040:	001e847f 	.word	0x001e847f
 800e044:	003d08ff 	.word	0x003d08ff
 800e048:	431bde83 	.word	0x431bde83
 800e04c:	10624dd3 	.word	0x10624dd3

0800e050 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 800e050:	b580      	push	{r7, lr}
 800e052:	b082      	sub	sp, #8
 800e054:	af00      	add	r7, sp, #0
 800e056:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800e058:	687b      	ldr	r3, [r7, #4]
 800e05a:	2b00      	cmp	r3, #0
 800e05c:	d101      	bne.n	800e062 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 800e05e:	2301      	movs	r3, #1
 800e060:	e021      	b.n	800e0a6 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 800e062:	687b      	ldr	r3, [r7, #4]
 800e064:	2224      	movs	r2, #36	@ 0x24
 800e066:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 800e06a:	687b      	ldr	r3, [r7, #4]
 800e06c:	681b      	ldr	r3, [r3, #0]
 800e06e:	681a      	ldr	r2, [r3, #0]
 800e070:	687b      	ldr	r3, [r7, #4]
 800e072:	681b      	ldr	r3, [r3, #0]
 800e074:	f022 0201 	bic.w	r2, r2, #1
 800e078:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 800e07a:	6878      	ldr	r0, [r7, #4]
 800e07c:	f7f4 faac 	bl	80025d8 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 800e080:	687b      	ldr	r3, [r7, #4]
 800e082:	2200      	movs	r2, #0
 800e084:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 800e086:	687b      	ldr	r3, [r7, #4]
 800e088:	2200      	movs	r2, #0
 800e08a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800e08e:	687b      	ldr	r3, [r7, #4]
 800e090:	2200      	movs	r2, #0
 800e092:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800e094:	687b      	ldr	r3, [r7, #4]
 800e096:	2200      	movs	r2, #0
 800e098:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 800e09c:	687b      	ldr	r3, [r7, #4]
 800e09e:	2200      	movs	r2, #0
 800e0a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800e0a4:	2300      	movs	r3, #0
}
 800e0a6:	4618      	mov	r0, r3
 800e0a8:	3708      	adds	r7, #8
 800e0aa:	46bd      	mov	sp, r7
 800e0ac:	bd80      	pop	{r7, pc}
	...

0800e0b0 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800e0b0:	b580      	push	{r7, lr}
 800e0b2:	b088      	sub	sp, #32
 800e0b4:	af02      	add	r7, sp, #8
 800e0b6:	60f8      	str	r0, [r7, #12]
 800e0b8:	607a      	str	r2, [r7, #4]
 800e0ba:	461a      	mov	r2, r3
 800e0bc:	460b      	mov	r3, r1
 800e0be:	817b      	strh	r3, [r7, #10]
 800e0c0:	4613      	mov	r3, r2
 800e0c2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800e0c4:	f7fd ff3e 	bl	800bf44 <HAL_GetTick>
 800e0c8:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800e0ca:	68fb      	ldr	r3, [r7, #12]
 800e0cc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800e0d0:	b2db      	uxtb	r3, r3
 800e0d2:	2b20      	cmp	r3, #32
 800e0d4:	f040 80e0 	bne.w	800e298 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800e0d8:	697b      	ldr	r3, [r7, #20]
 800e0da:	9300      	str	r3, [sp, #0]
 800e0dc:	2319      	movs	r3, #25
 800e0de:	2201      	movs	r2, #1
 800e0e0:	4970      	ldr	r1, [pc, #448]	@ (800e2a4 <HAL_I2C_Master_Transmit+0x1f4>)
 800e0e2:	68f8      	ldr	r0, [r7, #12]
 800e0e4:	f002 f916 	bl	8010314 <I2C_WaitOnFlagUntilTimeout>
 800e0e8:	4603      	mov	r3, r0
 800e0ea:	2b00      	cmp	r3, #0
 800e0ec:	d001      	beq.n	800e0f2 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800e0ee:	2302      	movs	r3, #2
 800e0f0:	e0d3      	b.n	800e29a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800e0f2:	68fb      	ldr	r3, [r7, #12]
 800e0f4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800e0f8:	2b01      	cmp	r3, #1
 800e0fa:	d101      	bne.n	800e100 <HAL_I2C_Master_Transmit+0x50>
 800e0fc:	2302      	movs	r3, #2
 800e0fe:	e0cc      	b.n	800e29a <HAL_I2C_Master_Transmit+0x1ea>
 800e100:	68fb      	ldr	r3, [r7, #12]
 800e102:	2201      	movs	r2, #1
 800e104:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800e108:	68fb      	ldr	r3, [r7, #12]
 800e10a:	681b      	ldr	r3, [r3, #0]
 800e10c:	681b      	ldr	r3, [r3, #0]
 800e10e:	f003 0301 	and.w	r3, r3, #1
 800e112:	2b01      	cmp	r3, #1
 800e114:	d007      	beq.n	800e126 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800e116:	68fb      	ldr	r3, [r7, #12]
 800e118:	681b      	ldr	r3, [r3, #0]
 800e11a:	681a      	ldr	r2, [r3, #0]
 800e11c:	68fb      	ldr	r3, [r7, #12]
 800e11e:	681b      	ldr	r3, [r3, #0]
 800e120:	f042 0201 	orr.w	r2, r2, #1
 800e124:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800e126:	68fb      	ldr	r3, [r7, #12]
 800e128:	681b      	ldr	r3, [r3, #0]
 800e12a:	681a      	ldr	r2, [r3, #0]
 800e12c:	68fb      	ldr	r3, [r7, #12]
 800e12e:	681b      	ldr	r3, [r3, #0]
 800e130:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800e134:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800e136:	68fb      	ldr	r3, [r7, #12]
 800e138:	2221      	movs	r2, #33	@ 0x21
 800e13a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800e13e:	68fb      	ldr	r3, [r7, #12]
 800e140:	2210      	movs	r2, #16
 800e142:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800e146:	68fb      	ldr	r3, [r7, #12]
 800e148:	2200      	movs	r2, #0
 800e14a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800e14c:	68fb      	ldr	r3, [r7, #12]
 800e14e:	687a      	ldr	r2, [r7, #4]
 800e150:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800e152:	68fb      	ldr	r3, [r7, #12]
 800e154:	893a      	ldrh	r2, [r7, #8]
 800e156:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800e158:	68fb      	ldr	r3, [r7, #12]
 800e15a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e15c:	b29a      	uxth	r2, r3
 800e15e:	68fb      	ldr	r3, [r7, #12]
 800e160:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800e162:	68fb      	ldr	r3, [r7, #12]
 800e164:	4a50      	ldr	r2, [pc, #320]	@ (800e2a8 <HAL_I2C_Master_Transmit+0x1f8>)
 800e166:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800e168:	8979      	ldrh	r1, [r7, #10]
 800e16a:	697b      	ldr	r3, [r7, #20]
 800e16c:	6a3a      	ldr	r2, [r7, #32]
 800e16e:	68f8      	ldr	r0, [r7, #12]
 800e170:	f001 fe94 	bl	800fe9c <I2C_MasterRequestWrite>
 800e174:	4603      	mov	r3, r0
 800e176:	2b00      	cmp	r3, #0
 800e178:	d001      	beq.n	800e17e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800e17a:	2301      	movs	r3, #1
 800e17c:	e08d      	b.n	800e29a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800e17e:	2300      	movs	r3, #0
 800e180:	613b      	str	r3, [r7, #16]
 800e182:	68fb      	ldr	r3, [r7, #12]
 800e184:	681b      	ldr	r3, [r3, #0]
 800e186:	695b      	ldr	r3, [r3, #20]
 800e188:	613b      	str	r3, [r7, #16]
 800e18a:	68fb      	ldr	r3, [r7, #12]
 800e18c:	681b      	ldr	r3, [r3, #0]
 800e18e:	699b      	ldr	r3, [r3, #24]
 800e190:	613b      	str	r3, [r7, #16]
 800e192:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800e194:	e066      	b.n	800e264 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800e196:	697a      	ldr	r2, [r7, #20]
 800e198:	6a39      	ldr	r1, [r7, #32]
 800e19a:	68f8      	ldr	r0, [r7, #12]
 800e19c:	f002 f990 	bl	80104c0 <I2C_WaitOnTXEFlagUntilTimeout>
 800e1a0:	4603      	mov	r3, r0
 800e1a2:	2b00      	cmp	r3, #0
 800e1a4:	d00d      	beq.n	800e1c2 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800e1a6:	68fb      	ldr	r3, [r7, #12]
 800e1a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e1aa:	2b04      	cmp	r3, #4
 800e1ac:	d107      	bne.n	800e1be <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800e1ae:	68fb      	ldr	r3, [r7, #12]
 800e1b0:	681b      	ldr	r3, [r3, #0]
 800e1b2:	681a      	ldr	r2, [r3, #0]
 800e1b4:	68fb      	ldr	r3, [r7, #12]
 800e1b6:	681b      	ldr	r3, [r3, #0]
 800e1b8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800e1bc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800e1be:	2301      	movs	r3, #1
 800e1c0:	e06b      	b.n	800e29a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800e1c2:	68fb      	ldr	r3, [r7, #12]
 800e1c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e1c6:	781a      	ldrb	r2, [r3, #0]
 800e1c8:	68fb      	ldr	r3, [r7, #12]
 800e1ca:	681b      	ldr	r3, [r3, #0]
 800e1cc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800e1ce:	68fb      	ldr	r3, [r7, #12]
 800e1d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e1d2:	1c5a      	adds	r2, r3, #1
 800e1d4:	68fb      	ldr	r3, [r7, #12]
 800e1d6:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800e1d8:	68fb      	ldr	r3, [r7, #12]
 800e1da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e1dc:	b29b      	uxth	r3, r3
 800e1de:	3b01      	subs	r3, #1
 800e1e0:	b29a      	uxth	r2, r3
 800e1e2:	68fb      	ldr	r3, [r7, #12]
 800e1e4:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800e1e6:	68fb      	ldr	r3, [r7, #12]
 800e1e8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e1ea:	3b01      	subs	r3, #1
 800e1ec:	b29a      	uxth	r2, r3
 800e1ee:	68fb      	ldr	r3, [r7, #12]
 800e1f0:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800e1f2:	68fb      	ldr	r3, [r7, #12]
 800e1f4:	681b      	ldr	r3, [r3, #0]
 800e1f6:	695b      	ldr	r3, [r3, #20]
 800e1f8:	f003 0304 	and.w	r3, r3, #4
 800e1fc:	2b04      	cmp	r3, #4
 800e1fe:	d11b      	bne.n	800e238 <HAL_I2C_Master_Transmit+0x188>
 800e200:	68fb      	ldr	r3, [r7, #12]
 800e202:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e204:	2b00      	cmp	r3, #0
 800e206:	d017      	beq.n	800e238 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800e208:	68fb      	ldr	r3, [r7, #12]
 800e20a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e20c:	781a      	ldrb	r2, [r3, #0]
 800e20e:	68fb      	ldr	r3, [r7, #12]
 800e210:	681b      	ldr	r3, [r3, #0]
 800e212:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800e214:	68fb      	ldr	r3, [r7, #12]
 800e216:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e218:	1c5a      	adds	r2, r3, #1
 800e21a:	68fb      	ldr	r3, [r7, #12]
 800e21c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 800e21e:	68fb      	ldr	r3, [r7, #12]
 800e220:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e222:	b29b      	uxth	r3, r3
 800e224:	3b01      	subs	r3, #1
 800e226:	b29a      	uxth	r2, r3
 800e228:	68fb      	ldr	r3, [r7, #12]
 800e22a:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 800e22c:	68fb      	ldr	r3, [r7, #12]
 800e22e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e230:	3b01      	subs	r3, #1
 800e232:	b29a      	uxth	r2, r3
 800e234:	68fb      	ldr	r3, [r7, #12]
 800e236:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800e238:	697a      	ldr	r2, [r7, #20]
 800e23a:	6a39      	ldr	r1, [r7, #32]
 800e23c:	68f8      	ldr	r0, [r7, #12]
 800e23e:	f002 f980 	bl	8010542 <I2C_WaitOnBTFFlagUntilTimeout>
 800e242:	4603      	mov	r3, r0
 800e244:	2b00      	cmp	r3, #0
 800e246:	d00d      	beq.n	800e264 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800e248:	68fb      	ldr	r3, [r7, #12]
 800e24a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e24c:	2b04      	cmp	r3, #4
 800e24e:	d107      	bne.n	800e260 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800e250:	68fb      	ldr	r3, [r7, #12]
 800e252:	681b      	ldr	r3, [r3, #0]
 800e254:	681a      	ldr	r2, [r3, #0]
 800e256:	68fb      	ldr	r3, [r7, #12]
 800e258:	681b      	ldr	r3, [r3, #0]
 800e25a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800e25e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800e260:	2301      	movs	r3, #1
 800e262:	e01a      	b.n	800e29a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800e264:	68fb      	ldr	r3, [r7, #12]
 800e266:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e268:	2b00      	cmp	r3, #0
 800e26a:	d194      	bne.n	800e196 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800e26c:	68fb      	ldr	r3, [r7, #12]
 800e26e:	681b      	ldr	r3, [r3, #0]
 800e270:	681a      	ldr	r2, [r3, #0]
 800e272:	68fb      	ldr	r3, [r7, #12]
 800e274:	681b      	ldr	r3, [r3, #0]
 800e276:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800e27a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800e27c:	68fb      	ldr	r3, [r7, #12]
 800e27e:	2220      	movs	r2, #32
 800e280:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800e284:	68fb      	ldr	r3, [r7, #12]
 800e286:	2200      	movs	r2, #0
 800e288:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800e28c:	68fb      	ldr	r3, [r7, #12]
 800e28e:	2200      	movs	r2, #0
 800e290:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800e294:	2300      	movs	r3, #0
 800e296:	e000      	b.n	800e29a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800e298:	2302      	movs	r3, #2
  }
}
 800e29a:	4618      	mov	r0, r3
 800e29c:	3718      	adds	r7, #24
 800e29e:	46bd      	mov	sp, r7
 800e2a0:	bd80      	pop	{r7, pc}
 800e2a2:	bf00      	nop
 800e2a4:	00100002 	.word	0x00100002
 800e2a8:	ffff0000 	.word	0xffff0000

0800e2ac <HAL_I2C_Master_Receive_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size)
{
 800e2ac:	b480      	push	{r7}
 800e2ae:	b087      	sub	sp, #28
 800e2b0:	af00      	add	r7, sp, #0
 800e2b2:	60f8      	str	r0, [r7, #12]
 800e2b4:	607a      	str	r2, [r7, #4]
 800e2b6:	461a      	mov	r2, r3
 800e2b8:	460b      	mov	r3, r1
 800e2ba:	817b      	strh	r3, [r7, #10]
 800e2bc:	4613      	mov	r3, r2
 800e2be:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 800e2c0:	2300      	movs	r3, #0
 800e2c2:	617b      	str	r3, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800e2c4:	68fb      	ldr	r3, [r7, #12]
 800e2c6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800e2ca:	b2db      	uxtb	r3, r3
 800e2cc:	2b20      	cmp	r3, #32
 800e2ce:	f040 808d 	bne.w	800e3ec <HAL_I2C_Master_Receive_IT+0x140>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 800e2d2:	4b4a      	ldr	r3, [pc, #296]	@ (800e3fc <HAL_I2C_Master_Receive_IT+0x150>)
 800e2d4:	681b      	ldr	r3, [r3, #0]
 800e2d6:	08db      	lsrs	r3, r3, #3
 800e2d8:	4a49      	ldr	r2, [pc, #292]	@ (800e400 <HAL_I2C_Master_Receive_IT+0x154>)
 800e2da:	fba2 2303 	umull	r2, r3, r2, r3
 800e2de:	0a1a      	lsrs	r2, r3, #8
 800e2e0:	4613      	mov	r3, r2
 800e2e2:	009b      	lsls	r3, r3, #2
 800e2e4:	4413      	add	r3, r2
 800e2e6:	009a      	lsls	r2, r3, #2
 800e2e8:	4413      	add	r3, r2
 800e2ea:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 800e2ec:	697b      	ldr	r3, [r7, #20]
 800e2ee:	3b01      	subs	r3, #1
 800e2f0:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 800e2f2:	697b      	ldr	r3, [r7, #20]
 800e2f4:	2b00      	cmp	r3, #0
 800e2f6:	d116      	bne.n	800e326 <HAL_I2C_Master_Receive_IT+0x7a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800e2f8:	68fb      	ldr	r3, [r7, #12]
 800e2fa:	2200      	movs	r2, #0
 800e2fc:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800e2fe:	68fb      	ldr	r3, [r7, #12]
 800e300:	2220      	movs	r2, #32
 800e302:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800e306:	68fb      	ldr	r3, [r7, #12]
 800e308:	2200      	movs	r2, #0
 800e30a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800e30e:	68fb      	ldr	r3, [r7, #12]
 800e310:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e312:	f043 0220 	orr.w	r2, r3, #32
 800e316:	68fb      	ldr	r3, [r7, #12]
 800e318:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800e31a:	68fb      	ldr	r3, [r7, #12]
 800e31c:	2200      	movs	r2, #0
 800e31e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800e322:	2301      	movs	r3, #1
 800e324:	e063      	b.n	800e3ee <HAL_I2C_Master_Receive_IT+0x142>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 800e326:	68fb      	ldr	r3, [r7, #12]
 800e328:	681b      	ldr	r3, [r3, #0]
 800e32a:	699b      	ldr	r3, [r3, #24]
 800e32c:	f003 0302 	and.w	r3, r3, #2
 800e330:	2b02      	cmp	r3, #2
 800e332:	d0db      	beq.n	800e2ec <HAL_I2C_Master_Receive_IT+0x40>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800e334:	68fb      	ldr	r3, [r7, #12]
 800e336:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800e33a:	2b01      	cmp	r3, #1
 800e33c:	d101      	bne.n	800e342 <HAL_I2C_Master_Receive_IT+0x96>
 800e33e:	2302      	movs	r3, #2
 800e340:	e055      	b.n	800e3ee <HAL_I2C_Master_Receive_IT+0x142>
 800e342:	68fb      	ldr	r3, [r7, #12]
 800e344:	2201      	movs	r2, #1
 800e346:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800e34a:	68fb      	ldr	r3, [r7, #12]
 800e34c:	681b      	ldr	r3, [r3, #0]
 800e34e:	681b      	ldr	r3, [r3, #0]
 800e350:	f003 0301 	and.w	r3, r3, #1
 800e354:	2b01      	cmp	r3, #1
 800e356:	d007      	beq.n	800e368 <HAL_I2C_Master_Receive_IT+0xbc>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800e358:	68fb      	ldr	r3, [r7, #12]
 800e35a:	681b      	ldr	r3, [r3, #0]
 800e35c:	681a      	ldr	r2, [r3, #0]
 800e35e:	68fb      	ldr	r3, [r7, #12]
 800e360:	681b      	ldr	r3, [r3, #0]
 800e362:	f042 0201 	orr.w	r2, r2, #1
 800e366:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800e368:	68fb      	ldr	r3, [r7, #12]
 800e36a:	681b      	ldr	r3, [r3, #0]
 800e36c:	681a      	ldr	r2, [r3, #0]
 800e36e:	68fb      	ldr	r3, [r7, #12]
 800e370:	681b      	ldr	r3, [r3, #0]
 800e372:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800e376:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800e378:	68fb      	ldr	r3, [r7, #12]
 800e37a:	2222      	movs	r2, #34	@ 0x22
 800e37c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800e380:	68fb      	ldr	r3, [r7, #12]
 800e382:	2210      	movs	r2, #16
 800e384:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800e388:	68fb      	ldr	r3, [r7, #12]
 800e38a:	2200      	movs	r2, #0
 800e38c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800e38e:	68fb      	ldr	r3, [r7, #12]
 800e390:	687a      	ldr	r2, [r7, #4]
 800e392:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800e394:	68fb      	ldr	r3, [r7, #12]
 800e396:	893a      	ldrh	r2, [r7, #8]
 800e398:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800e39a:	68fb      	ldr	r3, [r7, #12]
 800e39c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e39e:	b29a      	uxth	r2, r3
 800e3a0:	68fb      	ldr	r3, [r7, #12]
 800e3a2:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800e3a4:	68fb      	ldr	r3, [r7, #12]
 800e3a6:	4a17      	ldr	r2, [pc, #92]	@ (800e404 <HAL_I2C_Master_Receive_IT+0x158>)
 800e3a8:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->Devaddress  = DevAddress;
 800e3aa:	897a      	ldrh	r2, [r7, #10]
 800e3ac:	68fb      	ldr	r3, [r7, #12]
 800e3ae:	645a      	str	r2, [r3, #68]	@ 0x44


    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800e3b0:	68fb      	ldr	r3, [r7, #12]
 800e3b2:	2200      	movs	r2, #0
 800e3b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
    to avoid the risk of I2C interrupt handle execution before current
    process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800e3b8:	68fb      	ldr	r3, [r7, #12]
 800e3ba:	681b      	ldr	r3, [r3, #0]
 800e3bc:	685a      	ldr	r2, [r3, #4]
 800e3be:	68fb      	ldr	r3, [r7, #12]
 800e3c0:	681b      	ldr	r3, [r3, #0]
 800e3c2:	f442 62e0 	orr.w	r2, r2, #1792	@ 0x700
 800e3c6:	605a      	str	r2, [r3, #4]

    /* Enable Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800e3c8:	68fb      	ldr	r3, [r7, #12]
 800e3ca:	681b      	ldr	r3, [r3, #0]
 800e3cc:	681a      	ldr	r2, [r3, #0]
 800e3ce:	68fb      	ldr	r3, [r7, #12]
 800e3d0:	681b      	ldr	r3, [r3, #0]
 800e3d2:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800e3d6:	601a      	str	r2, [r3, #0]

    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800e3d8:	68fb      	ldr	r3, [r7, #12]
 800e3da:	681b      	ldr	r3, [r3, #0]
 800e3dc:	681a      	ldr	r2, [r3, #0]
 800e3de:	68fb      	ldr	r3, [r7, #12]
 800e3e0:	681b      	ldr	r3, [r3, #0]
 800e3e2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800e3e6:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 800e3e8:	2300      	movs	r3, #0
 800e3ea:	e000      	b.n	800e3ee <HAL_I2C_Master_Receive_IT+0x142>
  }
  else
  {
    return HAL_BUSY;
 800e3ec:	2302      	movs	r3, #2
  }
}
 800e3ee:	4618      	mov	r0, r3
 800e3f0:	371c      	adds	r7, #28
 800e3f2:	46bd      	mov	sp, r7
 800e3f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3f8:	4770      	bx	lr
 800e3fa:	bf00      	nop
 800e3fc:	20000064 	.word	0x20000064
 800e400:	14f8b589 	.word	0x14f8b589
 800e404:	ffff0000 	.word	0xffff0000

0800e408 <HAL_I2C_Slave_Receive_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Receive_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size)
{
 800e408:	b480      	push	{r7}
 800e40a:	b085      	sub	sp, #20
 800e40c:	af00      	add	r7, sp, #0
 800e40e:	60f8      	str	r0, [r7, #12]
 800e410:	60b9      	str	r1, [r7, #8]
 800e412:	4613      	mov	r3, r2
 800e414:	80fb      	strh	r3, [r7, #6]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800e416:	68fb      	ldr	r3, [r7, #12]
 800e418:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800e41c:	b2db      	uxtb	r3, r3
 800e41e:	2b20      	cmp	r3, #32
 800e420:	d158      	bne.n	800e4d4 <HAL_I2C_Slave_Receive_IT+0xcc>
  {
    if ((pData == NULL) || (Size == 0U))
 800e422:	68bb      	ldr	r3, [r7, #8]
 800e424:	2b00      	cmp	r3, #0
 800e426:	d002      	beq.n	800e42e <HAL_I2C_Slave_Receive_IT+0x26>
 800e428:	88fb      	ldrh	r3, [r7, #6]
 800e42a:	2b00      	cmp	r3, #0
 800e42c:	d101      	bne.n	800e432 <HAL_I2C_Slave_Receive_IT+0x2a>
    {
      return  HAL_ERROR;
 800e42e:	2301      	movs	r3, #1
 800e430:	e051      	b.n	800e4d6 <HAL_I2C_Slave_Receive_IT+0xce>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800e432:	68fb      	ldr	r3, [r7, #12]
 800e434:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800e438:	2b01      	cmp	r3, #1
 800e43a:	d101      	bne.n	800e440 <HAL_I2C_Slave_Receive_IT+0x38>
 800e43c:	2302      	movs	r3, #2
 800e43e:	e04a      	b.n	800e4d6 <HAL_I2C_Slave_Receive_IT+0xce>
 800e440:	68fb      	ldr	r3, [r7, #12]
 800e442:	2201      	movs	r2, #1
 800e444:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800e448:	68fb      	ldr	r3, [r7, #12]
 800e44a:	681b      	ldr	r3, [r3, #0]
 800e44c:	681b      	ldr	r3, [r3, #0]
 800e44e:	f003 0301 	and.w	r3, r3, #1
 800e452:	2b01      	cmp	r3, #1
 800e454:	d007      	beq.n	800e466 <HAL_I2C_Slave_Receive_IT+0x5e>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800e456:	68fb      	ldr	r3, [r7, #12]
 800e458:	681b      	ldr	r3, [r3, #0]
 800e45a:	681a      	ldr	r2, [r3, #0]
 800e45c:	68fb      	ldr	r3, [r7, #12]
 800e45e:	681b      	ldr	r3, [r3, #0]
 800e460:	f042 0201 	orr.w	r2, r2, #1
 800e464:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800e466:	68fb      	ldr	r3, [r7, #12]
 800e468:	681b      	ldr	r3, [r3, #0]
 800e46a:	681a      	ldr	r2, [r3, #0]
 800e46c:	68fb      	ldr	r3, [r7, #12]
 800e46e:	681b      	ldr	r3, [r3, #0]
 800e470:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800e474:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800e476:	68fb      	ldr	r3, [r7, #12]
 800e478:	2222      	movs	r2, #34	@ 0x22
 800e47a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 800e47e:	68fb      	ldr	r3, [r7, #12]
 800e480:	2220      	movs	r2, #32
 800e482:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800e486:	68fb      	ldr	r3, [r7, #12]
 800e488:	2200      	movs	r2, #0
 800e48a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800e48c:	68fb      	ldr	r3, [r7, #12]
 800e48e:	68ba      	ldr	r2, [r7, #8]
 800e490:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800e492:	68fb      	ldr	r3, [r7, #12]
 800e494:	88fa      	ldrh	r2, [r7, #6]
 800e496:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800e498:	68fb      	ldr	r3, [r7, #12]
 800e49a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e49c:	b29a      	uxth	r2, r3
 800e49e:	68fb      	ldr	r3, [r7, #12]
 800e4a0:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800e4a2:	68fb      	ldr	r3, [r7, #12]
 800e4a4:	4a0f      	ldr	r2, [pc, #60]	@ (800e4e4 <HAL_I2C_Slave_Receive_IT+0xdc>)
 800e4a6:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Enable Address Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800e4a8:	68fb      	ldr	r3, [r7, #12]
 800e4aa:	681b      	ldr	r3, [r3, #0]
 800e4ac:	681a      	ldr	r2, [r3, #0]
 800e4ae:	68fb      	ldr	r3, [r7, #12]
 800e4b0:	681b      	ldr	r3, [r3, #0]
 800e4b2:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800e4b6:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800e4b8:	68fb      	ldr	r3, [r7, #12]
 800e4ba:	2200      	movs	r2, #0
 800e4bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
              to avoid the risk of I2C interrupt handle execution before current
              process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800e4c0:	68fb      	ldr	r3, [r7, #12]
 800e4c2:	681b      	ldr	r3, [r3, #0]
 800e4c4:	685a      	ldr	r2, [r3, #4]
 800e4c6:	68fb      	ldr	r3, [r7, #12]
 800e4c8:	681b      	ldr	r3, [r3, #0]
 800e4ca:	f442 62e0 	orr.w	r2, r2, #1792	@ 0x700
 800e4ce:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 800e4d0:	2300      	movs	r3, #0
 800e4d2:	e000      	b.n	800e4d6 <HAL_I2C_Slave_Receive_IT+0xce>
  }
  else
  {
    return HAL_BUSY;
 800e4d4:	2302      	movs	r3, #2
  }
}
 800e4d6:	4618      	mov	r0, r3
 800e4d8:	3714      	adds	r7, #20
 800e4da:	46bd      	mov	sp, r7
 800e4dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4e0:	4770      	bx	lr
 800e4e2:	bf00      	nop
 800e4e4:	ffff0000 	.word	0xffff0000

0800e4e8 <HAL_I2C_Master_Receive_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size)
{
 800e4e8:	b580      	push	{r7, lr}
 800e4ea:	b086      	sub	sp, #24
 800e4ec:	af00      	add	r7, sp, #0
 800e4ee:	60f8      	str	r0, [r7, #12]
 800e4f0:	607a      	str	r2, [r7, #4]
 800e4f2:	461a      	mov	r2, r3
 800e4f4:	460b      	mov	r3, r1
 800e4f6:	817b      	strh	r3, [r7, #10]
 800e4f8:	4613      	mov	r3, r2
 800e4fa:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 800e4fc:	2300      	movs	r3, #0
 800e4fe:	613b      	str	r3, [r7, #16]
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800e500:	68fb      	ldr	r3, [r7, #12]
 800e502:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800e506:	b2db      	uxtb	r3, r3
 800e508:	2b20      	cmp	r3, #32
 800e50a:	f040 810d 	bne.w	800e728 <HAL_I2C_Master_Receive_DMA+0x240>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 800e50e:	4b89      	ldr	r3, [pc, #548]	@ (800e734 <HAL_I2C_Master_Receive_DMA+0x24c>)
 800e510:	681b      	ldr	r3, [r3, #0]
 800e512:	08db      	lsrs	r3, r3, #3
 800e514:	4a88      	ldr	r2, [pc, #544]	@ (800e738 <HAL_I2C_Master_Receive_DMA+0x250>)
 800e516:	fba2 2303 	umull	r2, r3, r2, r3
 800e51a:	0a1a      	lsrs	r2, r3, #8
 800e51c:	4613      	mov	r3, r2
 800e51e:	009b      	lsls	r3, r3, #2
 800e520:	4413      	add	r3, r2
 800e522:	009a      	lsls	r2, r3, #2
 800e524:	4413      	add	r3, r2
 800e526:	613b      	str	r3, [r7, #16]
    do
    {
      count--;
 800e528:	693b      	ldr	r3, [r7, #16]
 800e52a:	3b01      	subs	r3, #1
 800e52c:	613b      	str	r3, [r7, #16]
      if (count == 0U)
 800e52e:	693b      	ldr	r3, [r7, #16]
 800e530:	2b00      	cmp	r3, #0
 800e532:	d116      	bne.n	800e562 <HAL_I2C_Master_Receive_DMA+0x7a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800e534:	68fb      	ldr	r3, [r7, #12]
 800e536:	2200      	movs	r2, #0
 800e538:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800e53a:	68fb      	ldr	r3, [r7, #12]
 800e53c:	2220      	movs	r2, #32
 800e53e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800e542:	68fb      	ldr	r3, [r7, #12]
 800e544:	2200      	movs	r2, #0
 800e546:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800e54a:	68fb      	ldr	r3, [r7, #12]
 800e54c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e54e:	f043 0220 	orr.w	r2, r3, #32
 800e552:	68fb      	ldr	r3, [r7, #12]
 800e554:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800e556:	68fb      	ldr	r3, [r7, #12]
 800e558:	2200      	movs	r2, #0
 800e55a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800e55e:	2301      	movs	r3, #1
 800e560:	e0e3      	b.n	800e72a <HAL_I2C_Master_Receive_DMA+0x242>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 800e562:	68fb      	ldr	r3, [r7, #12]
 800e564:	681b      	ldr	r3, [r3, #0]
 800e566:	699b      	ldr	r3, [r3, #24]
 800e568:	f003 0302 	and.w	r3, r3, #2
 800e56c:	2b02      	cmp	r3, #2
 800e56e:	d0db      	beq.n	800e528 <HAL_I2C_Master_Receive_DMA+0x40>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800e570:	68fb      	ldr	r3, [r7, #12]
 800e572:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800e576:	2b01      	cmp	r3, #1
 800e578:	d101      	bne.n	800e57e <HAL_I2C_Master_Receive_DMA+0x96>
 800e57a:	2302      	movs	r3, #2
 800e57c:	e0d5      	b.n	800e72a <HAL_I2C_Master_Receive_DMA+0x242>
 800e57e:	68fb      	ldr	r3, [r7, #12]
 800e580:	2201      	movs	r2, #1
 800e582:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800e586:	68fb      	ldr	r3, [r7, #12]
 800e588:	681b      	ldr	r3, [r3, #0]
 800e58a:	681b      	ldr	r3, [r3, #0]
 800e58c:	f003 0301 	and.w	r3, r3, #1
 800e590:	2b01      	cmp	r3, #1
 800e592:	d007      	beq.n	800e5a4 <HAL_I2C_Master_Receive_DMA+0xbc>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800e594:	68fb      	ldr	r3, [r7, #12]
 800e596:	681b      	ldr	r3, [r3, #0]
 800e598:	681a      	ldr	r2, [r3, #0]
 800e59a:	68fb      	ldr	r3, [r7, #12]
 800e59c:	681b      	ldr	r3, [r3, #0]
 800e59e:	f042 0201 	orr.w	r2, r2, #1
 800e5a2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800e5a4:	68fb      	ldr	r3, [r7, #12]
 800e5a6:	681b      	ldr	r3, [r3, #0]
 800e5a8:	681a      	ldr	r2, [r3, #0]
 800e5aa:	68fb      	ldr	r3, [r7, #12]
 800e5ac:	681b      	ldr	r3, [r3, #0]
 800e5ae:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800e5b2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800e5b4:	68fb      	ldr	r3, [r7, #12]
 800e5b6:	2222      	movs	r2, #34	@ 0x22
 800e5b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800e5bc:	68fb      	ldr	r3, [r7, #12]
 800e5be:	2210      	movs	r2, #16
 800e5c0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800e5c4:	68fb      	ldr	r3, [r7, #12]
 800e5c6:	2200      	movs	r2, #0
 800e5c8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800e5ca:	68fb      	ldr	r3, [r7, #12]
 800e5cc:	687a      	ldr	r2, [r7, #4]
 800e5ce:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800e5d0:	68fb      	ldr	r3, [r7, #12]
 800e5d2:	893a      	ldrh	r2, [r7, #8]
 800e5d4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800e5d6:	68fb      	ldr	r3, [r7, #12]
 800e5d8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e5da:	b29a      	uxth	r2, r3
 800e5dc:	68fb      	ldr	r3, [r7, #12]
 800e5de:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800e5e0:	68fb      	ldr	r3, [r7, #12]
 800e5e2:	4a56      	ldr	r2, [pc, #344]	@ (800e73c <HAL_I2C_Master_Receive_DMA+0x254>)
 800e5e4:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->Devaddress  = DevAddress;
 800e5e6:	897a      	ldrh	r2, [r7, #10]
 800e5e8:	68fb      	ldr	r3, [r7, #12]
 800e5ea:	645a      	str	r2, [r3, #68]	@ 0x44

    if (hi2c->XferSize > 0U)
 800e5ec:	68fb      	ldr	r3, [r7, #12]
 800e5ee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e5f0:	2b00      	cmp	r3, #0
 800e5f2:	d07b      	beq.n	800e6ec <HAL_I2C_Master_Receive_DMA+0x204>
    {
      if (hi2c->hdmarx != NULL)
 800e5f4:	68fb      	ldr	r3, [r7, #12]
 800e5f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e5f8:	2b00      	cmp	r3, #0
 800e5fa:	d02a      	beq.n	800e652 <HAL_I2C_Master_Receive_DMA+0x16a>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAXferCplt;
 800e5fc:	68fb      	ldr	r3, [r7, #12]
 800e5fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e600:	4a4f      	ldr	r2, [pc, #316]	@ (800e740 <HAL_I2C_Master_Receive_DMA+0x258>)
 800e602:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 800e604:	68fb      	ldr	r3, [r7, #12]
 800e606:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e608:	4a4e      	ldr	r2, [pc, #312]	@ (800e744 <HAL_I2C_Master_Receive_DMA+0x25c>)
 800e60a:	64da      	str	r2, [r3, #76]	@ 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 800e60c:	68fb      	ldr	r3, [r7, #12]
 800e60e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e610:	2200      	movs	r2, #0
 800e612:	641a      	str	r2, [r3, #64]	@ 0x40
        hi2c->hdmarx->XferM1CpltCallback = NULL;
 800e614:	68fb      	ldr	r3, [r7, #12]
 800e616:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e618:	2200      	movs	r2, #0
 800e61a:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->hdmarx->XferM1HalfCpltCallback = NULL;
 800e61c:	68fb      	ldr	r3, [r7, #12]
 800e61e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e620:	2200      	movs	r2, #0
 800e622:	649a      	str	r2, [r3, #72]	@ 0x48
        hi2c->hdmarx->XferAbortCallback = NULL;
 800e624:	68fb      	ldr	r3, [r7, #12]
 800e626:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e628:	2200      	movs	r2, #0
 800e62a:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->DR, (uint32_t)hi2c->pBuffPtr, hi2c->XferSize);
 800e62c:	68fb      	ldr	r3, [r7, #12]
 800e62e:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 800e630:	68fb      	ldr	r3, [r7, #12]
 800e632:	681b      	ldr	r3, [r3, #0]
 800e634:	3310      	adds	r3, #16
 800e636:	4619      	mov	r1, r3
 800e638:	68fb      	ldr	r3, [r7, #12]
 800e63a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e63c:	461a      	mov	r2, r3
 800e63e:	68fb      	ldr	r3, [r7, #12]
 800e640:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e642:	f7fe fd89 	bl	800d158 <HAL_DMA_Start_IT>
 800e646:	4603      	mov	r3, r0
 800e648:	75fb      	strb	r3, [r7, #23]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 800e64a:	7dfb      	ldrb	r3, [r7, #23]
 800e64c:	2b00      	cmp	r3, #0
 800e64e:	d139      	bne.n	800e6c4 <HAL_I2C_Master_Receive_DMA+0x1dc>
 800e650:	e013      	b.n	800e67a <HAL_I2C_Master_Receive_DMA+0x192>
        hi2c->State     = HAL_I2C_STATE_READY;
 800e652:	68fb      	ldr	r3, [r7, #12]
 800e654:	2220      	movs	r2, #32
 800e656:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800e65a:	68fb      	ldr	r3, [r7, #12]
 800e65c:	2200      	movs	r2, #0
 800e65e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 800e662:	68fb      	ldr	r3, [r7, #12]
 800e664:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e666:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800e66a:	68fb      	ldr	r3, [r7, #12]
 800e66c:	641a      	str	r2, [r3, #64]	@ 0x40
        __HAL_UNLOCK(hi2c);
 800e66e:	68fb      	ldr	r3, [r7, #12]
 800e670:	2200      	movs	r2, #0
 800e672:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        return HAL_ERROR;
 800e676:	2301      	movs	r3, #1
 800e678:	e057      	b.n	800e72a <HAL_I2C_Master_Receive_DMA+0x242>
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800e67a:	68fb      	ldr	r3, [r7, #12]
 800e67c:	681b      	ldr	r3, [r3, #0]
 800e67e:	681a      	ldr	r2, [r3, #0]
 800e680:	68fb      	ldr	r3, [r7, #12]
 800e682:	681b      	ldr	r3, [r3, #0]
 800e684:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800e688:	601a      	str	r2, [r3, #0]

        /* Generate Start */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800e68a:	68fb      	ldr	r3, [r7, #12]
 800e68c:	681b      	ldr	r3, [r3, #0]
 800e68e:	681a      	ldr	r2, [r3, #0]
 800e690:	68fb      	ldr	r3, [r7, #12]
 800e692:	681b      	ldr	r3, [r3, #0]
 800e694:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800e698:	601a      	str	r2, [r3, #0]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800e69a:	68fb      	ldr	r3, [r7, #12]
 800e69c:	2200      	movs	r2, #0
 800e69e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */

        /* Enable EVT and ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800e6a2:	68fb      	ldr	r3, [r7, #12]
 800e6a4:	681b      	ldr	r3, [r3, #0]
 800e6a6:	685a      	ldr	r2, [r3, #4]
 800e6a8:	68fb      	ldr	r3, [r7, #12]
 800e6aa:	681b      	ldr	r3, [r3, #0]
 800e6ac:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 800e6b0:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800e6b2:	68fb      	ldr	r3, [r7, #12]
 800e6b4:	681b      	ldr	r3, [r3, #0]
 800e6b6:	685a      	ldr	r2, [r3, #4]
 800e6b8:	68fb      	ldr	r3, [r7, #12]
 800e6ba:	681b      	ldr	r3, [r3, #0]
 800e6bc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800e6c0:	605a      	str	r2, [r3, #4]
 800e6c2:	e02f      	b.n	800e724 <HAL_I2C_Master_Receive_DMA+0x23c>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 800e6c4:	68fb      	ldr	r3, [r7, #12]
 800e6c6:	2220      	movs	r2, #32
 800e6c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800e6cc:	68fb      	ldr	r3, [r7, #12]
 800e6ce:	2200      	movs	r2, #0
 800e6d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800e6d4:	68fb      	ldr	r3, [r7, #12]
 800e6d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e6d8:	f043 0210 	orr.w	r2, r3, #16
 800e6dc:	68fb      	ldr	r3, [r7, #12]
 800e6de:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800e6e0:	68fb      	ldr	r3, [r7, #12]
 800e6e2:	2200      	movs	r2, #0
 800e6e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800e6e8:	2301      	movs	r3, #1
 800e6ea:	e01e      	b.n	800e72a <HAL_I2C_Master_Receive_DMA+0x242>
      }
    }
    else
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800e6ec:	68fb      	ldr	r3, [r7, #12]
 800e6ee:	2200      	movs	r2, #0
 800e6f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
      /* Note : The I2C interrupts must be enabled after unlocking current process
      to avoid the risk of I2C interrupt handle execution before current
      process unlock */

      /* Enable EVT, BUF and ERR interrupt */
      __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800e6f4:	68fb      	ldr	r3, [r7, #12]
 800e6f6:	681b      	ldr	r3, [r3, #0]
 800e6f8:	685a      	ldr	r2, [r3, #4]
 800e6fa:	68fb      	ldr	r3, [r7, #12]
 800e6fc:	681b      	ldr	r3, [r3, #0]
 800e6fe:	f442 62e0 	orr.w	r2, r2, #1792	@ 0x700
 800e702:	605a      	str	r2, [r3, #4]

      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800e704:	68fb      	ldr	r3, [r7, #12]
 800e706:	681b      	ldr	r3, [r3, #0]
 800e708:	681a      	ldr	r2, [r3, #0]
 800e70a:	68fb      	ldr	r3, [r7, #12]
 800e70c:	681b      	ldr	r3, [r3, #0]
 800e70e:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800e712:	601a      	str	r2, [r3, #0]

      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800e714:	68fb      	ldr	r3, [r7, #12]
 800e716:	681b      	ldr	r3, [r3, #0]
 800e718:	681a      	ldr	r2, [r3, #0]
 800e71a:	68fb      	ldr	r3, [r7, #12]
 800e71c:	681b      	ldr	r3, [r3, #0]
 800e71e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800e722:	601a      	str	r2, [r3, #0]
    }

    return HAL_OK;
 800e724:	2300      	movs	r3, #0
 800e726:	e000      	b.n	800e72a <HAL_I2C_Master_Receive_DMA+0x242>
  }
  else
  {
    return HAL_BUSY;
 800e728:	2302      	movs	r3, #2
  }
}
 800e72a:	4618      	mov	r0, r3
 800e72c:	3718      	adds	r7, #24
 800e72e:	46bd      	mov	sp, r7
 800e730:	bd80      	pop	{r7, pc}
 800e732:	bf00      	nop
 800e734:	20000064 	.word	0x20000064
 800e738:	14f8b589 	.word	0x14f8b589
 800e73c:	ffff0000 	.word	0xffff0000
 800e740:	0800ffa1 	.word	0x0800ffa1
 800e744:	0801014b 	.word	0x0801014b

0800e748 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800e748:	b580      	push	{r7, lr}
 800e74a:	b088      	sub	sp, #32
 800e74c:	af00      	add	r7, sp, #0
 800e74e:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 800e750:	2300      	movs	r3, #0
 800e752:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 800e754:	687b      	ldr	r3, [r7, #4]
 800e756:	681b      	ldr	r3, [r3, #0]
 800e758:	685b      	ldr	r3, [r3, #4]
 800e75a:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800e75c:	687b      	ldr	r3, [r7, #4]
 800e75e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e760:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800e762:	687b      	ldr	r3, [r7, #4]
 800e764:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800e768:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800e76a:	687b      	ldr	r3, [r7, #4]
 800e76c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800e770:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800e772:	7bfb      	ldrb	r3, [r7, #15]
 800e774:	2b10      	cmp	r3, #16
 800e776:	d003      	beq.n	800e780 <HAL_I2C_EV_IRQHandler+0x38>
 800e778:	7bfb      	ldrb	r3, [r7, #15]
 800e77a:	2b40      	cmp	r3, #64	@ 0x40
 800e77c:	f040 80b1 	bne.w	800e8e2 <HAL_I2C_EV_IRQHandler+0x19a>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800e780:	687b      	ldr	r3, [r7, #4]
 800e782:	681b      	ldr	r3, [r3, #0]
 800e784:	699b      	ldr	r3, [r3, #24]
 800e786:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800e788:	687b      	ldr	r3, [r7, #4]
 800e78a:	681b      	ldr	r3, [r3, #0]
 800e78c:	695b      	ldr	r3, [r3, #20]
 800e78e:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 800e790:	69fb      	ldr	r3, [r7, #28]
 800e792:	f003 0301 	and.w	r3, r3, #1
 800e796:	2b00      	cmp	r3, #0
 800e798:	d10d      	bne.n	800e7b6 <HAL_I2C_EV_IRQHandler+0x6e>
 800e79a:	693b      	ldr	r3, [r7, #16]
 800e79c:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 800e7a0:	d003      	beq.n	800e7aa <HAL_I2C_EV_IRQHandler+0x62>
 800e7a2:	693b      	ldr	r3, [r7, #16]
 800e7a4:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 800e7a8:	d101      	bne.n	800e7ae <HAL_I2C_EV_IRQHandler+0x66>
 800e7aa:	2301      	movs	r3, #1
 800e7ac:	e000      	b.n	800e7b0 <HAL_I2C_EV_IRQHandler+0x68>
 800e7ae:	2300      	movs	r3, #0
 800e7b0:	2b01      	cmp	r3, #1
 800e7b2:	f000 8114 	beq.w	800e9de <HAL_I2C_EV_IRQHandler+0x296>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800e7b6:	69fb      	ldr	r3, [r7, #28]
 800e7b8:	f003 0301 	and.w	r3, r3, #1
 800e7bc:	2b00      	cmp	r3, #0
 800e7be:	d00b      	beq.n	800e7d8 <HAL_I2C_EV_IRQHandler+0x90>
 800e7c0:	697b      	ldr	r3, [r7, #20]
 800e7c2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800e7c6:	2b00      	cmp	r3, #0
 800e7c8:	d006      	beq.n	800e7d8 <HAL_I2C_EV_IRQHandler+0x90>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 800e7ca:	6878      	ldr	r0, [r7, #4]
 800e7cc:	f001 ff5b 	bl	8010686 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 800e7d0:	6878      	ldr	r0, [r7, #4]
 800e7d2:	f000 fd4a 	bl	800f26a <I2C_Master_SB>
 800e7d6:	e083      	b.n	800e8e0 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800e7d8:	69fb      	ldr	r3, [r7, #28]
 800e7da:	f003 0308 	and.w	r3, r3, #8
 800e7de:	2b00      	cmp	r3, #0
 800e7e0:	d008      	beq.n	800e7f4 <HAL_I2C_EV_IRQHandler+0xac>
 800e7e2:	697b      	ldr	r3, [r7, #20]
 800e7e4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800e7e8:	2b00      	cmp	r3, #0
 800e7ea:	d003      	beq.n	800e7f4 <HAL_I2C_EV_IRQHandler+0xac>
    {
      I2C_Master_ADD10(hi2c);
 800e7ec:	6878      	ldr	r0, [r7, #4]
 800e7ee:	f000 fdc2 	bl	800f376 <I2C_Master_ADD10>
 800e7f2:	e075      	b.n	800e8e0 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800e7f4:	69fb      	ldr	r3, [r7, #28]
 800e7f6:	f003 0302 	and.w	r3, r3, #2
 800e7fa:	2b00      	cmp	r3, #0
 800e7fc:	d008      	beq.n	800e810 <HAL_I2C_EV_IRQHandler+0xc8>
 800e7fe:	697b      	ldr	r3, [r7, #20]
 800e800:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800e804:	2b00      	cmp	r3, #0
 800e806:	d003      	beq.n	800e810 <HAL_I2C_EV_IRQHandler+0xc8>
    {
      I2C_Master_ADDR(hi2c);
 800e808:	6878      	ldr	r0, [r7, #4]
 800e80a:	f000 fdde 	bl	800f3ca <I2C_Master_ADDR>
 800e80e:	e067      	b.n	800e8e0 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 800e810:	69bb      	ldr	r3, [r7, #24]
 800e812:	f003 0304 	and.w	r3, r3, #4
 800e816:	2b00      	cmp	r3, #0
 800e818:	d036      	beq.n	800e888 <HAL_I2C_EV_IRQHandler+0x140>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800e81a:	687b      	ldr	r3, [r7, #4]
 800e81c:	681b      	ldr	r3, [r3, #0]
 800e81e:	685b      	ldr	r3, [r3, #4]
 800e820:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800e824:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800e828:	f000 80db 	beq.w	800e9e2 <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800e82c:	69fb      	ldr	r3, [r7, #28]
 800e82e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e832:	2b00      	cmp	r3, #0
 800e834:	d00d      	beq.n	800e852 <HAL_I2C_EV_IRQHandler+0x10a>
 800e836:	697b      	ldr	r3, [r7, #20]
 800e838:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800e83c:	2b00      	cmp	r3, #0
 800e83e:	d008      	beq.n	800e852 <HAL_I2C_EV_IRQHandler+0x10a>
 800e840:	69fb      	ldr	r3, [r7, #28]
 800e842:	f003 0304 	and.w	r3, r3, #4
 800e846:	2b00      	cmp	r3, #0
 800e848:	d103      	bne.n	800e852 <HAL_I2C_EV_IRQHandler+0x10a>
        {
          I2C_MasterTransmit_TXE(hi2c);
 800e84a:	6878      	ldr	r0, [r7, #4]
 800e84c:	f000 f9c2 	bl	800ebd4 <I2C_MasterTransmit_TXE>
 800e850:	e046      	b.n	800e8e0 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800e852:	69fb      	ldr	r3, [r7, #28]
 800e854:	f003 0304 	and.w	r3, r3, #4
 800e858:	2b00      	cmp	r3, #0
 800e85a:	f000 80c2 	beq.w	800e9e2 <HAL_I2C_EV_IRQHandler+0x29a>
 800e85e:	697b      	ldr	r3, [r7, #20]
 800e860:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800e864:	2b00      	cmp	r3, #0
 800e866:	f000 80bc 	beq.w	800e9e2 <HAL_I2C_EV_IRQHandler+0x29a>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800e86a:	7bbb      	ldrb	r3, [r7, #14]
 800e86c:	2b21      	cmp	r3, #33	@ 0x21
 800e86e:	d103      	bne.n	800e878 <HAL_I2C_EV_IRQHandler+0x130>
          {
            I2C_MasterTransmit_BTF(hi2c);
 800e870:	6878      	ldr	r0, [r7, #4]
 800e872:	f000 fa4b 	bl	800ed0c <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800e876:	e0b4      	b.n	800e9e2 <HAL_I2C_EV_IRQHandler+0x29a>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 800e878:	7bfb      	ldrb	r3, [r7, #15]
 800e87a:	2b40      	cmp	r3, #64	@ 0x40
 800e87c:	f040 80b1 	bne.w	800e9e2 <HAL_I2C_EV_IRQHandler+0x29a>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 800e880:	6878      	ldr	r0, [r7, #4]
 800e882:	f000 fab9 	bl	800edf8 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800e886:	e0ac      	b.n	800e9e2 <HAL_I2C_EV_IRQHandler+0x29a>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800e888:	687b      	ldr	r3, [r7, #4]
 800e88a:	681b      	ldr	r3, [r3, #0]
 800e88c:	685b      	ldr	r3, [r3, #4]
 800e88e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800e892:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800e896:	f000 80a4 	beq.w	800e9e2 <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800e89a:	69fb      	ldr	r3, [r7, #28]
 800e89c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e8a0:	2b00      	cmp	r3, #0
 800e8a2:	d00d      	beq.n	800e8c0 <HAL_I2C_EV_IRQHandler+0x178>
 800e8a4:	697b      	ldr	r3, [r7, #20]
 800e8a6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800e8aa:	2b00      	cmp	r3, #0
 800e8ac:	d008      	beq.n	800e8c0 <HAL_I2C_EV_IRQHandler+0x178>
 800e8ae:	69fb      	ldr	r3, [r7, #28]
 800e8b0:	f003 0304 	and.w	r3, r3, #4
 800e8b4:	2b00      	cmp	r3, #0
 800e8b6:	d103      	bne.n	800e8c0 <HAL_I2C_EV_IRQHandler+0x178>
        {
          I2C_MasterReceive_RXNE(hi2c);
 800e8b8:	6878      	ldr	r0, [r7, #4]
 800e8ba:	f000 fb31 	bl	800ef20 <I2C_MasterReceive_RXNE>
 800e8be:	e00f      	b.n	800e8e0 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800e8c0:	69fb      	ldr	r3, [r7, #28]
 800e8c2:	f003 0304 	and.w	r3, r3, #4
 800e8c6:	2b00      	cmp	r3, #0
 800e8c8:	f000 808b 	beq.w	800e9e2 <HAL_I2C_EV_IRQHandler+0x29a>
 800e8cc:	697b      	ldr	r3, [r7, #20]
 800e8ce:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800e8d2:	2b00      	cmp	r3, #0
 800e8d4:	f000 8085 	beq.w	800e9e2 <HAL_I2C_EV_IRQHandler+0x29a>
        {
          I2C_MasterReceive_BTF(hi2c);
 800e8d8:	6878      	ldr	r0, [r7, #4]
 800e8da:	f000 fbdc 	bl	800f096 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800e8de:	e080      	b.n	800e9e2 <HAL_I2C_EV_IRQHandler+0x29a>
 800e8e0:	e07f      	b.n	800e9e2 <HAL_I2C_EV_IRQHandler+0x29a>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800e8e2:	687b      	ldr	r3, [r7, #4]
 800e8e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e8e6:	2b00      	cmp	r3, #0
 800e8e8:	d004      	beq.n	800e8f4 <HAL_I2C_EV_IRQHandler+0x1ac>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800e8ea:	687b      	ldr	r3, [r7, #4]
 800e8ec:	681b      	ldr	r3, [r3, #0]
 800e8ee:	695b      	ldr	r3, [r3, #20]
 800e8f0:	61fb      	str	r3, [r7, #28]
 800e8f2:	e007      	b.n	800e904 <HAL_I2C_EV_IRQHandler+0x1bc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800e8f4:	687b      	ldr	r3, [r7, #4]
 800e8f6:	681b      	ldr	r3, [r3, #0]
 800e8f8:	699b      	ldr	r3, [r3, #24]
 800e8fa:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800e8fc:	687b      	ldr	r3, [r7, #4]
 800e8fe:	681b      	ldr	r3, [r3, #0]
 800e900:	695b      	ldr	r3, [r3, #20]
 800e902:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800e904:	69fb      	ldr	r3, [r7, #28]
 800e906:	f003 0302 	and.w	r3, r3, #2
 800e90a:	2b00      	cmp	r3, #0
 800e90c:	d011      	beq.n	800e932 <HAL_I2C_EV_IRQHandler+0x1ea>
 800e90e:	697b      	ldr	r3, [r7, #20]
 800e910:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800e914:	2b00      	cmp	r3, #0
 800e916:	d00c      	beq.n	800e932 <HAL_I2C_EV_IRQHandler+0x1ea>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800e918:	687b      	ldr	r3, [r7, #4]
 800e91a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e91c:	2b00      	cmp	r3, #0
 800e91e:	d003      	beq.n	800e928 <HAL_I2C_EV_IRQHandler+0x1e0>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800e920:	687b      	ldr	r3, [r7, #4]
 800e922:	681b      	ldr	r3, [r3, #0]
 800e924:	699b      	ldr	r3, [r3, #24]
 800e926:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 800e928:	69b9      	ldr	r1, [r7, #24]
 800e92a:	6878      	ldr	r0, [r7, #4]
 800e92c:	f000 ff9c 	bl	800f868 <I2C_Slave_ADDR>
 800e930:	e05a      	b.n	800e9e8 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800e932:	69fb      	ldr	r3, [r7, #28]
 800e934:	f003 0310 	and.w	r3, r3, #16
 800e938:	2b00      	cmp	r3, #0
 800e93a:	d008      	beq.n	800e94e <HAL_I2C_EV_IRQHandler+0x206>
 800e93c:	697b      	ldr	r3, [r7, #20]
 800e93e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800e942:	2b00      	cmp	r3, #0
 800e944:	d003      	beq.n	800e94e <HAL_I2C_EV_IRQHandler+0x206>
    {
      I2C_Slave_STOPF(hi2c);
 800e946:	6878      	ldr	r0, [r7, #4]
 800e948:	f000 ffd6 	bl	800f8f8 <I2C_Slave_STOPF>
 800e94c:	e04c      	b.n	800e9e8 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800e94e:	7bbb      	ldrb	r3, [r7, #14]
 800e950:	2b21      	cmp	r3, #33	@ 0x21
 800e952:	d002      	beq.n	800e95a <HAL_I2C_EV_IRQHandler+0x212>
 800e954:	7bbb      	ldrb	r3, [r7, #14]
 800e956:	2b29      	cmp	r3, #41	@ 0x29
 800e958:	d120      	bne.n	800e99c <HAL_I2C_EV_IRQHandler+0x254>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800e95a:	69fb      	ldr	r3, [r7, #28]
 800e95c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e960:	2b00      	cmp	r3, #0
 800e962:	d00d      	beq.n	800e980 <HAL_I2C_EV_IRQHandler+0x238>
 800e964:	697b      	ldr	r3, [r7, #20]
 800e966:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800e96a:	2b00      	cmp	r3, #0
 800e96c:	d008      	beq.n	800e980 <HAL_I2C_EV_IRQHandler+0x238>
 800e96e:	69fb      	ldr	r3, [r7, #28]
 800e970:	f003 0304 	and.w	r3, r3, #4
 800e974:	2b00      	cmp	r3, #0
 800e976:	d103      	bne.n	800e980 <HAL_I2C_EV_IRQHandler+0x238>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 800e978:	6878      	ldr	r0, [r7, #4]
 800e97a:	f000 feb7 	bl	800f6ec <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800e97e:	e032      	b.n	800e9e6 <HAL_I2C_EV_IRQHandler+0x29e>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800e980:	69fb      	ldr	r3, [r7, #28]
 800e982:	f003 0304 	and.w	r3, r3, #4
 800e986:	2b00      	cmp	r3, #0
 800e988:	d02d      	beq.n	800e9e6 <HAL_I2C_EV_IRQHandler+0x29e>
 800e98a:	697b      	ldr	r3, [r7, #20]
 800e98c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800e990:	2b00      	cmp	r3, #0
 800e992:	d028      	beq.n	800e9e6 <HAL_I2C_EV_IRQHandler+0x29e>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 800e994:	6878      	ldr	r0, [r7, #4]
 800e996:	f000 fee6 	bl	800f766 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800e99a:	e024      	b.n	800e9e6 <HAL_I2C_EV_IRQHandler+0x29e>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800e99c:	69fb      	ldr	r3, [r7, #28]
 800e99e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e9a2:	2b00      	cmp	r3, #0
 800e9a4:	d00d      	beq.n	800e9c2 <HAL_I2C_EV_IRQHandler+0x27a>
 800e9a6:	697b      	ldr	r3, [r7, #20]
 800e9a8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800e9ac:	2b00      	cmp	r3, #0
 800e9ae:	d008      	beq.n	800e9c2 <HAL_I2C_EV_IRQHandler+0x27a>
 800e9b0:	69fb      	ldr	r3, [r7, #28]
 800e9b2:	f003 0304 	and.w	r3, r3, #4
 800e9b6:	2b00      	cmp	r3, #0
 800e9b8:	d103      	bne.n	800e9c2 <HAL_I2C_EV_IRQHandler+0x27a>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 800e9ba:	6878      	ldr	r0, [r7, #4]
 800e9bc:	f000 fef4 	bl	800f7a8 <I2C_SlaveReceive_RXNE>
 800e9c0:	e012      	b.n	800e9e8 <HAL_I2C_EV_IRQHandler+0x2a0>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800e9c2:	69fb      	ldr	r3, [r7, #28]
 800e9c4:	f003 0304 	and.w	r3, r3, #4
 800e9c8:	2b00      	cmp	r3, #0
 800e9ca:	d00d      	beq.n	800e9e8 <HAL_I2C_EV_IRQHandler+0x2a0>
 800e9cc:	697b      	ldr	r3, [r7, #20]
 800e9ce:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800e9d2:	2b00      	cmp	r3, #0
 800e9d4:	d008      	beq.n	800e9e8 <HAL_I2C_EV_IRQHandler+0x2a0>
      {
        I2C_SlaveReceive_BTF(hi2c);
 800e9d6:	6878      	ldr	r0, [r7, #4]
 800e9d8:	f000 ff24 	bl	800f824 <I2C_SlaveReceive_BTF>
 800e9dc:	e004      	b.n	800e9e8 <HAL_I2C_EV_IRQHandler+0x2a0>
      return;
 800e9de:	bf00      	nop
 800e9e0:	e002      	b.n	800e9e8 <HAL_I2C_EV_IRQHandler+0x2a0>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800e9e2:	bf00      	nop
 800e9e4:	e000      	b.n	800e9e8 <HAL_I2C_EV_IRQHandler+0x2a0>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800e9e6:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 800e9e8:	3720      	adds	r7, #32
 800e9ea:	46bd      	mov	sp, r7
 800e9ec:	bd80      	pop	{r7, pc}

0800e9ee <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800e9ee:	b580      	push	{r7, lr}
 800e9f0:	b08a      	sub	sp, #40	@ 0x28
 800e9f2:	af00      	add	r7, sp, #0
 800e9f4:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 800e9f6:	687b      	ldr	r3, [r7, #4]
 800e9f8:	681b      	ldr	r3, [r3, #0]
 800e9fa:	695b      	ldr	r3, [r3, #20]
 800e9fc:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 800e9fe:	687b      	ldr	r3, [r7, #4]
 800ea00:	681b      	ldr	r3, [r3, #0]
 800ea02:	685b      	ldr	r3, [r3, #4]
 800ea04:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 800ea06:	2300      	movs	r3, #0
 800ea08:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800ea0a:	687b      	ldr	r3, [r7, #4]
 800ea0c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800ea10:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800ea12:	6a3b      	ldr	r3, [r7, #32]
 800ea14:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ea18:	2b00      	cmp	r3, #0
 800ea1a:	d00d      	beq.n	800ea38 <HAL_I2C_ER_IRQHandler+0x4a>
 800ea1c:	69fb      	ldr	r3, [r7, #28]
 800ea1e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ea22:	2b00      	cmp	r3, #0
 800ea24:	d008      	beq.n	800ea38 <HAL_I2C_ER_IRQHandler+0x4a>
  {
    error |= HAL_I2C_ERROR_BERR;
 800ea26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ea28:	f043 0301 	orr.w	r3, r3, #1
 800ea2c:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800ea2e:	687b      	ldr	r3, [r7, #4]
 800ea30:	681b      	ldr	r3, [r3, #0]
 800ea32:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800ea36:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800ea38:	6a3b      	ldr	r3, [r7, #32]
 800ea3a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800ea3e:	2b00      	cmp	r3, #0
 800ea40:	d00d      	beq.n	800ea5e <HAL_I2C_ER_IRQHandler+0x70>
 800ea42:	69fb      	ldr	r3, [r7, #28]
 800ea44:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ea48:	2b00      	cmp	r3, #0
 800ea4a:	d008      	beq.n	800ea5e <HAL_I2C_ER_IRQHandler+0x70>
  {
    error |= HAL_I2C_ERROR_ARLO;
 800ea4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ea4e:	f043 0302 	orr.w	r3, r3, #2
 800ea52:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800ea54:	687b      	ldr	r3, [r7, #4]
 800ea56:	681b      	ldr	r3, [r3, #0]
 800ea58:	f46f 7200 	mvn.w	r2, #512	@ 0x200
 800ea5c:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800ea5e:	6a3b      	ldr	r3, [r7, #32]
 800ea60:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800ea64:	2b00      	cmp	r3, #0
 800ea66:	d03e      	beq.n	800eae6 <HAL_I2C_ER_IRQHandler+0xf8>
 800ea68:	69fb      	ldr	r3, [r7, #28]
 800ea6a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ea6e:	2b00      	cmp	r3, #0
 800ea70:	d039      	beq.n	800eae6 <HAL_I2C_ER_IRQHandler+0xf8>
  {
    tmp1 = CurrentMode;
 800ea72:	7efb      	ldrb	r3, [r7, #27]
 800ea74:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 800ea76:	687b      	ldr	r3, [r7, #4]
 800ea78:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ea7a:	b29b      	uxth	r3, r3
 800ea7c:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 800ea7e:	687b      	ldr	r3, [r7, #4]
 800ea80:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800ea84:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 800ea86:	687b      	ldr	r3, [r7, #4]
 800ea88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ea8a:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 800ea8c:	7ebb      	ldrb	r3, [r7, #26]
 800ea8e:	2b20      	cmp	r3, #32
 800ea90:	d112      	bne.n	800eab8 <HAL_I2C_ER_IRQHandler+0xca>
 800ea92:	697b      	ldr	r3, [r7, #20]
 800ea94:	2b00      	cmp	r3, #0
 800ea96:	d10f      	bne.n	800eab8 <HAL_I2C_ER_IRQHandler+0xca>
 800ea98:	7cfb      	ldrb	r3, [r7, #19]
 800ea9a:	2b21      	cmp	r3, #33	@ 0x21
 800ea9c:	d008      	beq.n	800eab0 <HAL_I2C_ER_IRQHandler+0xc2>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 800ea9e:	7cfb      	ldrb	r3, [r7, #19]
 800eaa0:	2b29      	cmp	r3, #41	@ 0x29
 800eaa2:	d005      	beq.n	800eab0 <HAL_I2C_ER_IRQHandler+0xc2>
 800eaa4:	7cfb      	ldrb	r3, [r7, #19]
 800eaa6:	2b28      	cmp	r3, #40	@ 0x28
 800eaa8:	d106      	bne.n	800eab8 <HAL_I2C_ER_IRQHandler+0xca>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 800eaaa:	68fb      	ldr	r3, [r7, #12]
 800eaac:	2b21      	cmp	r3, #33	@ 0x21
 800eaae:	d103      	bne.n	800eab8 <HAL_I2C_ER_IRQHandler+0xca>
    {
      I2C_Slave_AF(hi2c);
 800eab0:	6878      	ldr	r0, [r7, #4]
 800eab2:	f001 f851 	bl	800fb58 <I2C_Slave_AF>
 800eab6:	e016      	b.n	800eae6 <HAL_I2C_ER_IRQHandler+0xf8>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800eab8:	687b      	ldr	r3, [r7, #4]
 800eaba:	681b      	ldr	r3, [r3, #0]
 800eabc:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800eac0:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 800eac2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eac4:	f043 0304 	orr.w	r3, r3, #4
 800eac8:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800eaca:	7efb      	ldrb	r3, [r7, #27]
 800eacc:	2b10      	cmp	r3, #16
 800eace:	d002      	beq.n	800ead6 <HAL_I2C_ER_IRQHandler+0xe8>
 800ead0:	7efb      	ldrb	r3, [r7, #27]
 800ead2:	2b40      	cmp	r3, #64	@ 0x40
 800ead4:	d107      	bne.n	800eae6 <HAL_I2C_ER_IRQHandler+0xf8>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800ead6:	687b      	ldr	r3, [r7, #4]
 800ead8:	681b      	ldr	r3, [r3, #0]
 800eada:	681a      	ldr	r2, [r3, #0]
 800eadc:	687b      	ldr	r3, [r7, #4]
 800eade:	681b      	ldr	r3, [r3, #0]
 800eae0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800eae4:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800eae6:	6a3b      	ldr	r3, [r7, #32]
 800eae8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800eaec:	2b00      	cmp	r3, #0
 800eaee:	d00d      	beq.n	800eb0c <HAL_I2C_ER_IRQHandler+0x11e>
 800eaf0:	69fb      	ldr	r3, [r7, #28]
 800eaf2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800eaf6:	2b00      	cmp	r3, #0
 800eaf8:	d008      	beq.n	800eb0c <HAL_I2C_ER_IRQHandler+0x11e>
  {
    error |= HAL_I2C_ERROR_OVR;
 800eafa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eafc:	f043 0308 	orr.w	r3, r3, #8
 800eb00:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800eb02:	687b      	ldr	r3, [r7, #4]
 800eb04:	681b      	ldr	r3, [r3, #0]
 800eb06:	f46f 6200 	mvn.w	r2, #2048	@ 0x800
 800eb0a:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 800eb0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eb0e:	2b00      	cmp	r3, #0
 800eb10:	d008      	beq.n	800eb24 <HAL_I2C_ER_IRQHandler+0x136>
  {
    hi2c->ErrorCode |= error;
 800eb12:	687b      	ldr	r3, [r7, #4]
 800eb14:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800eb16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eb18:	431a      	orrs	r2, r3
 800eb1a:	687b      	ldr	r3, [r7, #4]
 800eb1c:	641a      	str	r2, [r3, #64]	@ 0x40
    I2C_ITError(hi2c);
 800eb1e:	6878      	ldr	r0, [r7, #4]
 800eb20:	f001 f88a 	bl	800fc38 <I2C_ITError>
  }
}
 800eb24:	bf00      	nop
 800eb26:	3728      	adds	r7, #40	@ 0x28
 800eb28:	46bd      	mov	sp, r7
 800eb2a:	bd80      	pop	{r7, pc}

0800eb2c <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800eb2c:	b480      	push	{r7}
 800eb2e:	b083      	sub	sp, #12
 800eb30:	af00      	add	r7, sp, #0
 800eb32:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 800eb34:	bf00      	nop
 800eb36:	370c      	adds	r7, #12
 800eb38:	46bd      	mov	sp, r7
 800eb3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb3e:	4770      	bx	lr

0800eb40 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800eb40:	b480      	push	{r7}
 800eb42:	b083      	sub	sp, #12
 800eb44:	af00      	add	r7, sp, #0
 800eb46:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800eb48:	bf00      	nop
 800eb4a:	370c      	adds	r7, #12
 800eb4c:	46bd      	mov	sp, r7
 800eb4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb52:	4770      	bx	lr

0800eb54 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800eb54:	b480      	push	{r7}
 800eb56:	b083      	sub	sp, #12
 800eb58:	af00      	add	r7, sp, #0
 800eb5a:	6078      	str	r0, [r7, #4]
 800eb5c:	460b      	mov	r3, r1
 800eb5e:	70fb      	strb	r3, [r7, #3]
 800eb60:	4613      	mov	r3, r2
 800eb62:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800eb64:	bf00      	nop
 800eb66:	370c      	adds	r7, #12
 800eb68:	46bd      	mov	sp, r7
 800eb6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb6e:	4770      	bx	lr

0800eb70 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800eb70:	b480      	push	{r7}
 800eb72:	b083      	sub	sp, #12
 800eb74:	af00      	add	r7, sp, #0
 800eb76:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 800eb78:	bf00      	nop
 800eb7a:	370c      	adds	r7, #12
 800eb7c:	46bd      	mov	sp, r7
 800eb7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb82:	4770      	bx	lr

0800eb84 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800eb84:	b480      	push	{r7}
 800eb86:	b083      	sub	sp, #12
 800eb88:	af00      	add	r7, sp, #0
 800eb8a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 800eb8c:	bf00      	nop
 800eb8e:	370c      	adds	r7, #12
 800eb90:	46bd      	mov	sp, r7
 800eb92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb96:	4770      	bx	lr

0800eb98 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800eb98:	b480      	push	{r7}
 800eb9a:	b083      	sub	sp, #12
 800eb9c:	af00      	add	r7, sp, #0
 800eb9e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 800eba0:	bf00      	nop
 800eba2:	370c      	adds	r7, #12
 800eba4:	46bd      	mov	sp, r7
 800eba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebaa:	4770      	bx	lr

0800ebac <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800ebac:	b480      	push	{r7}
 800ebae:	b083      	sub	sp, #12
 800ebb0:	af00      	add	r7, sp, #0
 800ebb2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800ebb4:	bf00      	nop
 800ebb6:	370c      	adds	r7, #12
 800ebb8:	46bd      	mov	sp, r7
 800ebba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebbe:	4770      	bx	lr

0800ebc0 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800ebc0:	b480      	push	{r7}
 800ebc2:	b083      	sub	sp, #12
 800ebc4:	af00      	add	r7, sp, #0
 800ebc6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800ebc8:	bf00      	nop
 800ebca:	370c      	adds	r7, #12
 800ebcc:	46bd      	mov	sp, r7
 800ebce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebd2:	4770      	bx	lr

0800ebd4 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800ebd4:	b580      	push	{r7, lr}
 800ebd6:	b084      	sub	sp, #16
 800ebd8:	af00      	add	r7, sp, #0
 800ebda:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800ebdc:	687b      	ldr	r3, [r7, #4]
 800ebde:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800ebe2:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800ebe4:	687b      	ldr	r3, [r7, #4]
 800ebe6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800ebea:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800ebec:	687b      	ldr	r3, [r7, #4]
 800ebee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ebf0:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800ebf2:	687b      	ldr	r3, [r7, #4]
 800ebf4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ebf6:	2b00      	cmp	r3, #0
 800ebf8:	d150      	bne.n	800ec9c <I2C_MasterTransmit_TXE+0xc8>
 800ebfa:	7bfb      	ldrb	r3, [r7, #15]
 800ebfc:	2b21      	cmp	r3, #33	@ 0x21
 800ebfe:	d14d      	bne.n	800ec9c <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800ec00:	68bb      	ldr	r3, [r7, #8]
 800ec02:	2b08      	cmp	r3, #8
 800ec04:	d01d      	beq.n	800ec42 <I2C_MasterTransmit_TXE+0x6e>
 800ec06:	68bb      	ldr	r3, [r7, #8]
 800ec08:	2b20      	cmp	r3, #32
 800ec0a:	d01a      	beq.n	800ec42 <I2C_MasterTransmit_TXE+0x6e>
 800ec0c:	68bb      	ldr	r3, [r7, #8]
 800ec0e:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800ec12:	d016      	beq.n	800ec42 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800ec14:	687b      	ldr	r3, [r7, #4]
 800ec16:	681b      	ldr	r3, [r3, #0]
 800ec18:	685a      	ldr	r2, [r3, #4]
 800ec1a:	687b      	ldr	r3, [r7, #4]
 800ec1c:	681b      	ldr	r3, [r3, #0]
 800ec1e:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800ec22:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800ec24:	687b      	ldr	r3, [r7, #4]
 800ec26:	2211      	movs	r2, #17
 800ec28:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800ec2a:	687b      	ldr	r3, [r7, #4]
 800ec2c:	2200      	movs	r2, #0
 800ec2e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 800ec32:	687b      	ldr	r3, [r7, #4]
 800ec34:	2220      	movs	r2, #32
 800ec36:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800ec3a:	6878      	ldr	r0, [r7, #4]
 800ec3c:	f7ff ff76 	bl	800eb2c <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800ec40:	e060      	b.n	800ed04 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800ec42:	687b      	ldr	r3, [r7, #4]
 800ec44:	681b      	ldr	r3, [r3, #0]
 800ec46:	685a      	ldr	r2, [r3, #4]
 800ec48:	687b      	ldr	r3, [r7, #4]
 800ec4a:	681b      	ldr	r3, [r3, #0]
 800ec4c:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800ec50:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800ec52:	687b      	ldr	r3, [r7, #4]
 800ec54:	681b      	ldr	r3, [r3, #0]
 800ec56:	681a      	ldr	r2, [r3, #0]
 800ec58:	687b      	ldr	r3, [r7, #4]
 800ec5a:	681b      	ldr	r3, [r3, #0]
 800ec5c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800ec60:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 800ec62:	687b      	ldr	r3, [r7, #4]
 800ec64:	2200      	movs	r2, #0
 800ec66:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800ec68:	687b      	ldr	r3, [r7, #4]
 800ec6a:	2220      	movs	r2, #32
 800ec6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800ec70:	687b      	ldr	r3, [r7, #4]
 800ec72:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800ec76:	b2db      	uxtb	r3, r3
 800ec78:	2b40      	cmp	r3, #64	@ 0x40
 800ec7a:	d107      	bne.n	800ec8c <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800ec7c:	687b      	ldr	r3, [r7, #4]
 800ec7e:	2200      	movs	r2, #0
 800ec80:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 800ec84:	6878      	ldr	r0, [r7, #4]
 800ec86:	f7ff ff7d 	bl	800eb84 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800ec8a:	e03b      	b.n	800ed04 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800ec8c:	687b      	ldr	r3, [r7, #4]
 800ec8e:	2200      	movs	r2, #0
 800ec90:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800ec94:	6878      	ldr	r0, [r7, #4]
 800ec96:	f7ff ff49 	bl	800eb2c <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800ec9a:	e033      	b.n	800ed04 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 800ec9c:	7bfb      	ldrb	r3, [r7, #15]
 800ec9e:	2b21      	cmp	r3, #33	@ 0x21
 800eca0:	d005      	beq.n	800ecae <I2C_MasterTransmit_TXE+0xda>
 800eca2:	7bbb      	ldrb	r3, [r7, #14]
 800eca4:	2b40      	cmp	r3, #64	@ 0x40
 800eca6:	d12d      	bne.n	800ed04 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 800eca8:	7bfb      	ldrb	r3, [r7, #15]
 800ecaa:	2b22      	cmp	r3, #34	@ 0x22
 800ecac:	d12a      	bne.n	800ed04 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 800ecae:	687b      	ldr	r3, [r7, #4]
 800ecb0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ecb2:	b29b      	uxth	r3, r3
 800ecb4:	2b00      	cmp	r3, #0
 800ecb6:	d108      	bne.n	800ecca <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800ecb8:	687b      	ldr	r3, [r7, #4]
 800ecba:	681b      	ldr	r3, [r3, #0]
 800ecbc:	685a      	ldr	r2, [r3, #4]
 800ecbe:	687b      	ldr	r3, [r7, #4]
 800ecc0:	681b      	ldr	r3, [r3, #0]
 800ecc2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800ecc6:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 800ecc8:	e01c      	b.n	800ed04 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800ecca:	687b      	ldr	r3, [r7, #4]
 800eccc:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800ecd0:	b2db      	uxtb	r3, r3
 800ecd2:	2b40      	cmp	r3, #64	@ 0x40
 800ecd4:	d103      	bne.n	800ecde <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 800ecd6:	6878      	ldr	r0, [r7, #4]
 800ecd8:	f000 f88e 	bl	800edf8 <I2C_MemoryTransmit_TXE_BTF>
}
 800ecdc:	e012      	b.n	800ed04 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800ecde:	687b      	ldr	r3, [r7, #4]
 800ece0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ece2:	781a      	ldrb	r2, [r3, #0]
 800ece4:	687b      	ldr	r3, [r7, #4]
 800ece6:	681b      	ldr	r3, [r3, #0]
 800ece8:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 800ecea:	687b      	ldr	r3, [r7, #4]
 800ecec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ecee:	1c5a      	adds	r2, r3, #1
 800ecf0:	687b      	ldr	r3, [r7, #4]
 800ecf2:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 800ecf4:	687b      	ldr	r3, [r7, #4]
 800ecf6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ecf8:	b29b      	uxth	r3, r3
 800ecfa:	3b01      	subs	r3, #1
 800ecfc:	b29a      	uxth	r2, r3
 800ecfe:	687b      	ldr	r3, [r7, #4]
 800ed00:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 800ed02:	e7ff      	b.n	800ed04 <I2C_MasterTransmit_TXE+0x130>
 800ed04:	bf00      	nop
 800ed06:	3710      	adds	r7, #16
 800ed08:	46bd      	mov	sp, r7
 800ed0a:	bd80      	pop	{r7, pc}

0800ed0c <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800ed0c:	b580      	push	{r7, lr}
 800ed0e:	b084      	sub	sp, #16
 800ed10:	af00      	add	r7, sp, #0
 800ed12:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800ed14:	687b      	ldr	r3, [r7, #4]
 800ed16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ed18:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800ed1a:	687b      	ldr	r3, [r7, #4]
 800ed1c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800ed20:	b2db      	uxtb	r3, r3
 800ed22:	2b21      	cmp	r3, #33	@ 0x21
 800ed24:	d164      	bne.n	800edf0 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 800ed26:	687b      	ldr	r3, [r7, #4]
 800ed28:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ed2a:	b29b      	uxth	r3, r3
 800ed2c:	2b00      	cmp	r3, #0
 800ed2e:	d012      	beq.n	800ed56 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800ed30:	687b      	ldr	r3, [r7, #4]
 800ed32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ed34:	781a      	ldrb	r2, [r3, #0]
 800ed36:	687b      	ldr	r3, [r7, #4]
 800ed38:	681b      	ldr	r3, [r3, #0]
 800ed3a:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800ed3c:	687b      	ldr	r3, [r7, #4]
 800ed3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ed40:	1c5a      	adds	r2, r3, #1
 800ed42:	687b      	ldr	r3, [r7, #4]
 800ed44:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800ed46:	687b      	ldr	r3, [r7, #4]
 800ed48:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ed4a:	b29b      	uxth	r3, r3
 800ed4c:	3b01      	subs	r3, #1
 800ed4e:	b29a      	uxth	r2, r3
 800ed50:	687b      	ldr	r3, [r7, #4]
 800ed52:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 800ed54:	e04c      	b.n	800edf0 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800ed56:	68fb      	ldr	r3, [r7, #12]
 800ed58:	2b08      	cmp	r3, #8
 800ed5a:	d01d      	beq.n	800ed98 <I2C_MasterTransmit_BTF+0x8c>
 800ed5c:	68fb      	ldr	r3, [r7, #12]
 800ed5e:	2b20      	cmp	r3, #32
 800ed60:	d01a      	beq.n	800ed98 <I2C_MasterTransmit_BTF+0x8c>
 800ed62:	68fb      	ldr	r3, [r7, #12]
 800ed64:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800ed68:	d016      	beq.n	800ed98 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800ed6a:	687b      	ldr	r3, [r7, #4]
 800ed6c:	681b      	ldr	r3, [r3, #0]
 800ed6e:	685a      	ldr	r2, [r3, #4]
 800ed70:	687b      	ldr	r3, [r7, #4]
 800ed72:	681b      	ldr	r3, [r3, #0]
 800ed74:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800ed78:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800ed7a:	687b      	ldr	r3, [r7, #4]
 800ed7c:	2211      	movs	r2, #17
 800ed7e:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800ed80:	687b      	ldr	r3, [r7, #4]
 800ed82:	2200      	movs	r2, #0
 800ed84:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 800ed88:	687b      	ldr	r3, [r7, #4]
 800ed8a:	2220      	movs	r2, #32
 800ed8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800ed90:	6878      	ldr	r0, [r7, #4]
 800ed92:	f7ff fecb 	bl	800eb2c <HAL_I2C_MasterTxCpltCallback>
}
 800ed96:	e02b      	b.n	800edf0 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800ed98:	687b      	ldr	r3, [r7, #4]
 800ed9a:	681b      	ldr	r3, [r3, #0]
 800ed9c:	685a      	ldr	r2, [r3, #4]
 800ed9e:	687b      	ldr	r3, [r7, #4]
 800eda0:	681b      	ldr	r3, [r3, #0]
 800eda2:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800eda6:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800eda8:	687b      	ldr	r3, [r7, #4]
 800edaa:	681b      	ldr	r3, [r3, #0]
 800edac:	681a      	ldr	r2, [r3, #0]
 800edae:	687b      	ldr	r3, [r7, #4]
 800edb0:	681b      	ldr	r3, [r3, #0]
 800edb2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800edb6:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 800edb8:	687b      	ldr	r3, [r7, #4]
 800edba:	2200      	movs	r2, #0
 800edbc:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800edbe:	687b      	ldr	r3, [r7, #4]
 800edc0:	2220      	movs	r2, #32
 800edc2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800edc6:	687b      	ldr	r3, [r7, #4]
 800edc8:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800edcc:	b2db      	uxtb	r3, r3
 800edce:	2b40      	cmp	r3, #64	@ 0x40
 800edd0:	d107      	bne.n	800ede2 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800edd2:	687b      	ldr	r3, [r7, #4]
 800edd4:	2200      	movs	r2, #0
 800edd6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 800edda:	6878      	ldr	r0, [r7, #4]
 800eddc:	f7ff fed2 	bl	800eb84 <HAL_I2C_MemTxCpltCallback>
}
 800ede0:	e006      	b.n	800edf0 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800ede2:	687b      	ldr	r3, [r7, #4]
 800ede4:	2200      	movs	r2, #0
 800ede6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 800edea:	6878      	ldr	r0, [r7, #4]
 800edec:	f7ff fe9e 	bl	800eb2c <HAL_I2C_MasterTxCpltCallback>
}
 800edf0:	bf00      	nop
 800edf2:	3710      	adds	r7, #16
 800edf4:	46bd      	mov	sp, r7
 800edf6:	bd80      	pop	{r7, pc}

0800edf8 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 800edf8:	b580      	push	{r7, lr}
 800edfa:	b084      	sub	sp, #16
 800edfc:	af00      	add	r7, sp, #0
 800edfe:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800ee00:	687b      	ldr	r3, [r7, #4]
 800ee02:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800ee06:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 800ee08:	687b      	ldr	r3, [r7, #4]
 800ee0a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ee0c:	2b00      	cmp	r3, #0
 800ee0e:	d11d      	bne.n	800ee4c <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 800ee10:	687b      	ldr	r3, [r7, #4]
 800ee12:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ee14:	2b01      	cmp	r3, #1
 800ee16:	d10b      	bne.n	800ee30 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800ee18:	687b      	ldr	r3, [r7, #4]
 800ee1a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800ee1c:	b2da      	uxtb	r2, r3
 800ee1e:	687b      	ldr	r3, [r7, #4]
 800ee20:	681b      	ldr	r3, [r3, #0]
 800ee22:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 800ee24:	687b      	ldr	r3, [r7, #4]
 800ee26:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ee28:	1c9a      	adds	r2, r3, #2
 800ee2a:	687b      	ldr	r3, [r7, #4]
 800ee2c:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 800ee2e:	e073      	b.n	800ef18 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 800ee30:	687b      	ldr	r3, [r7, #4]
 800ee32:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800ee34:	b29b      	uxth	r3, r3
 800ee36:	121b      	asrs	r3, r3, #8
 800ee38:	b2da      	uxtb	r2, r3
 800ee3a:	687b      	ldr	r3, [r7, #4]
 800ee3c:	681b      	ldr	r3, [r3, #0]
 800ee3e:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 800ee40:	687b      	ldr	r3, [r7, #4]
 800ee42:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ee44:	1c5a      	adds	r2, r3, #1
 800ee46:	687b      	ldr	r3, [r7, #4]
 800ee48:	651a      	str	r2, [r3, #80]	@ 0x50
}
 800ee4a:	e065      	b.n	800ef18 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 800ee4c:	687b      	ldr	r3, [r7, #4]
 800ee4e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ee50:	2b01      	cmp	r3, #1
 800ee52:	d10b      	bne.n	800ee6c <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800ee54:	687b      	ldr	r3, [r7, #4]
 800ee56:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800ee58:	b2da      	uxtb	r2, r3
 800ee5a:	687b      	ldr	r3, [r7, #4]
 800ee5c:	681b      	ldr	r3, [r3, #0]
 800ee5e:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 800ee60:	687b      	ldr	r3, [r7, #4]
 800ee62:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ee64:	1c5a      	adds	r2, r3, #1
 800ee66:	687b      	ldr	r3, [r7, #4]
 800ee68:	651a      	str	r2, [r3, #80]	@ 0x50
}
 800ee6a:	e055      	b.n	800ef18 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 800ee6c:	687b      	ldr	r3, [r7, #4]
 800ee6e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ee70:	2b02      	cmp	r3, #2
 800ee72:	d151      	bne.n	800ef18 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 800ee74:	7bfb      	ldrb	r3, [r7, #15]
 800ee76:	2b22      	cmp	r3, #34	@ 0x22
 800ee78:	d10d      	bne.n	800ee96 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 800ee7a:	687b      	ldr	r3, [r7, #4]
 800ee7c:	681b      	ldr	r3, [r3, #0]
 800ee7e:	681a      	ldr	r2, [r3, #0]
 800ee80:	687b      	ldr	r3, [r7, #4]
 800ee82:	681b      	ldr	r3, [r3, #0]
 800ee84:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800ee88:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 800ee8a:	687b      	ldr	r3, [r7, #4]
 800ee8c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ee8e:	1c5a      	adds	r2, r3, #1
 800ee90:	687b      	ldr	r3, [r7, #4]
 800ee92:	651a      	str	r2, [r3, #80]	@ 0x50
}
 800ee94:	e040      	b.n	800ef18 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800ee96:	687b      	ldr	r3, [r7, #4]
 800ee98:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ee9a:	b29b      	uxth	r3, r3
 800ee9c:	2b00      	cmp	r3, #0
 800ee9e:	d015      	beq.n	800eecc <I2C_MemoryTransmit_TXE_BTF+0xd4>
 800eea0:	7bfb      	ldrb	r3, [r7, #15]
 800eea2:	2b21      	cmp	r3, #33	@ 0x21
 800eea4:	d112      	bne.n	800eecc <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800eea6:	687b      	ldr	r3, [r7, #4]
 800eea8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800eeaa:	781a      	ldrb	r2, [r3, #0]
 800eeac:	687b      	ldr	r3, [r7, #4]
 800eeae:	681b      	ldr	r3, [r3, #0]
 800eeb0:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 800eeb2:	687b      	ldr	r3, [r7, #4]
 800eeb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800eeb6:	1c5a      	adds	r2, r3, #1
 800eeb8:	687b      	ldr	r3, [r7, #4]
 800eeba:	625a      	str	r2, [r3, #36]	@ 0x24
      hi2c->XferCount--;
 800eebc:	687b      	ldr	r3, [r7, #4]
 800eebe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800eec0:	b29b      	uxth	r3, r3
 800eec2:	3b01      	subs	r3, #1
 800eec4:	b29a      	uxth	r2, r3
 800eec6:	687b      	ldr	r3, [r7, #4]
 800eec8:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 800eeca:	e025      	b.n	800ef18 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800eecc:	687b      	ldr	r3, [r7, #4]
 800eece:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800eed0:	b29b      	uxth	r3, r3
 800eed2:	2b00      	cmp	r3, #0
 800eed4:	d120      	bne.n	800ef18 <I2C_MemoryTransmit_TXE_BTF+0x120>
 800eed6:	7bfb      	ldrb	r3, [r7, #15]
 800eed8:	2b21      	cmp	r3, #33	@ 0x21
 800eeda:	d11d      	bne.n	800ef18 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800eedc:	687b      	ldr	r3, [r7, #4]
 800eede:	681b      	ldr	r3, [r3, #0]
 800eee0:	685a      	ldr	r2, [r3, #4]
 800eee2:	687b      	ldr	r3, [r7, #4]
 800eee4:	681b      	ldr	r3, [r3, #0]
 800eee6:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800eeea:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800eeec:	687b      	ldr	r3, [r7, #4]
 800eeee:	681b      	ldr	r3, [r3, #0]
 800eef0:	681a      	ldr	r2, [r3, #0]
 800eef2:	687b      	ldr	r3, [r7, #4]
 800eef4:	681b      	ldr	r3, [r3, #0]
 800eef6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800eefa:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800eefc:	687b      	ldr	r3, [r7, #4]
 800eefe:	2200      	movs	r2, #0
 800ef00:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800ef02:	687b      	ldr	r3, [r7, #4]
 800ef04:	2220      	movs	r2, #32
 800ef06:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800ef0a:	687b      	ldr	r3, [r7, #4]
 800ef0c:	2200      	movs	r2, #0
 800ef0e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 800ef12:	6878      	ldr	r0, [r7, #4]
 800ef14:	f7ff fe36 	bl	800eb84 <HAL_I2C_MemTxCpltCallback>
}
 800ef18:	bf00      	nop
 800ef1a:	3710      	adds	r7, #16
 800ef1c:	46bd      	mov	sp, r7
 800ef1e:	bd80      	pop	{r7, pc}

0800ef20 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800ef20:	b580      	push	{r7, lr}
 800ef22:	b084      	sub	sp, #16
 800ef24:	af00      	add	r7, sp, #0
 800ef26:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800ef28:	687b      	ldr	r3, [r7, #4]
 800ef2a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800ef2e:	b2db      	uxtb	r3, r3
 800ef30:	2b22      	cmp	r3, #34	@ 0x22
 800ef32:	f040 80ac 	bne.w	800f08e <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 800ef36:	687b      	ldr	r3, [r7, #4]
 800ef38:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ef3a:	b29b      	uxth	r3, r3
 800ef3c:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 800ef3e:	68fb      	ldr	r3, [r7, #12]
 800ef40:	2b03      	cmp	r3, #3
 800ef42:	d921      	bls.n	800ef88 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800ef44:	687b      	ldr	r3, [r7, #4]
 800ef46:	681b      	ldr	r3, [r3, #0]
 800ef48:	691a      	ldr	r2, [r3, #16]
 800ef4a:	687b      	ldr	r3, [r7, #4]
 800ef4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ef4e:	b2d2      	uxtb	r2, r2
 800ef50:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800ef52:	687b      	ldr	r3, [r7, #4]
 800ef54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ef56:	1c5a      	adds	r2, r3, #1
 800ef58:	687b      	ldr	r3, [r7, #4]
 800ef5a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800ef5c:	687b      	ldr	r3, [r7, #4]
 800ef5e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ef60:	b29b      	uxth	r3, r3
 800ef62:	3b01      	subs	r3, #1
 800ef64:	b29a      	uxth	r2, r3
 800ef66:	687b      	ldr	r3, [r7, #4]
 800ef68:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 800ef6a:	687b      	ldr	r3, [r7, #4]
 800ef6c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ef6e:	b29b      	uxth	r3, r3
 800ef70:	2b03      	cmp	r3, #3
 800ef72:	f040 808c 	bne.w	800f08e <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800ef76:	687b      	ldr	r3, [r7, #4]
 800ef78:	681b      	ldr	r3, [r3, #0]
 800ef7a:	685a      	ldr	r2, [r3, #4]
 800ef7c:	687b      	ldr	r3, [r7, #4]
 800ef7e:	681b      	ldr	r3, [r3, #0]
 800ef80:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800ef84:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 800ef86:	e082      	b.n	800f08e <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 800ef88:	687b      	ldr	r3, [r7, #4]
 800ef8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ef8c:	2b02      	cmp	r3, #2
 800ef8e:	d075      	beq.n	800f07c <I2C_MasterReceive_RXNE+0x15c>
 800ef90:	68fb      	ldr	r3, [r7, #12]
 800ef92:	2b01      	cmp	r3, #1
 800ef94:	d002      	beq.n	800ef9c <I2C_MasterReceive_RXNE+0x7c>
 800ef96:	68fb      	ldr	r3, [r7, #12]
 800ef98:	2b00      	cmp	r3, #0
 800ef9a:	d16f      	bne.n	800f07c <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800ef9c:	6878      	ldr	r0, [r7, #4]
 800ef9e:	f001 fb11 	bl	80105c4 <I2C_WaitOnSTOPRequestThroughIT>
 800efa2:	4603      	mov	r3, r0
 800efa4:	2b00      	cmp	r3, #0
 800efa6:	d142      	bne.n	800f02e <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800efa8:	687b      	ldr	r3, [r7, #4]
 800efaa:	681b      	ldr	r3, [r3, #0]
 800efac:	681a      	ldr	r2, [r3, #0]
 800efae:	687b      	ldr	r3, [r7, #4]
 800efb0:	681b      	ldr	r3, [r3, #0]
 800efb2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800efb6:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800efb8:	687b      	ldr	r3, [r7, #4]
 800efba:	681b      	ldr	r3, [r3, #0]
 800efbc:	685a      	ldr	r2, [r3, #4]
 800efbe:	687b      	ldr	r3, [r7, #4]
 800efc0:	681b      	ldr	r3, [r3, #0]
 800efc2:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800efc6:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800efc8:	687b      	ldr	r3, [r7, #4]
 800efca:	681b      	ldr	r3, [r3, #0]
 800efcc:	691a      	ldr	r2, [r3, #16]
 800efce:	687b      	ldr	r3, [r7, #4]
 800efd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800efd2:	b2d2      	uxtb	r2, r2
 800efd4:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800efd6:	687b      	ldr	r3, [r7, #4]
 800efd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800efda:	1c5a      	adds	r2, r3, #1
 800efdc:	687b      	ldr	r3, [r7, #4]
 800efde:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 800efe0:	687b      	ldr	r3, [r7, #4]
 800efe2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800efe4:	b29b      	uxth	r3, r3
 800efe6:	3b01      	subs	r3, #1
 800efe8:	b29a      	uxth	r2, r3
 800efea:	687b      	ldr	r3, [r7, #4]
 800efec:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800efee:	687b      	ldr	r3, [r7, #4]
 800eff0:	2220      	movs	r2, #32
 800eff2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800eff6:	687b      	ldr	r3, [r7, #4]
 800eff8:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800effc:	b2db      	uxtb	r3, r3
 800effe:	2b40      	cmp	r3, #64	@ 0x40
 800f000:	d10a      	bne.n	800f018 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800f002:	687b      	ldr	r3, [r7, #4]
 800f004:	2200      	movs	r2, #0
 800f006:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 800f00a:	687b      	ldr	r3, [r7, #4]
 800f00c:	2200      	movs	r2, #0
 800f00e:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 800f010:	6878      	ldr	r0, [r7, #4]
 800f012:	f7ff fdc1 	bl	800eb98 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800f016:	e03a      	b.n	800f08e <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800f018:	687b      	ldr	r3, [r7, #4]
 800f01a:	2200      	movs	r2, #0
 800f01c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800f020:	687b      	ldr	r3, [r7, #4]
 800f022:	2212      	movs	r2, #18
 800f024:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 800f026:	6878      	ldr	r0, [r7, #4]
 800f028:	f7fc faa0 	bl	800b56c <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800f02c:	e02f      	b.n	800f08e <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800f02e:	687b      	ldr	r3, [r7, #4]
 800f030:	681b      	ldr	r3, [r3, #0]
 800f032:	685a      	ldr	r2, [r3, #4]
 800f034:	687b      	ldr	r3, [r7, #4]
 800f036:	681b      	ldr	r3, [r3, #0]
 800f038:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800f03c:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800f03e:	687b      	ldr	r3, [r7, #4]
 800f040:	681b      	ldr	r3, [r3, #0]
 800f042:	691a      	ldr	r2, [r3, #16]
 800f044:	687b      	ldr	r3, [r7, #4]
 800f046:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f048:	b2d2      	uxtb	r2, r2
 800f04a:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800f04c:	687b      	ldr	r3, [r7, #4]
 800f04e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f050:	1c5a      	adds	r2, r3, #1
 800f052:	687b      	ldr	r3, [r7, #4]
 800f054:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 800f056:	687b      	ldr	r3, [r7, #4]
 800f058:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f05a:	b29b      	uxth	r3, r3
 800f05c:	3b01      	subs	r3, #1
 800f05e:	b29a      	uxth	r2, r3
 800f060:	687b      	ldr	r3, [r7, #4]
 800f062:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800f064:	687b      	ldr	r3, [r7, #4]
 800f066:	2220      	movs	r2, #32
 800f068:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800f06c:	687b      	ldr	r3, [r7, #4]
 800f06e:	2200      	movs	r2, #0
 800f070:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 800f074:	6878      	ldr	r0, [r7, #4]
 800f076:	f7ff fd99 	bl	800ebac <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800f07a:	e008      	b.n	800f08e <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800f07c:	687b      	ldr	r3, [r7, #4]
 800f07e:	681b      	ldr	r3, [r3, #0]
 800f080:	685a      	ldr	r2, [r3, #4]
 800f082:	687b      	ldr	r3, [r7, #4]
 800f084:	681b      	ldr	r3, [r3, #0]
 800f086:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800f08a:	605a      	str	r2, [r3, #4]
}
 800f08c:	e7ff      	b.n	800f08e <I2C_MasterReceive_RXNE+0x16e>
 800f08e:	bf00      	nop
 800f090:	3710      	adds	r7, #16
 800f092:	46bd      	mov	sp, r7
 800f094:	bd80      	pop	{r7, pc}

0800f096 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800f096:	b580      	push	{r7, lr}
 800f098:	b084      	sub	sp, #16
 800f09a:	af00      	add	r7, sp, #0
 800f09c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800f09e:	687b      	ldr	r3, [r7, #4]
 800f0a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f0a2:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 800f0a4:	687b      	ldr	r3, [r7, #4]
 800f0a6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f0a8:	b29b      	uxth	r3, r3
 800f0aa:	2b04      	cmp	r3, #4
 800f0ac:	d11b      	bne.n	800f0e6 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800f0ae:	687b      	ldr	r3, [r7, #4]
 800f0b0:	681b      	ldr	r3, [r3, #0]
 800f0b2:	685a      	ldr	r2, [r3, #4]
 800f0b4:	687b      	ldr	r3, [r7, #4]
 800f0b6:	681b      	ldr	r3, [r3, #0]
 800f0b8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800f0bc:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800f0be:	687b      	ldr	r3, [r7, #4]
 800f0c0:	681b      	ldr	r3, [r3, #0]
 800f0c2:	691a      	ldr	r2, [r3, #16]
 800f0c4:	687b      	ldr	r3, [r7, #4]
 800f0c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f0c8:	b2d2      	uxtb	r2, r2
 800f0ca:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800f0cc:	687b      	ldr	r3, [r7, #4]
 800f0ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f0d0:	1c5a      	adds	r2, r3, #1
 800f0d2:	687b      	ldr	r3, [r7, #4]
 800f0d4:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 800f0d6:	687b      	ldr	r3, [r7, #4]
 800f0d8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f0da:	b29b      	uxth	r3, r3
 800f0dc:	3b01      	subs	r3, #1
 800f0de:	b29a      	uxth	r2, r3
 800f0e0:	687b      	ldr	r3, [r7, #4]
 800f0e2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 800f0e4:	e0bd      	b.n	800f262 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 800f0e6:	687b      	ldr	r3, [r7, #4]
 800f0e8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f0ea:	b29b      	uxth	r3, r3
 800f0ec:	2b03      	cmp	r3, #3
 800f0ee:	d129      	bne.n	800f144 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800f0f0:	687b      	ldr	r3, [r7, #4]
 800f0f2:	681b      	ldr	r3, [r3, #0]
 800f0f4:	685a      	ldr	r2, [r3, #4]
 800f0f6:	687b      	ldr	r3, [r7, #4]
 800f0f8:	681b      	ldr	r3, [r3, #0]
 800f0fa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800f0fe:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 800f100:	68fb      	ldr	r3, [r7, #12]
 800f102:	2b04      	cmp	r3, #4
 800f104:	d00a      	beq.n	800f11c <I2C_MasterReceive_BTF+0x86>
 800f106:	68fb      	ldr	r3, [r7, #12]
 800f108:	2b02      	cmp	r3, #2
 800f10a:	d007      	beq.n	800f11c <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800f10c:	687b      	ldr	r3, [r7, #4]
 800f10e:	681b      	ldr	r3, [r3, #0]
 800f110:	681a      	ldr	r2, [r3, #0]
 800f112:	687b      	ldr	r3, [r7, #4]
 800f114:	681b      	ldr	r3, [r3, #0]
 800f116:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800f11a:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800f11c:	687b      	ldr	r3, [r7, #4]
 800f11e:	681b      	ldr	r3, [r3, #0]
 800f120:	691a      	ldr	r2, [r3, #16]
 800f122:	687b      	ldr	r3, [r7, #4]
 800f124:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f126:	b2d2      	uxtb	r2, r2
 800f128:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800f12a:	687b      	ldr	r3, [r7, #4]
 800f12c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f12e:	1c5a      	adds	r2, r3, #1
 800f130:	687b      	ldr	r3, [r7, #4]
 800f132:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 800f134:	687b      	ldr	r3, [r7, #4]
 800f136:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f138:	b29b      	uxth	r3, r3
 800f13a:	3b01      	subs	r3, #1
 800f13c:	b29a      	uxth	r2, r3
 800f13e:	687b      	ldr	r3, [r7, #4]
 800f140:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 800f142:	e08e      	b.n	800f262 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 800f144:	687b      	ldr	r3, [r7, #4]
 800f146:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f148:	b29b      	uxth	r3, r3
 800f14a:	2b02      	cmp	r3, #2
 800f14c:	d176      	bne.n	800f23c <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 800f14e:	68fb      	ldr	r3, [r7, #12]
 800f150:	2b01      	cmp	r3, #1
 800f152:	d002      	beq.n	800f15a <I2C_MasterReceive_BTF+0xc4>
 800f154:	68fb      	ldr	r3, [r7, #12]
 800f156:	2b10      	cmp	r3, #16
 800f158:	d108      	bne.n	800f16c <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800f15a:	687b      	ldr	r3, [r7, #4]
 800f15c:	681b      	ldr	r3, [r3, #0]
 800f15e:	681a      	ldr	r2, [r3, #0]
 800f160:	687b      	ldr	r3, [r7, #4]
 800f162:	681b      	ldr	r3, [r3, #0]
 800f164:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800f168:	601a      	str	r2, [r3, #0]
 800f16a:	e019      	b.n	800f1a0 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 800f16c:	68fb      	ldr	r3, [r7, #12]
 800f16e:	2b04      	cmp	r3, #4
 800f170:	d002      	beq.n	800f178 <I2C_MasterReceive_BTF+0xe2>
 800f172:	68fb      	ldr	r3, [r7, #12]
 800f174:	2b02      	cmp	r3, #2
 800f176:	d108      	bne.n	800f18a <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800f178:	687b      	ldr	r3, [r7, #4]
 800f17a:	681b      	ldr	r3, [r3, #0]
 800f17c:	681a      	ldr	r2, [r3, #0]
 800f17e:	687b      	ldr	r3, [r7, #4]
 800f180:	681b      	ldr	r3, [r3, #0]
 800f182:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800f186:	601a      	str	r2, [r3, #0]
 800f188:	e00a      	b.n	800f1a0 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 800f18a:	68fb      	ldr	r3, [r7, #12]
 800f18c:	2b10      	cmp	r3, #16
 800f18e:	d007      	beq.n	800f1a0 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800f190:	687b      	ldr	r3, [r7, #4]
 800f192:	681b      	ldr	r3, [r3, #0]
 800f194:	681a      	ldr	r2, [r3, #0]
 800f196:	687b      	ldr	r3, [r7, #4]
 800f198:	681b      	ldr	r3, [r3, #0]
 800f19a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800f19e:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800f1a0:	687b      	ldr	r3, [r7, #4]
 800f1a2:	681b      	ldr	r3, [r3, #0]
 800f1a4:	691a      	ldr	r2, [r3, #16]
 800f1a6:	687b      	ldr	r3, [r7, #4]
 800f1a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f1aa:	b2d2      	uxtb	r2, r2
 800f1ac:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800f1ae:	687b      	ldr	r3, [r7, #4]
 800f1b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f1b2:	1c5a      	adds	r2, r3, #1
 800f1b4:	687b      	ldr	r3, [r7, #4]
 800f1b6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 800f1b8:	687b      	ldr	r3, [r7, #4]
 800f1ba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f1bc:	b29b      	uxth	r3, r3
 800f1be:	3b01      	subs	r3, #1
 800f1c0:	b29a      	uxth	r2, r3
 800f1c2:	687b      	ldr	r3, [r7, #4]
 800f1c4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800f1c6:	687b      	ldr	r3, [r7, #4]
 800f1c8:	681b      	ldr	r3, [r3, #0]
 800f1ca:	691a      	ldr	r2, [r3, #16]
 800f1cc:	687b      	ldr	r3, [r7, #4]
 800f1ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f1d0:	b2d2      	uxtb	r2, r2
 800f1d2:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800f1d4:	687b      	ldr	r3, [r7, #4]
 800f1d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f1d8:	1c5a      	adds	r2, r3, #1
 800f1da:	687b      	ldr	r3, [r7, #4]
 800f1dc:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 800f1de:	687b      	ldr	r3, [r7, #4]
 800f1e0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f1e2:	b29b      	uxth	r3, r3
 800f1e4:	3b01      	subs	r3, #1
 800f1e6:	b29a      	uxth	r2, r3
 800f1e8:	687b      	ldr	r3, [r7, #4]
 800f1ea:	855a      	strh	r2, [r3, #42]	@ 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800f1ec:	687b      	ldr	r3, [r7, #4]
 800f1ee:	681b      	ldr	r3, [r3, #0]
 800f1f0:	685a      	ldr	r2, [r3, #4]
 800f1f2:	687b      	ldr	r3, [r7, #4]
 800f1f4:	681b      	ldr	r3, [r3, #0]
 800f1f6:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 800f1fa:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800f1fc:	687b      	ldr	r3, [r7, #4]
 800f1fe:	2220      	movs	r2, #32
 800f200:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800f204:	687b      	ldr	r3, [r7, #4]
 800f206:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800f20a:	b2db      	uxtb	r3, r3
 800f20c:	2b40      	cmp	r3, #64	@ 0x40
 800f20e:	d10a      	bne.n	800f226 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800f210:	687b      	ldr	r3, [r7, #4]
 800f212:	2200      	movs	r2, #0
 800f214:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 800f218:	687b      	ldr	r3, [r7, #4]
 800f21a:	2200      	movs	r2, #0
 800f21c:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 800f21e:	6878      	ldr	r0, [r7, #4]
 800f220:	f7ff fcba 	bl	800eb98 <HAL_I2C_MemRxCpltCallback>
}
 800f224:	e01d      	b.n	800f262 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800f226:	687b      	ldr	r3, [r7, #4]
 800f228:	2200      	movs	r2, #0
 800f22a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800f22e:	687b      	ldr	r3, [r7, #4]
 800f230:	2212      	movs	r2, #18
 800f232:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 800f234:	6878      	ldr	r0, [r7, #4]
 800f236:	f7fc f999 	bl	800b56c <HAL_I2C_MasterRxCpltCallback>
}
 800f23a:	e012      	b.n	800f262 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800f23c:	687b      	ldr	r3, [r7, #4]
 800f23e:	681b      	ldr	r3, [r3, #0]
 800f240:	691a      	ldr	r2, [r3, #16]
 800f242:	687b      	ldr	r3, [r7, #4]
 800f244:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f246:	b2d2      	uxtb	r2, r2
 800f248:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800f24a:	687b      	ldr	r3, [r7, #4]
 800f24c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f24e:	1c5a      	adds	r2, r3, #1
 800f250:	687b      	ldr	r3, [r7, #4]
 800f252:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 800f254:	687b      	ldr	r3, [r7, #4]
 800f256:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f258:	b29b      	uxth	r3, r3
 800f25a:	3b01      	subs	r3, #1
 800f25c:	b29a      	uxth	r2, r3
 800f25e:	687b      	ldr	r3, [r7, #4]
 800f260:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 800f262:	bf00      	nop
 800f264:	3710      	adds	r7, #16
 800f266:	46bd      	mov	sp, r7
 800f268:	bd80      	pop	{r7, pc}

0800f26a <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 800f26a:	b480      	push	{r7}
 800f26c:	b083      	sub	sp, #12
 800f26e:	af00      	add	r7, sp, #0
 800f270:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800f272:	687b      	ldr	r3, [r7, #4]
 800f274:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800f278:	b2db      	uxtb	r3, r3
 800f27a:	2b40      	cmp	r3, #64	@ 0x40
 800f27c:	d117      	bne.n	800f2ae <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 800f27e:	687b      	ldr	r3, [r7, #4]
 800f280:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800f282:	2b00      	cmp	r3, #0
 800f284:	d109      	bne.n	800f29a <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800f286:	687b      	ldr	r3, [r7, #4]
 800f288:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f28a:	b2db      	uxtb	r3, r3
 800f28c:	461a      	mov	r2, r3
 800f28e:	687b      	ldr	r3, [r7, #4]
 800f290:	681b      	ldr	r3, [r3, #0]
 800f292:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800f296:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 800f298:	e067      	b.n	800f36a <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800f29a:	687b      	ldr	r3, [r7, #4]
 800f29c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f29e:	b2db      	uxtb	r3, r3
 800f2a0:	f043 0301 	orr.w	r3, r3, #1
 800f2a4:	b2da      	uxtb	r2, r3
 800f2a6:	687b      	ldr	r3, [r7, #4]
 800f2a8:	681b      	ldr	r3, [r3, #0]
 800f2aa:	611a      	str	r2, [r3, #16]
}
 800f2ac:	e05d      	b.n	800f36a <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800f2ae:	687b      	ldr	r3, [r7, #4]
 800f2b0:	691b      	ldr	r3, [r3, #16]
 800f2b2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800f2b6:	d133      	bne.n	800f320 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800f2b8:	687b      	ldr	r3, [r7, #4]
 800f2ba:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800f2be:	b2db      	uxtb	r3, r3
 800f2c0:	2b21      	cmp	r3, #33	@ 0x21
 800f2c2:	d109      	bne.n	800f2d8 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800f2c4:	687b      	ldr	r3, [r7, #4]
 800f2c6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f2c8:	b2db      	uxtb	r3, r3
 800f2ca:	461a      	mov	r2, r3
 800f2cc:	687b      	ldr	r3, [r7, #4]
 800f2ce:	681b      	ldr	r3, [r3, #0]
 800f2d0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800f2d4:	611a      	str	r2, [r3, #16]
 800f2d6:	e008      	b.n	800f2ea <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800f2d8:	687b      	ldr	r3, [r7, #4]
 800f2da:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f2dc:	b2db      	uxtb	r3, r3
 800f2de:	f043 0301 	orr.w	r3, r3, #1
 800f2e2:	b2da      	uxtb	r2, r3
 800f2e4:	687b      	ldr	r3, [r7, #4]
 800f2e6:	681b      	ldr	r3, [r3, #0]
 800f2e8:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800f2ea:	687b      	ldr	r3, [r7, #4]
 800f2ec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f2ee:	2b00      	cmp	r3, #0
 800f2f0:	d004      	beq.n	800f2fc <I2C_Master_SB+0x92>
 800f2f2:	687b      	ldr	r3, [r7, #4]
 800f2f4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f2f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f2f8:	2b00      	cmp	r3, #0
 800f2fa:	d108      	bne.n	800f30e <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800f2fc:	687b      	ldr	r3, [r7, #4]
 800f2fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f300:	2b00      	cmp	r3, #0
 800f302:	d032      	beq.n	800f36a <I2C_Master_SB+0x100>
 800f304:	687b      	ldr	r3, [r7, #4]
 800f306:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f308:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f30a:	2b00      	cmp	r3, #0
 800f30c:	d02d      	beq.n	800f36a <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800f30e:	687b      	ldr	r3, [r7, #4]
 800f310:	681b      	ldr	r3, [r3, #0]
 800f312:	685a      	ldr	r2, [r3, #4]
 800f314:	687b      	ldr	r3, [r7, #4]
 800f316:	681b      	ldr	r3, [r3, #0]
 800f318:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800f31c:	605a      	str	r2, [r3, #4]
}
 800f31e:	e024      	b.n	800f36a <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 800f320:	687b      	ldr	r3, [r7, #4]
 800f322:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800f324:	2b00      	cmp	r3, #0
 800f326:	d10e      	bne.n	800f346 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 800f328:	687b      	ldr	r3, [r7, #4]
 800f32a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f32c:	b29b      	uxth	r3, r3
 800f32e:	11db      	asrs	r3, r3, #7
 800f330:	b2db      	uxtb	r3, r3
 800f332:	f003 0306 	and.w	r3, r3, #6
 800f336:	b2db      	uxtb	r3, r3
 800f338:	f063 030f 	orn	r3, r3, #15
 800f33c:	b2da      	uxtb	r2, r3
 800f33e:	687b      	ldr	r3, [r7, #4]
 800f340:	681b      	ldr	r3, [r3, #0]
 800f342:	611a      	str	r2, [r3, #16]
}
 800f344:	e011      	b.n	800f36a <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 800f346:	687b      	ldr	r3, [r7, #4]
 800f348:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800f34a:	2b01      	cmp	r3, #1
 800f34c:	d10d      	bne.n	800f36a <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 800f34e:	687b      	ldr	r3, [r7, #4]
 800f350:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f352:	b29b      	uxth	r3, r3
 800f354:	11db      	asrs	r3, r3, #7
 800f356:	b2db      	uxtb	r3, r3
 800f358:	f003 0306 	and.w	r3, r3, #6
 800f35c:	b2db      	uxtb	r3, r3
 800f35e:	f063 030e 	orn	r3, r3, #14
 800f362:	b2da      	uxtb	r2, r3
 800f364:	687b      	ldr	r3, [r7, #4]
 800f366:	681b      	ldr	r3, [r3, #0]
 800f368:	611a      	str	r2, [r3, #16]
}
 800f36a:	bf00      	nop
 800f36c:	370c      	adds	r7, #12
 800f36e:	46bd      	mov	sp, r7
 800f370:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f374:	4770      	bx	lr

0800f376 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 800f376:	b480      	push	{r7}
 800f378:	b083      	sub	sp, #12
 800f37a:	af00      	add	r7, sp, #0
 800f37c:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 800f37e:	687b      	ldr	r3, [r7, #4]
 800f380:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f382:	b2da      	uxtb	r2, r3
 800f384:	687b      	ldr	r3, [r7, #4]
 800f386:	681b      	ldr	r3, [r3, #0]
 800f388:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800f38a:	687b      	ldr	r3, [r7, #4]
 800f38c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f38e:	2b00      	cmp	r3, #0
 800f390:	d004      	beq.n	800f39c <I2C_Master_ADD10+0x26>
 800f392:	687b      	ldr	r3, [r7, #4]
 800f394:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f396:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f398:	2b00      	cmp	r3, #0
 800f39a:	d108      	bne.n	800f3ae <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800f39c:	687b      	ldr	r3, [r7, #4]
 800f39e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f3a0:	2b00      	cmp	r3, #0
 800f3a2:	d00c      	beq.n	800f3be <I2C_Master_ADD10+0x48>
 800f3a4:	687b      	ldr	r3, [r7, #4]
 800f3a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f3a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f3aa:	2b00      	cmp	r3, #0
 800f3ac:	d007      	beq.n	800f3be <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800f3ae:	687b      	ldr	r3, [r7, #4]
 800f3b0:	681b      	ldr	r3, [r3, #0]
 800f3b2:	685a      	ldr	r2, [r3, #4]
 800f3b4:	687b      	ldr	r3, [r7, #4]
 800f3b6:	681b      	ldr	r3, [r3, #0]
 800f3b8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800f3bc:	605a      	str	r2, [r3, #4]
  }
}
 800f3be:	bf00      	nop
 800f3c0:	370c      	adds	r7, #12
 800f3c2:	46bd      	mov	sp, r7
 800f3c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3c8:	4770      	bx	lr

0800f3ca <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 800f3ca:	b480      	push	{r7}
 800f3cc:	b091      	sub	sp, #68	@ 0x44
 800f3ce:	af00      	add	r7, sp, #0
 800f3d0:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 800f3d2:	687b      	ldr	r3, [r7, #4]
 800f3d4:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800f3d8:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 800f3dc:	687b      	ldr	r3, [r7, #4]
 800f3de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f3e0:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 800f3e2:	687b      	ldr	r3, [r7, #4]
 800f3e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f3e6:	637b      	str	r3, [r7, #52]	@ 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800f3e8:	687b      	ldr	r3, [r7, #4]
 800f3ea:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800f3ee:	b2db      	uxtb	r3, r3
 800f3f0:	2b22      	cmp	r3, #34	@ 0x22
 800f3f2:	f040 8169 	bne.w	800f6c8 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 800f3f6:	687b      	ldr	r3, [r7, #4]
 800f3f8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800f3fa:	2b00      	cmp	r3, #0
 800f3fc:	d10f      	bne.n	800f41e <I2C_Master_ADDR+0x54>
 800f3fe:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800f402:	2b40      	cmp	r3, #64	@ 0x40
 800f404:	d10b      	bne.n	800f41e <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800f406:	2300      	movs	r3, #0
 800f408:	633b      	str	r3, [r7, #48]	@ 0x30
 800f40a:	687b      	ldr	r3, [r7, #4]
 800f40c:	681b      	ldr	r3, [r3, #0]
 800f40e:	695b      	ldr	r3, [r3, #20]
 800f410:	633b      	str	r3, [r7, #48]	@ 0x30
 800f412:	687b      	ldr	r3, [r7, #4]
 800f414:	681b      	ldr	r3, [r3, #0]
 800f416:	699b      	ldr	r3, [r3, #24]
 800f418:	633b      	str	r3, [r7, #48]	@ 0x30
 800f41a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f41c:	e160      	b.n	800f6e0 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 800f41e:	687b      	ldr	r3, [r7, #4]
 800f420:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800f422:	2b00      	cmp	r3, #0
 800f424:	d11d      	bne.n	800f462 <I2C_Master_ADDR+0x98>
 800f426:	687b      	ldr	r3, [r7, #4]
 800f428:	691b      	ldr	r3, [r3, #16]
 800f42a:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800f42e:	d118      	bne.n	800f462 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800f430:	2300      	movs	r3, #0
 800f432:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800f434:	687b      	ldr	r3, [r7, #4]
 800f436:	681b      	ldr	r3, [r3, #0]
 800f438:	695b      	ldr	r3, [r3, #20]
 800f43a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800f43c:	687b      	ldr	r3, [r7, #4]
 800f43e:	681b      	ldr	r3, [r3, #0]
 800f440:	699b      	ldr	r3, [r3, #24]
 800f442:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800f444:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800f446:	687b      	ldr	r3, [r7, #4]
 800f448:	681b      	ldr	r3, [r3, #0]
 800f44a:	681a      	ldr	r2, [r3, #0]
 800f44c:	687b      	ldr	r3, [r7, #4]
 800f44e:	681b      	ldr	r3, [r3, #0]
 800f450:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800f454:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 800f456:	687b      	ldr	r3, [r7, #4]
 800f458:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800f45a:	1c5a      	adds	r2, r3, #1
 800f45c:	687b      	ldr	r3, [r7, #4]
 800f45e:	651a      	str	r2, [r3, #80]	@ 0x50
 800f460:	e13e      	b.n	800f6e0 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 800f462:	687b      	ldr	r3, [r7, #4]
 800f464:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f466:	b29b      	uxth	r3, r3
 800f468:	2b00      	cmp	r3, #0
 800f46a:	d113      	bne.n	800f494 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800f46c:	2300      	movs	r3, #0
 800f46e:	62bb      	str	r3, [r7, #40]	@ 0x28
 800f470:	687b      	ldr	r3, [r7, #4]
 800f472:	681b      	ldr	r3, [r3, #0]
 800f474:	695b      	ldr	r3, [r3, #20]
 800f476:	62bb      	str	r3, [r7, #40]	@ 0x28
 800f478:	687b      	ldr	r3, [r7, #4]
 800f47a:	681b      	ldr	r3, [r3, #0]
 800f47c:	699b      	ldr	r3, [r3, #24]
 800f47e:	62bb      	str	r3, [r7, #40]	@ 0x28
 800f480:	6abb      	ldr	r3, [r7, #40]	@ 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800f482:	687b      	ldr	r3, [r7, #4]
 800f484:	681b      	ldr	r3, [r3, #0]
 800f486:	681a      	ldr	r2, [r3, #0]
 800f488:	687b      	ldr	r3, [r7, #4]
 800f48a:	681b      	ldr	r3, [r3, #0]
 800f48c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800f490:	601a      	str	r2, [r3, #0]
 800f492:	e115      	b.n	800f6c0 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 800f494:	687b      	ldr	r3, [r7, #4]
 800f496:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f498:	b29b      	uxth	r3, r3
 800f49a:	2b01      	cmp	r3, #1
 800f49c:	f040 808a 	bne.w	800f5b4 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 800f4a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f4a2:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800f4a6:	d137      	bne.n	800f518 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800f4a8:	687b      	ldr	r3, [r7, #4]
 800f4aa:	681b      	ldr	r3, [r3, #0]
 800f4ac:	681a      	ldr	r2, [r3, #0]
 800f4ae:	687b      	ldr	r3, [r7, #4]
 800f4b0:	681b      	ldr	r3, [r3, #0]
 800f4b2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800f4b6:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800f4b8:	687b      	ldr	r3, [r7, #4]
 800f4ba:	681b      	ldr	r3, [r3, #0]
 800f4bc:	685b      	ldr	r3, [r3, #4]
 800f4be:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800f4c2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800f4c6:	d113      	bne.n	800f4f0 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800f4c8:	687b      	ldr	r3, [r7, #4]
 800f4ca:	681b      	ldr	r3, [r3, #0]
 800f4cc:	681a      	ldr	r2, [r3, #0]
 800f4ce:	687b      	ldr	r3, [r7, #4]
 800f4d0:	681b      	ldr	r3, [r3, #0]
 800f4d2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800f4d6:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800f4d8:	2300      	movs	r3, #0
 800f4da:	627b      	str	r3, [r7, #36]	@ 0x24
 800f4dc:	687b      	ldr	r3, [r7, #4]
 800f4de:	681b      	ldr	r3, [r3, #0]
 800f4e0:	695b      	ldr	r3, [r3, #20]
 800f4e2:	627b      	str	r3, [r7, #36]	@ 0x24
 800f4e4:	687b      	ldr	r3, [r7, #4]
 800f4e6:	681b      	ldr	r3, [r3, #0]
 800f4e8:	699b      	ldr	r3, [r3, #24]
 800f4ea:	627b      	str	r3, [r7, #36]	@ 0x24
 800f4ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f4ee:	e0e7      	b.n	800f6c0 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800f4f0:	2300      	movs	r3, #0
 800f4f2:	623b      	str	r3, [r7, #32]
 800f4f4:	687b      	ldr	r3, [r7, #4]
 800f4f6:	681b      	ldr	r3, [r3, #0]
 800f4f8:	695b      	ldr	r3, [r3, #20]
 800f4fa:	623b      	str	r3, [r7, #32]
 800f4fc:	687b      	ldr	r3, [r7, #4]
 800f4fe:	681b      	ldr	r3, [r3, #0]
 800f500:	699b      	ldr	r3, [r3, #24]
 800f502:	623b      	str	r3, [r7, #32]
 800f504:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800f506:	687b      	ldr	r3, [r7, #4]
 800f508:	681b      	ldr	r3, [r3, #0]
 800f50a:	681a      	ldr	r2, [r3, #0]
 800f50c:	687b      	ldr	r3, [r7, #4]
 800f50e:	681b      	ldr	r3, [r3, #0]
 800f510:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800f514:	601a      	str	r2, [r3, #0]
 800f516:	e0d3      	b.n	800f6c0 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 800f518:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f51a:	2b08      	cmp	r3, #8
 800f51c:	d02e      	beq.n	800f57c <I2C_Master_ADDR+0x1b2>
 800f51e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f520:	2b20      	cmp	r3, #32
 800f522:	d02b      	beq.n	800f57c <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 800f524:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f526:	2b12      	cmp	r3, #18
 800f528:	d102      	bne.n	800f530 <I2C_Master_ADDR+0x166>
 800f52a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f52c:	2b01      	cmp	r3, #1
 800f52e:	d125      	bne.n	800f57c <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800f530:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f532:	2b04      	cmp	r3, #4
 800f534:	d00e      	beq.n	800f554 <I2C_Master_ADDR+0x18a>
 800f536:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f538:	2b02      	cmp	r3, #2
 800f53a:	d00b      	beq.n	800f554 <I2C_Master_ADDR+0x18a>
 800f53c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f53e:	2b10      	cmp	r3, #16
 800f540:	d008      	beq.n	800f554 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800f542:	687b      	ldr	r3, [r7, #4]
 800f544:	681b      	ldr	r3, [r3, #0]
 800f546:	681a      	ldr	r2, [r3, #0]
 800f548:	687b      	ldr	r3, [r7, #4]
 800f54a:	681b      	ldr	r3, [r3, #0]
 800f54c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800f550:	601a      	str	r2, [r3, #0]
 800f552:	e007      	b.n	800f564 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800f554:	687b      	ldr	r3, [r7, #4]
 800f556:	681b      	ldr	r3, [r3, #0]
 800f558:	681a      	ldr	r2, [r3, #0]
 800f55a:	687b      	ldr	r3, [r7, #4]
 800f55c:	681b      	ldr	r3, [r3, #0]
 800f55e:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800f562:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800f564:	2300      	movs	r3, #0
 800f566:	61fb      	str	r3, [r7, #28]
 800f568:	687b      	ldr	r3, [r7, #4]
 800f56a:	681b      	ldr	r3, [r3, #0]
 800f56c:	695b      	ldr	r3, [r3, #20]
 800f56e:	61fb      	str	r3, [r7, #28]
 800f570:	687b      	ldr	r3, [r7, #4]
 800f572:	681b      	ldr	r3, [r3, #0]
 800f574:	699b      	ldr	r3, [r3, #24]
 800f576:	61fb      	str	r3, [r7, #28]
 800f578:	69fb      	ldr	r3, [r7, #28]
 800f57a:	e0a1      	b.n	800f6c0 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800f57c:	687b      	ldr	r3, [r7, #4]
 800f57e:	681b      	ldr	r3, [r3, #0]
 800f580:	681a      	ldr	r2, [r3, #0]
 800f582:	687b      	ldr	r3, [r7, #4]
 800f584:	681b      	ldr	r3, [r3, #0]
 800f586:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800f58a:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800f58c:	2300      	movs	r3, #0
 800f58e:	61bb      	str	r3, [r7, #24]
 800f590:	687b      	ldr	r3, [r7, #4]
 800f592:	681b      	ldr	r3, [r3, #0]
 800f594:	695b      	ldr	r3, [r3, #20]
 800f596:	61bb      	str	r3, [r7, #24]
 800f598:	687b      	ldr	r3, [r7, #4]
 800f59a:	681b      	ldr	r3, [r3, #0]
 800f59c:	699b      	ldr	r3, [r3, #24]
 800f59e:	61bb      	str	r3, [r7, #24]
 800f5a0:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800f5a2:	687b      	ldr	r3, [r7, #4]
 800f5a4:	681b      	ldr	r3, [r3, #0]
 800f5a6:	681a      	ldr	r2, [r3, #0]
 800f5a8:	687b      	ldr	r3, [r7, #4]
 800f5aa:	681b      	ldr	r3, [r3, #0]
 800f5ac:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800f5b0:	601a      	str	r2, [r3, #0]
 800f5b2:	e085      	b.n	800f6c0 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 800f5b4:	687b      	ldr	r3, [r7, #4]
 800f5b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f5b8:	b29b      	uxth	r3, r3
 800f5ba:	2b02      	cmp	r3, #2
 800f5bc:	d14d      	bne.n	800f65a <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800f5be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f5c0:	2b04      	cmp	r3, #4
 800f5c2:	d016      	beq.n	800f5f2 <I2C_Master_ADDR+0x228>
 800f5c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f5c6:	2b02      	cmp	r3, #2
 800f5c8:	d013      	beq.n	800f5f2 <I2C_Master_ADDR+0x228>
 800f5ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f5cc:	2b10      	cmp	r3, #16
 800f5ce:	d010      	beq.n	800f5f2 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800f5d0:	687b      	ldr	r3, [r7, #4]
 800f5d2:	681b      	ldr	r3, [r3, #0]
 800f5d4:	681a      	ldr	r2, [r3, #0]
 800f5d6:	687b      	ldr	r3, [r7, #4]
 800f5d8:	681b      	ldr	r3, [r3, #0]
 800f5da:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800f5de:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800f5e0:	687b      	ldr	r3, [r7, #4]
 800f5e2:	681b      	ldr	r3, [r3, #0]
 800f5e4:	681a      	ldr	r2, [r3, #0]
 800f5e6:	687b      	ldr	r3, [r7, #4]
 800f5e8:	681b      	ldr	r3, [r3, #0]
 800f5ea:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800f5ee:	601a      	str	r2, [r3, #0]
 800f5f0:	e007      	b.n	800f602 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800f5f2:	687b      	ldr	r3, [r7, #4]
 800f5f4:	681b      	ldr	r3, [r3, #0]
 800f5f6:	681a      	ldr	r2, [r3, #0]
 800f5f8:	687b      	ldr	r3, [r7, #4]
 800f5fa:	681b      	ldr	r3, [r3, #0]
 800f5fc:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800f600:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800f602:	687b      	ldr	r3, [r7, #4]
 800f604:	681b      	ldr	r3, [r3, #0]
 800f606:	685b      	ldr	r3, [r3, #4]
 800f608:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800f60c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800f610:	d117      	bne.n	800f642 <I2C_Master_ADDR+0x278>
 800f612:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f614:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800f618:	d00b      	beq.n	800f632 <I2C_Master_ADDR+0x268>
 800f61a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f61c:	2b01      	cmp	r3, #1
 800f61e:	d008      	beq.n	800f632 <I2C_Master_ADDR+0x268>
 800f620:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f622:	2b08      	cmp	r3, #8
 800f624:	d005      	beq.n	800f632 <I2C_Master_ADDR+0x268>
 800f626:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f628:	2b10      	cmp	r3, #16
 800f62a:	d002      	beq.n	800f632 <I2C_Master_ADDR+0x268>
 800f62c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f62e:	2b20      	cmp	r3, #32
 800f630:	d107      	bne.n	800f642 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800f632:	687b      	ldr	r3, [r7, #4]
 800f634:	681b      	ldr	r3, [r3, #0]
 800f636:	685a      	ldr	r2, [r3, #4]
 800f638:	687b      	ldr	r3, [r7, #4]
 800f63a:	681b      	ldr	r3, [r3, #0]
 800f63c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800f640:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800f642:	2300      	movs	r3, #0
 800f644:	617b      	str	r3, [r7, #20]
 800f646:	687b      	ldr	r3, [r7, #4]
 800f648:	681b      	ldr	r3, [r3, #0]
 800f64a:	695b      	ldr	r3, [r3, #20]
 800f64c:	617b      	str	r3, [r7, #20]
 800f64e:	687b      	ldr	r3, [r7, #4]
 800f650:	681b      	ldr	r3, [r3, #0]
 800f652:	699b      	ldr	r3, [r3, #24]
 800f654:	617b      	str	r3, [r7, #20]
 800f656:	697b      	ldr	r3, [r7, #20]
 800f658:	e032      	b.n	800f6c0 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800f65a:	687b      	ldr	r3, [r7, #4]
 800f65c:	681b      	ldr	r3, [r3, #0]
 800f65e:	681a      	ldr	r2, [r3, #0]
 800f660:	687b      	ldr	r3, [r7, #4]
 800f662:	681b      	ldr	r3, [r3, #0]
 800f664:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800f668:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800f66a:	687b      	ldr	r3, [r7, #4]
 800f66c:	681b      	ldr	r3, [r3, #0]
 800f66e:	685b      	ldr	r3, [r3, #4]
 800f670:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800f674:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800f678:	d117      	bne.n	800f6aa <I2C_Master_ADDR+0x2e0>
 800f67a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f67c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800f680:	d00b      	beq.n	800f69a <I2C_Master_ADDR+0x2d0>
 800f682:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f684:	2b01      	cmp	r3, #1
 800f686:	d008      	beq.n	800f69a <I2C_Master_ADDR+0x2d0>
 800f688:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f68a:	2b08      	cmp	r3, #8
 800f68c:	d005      	beq.n	800f69a <I2C_Master_ADDR+0x2d0>
 800f68e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f690:	2b10      	cmp	r3, #16
 800f692:	d002      	beq.n	800f69a <I2C_Master_ADDR+0x2d0>
 800f694:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f696:	2b20      	cmp	r3, #32
 800f698:	d107      	bne.n	800f6aa <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800f69a:	687b      	ldr	r3, [r7, #4]
 800f69c:	681b      	ldr	r3, [r3, #0]
 800f69e:	685a      	ldr	r2, [r3, #4]
 800f6a0:	687b      	ldr	r3, [r7, #4]
 800f6a2:	681b      	ldr	r3, [r3, #0]
 800f6a4:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800f6a8:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800f6aa:	2300      	movs	r3, #0
 800f6ac:	613b      	str	r3, [r7, #16]
 800f6ae:	687b      	ldr	r3, [r7, #4]
 800f6b0:	681b      	ldr	r3, [r3, #0]
 800f6b2:	695b      	ldr	r3, [r3, #20]
 800f6b4:	613b      	str	r3, [r7, #16]
 800f6b6:	687b      	ldr	r3, [r7, #4]
 800f6b8:	681b      	ldr	r3, [r3, #0]
 800f6ba:	699b      	ldr	r3, [r3, #24]
 800f6bc:	613b      	str	r3, [r7, #16]
 800f6be:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 800f6c0:	687b      	ldr	r3, [r7, #4]
 800f6c2:	2200      	movs	r2, #0
 800f6c4:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 800f6c6:	e00b      	b.n	800f6e0 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800f6c8:	2300      	movs	r3, #0
 800f6ca:	60fb      	str	r3, [r7, #12]
 800f6cc:	687b      	ldr	r3, [r7, #4]
 800f6ce:	681b      	ldr	r3, [r3, #0]
 800f6d0:	695b      	ldr	r3, [r3, #20]
 800f6d2:	60fb      	str	r3, [r7, #12]
 800f6d4:	687b      	ldr	r3, [r7, #4]
 800f6d6:	681b      	ldr	r3, [r3, #0]
 800f6d8:	699b      	ldr	r3, [r3, #24]
 800f6da:	60fb      	str	r3, [r7, #12]
 800f6dc:	68fb      	ldr	r3, [r7, #12]
}
 800f6de:	e7ff      	b.n	800f6e0 <I2C_Master_ADDR+0x316>
 800f6e0:	bf00      	nop
 800f6e2:	3744      	adds	r7, #68	@ 0x44
 800f6e4:	46bd      	mov	sp, r7
 800f6e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6ea:	4770      	bx	lr

0800f6ec <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800f6ec:	b580      	push	{r7, lr}
 800f6ee:	b084      	sub	sp, #16
 800f6f0:	af00      	add	r7, sp, #0
 800f6f2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800f6f4:	687b      	ldr	r3, [r7, #4]
 800f6f6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800f6fa:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800f6fc:	687b      	ldr	r3, [r7, #4]
 800f6fe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f700:	b29b      	uxth	r3, r3
 800f702:	2b00      	cmp	r3, #0
 800f704:	d02b      	beq.n	800f75e <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800f706:	687b      	ldr	r3, [r7, #4]
 800f708:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f70a:	781a      	ldrb	r2, [r3, #0]
 800f70c:	687b      	ldr	r3, [r7, #4]
 800f70e:	681b      	ldr	r3, [r3, #0]
 800f710:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800f712:	687b      	ldr	r3, [r7, #4]
 800f714:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f716:	1c5a      	adds	r2, r3, #1
 800f718:	687b      	ldr	r3, [r7, #4]
 800f71a:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 800f71c:	687b      	ldr	r3, [r7, #4]
 800f71e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f720:	b29b      	uxth	r3, r3
 800f722:	3b01      	subs	r3, #1
 800f724:	b29a      	uxth	r2, r3
 800f726:	687b      	ldr	r3, [r7, #4]
 800f728:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800f72a:	687b      	ldr	r3, [r7, #4]
 800f72c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f72e:	b29b      	uxth	r3, r3
 800f730:	2b00      	cmp	r3, #0
 800f732:	d114      	bne.n	800f75e <I2C_SlaveTransmit_TXE+0x72>
 800f734:	7bfb      	ldrb	r3, [r7, #15]
 800f736:	2b29      	cmp	r3, #41	@ 0x29
 800f738:	d111      	bne.n	800f75e <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800f73a:	687b      	ldr	r3, [r7, #4]
 800f73c:	681b      	ldr	r3, [r3, #0]
 800f73e:	685a      	ldr	r2, [r3, #4]
 800f740:	687b      	ldr	r3, [r7, #4]
 800f742:	681b      	ldr	r3, [r3, #0]
 800f744:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800f748:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800f74a:	687b      	ldr	r3, [r7, #4]
 800f74c:	2221      	movs	r2, #33	@ 0x21
 800f74e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800f750:	687b      	ldr	r3, [r7, #4]
 800f752:	2228      	movs	r2, #40	@ 0x28
 800f754:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 800f758:	6878      	ldr	r0, [r7, #4]
 800f75a:	f7ff f9f1 	bl	800eb40 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800f75e:	bf00      	nop
 800f760:	3710      	adds	r7, #16
 800f762:	46bd      	mov	sp, r7
 800f764:	bd80      	pop	{r7, pc}

0800f766 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800f766:	b480      	push	{r7}
 800f768:	b083      	sub	sp, #12
 800f76a:	af00      	add	r7, sp, #0
 800f76c:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800f76e:	687b      	ldr	r3, [r7, #4]
 800f770:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f772:	b29b      	uxth	r3, r3
 800f774:	2b00      	cmp	r3, #0
 800f776:	d011      	beq.n	800f79c <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800f778:	687b      	ldr	r3, [r7, #4]
 800f77a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f77c:	781a      	ldrb	r2, [r3, #0]
 800f77e:	687b      	ldr	r3, [r7, #4]
 800f780:	681b      	ldr	r3, [r3, #0]
 800f782:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800f784:	687b      	ldr	r3, [r7, #4]
 800f786:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f788:	1c5a      	adds	r2, r3, #1
 800f78a:	687b      	ldr	r3, [r7, #4]
 800f78c:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 800f78e:	687b      	ldr	r3, [r7, #4]
 800f790:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f792:	b29b      	uxth	r3, r3
 800f794:	3b01      	subs	r3, #1
 800f796:	b29a      	uxth	r2, r3
 800f798:	687b      	ldr	r3, [r7, #4]
 800f79a:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 800f79c:	bf00      	nop
 800f79e:	370c      	adds	r7, #12
 800f7a0:	46bd      	mov	sp, r7
 800f7a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7a6:	4770      	bx	lr

0800f7a8 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800f7a8:	b580      	push	{r7, lr}
 800f7aa:	b084      	sub	sp, #16
 800f7ac:	af00      	add	r7, sp, #0
 800f7ae:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800f7b0:	687b      	ldr	r3, [r7, #4]
 800f7b2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800f7b6:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800f7b8:	687b      	ldr	r3, [r7, #4]
 800f7ba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f7bc:	b29b      	uxth	r3, r3
 800f7be:	2b00      	cmp	r3, #0
 800f7c0:	d02c      	beq.n	800f81c <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800f7c2:	687b      	ldr	r3, [r7, #4]
 800f7c4:	681b      	ldr	r3, [r3, #0]
 800f7c6:	691a      	ldr	r2, [r3, #16]
 800f7c8:	687b      	ldr	r3, [r7, #4]
 800f7ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f7cc:	b2d2      	uxtb	r2, r2
 800f7ce:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800f7d0:	687b      	ldr	r3, [r7, #4]
 800f7d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f7d4:	1c5a      	adds	r2, r3, #1
 800f7d6:	687b      	ldr	r3, [r7, #4]
 800f7d8:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 800f7da:	687b      	ldr	r3, [r7, #4]
 800f7dc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f7de:	b29b      	uxth	r3, r3
 800f7e0:	3b01      	subs	r3, #1
 800f7e2:	b29a      	uxth	r2, r3
 800f7e4:	687b      	ldr	r3, [r7, #4]
 800f7e6:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800f7e8:	687b      	ldr	r3, [r7, #4]
 800f7ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f7ec:	b29b      	uxth	r3, r3
 800f7ee:	2b00      	cmp	r3, #0
 800f7f0:	d114      	bne.n	800f81c <I2C_SlaveReceive_RXNE+0x74>
 800f7f2:	7bfb      	ldrb	r3, [r7, #15]
 800f7f4:	2b2a      	cmp	r3, #42	@ 0x2a
 800f7f6:	d111      	bne.n	800f81c <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800f7f8:	687b      	ldr	r3, [r7, #4]
 800f7fa:	681b      	ldr	r3, [r3, #0]
 800f7fc:	685a      	ldr	r2, [r3, #4]
 800f7fe:	687b      	ldr	r3, [r7, #4]
 800f800:	681b      	ldr	r3, [r3, #0]
 800f802:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800f806:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800f808:	687b      	ldr	r3, [r7, #4]
 800f80a:	2222      	movs	r2, #34	@ 0x22
 800f80c:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800f80e:	687b      	ldr	r3, [r7, #4]
 800f810:	2228      	movs	r2, #40	@ 0x28
 800f812:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800f816:	6878      	ldr	r0, [r7, #4]
 800f818:	f7fc f99e 	bl	800bb58 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800f81c:	bf00      	nop
 800f81e:	3710      	adds	r7, #16
 800f820:	46bd      	mov	sp, r7
 800f822:	bd80      	pop	{r7, pc}

0800f824 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800f824:	b480      	push	{r7}
 800f826:	b083      	sub	sp, #12
 800f828:	af00      	add	r7, sp, #0
 800f82a:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800f82c:	687b      	ldr	r3, [r7, #4]
 800f82e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f830:	b29b      	uxth	r3, r3
 800f832:	2b00      	cmp	r3, #0
 800f834:	d012      	beq.n	800f85c <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800f836:	687b      	ldr	r3, [r7, #4]
 800f838:	681b      	ldr	r3, [r3, #0]
 800f83a:	691a      	ldr	r2, [r3, #16]
 800f83c:	687b      	ldr	r3, [r7, #4]
 800f83e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f840:	b2d2      	uxtb	r2, r2
 800f842:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800f844:	687b      	ldr	r3, [r7, #4]
 800f846:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f848:	1c5a      	adds	r2, r3, #1
 800f84a:	687b      	ldr	r3, [r7, #4]
 800f84c:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 800f84e:	687b      	ldr	r3, [r7, #4]
 800f850:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f852:	b29b      	uxth	r3, r3
 800f854:	3b01      	subs	r3, #1
 800f856:	b29a      	uxth	r2, r3
 800f858:	687b      	ldr	r3, [r7, #4]
 800f85a:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 800f85c:	bf00      	nop
 800f85e:	370c      	adds	r7, #12
 800f860:	46bd      	mov	sp, r7
 800f862:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f866:	4770      	bx	lr

0800f868 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 800f868:	b580      	push	{r7, lr}
 800f86a:	b084      	sub	sp, #16
 800f86c:	af00      	add	r7, sp, #0
 800f86e:	6078      	str	r0, [r7, #4]
 800f870:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 800f872:	2300      	movs	r3, #0
 800f874:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800f876:	687b      	ldr	r3, [r7, #4]
 800f878:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800f87c:	b2db      	uxtb	r3, r3
 800f87e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800f882:	2b28      	cmp	r3, #40	@ 0x28
 800f884:	d125      	bne.n	800f8d2 <I2C_Slave_ADDR+0x6a>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 800f886:	687b      	ldr	r3, [r7, #4]
 800f888:	681b      	ldr	r3, [r3, #0]
 800f88a:	685a      	ldr	r2, [r3, #4]
 800f88c:	687b      	ldr	r3, [r7, #4]
 800f88e:	681b      	ldr	r3, [r3, #0]
 800f890:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800f894:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 800f896:	683b      	ldr	r3, [r7, #0]
 800f898:	f003 0304 	and.w	r3, r3, #4
 800f89c:	2b00      	cmp	r3, #0
 800f89e:	d101      	bne.n	800f8a4 <I2C_Slave_ADDR+0x3c>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 800f8a0:	2301      	movs	r3, #1
 800f8a2:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 800f8a4:	683b      	ldr	r3, [r7, #0]
 800f8a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800f8aa:	2b00      	cmp	r3, #0
 800f8ac:	d103      	bne.n	800f8b6 <I2C_Slave_ADDR+0x4e>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 800f8ae:	687b      	ldr	r3, [r7, #4]
 800f8b0:	68db      	ldr	r3, [r3, #12]
 800f8b2:	81bb      	strh	r3, [r7, #12]
 800f8b4:	e002      	b.n	800f8bc <I2C_Slave_ADDR+0x54>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 800f8b6:	687b      	ldr	r3, [r7, #4]
 800f8b8:	699b      	ldr	r3, [r3, #24]
 800f8ba:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800f8bc:	687b      	ldr	r3, [r7, #4]
 800f8be:	2200      	movs	r2, #0
 800f8c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 800f8c4:	89ba      	ldrh	r2, [r7, #12]
 800f8c6:	7bfb      	ldrb	r3, [r7, #15]
 800f8c8:	4619      	mov	r1, r3
 800f8ca:	6878      	ldr	r0, [r7, #4]
 800f8cc:	f7ff f942 	bl	800eb54 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800f8d0:	e00e      	b.n	800f8f0 <I2C_Slave_ADDR+0x88>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800f8d2:	2300      	movs	r3, #0
 800f8d4:	60bb      	str	r3, [r7, #8]
 800f8d6:	687b      	ldr	r3, [r7, #4]
 800f8d8:	681b      	ldr	r3, [r3, #0]
 800f8da:	695b      	ldr	r3, [r3, #20]
 800f8dc:	60bb      	str	r3, [r7, #8]
 800f8de:	687b      	ldr	r3, [r7, #4]
 800f8e0:	681b      	ldr	r3, [r3, #0]
 800f8e2:	699b      	ldr	r3, [r3, #24]
 800f8e4:	60bb      	str	r3, [r7, #8]
 800f8e6:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 800f8e8:	687b      	ldr	r3, [r7, #4]
 800f8ea:	2200      	movs	r2, #0
 800f8ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 800f8f0:	bf00      	nop
 800f8f2:	3710      	adds	r7, #16
 800f8f4:	46bd      	mov	sp, r7
 800f8f6:	bd80      	pop	{r7, pc}

0800f8f8 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 800f8f8:	b580      	push	{r7, lr}
 800f8fa:	b084      	sub	sp, #16
 800f8fc:	af00      	add	r7, sp, #0
 800f8fe:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800f900:	687b      	ldr	r3, [r7, #4]
 800f902:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800f906:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800f908:	687b      	ldr	r3, [r7, #4]
 800f90a:	681b      	ldr	r3, [r3, #0]
 800f90c:	685a      	ldr	r2, [r3, #4]
 800f90e:	687b      	ldr	r3, [r7, #4]
 800f910:	681b      	ldr	r3, [r3, #0]
 800f912:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800f916:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 800f918:	2300      	movs	r3, #0
 800f91a:	60bb      	str	r3, [r7, #8]
 800f91c:	687b      	ldr	r3, [r7, #4]
 800f91e:	681b      	ldr	r3, [r3, #0]
 800f920:	695b      	ldr	r3, [r3, #20]
 800f922:	60bb      	str	r3, [r7, #8]
 800f924:	687b      	ldr	r3, [r7, #4]
 800f926:	681b      	ldr	r3, [r3, #0]
 800f928:	681a      	ldr	r2, [r3, #0]
 800f92a:	687b      	ldr	r3, [r7, #4]
 800f92c:	681b      	ldr	r3, [r3, #0]
 800f92e:	f042 0201 	orr.w	r2, r2, #1
 800f932:	601a      	str	r2, [r3, #0]
 800f934:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800f936:	687b      	ldr	r3, [r7, #4]
 800f938:	681b      	ldr	r3, [r3, #0]
 800f93a:	681a      	ldr	r2, [r3, #0]
 800f93c:	687b      	ldr	r3, [r7, #4]
 800f93e:	681b      	ldr	r3, [r3, #0]
 800f940:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800f944:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800f946:	687b      	ldr	r3, [r7, #4]
 800f948:	681b      	ldr	r3, [r3, #0]
 800f94a:	685b      	ldr	r3, [r3, #4]
 800f94c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800f950:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800f954:	d172      	bne.n	800fa3c <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800f956:	7bfb      	ldrb	r3, [r7, #15]
 800f958:	2b22      	cmp	r3, #34	@ 0x22
 800f95a:	d002      	beq.n	800f962 <I2C_Slave_STOPF+0x6a>
 800f95c:	7bfb      	ldrb	r3, [r7, #15]
 800f95e:	2b2a      	cmp	r3, #42	@ 0x2a
 800f960:	d135      	bne.n	800f9ce <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 800f962:	687b      	ldr	r3, [r7, #4]
 800f964:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f966:	681b      	ldr	r3, [r3, #0]
 800f968:	685b      	ldr	r3, [r3, #4]
 800f96a:	b29a      	uxth	r2, r3
 800f96c:	687b      	ldr	r3, [r7, #4]
 800f96e:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 800f970:	687b      	ldr	r3, [r7, #4]
 800f972:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f974:	b29b      	uxth	r3, r3
 800f976:	2b00      	cmp	r3, #0
 800f978:	d005      	beq.n	800f986 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800f97a:	687b      	ldr	r3, [r7, #4]
 800f97c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f97e:	f043 0204 	orr.w	r2, r3, #4
 800f982:	687b      	ldr	r3, [r7, #4]
 800f984:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800f986:	687b      	ldr	r3, [r7, #4]
 800f988:	681b      	ldr	r3, [r3, #0]
 800f98a:	685a      	ldr	r2, [r3, #4]
 800f98c:	687b      	ldr	r3, [r7, #4]
 800f98e:	681b      	ldr	r3, [r3, #0]
 800f990:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800f994:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800f996:	687b      	ldr	r3, [r7, #4]
 800f998:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f99a:	4618      	mov	r0, r3
 800f99c:	f7fd fe50 	bl	800d640 <HAL_DMA_GetState>
 800f9a0:	4603      	mov	r3, r0
 800f9a2:	2b01      	cmp	r3, #1
 800f9a4:	d049      	beq.n	800fa3a <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800f9a6:	687b      	ldr	r3, [r7, #4]
 800f9a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f9aa:	4a69      	ldr	r2, [pc, #420]	@ (800fb50 <I2C_Slave_STOPF+0x258>)
 800f9ac:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800f9ae:	687b      	ldr	r3, [r7, #4]
 800f9b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f9b2:	4618      	mov	r0, r3
 800f9b4:	f7fd fc98 	bl	800d2e8 <HAL_DMA_Abort_IT>
 800f9b8:	4603      	mov	r3, r0
 800f9ba:	2b00      	cmp	r3, #0
 800f9bc:	d03d      	beq.n	800fa3a <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800f9be:	687b      	ldr	r3, [r7, #4]
 800f9c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f9c2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800f9c4:	687a      	ldr	r2, [r7, #4]
 800f9c6:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800f9c8:	4610      	mov	r0, r2
 800f9ca:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800f9cc:	e035      	b.n	800fa3a <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 800f9ce:	687b      	ldr	r3, [r7, #4]
 800f9d0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f9d2:	681b      	ldr	r3, [r3, #0]
 800f9d4:	685b      	ldr	r3, [r3, #4]
 800f9d6:	b29a      	uxth	r2, r3
 800f9d8:	687b      	ldr	r3, [r7, #4]
 800f9da:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 800f9dc:	687b      	ldr	r3, [r7, #4]
 800f9de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f9e0:	b29b      	uxth	r3, r3
 800f9e2:	2b00      	cmp	r3, #0
 800f9e4:	d005      	beq.n	800f9f2 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800f9e6:	687b      	ldr	r3, [r7, #4]
 800f9e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f9ea:	f043 0204 	orr.w	r2, r3, #4
 800f9ee:	687b      	ldr	r3, [r7, #4]
 800f9f0:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800f9f2:	687b      	ldr	r3, [r7, #4]
 800f9f4:	681b      	ldr	r3, [r3, #0]
 800f9f6:	685a      	ldr	r2, [r3, #4]
 800f9f8:	687b      	ldr	r3, [r7, #4]
 800f9fa:	681b      	ldr	r3, [r3, #0]
 800f9fc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800fa00:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800fa02:	687b      	ldr	r3, [r7, #4]
 800fa04:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800fa06:	4618      	mov	r0, r3
 800fa08:	f7fd fe1a 	bl	800d640 <HAL_DMA_GetState>
 800fa0c:	4603      	mov	r3, r0
 800fa0e:	2b01      	cmp	r3, #1
 800fa10:	d014      	beq.n	800fa3c <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800fa12:	687b      	ldr	r3, [r7, #4]
 800fa14:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800fa16:	4a4e      	ldr	r2, [pc, #312]	@ (800fb50 <I2C_Slave_STOPF+0x258>)
 800fa18:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800fa1a:	687b      	ldr	r3, [r7, #4]
 800fa1c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800fa1e:	4618      	mov	r0, r3
 800fa20:	f7fd fc62 	bl	800d2e8 <HAL_DMA_Abort_IT>
 800fa24:	4603      	mov	r3, r0
 800fa26:	2b00      	cmp	r3, #0
 800fa28:	d008      	beq.n	800fa3c <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800fa2a:	687b      	ldr	r3, [r7, #4]
 800fa2c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800fa2e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800fa30:	687a      	ldr	r2, [r7, #4]
 800fa32:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800fa34:	4610      	mov	r0, r2
 800fa36:	4798      	blx	r3
 800fa38:	e000      	b.n	800fa3c <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800fa3a:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800fa3c:	687b      	ldr	r3, [r7, #4]
 800fa3e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800fa40:	b29b      	uxth	r3, r3
 800fa42:	2b00      	cmp	r3, #0
 800fa44:	d03e      	beq.n	800fac4 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800fa46:	687b      	ldr	r3, [r7, #4]
 800fa48:	681b      	ldr	r3, [r3, #0]
 800fa4a:	695b      	ldr	r3, [r3, #20]
 800fa4c:	f003 0304 	and.w	r3, r3, #4
 800fa50:	2b04      	cmp	r3, #4
 800fa52:	d112      	bne.n	800fa7a <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800fa54:	687b      	ldr	r3, [r7, #4]
 800fa56:	681b      	ldr	r3, [r3, #0]
 800fa58:	691a      	ldr	r2, [r3, #16]
 800fa5a:	687b      	ldr	r3, [r7, #4]
 800fa5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fa5e:	b2d2      	uxtb	r2, r2
 800fa60:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800fa62:	687b      	ldr	r3, [r7, #4]
 800fa64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fa66:	1c5a      	adds	r2, r3, #1
 800fa68:	687b      	ldr	r3, [r7, #4]
 800fa6a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800fa6c:	687b      	ldr	r3, [r7, #4]
 800fa6e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800fa70:	b29b      	uxth	r3, r3
 800fa72:	3b01      	subs	r3, #1
 800fa74:	b29a      	uxth	r2, r3
 800fa76:	687b      	ldr	r3, [r7, #4]
 800fa78:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800fa7a:	687b      	ldr	r3, [r7, #4]
 800fa7c:	681b      	ldr	r3, [r3, #0]
 800fa7e:	695b      	ldr	r3, [r3, #20]
 800fa80:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800fa84:	2b40      	cmp	r3, #64	@ 0x40
 800fa86:	d112      	bne.n	800faae <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800fa88:	687b      	ldr	r3, [r7, #4]
 800fa8a:	681b      	ldr	r3, [r3, #0]
 800fa8c:	691a      	ldr	r2, [r3, #16]
 800fa8e:	687b      	ldr	r3, [r7, #4]
 800fa90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fa92:	b2d2      	uxtb	r2, r2
 800fa94:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800fa96:	687b      	ldr	r3, [r7, #4]
 800fa98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fa9a:	1c5a      	adds	r2, r3, #1
 800fa9c:	687b      	ldr	r3, [r7, #4]
 800fa9e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800faa0:	687b      	ldr	r3, [r7, #4]
 800faa2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800faa4:	b29b      	uxth	r3, r3
 800faa6:	3b01      	subs	r3, #1
 800faa8:	b29a      	uxth	r2, r3
 800faaa:	687b      	ldr	r3, [r7, #4]
 800faac:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if (hi2c->XferCount != 0U)
 800faae:	687b      	ldr	r3, [r7, #4]
 800fab0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800fab2:	b29b      	uxth	r3, r3
 800fab4:	2b00      	cmp	r3, #0
 800fab6:	d005      	beq.n	800fac4 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800fab8:	687b      	ldr	r3, [r7, #4]
 800faba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800fabc:	f043 0204 	orr.w	r2, r3, #4
 800fac0:	687b      	ldr	r3, [r7, #4]
 800fac2:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800fac4:	687b      	ldr	r3, [r7, #4]
 800fac6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800fac8:	2b00      	cmp	r3, #0
 800faca:	d003      	beq.n	800fad4 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 800facc:	6878      	ldr	r0, [r7, #4]
 800face:	f000 f8b3 	bl	800fc38 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 800fad2:	e039      	b.n	800fb48 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800fad4:	7bfb      	ldrb	r3, [r7, #15]
 800fad6:	2b2a      	cmp	r3, #42	@ 0x2a
 800fad8:	d109      	bne.n	800faee <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 800fada:	687b      	ldr	r3, [r7, #4]
 800fadc:	2200      	movs	r2, #0
 800fade:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800fae0:	687b      	ldr	r3, [r7, #4]
 800fae2:	2228      	movs	r2, #40	@ 0x28
 800fae4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800fae8:	6878      	ldr	r0, [r7, #4]
 800faea:	f7fc f835 	bl	800bb58 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800faee:	687b      	ldr	r3, [r7, #4]
 800faf0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800faf4:	b2db      	uxtb	r3, r3
 800faf6:	2b28      	cmp	r3, #40	@ 0x28
 800faf8:	d111      	bne.n	800fb1e <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800fafa:	687b      	ldr	r3, [r7, #4]
 800fafc:	4a15      	ldr	r2, [pc, #84]	@ (800fb54 <I2C_Slave_STOPF+0x25c>)
 800fafe:	62da      	str	r2, [r3, #44]	@ 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 800fb00:	687b      	ldr	r3, [r7, #4]
 800fb02:	2200      	movs	r2, #0
 800fb04:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800fb06:	687b      	ldr	r3, [r7, #4]
 800fb08:	2220      	movs	r2, #32
 800fb0a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800fb0e:	687b      	ldr	r3, [r7, #4]
 800fb10:	2200      	movs	r2, #0
 800fb12:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 800fb16:	6878      	ldr	r0, [r7, #4]
 800fb18:	f7ff f82a 	bl	800eb70 <HAL_I2C_ListenCpltCallback>
}
 800fb1c:	e014      	b.n	800fb48 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800fb1e:	687b      	ldr	r3, [r7, #4]
 800fb20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800fb22:	2b22      	cmp	r3, #34	@ 0x22
 800fb24:	d002      	beq.n	800fb2c <I2C_Slave_STOPF+0x234>
 800fb26:	7bfb      	ldrb	r3, [r7, #15]
 800fb28:	2b22      	cmp	r3, #34	@ 0x22
 800fb2a:	d10d      	bne.n	800fb48 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 800fb2c:	687b      	ldr	r3, [r7, #4]
 800fb2e:	2200      	movs	r2, #0
 800fb30:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800fb32:	687b      	ldr	r3, [r7, #4]
 800fb34:	2220      	movs	r2, #32
 800fb36:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800fb3a:	687b      	ldr	r3, [r7, #4]
 800fb3c:	2200      	movs	r2, #0
 800fb3e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 800fb42:	6878      	ldr	r0, [r7, #4]
 800fb44:	f7fc f808 	bl	800bb58 <HAL_I2C_SlaveRxCpltCallback>
}
 800fb48:	bf00      	nop
 800fb4a:	3710      	adds	r7, #16
 800fb4c:	46bd      	mov	sp, r7
 800fb4e:	bd80      	pop	{r7, pc}
 800fb50:	080101c5 	.word	0x080101c5
 800fb54:	ffff0000 	.word	0xffff0000

0800fb58 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 800fb58:	b580      	push	{r7, lr}
 800fb5a:	b084      	sub	sp, #16
 800fb5c:	af00      	add	r7, sp, #0
 800fb5e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800fb60:	687b      	ldr	r3, [r7, #4]
 800fb62:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800fb66:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800fb68:	687b      	ldr	r3, [r7, #4]
 800fb6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fb6c:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 800fb6e:	68bb      	ldr	r3, [r7, #8]
 800fb70:	2b08      	cmp	r3, #8
 800fb72:	d002      	beq.n	800fb7a <I2C_Slave_AF+0x22>
 800fb74:	68bb      	ldr	r3, [r7, #8]
 800fb76:	2b20      	cmp	r3, #32
 800fb78:	d129      	bne.n	800fbce <I2C_Slave_AF+0x76>
 800fb7a:	7bfb      	ldrb	r3, [r7, #15]
 800fb7c:	2b28      	cmp	r3, #40	@ 0x28
 800fb7e:	d126      	bne.n	800fbce <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800fb80:	687b      	ldr	r3, [r7, #4]
 800fb82:	4a2c      	ldr	r2, [pc, #176]	@ (800fc34 <I2C_Slave_AF+0xdc>)
 800fb84:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800fb86:	687b      	ldr	r3, [r7, #4]
 800fb88:	681b      	ldr	r3, [r3, #0]
 800fb8a:	685a      	ldr	r2, [r3, #4]
 800fb8c:	687b      	ldr	r3, [r7, #4]
 800fb8e:	681b      	ldr	r3, [r3, #0]
 800fb90:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800fb94:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800fb96:	687b      	ldr	r3, [r7, #4]
 800fb98:	681b      	ldr	r3, [r3, #0]
 800fb9a:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800fb9e:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800fba0:	687b      	ldr	r3, [r7, #4]
 800fba2:	681b      	ldr	r3, [r3, #0]
 800fba4:	681a      	ldr	r2, [r3, #0]
 800fba6:	687b      	ldr	r3, [r7, #4]
 800fba8:	681b      	ldr	r3, [r3, #0]
 800fbaa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800fbae:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 800fbb0:	687b      	ldr	r3, [r7, #4]
 800fbb2:	2200      	movs	r2, #0
 800fbb4:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800fbb6:	687b      	ldr	r3, [r7, #4]
 800fbb8:	2220      	movs	r2, #32
 800fbba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800fbbe:	687b      	ldr	r3, [r7, #4]
 800fbc0:	2200      	movs	r2, #0
 800fbc2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800fbc6:	6878      	ldr	r0, [r7, #4]
 800fbc8:	f7fe ffd2 	bl	800eb70 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 800fbcc:	e02e      	b.n	800fc2c <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800fbce:	7bfb      	ldrb	r3, [r7, #15]
 800fbd0:	2b21      	cmp	r3, #33	@ 0x21
 800fbd2:	d126      	bne.n	800fc22 <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800fbd4:	687b      	ldr	r3, [r7, #4]
 800fbd6:	4a17      	ldr	r2, [pc, #92]	@ (800fc34 <I2C_Slave_AF+0xdc>)
 800fbd8:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800fbda:	687b      	ldr	r3, [r7, #4]
 800fbdc:	2221      	movs	r2, #33	@ 0x21
 800fbde:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800fbe0:	687b      	ldr	r3, [r7, #4]
 800fbe2:	2220      	movs	r2, #32
 800fbe4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800fbe8:	687b      	ldr	r3, [r7, #4]
 800fbea:	2200      	movs	r2, #0
 800fbec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800fbf0:	687b      	ldr	r3, [r7, #4]
 800fbf2:	681b      	ldr	r3, [r3, #0]
 800fbf4:	685a      	ldr	r2, [r3, #4]
 800fbf6:	687b      	ldr	r3, [r7, #4]
 800fbf8:	681b      	ldr	r3, [r3, #0]
 800fbfa:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800fbfe:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800fc00:	687b      	ldr	r3, [r7, #4]
 800fc02:	681b      	ldr	r3, [r3, #0]
 800fc04:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800fc08:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800fc0a:	687b      	ldr	r3, [r7, #4]
 800fc0c:	681b      	ldr	r3, [r3, #0]
 800fc0e:	681a      	ldr	r2, [r3, #0]
 800fc10:	687b      	ldr	r3, [r7, #4]
 800fc12:	681b      	ldr	r3, [r3, #0]
 800fc14:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800fc18:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800fc1a:	6878      	ldr	r0, [r7, #4]
 800fc1c:	f7fe ff90 	bl	800eb40 <HAL_I2C_SlaveTxCpltCallback>
}
 800fc20:	e004      	b.n	800fc2c <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800fc22:	687b      	ldr	r3, [r7, #4]
 800fc24:	681b      	ldr	r3, [r3, #0]
 800fc26:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800fc2a:	615a      	str	r2, [r3, #20]
}
 800fc2c:	bf00      	nop
 800fc2e:	3710      	adds	r7, #16
 800fc30:	46bd      	mov	sp, r7
 800fc32:	bd80      	pop	{r7, pc}
 800fc34:	ffff0000 	.word	0xffff0000

0800fc38 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 800fc38:	b580      	push	{r7, lr}
 800fc3a:	b084      	sub	sp, #16
 800fc3c:	af00      	add	r7, sp, #0
 800fc3e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800fc40:	687b      	ldr	r3, [r7, #4]
 800fc42:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800fc46:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 800fc48:	687b      	ldr	r3, [r7, #4]
 800fc4a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800fc4e:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800fc50:	7bbb      	ldrb	r3, [r7, #14]
 800fc52:	2b10      	cmp	r3, #16
 800fc54:	d002      	beq.n	800fc5c <I2C_ITError+0x24>
 800fc56:	7bbb      	ldrb	r3, [r7, #14]
 800fc58:	2b40      	cmp	r3, #64	@ 0x40
 800fc5a:	d10a      	bne.n	800fc72 <I2C_ITError+0x3a>
 800fc5c:	7bfb      	ldrb	r3, [r7, #15]
 800fc5e:	2b22      	cmp	r3, #34	@ 0x22
 800fc60:	d107      	bne.n	800fc72 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 800fc62:	687b      	ldr	r3, [r7, #4]
 800fc64:	681b      	ldr	r3, [r3, #0]
 800fc66:	681a      	ldr	r2, [r3, #0]
 800fc68:	687b      	ldr	r3, [r7, #4]
 800fc6a:	681b      	ldr	r3, [r3, #0]
 800fc6c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800fc70:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800fc72:	7bfb      	ldrb	r3, [r7, #15]
 800fc74:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800fc78:	2b28      	cmp	r3, #40	@ 0x28
 800fc7a:	d107      	bne.n	800fc8c <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 800fc7c:	687b      	ldr	r3, [r7, #4]
 800fc7e:	2200      	movs	r2, #0
 800fc80:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 800fc82:	687b      	ldr	r3, [r7, #4]
 800fc84:	2228      	movs	r2, #40	@ 0x28
 800fc86:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 800fc8a:	e015      	b.n	800fcb8 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 800fc8c:	687b      	ldr	r3, [r7, #4]
 800fc8e:	681b      	ldr	r3, [r3, #0]
 800fc90:	685b      	ldr	r3, [r3, #4]
 800fc92:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800fc96:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800fc9a:	d00a      	beq.n	800fcb2 <I2C_ITError+0x7a>
 800fc9c:	7bfb      	ldrb	r3, [r7, #15]
 800fc9e:	2b60      	cmp	r3, #96	@ 0x60
 800fca0:	d007      	beq.n	800fcb2 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 800fca2:	687b      	ldr	r3, [r7, #4]
 800fca4:	2220      	movs	r2, #32
 800fca6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800fcaa:	687b      	ldr	r3, [r7, #4]
 800fcac:	2200      	movs	r2, #0
 800fcae:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 800fcb2:	687b      	ldr	r3, [r7, #4]
 800fcb4:	2200      	movs	r2, #0
 800fcb6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800fcb8:	687b      	ldr	r3, [r7, #4]
 800fcba:	681b      	ldr	r3, [r3, #0]
 800fcbc:	685b      	ldr	r3, [r3, #4]
 800fcbe:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800fcc2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800fcc6:	d162      	bne.n	800fd8e <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 800fcc8:	687b      	ldr	r3, [r7, #4]
 800fcca:	681b      	ldr	r3, [r3, #0]
 800fccc:	685a      	ldr	r2, [r3, #4]
 800fcce:	687b      	ldr	r3, [r7, #4]
 800fcd0:	681b      	ldr	r3, [r3, #0]
 800fcd2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800fcd6:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 800fcd8:	687b      	ldr	r3, [r7, #4]
 800fcda:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800fcdc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800fce0:	b2db      	uxtb	r3, r3
 800fce2:	2b01      	cmp	r3, #1
 800fce4:	d020      	beq.n	800fd28 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800fce6:	687b      	ldr	r3, [r7, #4]
 800fce8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800fcea:	4a6a      	ldr	r2, [pc, #424]	@ (800fe94 <I2C_ITError+0x25c>)
 800fcec:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800fcee:	687b      	ldr	r3, [r7, #4]
 800fcf0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800fcf2:	4618      	mov	r0, r3
 800fcf4:	f7fd faf8 	bl	800d2e8 <HAL_DMA_Abort_IT>
 800fcf8:	4603      	mov	r3, r0
 800fcfa:	2b00      	cmp	r3, #0
 800fcfc:	f000 8089 	beq.w	800fe12 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800fd00:	687b      	ldr	r3, [r7, #4]
 800fd02:	681b      	ldr	r3, [r3, #0]
 800fd04:	681a      	ldr	r2, [r3, #0]
 800fd06:	687b      	ldr	r3, [r7, #4]
 800fd08:	681b      	ldr	r3, [r3, #0]
 800fd0a:	f022 0201 	bic.w	r2, r2, #1
 800fd0e:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800fd10:	687b      	ldr	r3, [r7, #4]
 800fd12:	2220      	movs	r2, #32
 800fd14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800fd18:	687b      	ldr	r3, [r7, #4]
 800fd1a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800fd1c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800fd1e:	687a      	ldr	r2, [r7, #4]
 800fd20:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800fd22:	4610      	mov	r0, r2
 800fd24:	4798      	blx	r3
 800fd26:	e074      	b.n	800fe12 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800fd28:	687b      	ldr	r3, [r7, #4]
 800fd2a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fd2c:	4a59      	ldr	r2, [pc, #356]	@ (800fe94 <I2C_ITError+0x25c>)
 800fd2e:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800fd30:	687b      	ldr	r3, [r7, #4]
 800fd32:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fd34:	4618      	mov	r0, r3
 800fd36:	f7fd fad7 	bl	800d2e8 <HAL_DMA_Abort_IT>
 800fd3a:	4603      	mov	r3, r0
 800fd3c:	2b00      	cmp	r3, #0
 800fd3e:	d068      	beq.n	800fe12 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800fd40:	687b      	ldr	r3, [r7, #4]
 800fd42:	681b      	ldr	r3, [r3, #0]
 800fd44:	695b      	ldr	r3, [r3, #20]
 800fd46:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800fd4a:	2b40      	cmp	r3, #64	@ 0x40
 800fd4c:	d10b      	bne.n	800fd66 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800fd4e:	687b      	ldr	r3, [r7, #4]
 800fd50:	681b      	ldr	r3, [r3, #0]
 800fd52:	691a      	ldr	r2, [r3, #16]
 800fd54:	687b      	ldr	r3, [r7, #4]
 800fd56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fd58:	b2d2      	uxtb	r2, r2
 800fd5a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800fd5c:	687b      	ldr	r3, [r7, #4]
 800fd5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fd60:	1c5a      	adds	r2, r3, #1
 800fd62:	687b      	ldr	r3, [r7, #4]
 800fd64:	625a      	str	r2, [r3, #36]	@ 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800fd66:	687b      	ldr	r3, [r7, #4]
 800fd68:	681b      	ldr	r3, [r3, #0]
 800fd6a:	681a      	ldr	r2, [r3, #0]
 800fd6c:	687b      	ldr	r3, [r7, #4]
 800fd6e:	681b      	ldr	r3, [r3, #0]
 800fd70:	f022 0201 	bic.w	r2, r2, #1
 800fd74:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800fd76:	687b      	ldr	r3, [r7, #4]
 800fd78:	2220      	movs	r2, #32
 800fd7a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800fd7e:	687b      	ldr	r3, [r7, #4]
 800fd80:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fd82:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800fd84:	687a      	ldr	r2, [r7, #4]
 800fd86:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800fd88:	4610      	mov	r0, r2
 800fd8a:	4798      	blx	r3
 800fd8c:	e041      	b.n	800fe12 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 800fd8e:	687b      	ldr	r3, [r7, #4]
 800fd90:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800fd94:	b2db      	uxtb	r3, r3
 800fd96:	2b60      	cmp	r3, #96	@ 0x60
 800fd98:	d125      	bne.n	800fde6 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800fd9a:	687b      	ldr	r3, [r7, #4]
 800fd9c:	2220      	movs	r2, #32
 800fd9e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800fda2:	687b      	ldr	r3, [r7, #4]
 800fda4:	2200      	movs	r2, #0
 800fda6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800fda8:	687b      	ldr	r3, [r7, #4]
 800fdaa:	681b      	ldr	r3, [r3, #0]
 800fdac:	695b      	ldr	r3, [r3, #20]
 800fdae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800fdb2:	2b40      	cmp	r3, #64	@ 0x40
 800fdb4:	d10b      	bne.n	800fdce <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800fdb6:	687b      	ldr	r3, [r7, #4]
 800fdb8:	681b      	ldr	r3, [r3, #0]
 800fdba:	691a      	ldr	r2, [r3, #16]
 800fdbc:	687b      	ldr	r3, [r7, #4]
 800fdbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fdc0:	b2d2      	uxtb	r2, r2
 800fdc2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800fdc4:	687b      	ldr	r3, [r7, #4]
 800fdc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fdc8:	1c5a      	adds	r2, r3, #1
 800fdca:	687b      	ldr	r3, [r7, #4]
 800fdcc:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 800fdce:	687b      	ldr	r3, [r7, #4]
 800fdd0:	681b      	ldr	r3, [r3, #0]
 800fdd2:	681a      	ldr	r2, [r3, #0]
 800fdd4:	687b      	ldr	r3, [r7, #4]
 800fdd6:	681b      	ldr	r3, [r3, #0]
 800fdd8:	f022 0201 	bic.w	r2, r2, #1
 800fddc:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800fdde:	6878      	ldr	r0, [r7, #4]
 800fde0:	f7fe feee 	bl	800ebc0 <HAL_I2C_AbortCpltCallback>
 800fde4:	e015      	b.n	800fe12 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800fde6:	687b      	ldr	r3, [r7, #4]
 800fde8:	681b      	ldr	r3, [r3, #0]
 800fdea:	695b      	ldr	r3, [r3, #20]
 800fdec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800fdf0:	2b40      	cmp	r3, #64	@ 0x40
 800fdf2:	d10b      	bne.n	800fe0c <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800fdf4:	687b      	ldr	r3, [r7, #4]
 800fdf6:	681b      	ldr	r3, [r3, #0]
 800fdf8:	691a      	ldr	r2, [r3, #16]
 800fdfa:	687b      	ldr	r3, [r7, #4]
 800fdfc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fdfe:	b2d2      	uxtb	r2, r2
 800fe00:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800fe02:	687b      	ldr	r3, [r7, #4]
 800fe04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fe06:	1c5a      	adds	r2, r3, #1
 800fe08:	687b      	ldr	r3, [r7, #4]
 800fe0a:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 800fe0c:	6878      	ldr	r0, [r7, #4]
 800fe0e:	f7fe fecd 	bl	800ebac <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 800fe12:	687b      	ldr	r3, [r7, #4]
 800fe14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800fe16:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 800fe18:	68bb      	ldr	r3, [r7, #8]
 800fe1a:	f003 0301 	and.w	r3, r3, #1
 800fe1e:	2b00      	cmp	r3, #0
 800fe20:	d10e      	bne.n	800fe40 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800fe22:	68bb      	ldr	r3, [r7, #8]
 800fe24:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 800fe28:	2b00      	cmp	r3, #0
 800fe2a:	d109      	bne.n	800fe40 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800fe2c:	68bb      	ldr	r3, [r7, #8]
 800fe2e:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800fe32:	2b00      	cmp	r3, #0
 800fe34:	d104      	bne.n	800fe40 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 800fe36:	68bb      	ldr	r3, [r7, #8]
 800fe38:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800fe3c:	2b00      	cmp	r3, #0
 800fe3e:	d007      	beq.n	800fe50 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800fe40:	687b      	ldr	r3, [r7, #4]
 800fe42:	681b      	ldr	r3, [r3, #0]
 800fe44:	685a      	ldr	r2, [r3, #4]
 800fe46:	687b      	ldr	r3, [r7, #4]
 800fe48:	681b      	ldr	r3, [r3, #0]
 800fe4a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800fe4e:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 800fe50:	687b      	ldr	r3, [r7, #4]
 800fe52:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800fe56:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 800fe58:	687b      	ldr	r3, [r7, #4]
 800fe5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800fe5c:	f003 0304 	and.w	r3, r3, #4
 800fe60:	2b04      	cmp	r3, #4
 800fe62:	d113      	bne.n	800fe8c <I2C_ITError+0x254>
 800fe64:	7bfb      	ldrb	r3, [r7, #15]
 800fe66:	2b28      	cmp	r3, #40	@ 0x28
 800fe68:	d110      	bne.n	800fe8c <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800fe6a:	687b      	ldr	r3, [r7, #4]
 800fe6c:	4a0a      	ldr	r2, [pc, #40]	@ (800fe98 <I2C_ITError+0x260>)
 800fe6e:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 800fe70:	687b      	ldr	r3, [r7, #4]
 800fe72:	2200      	movs	r2, #0
 800fe74:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800fe76:	687b      	ldr	r3, [r7, #4]
 800fe78:	2220      	movs	r2, #32
 800fe7a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800fe7e:	687b      	ldr	r3, [r7, #4]
 800fe80:	2200      	movs	r2, #0
 800fe82:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800fe86:	6878      	ldr	r0, [r7, #4]
 800fe88:	f7fe fe72 	bl	800eb70 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800fe8c:	bf00      	nop
 800fe8e:	3710      	adds	r7, #16
 800fe90:	46bd      	mov	sp, r7
 800fe92:	bd80      	pop	{r7, pc}
 800fe94:	080101c5 	.word	0x080101c5
 800fe98:	ffff0000 	.word	0xffff0000

0800fe9c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800fe9c:	b580      	push	{r7, lr}
 800fe9e:	b088      	sub	sp, #32
 800fea0:	af02      	add	r7, sp, #8
 800fea2:	60f8      	str	r0, [r7, #12]
 800fea4:	607a      	str	r2, [r7, #4]
 800fea6:	603b      	str	r3, [r7, #0]
 800fea8:	460b      	mov	r3, r1
 800feaa:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800feac:	68fb      	ldr	r3, [r7, #12]
 800feae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800feb0:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800feb2:	697b      	ldr	r3, [r7, #20]
 800feb4:	2b08      	cmp	r3, #8
 800feb6:	d006      	beq.n	800fec6 <I2C_MasterRequestWrite+0x2a>
 800feb8:	697b      	ldr	r3, [r7, #20]
 800feba:	2b01      	cmp	r3, #1
 800febc:	d003      	beq.n	800fec6 <I2C_MasterRequestWrite+0x2a>
 800febe:	697b      	ldr	r3, [r7, #20]
 800fec0:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800fec4:	d108      	bne.n	800fed8 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800fec6:	68fb      	ldr	r3, [r7, #12]
 800fec8:	681b      	ldr	r3, [r3, #0]
 800feca:	681a      	ldr	r2, [r3, #0]
 800fecc:	68fb      	ldr	r3, [r7, #12]
 800fece:	681b      	ldr	r3, [r3, #0]
 800fed0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800fed4:	601a      	str	r2, [r3, #0]
 800fed6:	e00b      	b.n	800fef0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800fed8:	68fb      	ldr	r3, [r7, #12]
 800feda:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800fedc:	2b12      	cmp	r3, #18
 800fede:	d107      	bne.n	800fef0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800fee0:	68fb      	ldr	r3, [r7, #12]
 800fee2:	681b      	ldr	r3, [r3, #0]
 800fee4:	681a      	ldr	r2, [r3, #0]
 800fee6:	68fb      	ldr	r3, [r7, #12]
 800fee8:	681b      	ldr	r3, [r3, #0]
 800feea:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800feee:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800fef0:	683b      	ldr	r3, [r7, #0]
 800fef2:	9300      	str	r3, [sp, #0]
 800fef4:	687b      	ldr	r3, [r7, #4]
 800fef6:	2200      	movs	r2, #0
 800fef8:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800fefc:	68f8      	ldr	r0, [r7, #12]
 800fefe:	f000 fa09 	bl	8010314 <I2C_WaitOnFlagUntilTimeout>
 800ff02:	4603      	mov	r3, r0
 800ff04:	2b00      	cmp	r3, #0
 800ff06:	d00d      	beq.n	800ff24 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800ff08:	68fb      	ldr	r3, [r7, #12]
 800ff0a:	681b      	ldr	r3, [r3, #0]
 800ff0c:	681b      	ldr	r3, [r3, #0]
 800ff0e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ff12:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ff16:	d103      	bne.n	800ff20 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800ff18:	68fb      	ldr	r3, [r7, #12]
 800ff1a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800ff1e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800ff20:	2303      	movs	r3, #3
 800ff22:	e035      	b.n	800ff90 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800ff24:	68fb      	ldr	r3, [r7, #12]
 800ff26:	691b      	ldr	r3, [r3, #16]
 800ff28:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800ff2c:	d108      	bne.n	800ff40 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800ff2e:	897b      	ldrh	r3, [r7, #10]
 800ff30:	b2db      	uxtb	r3, r3
 800ff32:	461a      	mov	r2, r3
 800ff34:	68fb      	ldr	r3, [r7, #12]
 800ff36:	681b      	ldr	r3, [r3, #0]
 800ff38:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800ff3c:	611a      	str	r2, [r3, #16]
 800ff3e:	e01b      	b.n	800ff78 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800ff40:	897b      	ldrh	r3, [r7, #10]
 800ff42:	11db      	asrs	r3, r3, #7
 800ff44:	b2db      	uxtb	r3, r3
 800ff46:	f003 0306 	and.w	r3, r3, #6
 800ff4a:	b2db      	uxtb	r3, r3
 800ff4c:	f063 030f 	orn	r3, r3, #15
 800ff50:	b2da      	uxtb	r2, r3
 800ff52:	68fb      	ldr	r3, [r7, #12]
 800ff54:	681b      	ldr	r3, [r3, #0]
 800ff56:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800ff58:	683b      	ldr	r3, [r7, #0]
 800ff5a:	687a      	ldr	r2, [r7, #4]
 800ff5c:	490e      	ldr	r1, [pc, #56]	@ (800ff98 <I2C_MasterRequestWrite+0xfc>)
 800ff5e:	68f8      	ldr	r0, [r7, #12]
 800ff60:	f000 fa2f 	bl	80103c2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800ff64:	4603      	mov	r3, r0
 800ff66:	2b00      	cmp	r3, #0
 800ff68:	d001      	beq.n	800ff6e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800ff6a:	2301      	movs	r3, #1
 800ff6c:	e010      	b.n	800ff90 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800ff6e:	897b      	ldrh	r3, [r7, #10]
 800ff70:	b2da      	uxtb	r2, r3
 800ff72:	68fb      	ldr	r3, [r7, #12]
 800ff74:	681b      	ldr	r3, [r3, #0]
 800ff76:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800ff78:	683b      	ldr	r3, [r7, #0]
 800ff7a:	687a      	ldr	r2, [r7, #4]
 800ff7c:	4907      	ldr	r1, [pc, #28]	@ (800ff9c <I2C_MasterRequestWrite+0x100>)
 800ff7e:	68f8      	ldr	r0, [r7, #12]
 800ff80:	f000 fa1f 	bl	80103c2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800ff84:	4603      	mov	r3, r0
 800ff86:	2b00      	cmp	r3, #0
 800ff88:	d001      	beq.n	800ff8e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800ff8a:	2301      	movs	r3, #1
 800ff8c:	e000      	b.n	800ff90 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800ff8e:	2300      	movs	r3, #0
}
 800ff90:	4618      	mov	r0, r3
 800ff92:	3718      	adds	r7, #24
 800ff94:	46bd      	mov	sp, r7
 800ff96:	bd80      	pop	{r7, pc}
 800ff98:	00010008 	.word	0x00010008
 800ff9c:	00010002 	.word	0x00010002

0800ffa0 <I2C_DMAXferCplt>:
  * @brief  DMA I2C process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 800ffa0:	b580      	push	{r7, lr}
 800ffa2:	b086      	sub	sp, #24
 800ffa4:	af00      	add	r7, sp, #0
 800ffa6:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800ffa8:	687b      	ldr	r3, [r7, #4]
 800ffaa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ffac:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800ffae:	697b      	ldr	r3, [r7, #20]
 800ffb0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800ffb4:	74fb      	strb	r3, [r7, #19]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800ffb6:	697b      	ldr	r3, [r7, #20]
 800ffb8:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800ffbc:	74bb      	strb	r3, [r7, #18]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800ffbe:	697b      	ldr	r3, [r7, #20]
 800ffc0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ffc2:	60fb      	str	r3, [r7, #12]

  /* Disable EVT and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800ffc4:	697b      	ldr	r3, [r7, #20]
 800ffc6:	681b      	ldr	r3, [r3, #0]
 800ffc8:	685a      	ldr	r2, [r3, #4]
 800ffca:	697b      	ldr	r3, [r7, #20]
 800ffcc:	681b      	ldr	r3, [r3, #0]
 800ffce:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 800ffd2:	605a      	str	r2, [r3, #4]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800ffd4:	697b      	ldr	r3, [r7, #20]
 800ffd6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ffd8:	2b00      	cmp	r3, #0
 800ffda:	d003      	beq.n	800ffe4 <I2C_DMAXferCplt+0x44>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800ffdc:	697b      	ldr	r3, [r7, #20]
 800ffde:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ffe0:	2200      	movs	r2, #0
 800ffe2:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 800ffe4:	697b      	ldr	r3, [r7, #20]
 800ffe6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ffe8:	2b00      	cmp	r3, #0
 800ffea:	d003      	beq.n	800fff4 <I2C_DMAXferCplt+0x54>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800ffec:	697b      	ldr	r3, [r7, #20]
 800ffee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fff0:	2200      	movs	r2, #0
 800fff2:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  if ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_TX) == (uint32_t)HAL_I2C_STATE_BUSY_TX) || ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_RX) == (uint32_t)HAL_I2C_STATE_BUSY_RX) && (CurrentMode == HAL_I2C_MODE_SLAVE)))
 800fff4:	7cfb      	ldrb	r3, [r7, #19]
 800fff6:	f003 0321 	and.w	r3, r3, #33	@ 0x21
 800fffa:	2b21      	cmp	r3, #33	@ 0x21
 800fffc:	d007      	beq.n	801000e <I2C_DMAXferCplt+0x6e>
 800fffe:	7cfb      	ldrb	r3, [r7, #19]
 8010000:	f003 0322 	and.w	r3, r3, #34	@ 0x22
 8010004:	2b22      	cmp	r3, #34	@ 0x22
 8010006:	d131      	bne.n	801006c <I2C_DMAXferCplt+0xcc>
 8010008:	7cbb      	ldrb	r3, [r7, #18]
 801000a:	2b20      	cmp	r3, #32
 801000c:	d12e      	bne.n	801006c <I2C_DMAXferCplt+0xcc>
  {
    /* Disable DMA Request */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 801000e:	697b      	ldr	r3, [r7, #20]
 8010010:	681b      	ldr	r3, [r3, #0]
 8010012:	685a      	ldr	r2, [r3, #4]
 8010014:	697b      	ldr	r3, [r7, #20]
 8010016:	681b      	ldr	r3, [r3, #0]
 8010018:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 801001c:	605a      	str	r2, [r3, #4]

    hi2c->XferCount = 0U;
 801001e:	697b      	ldr	r3, [r7, #20]
 8010020:	2200      	movs	r2, #0
 8010022:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8010024:	7cfb      	ldrb	r3, [r7, #19]
 8010026:	2b29      	cmp	r3, #41	@ 0x29
 8010028:	d10a      	bne.n	8010040 <I2C_DMAXferCplt+0xa0>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 801002a:	697b      	ldr	r3, [r7, #20]
 801002c:	2221      	movs	r2, #33	@ 0x21
 801002e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8010030:	697b      	ldr	r3, [r7, #20]
 8010032:	2228      	movs	r2, #40	@ 0x28
 8010034:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8010038:	6978      	ldr	r0, [r7, #20]
 801003a:	f7fe fd81 	bl	800eb40 <HAL_I2C_SlaveTxCpltCallback>
 801003e:	e00c      	b.n	801005a <I2C_DMAXferCplt+0xba>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8010040:	7cfb      	ldrb	r3, [r7, #19]
 8010042:	2b2a      	cmp	r3, #42	@ 0x2a
 8010044:	d109      	bne.n	801005a <I2C_DMAXferCplt+0xba>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8010046:	697b      	ldr	r3, [r7, #20]
 8010048:	2222      	movs	r2, #34	@ 0x22
 801004a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 801004c:	697b      	ldr	r3, [r7, #20]
 801004e:	2228      	movs	r2, #40	@ 0x28
 8010050:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8010054:	6978      	ldr	r0, [r7, #20]
 8010056:	f7fb fd7f 	bl	800bb58 <HAL_I2C_SlaveRxCpltCallback>
    {
      /* Do nothing */
    }

    /* Enable EVT and ERR interrupt to treat end of transfer in IRQ handler */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 801005a:	697b      	ldr	r3, [r7, #20]
 801005c:	681b      	ldr	r3, [r3, #0]
 801005e:	685a      	ldr	r2, [r3, #4]
 8010060:	697b      	ldr	r3, [r7, #20]
 8010062:	681b      	ldr	r3, [r3, #0]
 8010064:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 8010068:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 801006a:	e06a      	b.n	8010142 <I2C_DMAXferCplt+0x1a2>
  else if (hi2c->Mode != HAL_I2C_MODE_NONE)
 801006c:	697b      	ldr	r3, [r7, #20]
 801006e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8010072:	b2db      	uxtb	r3, r3
 8010074:	2b00      	cmp	r3, #0
 8010076:	d064      	beq.n	8010142 <I2C_DMAXferCplt+0x1a2>
    if (hi2c->XferCount == (uint16_t)1)
 8010078:	697b      	ldr	r3, [r7, #20]
 801007a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801007c:	b29b      	uxth	r3, r3
 801007e:	2b01      	cmp	r3, #1
 8010080:	d107      	bne.n	8010092 <I2C_DMAXferCplt+0xf2>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8010082:	697b      	ldr	r3, [r7, #20]
 8010084:	681b      	ldr	r3, [r3, #0]
 8010086:	681a      	ldr	r2, [r3, #0]
 8010088:	697b      	ldr	r3, [r7, #20]
 801008a:	681b      	ldr	r3, [r3, #0]
 801008c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8010090:	601a      	str	r2, [r3, #0]
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8010092:	697b      	ldr	r3, [r7, #20]
 8010094:	681b      	ldr	r3, [r3, #0]
 8010096:	685a      	ldr	r2, [r3, #4]
 8010098:	697b      	ldr	r3, [r7, #20]
 801009a:	681b      	ldr	r3, [r3, #0]
 801009c:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 80100a0:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_OTHER_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 80100a2:	68fb      	ldr	r3, [r7, #12]
 80100a4:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80100a8:	d009      	beq.n	80100be <I2C_DMAXferCplt+0x11e>
 80100aa:	68fb      	ldr	r3, [r7, #12]
 80100ac:	2b08      	cmp	r3, #8
 80100ae:	d006      	beq.n	80100be <I2C_DMAXferCplt+0x11e>
 80100b0:	68fb      	ldr	r3, [r7, #12]
 80100b2:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 80100b6:	d002      	beq.n	80100be <I2C_DMAXferCplt+0x11e>
 80100b8:	68fb      	ldr	r3, [r7, #12]
 80100ba:	2b20      	cmp	r3, #32
 80100bc:	d107      	bne.n	80100ce <I2C_DMAXferCplt+0x12e>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80100be:	697b      	ldr	r3, [r7, #20]
 80100c0:	681b      	ldr	r3, [r3, #0]
 80100c2:	681a      	ldr	r2, [r3, #0]
 80100c4:	697b      	ldr	r3, [r7, #20]
 80100c6:	681b      	ldr	r3, [r3, #0]
 80100c8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80100cc:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80100ce:	697b      	ldr	r3, [r7, #20]
 80100d0:	681b      	ldr	r3, [r3, #0]
 80100d2:	685a      	ldr	r2, [r3, #4]
 80100d4:	697b      	ldr	r3, [r7, #20]
 80100d6:	681b      	ldr	r3, [r3, #0]
 80100d8:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80100dc:	605a      	str	r2, [r3, #4]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80100de:	697b      	ldr	r3, [r7, #20]
 80100e0:	681b      	ldr	r3, [r3, #0]
 80100e2:	685a      	ldr	r2, [r3, #4]
 80100e4:	697b      	ldr	r3, [r7, #20]
 80100e6:	681b      	ldr	r3, [r3, #0]
 80100e8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80100ec:	605a      	str	r2, [r3, #4]
    hi2c->XferCount = 0U;
 80100ee:	697b      	ldr	r3, [r7, #20]
 80100f0:	2200      	movs	r2, #0
 80100f2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80100f4:	697b      	ldr	r3, [r7, #20]
 80100f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80100f8:	2b00      	cmp	r3, #0
 80100fa:	d003      	beq.n	8010104 <I2C_DMAXferCplt+0x164>
      HAL_I2C_ErrorCallback(hi2c);
 80100fc:	6978      	ldr	r0, [r7, #20]
 80100fe:	f7fe fd55 	bl	800ebac <HAL_I2C_ErrorCallback>
}
 8010102:	e01e      	b.n	8010142 <I2C_DMAXferCplt+0x1a2>
      hi2c->State = HAL_I2C_STATE_READY;
 8010104:	697b      	ldr	r3, [r7, #20]
 8010106:	2220      	movs	r2, #32
 8010108:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 801010c:	697b      	ldr	r3, [r7, #20]
 801010e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8010112:	b2db      	uxtb	r3, r3
 8010114:	2b40      	cmp	r3, #64	@ 0x40
 8010116:	d10a      	bne.n	801012e <I2C_DMAXferCplt+0x18e>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8010118:	697b      	ldr	r3, [r7, #20]
 801011a:	2200      	movs	r2, #0
 801011c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 8010120:	697b      	ldr	r3, [r7, #20]
 8010122:	2200      	movs	r2, #0
 8010124:	631a      	str	r2, [r3, #48]	@ 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 8010126:	6978      	ldr	r0, [r7, #20]
 8010128:	f7fe fd36 	bl	800eb98 <HAL_I2C_MemRxCpltCallback>
}
 801012c:	e009      	b.n	8010142 <I2C_DMAXferCplt+0x1a2>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 801012e:	697b      	ldr	r3, [r7, #20]
 8010130:	2200      	movs	r2, #0
 8010132:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8010136:	697b      	ldr	r3, [r7, #20]
 8010138:	2212      	movs	r2, #18
 801013a:	631a      	str	r2, [r3, #48]	@ 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 801013c:	6978      	ldr	r0, [r7, #20]
 801013e:	f7fb fa15 	bl	800b56c <HAL_I2C_MasterRxCpltCallback>
}
 8010142:	bf00      	nop
 8010144:	3718      	adds	r7, #24
 8010146:	46bd      	mov	sp, r7
 8010148:	bd80      	pop	{r7, pc}

0801014a <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 801014a:	b580      	push	{r7, lr}
 801014c:	b084      	sub	sp, #16
 801014e:	af00      	add	r7, sp, #0
 8010150:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8010152:	687b      	ldr	r3, [r7, #4]
 8010154:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010156:	60fb      	str	r3, [r7, #12]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8010158:	68fb      	ldr	r3, [r7, #12]
 801015a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801015c:	2b00      	cmp	r3, #0
 801015e:	d003      	beq.n	8010168 <I2C_DMAError+0x1e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8010160:	68fb      	ldr	r3, [r7, #12]
 8010162:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010164:	2200      	movs	r2, #0
 8010166:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8010168:	68fb      	ldr	r3, [r7, #12]
 801016a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801016c:	2b00      	cmp	r3, #0
 801016e:	d003      	beq.n	8010178 <I2C_DMAError+0x2e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8010170:	68fb      	ldr	r3, [r7, #12]
 8010172:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010174:	2200      	movs	r2, #0
 8010176:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Ignore DMA FIFO error */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8010178:	6878      	ldr	r0, [r7, #4]
 801017a:	f7fd fa6f 	bl	800d65c <HAL_DMA_GetError>
 801017e:	4603      	mov	r3, r0
 8010180:	2b02      	cmp	r3, #2
 8010182:	d01b      	beq.n	80101bc <I2C_DMAError+0x72>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8010184:	68fb      	ldr	r3, [r7, #12]
 8010186:	681b      	ldr	r3, [r3, #0]
 8010188:	681a      	ldr	r2, [r3, #0]
 801018a:	68fb      	ldr	r3, [r7, #12]
 801018c:	681b      	ldr	r3, [r3, #0]
 801018e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8010192:	601a      	str	r2, [r3, #0]

    hi2c->XferCount = 0U;
 8010194:	68fb      	ldr	r3, [r7, #12]
 8010196:	2200      	movs	r2, #0
 8010198:	855a      	strh	r2, [r3, #42]	@ 0x2a

    hi2c->State = HAL_I2C_STATE_READY;
 801019a:	68fb      	ldr	r3, [r7, #12]
 801019c:	2220      	movs	r2, #32
 801019e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80101a2:	68fb      	ldr	r3, [r7, #12]
 80101a4:	2200      	movs	r2, #0
 80101a6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 80101aa:	68fb      	ldr	r3, [r7, #12]
 80101ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80101ae:	f043 0210 	orr.w	r2, r3, #16
 80101b2:	68fb      	ldr	r3, [r7, #12]
 80101b4:	641a      	str	r2, [r3, #64]	@ 0x40

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 80101b6:	68f8      	ldr	r0, [r7, #12]
 80101b8:	f7fe fcf8 	bl	800ebac <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80101bc:	bf00      	nop
 80101be:	3710      	adds	r7, #16
 80101c0:	46bd      	mov	sp, r7
 80101c2:	bd80      	pop	{r7, pc}

080101c4 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80101c4:	b580      	push	{r7, lr}
 80101c6:	b086      	sub	sp, #24
 80101c8:	af00      	add	r7, sp, #0
 80101ca:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80101cc:	2300      	movs	r3, #0
 80101ce:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80101d0:	687b      	ldr	r3, [r7, #4]
 80101d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80101d4:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80101d6:	697b      	ldr	r3, [r7, #20]
 80101d8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80101dc:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80101de:	4b4b      	ldr	r3, [pc, #300]	@ (801030c <I2C_DMAAbort+0x148>)
 80101e0:	681b      	ldr	r3, [r3, #0]
 80101e2:	08db      	lsrs	r3, r3, #3
 80101e4:	4a4a      	ldr	r2, [pc, #296]	@ (8010310 <I2C_DMAAbort+0x14c>)
 80101e6:	fba2 2303 	umull	r2, r3, r2, r3
 80101ea:	0a1a      	lsrs	r2, r3, #8
 80101ec:	4613      	mov	r3, r2
 80101ee:	009b      	lsls	r3, r3, #2
 80101f0:	4413      	add	r3, r2
 80101f2:	00da      	lsls	r2, r3, #3
 80101f4:	1ad3      	subs	r3, r2, r3
 80101f6:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 80101f8:	68fb      	ldr	r3, [r7, #12]
 80101fa:	2b00      	cmp	r3, #0
 80101fc:	d106      	bne.n	801020c <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80101fe:	697b      	ldr	r3, [r7, #20]
 8010200:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010202:	f043 0220 	orr.w	r2, r3, #32
 8010206:	697b      	ldr	r3, [r7, #20]
 8010208:	641a      	str	r2, [r3, #64]	@ 0x40
      break;
 801020a:	e00a      	b.n	8010222 <I2C_DMAAbort+0x5e>
    }
    count--;
 801020c:	68fb      	ldr	r3, [r7, #12]
 801020e:	3b01      	subs	r3, #1
 8010210:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8010212:	697b      	ldr	r3, [r7, #20]
 8010214:	681b      	ldr	r3, [r3, #0]
 8010216:	681b      	ldr	r3, [r3, #0]
 8010218:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 801021c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8010220:	d0ea      	beq.n	80101f8 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8010222:	697b      	ldr	r3, [r7, #20]
 8010224:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010226:	2b00      	cmp	r3, #0
 8010228:	d003      	beq.n	8010232 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 801022a:	697b      	ldr	r3, [r7, #20]
 801022c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801022e:	2200      	movs	r2, #0
 8010230:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8010232:	697b      	ldr	r3, [r7, #20]
 8010234:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010236:	2b00      	cmp	r3, #0
 8010238:	d003      	beq.n	8010242 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 801023a:	697b      	ldr	r3, [r7, #20]
 801023c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801023e:	2200      	movs	r2, #0
 8010240:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8010242:	697b      	ldr	r3, [r7, #20]
 8010244:	681b      	ldr	r3, [r3, #0]
 8010246:	681a      	ldr	r2, [r3, #0]
 8010248:	697b      	ldr	r3, [r7, #20]
 801024a:	681b      	ldr	r3, [r3, #0]
 801024c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8010250:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8010252:	697b      	ldr	r3, [r7, #20]
 8010254:	2200      	movs	r2, #0
 8010256:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8010258:	697b      	ldr	r3, [r7, #20]
 801025a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801025c:	2b00      	cmp	r3, #0
 801025e:	d003      	beq.n	8010268 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8010260:	697b      	ldr	r3, [r7, #20]
 8010262:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010264:	2200      	movs	r2, #0
 8010266:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  if (hi2c->hdmarx != NULL)
 8010268:	697b      	ldr	r3, [r7, #20]
 801026a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801026c:	2b00      	cmp	r3, #0
 801026e:	d003      	beq.n	8010278 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8010270:	697b      	ldr	r3, [r7, #20]
 8010272:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010274:	2200      	movs	r2, #0
 8010276:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8010278:	697b      	ldr	r3, [r7, #20]
 801027a:	681b      	ldr	r3, [r3, #0]
 801027c:	681a      	ldr	r2, [r3, #0]
 801027e:	697b      	ldr	r3, [r7, #20]
 8010280:	681b      	ldr	r3, [r3, #0]
 8010282:	f022 0201 	bic.w	r2, r2, #1
 8010286:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8010288:	697b      	ldr	r3, [r7, #20]
 801028a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 801028e:	b2db      	uxtb	r3, r3
 8010290:	2b60      	cmp	r3, #96	@ 0x60
 8010292:	d10e      	bne.n	80102b2 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8010294:	697b      	ldr	r3, [r7, #20]
 8010296:	2220      	movs	r2, #32
 8010298:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 801029c:	697b      	ldr	r3, [r7, #20]
 801029e:	2200      	movs	r2, #0
 80102a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80102a4:	697b      	ldr	r3, [r7, #20]
 80102a6:	2200      	movs	r2, #0
 80102a8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80102aa:	6978      	ldr	r0, [r7, #20]
 80102ac:	f7fe fc88 	bl	800ebc0 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80102b0:	e027      	b.n	8010302 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80102b2:	7cfb      	ldrb	r3, [r7, #19]
 80102b4:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80102b8:	2b28      	cmp	r3, #40	@ 0x28
 80102ba:	d117      	bne.n	80102ec <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 80102bc:	697b      	ldr	r3, [r7, #20]
 80102be:	681b      	ldr	r3, [r3, #0]
 80102c0:	681a      	ldr	r2, [r3, #0]
 80102c2:	697b      	ldr	r3, [r7, #20]
 80102c4:	681b      	ldr	r3, [r3, #0]
 80102c6:	f042 0201 	orr.w	r2, r2, #1
 80102ca:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80102cc:	697b      	ldr	r3, [r7, #20]
 80102ce:	681b      	ldr	r3, [r3, #0]
 80102d0:	681a      	ldr	r2, [r3, #0]
 80102d2:	697b      	ldr	r3, [r7, #20]
 80102d4:	681b      	ldr	r3, [r3, #0]
 80102d6:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80102da:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80102dc:	697b      	ldr	r3, [r7, #20]
 80102de:	2200      	movs	r2, #0
 80102e0:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80102e2:	697b      	ldr	r3, [r7, #20]
 80102e4:	2228      	movs	r2, #40	@ 0x28
 80102e6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 80102ea:	e007      	b.n	80102fc <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 80102ec:	697b      	ldr	r3, [r7, #20]
 80102ee:	2220      	movs	r2, #32
 80102f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80102f4:	697b      	ldr	r3, [r7, #20]
 80102f6:	2200      	movs	r2, #0
 80102f8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 80102fc:	6978      	ldr	r0, [r7, #20]
 80102fe:	f7fe fc55 	bl	800ebac <HAL_I2C_ErrorCallback>
}
 8010302:	bf00      	nop
 8010304:	3718      	adds	r7, #24
 8010306:	46bd      	mov	sp, r7
 8010308:	bd80      	pop	{r7, pc}
 801030a:	bf00      	nop
 801030c:	20000064 	.word	0x20000064
 8010310:	14f8b589 	.word	0x14f8b589

08010314 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8010314:	b580      	push	{r7, lr}
 8010316:	b084      	sub	sp, #16
 8010318:	af00      	add	r7, sp, #0
 801031a:	60f8      	str	r0, [r7, #12]
 801031c:	60b9      	str	r1, [r7, #8]
 801031e:	603b      	str	r3, [r7, #0]
 8010320:	4613      	mov	r3, r2
 8010322:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8010324:	e025      	b.n	8010372 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8010326:	683b      	ldr	r3, [r7, #0]
 8010328:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801032c:	d021      	beq.n	8010372 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801032e:	f7fb fe09 	bl	800bf44 <HAL_GetTick>
 8010332:	4602      	mov	r2, r0
 8010334:	69bb      	ldr	r3, [r7, #24]
 8010336:	1ad3      	subs	r3, r2, r3
 8010338:	683a      	ldr	r2, [r7, #0]
 801033a:	429a      	cmp	r2, r3
 801033c:	d302      	bcc.n	8010344 <I2C_WaitOnFlagUntilTimeout+0x30>
 801033e:	683b      	ldr	r3, [r7, #0]
 8010340:	2b00      	cmp	r3, #0
 8010342:	d116      	bne.n	8010372 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8010344:	68fb      	ldr	r3, [r7, #12]
 8010346:	2200      	movs	r2, #0
 8010348:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 801034a:	68fb      	ldr	r3, [r7, #12]
 801034c:	2220      	movs	r2, #32
 801034e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8010352:	68fb      	ldr	r3, [r7, #12]
 8010354:	2200      	movs	r2, #0
 8010356:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 801035a:	68fb      	ldr	r3, [r7, #12]
 801035c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801035e:	f043 0220 	orr.w	r2, r3, #32
 8010362:	68fb      	ldr	r3, [r7, #12]
 8010364:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8010366:	68fb      	ldr	r3, [r7, #12]
 8010368:	2200      	movs	r2, #0
 801036a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 801036e:	2301      	movs	r3, #1
 8010370:	e023      	b.n	80103ba <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8010372:	68bb      	ldr	r3, [r7, #8]
 8010374:	0c1b      	lsrs	r3, r3, #16
 8010376:	b2db      	uxtb	r3, r3
 8010378:	2b01      	cmp	r3, #1
 801037a:	d10d      	bne.n	8010398 <I2C_WaitOnFlagUntilTimeout+0x84>
 801037c:	68fb      	ldr	r3, [r7, #12]
 801037e:	681b      	ldr	r3, [r3, #0]
 8010380:	695b      	ldr	r3, [r3, #20]
 8010382:	43da      	mvns	r2, r3
 8010384:	68bb      	ldr	r3, [r7, #8]
 8010386:	4013      	ands	r3, r2
 8010388:	b29b      	uxth	r3, r3
 801038a:	2b00      	cmp	r3, #0
 801038c:	bf0c      	ite	eq
 801038e:	2301      	moveq	r3, #1
 8010390:	2300      	movne	r3, #0
 8010392:	b2db      	uxtb	r3, r3
 8010394:	461a      	mov	r2, r3
 8010396:	e00c      	b.n	80103b2 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8010398:	68fb      	ldr	r3, [r7, #12]
 801039a:	681b      	ldr	r3, [r3, #0]
 801039c:	699b      	ldr	r3, [r3, #24]
 801039e:	43da      	mvns	r2, r3
 80103a0:	68bb      	ldr	r3, [r7, #8]
 80103a2:	4013      	ands	r3, r2
 80103a4:	b29b      	uxth	r3, r3
 80103a6:	2b00      	cmp	r3, #0
 80103a8:	bf0c      	ite	eq
 80103aa:	2301      	moveq	r3, #1
 80103ac:	2300      	movne	r3, #0
 80103ae:	b2db      	uxtb	r3, r3
 80103b0:	461a      	mov	r2, r3
 80103b2:	79fb      	ldrb	r3, [r7, #7]
 80103b4:	429a      	cmp	r2, r3
 80103b6:	d0b6      	beq.n	8010326 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80103b8:	2300      	movs	r3, #0
}
 80103ba:	4618      	mov	r0, r3
 80103bc:	3710      	adds	r7, #16
 80103be:	46bd      	mov	sp, r7
 80103c0:	bd80      	pop	{r7, pc}

080103c2 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80103c2:	b580      	push	{r7, lr}
 80103c4:	b084      	sub	sp, #16
 80103c6:	af00      	add	r7, sp, #0
 80103c8:	60f8      	str	r0, [r7, #12]
 80103ca:	60b9      	str	r1, [r7, #8]
 80103cc:	607a      	str	r2, [r7, #4]
 80103ce:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80103d0:	e051      	b.n	8010476 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80103d2:	68fb      	ldr	r3, [r7, #12]
 80103d4:	681b      	ldr	r3, [r3, #0]
 80103d6:	695b      	ldr	r3, [r3, #20]
 80103d8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80103dc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80103e0:	d123      	bne.n	801042a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80103e2:	68fb      	ldr	r3, [r7, #12]
 80103e4:	681b      	ldr	r3, [r3, #0]
 80103e6:	681a      	ldr	r2, [r3, #0]
 80103e8:	68fb      	ldr	r3, [r7, #12]
 80103ea:	681b      	ldr	r3, [r3, #0]
 80103ec:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80103f0:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80103f2:	68fb      	ldr	r3, [r7, #12]
 80103f4:	681b      	ldr	r3, [r3, #0]
 80103f6:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80103fa:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80103fc:	68fb      	ldr	r3, [r7, #12]
 80103fe:	2200      	movs	r2, #0
 8010400:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8010402:	68fb      	ldr	r3, [r7, #12]
 8010404:	2220      	movs	r2, #32
 8010406:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 801040a:	68fb      	ldr	r3, [r7, #12]
 801040c:	2200      	movs	r2, #0
 801040e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8010412:	68fb      	ldr	r3, [r7, #12]
 8010414:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010416:	f043 0204 	orr.w	r2, r3, #4
 801041a:	68fb      	ldr	r3, [r7, #12]
 801041c:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 801041e:	68fb      	ldr	r3, [r7, #12]
 8010420:	2200      	movs	r2, #0
 8010422:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8010426:	2301      	movs	r3, #1
 8010428:	e046      	b.n	80104b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 801042a:	687b      	ldr	r3, [r7, #4]
 801042c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8010430:	d021      	beq.n	8010476 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8010432:	f7fb fd87 	bl	800bf44 <HAL_GetTick>
 8010436:	4602      	mov	r2, r0
 8010438:	683b      	ldr	r3, [r7, #0]
 801043a:	1ad3      	subs	r3, r2, r3
 801043c:	687a      	ldr	r2, [r7, #4]
 801043e:	429a      	cmp	r2, r3
 8010440:	d302      	bcc.n	8010448 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8010442:	687b      	ldr	r3, [r7, #4]
 8010444:	2b00      	cmp	r3, #0
 8010446:	d116      	bne.n	8010476 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8010448:	68fb      	ldr	r3, [r7, #12]
 801044a:	2200      	movs	r2, #0
 801044c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 801044e:	68fb      	ldr	r3, [r7, #12]
 8010450:	2220      	movs	r2, #32
 8010452:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8010456:	68fb      	ldr	r3, [r7, #12]
 8010458:	2200      	movs	r2, #0
 801045a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 801045e:	68fb      	ldr	r3, [r7, #12]
 8010460:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010462:	f043 0220 	orr.w	r2, r3, #32
 8010466:	68fb      	ldr	r3, [r7, #12]
 8010468:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 801046a:	68fb      	ldr	r3, [r7, #12]
 801046c:	2200      	movs	r2, #0
 801046e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8010472:	2301      	movs	r3, #1
 8010474:	e020      	b.n	80104b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8010476:	68bb      	ldr	r3, [r7, #8]
 8010478:	0c1b      	lsrs	r3, r3, #16
 801047a:	b2db      	uxtb	r3, r3
 801047c:	2b01      	cmp	r3, #1
 801047e:	d10c      	bne.n	801049a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8010480:	68fb      	ldr	r3, [r7, #12]
 8010482:	681b      	ldr	r3, [r3, #0]
 8010484:	695b      	ldr	r3, [r3, #20]
 8010486:	43da      	mvns	r2, r3
 8010488:	68bb      	ldr	r3, [r7, #8]
 801048a:	4013      	ands	r3, r2
 801048c:	b29b      	uxth	r3, r3
 801048e:	2b00      	cmp	r3, #0
 8010490:	bf14      	ite	ne
 8010492:	2301      	movne	r3, #1
 8010494:	2300      	moveq	r3, #0
 8010496:	b2db      	uxtb	r3, r3
 8010498:	e00b      	b.n	80104b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 801049a:	68fb      	ldr	r3, [r7, #12]
 801049c:	681b      	ldr	r3, [r3, #0]
 801049e:	699b      	ldr	r3, [r3, #24]
 80104a0:	43da      	mvns	r2, r3
 80104a2:	68bb      	ldr	r3, [r7, #8]
 80104a4:	4013      	ands	r3, r2
 80104a6:	b29b      	uxth	r3, r3
 80104a8:	2b00      	cmp	r3, #0
 80104aa:	bf14      	ite	ne
 80104ac:	2301      	movne	r3, #1
 80104ae:	2300      	moveq	r3, #0
 80104b0:	b2db      	uxtb	r3, r3
 80104b2:	2b00      	cmp	r3, #0
 80104b4:	d18d      	bne.n	80103d2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80104b6:	2300      	movs	r3, #0
}
 80104b8:	4618      	mov	r0, r3
 80104ba:	3710      	adds	r7, #16
 80104bc:	46bd      	mov	sp, r7
 80104be:	bd80      	pop	{r7, pc}

080104c0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80104c0:	b580      	push	{r7, lr}
 80104c2:	b084      	sub	sp, #16
 80104c4:	af00      	add	r7, sp, #0
 80104c6:	60f8      	str	r0, [r7, #12]
 80104c8:	60b9      	str	r1, [r7, #8]
 80104ca:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80104cc:	e02d      	b.n	801052a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80104ce:	68f8      	ldr	r0, [r7, #12]
 80104d0:	f000 f8aa 	bl	8010628 <I2C_IsAcknowledgeFailed>
 80104d4:	4603      	mov	r3, r0
 80104d6:	2b00      	cmp	r3, #0
 80104d8:	d001      	beq.n	80104de <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80104da:	2301      	movs	r3, #1
 80104dc:	e02d      	b.n	801053a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80104de:	68bb      	ldr	r3, [r7, #8]
 80104e0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80104e4:	d021      	beq.n	801052a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80104e6:	f7fb fd2d 	bl	800bf44 <HAL_GetTick>
 80104ea:	4602      	mov	r2, r0
 80104ec:	687b      	ldr	r3, [r7, #4]
 80104ee:	1ad3      	subs	r3, r2, r3
 80104f0:	68ba      	ldr	r2, [r7, #8]
 80104f2:	429a      	cmp	r2, r3
 80104f4:	d302      	bcc.n	80104fc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80104f6:	68bb      	ldr	r3, [r7, #8]
 80104f8:	2b00      	cmp	r3, #0
 80104fa:	d116      	bne.n	801052a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80104fc:	68fb      	ldr	r3, [r7, #12]
 80104fe:	2200      	movs	r2, #0
 8010500:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8010502:	68fb      	ldr	r3, [r7, #12]
 8010504:	2220      	movs	r2, #32
 8010506:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 801050a:	68fb      	ldr	r3, [r7, #12]
 801050c:	2200      	movs	r2, #0
 801050e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8010512:	68fb      	ldr	r3, [r7, #12]
 8010514:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010516:	f043 0220 	orr.w	r2, r3, #32
 801051a:	68fb      	ldr	r3, [r7, #12]
 801051c:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 801051e:	68fb      	ldr	r3, [r7, #12]
 8010520:	2200      	movs	r2, #0
 8010522:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8010526:	2301      	movs	r3, #1
 8010528:	e007      	b.n	801053a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 801052a:	68fb      	ldr	r3, [r7, #12]
 801052c:	681b      	ldr	r3, [r3, #0]
 801052e:	695b      	ldr	r3, [r3, #20]
 8010530:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8010534:	2b80      	cmp	r3, #128	@ 0x80
 8010536:	d1ca      	bne.n	80104ce <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8010538:	2300      	movs	r3, #0
}
 801053a:	4618      	mov	r0, r3
 801053c:	3710      	adds	r7, #16
 801053e:	46bd      	mov	sp, r7
 8010540:	bd80      	pop	{r7, pc}

08010542 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8010542:	b580      	push	{r7, lr}
 8010544:	b084      	sub	sp, #16
 8010546:	af00      	add	r7, sp, #0
 8010548:	60f8      	str	r0, [r7, #12]
 801054a:	60b9      	str	r1, [r7, #8]
 801054c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 801054e:	e02d      	b.n	80105ac <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8010550:	68f8      	ldr	r0, [r7, #12]
 8010552:	f000 f869 	bl	8010628 <I2C_IsAcknowledgeFailed>
 8010556:	4603      	mov	r3, r0
 8010558:	2b00      	cmp	r3, #0
 801055a:	d001      	beq.n	8010560 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 801055c:	2301      	movs	r3, #1
 801055e:	e02d      	b.n	80105bc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8010560:	68bb      	ldr	r3, [r7, #8]
 8010562:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8010566:	d021      	beq.n	80105ac <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8010568:	f7fb fcec 	bl	800bf44 <HAL_GetTick>
 801056c:	4602      	mov	r2, r0
 801056e:	687b      	ldr	r3, [r7, #4]
 8010570:	1ad3      	subs	r3, r2, r3
 8010572:	68ba      	ldr	r2, [r7, #8]
 8010574:	429a      	cmp	r2, r3
 8010576:	d302      	bcc.n	801057e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8010578:	68bb      	ldr	r3, [r7, #8]
 801057a:	2b00      	cmp	r3, #0
 801057c:	d116      	bne.n	80105ac <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 801057e:	68fb      	ldr	r3, [r7, #12]
 8010580:	2200      	movs	r2, #0
 8010582:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8010584:	68fb      	ldr	r3, [r7, #12]
 8010586:	2220      	movs	r2, #32
 8010588:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 801058c:	68fb      	ldr	r3, [r7, #12]
 801058e:	2200      	movs	r2, #0
 8010590:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8010594:	68fb      	ldr	r3, [r7, #12]
 8010596:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010598:	f043 0220 	orr.w	r2, r3, #32
 801059c:	68fb      	ldr	r3, [r7, #12]
 801059e:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80105a0:	68fb      	ldr	r3, [r7, #12]
 80105a2:	2200      	movs	r2, #0
 80105a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80105a8:	2301      	movs	r3, #1
 80105aa:	e007      	b.n	80105bc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80105ac:	68fb      	ldr	r3, [r7, #12]
 80105ae:	681b      	ldr	r3, [r3, #0]
 80105b0:	695b      	ldr	r3, [r3, #20]
 80105b2:	f003 0304 	and.w	r3, r3, #4
 80105b6:	2b04      	cmp	r3, #4
 80105b8:	d1ca      	bne.n	8010550 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80105ba:	2300      	movs	r3, #0
}
 80105bc:	4618      	mov	r0, r3
 80105be:	3710      	adds	r7, #16
 80105c0:	46bd      	mov	sp, r7
 80105c2:	bd80      	pop	{r7, pc}

080105c4 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 80105c4:	b480      	push	{r7}
 80105c6:	b085      	sub	sp, #20
 80105c8:	af00      	add	r7, sp, #0
 80105ca:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80105cc:	2300      	movs	r3, #0
 80105ce:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 80105d0:	4b13      	ldr	r3, [pc, #76]	@ (8010620 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 80105d2:	681b      	ldr	r3, [r3, #0]
 80105d4:	08db      	lsrs	r3, r3, #3
 80105d6:	4a13      	ldr	r2, [pc, #76]	@ (8010624 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 80105d8:	fba2 2303 	umull	r2, r3, r2, r3
 80105dc:	0a1a      	lsrs	r2, r3, #8
 80105de:	4613      	mov	r3, r2
 80105e0:	009b      	lsls	r3, r3, #2
 80105e2:	4413      	add	r3, r2
 80105e4:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 80105e6:	68fb      	ldr	r3, [r7, #12]
 80105e8:	3b01      	subs	r3, #1
 80105ea:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 80105ec:	68fb      	ldr	r3, [r7, #12]
 80105ee:	2b00      	cmp	r3, #0
 80105f0:	d107      	bne.n	8010602 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80105f2:	687b      	ldr	r3, [r7, #4]
 80105f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80105f6:	f043 0220 	orr.w	r2, r3, #32
 80105fa:	687b      	ldr	r3, [r7, #4]
 80105fc:	641a      	str	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 80105fe:	2301      	movs	r3, #1
 8010600:	e008      	b.n	8010614 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8010602:	687b      	ldr	r3, [r7, #4]
 8010604:	681b      	ldr	r3, [r3, #0]
 8010606:	681b      	ldr	r3, [r3, #0]
 8010608:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 801060c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8010610:	d0e9      	beq.n	80105e6 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8010612:	2300      	movs	r3, #0
}
 8010614:	4618      	mov	r0, r3
 8010616:	3714      	adds	r7, #20
 8010618:	46bd      	mov	sp, r7
 801061a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801061e:	4770      	bx	lr
 8010620:	20000064 	.word	0x20000064
 8010624:	14f8b589 	.word	0x14f8b589

08010628 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8010628:	b480      	push	{r7}
 801062a:	b083      	sub	sp, #12
 801062c:	af00      	add	r7, sp, #0
 801062e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8010630:	687b      	ldr	r3, [r7, #4]
 8010632:	681b      	ldr	r3, [r3, #0]
 8010634:	695b      	ldr	r3, [r3, #20]
 8010636:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 801063a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 801063e:	d11b      	bne.n	8010678 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8010640:	687b      	ldr	r3, [r7, #4]
 8010642:	681b      	ldr	r3, [r3, #0]
 8010644:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8010648:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 801064a:	687b      	ldr	r3, [r7, #4]
 801064c:	2200      	movs	r2, #0
 801064e:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8010650:	687b      	ldr	r3, [r7, #4]
 8010652:	2220      	movs	r2, #32
 8010654:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8010658:	687b      	ldr	r3, [r7, #4]
 801065a:	2200      	movs	r2, #0
 801065c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8010660:	687b      	ldr	r3, [r7, #4]
 8010662:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010664:	f043 0204 	orr.w	r2, r3, #4
 8010668:	687b      	ldr	r3, [r7, #4]
 801066a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 801066c:	687b      	ldr	r3, [r7, #4]
 801066e:	2200      	movs	r2, #0
 8010670:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8010674:	2301      	movs	r3, #1
 8010676:	e000      	b.n	801067a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8010678:	2300      	movs	r3, #0
}
 801067a:	4618      	mov	r0, r3
 801067c:	370c      	adds	r7, #12
 801067e:	46bd      	mov	sp, r7
 8010680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010684:	4770      	bx	lr

08010686 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8010686:	b480      	push	{r7}
 8010688:	b083      	sub	sp, #12
 801068a:	af00      	add	r7, sp, #0
 801068c:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 801068e:	687b      	ldr	r3, [r7, #4]
 8010690:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010692:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8010696:	d103      	bne.n	80106a0 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8010698:	687b      	ldr	r3, [r7, #4]
 801069a:	2201      	movs	r2, #1
 801069c:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 801069e:	e007      	b.n	80106b0 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 80106a0:	687b      	ldr	r3, [r7, #4]
 80106a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80106a4:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 80106a8:	d102      	bne.n	80106b0 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 80106aa:	687b      	ldr	r3, [r7, #4]
 80106ac:	2208      	movs	r2, #8
 80106ae:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 80106b0:	bf00      	nop
 80106b2:	370c      	adds	r7, #12
 80106b4:	46bd      	mov	sp, r7
 80106b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106ba:	4770      	bx	lr

080106bc <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80106bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80106be:	b08f      	sub	sp, #60	@ 0x3c
 80106c0:	af0a      	add	r7, sp, #40	@ 0x28
 80106c2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80106c4:	687b      	ldr	r3, [r7, #4]
 80106c6:	2b00      	cmp	r3, #0
 80106c8:	d101      	bne.n	80106ce <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80106ca:	2301      	movs	r3, #1
 80106cc:	e10f      	b.n	80108ee <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80106ce:	687b      	ldr	r3, [r7, #4]
 80106d0:	681b      	ldr	r3, [r3, #0]
 80106d2:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80106d4:	687b      	ldr	r3, [r7, #4]
 80106d6:	f893 34bd 	ldrb.w	r3, [r3, #1213]	@ 0x4bd
 80106da:	b2db      	uxtb	r3, r3
 80106dc:	2b00      	cmp	r3, #0
 80106de:	d106      	bne.n	80106ee <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80106e0:	687b      	ldr	r3, [r7, #4]
 80106e2:	2200      	movs	r2, #0
 80106e4:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80106e8:	6878      	ldr	r0, [r7, #4]
 80106ea:	f7f6 faef 	bl	8006ccc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80106ee:	687b      	ldr	r3, [r7, #4]
 80106f0:	2203      	movs	r2, #3
 80106f2:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80106f6:	68bb      	ldr	r3, [r7, #8]
 80106f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80106fa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80106fe:	2b00      	cmp	r3, #0
 8010700:	d102      	bne.n	8010708 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8010702:	687b      	ldr	r3, [r7, #4]
 8010704:	2200      	movs	r2, #0
 8010706:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8010708:	687b      	ldr	r3, [r7, #4]
 801070a:	681b      	ldr	r3, [r3, #0]
 801070c:	4618      	mov	r0, r3
 801070e:	f005 f83e 	bl	801578e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8010712:	687b      	ldr	r3, [r7, #4]
 8010714:	681b      	ldr	r3, [r3, #0]
 8010716:	603b      	str	r3, [r7, #0]
 8010718:	687e      	ldr	r6, [r7, #4]
 801071a:	466d      	mov	r5, sp
 801071c:	f106 0410 	add.w	r4, r6, #16
 8010720:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8010722:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8010724:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8010726:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8010728:	e894 0003 	ldmia.w	r4, {r0, r1}
 801072c:	e885 0003 	stmia.w	r5, {r0, r1}
 8010730:	1d33      	adds	r3, r6, #4
 8010732:	cb0e      	ldmia	r3, {r1, r2, r3}
 8010734:	6838      	ldr	r0, [r7, #0]
 8010736:	f004 ff15 	bl	8015564 <USB_CoreInit>
 801073a:	4603      	mov	r3, r0
 801073c:	2b00      	cmp	r3, #0
 801073e:	d005      	beq.n	801074c <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8010740:	687b      	ldr	r3, [r7, #4]
 8010742:	2202      	movs	r2, #2
 8010744:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd
    return HAL_ERROR;
 8010748:	2301      	movs	r3, #1
 801074a:	e0d0      	b.n	80108ee <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 801074c:	687b      	ldr	r3, [r7, #4]
 801074e:	681b      	ldr	r3, [r3, #0]
 8010750:	2100      	movs	r1, #0
 8010752:	4618      	mov	r0, r3
 8010754:	f005 f82c 	bl	80157b0 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8010758:	2300      	movs	r3, #0
 801075a:	73fb      	strb	r3, [r7, #15]
 801075c:	e04a      	b.n	80107f4 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 801075e:	7bfa      	ldrb	r2, [r7, #15]
 8010760:	6879      	ldr	r1, [r7, #4]
 8010762:	4613      	mov	r3, r2
 8010764:	00db      	lsls	r3, r3, #3
 8010766:	4413      	add	r3, r2
 8010768:	009b      	lsls	r3, r3, #2
 801076a:	440b      	add	r3, r1
 801076c:	333d      	adds	r3, #61	@ 0x3d
 801076e:	2201      	movs	r2, #1
 8010770:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8010772:	7bfa      	ldrb	r2, [r7, #15]
 8010774:	6879      	ldr	r1, [r7, #4]
 8010776:	4613      	mov	r3, r2
 8010778:	00db      	lsls	r3, r3, #3
 801077a:	4413      	add	r3, r2
 801077c:	009b      	lsls	r3, r3, #2
 801077e:	440b      	add	r3, r1
 8010780:	333c      	adds	r3, #60	@ 0x3c
 8010782:	7bfa      	ldrb	r2, [r7, #15]
 8010784:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8010786:	7bfa      	ldrb	r2, [r7, #15]
 8010788:	7bfb      	ldrb	r3, [r7, #15]
 801078a:	b298      	uxth	r0, r3
 801078c:	6879      	ldr	r1, [r7, #4]
 801078e:	4613      	mov	r3, r2
 8010790:	00db      	lsls	r3, r3, #3
 8010792:	4413      	add	r3, r2
 8010794:	009b      	lsls	r3, r3, #2
 8010796:	440b      	add	r3, r1
 8010798:	3344      	adds	r3, #68	@ 0x44
 801079a:	4602      	mov	r2, r0
 801079c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 801079e:	7bfa      	ldrb	r2, [r7, #15]
 80107a0:	6879      	ldr	r1, [r7, #4]
 80107a2:	4613      	mov	r3, r2
 80107a4:	00db      	lsls	r3, r3, #3
 80107a6:	4413      	add	r3, r2
 80107a8:	009b      	lsls	r3, r3, #2
 80107aa:	440b      	add	r3, r1
 80107ac:	3340      	adds	r3, #64	@ 0x40
 80107ae:	2200      	movs	r2, #0
 80107b0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80107b2:	7bfa      	ldrb	r2, [r7, #15]
 80107b4:	6879      	ldr	r1, [r7, #4]
 80107b6:	4613      	mov	r3, r2
 80107b8:	00db      	lsls	r3, r3, #3
 80107ba:	4413      	add	r3, r2
 80107bc:	009b      	lsls	r3, r3, #2
 80107be:	440b      	add	r3, r1
 80107c0:	3348      	adds	r3, #72	@ 0x48
 80107c2:	2200      	movs	r2, #0
 80107c4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80107c6:	7bfa      	ldrb	r2, [r7, #15]
 80107c8:	6879      	ldr	r1, [r7, #4]
 80107ca:	4613      	mov	r3, r2
 80107cc:	00db      	lsls	r3, r3, #3
 80107ce:	4413      	add	r3, r2
 80107d0:	009b      	lsls	r3, r3, #2
 80107d2:	440b      	add	r3, r1
 80107d4:	334c      	adds	r3, #76	@ 0x4c
 80107d6:	2200      	movs	r2, #0
 80107d8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80107da:	7bfa      	ldrb	r2, [r7, #15]
 80107dc:	6879      	ldr	r1, [r7, #4]
 80107de:	4613      	mov	r3, r2
 80107e0:	00db      	lsls	r3, r3, #3
 80107e2:	4413      	add	r3, r2
 80107e4:	009b      	lsls	r3, r3, #2
 80107e6:	440b      	add	r3, r1
 80107e8:	3354      	adds	r3, #84	@ 0x54
 80107ea:	2200      	movs	r2, #0
 80107ec:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80107ee:	7bfb      	ldrb	r3, [r7, #15]
 80107f0:	3301      	adds	r3, #1
 80107f2:	73fb      	strb	r3, [r7, #15]
 80107f4:	7bfa      	ldrb	r2, [r7, #15]
 80107f6:	687b      	ldr	r3, [r7, #4]
 80107f8:	685b      	ldr	r3, [r3, #4]
 80107fa:	429a      	cmp	r2, r3
 80107fc:	d3af      	bcc.n	801075e <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80107fe:	2300      	movs	r3, #0
 8010800:	73fb      	strb	r3, [r7, #15]
 8010802:	e044      	b.n	801088e <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8010804:	7bfa      	ldrb	r2, [r7, #15]
 8010806:	6879      	ldr	r1, [r7, #4]
 8010808:	4613      	mov	r3, r2
 801080a:	00db      	lsls	r3, r3, #3
 801080c:	4413      	add	r3, r2
 801080e:	009b      	lsls	r3, r3, #2
 8010810:	440b      	add	r3, r1
 8010812:	f203 237d 	addw	r3, r3, #637	@ 0x27d
 8010816:	2200      	movs	r2, #0
 8010818:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 801081a:	7bfa      	ldrb	r2, [r7, #15]
 801081c:	6879      	ldr	r1, [r7, #4]
 801081e:	4613      	mov	r3, r2
 8010820:	00db      	lsls	r3, r3, #3
 8010822:	4413      	add	r3, r2
 8010824:	009b      	lsls	r3, r3, #2
 8010826:	440b      	add	r3, r1
 8010828:	f503 731f 	add.w	r3, r3, #636	@ 0x27c
 801082c:	7bfa      	ldrb	r2, [r7, #15]
 801082e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8010830:	7bfa      	ldrb	r2, [r7, #15]
 8010832:	6879      	ldr	r1, [r7, #4]
 8010834:	4613      	mov	r3, r2
 8010836:	00db      	lsls	r3, r3, #3
 8010838:	4413      	add	r3, r2
 801083a:	009b      	lsls	r3, r3, #2
 801083c:	440b      	add	r3, r1
 801083e:	f503 7320 	add.w	r3, r3, #640	@ 0x280
 8010842:	2200      	movs	r2, #0
 8010844:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8010846:	7bfa      	ldrb	r2, [r7, #15]
 8010848:	6879      	ldr	r1, [r7, #4]
 801084a:	4613      	mov	r3, r2
 801084c:	00db      	lsls	r3, r3, #3
 801084e:	4413      	add	r3, r2
 8010850:	009b      	lsls	r3, r3, #2
 8010852:	440b      	add	r3, r1
 8010854:	f503 7322 	add.w	r3, r3, #648	@ 0x288
 8010858:	2200      	movs	r2, #0
 801085a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 801085c:	7bfa      	ldrb	r2, [r7, #15]
 801085e:	6879      	ldr	r1, [r7, #4]
 8010860:	4613      	mov	r3, r2
 8010862:	00db      	lsls	r3, r3, #3
 8010864:	4413      	add	r3, r2
 8010866:	009b      	lsls	r3, r3, #2
 8010868:	440b      	add	r3, r1
 801086a:	f503 7323 	add.w	r3, r3, #652	@ 0x28c
 801086e:	2200      	movs	r2, #0
 8010870:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8010872:	7bfa      	ldrb	r2, [r7, #15]
 8010874:	6879      	ldr	r1, [r7, #4]
 8010876:	4613      	mov	r3, r2
 8010878:	00db      	lsls	r3, r3, #3
 801087a:	4413      	add	r3, r2
 801087c:	009b      	lsls	r3, r3, #2
 801087e:	440b      	add	r3, r1
 8010880:	f503 7325 	add.w	r3, r3, #660	@ 0x294
 8010884:	2200      	movs	r2, #0
 8010886:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8010888:	7bfb      	ldrb	r3, [r7, #15]
 801088a:	3301      	adds	r3, #1
 801088c:	73fb      	strb	r3, [r7, #15]
 801088e:	7bfa      	ldrb	r2, [r7, #15]
 8010890:	687b      	ldr	r3, [r7, #4]
 8010892:	685b      	ldr	r3, [r3, #4]
 8010894:	429a      	cmp	r2, r3
 8010896:	d3b5      	bcc.n	8010804 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8010898:	687b      	ldr	r3, [r7, #4]
 801089a:	681b      	ldr	r3, [r3, #0]
 801089c:	603b      	str	r3, [r7, #0]
 801089e:	687e      	ldr	r6, [r7, #4]
 80108a0:	466d      	mov	r5, sp
 80108a2:	f106 0410 	add.w	r4, r6, #16
 80108a6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80108a8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80108aa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80108ac:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80108ae:	e894 0003 	ldmia.w	r4, {r0, r1}
 80108b2:	e885 0003 	stmia.w	r5, {r0, r1}
 80108b6:	1d33      	adds	r3, r6, #4
 80108b8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80108ba:	6838      	ldr	r0, [r7, #0]
 80108bc:	f004 ffc4 	bl	8015848 <USB_DevInit>
 80108c0:	4603      	mov	r3, r0
 80108c2:	2b00      	cmp	r3, #0
 80108c4:	d005      	beq.n	80108d2 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80108c6:	687b      	ldr	r3, [r7, #4]
 80108c8:	2202      	movs	r2, #2
 80108ca:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd
    return HAL_ERROR;
 80108ce:	2301      	movs	r3, #1
 80108d0:	e00d      	b.n	80108ee <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 80108d2:	687b      	ldr	r3, [r7, #4]
 80108d4:	2200      	movs	r2, #0
 80108d6:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80108da:	687b      	ldr	r3, [r7, #4]
 80108dc:	2201      	movs	r2, #1
 80108de:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80108e2:	687b      	ldr	r3, [r7, #4]
 80108e4:	681b      	ldr	r3, [r3, #0]
 80108e6:	4618      	mov	r0, r3
 80108e8:	f006 f913 	bl	8016b12 <USB_DevDisconnect>

  return HAL_OK;
 80108ec:	2300      	movs	r3, #0
}
 80108ee:	4618      	mov	r0, r3
 80108f0:	3714      	adds	r7, #20
 80108f2:	46bd      	mov	sp, r7
 80108f4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080108f6 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80108f6:	b580      	push	{r7, lr}
 80108f8:	b084      	sub	sp, #16
 80108fa:	af00      	add	r7, sp, #0
 80108fc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80108fe:	687b      	ldr	r3, [r7, #4]
 8010900:	681b      	ldr	r3, [r3, #0]
 8010902:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8010904:	687b      	ldr	r3, [r7, #4]
 8010906:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 801090a:	2b01      	cmp	r3, #1
 801090c:	d101      	bne.n	8010912 <HAL_PCD_Start+0x1c>
 801090e:	2302      	movs	r3, #2
 8010910:	e020      	b.n	8010954 <HAL_PCD_Start+0x5e>
 8010912:	687b      	ldr	r3, [r7, #4]
 8010914:	2201      	movs	r2, #1
 8010916:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 801091a:	687b      	ldr	r3, [r7, #4]
 801091c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801091e:	2b01      	cmp	r3, #1
 8010920:	d109      	bne.n	8010936 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8010922:	687b      	ldr	r3, [r7, #4]
 8010924:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8010926:	2b01      	cmp	r3, #1
 8010928:	d005      	beq.n	8010936 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 801092a:	68fb      	ldr	r3, [r7, #12]
 801092c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801092e:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8010932:	68fb      	ldr	r3, [r7, #12]
 8010934:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8010936:	687b      	ldr	r3, [r7, #4]
 8010938:	681b      	ldr	r3, [r3, #0]
 801093a:	4618      	mov	r0, r3
 801093c:	f004 ff16 	bl	801576c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8010940:	687b      	ldr	r3, [r7, #4]
 8010942:	681b      	ldr	r3, [r3, #0]
 8010944:	4618      	mov	r0, r3
 8010946:	f006 f8c3 	bl	8016ad0 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 801094a:	687b      	ldr	r3, [r7, #4]
 801094c:	2200      	movs	r2, #0
 801094e:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  return HAL_OK;
 8010952:	2300      	movs	r3, #0
}
 8010954:	4618      	mov	r0, r3
 8010956:	3710      	adds	r7, #16
 8010958:	46bd      	mov	sp, r7
 801095a:	bd80      	pop	{r7, pc}

0801095c <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 801095c:	b590      	push	{r4, r7, lr}
 801095e:	b08d      	sub	sp, #52	@ 0x34
 8010960:	af00      	add	r7, sp, #0
 8010962:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8010964:	687b      	ldr	r3, [r7, #4]
 8010966:	681b      	ldr	r3, [r3, #0]
 8010968:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801096a:	6a3b      	ldr	r3, [r7, #32]
 801096c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 801096e:	687b      	ldr	r3, [r7, #4]
 8010970:	681b      	ldr	r3, [r3, #0]
 8010972:	4618      	mov	r0, r3
 8010974:	f006 f981 	bl	8016c7a <USB_GetMode>
 8010978:	4603      	mov	r3, r0
 801097a:	2b00      	cmp	r3, #0
 801097c:	f040 848a 	bne.w	8011294 <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8010980:	687b      	ldr	r3, [r7, #4]
 8010982:	681b      	ldr	r3, [r3, #0]
 8010984:	4618      	mov	r0, r3
 8010986:	f006 f8e5 	bl	8016b54 <USB_ReadInterrupts>
 801098a:	4603      	mov	r3, r0
 801098c:	2b00      	cmp	r3, #0
 801098e:	f000 8480 	beq.w	8011292 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8010992:	69fb      	ldr	r3, [r7, #28]
 8010994:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8010998:	689b      	ldr	r3, [r3, #8]
 801099a:	0a1b      	lsrs	r3, r3, #8
 801099c:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80109a0:	687b      	ldr	r3, [r7, #4]
 80109a2:	f8c3 24fc 	str.w	r2, [r3, #1276]	@ 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80109a6:	687b      	ldr	r3, [r7, #4]
 80109a8:	681b      	ldr	r3, [r3, #0]
 80109aa:	4618      	mov	r0, r3
 80109ac:	f006 f8d2 	bl	8016b54 <USB_ReadInterrupts>
 80109b0:	4603      	mov	r3, r0
 80109b2:	f003 0302 	and.w	r3, r3, #2
 80109b6:	2b02      	cmp	r3, #2
 80109b8:	d107      	bne.n	80109ca <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80109ba:	687b      	ldr	r3, [r7, #4]
 80109bc:	681b      	ldr	r3, [r3, #0]
 80109be:	695a      	ldr	r2, [r3, #20]
 80109c0:	687b      	ldr	r3, [r7, #4]
 80109c2:	681b      	ldr	r3, [r3, #0]
 80109c4:	f002 0202 	and.w	r2, r2, #2
 80109c8:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80109ca:	687b      	ldr	r3, [r7, #4]
 80109cc:	681b      	ldr	r3, [r3, #0]
 80109ce:	4618      	mov	r0, r3
 80109d0:	f006 f8c0 	bl	8016b54 <USB_ReadInterrupts>
 80109d4:	4603      	mov	r3, r0
 80109d6:	f003 0310 	and.w	r3, r3, #16
 80109da:	2b10      	cmp	r3, #16
 80109dc:	d161      	bne.n	8010aa2 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80109de:	687b      	ldr	r3, [r7, #4]
 80109e0:	681b      	ldr	r3, [r3, #0]
 80109e2:	699a      	ldr	r2, [r3, #24]
 80109e4:	687b      	ldr	r3, [r7, #4]
 80109e6:	681b      	ldr	r3, [r3, #0]
 80109e8:	f022 0210 	bic.w	r2, r2, #16
 80109ec:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80109ee:	6a3b      	ldr	r3, [r7, #32]
 80109f0:	6a1b      	ldr	r3, [r3, #32]
 80109f2:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80109f4:	69bb      	ldr	r3, [r7, #24]
 80109f6:	f003 020f 	and.w	r2, r3, #15
 80109fa:	4613      	mov	r3, r2
 80109fc:	00db      	lsls	r3, r3, #3
 80109fe:	4413      	add	r3, r2
 8010a00:	009b      	lsls	r3, r3, #2
 8010a02:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8010a06:	687a      	ldr	r2, [r7, #4]
 8010a08:	4413      	add	r3, r2
 8010a0a:	3304      	adds	r3, #4
 8010a0c:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8010a0e:	69bb      	ldr	r3, [r7, #24]
 8010a10:	0c5b      	lsrs	r3, r3, #17
 8010a12:	f003 030f 	and.w	r3, r3, #15
 8010a16:	2b02      	cmp	r3, #2
 8010a18:	d124      	bne.n	8010a64 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8010a1a:	69ba      	ldr	r2, [r7, #24]
 8010a1c:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8010a20:	4013      	ands	r3, r2
 8010a22:	2b00      	cmp	r3, #0
 8010a24:	d035      	beq.n	8010a92 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8010a26:	697b      	ldr	r3, [r7, #20]
 8010a28:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8010a2a:	69bb      	ldr	r3, [r7, #24]
 8010a2c:	091b      	lsrs	r3, r3, #4
 8010a2e:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8010a30:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8010a34:	b29b      	uxth	r3, r3
 8010a36:	461a      	mov	r2, r3
 8010a38:	6a38      	ldr	r0, [r7, #32]
 8010a3a:	f005 fef7 	bl	801682c <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8010a3e:	697b      	ldr	r3, [r7, #20]
 8010a40:	691a      	ldr	r2, [r3, #16]
 8010a42:	69bb      	ldr	r3, [r7, #24]
 8010a44:	091b      	lsrs	r3, r3, #4
 8010a46:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8010a4a:	441a      	add	r2, r3
 8010a4c:	697b      	ldr	r3, [r7, #20]
 8010a4e:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8010a50:	697b      	ldr	r3, [r7, #20]
 8010a52:	6a1a      	ldr	r2, [r3, #32]
 8010a54:	69bb      	ldr	r3, [r7, #24]
 8010a56:	091b      	lsrs	r3, r3, #4
 8010a58:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8010a5c:	441a      	add	r2, r3
 8010a5e:	697b      	ldr	r3, [r7, #20]
 8010a60:	621a      	str	r2, [r3, #32]
 8010a62:	e016      	b.n	8010a92 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8010a64:	69bb      	ldr	r3, [r7, #24]
 8010a66:	0c5b      	lsrs	r3, r3, #17
 8010a68:	f003 030f 	and.w	r3, r3, #15
 8010a6c:	2b06      	cmp	r3, #6
 8010a6e:	d110      	bne.n	8010a92 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8010a70:	687b      	ldr	r3, [r7, #4]
 8010a72:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 8010a76:	2208      	movs	r2, #8
 8010a78:	4619      	mov	r1, r3
 8010a7a:	6a38      	ldr	r0, [r7, #32]
 8010a7c:	f005 fed6 	bl	801682c <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8010a80:	697b      	ldr	r3, [r7, #20]
 8010a82:	6a1a      	ldr	r2, [r3, #32]
 8010a84:	69bb      	ldr	r3, [r7, #24]
 8010a86:	091b      	lsrs	r3, r3, #4
 8010a88:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8010a8c:	441a      	add	r2, r3
 8010a8e:	697b      	ldr	r3, [r7, #20]
 8010a90:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8010a92:	687b      	ldr	r3, [r7, #4]
 8010a94:	681b      	ldr	r3, [r3, #0]
 8010a96:	699a      	ldr	r2, [r3, #24]
 8010a98:	687b      	ldr	r3, [r7, #4]
 8010a9a:	681b      	ldr	r3, [r3, #0]
 8010a9c:	f042 0210 	orr.w	r2, r2, #16
 8010aa0:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8010aa2:	687b      	ldr	r3, [r7, #4]
 8010aa4:	681b      	ldr	r3, [r3, #0]
 8010aa6:	4618      	mov	r0, r3
 8010aa8:	f006 f854 	bl	8016b54 <USB_ReadInterrupts>
 8010aac:	4603      	mov	r3, r0
 8010aae:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8010ab2:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8010ab6:	f040 80a7 	bne.w	8010c08 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8010aba:	2300      	movs	r3, #0
 8010abc:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8010abe:	687b      	ldr	r3, [r7, #4]
 8010ac0:	681b      	ldr	r3, [r3, #0]
 8010ac2:	4618      	mov	r0, r3
 8010ac4:	f006 f859 	bl	8016b7a <USB_ReadDevAllOutEpInterrupt>
 8010ac8:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8010aca:	e099      	b.n	8010c00 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8010acc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010ace:	f003 0301 	and.w	r3, r3, #1
 8010ad2:	2b00      	cmp	r3, #0
 8010ad4:	f000 808e 	beq.w	8010bf4 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8010ad8:	687b      	ldr	r3, [r7, #4]
 8010ada:	681b      	ldr	r3, [r3, #0]
 8010adc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010ade:	b2d2      	uxtb	r2, r2
 8010ae0:	4611      	mov	r1, r2
 8010ae2:	4618      	mov	r0, r3
 8010ae4:	f006 f87d 	bl	8016be2 <USB_ReadDevOutEPInterrupt>
 8010ae8:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8010aea:	693b      	ldr	r3, [r7, #16]
 8010aec:	f003 0301 	and.w	r3, r3, #1
 8010af0:	2b00      	cmp	r3, #0
 8010af2:	d00c      	beq.n	8010b0e <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8010af4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010af6:	015a      	lsls	r2, r3, #5
 8010af8:	69fb      	ldr	r3, [r7, #28]
 8010afa:	4413      	add	r3, r2
 8010afc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8010b00:	461a      	mov	r2, r3
 8010b02:	2301      	movs	r3, #1
 8010b04:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8010b06:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8010b08:	6878      	ldr	r0, [r7, #4]
 8010b0a:	f000 fec3 	bl	8011894 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8010b0e:	693b      	ldr	r3, [r7, #16]
 8010b10:	f003 0308 	and.w	r3, r3, #8
 8010b14:	2b00      	cmp	r3, #0
 8010b16:	d00c      	beq.n	8010b32 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8010b18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010b1a:	015a      	lsls	r2, r3, #5
 8010b1c:	69fb      	ldr	r3, [r7, #28]
 8010b1e:	4413      	add	r3, r2
 8010b20:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8010b24:	461a      	mov	r2, r3
 8010b26:	2308      	movs	r3, #8
 8010b28:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8010b2a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8010b2c:	6878      	ldr	r0, [r7, #4]
 8010b2e:	f000 ff99 	bl	8011a64 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8010b32:	693b      	ldr	r3, [r7, #16]
 8010b34:	f003 0310 	and.w	r3, r3, #16
 8010b38:	2b00      	cmp	r3, #0
 8010b3a:	d008      	beq.n	8010b4e <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8010b3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010b3e:	015a      	lsls	r2, r3, #5
 8010b40:	69fb      	ldr	r3, [r7, #28]
 8010b42:	4413      	add	r3, r2
 8010b44:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8010b48:	461a      	mov	r2, r3
 8010b4a:	2310      	movs	r3, #16
 8010b4c:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8010b4e:	693b      	ldr	r3, [r7, #16]
 8010b50:	f003 0302 	and.w	r3, r3, #2
 8010b54:	2b00      	cmp	r3, #0
 8010b56:	d030      	beq.n	8010bba <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8010b58:	6a3b      	ldr	r3, [r7, #32]
 8010b5a:	695b      	ldr	r3, [r3, #20]
 8010b5c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8010b60:	2b80      	cmp	r3, #128	@ 0x80
 8010b62:	d109      	bne.n	8010b78 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8010b64:	69fb      	ldr	r3, [r7, #28]
 8010b66:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8010b6a:	685b      	ldr	r3, [r3, #4]
 8010b6c:	69fa      	ldr	r2, [r7, #28]
 8010b6e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8010b72:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8010b76:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8010b78:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010b7a:	4613      	mov	r3, r2
 8010b7c:	00db      	lsls	r3, r3, #3
 8010b7e:	4413      	add	r3, r2
 8010b80:	009b      	lsls	r3, r3, #2
 8010b82:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8010b86:	687a      	ldr	r2, [r7, #4]
 8010b88:	4413      	add	r3, r2
 8010b8a:	3304      	adds	r3, #4
 8010b8c:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8010b8e:	697b      	ldr	r3, [r7, #20]
 8010b90:	78db      	ldrb	r3, [r3, #3]
 8010b92:	2b01      	cmp	r3, #1
 8010b94:	d108      	bne.n	8010ba8 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8010b96:	697b      	ldr	r3, [r7, #20]
 8010b98:	2200      	movs	r2, #0
 8010b9a:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8010b9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010b9e:	b2db      	uxtb	r3, r3
 8010ba0:	4619      	mov	r1, r3
 8010ba2:	6878      	ldr	r0, [r7, #4]
 8010ba4:	f7f6 f998 	bl	8006ed8 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8010ba8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010baa:	015a      	lsls	r2, r3, #5
 8010bac:	69fb      	ldr	r3, [r7, #28]
 8010bae:	4413      	add	r3, r2
 8010bb0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8010bb4:	461a      	mov	r2, r3
 8010bb6:	2302      	movs	r3, #2
 8010bb8:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8010bba:	693b      	ldr	r3, [r7, #16]
 8010bbc:	f003 0320 	and.w	r3, r3, #32
 8010bc0:	2b00      	cmp	r3, #0
 8010bc2:	d008      	beq.n	8010bd6 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8010bc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010bc6:	015a      	lsls	r2, r3, #5
 8010bc8:	69fb      	ldr	r3, [r7, #28]
 8010bca:	4413      	add	r3, r2
 8010bcc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8010bd0:	461a      	mov	r2, r3
 8010bd2:	2320      	movs	r3, #32
 8010bd4:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8010bd6:	693b      	ldr	r3, [r7, #16]
 8010bd8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8010bdc:	2b00      	cmp	r3, #0
 8010bde:	d009      	beq.n	8010bf4 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8010be0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010be2:	015a      	lsls	r2, r3, #5
 8010be4:	69fb      	ldr	r3, [r7, #28]
 8010be6:	4413      	add	r3, r2
 8010be8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8010bec:	461a      	mov	r2, r3
 8010bee:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8010bf2:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8010bf4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010bf6:	3301      	adds	r3, #1
 8010bf8:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8010bfa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010bfc:	085b      	lsrs	r3, r3, #1
 8010bfe:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8010c00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010c02:	2b00      	cmp	r3, #0
 8010c04:	f47f af62 	bne.w	8010acc <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8010c08:	687b      	ldr	r3, [r7, #4]
 8010c0a:	681b      	ldr	r3, [r3, #0]
 8010c0c:	4618      	mov	r0, r3
 8010c0e:	f005 ffa1 	bl	8016b54 <USB_ReadInterrupts>
 8010c12:	4603      	mov	r3, r0
 8010c14:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8010c18:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8010c1c:	f040 80db 	bne.w	8010dd6 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8010c20:	687b      	ldr	r3, [r7, #4]
 8010c22:	681b      	ldr	r3, [r3, #0]
 8010c24:	4618      	mov	r0, r3
 8010c26:	f005 ffc2 	bl	8016bae <USB_ReadDevAllInEpInterrupt>
 8010c2a:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8010c2c:	2300      	movs	r3, #0
 8010c2e:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8010c30:	e0cd      	b.n	8010dce <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8010c32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010c34:	f003 0301 	and.w	r3, r3, #1
 8010c38:	2b00      	cmp	r3, #0
 8010c3a:	f000 80c2 	beq.w	8010dc2 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8010c3e:	687b      	ldr	r3, [r7, #4]
 8010c40:	681b      	ldr	r3, [r3, #0]
 8010c42:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010c44:	b2d2      	uxtb	r2, r2
 8010c46:	4611      	mov	r1, r2
 8010c48:	4618      	mov	r0, r3
 8010c4a:	f005 ffe8 	bl	8016c1e <USB_ReadDevInEPInterrupt>
 8010c4e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8010c50:	693b      	ldr	r3, [r7, #16]
 8010c52:	f003 0301 	and.w	r3, r3, #1
 8010c56:	2b00      	cmp	r3, #0
 8010c58:	d057      	beq.n	8010d0a <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8010c5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010c5c:	f003 030f 	and.w	r3, r3, #15
 8010c60:	2201      	movs	r2, #1
 8010c62:	fa02 f303 	lsl.w	r3, r2, r3
 8010c66:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8010c68:	69fb      	ldr	r3, [r7, #28]
 8010c6a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8010c6e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8010c70:	68fb      	ldr	r3, [r7, #12]
 8010c72:	43db      	mvns	r3, r3
 8010c74:	69f9      	ldr	r1, [r7, #28]
 8010c76:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8010c7a:	4013      	ands	r3, r2
 8010c7c:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8010c7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010c80:	015a      	lsls	r2, r3, #5
 8010c82:	69fb      	ldr	r3, [r7, #28]
 8010c84:	4413      	add	r3, r2
 8010c86:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8010c8a:	461a      	mov	r2, r3
 8010c8c:	2301      	movs	r3, #1
 8010c8e:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8010c90:	687b      	ldr	r3, [r7, #4]
 8010c92:	691b      	ldr	r3, [r3, #16]
 8010c94:	2b01      	cmp	r3, #1
 8010c96:	d132      	bne.n	8010cfe <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8010c98:	6879      	ldr	r1, [r7, #4]
 8010c9a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010c9c:	4613      	mov	r3, r2
 8010c9e:	00db      	lsls	r3, r3, #3
 8010ca0:	4413      	add	r3, r2
 8010ca2:	009b      	lsls	r3, r3, #2
 8010ca4:	440b      	add	r3, r1
 8010ca6:	334c      	adds	r3, #76	@ 0x4c
 8010ca8:	6819      	ldr	r1, [r3, #0]
 8010caa:	6878      	ldr	r0, [r7, #4]
 8010cac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010cae:	4613      	mov	r3, r2
 8010cb0:	00db      	lsls	r3, r3, #3
 8010cb2:	4413      	add	r3, r2
 8010cb4:	009b      	lsls	r3, r3, #2
 8010cb6:	4403      	add	r3, r0
 8010cb8:	3348      	adds	r3, #72	@ 0x48
 8010cba:	681b      	ldr	r3, [r3, #0]
 8010cbc:	4419      	add	r1, r3
 8010cbe:	6878      	ldr	r0, [r7, #4]
 8010cc0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010cc2:	4613      	mov	r3, r2
 8010cc4:	00db      	lsls	r3, r3, #3
 8010cc6:	4413      	add	r3, r2
 8010cc8:	009b      	lsls	r3, r3, #2
 8010cca:	4403      	add	r3, r0
 8010ccc:	334c      	adds	r3, #76	@ 0x4c
 8010cce:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8010cd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010cd2:	2b00      	cmp	r3, #0
 8010cd4:	d113      	bne.n	8010cfe <HAL_PCD_IRQHandler+0x3a2>
 8010cd6:	6879      	ldr	r1, [r7, #4]
 8010cd8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010cda:	4613      	mov	r3, r2
 8010cdc:	00db      	lsls	r3, r3, #3
 8010cde:	4413      	add	r3, r2
 8010ce0:	009b      	lsls	r3, r3, #2
 8010ce2:	440b      	add	r3, r1
 8010ce4:	3354      	adds	r3, #84	@ 0x54
 8010ce6:	681b      	ldr	r3, [r3, #0]
 8010ce8:	2b00      	cmp	r3, #0
 8010cea:	d108      	bne.n	8010cfe <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8010cec:	687b      	ldr	r3, [r7, #4]
 8010cee:	6818      	ldr	r0, [r3, #0]
 8010cf0:	687b      	ldr	r3, [r7, #4]
 8010cf2:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 8010cf6:	461a      	mov	r2, r3
 8010cf8:	2101      	movs	r1, #1
 8010cfa:	f005 ffef 	bl	8016cdc <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8010cfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010d00:	b2db      	uxtb	r3, r3
 8010d02:	4619      	mov	r1, r3
 8010d04:	6878      	ldr	r0, [r7, #4]
 8010d06:	f7f6 f862 	bl	8006dce <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8010d0a:	693b      	ldr	r3, [r7, #16]
 8010d0c:	f003 0308 	and.w	r3, r3, #8
 8010d10:	2b00      	cmp	r3, #0
 8010d12:	d008      	beq.n	8010d26 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8010d14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010d16:	015a      	lsls	r2, r3, #5
 8010d18:	69fb      	ldr	r3, [r7, #28]
 8010d1a:	4413      	add	r3, r2
 8010d1c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8010d20:	461a      	mov	r2, r3
 8010d22:	2308      	movs	r3, #8
 8010d24:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8010d26:	693b      	ldr	r3, [r7, #16]
 8010d28:	f003 0310 	and.w	r3, r3, #16
 8010d2c:	2b00      	cmp	r3, #0
 8010d2e:	d008      	beq.n	8010d42 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8010d30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010d32:	015a      	lsls	r2, r3, #5
 8010d34:	69fb      	ldr	r3, [r7, #28]
 8010d36:	4413      	add	r3, r2
 8010d38:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8010d3c:	461a      	mov	r2, r3
 8010d3e:	2310      	movs	r3, #16
 8010d40:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8010d42:	693b      	ldr	r3, [r7, #16]
 8010d44:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010d48:	2b00      	cmp	r3, #0
 8010d4a:	d008      	beq.n	8010d5e <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8010d4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010d4e:	015a      	lsls	r2, r3, #5
 8010d50:	69fb      	ldr	r3, [r7, #28]
 8010d52:	4413      	add	r3, r2
 8010d54:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8010d58:	461a      	mov	r2, r3
 8010d5a:	2340      	movs	r3, #64	@ 0x40
 8010d5c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8010d5e:	693b      	ldr	r3, [r7, #16]
 8010d60:	f003 0302 	and.w	r3, r3, #2
 8010d64:	2b00      	cmp	r3, #0
 8010d66:	d023      	beq.n	8010db0 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8010d68:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8010d6a:	6a38      	ldr	r0, [r7, #32]
 8010d6c:	f004 fed0 	bl	8015b10 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8010d70:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010d72:	4613      	mov	r3, r2
 8010d74:	00db      	lsls	r3, r3, #3
 8010d76:	4413      	add	r3, r2
 8010d78:	009b      	lsls	r3, r3, #2
 8010d7a:	3338      	adds	r3, #56	@ 0x38
 8010d7c:	687a      	ldr	r2, [r7, #4]
 8010d7e:	4413      	add	r3, r2
 8010d80:	3304      	adds	r3, #4
 8010d82:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8010d84:	697b      	ldr	r3, [r7, #20]
 8010d86:	78db      	ldrb	r3, [r3, #3]
 8010d88:	2b01      	cmp	r3, #1
 8010d8a:	d108      	bne.n	8010d9e <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8010d8c:	697b      	ldr	r3, [r7, #20]
 8010d8e:	2200      	movs	r2, #0
 8010d90:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8010d92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010d94:	b2db      	uxtb	r3, r3
 8010d96:	4619      	mov	r1, r3
 8010d98:	6878      	ldr	r0, [r7, #4]
 8010d9a:	f7f6 f8af 	bl	8006efc <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8010d9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010da0:	015a      	lsls	r2, r3, #5
 8010da2:	69fb      	ldr	r3, [r7, #28]
 8010da4:	4413      	add	r3, r2
 8010da6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8010daa:	461a      	mov	r2, r3
 8010dac:	2302      	movs	r3, #2
 8010dae:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8010db0:	693b      	ldr	r3, [r7, #16]
 8010db2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8010db6:	2b00      	cmp	r3, #0
 8010db8:	d003      	beq.n	8010dc2 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8010dba:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8010dbc:	6878      	ldr	r0, [r7, #4]
 8010dbe:	f000 fcdb 	bl	8011778 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8010dc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010dc4:	3301      	adds	r3, #1
 8010dc6:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8010dc8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010dca:	085b      	lsrs	r3, r3, #1
 8010dcc:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8010dce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010dd0:	2b00      	cmp	r3, #0
 8010dd2:	f47f af2e 	bne.w	8010c32 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8010dd6:	687b      	ldr	r3, [r7, #4]
 8010dd8:	681b      	ldr	r3, [r3, #0]
 8010dda:	4618      	mov	r0, r3
 8010ddc:	f005 feba 	bl	8016b54 <USB_ReadInterrupts>
 8010de0:	4603      	mov	r3, r0
 8010de2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8010de6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8010dea:	d122      	bne.n	8010e32 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8010dec:	69fb      	ldr	r3, [r7, #28]
 8010dee:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8010df2:	685b      	ldr	r3, [r3, #4]
 8010df4:	69fa      	ldr	r2, [r7, #28]
 8010df6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8010dfa:	f023 0301 	bic.w	r3, r3, #1
 8010dfe:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8010e00:	687b      	ldr	r3, [r7, #4]
 8010e02:	f893 34f4 	ldrb.w	r3, [r3, #1268]	@ 0x4f4
 8010e06:	2b01      	cmp	r3, #1
 8010e08:	d108      	bne.n	8010e1c <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8010e0a:	687b      	ldr	r3, [r7, #4]
 8010e0c:	2200      	movs	r2, #0
 8010e0e:	f883 24f4 	strb.w	r2, [r3, #1268]	@ 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8010e12:	2100      	movs	r1, #0
 8010e14:	6878      	ldr	r0, [r7, #4]
 8010e16:	f000 fec3 	bl	8011ba0 <HAL_PCDEx_LPM_Callback>
 8010e1a:	e002      	b.n	8010e22 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8010e1c:	6878      	ldr	r0, [r7, #4]
 8010e1e:	f7f6 f84d 	bl	8006ebc <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8010e22:	687b      	ldr	r3, [r7, #4]
 8010e24:	681b      	ldr	r3, [r3, #0]
 8010e26:	695a      	ldr	r2, [r3, #20]
 8010e28:	687b      	ldr	r3, [r7, #4]
 8010e2a:	681b      	ldr	r3, [r3, #0]
 8010e2c:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8010e30:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8010e32:	687b      	ldr	r3, [r7, #4]
 8010e34:	681b      	ldr	r3, [r3, #0]
 8010e36:	4618      	mov	r0, r3
 8010e38:	f005 fe8c 	bl	8016b54 <USB_ReadInterrupts>
 8010e3c:	4603      	mov	r3, r0
 8010e3e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8010e42:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8010e46:	d112      	bne.n	8010e6e <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8010e48:	69fb      	ldr	r3, [r7, #28]
 8010e4a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8010e4e:	689b      	ldr	r3, [r3, #8]
 8010e50:	f003 0301 	and.w	r3, r3, #1
 8010e54:	2b01      	cmp	r3, #1
 8010e56:	d102      	bne.n	8010e5e <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8010e58:	6878      	ldr	r0, [r7, #4]
 8010e5a:	f7f6 f809 	bl	8006e70 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8010e5e:	687b      	ldr	r3, [r7, #4]
 8010e60:	681b      	ldr	r3, [r3, #0]
 8010e62:	695a      	ldr	r2, [r3, #20]
 8010e64:	687b      	ldr	r3, [r7, #4]
 8010e66:	681b      	ldr	r3, [r3, #0]
 8010e68:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8010e6c:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8010e6e:	687b      	ldr	r3, [r7, #4]
 8010e70:	681b      	ldr	r3, [r3, #0]
 8010e72:	4618      	mov	r0, r3
 8010e74:	f005 fe6e 	bl	8016b54 <USB_ReadInterrupts>
 8010e78:	4603      	mov	r3, r0
 8010e7a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8010e7e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8010e82:	f040 80b7 	bne.w	8010ff4 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8010e86:	69fb      	ldr	r3, [r7, #28]
 8010e88:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8010e8c:	685b      	ldr	r3, [r3, #4]
 8010e8e:	69fa      	ldr	r2, [r7, #28]
 8010e90:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8010e94:	f023 0301 	bic.w	r3, r3, #1
 8010e98:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8010e9a:	687b      	ldr	r3, [r7, #4]
 8010e9c:	681b      	ldr	r3, [r3, #0]
 8010e9e:	2110      	movs	r1, #16
 8010ea0:	4618      	mov	r0, r3
 8010ea2:	f004 fe35 	bl	8015b10 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8010ea6:	2300      	movs	r3, #0
 8010ea8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8010eaa:	e046      	b.n	8010f3a <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8010eac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010eae:	015a      	lsls	r2, r3, #5
 8010eb0:	69fb      	ldr	r3, [r7, #28]
 8010eb2:	4413      	add	r3, r2
 8010eb4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8010eb8:	461a      	mov	r2, r3
 8010eba:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8010ebe:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8010ec0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010ec2:	015a      	lsls	r2, r3, #5
 8010ec4:	69fb      	ldr	r3, [r7, #28]
 8010ec6:	4413      	add	r3, r2
 8010ec8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8010ecc:	681b      	ldr	r3, [r3, #0]
 8010ece:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8010ed0:	0151      	lsls	r1, r2, #5
 8010ed2:	69fa      	ldr	r2, [r7, #28]
 8010ed4:	440a      	add	r2, r1
 8010ed6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8010eda:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8010ede:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8010ee0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010ee2:	015a      	lsls	r2, r3, #5
 8010ee4:	69fb      	ldr	r3, [r7, #28]
 8010ee6:	4413      	add	r3, r2
 8010ee8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8010eec:	461a      	mov	r2, r3
 8010eee:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8010ef2:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8010ef4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010ef6:	015a      	lsls	r2, r3, #5
 8010ef8:	69fb      	ldr	r3, [r7, #28]
 8010efa:	4413      	add	r3, r2
 8010efc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8010f00:	681b      	ldr	r3, [r3, #0]
 8010f02:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8010f04:	0151      	lsls	r1, r2, #5
 8010f06:	69fa      	ldr	r2, [r7, #28]
 8010f08:	440a      	add	r2, r1
 8010f0a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8010f0e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8010f12:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8010f14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010f16:	015a      	lsls	r2, r3, #5
 8010f18:	69fb      	ldr	r3, [r7, #28]
 8010f1a:	4413      	add	r3, r2
 8010f1c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8010f20:	681b      	ldr	r3, [r3, #0]
 8010f22:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8010f24:	0151      	lsls	r1, r2, #5
 8010f26:	69fa      	ldr	r2, [r7, #28]
 8010f28:	440a      	add	r2, r1
 8010f2a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8010f2e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8010f32:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8010f34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010f36:	3301      	adds	r3, #1
 8010f38:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8010f3a:	687b      	ldr	r3, [r7, #4]
 8010f3c:	685b      	ldr	r3, [r3, #4]
 8010f3e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8010f40:	429a      	cmp	r2, r3
 8010f42:	d3b3      	bcc.n	8010eac <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8010f44:	69fb      	ldr	r3, [r7, #28]
 8010f46:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8010f4a:	69db      	ldr	r3, [r3, #28]
 8010f4c:	69fa      	ldr	r2, [r7, #28]
 8010f4e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8010f52:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8010f56:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8010f58:	687b      	ldr	r3, [r7, #4]
 8010f5a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010f5c:	2b00      	cmp	r3, #0
 8010f5e:	d016      	beq.n	8010f8e <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8010f60:	69fb      	ldr	r3, [r7, #28]
 8010f62:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8010f66:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8010f6a:	69fa      	ldr	r2, [r7, #28]
 8010f6c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8010f70:	f043 030b 	orr.w	r3, r3, #11
 8010f74:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8010f78:	69fb      	ldr	r3, [r7, #28]
 8010f7a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8010f7e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010f80:	69fa      	ldr	r2, [r7, #28]
 8010f82:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8010f86:	f043 030b 	orr.w	r3, r3, #11
 8010f8a:	6453      	str	r3, [r2, #68]	@ 0x44
 8010f8c:	e015      	b.n	8010fba <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8010f8e:	69fb      	ldr	r3, [r7, #28]
 8010f90:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8010f94:	695b      	ldr	r3, [r3, #20]
 8010f96:	69fa      	ldr	r2, [r7, #28]
 8010f98:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8010f9c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8010fa0:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8010fa4:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8010fa6:	69fb      	ldr	r3, [r7, #28]
 8010fa8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8010fac:	691b      	ldr	r3, [r3, #16]
 8010fae:	69fa      	ldr	r2, [r7, #28]
 8010fb0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8010fb4:	f043 030b 	orr.w	r3, r3, #11
 8010fb8:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8010fba:	69fb      	ldr	r3, [r7, #28]
 8010fbc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8010fc0:	681b      	ldr	r3, [r3, #0]
 8010fc2:	69fa      	ldr	r2, [r7, #28]
 8010fc4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8010fc8:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8010fcc:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8010fce:	687b      	ldr	r3, [r7, #4]
 8010fd0:	6818      	ldr	r0, [r3, #0]
 8010fd2:	687b      	ldr	r3, [r7, #4]
 8010fd4:	691b      	ldr	r3, [r3, #16]
 8010fd6:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8010fd8:	687b      	ldr	r3, [r7, #4]
 8010fda:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8010fde:	461a      	mov	r2, r3
 8010fe0:	f005 fe7c 	bl	8016cdc <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8010fe4:	687b      	ldr	r3, [r7, #4]
 8010fe6:	681b      	ldr	r3, [r3, #0]
 8010fe8:	695a      	ldr	r2, [r3, #20]
 8010fea:	687b      	ldr	r3, [r7, #4]
 8010fec:	681b      	ldr	r3, [r3, #0]
 8010fee:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8010ff2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8010ff4:	687b      	ldr	r3, [r7, #4]
 8010ff6:	681b      	ldr	r3, [r3, #0]
 8010ff8:	4618      	mov	r0, r3
 8010ffa:	f005 fdab 	bl	8016b54 <USB_ReadInterrupts>
 8010ffe:	4603      	mov	r3, r0
 8011000:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8011004:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8011008:	d124      	bne.n	8011054 <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 801100a:	687b      	ldr	r3, [r7, #4]
 801100c:	681b      	ldr	r3, [r3, #0]
 801100e:	4618      	mov	r0, r3
 8011010:	f005 fe41 	bl	8016c96 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8011014:	687b      	ldr	r3, [r7, #4]
 8011016:	681b      	ldr	r3, [r3, #0]
 8011018:	4618      	mov	r0, r3
 801101a:	f004 fdf6 	bl	8015c0a <USB_GetDevSpeed>
 801101e:	4603      	mov	r3, r0
 8011020:	461a      	mov	r2, r3
 8011022:	687b      	ldr	r3, [r7, #4]
 8011024:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8011026:	687b      	ldr	r3, [r7, #4]
 8011028:	681c      	ldr	r4, [r3, #0]
 801102a:	f001 fa35 	bl	8012498 <HAL_RCC_GetHCLKFreq>
 801102e:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8011030:	687b      	ldr	r3, [r7, #4]
 8011032:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8011034:	b2db      	uxtb	r3, r3
 8011036:	461a      	mov	r2, r3
 8011038:	4620      	mov	r0, r4
 801103a:	f004 faf5 	bl	8015628 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 801103e:	6878      	ldr	r0, [r7, #4]
 8011040:	f7f5 feed 	bl	8006e1e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8011044:	687b      	ldr	r3, [r7, #4]
 8011046:	681b      	ldr	r3, [r3, #0]
 8011048:	695a      	ldr	r2, [r3, #20]
 801104a:	687b      	ldr	r3, [r7, #4]
 801104c:	681b      	ldr	r3, [r3, #0]
 801104e:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8011052:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8011054:	687b      	ldr	r3, [r7, #4]
 8011056:	681b      	ldr	r3, [r3, #0]
 8011058:	4618      	mov	r0, r3
 801105a:	f005 fd7b 	bl	8016b54 <USB_ReadInterrupts>
 801105e:	4603      	mov	r3, r0
 8011060:	f003 0308 	and.w	r3, r3, #8
 8011064:	2b08      	cmp	r3, #8
 8011066:	d10a      	bne.n	801107e <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8011068:	6878      	ldr	r0, [r7, #4]
 801106a:	f7f5 feca 	bl	8006e02 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 801106e:	687b      	ldr	r3, [r7, #4]
 8011070:	681b      	ldr	r3, [r3, #0]
 8011072:	695a      	ldr	r2, [r3, #20]
 8011074:	687b      	ldr	r3, [r7, #4]
 8011076:	681b      	ldr	r3, [r3, #0]
 8011078:	f002 0208 	and.w	r2, r2, #8
 801107c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 801107e:	687b      	ldr	r3, [r7, #4]
 8011080:	681b      	ldr	r3, [r3, #0]
 8011082:	4618      	mov	r0, r3
 8011084:	f005 fd66 	bl	8016b54 <USB_ReadInterrupts>
 8011088:	4603      	mov	r3, r0
 801108a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 801108e:	2b80      	cmp	r3, #128	@ 0x80
 8011090:	d122      	bne.n	80110d8 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8011092:	6a3b      	ldr	r3, [r7, #32]
 8011094:	699b      	ldr	r3, [r3, #24]
 8011096:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 801109a:	6a3b      	ldr	r3, [r7, #32]
 801109c:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 801109e:	2301      	movs	r3, #1
 80110a0:	627b      	str	r3, [r7, #36]	@ 0x24
 80110a2:	e014      	b.n	80110ce <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80110a4:	6879      	ldr	r1, [r7, #4]
 80110a6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80110a8:	4613      	mov	r3, r2
 80110aa:	00db      	lsls	r3, r3, #3
 80110ac:	4413      	add	r3, r2
 80110ae:	009b      	lsls	r3, r3, #2
 80110b0:	440b      	add	r3, r1
 80110b2:	f203 237f 	addw	r3, r3, #639	@ 0x27f
 80110b6:	781b      	ldrb	r3, [r3, #0]
 80110b8:	2b01      	cmp	r3, #1
 80110ba:	d105      	bne.n	80110c8 <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80110bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80110be:	b2db      	uxtb	r3, r3
 80110c0:	4619      	mov	r1, r3
 80110c2:	6878      	ldr	r0, [r7, #4]
 80110c4:	f000 fb27 	bl	8011716 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80110c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80110ca:	3301      	adds	r3, #1
 80110cc:	627b      	str	r3, [r7, #36]	@ 0x24
 80110ce:	687b      	ldr	r3, [r7, #4]
 80110d0:	685b      	ldr	r3, [r3, #4]
 80110d2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80110d4:	429a      	cmp	r2, r3
 80110d6:	d3e5      	bcc.n	80110a4 <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80110d8:	687b      	ldr	r3, [r7, #4]
 80110da:	681b      	ldr	r3, [r3, #0]
 80110dc:	4618      	mov	r0, r3
 80110de:	f005 fd39 	bl	8016b54 <USB_ReadInterrupts>
 80110e2:	4603      	mov	r3, r0
 80110e4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80110e8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80110ec:	d13b      	bne.n	8011166 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80110ee:	2301      	movs	r3, #1
 80110f0:	627b      	str	r3, [r7, #36]	@ 0x24
 80110f2:	e02b      	b.n	801114c <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80110f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80110f6:	015a      	lsls	r2, r3, #5
 80110f8:	69fb      	ldr	r3, [r7, #28]
 80110fa:	4413      	add	r3, r2
 80110fc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8011100:	681b      	ldr	r3, [r3, #0]
 8011102:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8011104:	6879      	ldr	r1, [r7, #4]
 8011106:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8011108:	4613      	mov	r3, r2
 801110a:	00db      	lsls	r3, r3, #3
 801110c:	4413      	add	r3, r2
 801110e:	009b      	lsls	r3, r3, #2
 8011110:	440b      	add	r3, r1
 8011112:	3340      	adds	r3, #64	@ 0x40
 8011114:	781b      	ldrb	r3, [r3, #0]
 8011116:	2b01      	cmp	r3, #1
 8011118:	d115      	bne.n	8011146 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 801111a:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 801111c:	2b00      	cmp	r3, #0
 801111e:	da12      	bge.n	8011146 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8011120:	6879      	ldr	r1, [r7, #4]
 8011122:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8011124:	4613      	mov	r3, r2
 8011126:	00db      	lsls	r3, r3, #3
 8011128:	4413      	add	r3, r2
 801112a:	009b      	lsls	r3, r3, #2
 801112c:	440b      	add	r3, r1
 801112e:	333f      	adds	r3, #63	@ 0x3f
 8011130:	2201      	movs	r2, #1
 8011132:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8011134:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011136:	b2db      	uxtb	r3, r3
 8011138:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 801113c:	b2db      	uxtb	r3, r3
 801113e:	4619      	mov	r1, r3
 8011140:	6878      	ldr	r0, [r7, #4]
 8011142:	f000 fae8 	bl	8011716 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8011146:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011148:	3301      	adds	r3, #1
 801114a:	627b      	str	r3, [r7, #36]	@ 0x24
 801114c:	687b      	ldr	r3, [r7, #4]
 801114e:	685b      	ldr	r3, [r3, #4]
 8011150:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8011152:	429a      	cmp	r2, r3
 8011154:	d3ce      	bcc.n	80110f4 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8011156:	687b      	ldr	r3, [r7, #4]
 8011158:	681b      	ldr	r3, [r3, #0]
 801115a:	695a      	ldr	r2, [r3, #20]
 801115c:	687b      	ldr	r3, [r7, #4]
 801115e:	681b      	ldr	r3, [r3, #0]
 8011160:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8011164:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8011166:	687b      	ldr	r3, [r7, #4]
 8011168:	681b      	ldr	r3, [r3, #0]
 801116a:	4618      	mov	r0, r3
 801116c:	f005 fcf2 	bl	8016b54 <USB_ReadInterrupts>
 8011170:	4603      	mov	r3, r0
 8011172:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8011176:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 801117a:	d155      	bne.n	8011228 <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 801117c:	2301      	movs	r3, #1
 801117e:	627b      	str	r3, [r7, #36]	@ 0x24
 8011180:	e045      	b.n	801120e <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8011182:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011184:	015a      	lsls	r2, r3, #5
 8011186:	69fb      	ldr	r3, [r7, #28]
 8011188:	4413      	add	r3, r2
 801118a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801118e:	681b      	ldr	r3, [r3, #0]
 8011190:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8011192:	6879      	ldr	r1, [r7, #4]
 8011194:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8011196:	4613      	mov	r3, r2
 8011198:	00db      	lsls	r3, r3, #3
 801119a:	4413      	add	r3, r2
 801119c:	009b      	lsls	r3, r3, #2
 801119e:	440b      	add	r3, r1
 80111a0:	f503 7320 	add.w	r3, r3, #640	@ 0x280
 80111a4:	781b      	ldrb	r3, [r3, #0]
 80111a6:	2b01      	cmp	r3, #1
 80111a8:	d12e      	bne.n	8011208 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80111aa:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80111ac:	2b00      	cmp	r3, #0
 80111ae:	da2b      	bge.n	8011208 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 80111b0:	69bb      	ldr	r3, [r7, #24]
 80111b2:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80111b6:	687b      	ldr	r3, [r7, #4]
 80111b8:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	@ 0x4fc
 80111bc:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80111c0:	429a      	cmp	r2, r3
 80111c2:	d121      	bne.n	8011208 <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80111c4:	6879      	ldr	r1, [r7, #4]
 80111c6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80111c8:	4613      	mov	r3, r2
 80111ca:	00db      	lsls	r3, r3, #3
 80111cc:	4413      	add	r3, r2
 80111ce:	009b      	lsls	r3, r3, #2
 80111d0:	440b      	add	r3, r1
 80111d2:	f203 237f 	addw	r3, r3, #639	@ 0x27f
 80111d6:	2201      	movs	r2, #1
 80111d8:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80111da:	6a3b      	ldr	r3, [r7, #32]
 80111dc:	699b      	ldr	r3, [r3, #24]
 80111de:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80111e2:	6a3b      	ldr	r3, [r7, #32]
 80111e4:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80111e6:	6a3b      	ldr	r3, [r7, #32]
 80111e8:	695b      	ldr	r3, [r3, #20]
 80111ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80111ee:	2b00      	cmp	r3, #0
 80111f0:	d10a      	bne.n	8011208 <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80111f2:	69fb      	ldr	r3, [r7, #28]
 80111f4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80111f8:	685b      	ldr	r3, [r3, #4]
 80111fa:	69fa      	ldr	r2, [r7, #28]
 80111fc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8011200:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8011204:	6053      	str	r3, [r2, #4]
            break;
 8011206:	e007      	b.n	8011218 <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8011208:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801120a:	3301      	adds	r3, #1
 801120c:	627b      	str	r3, [r7, #36]	@ 0x24
 801120e:	687b      	ldr	r3, [r7, #4]
 8011210:	685b      	ldr	r3, [r3, #4]
 8011212:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8011214:	429a      	cmp	r2, r3
 8011216:	d3b4      	bcc.n	8011182 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8011218:	687b      	ldr	r3, [r7, #4]
 801121a:	681b      	ldr	r3, [r3, #0]
 801121c:	695a      	ldr	r2, [r3, #20]
 801121e:	687b      	ldr	r3, [r7, #4]
 8011220:	681b      	ldr	r3, [r3, #0]
 8011222:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8011226:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8011228:	687b      	ldr	r3, [r7, #4]
 801122a:	681b      	ldr	r3, [r3, #0]
 801122c:	4618      	mov	r0, r3
 801122e:	f005 fc91 	bl	8016b54 <USB_ReadInterrupts>
 8011232:	4603      	mov	r3, r0
 8011234:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8011238:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801123c:	d10a      	bne.n	8011254 <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 801123e:	6878      	ldr	r0, [r7, #4]
 8011240:	f7f5 fe6e 	bl	8006f20 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8011244:	687b      	ldr	r3, [r7, #4]
 8011246:	681b      	ldr	r3, [r3, #0]
 8011248:	695a      	ldr	r2, [r3, #20]
 801124a:	687b      	ldr	r3, [r7, #4]
 801124c:	681b      	ldr	r3, [r3, #0]
 801124e:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8011252:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8011254:	687b      	ldr	r3, [r7, #4]
 8011256:	681b      	ldr	r3, [r3, #0]
 8011258:	4618      	mov	r0, r3
 801125a:	f005 fc7b 	bl	8016b54 <USB_ReadInterrupts>
 801125e:	4603      	mov	r3, r0
 8011260:	f003 0304 	and.w	r3, r3, #4
 8011264:	2b04      	cmp	r3, #4
 8011266:	d115      	bne.n	8011294 <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8011268:	687b      	ldr	r3, [r7, #4]
 801126a:	681b      	ldr	r3, [r3, #0]
 801126c:	685b      	ldr	r3, [r3, #4]
 801126e:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8011270:	69bb      	ldr	r3, [r7, #24]
 8011272:	f003 0304 	and.w	r3, r3, #4
 8011276:	2b00      	cmp	r3, #0
 8011278:	d002      	beq.n	8011280 <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 801127a:	6878      	ldr	r0, [r7, #4]
 801127c:	f7f5 fe5e 	bl	8006f3c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8011280:	687b      	ldr	r3, [r7, #4]
 8011282:	681b      	ldr	r3, [r3, #0]
 8011284:	6859      	ldr	r1, [r3, #4]
 8011286:	687b      	ldr	r3, [r7, #4]
 8011288:	681b      	ldr	r3, [r3, #0]
 801128a:	69ba      	ldr	r2, [r7, #24]
 801128c:	430a      	orrs	r2, r1
 801128e:	605a      	str	r2, [r3, #4]
 8011290:	e000      	b.n	8011294 <HAL_PCD_IRQHandler+0x938>
      return;
 8011292:	bf00      	nop
    }
  }
}
 8011294:	3734      	adds	r7, #52	@ 0x34
 8011296:	46bd      	mov	sp, r7
 8011298:	bd90      	pop	{r4, r7, pc}

0801129a <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 801129a:	b580      	push	{r7, lr}
 801129c:	b082      	sub	sp, #8
 801129e:	af00      	add	r7, sp, #0
 80112a0:	6078      	str	r0, [r7, #4]
 80112a2:	460b      	mov	r3, r1
 80112a4:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80112a6:	687b      	ldr	r3, [r7, #4]
 80112a8:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 80112ac:	2b01      	cmp	r3, #1
 80112ae:	d101      	bne.n	80112b4 <HAL_PCD_SetAddress+0x1a>
 80112b0:	2302      	movs	r3, #2
 80112b2:	e013      	b.n	80112dc <HAL_PCD_SetAddress+0x42>
 80112b4:	687b      	ldr	r3, [r7, #4]
 80112b6:	2201      	movs	r2, #1
 80112b8:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
  hpcd->USB_Address = address;
 80112bc:	687b      	ldr	r3, [r7, #4]
 80112be:	78fa      	ldrb	r2, [r7, #3]
 80112c0:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80112c4:	687b      	ldr	r3, [r7, #4]
 80112c6:	681b      	ldr	r3, [r3, #0]
 80112c8:	78fa      	ldrb	r2, [r7, #3]
 80112ca:	4611      	mov	r1, r2
 80112cc:	4618      	mov	r0, r3
 80112ce:	f005 fbd9 	bl	8016a84 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80112d2:	687b      	ldr	r3, [r7, #4]
 80112d4:	2200      	movs	r2, #0
 80112d6:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  return HAL_OK;
 80112da:	2300      	movs	r3, #0
}
 80112dc:	4618      	mov	r0, r3
 80112de:	3708      	adds	r7, #8
 80112e0:	46bd      	mov	sp, r7
 80112e2:	bd80      	pop	{r7, pc}

080112e4 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80112e4:	b580      	push	{r7, lr}
 80112e6:	b084      	sub	sp, #16
 80112e8:	af00      	add	r7, sp, #0
 80112ea:	6078      	str	r0, [r7, #4]
 80112ec:	4608      	mov	r0, r1
 80112ee:	4611      	mov	r1, r2
 80112f0:	461a      	mov	r2, r3
 80112f2:	4603      	mov	r3, r0
 80112f4:	70fb      	strb	r3, [r7, #3]
 80112f6:	460b      	mov	r3, r1
 80112f8:	803b      	strh	r3, [r7, #0]
 80112fa:	4613      	mov	r3, r2
 80112fc:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80112fe:	2300      	movs	r3, #0
 8011300:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8011302:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8011306:	2b00      	cmp	r3, #0
 8011308:	da0f      	bge.n	801132a <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 801130a:	78fb      	ldrb	r3, [r7, #3]
 801130c:	f003 020f 	and.w	r2, r3, #15
 8011310:	4613      	mov	r3, r2
 8011312:	00db      	lsls	r3, r3, #3
 8011314:	4413      	add	r3, r2
 8011316:	009b      	lsls	r3, r3, #2
 8011318:	3338      	adds	r3, #56	@ 0x38
 801131a:	687a      	ldr	r2, [r7, #4]
 801131c:	4413      	add	r3, r2
 801131e:	3304      	adds	r3, #4
 8011320:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8011322:	68fb      	ldr	r3, [r7, #12]
 8011324:	2201      	movs	r2, #1
 8011326:	705a      	strb	r2, [r3, #1]
 8011328:	e00f      	b.n	801134a <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 801132a:	78fb      	ldrb	r3, [r7, #3]
 801132c:	f003 020f 	and.w	r2, r3, #15
 8011330:	4613      	mov	r3, r2
 8011332:	00db      	lsls	r3, r3, #3
 8011334:	4413      	add	r3, r2
 8011336:	009b      	lsls	r3, r3, #2
 8011338:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 801133c:	687a      	ldr	r2, [r7, #4]
 801133e:	4413      	add	r3, r2
 8011340:	3304      	adds	r3, #4
 8011342:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8011344:	68fb      	ldr	r3, [r7, #12]
 8011346:	2200      	movs	r2, #0
 8011348:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 801134a:	78fb      	ldrb	r3, [r7, #3]
 801134c:	f003 030f 	and.w	r3, r3, #15
 8011350:	b2da      	uxtb	r2, r3
 8011352:	68fb      	ldr	r3, [r7, #12]
 8011354:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8011356:	883a      	ldrh	r2, [r7, #0]
 8011358:	68fb      	ldr	r3, [r7, #12]
 801135a:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 801135c:	68fb      	ldr	r3, [r7, #12]
 801135e:	78ba      	ldrb	r2, [r7, #2]
 8011360:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8011362:	68fb      	ldr	r3, [r7, #12]
 8011364:	785b      	ldrb	r3, [r3, #1]
 8011366:	2b00      	cmp	r3, #0
 8011368:	d004      	beq.n	8011374 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 801136a:	68fb      	ldr	r3, [r7, #12]
 801136c:	781b      	ldrb	r3, [r3, #0]
 801136e:	461a      	mov	r2, r3
 8011370:	68fb      	ldr	r3, [r7, #12]
 8011372:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8011374:	78bb      	ldrb	r3, [r7, #2]
 8011376:	2b02      	cmp	r3, #2
 8011378:	d102      	bne.n	8011380 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 801137a:	68fb      	ldr	r3, [r7, #12]
 801137c:	2200      	movs	r2, #0
 801137e:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8011380:	687b      	ldr	r3, [r7, #4]
 8011382:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 8011386:	2b01      	cmp	r3, #1
 8011388:	d101      	bne.n	801138e <HAL_PCD_EP_Open+0xaa>
 801138a:	2302      	movs	r3, #2
 801138c:	e00e      	b.n	80113ac <HAL_PCD_EP_Open+0xc8>
 801138e:	687b      	ldr	r3, [r7, #4]
 8011390:	2201      	movs	r2, #1
 8011392:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8011396:	687b      	ldr	r3, [r7, #4]
 8011398:	681b      	ldr	r3, [r3, #0]
 801139a:	68f9      	ldr	r1, [r7, #12]
 801139c:	4618      	mov	r0, r3
 801139e:	f004 fc59 	bl	8015c54 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80113a2:	687b      	ldr	r3, [r7, #4]
 80113a4:	2200      	movs	r2, #0
 80113a6:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  return ret;
 80113aa:	7afb      	ldrb	r3, [r7, #11]
}
 80113ac:	4618      	mov	r0, r3
 80113ae:	3710      	adds	r7, #16
 80113b0:	46bd      	mov	sp, r7
 80113b2:	bd80      	pop	{r7, pc}

080113b4 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80113b4:	b580      	push	{r7, lr}
 80113b6:	b084      	sub	sp, #16
 80113b8:	af00      	add	r7, sp, #0
 80113ba:	6078      	str	r0, [r7, #4]
 80113bc:	460b      	mov	r3, r1
 80113be:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80113c0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80113c4:	2b00      	cmp	r3, #0
 80113c6:	da0f      	bge.n	80113e8 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80113c8:	78fb      	ldrb	r3, [r7, #3]
 80113ca:	f003 020f 	and.w	r2, r3, #15
 80113ce:	4613      	mov	r3, r2
 80113d0:	00db      	lsls	r3, r3, #3
 80113d2:	4413      	add	r3, r2
 80113d4:	009b      	lsls	r3, r3, #2
 80113d6:	3338      	adds	r3, #56	@ 0x38
 80113d8:	687a      	ldr	r2, [r7, #4]
 80113da:	4413      	add	r3, r2
 80113dc:	3304      	adds	r3, #4
 80113de:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80113e0:	68fb      	ldr	r3, [r7, #12]
 80113e2:	2201      	movs	r2, #1
 80113e4:	705a      	strb	r2, [r3, #1]
 80113e6:	e00f      	b.n	8011408 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80113e8:	78fb      	ldrb	r3, [r7, #3]
 80113ea:	f003 020f 	and.w	r2, r3, #15
 80113ee:	4613      	mov	r3, r2
 80113f0:	00db      	lsls	r3, r3, #3
 80113f2:	4413      	add	r3, r2
 80113f4:	009b      	lsls	r3, r3, #2
 80113f6:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 80113fa:	687a      	ldr	r2, [r7, #4]
 80113fc:	4413      	add	r3, r2
 80113fe:	3304      	adds	r3, #4
 8011400:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8011402:	68fb      	ldr	r3, [r7, #12]
 8011404:	2200      	movs	r2, #0
 8011406:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8011408:	78fb      	ldrb	r3, [r7, #3]
 801140a:	f003 030f 	and.w	r3, r3, #15
 801140e:	b2da      	uxtb	r2, r3
 8011410:	68fb      	ldr	r3, [r7, #12]
 8011412:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8011414:	687b      	ldr	r3, [r7, #4]
 8011416:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 801141a:	2b01      	cmp	r3, #1
 801141c:	d101      	bne.n	8011422 <HAL_PCD_EP_Close+0x6e>
 801141e:	2302      	movs	r3, #2
 8011420:	e00e      	b.n	8011440 <HAL_PCD_EP_Close+0x8c>
 8011422:	687b      	ldr	r3, [r7, #4]
 8011424:	2201      	movs	r2, #1
 8011426:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 801142a:	687b      	ldr	r3, [r7, #4]
 801142c:	681b      	ldr	r3, [r3, #0]
 801142e:	68f9      	ldr	r1, [r7, #12]
 8011430:	4618      	mov	r0, r3
 8011432:	f004 fc97 	bl	8015d64 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8011436:	687b      	ldr	r3, [r7, #4]
 8011438:	2200      	movs	r2, #0
 801143a:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
  return HAL_OK;
 801143e:	2300      	movs	r3, #0
}
 8011440:	4618      	mov	r0, r3
 8011442:	3710      	adds	r7, #16
 8011444:	46bd      	mov	sp, r7
 8011446:	bd80      	pop	{r7, pc}

08011448 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8011448:	b580      	push	{r7, lr}
 801144a:	b086      	sub	sp, #24
 801144c:	af00      	add	r7, sp, #0
 801144e:	60f8      	str	r0, [r7, #12]
 8011450:	607a      	str	r2, [r7, #4]
 8011452:	603b      	str	r3, [r7, #0]
 8011454:	460b      	mov	r3, r1
 8011456:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8011458:	7afb      	ldrb	r3, [r7, #11]
 801145a:	f003 020f 	and.w	r2, r3, #15
 801145e:	4613      	mov	r3, r2
 8011460:	00db      	lsls	r3, r3, #3
 8011462:	4413      	add	r3, r2
 8011464:	009b      	lsls	r3, r3, #2
 8011466:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 801146a:	68fa      	ldr	r2, [r7, #12]
 801146c:	4413      	add	r3, r2
 801146e:	3304      	adds	r3, #4
 8011470:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8011472:	697b      	ldr	r3, [r7, #20]
 8011474:	687a      	ldr	r2, [r7, #4]
 8011476:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8011478:	697b      	ldr	r3, [r7, #20]
 801147a:	683a      	ldr	r2, [r7, #0]
 801147c:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 801147e:	697b      	ldr	r3, [r7, #20]
 8011480:	2200      	movs	r2, #0
 8011482:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8011484:	697b      	ldr	r3, [r7, #20]
 8011486:	2200      	movs	r2, #0
 8011488:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 801148a:	7afb      	ldrb	r3, [r7, #11]
 801148c:	f003 030f 	and.w	r3, r3, #15
 8011490:	b2da      	uxtb	r2, r3
 8011492:	697b      	ldr	r3, [r7, #20]
 8011494:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8011496:	68fb      	ldr	r3, [r7, #12]
 8011498:	691b      	ldr	r3, [r3, #16]
 801149a:	2b01      	cmp	r3, #1
 801149c:	d102      	bne.n	80114a4 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 801149e:	687a      	ldr	r2, [r7, #4]
 80114a0:	697b      	ldr	r3, [r7, #20]
 80114a2:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80114a4:	7afb      	ldrb	r3, [r7, #11]
 80114a6:	f003 030f 	and.w	r3, r3, #15
 80114aa:	2b00      	cmp	r3, #0
 80114ac:	d109      	bne.n	80114c2 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80114ae:	68fb      	ldr	r3, [r7, #12]
 80114b0:	6818      	ldr	r0, [r3, #0]
 80114b2:	68fb      	ldr	r3, [r7, #12]
 80114b4:	691b      	ldr	r3, [r3, #16]
 80114b6:	b2db      	uxtb	r3, r3
 80114b8:	461a      	mov	r2, r3
 80114ba:	6979      	ldr	r1, [r7, #20]
 80114bc:	f004 ff76 	bl	80163ac <USB_EP0StartXfer>
 80114c0:	e008      	b.n	80114d4 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80114c2:	68fb      	ldr	r3, [r7, #12]
 80114c4:	6818      	ldr	r0, [r3, #0]
 80114c6:	68fb      	ldr	r3, [r7, #12]
 80114c8:	691b      	ldr	r3, [r3, #16]
 80114ca:	b2db      	uxtb	r3, r3
 80114cc:	461a      	mov	r2, r3
 80114ce:	6979      	ldr	r1, [r7, #20]
 80114d0:	f004 fd24 	bl	8015f1c <USB_EPStartXfer>
  }

  return HAL_OK;
 80114d4:	2300      	movs	r3, #0
}
 80114d6:	4618      	mov	r0, r3
 80114d8:	3718      	adds	r7, #24
 80114da:	46bd      	mov	sp, r7
 80114dc:	bd80      	pop	{r7, pc}

080114de <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80114de:	b480      	push	{r7}
 80114e0:	b083      	sub	sp, #12
 80114e2:	af00      	add	r7, sp, #0
 80114e4:	6078      	str	r0, [r7, #4]
 80114e6:	460b      	mov	r3, r1
 80114e8:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80114ea:	78fb      	ldrb	r3, [r7, #3]
 80114ec:	f003 020f 	and.w	r2, r3, #15
 80114f0:	6879      	ldr	r1, [r7, #4]
 80114f2:	4613      	mov	r3, r2
 80114f4:	00db      	lsls	r3, r3, #3
 80114f6:	4413      	add	r3, r2
 80114f8:	009b      	lsls	r3, r3, #2
 80114fa:	440b      	add	r3, r1
 80114fc:	f503 7327 	add.w	r3, r3, #668	@ 0x29c
 8011500:	681b      	ldr	r3, [r3, #0]
}
 8011502:	4618      	mov	r0, r3
 8011504:	370c      	adds	r7, #12
 8011506:	46bd      	mov	sp, r7
 8011508:	f85d 7b04 	ldr.w	r7, [sp], #4
 801150c:	4770      	bx	lr

0801150e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 801150e:	b580      	push	{r7, lr}
 8011510:	b086      	sub	sp, #24
 8011512:	af00      	add	r7, sp, #0
 8011514:	60f8      	str	r0, [r7, #12]
 8011516:	607a      	str	r2, [r7, #4]
 8011518:	603b      	str	r3, [r7, #0]
 801151a:	460b      	mov	r3, r1
 801151c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 801151e:	7afb      	ldrb	r3, [r7, #11]
 8011520:	f003 020f 	and.w	r2, r3, #15
 8011524:	4613      	mov	r3, r2
 8011526:	00db      	lsls	r3, r3, #3
 8011528:	4413      	add	r3, r2
 801152a:	009b      	lsls	r3, r3, #2
 801152c:	3338      	adds	r3, #56	@ 0x38
 801152e:	68fa      	ldr	r2, [r7, #12]
 8011530:	4413      	add	r3, r2
 8011532:	3304      	adds	r3, #4
 8011534:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8011536:	697b      	ldr	r3, [r7, #20]
 8011538:	687a      	ldr	r2, [r7, #4]
 801153a:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 801153c:	697b      	ldr	r3, [r7, #20]
 801153e:	683a      	ldr	r2, [r7, #0]
 8011540:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8011542:	697b      	ldr	r3, [r7, #20]
 8011544:	2200      	movs	r2, #0
 8011546:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8011548:	697b      	ldr	r3, [r7, #20]
 801154a:	2201      	movs	r2, #1
 801154c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 801154e:	7afb      	ldrb	r3, [r7, #11]
 8011550:	f003 030f 	and.w	r3, r3, #15
 8011554:	b2da      	uxtb	r2, r3
 8011556:	697b      	ldr	r3, [r7, #20]
 8011558:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 801155a:	68fb      	ldr	r3, [r7, #12]
 801155c:	691b      	ldr	r3, [r3, #16]
 801155e:	2b01      	cmp	r3, #1
 8011560:	d102      	bne.n	8011568 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8011562:	687a      	ldr	r2, [r7, #4]
 8011564:	697b      	ldr	r3, [r7, #20]
 8011566:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8011568:	7afb      	ldrb	r3, [r7, #11]
 801156a:	f003 030f 	and.w	r3, r3, #15
 801156e:	2b00      	cmp	r3, #0
 8011570:	d109      	bne.n	8011586 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8011572:	68fb      	ldr	r3, [r7, #12]
 8011574:	6818      	ldr	r0, [r3, #0]
 8011576:	68fb      	ldr	r3, [r7, #12]
 8011578:	691b      	ldr	r3, [r3, #16]
 801157a:	b2db      	uxtb	r3, r3
 801157c:	461a      	mov	r2, r3
 801157e:	6979      	ldr	r1, [r7, #20]
 8011580:	f004 ff14 	bl	80163ac <USB_EP0StartXfer>
 8011584:	e008      	b.n	8011598 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8011586:	68fb      	ldr	r3, [r7, #12]
 8011588:	6818      	ldr	r0, [r3, #0]
 801158a:	68fb      	ldr	r3, [r7, #12]
 801158c:	691b      	ldr	r3, [r3, #16]
 801158e:	b2db      	uxtb	r3, r3
 8011590:	461a      	mov	r2, r3
 8011592:	6979      	ldr	r1, [r7, #20]
 8011594:	f004 fcc2 	bl	8015f1c <USB_EPStartXfer>
  }

  return HAL_OK;
 8011598:	2300      	movs	r3, #0
}
 801159a:	4618      	mov	r0, r3
 801159c:	3718      	adds	r7, #24
 801159e:	46bd      	mov	sp, r7
 80115a0:	bd80      	pop	{r7, pc}

080115a2 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80115a2:	b580      	push	{r7, lr}
 80115a4:	b084      	sub	sp, #16
 80115a6:	af00      	add	r7, sp, #0
 80115a8:	6078      	str	r0, [r7, #4]
 80115aa:	460b      	mov	r3, r1
 80115ac:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80115ae:	78fb      	ldrb	r3, [r7, #3]
 80115b0:	f003 020f 	and.w	r2, r3, #15
 80115b4:	687b      	ldr	r3, [r7, #4]
 80115b6:	685b      	ldr	r3, [r3, #4]
 80115b8:	429a      	cmp	r2, r3
 80115ba:	d901      	bls.n	80115c0 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80115bc:	2301      	movs	r3, #1
 80115be:	e050      	b.n	8011662 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80115c0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80115c4:	2b00      	cmp	r3, #0
 80115c6:	da0f      	bge.n	80115e8 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80115c8:	78fb      	ldrb	r3, [r7, #3]
 80115ca:	f003 020f 	and.w	r2, r3, #15
 80115ce:	4613      	mov	r3, r2
 80115d0:	00db      	lsls	r3, r3, #3
 80115d2:	4413      	add	r3, r2
 80115d4:	009b      	lsls	r3, r3, #2
 80115d6:	3338      	adds	r3, #56	@ 0x38
 80115d8:	687a      	ldr	r2, [r7, #4]
 80115da:	4413      	add	r3, r2
 80115dc:	3304      	adds	r3, #4
 80115de:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80115e0:	68fb      	ldr	r3, [r7, #12]
 80115e2:	2201      	movs	r2, #1
 80115e4:	705a      	strb	r2, [r3, #1]
 80115e6:	e00d      	b.n	8011604 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80115e8:	78fa      	ldrb	r2, [r7, #3]
 80115ea:	4613      	mov	r3, r2
 80115ec:	00db      	lsls	r3, r3, #3
 80115ee:	4413      	add	r3, r2
 80115f0:	009b      	lsls	r3, r3, #2
 80115f2:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 80115f6:	687a      	ldr	r2, [r7, #4]
 80115f8:	4413      	add	r3, r2
 80115fa:	3304      	adds	r3, #4
 80115fc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80115fe:	68fb      	ldr	r3, [r7, #12]
 8011600:	2200      	movs	r2, #0
 8011602:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8011604:	68fb      	ldr	r3, [r7, #12]
 8011606:	2201      	movs	r2, #1
 8011608:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 801160a:	78fb      	ldrb	r3, [r7, #3]
 801160c:	f003 030f 	and.w	r3, r3, #15
 8011610:	b2da      	uxtb	r2, r3
 8011612:	68fb      	ldr	r3, [r7, #12]
 8011614:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8011616:	687b      	ldr	r3, [r7, #4]
 8011618:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 801161c:	2b01      	cmp	r3, #1
 801161e:	d101      	bne.n	8011624 <HAL_PCD_EP_SetStall+0x82>
 8011620:	2302      	movs	r3, #2
 8011622:	e01e      	b.n	8011662 <HAL_PCD_EP_SetStall+0xc0>
 8011624:	687b      	ldr	r3, [r7, #4]
 8011626:	2201      	movs	r2, #1
 8011628:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 801162c:	687b      	ldr	r3, [r7, #4]
 801162e:	681b      	ldr	r3, [r3, #0]
 8011630:	68f9      	ldr	r1, [r7, #12]
 8011632:	4618      	mov	r0, r3
 8011634:	f005 f952 	bl	80168dc <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8011638:	78fb      	ldrb	r3, [r7, #3]
 801163a:	f003 030f 	and.w	r3, r3, #15
 801163e:	2b00      	cmp	r3, #0
 8011640:	d10a      	bne.n	8011658 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8011642:	687b      	ldr	r3, [r7, #4]
 8011644:	6818      	ldr	r0, [r3, #0]
 8011646:	687b      	ldr	r3, [r7, #4]
 8011648:	691b      	ldr	r3, [r3, #16]
 801164a:	b2d9      	uxtb	r1, r3
 801164c:	687b      	ldr	r3, [r7, #4]
 801164e:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 8011652:	461a      	mov	r2, r3
 8011654:	f005 fb42 	bl	8016cdc <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8011658:	687b      	ldr	r3, [r7, #4]
 801165a:	2200      	movs	r2, #0
 801165c:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  return HAL_OK;
 8011660:	2300      	movs	r3, #0
}
 8011662:	4618      	mov	r0, r3
 8011664:	3710      	adds	r7, #16
 8011666:	46bd      	mov	sp, r7
 8011668:	bd80      	pop	{r7, pc}

0801166a <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 801166a:	b580      	push	{r7, lr}
 801166c:	b084      	sub	sp, #16
 801166e:	af00      	add	r7, sp, #0
 8011670:	6078      	str	r0, [r7, #4]
 8011672:	460b      	mov	r3, r1
 8011674:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8011676:	78fb      	ldrb	r3, [r7, #3]
 8011678:	f003 020f 	and.w	r2, r3, #15
 801167c:	687b      	ldr	r3, [r7, #4]
 801167e:	685b      	ldr	r3, [r3, #4]
 8011680:	429a      	cmp	r2, r3
 8011682:	d901      	bls.n	8011688 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8011684:	2301      	movs	r3, #1
 8011686:	e042      	b.n	801170e <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8011688:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801168c:	2b00      	cmp	r3, #0
 801168e:	da0f      	bge.n	80116b0 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8011690:	78fb      	ldrb	r3, [r7, #3]
 8011692:	f003 020f 	and.w	r2, r3, #15
 8011696:	4613      	mov	r3, r2
 8011698:	00db      	lsls	r3, r3, #3
 801169a:	4413      	add	r3, r2
 801169c:	009b      	lsls	r3, r3, #2
 801169e:	3338      	adds	r3, #56	@ 0x38
 80116a0:	687a      	ldr	r2, [r7, #4]
 80116a2:	4413      	add	r3, r2
 80116a4:	3304      	adds	r3, #4
 80116a6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80116a8:	68fb      	ldr	r3, [r7, #12]
 80116aa:	2201      	movs	r2, #1
 80116ac:	705a      	strb	r2, [r3, #1]
 80116ae:	e00f      	b.n	80116d0 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80116b0:	78fb      	ldrb	r3, [r7, #3]
 80116b2:	f003 020f 	and.w	r2, r3, #15
 80116b6:	4613      	mov	r3, r2
 80116b8:	00db      	lsls	r3, r3, #3
 80116ba:	4413      	add	r3, r2
 80116bc:	009b      	lsls	r3, r3, #2
 80116be:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 80116c2:	687a      	ldr	r2, [r7, #4]
 80116c4:	4413      	add	r3, r2
 80116c6:	3304      	adds	r3, #4
 80116c8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80116ca:	68fb      	ldr	r3, [r7, #12]
 80116cc:	2200      	movs	r2, #0
 80116ce:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80116d0:	68fb      	ldr	r3, [r7, #12]
 80116d2:	2200      	movs	r2, #0
 80116d4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80116d6:	78fb      	ldrb	r3, [r7, #3]
 80116d8:	f003 030f 	and.w	r3, r3, #15
 80116dc:	b2da      	uxtb	r2, r3
 80116de:	68fb      	ldr	r3, [r7, #12]
 80116e0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80116e2:	687b      	ldr	r3, [r7, #4]
 80116e4:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 80116e8:	2b01      	cmp	r3, #1
 80116ea:	d101      	bne.n	80116f0 <HAL_PCD_EP_ClrStall+0x86>
 80116ec:	2302      	movs	r3, #2
 80116ee:	e00e      	b.n	801170e <HAL_PCD_EP_ClrStall+0xa4>
 80116f0:	687b      	ldr	r3, [r7, #4]
 80116f2:	2201      	movs	r2, #1
 80116f4:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80116f8:	687b      	ldr	r3, [r7, #4]
 80116fa:	681b      	ldr	r3, [r3, #0]
 80116fc:	68f9      	ldr	r1, [r7, #12]
 80116fe:	4618      	mov	r0, r3
 8011700:	f005 f95a 	bl	80169b8 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8011704:	687b      	ldr	r3, [r7, #4]
 8011706:	2200      	movs	r2, #0
 8011708:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  return HAL_OK;
 801170c:	2300      	movs	r3, #0
}
 801170e:	4618      	mov	r0, r3
 8011710:	3710      	adds	r7, #16
 8011712:	46bd      	mov	sp, r7
 8011714:	bd80      	pop	{r7, pc}

08011716 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8011716:	b580      	push	{r7, lr}
 8011718:	b084      	sub	sp, #16
 801171a:	af00      	add	r7, sp, #0
 801171c:	6078      	str	r0, [r7, #4]
 801171e:	460b      	mov	r3, r1
 8011720:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8011722:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8011726:	2b00      	cmp	r3, #0
 8011728:	da0c      	bge.n	8011744 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 801172a:	78fb      	ldrb	r3, [r7, #3]
 801172c:	f003 020f 	and.w	r2, r3, #15
 8011730:	4613      	mov	r3, r2
 8011732:	00db      	lsls	r3, r3, #3
 8011734:	4413      	add	r3, r2
 8011736:	009b      	lsls	r3, r3, #2
 8011738:	3338      	adds	r3, #56	@ 0x38
 801173a:	687a      	ldr	r2, [r7, #4]
 801173c:	4413      	add	r3, r2
 801173e:	3304      	adds	r3, #4
 8011740:	60fb      	str	r3, [r7, #12]
 8011742:	e00c      	b.n	801175e <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8011744:	78fb      	ldrb	r3, [r7, #3]
 8011746:	f003 020f 	and.w	r2, r3, #15
 801174a:	4613      	mov	r3, r2
 801174c:	00db      	lsls	r3, r3, #3
 801174e:	4413      	add	r3, r2
 8011750:	009b      	lsls	r3, r3, #2
 8011752:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8011756:	687a      	ldr	r2, [r7, #4]
 8011758:	4413      	add	r3, r2
 801175a:	3304      	adds	r3, #4
 801175c:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 801175e:	687b      	ldr	r3, [r7, #4]
 8011760:	681b      	ldr	r3, [r3, #0]
 8011762:	68f9      	ldr	r1, [r7, #12]
 8011764:	4618      	mov	r0, r3
 8011766:	f004 ff79 	bl	801665c <USB_EPStopXfer>
 801176a:	4603      	mov	r3, r0
 801176c:	72fb      	strb	r3, [r7, #11]

  return ret;
 801176e:	7afb      	ldrb	r3, [r7, #11]
}
 8011770:	4618      	mov	r0, r3
 8011772:	3710      	adds	r7, #16
 8011774:	46bd      	mov	sp, r7
 8011776:	bd80      	pop	{r7, pc}

08011778 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8011778:	b580      	push	{r7, lr}
 801177a:	b08a      	sub	sp, #40	@ 0x28
 801177c:	af02      	add	r7, sp, #8
 801177e:	6078      	str	r0, [r7, #4]
 8011780:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8011782:	687b      	ldr	r3, [r7, #4]
 8011784:	681b      	ldr	r3, [r3, #0]
 8011786:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011788:	697b      	ldr	r3, [r7, #20]
 801178a:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 801178c:	683a      	ldr	r2, [r7, #0]
 801178e:	4613      	mov	r3, r2
 8011790:	00db      	lsls	r3, r3, #3
 8011792:	4413      	add	r3, r2
 8011794:	009b      	lsls	r3, r3, #2
 8011796:	3338      	adds	r3, #56	@ 0x38
 8011798:	687a      	ldr	r2, [r7, #4]
 801179a:	4413      	add	r3, r2
 801179c:	3304      	adds	r3, #4
 801179e:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80117a0:	68fb      	ldr	r3, [r7, #12]
 80117a2:	6a1a      	ldr	r2, [r3, #32]
 80117a4:	68fb      	ldr	r3, [r7, #12]
 80117a6:	699b      	ldr	r3, [r3, #24]
 80117a8:	429a      	cmp	r2, r3
 80117aa:	d901      	bls.n	80117b0 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80117ac:	2301      	movs	r3, #1
 80117ae:	e06c      	b.n	801188a <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80117b0:	68fb      	ldr	r3, [r7, #12]
 80117b2:	699a      	ldr	r2, [r3, #24]
 80117b4:	68fb      	ldr	r3, [r7, #12]
 80117b6:	6a1b      	ldr	r3, [r3, #32]
 80117b8:	1ad3      	subs	r3, r2, r3
 80117ba:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80117bc:	68fb      	ldr	r3, [r7, #12]
 80117be:	68db      	ldr	r3, [r3, #12]
 80117c0:	69fa      	ldr	r2, [r7, #28]
 80117c2:	429a      	cmp	r2, r3
 80117c4:	d902      	bls.n	80117cc <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80117c6:	68fb      	ldr	r3, [r7, #12]
 80117c8:	68db      	ldr	r3, [r3, #12]
 80117ca:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80117cc:	69fb      	ldr	r3, [r7, #28]
 80117ce:	3303      	adds	r3, #3
 80117d0:	089b      	lsrs	r3, r3, #2
 80117d2:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80117d4:	e02b      	b.n	801182e <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80117d6:	68fb      	ldr	r3, [r7, #12]
 80117d8:	699a      	ldr	r2, [r3, #24]
 80117da:	68fb      	ldr	r3, [r7, #12]
 80117dc:	6a1b      	ldr	r3, [r3, #32]
 80117de:	1ad3      	subs	r3, r2, r3
 80117e0:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80117e2:	68fb      	ldr	r3, [r7, #12]
 80117e4:	68db      	ldr	r3, [r3, #12]
 80117e6:	69fa      	ldr	r2, [r7, #28]
 80117e8:	429a      	cmp	r2, r3
 80117ea:	d902      	bls.n	80117f2 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80117ec:	68fb      	ldr	r3, [r7, #12]
 80117ee:	68db      	ldr	r3, [r3, #12]
 80117f0:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80117f2:	69fb      	ldr	r3, [r7, #28]
 80117f4:	3303      	adds	r3, #3
 80117f6:	089b      	lsrs	r3, r3, #2
 80117f8:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80117fa:	68fb      	ldr	r3, [r7, #12]
 80117fc:	6919      	ldr	r1, [r3, #16]
 80117fe:	683b      	ldr	r3, [r7, #0]
 8011800:	b2da      	uxtb	r2, r3
 8011802:	69fb      	ldr	r3, [r7, #28]
 8011804:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8011806:	687b      	ldr	r3, [r7, #4]
 8011808:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 801180a:	b2db      	uxtb	r3, r3
 801180c:	9300      	str	r3, [sp, #0]
 801180e:	4603      	mov	r3, r0
 8011810:	6978      	ldr	r0, [r7, #20]
 8011812:	f004 ffcd 	bl	80167b0 <USB_WritePacket>

    ep->xfer_buff  += len;
 8011816:	68fb      	ldr	r3, [r7, #12]
 8011818:	691a      	ldr	r2, [r3, #16]
 801181a:	69fb      	ldr	r3, [r7, #28]
 801181c:	441a      	add	r2, r3
 801181e:	68fb      	ldr	r3, [r7, #12]
 8011820:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8011822:	68fb      	ldr	r3, [r7, #12]
 8011824:	6a1a      	ldr	r2, [r3, #32]
 8011826:	69fb      	ldr	r3, [r7, #28]
 8011828:	441a      	add	r2, r3
 801182a:	68fb      	ldr	r3, [r7, #12]
 801182c:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 801182e:	683b      	ldr	r3, [r7, #0]
 8011830:	015a      	lsls	r2, r3, #5
 8011832:	693b      	ldr	r3, [r7, #16]
 8011834:	4413      	add	r3, r2
 8011836:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801183a:	699b      	ldr	r3, [r3, #24]
 801183c:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 801183e:	69ba      	ldr	r2, [r7, #24]
 8011840:	429a      	cmp	r2, r3
 8011842:	d809      	bhi.n	8011858 <PCD_WriteEmptyTxFifo+0xe0>
 8011844:	68fb      	ldr	r3, [r7, #12]
 8011846:	6a1a      	ldr	r2, [r3, #32]
 8011848:	68fb      	ldr	r3, [r7, #12]
 801184a:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 801184c:	429a      	cmp	r2, r3
 801184e:	d203      	bcs.n	8011858 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8011850:	68fb      	ldr	r3, [r7, #12]
 8011852:	699b      	ldr	r3, [r3, #24]
 8011854:	2b00      	cmp	r3, #0
 8011856:	d1be      	bne.n	80117d6 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8011858:	68fb      	ldr	r3, [r7, #12]
 801185a:	699a      	ldr	r2, [r3, #24]
 801185c:	68fb      	ldr	r3, [r7, #12]
 801185e:	6a1b      	ldr	r3, [r3, #32]
 8011860:	429a      	cmp	r2, r3
 8011862:	d811      	bhi.n	8011888 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8011864:	683b      	ldr	r3, [r7, #0]
 8011866:	f003 030f 	and.w	r3, r3, #15
 801186a:	2201      	movs	r2, #1
 801186c:	fa02 f303 	lsl.w	r3, r2, r3
 8011870:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8011872:	693b      	ldr	r3, [r7, #16]
 8011874:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8011878:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801187a:	68bb      	ldr	r3, [r7, #8]
 801187c:	43db      	mvns	r3, r3
 801187e:	6939      	ldr	r1, [r7, #16]
 8011880:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8011884:	4013      	ands	r3, r2
 8011886:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8011888:	2300      	movs	r3, #0
}
 801188a:	4618      	mov	r0, r3
 801188c:	3720      	adds	r7, #32
 801188e:	46bd      	mov	sp, r7
 8011890:	bd80      	pop	{r7, pc}
	...

08011894 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8011894:	b580      	push	{r7, lr}
 8011896:	b088      	sub	sp, #32
 8011898:	af00      	add	r7, sp, #0
 801189a:	6078      	str	r0, [r7, #4]
 801189c:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 801189e:	687b      	ldr	r3, [r7, #4]
 80118a0:	681b      	ldr	r3, [r3, #0]
 80118a2:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80118a4:	69fb      	ldr	r3, [r7, #28]
 80118a6:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80118a8:	69fb      	ldr	r3, [r7, #28]
 80118aa:	333c      	adds	r3, #60	@ 0x3c
 80118ac:	3304      	adds	r3, #4
 80118ae:	681b      	ldr	r3, [r3, #0]
 80118b0:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80118b2:	683b      	ldr	r3, [r7, #0]
 80118b4:	015a      	lsls	r2, r3, #5
 80118b6:	69bb      	ldr	r3, [r7, #24]
 80118b8:	4413      	add	r3, r2
 80118ba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80118be:	689b      	ldr	r3, [r3, #8]
 80118c0:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80118c2:	687b      	ldr	r3, [r7, #4]
 80118c4:	691b      	ldr	r3, [r3, #16]
 80118c6:	2b01      	cmp	r3, #1
 80118c8:	d17b      	bne.n	80119c2 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80118ca:	693b      	ldr	r3, [r7, #16]
 80118cc:	f003 0308 	and.w	r3, r3, #8
 80118d0:	2b00      	cmp	r3, #0
 80118d2:	d015      	beq.n	8011900 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80118d4:	697b      	ldr	r3, [r7, #20]
 80118d6:	4a61      	ldr	r2, [pc, #388]	@ (8011a5c <PCD_EP_OutXfrComplete_int+0x1c8>)
 80118d8:	4293      	cmp	r3, r2
 80118da:	f240 80b9 	bls.w	8011a50 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80118de:	693b      	ldr	r3, [r7, #16]
 80118e0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80118e4:	2b00      	cmp	r3, #0
 80118e6:	f000 80b3 	beq.w	8011a50 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80118ea:	683b      	ldr	r3, [r7, #0]
 80118ec:	015a      	lsls	r2, r3, #5
 80118ee:	69bb      	ldr	r3, [r7, #24]
 80118f0:	4413      	add	r3, r2
 80118f2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80118f6:	461a      	mov	r2, r3
 80118f8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80118fc:	6093      	str	r3, [r2, #8]
 80118fe:	e0a7      	b.n	8011a50 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8011900:	693b      	ldr	r3, [r7, #16]
 8011902:	f003 0320 	and.w	r3, r3, #32
 8011906:	2b00      	cmp	r3, #0
 8011908:	d009      	beq.n	801191e <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 801190a:	683b      	ldr	r3, [r7, #0]
 801190c:	015a      	lsls	r2, r3, #5
 801190e:	69bb      	ldr	r3, [r7, #24]
 8011910:	4413      	add	r3, r2
 8011912:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8011916:	461a      	mov	r2, r3
 8011918:	2320      	movs	r3, #32
 801191a:	6093      	str	r3, [r2, #8]
 801191c:	e098      	b.n	8011a50 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 801191e:	693b      	ldr	r3, [r7, #16]
 8011920:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8011924:	2b00      	cmp	r3, #0
 8011926:	f040 8093 	bne.w	8011a50 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 801192a:	697b      	ldr	r3, [r7, #20]
 801192c:	4a4b      	ldr	r2, [pc, #300]	@ (8011a5c <PCD_EP_OutXfrComplete_int+0x1c8>)
 801192e:	4293      	cmp	r3, r2
 8011930:	d90f      	bls.n	8011952 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8011932:	693b      	ldr	r3, [r7, #16]
 8011934:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8011938:	2b00      	cmp	r3, #0
 801193a:	d00a      	beq.n	8011952 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 801193c:	683b      	ldr	r3, [r7, #0]
 801193e:	015a      	lsls	r2, r3, #5
 8011940:	69bb      	ldr	r3, [r7, #24]
 8011942:	4413      	add	r3, r2
 8011944:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8011948:	461a      	mov	r2, r3
 801194a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 801194e:	6093      	str	r3, [r2, #8]
 8011950:	e07e      	b.n	8011a50 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8011952:	683a      	ldr	r2, [r7, #0]
 8011954:	4613      	mov	r3, r2
 8011956:	00db      	lsls	r3, r3, #3
 8011958:	4413      	add	r3, r2
 801195a:	009b      	lsls	r3, r3, #2
 801195c:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8011960:	687a      	ldr	r2, [r7, #4]
 8011962:	4413      	add	r3, r2
 8011964:	3304      	adds	r3, #4
 8011966:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8011968:	68fb      	ldr	r3, [r7, #12]
 801196a:	69da      	ldr	r2, [r3, #28]
 801196c:	683b      	ldr	r3, [r7, #0]
 801196e:	0159      	lsls	r1, r3, #5
 8011970:	69bb      	ldr	r3, [r7, #24]
 8011972:	440b      	add	r3, r1
 8011974:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8011978:	691b      	ldr	r3, [r3, #16]
 801197a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801197e:	1ad2      	subs	r2, r2, r3
 8011980:	68fb      	ldr	r3, [r7, #12]
 8011982:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8011984:	683b      	ldr	r3, [r7, #0]
 8011986:	2b00      	cmp	r3, #0
 8011988:	d114      	bne.n	80119b4 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 801198a:	68fb      	ldr	r3, [r7, #12]
 801198c:	699b      	ldr	r3, [r3, #24]
 801198e:	2b00      	cmp	r3, #0
 8011990:	d109      	bne.n	80119a6 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8011992:	687b      	ldr	r3, [r7, #4]
 8011994:	6818      	ldr	r0, [r3, #0]
 8011996:	687b      	ldr	r3, [r7, #4]
 8011998:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 801199c:	461a      	mov	r2, r3
 801199e:	2101      	movs	r1, #1
 80119a0:	f005 f99c 	bl	8016cdc <USB_EP0_OutStart>
 80119a4:	e006      	b.n	80119b4 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80119a6:	68fb      	ldr	r3, [r7, #12]
 80119a8:	691a      	ldr	r2, [r3, #16]
 80119aa:	68fb      	ldr	r3, [r7, #12]
 80119ac:	6a1b      	ldr	r3, [r3, #32]
 80119ae:	441a      	add	r2, r3
 80119b0:	68fb      	ldr	r3, [r7, #12]
 80119b2:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80119b4:	683b      	ldr	r3, [r7, #0]
 80119b6:	b2db      	uxtb	r3, r3
 80119b8:	4619      	mov	r1, r3
 80119ba:	6878      	ldr	r0, [r7, #4]
 80119bc:	f7f5 f9ec 	bl	8006d98 <HAL_PCD_DataOutStageCallback>
 80119c0:	e046      	b.n	8011a50 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80119c2:	697b      	ldr	r3, [r7, #20]
 80119c4:	4a26      	ldr	r2, [pc, #152]	@ (8011a60 <PCD_EP_OutXfrComplete_int+0x1cc>)
 80119c6:	4293      	cmp	r3, r2
 80119c8:	d124      	bne.n	8011a14 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80119ca:	693b      	ldr	r3, [r7, #16]
 80119cc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80119d0:	2b00      	cmp	r3, #0
 80119d2:	d00a      	beq.n	80119ea <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80119d4:	683b      	ldr	r3, [r7, #0]
 80119d6:	015a      	lsls	r2, r3, #5
 80119d8:	69bb      	ldr	r3, [r7, #24]
 80119da:	4413      	add	r3, r2
 80119dc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80119e0:	461a      	mov	r2, r3
 80119e2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80119e6:	6093      	str	r3, [r2, #8]
 80119e8:	e032      	b.n	8011a50 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80119ea:	693b      	ldr	r3, [r7, #16]
 80119ec:	f003 0320 	and.w	r3, r3, #32
 80119f0:	2b00      	cmp	r3, #0
 80119f2:	d008      	beq.n	8011a06 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80119f4:	683b      	ldr	r3, [r7, #0]
 80119f6:	015a      	lsls	r2, r3, #5
 80119f8:	69bb      	ldr	r3, [r7, #24]
 80119fa:	4413      	add	r3, r2
 80119fc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8011a00:	461a      	mov	r2, r3
 8011a02:	2320      	movs	r3, #32
 8011a04:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8011a06:	683b      	ldr	r3, [r7, #0]
 8011a08:	b2db      	uxtb	r3, r3
 8011a0a:	4619      	mov	r1, r3
 8011a0c:	6878      	ldr	r0, [r7, #4]
 8011a0e:	f7f5 f9c3 	bl	8006d98 <HAL_PCD_DataOutStageCallback>
 8011a12:	e01d      	b.n	8011a50 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8011a14:	683b      	ldr	r3, [r7, #0]
 8011a16:	2b00      	cmp	r3, #0
 8011a18:	d114      	bne.n	8011a44 <PCD_EP_OutXfrComplete_int+0x1b0>
 8011a1a:	6879      	ldr	r1, [r7, #4]
 8011a1c:	683a      	ldr	r2, [r7, #0]
 8011a1e:	4613      	mov	r3, r2
 8011a20:	00db      	lsls	r3, r3, #3
 8011a22:	4413      	add	r3, r2
 8011a24:	009b      	lsls	r3, r3, #2
 8011a26:	440b      	add	r3, r1
 8011a28:	f503 7325 	add.w	r3, r3, #660	@ 0x294
 8011a2c:	681b      	ldr	r3, [r3, #0]
 8011a2e:	2b00      	cmp	r3, #0
 8011a30:	d108      	bne.n	8011a44 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8011a32:	687b      	ldr	r3, [r7, #4]
 8011a34:	6818      	ldr	r0, [r3, #0]
 8011a36:	687b      	ldr	r3, [r7, #4]
 8011a38:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 8011a3c:	461a      	mov	r2, r3
 8011a3e:	2100      	movs	r1, #0
 8011a40:	f005 f94c 	bl	8016cdc <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8011a44:	683b      	ldr	r3, [r7, #0]
 8011a46:	b2db      	uxtb	r3, r3
 8011a48:	4619      	mov	r1, r3
 8011a4a:	6878      	ldr	r0, [r7, #4]
 8011a4c:	f7f5 f9a4 	bl	8006d98 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8011a50:	2300      	movs	r3, #0
}
 8011a52:	4618      	mov	r0, r3
 8011a54:	3720      	adds	r7, #32
 8011a56:	46bd      	mov	sp, r7
 8011a58:	bd80      	pop	{r7, pc}
 8011a5a:	bf00      	nop
 8011a5c:	4f54300a 	.word	0x4f54300a
 8011a60:	4f54310a 	.word	0x4f54310a

08011a64 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8011a64:	b580      	push	{r7, lr}
 8011a66:	b086      	sub	sp, #24
 8011a68:	af00      	add	r7, sp, #0
 8011a6a:	6078      	str	r0, [r7, #4]
 8011a6c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8011a6e:	687b      	ldr	r3, [r7, #4]
 8011a70:	681b      	ldr	r3, [r3, #0]
 8011a72:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011a74:	697b      	ldr	r3, [r7, #20]
 8011a76:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8011a78:	697b      	ldr	r3, [r7, #20]
 8011a7a:	333c      	adds	r3, #60	@ 0x3c
 8011a7c:	3304      	adds	r3, #4
 8011a7e:	681b      	ldr	r3, [r3, #0]
 8011a80:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8011a82:	683b      	ldr	r3, [r7, #0]
 8011a84:	015a      	lsls	r2, r3, #5
 8011a86:	693b      	ldr	r3, [r7, #16]
 8011a88:	4413      	add	r3, r2
 8011a8a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8011a8e:	689b      	ldr	r3, [r3, #8]
 8011a90:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8011a92:	68fb      	ldr	r3, [r7, #12]
 8011a94:	4a15      	ldr	r2, [pc, #84]	@ (8011aec <PCD_EP_OutSetupPacket_int+0x88>)
 8011a96:	4293      	cmp	r3, r2
 8011a98:	d90e      	bls.n	8011ab8 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8011a9a:	68bb      	ldr	r3, [r7, #8]
 8011a9c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8011aa0:	2b00      	cmp	r3, #0
 8011aa2:	d009      	beq.n	8011ab8 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8011aa4:	683b      	ldr	r3, [r7, #0]
 8011aa6:	015a      	lsls	r2, r3, #5
 8011aa8:	693b      	ldr	r3, [r7, #16]
 8011aaa:	4413      	add	r3, r2
 8011aac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8011ab0:	461a      	mov	r2, r3
 8011ab2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8011ab6:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8011ab8:	6878      	ldr	r0, [r7, #4]
 8011aba:	f7f5 f95b 	bl	8006d74 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8011abe:	68fb      	ldr	r3, [r7, #12]
 8011ac0:	4a0a      	ldr	r2, [pc, #40]	@ (8011aec <PCD_EP_OutSetupPacket_int+0x88>)
 8011ac2:	4293      	cmp	r3, r2
 8011ac4:	d90c      	bls.n	8011ae0 <PCD_EP_OutSetupPacket_int+0x7c>
 8011ac6:	687b      	ldr	r3, [r7, #4]
 8011ac8:	691b      	ldr	r3, [r3, #16]
 8011aca:	2b01      	cmp	r3, #1
 8011acc:	d108      	bne.n	8011ae0 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8011ace:	687b      	ldr	r3, [r7, #4]
 8011ad0:	6818      	ldr	r0, [r3, #0]
 8011ad2:	687b      	ldr	r3, [r7, #4]
 8011ad4:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 8011ad8:	461a      	mov	r2, r3
 8011ada:	2101      	movs	r1, #1
 8011adc:	f005 f8fe 	bl	8016cdc <USB_EP0_OutStart>
  }

  return HAL_OK;
 8011ae0:	2300      	movs	r3, #0
}
 8011ae2:	4618      	mov	r0, r3
 8011ae4:	3718      	adds	r7, #24
 8011ae6:	46bd      	mov	sp, r7
 8011ae8:	bd80      	pop	{r7, pc}
 8011aea:	bf00      	nop
 8011aec:	4f54300a 	.word	0x4f54300a

08011af0 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8011af0:	b480      	push	{r7}
 8011af2:	b085      	sub	sp, #20
 8011af4:	af00      	add	r7, sp, #0
 8011af6:	6078      	str	r0, [r7, #4]
 8011af8:	460b      	mov	r3, r1
 8011afa:	70fb      	strb	r3, [r7, #3]
 8011afc:	4613      	mov	r3, r2
 8011afe:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8011b00:	687b      	ldr	r3, [r7, #4]
 8011b02:	681b      	ldr	r3, [r3, #0]
 8011b04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011b06:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8011b08:	78fb      	ldrb	r3, [r7, #3]
 8011b0a:	2b00      	cmp	r3, #0
 8011b0c:	d107      	bne.n	8011b1e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8011b0e:	883b      	ldrh	r3, [r7, #0]
 8011b10:	0419      	lsls	r1, r3, #16
 8011b12:	687b      	ldr	r3, [r7, #4]
 8011b14:	681b      	ldr	r3, [r3, #0]
 8011b16:	68ba      	ldr	r2, [r7, #8]
 8011b18:	430a      	orrs	r2, r1
 8011b1a:	629a      	str	r2, [r3, #40]	@ 0x28
 8011b1c:	e028      	b.n	8011b70 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8011b1e:	687b      	ldr	r3, [r7, #4]
 8011b20:	681b      	ldr	r3, [r3, #0]
 8011b22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011b24:	0c1b      	lsrs	r3, r3, #16
 8011b26:	68ba      	ldr	r2, [r7, #8]
 8011b28:	4413      	add	r3, r2
 8011b2a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8011b2c:	2300      	movs	r3, #0
 8011b2e:	73fb      	strb	r3, [r7, #15]
 8011b30:	e00d      	b.n	8011b4e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8011b32:	687b      	ldr	r3, [r7, #4]
 8011b34:	681a      	ldr	r2, [r3, #0]
 8011b36:	7bfb      	ldrb	r3, [r7, #15]
 8011b38:	3340      	adds	r3, #64	@ 0x40
 8011b3a:	009b      	lsls	r3, r3, #2
 8011b3c:	4413      	add	r3, r2
 8011b3e:	685b      	ldr	r3, [r3, #4]
 8011b40:	0c1b      	lsrs	r3, r3, #16
 8011b42:	68ba      	ldr	r2, [r7, #8]
 8011b44:	4413      	add	r3, r2
 8011b46:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8011b48:	7bfb      	ldrb	r3, [r7, #15]
 8011b4a:	3301      	adds	r3, #1
 8011b4c:	73fb      	strb	r3, [r7, #15]
 8011b4e:	7bfa      	ldrb	r2, [r7, #15]
 8011b50:	78fb      	ldrb	r3, [r7, #3]
 8011b52:	3b01      	subs	r3, #1
 8011b54:	429a      	cmp	r2, r3
 8011b56:	d3ec      	bcc.n	8011b32 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8011b58:	883b      	ldrh	r3, [r7, #0]
 8011b5a:	0418      	lsls	r0, r3, #16
 8011b5c:	687b      	ldr	r3, [r7, #4]
 8011b5e:	6819      	ldr	r1, [r3, #0]
 8011b60:	78fb      	ldrb	r3, [r7, #3]
 8011b62:	3b01      	subs	r3, #1
 8011b64:	68ba      	ldr	r2, [r7, #8]
 8011b66:	4302      	orrs	r2, r0
 8011b68:	3340      	adds	r3, #64	@ 0x40
 8011b6a:	009b      	lsls	r3, r3, #2
 8011b6c:	440b      	add	r3, r1
 8011b6e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8011b70:	2300      	movs	r3, #0
}
 8011b72:	4618      	mov	r0, r3
 8011b74:	3714      	adds	r7, #20
 8011b76:	46bd      	mov	sp, r7
 8011b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b7c:	4770      	bx	lr

08011b7e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8011b7e:	b480      	push	{r7}
 8011b80:	b083      	sub	sp, #12
 8011b82:	af00      	add	r7, sp, #0
 8011b84:	6078      	str	r0, [r7, #4]
 8011b86:	460b      	mov	r3, r1
 8011b88:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8011b8a:	687b      	ldr	r3, [r7, #4]
 8011b8c:	681b      	ldr	r3, [r3, #0]
 8011b8e:	887a      	ldrh	r2, [r7, #2]
 8011b90:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8011b92:	2300      	movs	r3, #0
}
 8011b94:	4618      	mov	r0, r3
 8011b96:	370c      	adds	r7, #12
 8011b98:	46bd      	mov	sp, r7
 8011b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b9e:	4770      	bx	lr

08011ba0 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8011ba0:	b480      	push	{r7}
 8011ba2:	b083      	sub	sp, #12
 8011ba4:	af00      	add	r7, sp, #0
 8011ba6:	6078      	str	r0, [r7, #4]
 8011ba8:	460b      	mov	r3, r1
 8011baa:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8011bac:	bf00      	nop
 8011bae:	370c      	adds	r7, #12
 8011bb0:	46bd      	mov	sp, r7
 8011bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011bb6:	4770      	bx	lr

08011bb8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8011bb8:	b580      	push	{r7, lr}
 8011bba:	b086      	sub	sp, #24
 8011bbc:	af00      	add	r7, sp, #0
 8011bbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8011bc0:	687b      	ldr	r3, [r7, #4]
 8011bc2:	2b00      	cmp	r3, #0
 8011bc4:	d101      	bne.n	8011bca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8011bc6:	2301      	movs	r3, #1
 8011bc8:	e267      	b.n	801209a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8011bca:	687b      	ldr	r3, [r7, #4]
 8011bcc:	681b      	ldr	r3, [r3, #0]
 8011bce:	f003 0301 	and.w	r3, r3, #1
 8011bd2:	2b00      	cmp	r3, #0
 8011bd4:	d075      	beq.n	8011cc2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8011bd6:	4b88      	ldr	r3, [pc, #544]	@ (8011df8 <HAL_RCC_OscConfig+0x240>)
 8011bd8:	689b      	ldr	r3, [r3, #8]
 8011bda:	f003 030c 	and.w	r3, r3, #12
 8011bde:	2b04      	cmp	r3, #4
 8011be0:	d00c      	beq.n	8011bfc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8011be2:	4b85      	ldr	r3, [pc, #532]	@ (8011df8 <HAL_RCC_OscConfig+0x240>)
 8011be4:	689b      	ldr	r3, [r3, #8]
 8011be6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8011bea:	2b08      	cmp	r3, #8
 8011bec:	d112      	bne.n	8011c14 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8011bee:	4b82      	ldr	r3, [pc, #520]	@ (8011df8 <HAL_RCC_OscConfig+0x240>)
 8011bf0:	685b      	ldr	r3, [r3, #4]
 8011bf2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8011bf6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8011bfa:	d10b      	bne.n	8011c14 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8011bfc:	4b7e      	ldr	r3, [pc, #504]	@ (8011df8 <HAL_RCC_OscConfig+0x240>)
 8011bfe:	681b      	ldr	r3, [r3, #0]
 8011c00:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8011c04:	2b00      	cmp	r3, #0
 8011c06:	d05b      	beq.n	8011cc0 <HAL_RCC_OscConfig+0x108>
 8011c08:	687b      	ldr	r3, [r7, #4]
 8011c0a:	685b      	ldr	r3, [r3, #4]
 8011c0c:	2b00      	cmp	r3, #0
 8011c0e:	d157      	bne.n	8011cc0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8011c10:	2301      	movs	r3, #1
 8011c12:	e242      	b.n	801209a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8011c14:	687b      	ldr	r3, [r7, #4]
 8011c16:	685b      	ldr	r3, [r3, #4]
 8011c18:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8011c1c:	d106      	bne.n	8011c2c <HAL_RCC_OscConfig+0x74>
 8011c1e:	4b76      	ldr	r3, [pc, #472]	@ (8011df8 <HAL_RCC_OscConfig+0x240>)
 8011c20:	681b      	ldr	r3, [r3, #0]
 8011c22:	4a75      	ldr	r2, [pc, #468]	@ (8011df8 <HAL_RCC_OscConfig+0x240>)
 8011c24:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8011c28:	6013      	str	r3, [r2, #0]
 8011c2a:	e01d      	b.n	8011c68 <HAL_RCC_OscConfig+0xb0>
 8011c2c:	687b      	ldr	r3, [r7, #4]
 8011c2e:	685b      	ldr	r3, [r3, #4]
 8011c30:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8011c34:	d10c      	bne.n	8011c50 <HAL_RCC_OscConfig+0x98>
 8011c36:	4b70      	ldr	r3, [pc, #448]	@ (8011df8 <HAL_RCC_OscConfig+0x240>)
 8011c38:	681b      	ldr	r3, [r3, #0]
 8011c3a:	4a6f      	ldr	r2, [pc, #444]	@ (8011df8 <HAL_RCC_OscConfig+0x240>)
 8011c3c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8011c40:	6013      	str	r3, [r2, #0]
 8011c42:	4b6d      	ldr	r3, [pc, #436]	@ (8011df8 <HAL_RCC_OscConfig+0x240>)
 8011c44:	681b      	ldr	r3, [r3, #0]
 8011c46:	4a6c      	ldr	r2, [pc, #432]	@ (8011df8 <HAL_RCC_OscConfig+0x240>)
 8011c48:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8011c4c:	6013      	str	r3, [r2, #0]
 8011c4e:	e00b      	b.n	8011c68 <HAL_RCC_OscConfig+0xb0>
 8011c50:	4b69      	ldr	r3, [pc, #420]	@ (8011df8 <HAL_RCC_OscConfig+0x240>)
 8011c52:	681b      	ldr	r3, [r3, #0]
 8011c54:	4a68      	ldr	r2, [pc, #416]	@ (8011df8 <HAL_RCC_OscConfig+0x240>)
 8011c56:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8011c5a:	6013      	str	r3, [r2, #0]
 8011c5c:	4b66      	ldr	r3, [pc, #408]	@ (8011df8 <HAL_RCC_OscConfig+0x240>)
 8011c5e:	681b      	ldr	r3, [r3, #0]
 8011c60:	4a65      	ldr	r2, [pc, #404]	@ (8011df8 <HAL_RCC_OscConfig+0x240>)
 8011c62:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8011c66:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8011c68:	687b      	ldr	r3, [r7, #4]
 8011c6a:	685b      	ldr	r3, [r3, #4]
 8011c6c:	2b00      	cmp	r3, #0
 8011c6e:	d013      	beq.n	8011c98 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8011c70:	f7fa f968 	bl	800bf44 <HAL_GetTick>
 8011c74:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8011c76:	e008      	b.n	8011c8a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8011c78:	f7fa f964 	bl	800bf44 <HAL_GetTick>
 8011c7c:	4602      	mov	r2, r0
 8011c7e:	693b      	ldr	r3, [r7, #16]
 8011c80:	1ad3      	subs	r3, r2, r3
 8011c82:	2b64      	cmp	r3, #100	@ 0x64
 8011c84:	d901      	bls.n	8011c8a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8011c86:	2303      	movs	r3, #3
 8011c88:	e207      	b.n	801209a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8011c8a:	4b5b      	ldr	r3, [pc, #364]	@ (8011df8 <HAL_RCC_OscConfig+0x240>)
 8011c8c:	681b      	ldr	r3, [r3, #0]
 8011c8e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8011c92:	2b00      	cmp	r3, #0
 8011c94:	d0f0      	beq.n	8011c78 <HAL_RCC_OscConfig+0xc0>
 8011c96:	e014      	b.n	8011cc2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8011c98:	f7fa f954 	bl	800bf44 <HAL_GetTick>
 8011c9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8011c9e:	e008      	b.n	8011cb2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8011ca0:	f7fa f950 	bl	800bf44 <HAL_GetTick>
 8011ca4:	4602      	mov	r2, r0
 8011ca6:	693b      	ldr	r3, [r7, #16]
 8011ca8:	1ad3      	subs	r3, r2, r3
 8011caa:	2b64      	cmp	r3, #100	@ 0x64
 8011cac:	d901      	bls.n	8011cb2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8011cae:	2303      	movs	r3, #3
 8011cb0:	e1f3      	b.n	801209a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8011cb2:	4b51      	ldr	r3, [pc, #324]	@ (8011df8 <HAL_RCC_OscConfig+0x240>)
 8011cb4:	681b      	ldr	r3, [r3, #0]
 8011cb6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8011cba:	2b00      	cmp	r3, #0
 8011cbc:	d1f0      	bne.n	8011ca0 <HAL_RCC_OscConfig+0xe8>
 8011cbe:	e000      	b.n	8011cc2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8011cc0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8011cc2:	687b      	ldr	r3, [r7, #4]
 8011cc4:	681b      	ldr	r3, [r3, #0]
 8011cc6:	f003 0302 	and.w	r3, r3, #2
 8011cca:	2b00      	cmp	r3, #0
 8011ccc:	d063      	beq.n	8011d96 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8011cce:	4b4a      	ldr	r3, [pc, #296]	@ (8011df8 <HAL_RCC_OscConfig+0x240>)
 8011cd0:	689b      	ldr	r3, [r3, #8]
 8011cd2:	f003 030c 	and.w	r3, r3, #12
 8011cd6:	2b00      	cmp	r3, #0
 8011cd8:	d00b      	beq.n	8011cf2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8011cda:	4b47      	ldr	r3, [pc, #284]	@ (8011df8 <HAL_RCC_OscConfig+0x240>)
 8011cdc:	689b      	ldr	r3, [r3, #8]
 8011cde:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8011ce2:	2b08      	cmp	r3, #8
 8011ce4:	d11c      	bne.n	8011d20 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8011ce6:	4b44      	ldr	r3, [pc, #272]	@ (8011df8 <HAL_RCC_OscConfig+0x240>)
 8011ce8:	685b      	ldr	r3, [r3, #4]
 8011cea:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8011cee:	2b00      	cmp	r3, #0
 8011cf0:	d116      	bne.n	8011d20 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8011cf2:	4b41      	ldr	r3, [pc, #260]	@ (8011df8 <HAL_RCC_OscConfig+0x240>)
 8011cf4:	681b      	ldr	r3, [r3, #0]
 8011cf6:	f003 0302 	and.w	r3, r3, #2
 8011cfa:	2b00      	cmp	r3, #0
 8011cfc:	d005      	beq.n	8011d0a <HAL_RCC_OscConfig+0x152>
 8011cfe:	687b      	ldr	r3, [r7, #4]
 8011d00:	68db      	ldr	r3, [r3, #12]
 8011d02:	2b01      	cmp	r3, #1
 8011d04:	d001      	beq.n	8011d0a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8011d06:	2301      	movs	r3, #1
 8011d08:	e1c7      	b.n	801209a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8011d0a:	4b3b      	ldr	r3, [pc, #236]	@ (8011df8 <HAL_RCC_OscConfig+0x240>)
 8011d0c:	681b      	ldr	r3, [r3, #0]
 8011d0e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8011d12:	687b      	ldr	r3, [r7, #4]
 8011d14:	691b      	ldr	r3, [r3, #16]
 8011d16:	00db      	lsls	r3, r3, #3
 8011d18:	4937      	ldr	r1, [pc, #220]	@ (8011df8 <HAL_RCC_OscConfig+0x240>)
 8011d1a:	4313      	orrs	r3, r2
 8011d1c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8011d1e:	e03a      	b.n	8011d96 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8011d20:	687b      	ldr	r3, [r7, #4]
 8011d22:	68db      	ldr	r3, [r3, #12]
 8011d24:	2b00      	cmp	r3, #0
 8011d26:	d020      	beq.n	8011d6a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8011d28:	4b34      	ldr	r3, [pc, #208]	@ (8011dfc <HAL_RCC_OscConfig+0x244>)
 8011d2a:	2201      	movs	r2, #1
 8011d2c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8011d2e:	f7fa f909 	bl	800bf44 <HAL_GetTick>
 8011d32:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8011d34:	e008      	b.n	8011d48 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8011d36:	f7fa f905 	bl	800bf44 <HAL_GetTick>
 8011d3a:	4602      	mov	r2, r0
 8011d3c:	693b      	ldr	r3, [r7, #16]
 8011d3e:	1ad3      	subs	r3, r2, r3
 8011d40:	2b02      	cmp	r3, #2
 8011d42:	d901      	bls.n	8011d48 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8011d44:	2303      	movs	r3, #3
 8011d46:	e1a8      	b.n	801209a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8011d48:	4b2b      	ldr	r3, [pc, #172]	@ (8011df8 <HAL_RCC_OscConfig+0x240>)
 8011d4a:	681b      	ldr	r3, [r3, #0]
 8011d4c:	f003 0302 	and.w	r3, r3, #2
 8011d50:	2b00      	cmp	r3, #0
 8011d52:	d0f0      	beq.n	8011d36 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8011d54:	4b28      	ldr	r3, [pc, #160]	@ (8011df8 <HAL_RCC_OscConfig+0x240>)
 8011d56:	681b      	ldr	r3, [r3, #0]
 8011d58:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8011d5c:	687b      	ldr	r3, [r7, #4]
 8011d5e:	691b      	ldr	r3, [r3, #16]
 8011d60:	00db      	lsls	r3, r3, #3
 8011d62:	4925      	ldr	r1, [pc, #148]	@ (8011df8 <HAL_RCC_OscConfig+0x240>)
 8011d64:	4313      	orrs	r3, r2
 8011d66:	600b      	str	r3, [r1, #0]
 8011d68:	e015      	b.n	8011d96 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8011d6a:	4b24      	ldr	r3, [pc, #144]	@ (8011dfc <HAL_RCC_OscConfig+0x244>)
 8011d6c:	2200      	movs	r2, #0
 8011d6e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8011d70:	f7fa f8e8 	bl	800bf44 <HAL_GetTick>
 8011d74:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8011d76:	e008      	b.n	8011d8a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8011d78:	f7fa f8e4 	bl	800bf44 <HAL_GetTick>
 8011d7c:	4602      	mov	r2, r0
 8011d7e:	693b      	ldr	r3, [r7, #16]
 8011d80:	1ad3      	subs	r3, r2, r3
 8011d82:	2b02      	cmp	r3, #2
 8011d84:	d901      	bls.n	8011d8a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8011d86:	2303      	movs	r3, #3
 8011d88:	e187      	b.n	801209a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8011d8a:	4b1b      	ldr	r3, [pc, #108]	@ (8011df8 <HAL_RCC_OscConfig+0x240>)
 8011d8c:	681b      	ldr	r3, [r3, #0]
 8011d8e:	f003 0302 	and.w	r3, r3, #2
 8011d92:	2b00      	cmp	r3, #0
 8011d94:	d1f0      	bne.n	8011d78 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8011d96:	687b      	ldr	r3, [r7, #4]
 8011d98:	681b      	ldr	r3, [r3, #0]
 8011d9a:	f003 0308 	and.w	r3, r3, #8
 8011d9e:	2b00      	cmp	r3, #0
 8011da0:	d036      	beq.n	8011e10 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8011da2:	687b      	ldr	r3, [r7, #4]
 8011da4:	695b      	ldr	r3, [r3, #20]
 8011da6:	2b00      	cmp	r3, #0
 8011da8:	d016      	beq.n	8011dd8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8011daa:	4b15      	ldr	r3, [pc, #84]	@ (8011e00 <HAL_RCC_OscConfig+0x248>)
 8011dac:	2201      	movs	r2, #1
 8011dae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8011db0:	f7fa f8c8 	bl	800bf44 <HAL_GetTick>
 8011db4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8011db6:	e008      	b.n	8011dca <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8011db8:	f7fa f8c4 	bl	800bf44 <HAL_GetTick>
 8011dbc:	4602      	mov	r2, r0
 8011dbe:	693b      	ldr	r3, [r7, #16]
 8011dc0:	1ad3      	subs	r3, r2, r3
 8011dc2:	2b02      	cmp	r3, #2
 8011dc4:	d901      	bls.n	8011dca <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8011dc6:	2303      	movs	r3, #3
 8011dc8:	e167      	b.n	801209a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8011dca:	4b0b      	ldr	r3, [pc, #44]	@ (8011df8 <HAL_RCC_OscConfig+0x240>)
 8011dcc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8011dce:	f003 0302 	and.w	r3, r3, #2
 8011dd2:	2b00      	cmp	r3, #0
 8011dd4:	d0f0      	beq.n	8011db8 <HAL_RCC_OscConfig+0x200>
 8011dd6:	e01b      	b.n	8011e10 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8011dd8:	4b09      	ldr	r3, [pc, #36]	@ (8011e00 <HAL_RCC_OscConfig+0x248>)
 8011dda:	2200      	movs	r2, #0
 8011ddc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8011dde:	f7fa f8b1 	bl	800bf44 <HAL_GetTick>
 8011de2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8011de4:	e00e      	b.n	8011e04 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8011de6:	f7fa f8ad 	bl	800bf44 <HAL_GetTick>
 8011dea:	4602      	mov	r2, r0
 8011dec:	693b      	ldr	r3, [r7, #16]
 8011dee:	1ad3      	subs	r3, r2, r3
 8011df0:	2b02      	cmp	r3, #2
 8011df2:	d907      	bls.n	8011e04 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8011df4:	2303      	movs	r3, #3
 8011df6:	e150      	b.n	801209a <HAL_RCC_OscConfig+0x4e2>
 8011df8:	40023800 	.word	0x40023800
 8011dfc:	42470000 	.word	0x42470000
 8011e00:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8011e04:	4b88      	ldr	r3, [pc, #544]	@ (8012028 <HAL_RCC_OscConfig+0x470>)
 8011e06:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8011e08:	f003 0302 	and.w	r3, r3, #2
 8011e0c:	2b00      	cmp	r3, #0
 8011e0e:	d1ea      	bne.n	8011de6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8011e10:	687b      	ldr	r3, [r7, #4]
 8011e12:	681b      	ldr	r3, [r3, #0]
 8011e14:	f003 0304 	and.w	r3, r3, #4
 8011e18:	2b00      	cmp	r3, #0
 8011e1a:	f000 8097 	beq.w	8011f4c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8011e1e:	2300      	movs	r3, #0
 8011e20:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8011e22:	4b81      	ldr	r3, [pc, #516]	@ (8012028 <HAL_RCC_OscConfig+0x470>)
 8011e24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8011e26:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8011e2a:	2b00      	cmp	r3, #0
 8011e2c:	d10f      	bne.n	8011e4e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8011e2e:	2300      	movs	r3, #0
 8011e30:	60bb      	str	r3, [r7, #8]
 8011e32:	4b7d      	ldr	r3, [pc, #500]	@ (8012028 <HAL_RCC_OscConfig+0x470>)
 8011e34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8011e36:	4a7c      	ldr	r2, [pc, #496]	@ (8012028 <HAL_RCC_OscConfig+0x470>)
 8011e38:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8011e3c:	6413      	str	r3, [r2, #64]	@ 0x40
 8011e3e:	4b7a      	ldr	r3, [pc, #488]	@ (8012028 <HAL_RCC_OscConfig+0x470>)
 8011e40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8011e42:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8011e46:	60bb      	str	r3, [r7, #8]
 8011e48:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8011e4a:	2301      	movs	r3, #1
 8011e4c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8011e4e:	4b77      	ldr	r3, [pc, #476]	@ (801202c <HAL_RCC_OscConfig+0x474>)
 8011e50:	681b      	ldr	r3, [r3, #0]
 8011e52:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8011e56:	2b00      	cmp	r3, #0
 8011e58:	d118      	bne.n	8011e8c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8011e5a:	4b74      	ldr	r3, [pc, #464]	@ (801202c <HAL_RCC_OscConfig+0x474>)
 8011e5c:	681b      	ldr	r3, [r3, #0]
 8011e5e:	4a73      	ldr	r2, [pc, #460]	@ (801202c <HAL_RCC_OscConfig+0x474>)
 8011e60:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8011e64:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8011e66:	f7fa f86d 	bl	800bf44 <HAL_GetTick>
 8011e6a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8011e6c:	e008      	b.n	8011e80 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8011e6e:	f7fa f869 	bl	800bf44 <HAL_GetTick>
 8011e72:	4602      	mov	r2, r0
 8011e74:	693b      	ldr	r3, [r7, #16]
 8011e76:	1ad3      	subs	r3, r2, r3
 8011e78:	2b02      	cmp	r3, #2
 8011e7a:	d901      	bls.n	8011e80 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8011e7c:	2303      	movs	r3, #3
 8011e7e:	e10c      	b.n	801209a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8011e80:	4b6a      	ldr	r3, [pc, #424]	@ (801202c <HAL_RCC_OscConfig+0x474>)
 8011e82:	681b      	ldr	r3, [r3, #0]
 8011e84:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8011e88:	2b00      	cmp	r3, #0
 8011e8a:	d0f0      	beq.n	8011e6e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8011e8c:	687b      	ldr	r3, [r7, #4]
 8011e8e:	689b      	ldr	r3, [r3, #8]
 8011e90:	2b01      	cmp	r3, #1
 8011e92:	d106      	bne.n	8011ea2 <HAL_RCC_OscConfig+0x2ea>
 8011e94:	4b64      	ldr	r3, [pc, #400]	@ (8012028 <HAL_RCC_OscConfig+0x470>)
 8011e96:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8011e98:	4a63      	ldr	r2, [pc, #396]	@ (8012028 <HAL_RCC_OscConfig+0x470>)
 8011e9a:	f043 0301 	orr.w	r3, r3, #1
 8011e9e:	6713      	str	r3, [r2, #112]	@ 0x70
 8011ea0:	e01c      	b.n	8011edc <HAL_RCC_OscConfig+0x324>
 8011ea2:	687b      	ldr	r3, [r7, #4]
 8011ea4:	689b      	ldr	r3, [r3, #8]
 8011ea6:	2b05      	cmp	r3, #5
 8011ea8:	d10c      	bne.n	8011ec4 <HAL_RCC_OscConfig+0x30c>
 8011eaa:	4b5f      	ldr	r3, [pc, #380]	@ (8012028 <HAL_RCC_OscConfig+0x470>)
 8011eac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8011eae:	4a5e      	ldr	r2, [pc, #376]	@ (8012028 <HAL_RCC_OscConfig+0x470>)
 8011eb0:	f043 0304 	orr.w	r3, r3, #4
 8011eb4:	6713      	str	r3, [r2, #112]	@ 0x70
 8011eb6:	4b5c      	ldr	r3, [pc, #368]	@ (8012028 <HAL_RCC_OscConfig+0x470>)
 8011eb8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8011eba:	4a5b      	ldr	r2, [pc, #364]	@ (8012028 <HAL_RCC_OscConfig+0x470>)
 8011ebc:	f043 0301 	orr.w	r3, r3, #1
 8011ec0:	6713      	str	r3, [r2, #112]	@ 0x70
 8011ec2:	e00b      	b.n	8011edc <HAL_RCC_OscConfig+0x324>
 8011ec4:	4b58      	ldr	r3, [pc, #352]	@ (8012028 <HAL_RCC_OscConfig+0x470>)
 8011ec6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8011ec8:	4a57      	ldr	r2, [pc, #348]	@ (8012028 <HAL_RCC_OscConfig+0x470>)
 8011eca:	f023 0301 	bic.w	r3, r3, #1
 8011ece:	6713      	str	r3, [r2, #112]	@ 0x70
 8011ed0:	4b55      	ldr	r3, [pc, #340]	@ (8012028 <HAL_RCC_OscConfig+0x470>)
 8011ed2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8011ed4:	4a54      	ldr	r2, [pc, #336]	@ (8012028 <HAL_RCC_OscConfig+0x470>)
 8011ed6:	f023 0304 	bic.w	r3, r3, #4
 8011eda:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8011edc:	687b      	ldr	r3, [r7, #4]
 8011ede:	689b      	ldr	r3, [r3, #8]
 8011ee0:	2b00      	cmp	r3, #0
 8011ee2:	d015      	beq.n	8011f10 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8011ee4:	f7fa f82e 	bl	800bf44 <HAL_GetTick>
 8011ee8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8011eea:	e00a      	b.n	8011f02 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8011eec:	f7fa f82a 	bl	800bf44 <HAL_GetTick>
 8011ef0:	4602      	mov	r2, r0
 8011ef2:	693b      	ldr	r3, [r7, #16]
 8011ef4:	1ad3      	subs	r3, r2, r3
 8011ef6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8011efa:	4293      	cmp	r3, r2
 8011efc:	d901      	bls.n	8011f02 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8011efe:	2303      	movs	r3, #3
 8011f00:	e0cb      	b.n	801209a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8011f02:	4b49      	ldr	r3, [pc, #292]	@ (8012028 <HAL_RCC_OscConfig+0x470>)
 8011f04:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8011f06:	f003 0302 	and.w	r3, r3, #2
 8011f0a:	2b00      	cmp	r3, #0
 8011f0c:	d0ee      	beq.n	8011eec <HAL_RCC_OscConfig+0x334>
 8011f0e:	e014      	b.n	8011f3a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8011f10:	f7fa f818 	bl	800bf44 <HAL_GetTick>
 8011f14:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8011f16:	e00a      	b.n	8011f2e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8011f18:	f7fa f814 	bl	800bf44 <HAL_GetTick>
 8011f1c:	4602      	mov	r2, r0
 8011f1e:	693b      	ldr	r3, [r7, #16]
 8011f20:	1ad3      	subs	r3, r2, r3
 8011f22:	f241 3288 	movw	r2, #5000	@ 0x1388
 8011f26:	4293      	cmp	r3, r2
 8011f28:	d901      	bls.n	8011f2e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8011f2a:	2303      	movs	r3, #3
 8011f2c:	e0b5      	b.n	801209a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8011f2e:	4b3e      	ldr	r3, [pc, #248]	@ (8012028 <HAL_RCC_OscConfig+0x470>)
 8011f30:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8011f32:	f003 0302 	and.w	r3, r3, #2
 8011f36:	2b00      	cmp	r3, #0
 8011f38:	d1ee      	bne.n	8011f18 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8011f3a:	7dfb      	ldrb	r3, [r7, #23]
 8011f3c:	2b01      	cmp	r3, #1
 8011f3e:	d105      	bne.n	8011f4c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8011f40:	4b39      	ldr	r3, [pc, #228]	@ (8012028 <HAL_RCC_OscConfig+0x470>)
 8011f42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8011f44:	4a38      	ldr	r2, [pc, #224]	@ (8012028 <HAL_RCC_OscConfig+0x470>)
 8011f46:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8011f4a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8011f4c:	687b      	ldr	r3, [r7, #4]
 8011f4e:	699b      	ldr	r3, [r3, #24]
 8011f50:	2b00      	cmp	r3, #0
 8011f52:	f000 80a1 	beq.w	8012098 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8011f56:	4b34      	ldr	r3, [pc, #208]	@ (8012028 <HAL_RCC_OscConfig+0x470>)
 8011f58:	689b      	ldr	r3, [r3, #8]
 8011f5a:	f003 030c 	and.w	r3, r3, #12
 8011f5e:	2b08      	cmp	r3, #8
 8011f60:	d05c      	beq.n	801201c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8011f62:	687b      	ldr	r3, [r7, #4]
 8011f64:	699b      	ldr	r3, [r3, #24]
 8011f66:	2b02      	cmp	r3, #2
 8011f68:	d141      	bne.n	8011fee <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8011f6a:	4b31      	ldr	r3, [pc, #196]	@ (8012030 <HAL_RCC_OscConfig+0x478>)
 8011f6c:	2200      	movs	r2, #0
 8011f6e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8011f70:	f7f9 ffe8 	bl	800bf44 <HAL_GetTick>
 8011f74:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8011f76:	e008      	b.n	8011f8a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8011f78:	f7f9 ffe4 	bl	800bf44 <HAL_GetTick>
 8011f7c:	4602      	mov	r2, r0
 8011f7e:	693b      	ldr	r3, [r7, #16]
 8011f80:	1ad3      	subs	r3, r2, r3
 8011f82:	2b02      	cmp	r3, #2
 8011f84:	d901      	bls.n	8011f8a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8011f86:	2303      	movs	r3, #3
 8011f88:	e087      	b.n	801209a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8011f8a:	4b27      	ldr	r3, [pc, #156]	@ (8012028 <HAL_RCC_OscConfig+0x470>)
 8011f8c:	681b      	ldr	r3, [r3, #0]
 8011f8e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8011f92:	2b00      	cmp	r3, #0
 8011f94:	d1f0      	bne.n	8011f78 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8011f96:	687b      	ldr	r3, [r7, #4]
 8011f98:	69da      	ldr	r2, [r3, #28]
 8011f9a:	687b      	ldr	r3, [r7, #4]
 8011f9c:	6a1b      	ldr	r3, [r3, #32]
 8011f9e:	431a      	orrs	r2, r3
 8011fa0:	687b      	ldr	r3, [r7, #4]
 8011fa2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011fa4:	019b      	lsls	r3, r3, #6
 8011fa6:	431a      	orrs	r2, r3
 8011fa8:	687b      	ldr	r3, [r7, #4]
 8011faa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011fac:	085b      	lsrs	r3, r3, #1
 8011fae:	3b01      	subs	r3, #1
 8011fb0:	041b      	lsls	r3, r3, #16
 8011fb2:	431a      	orrs	r2, r3
 8011fb4:	687b      	ldr	r3, [r7, #4]
 8011fb6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011fb8:	061b      	lsls	r3, r3, #24
 8011fba:	491b      	ldr	r1, [pc, #108]	@ (8012028 <HAL_RCC_OscConfig+0x470>)
 8011fbc:	4313      	orrs	r3, r2
 8011fbe:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8011fc0:	4b1b      	ldr	r3, [pc, #108]	@ (8012030 <HAL_RCC_OscConfig+0x478>)
 8011fc2:	2201      	movs	r2, #1
 8011fc4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8011fc6:	f7f9 ffbd 	bl	800bf44 <HAL_GetTick>
 8011fca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8011fcc:	e008      	b.n	8011fe0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8011fce:	f7f9 ffb9 	bl	800bf44 <HAL_GetTick>
 8011fd2:	4602      	mov	r2, r0
 8011fd4:	693b      	ldr	r3, [r7, #16]
 8011fd6:	1ad3      	subs	r3, r2, r3
 8011fd8:	2b02      	cmp	r3, #2
 8011fda:	d901      	bls.n	8011fe0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8011fdc:	2303      	movs	r3, #3
 8011fde:	e05c      	b.n	801209a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8011fe0:	4b11      	ldr	r3, [pc, #68]	@ (8012028 <HAL_RCC_OscConfig+0x470>)
 8011fe2:	681b      	ldr	r3, [r3, #0]
 8011fe4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8011fe8:	2b00      	cmp	r3, #0
 8011fea:	d0f0      	beq.n	8011fce <HAL_RCC_OscConfig+0x416>
 8011fec:	e054      	b.n	8012098 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8011fee:	4b10      	ldr	r3, [pc, #64]	@ (8012030 <HAL_RCC_OscConfig+0x478>)
 8011ff0:	2200      	movs	r2, #0
 8011ff2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8011ff4:	f7f9 ffa6 	bl	800bf44 <HAL_GetTick>
 8011ff8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8011ffa:	e008      	b.n	801200e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8011ffc:	f7f9 ffa2 	bl	800bf44 <HAL_GetTick>
 8012000:	4602      	mov	r2, r0
 8012002:	693b      	ldr	r3, [r7, #16]
 8012004:	1ad3      	subs	r3, r2, r3
 8012006:	2b02      	cmp	r3, #2
 8012008:	d901      	bls.n	801200e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 801200a:	2303      	movs	r3, #3
 801200c:	e045      	b.n	801209a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 801200e:	4b06      	ldr	r3, [pc, #24]	@ (8012028 <HAL_RCC_OscConfig+0x470>)
 8012010:	681b      	ldr	r3, [r3, #0]
 8012012:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8012016:	2b00      	cmp	r3, #0
 8012018:	d1f0      	bne.n	8011ffc <HAL_RCC_OscConfig+0x444>
 801201a:	e03d      	b.n	8012098 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 801201c:	687b      	ldr	r3, [r7, #4]
 801201e:	699b      	ldr	r3, [r3, #24]
 8012020:	2b01      	cmp	r3, #1
 8012022:	d107      	bne.n	8012034 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8012024:	2301      	movs	r3, #1
 8012026:	e038      	b.n	801209a <HAL_RCC_OscConfig+0x4e2>
 8012028:	40023800 	.word	0x40023800
 801202c:	40007000 	.word	0x40007000
 8012030:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8012034:	4b1b      	ldr	r3, [pc, #108]	@ (80120a4 <HAL_RCC_OscConfig+0x4ec>)
 8012036:	685b      	ldr	r3, [r3, #4]
 8012038:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 801203a:	687b      	ldr	r3, [r7, #4]
 801203c:	699b      	ldr	r3, [r3, #24]
 801203e:	2b01      	cmp	r3, #1
 8012040:	d028      	beq.n	8012094 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8012042:	68fb      	ldr	r3, [r7, #12]
 8012044:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8012048:	687b      	ldr	r3, [r7, #4]
 801204a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 801204c:	429a      	cmp	r2, r3
 801204e:	d121      	bne.n	8012094 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8012050:	68fb      	ldr	r3, [r7, #12]
 8012052:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8012056:	687b      	ldr	r3, [r7, #4]
 8012058:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 801205a:	429a      	cmp	r2, r3
 801205c:	d11a      	bne.n	8012094 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 801205e:	68fa      	ldr	r2, [r7, #12]
 8012060:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8012064:	4013      	ands	r3, r2
 8012066:	687a      	ldr	r2, [r7, #4]
 8012068:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 801206a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 801206c:	4293      	cmp	r3, r2
 801206e:	d111      	bne.n	8012094 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8012070:	68fb      	ldr	r3, [r7, #12]
 8012072:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8012076:	687b      	ldr	r3, [r7, #4]
 8012078:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801207a:	085b      	lsrs	r3, r3, #1
 801207c:	3b01      	subs	r3, #1
 801207e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8012080:	429a      	cmp	r2, r3
 8012082:	d107      	bne.n	8012094 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8012084:	68fb      	ldr	r3, [r7, #12]
 8012086:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 801208a:	687b      	ldr	r3, [r7, #4]
 801208c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801208e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8012090:	429a      	cmp	r2, r3
 8012092:	d001      	beq.n	8012098 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8012094:	2301      	movs	r3, #1
 8012096:	e000      	b.n	801209a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8012098:	2300      	movs	r3, #0
}
 801209a:	4618      	mov	r0, r3
 801209c:	3718      	adds	r7, #24
 801209e:	46bd      	mov	sp, r7
 80120a0:	bd80      	pop	{r7, pc}
 80120a2:	bf00      	nop
 80120a4:	40023800 	.word	0x40023800

080120a8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80120a8:	b580      	push	{r7, lr}
 80120aa:	b084      	sub	sp, #16
 80120ac:	af00      	add	r7, sp, #0
 80120ae:	6078      	str	r0, [r7, #4]
 80120b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80120b2:	687b      	ldr	r3, [r7, #4]
 80120b4:	2b00      	cmp	r3, #0
 80120b6:	d101      	bne.n	80120bc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80120b8:	2301      	movs	r3, #1
 80120ba:	e0cc      	b.n	8012256 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80120bc:	4b68      	ldr	r3, [pc, #416]	@ (8012260 <HAL_RCC_ClockConfig+0x1b8>)
 80120be:	681b      	ldr	r3, [r3, #0]
 80120c0:	f003 0307 	and.w	r3, r3, #7
 80120c4:	683a      	ldr	r2, [r7, #0]
 80120c6:	429a      	cmp	r2, r3
 80120c8:	d90c      	bls.n	80120e4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80120ca:	4b65      	ldr	r3, [pc, #404]	@ (8012260 <HAL_RCC_ClockConfig+0x1b8>)
 80120cc:	683a      	ldr	r2, [r7, #0]
 80120ce:	b2d2      	uxtb	r2, r2
 80120d0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80120d2:	4b63      	ldr	r3, [pc, #396]	@ (8012260 <HAL_RCC_ClockConfig+0x1b8>)
 80120d4:	681b      	ldr	r3, [r3, #0]
 80120d6:	f003 0307 	and.w	r3, r3, #7
 80120da:	683a      	ldr	r2, [r7, #0]
 80120dc:	429a      	cmp	r2, r3
 80120de:	d001      	beq.n	80120e4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80120e0:	2301      	movs	r3, #1
 80120e2:	e0b8      	b.n	8012256 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80120e4:	687b      	ldr	r3, [r7, #4]
 80120e6:	681b      	ldr	r3, [r3, #0]
 80120e8:	f003 0302 	and.w	r3, r3, #2
 80120ec:	2b00      	cmp	r3, #0
 80120ee:	d020      	beq.n	8012132 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80120f0:	687b      	ldr	r3, [r7, #4]
 80120f2:	681b      	ldr	r3, [r3, #0]
 80120f4:	f003 0304 	and.w	r3, r3, #4
 80120f8:	2b00      	cmp	r3, #0
 80120fa:	d005      	beq.n	8012108 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80120fc:	4b59      	ldr	r3, [pc, #356]	@ (8012264 <HAL_RCC_ClockConfig+0x1bc>)
 80120fe:	689b      	ldr	r3, [r3, #8]
 8012100:	4a58      	ldr	r2, [pc, #352]	@ (8012264 <HAL_RCC_ClockConfig+0x1bc>)
 8012102:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8012106:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8012108:	687b      	ldr	r3, [r7, #4]
 801210a:	681b      	ldr	r3, [r3, #0]
 801210c:	f003 0308 	and.w	r3, r3, #8
 8012110:	2b00      	cmp	r3, #0
 8012112:	d005      	beq.n	8012120 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8012114:	4b53      	ldr	r3, [pc, #332]	@ (8012264 <HAL_RCC_ClockConfig+0x1bc>)
 8012116:	689b      	ldr	r3, [r3, #8]
 8012118:	4a52      	ldr	r2, [pc, #328]	@ (8012264 <HAL_RCC_ClockConfig+0x1bc>)
 801211a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 801211e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8012120:	4b50      	ldr	r3, [pc, #320]	@ (8012264 <HAL_RCC_ClockConfig+0x1bc>)
 8012122:	689b      	ldr	r3, [r3, #8]
 8012124:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8012128:	687b      	ldr	r3, [r7, #4]
 801212a:	689b      	ldr	r3, [r3, #8]
 801212c:	494d      	ldr	r1, [pc, #308]	@ (8012264 <HAL_RCC_ClockConfig+0x1bc>)
 801212e:	4313      	orrs	r3, r2
 8012130:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8012132:	687b      	ldr	r3, [r7, #4]
 8012134:	681b      	ldr	r3, [r3, #0]
 8012136:	f003 0301 	and.w	r3, r3, #1
 801213a:	2b00      	cmp	r3, #0
 801213c:	d044      	beq.n	80121c8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 801213e:	687b      	ldr	r3, [r7, #4]
 8012140:	685b      	ldr	r3, [r3, #4]
 8012142:	2b01      	cmp	r3, #1
 8012144:	d107      	bne.n	8012156 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8012146:	4b47      	ldr	r3, [pc, #284]	@ (8012264 <HAL_RCC_ClockConfig+0x1bc>)
 8012148:	681b      	ldr	r3, [r3, #0]
 801214a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 801214e:	2b00      	cmp	r3, #0
 8012150:	d119      	bne.n	8012186 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8012152:	2301      	movs	r3, #1
 8012154:	e07f      	b.n	8012256 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8012156:	687b      	ldr	r3, [r7, #4]
 8012158:	685b      	ldr	r3, [r3, #4]
 801215a:	2b02      	cmp	r3, #2
 801215c:	d003      	beq.n	8012166 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 801215e:	687b      	ldr	r3, [r7, #4]
 8012160:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8012162:	2b03      	cmp	r3, #3
 8012164:	d107      	bne.n	8012176 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8012166:	4b3f      	ldr	r3, [pc, #252]	@ (8012264 <HAL_RCC_ClockConfig+0x1bc>)
 8012168:	681b      	ldr	r3, [r3, #0]
 801216a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 801216e:	2b00      	cmp	r3, #0
 8012170:	d109      	bne.n	8012186 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8012172:	2301      	movs	r3, #1
 8012174:	e06f      	b.n	8012256 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8012176:	4b3b      	ldr	r3, [pc, #236]	@ (8012264 <HAL_RCC_ClockConfig+0x1bc>)
 8012178:	681b      	ldr	r3, [r3, #0]
 801217a:	f003 0302 	and.w	r3, r3, #2
 801217e:	2b00      	cmp	r3, #0
 8012180:	d101      	bne.n	8012186 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8012182:	2301      	movs	r3, #1
 8012184:	e067      	b.n	8012256 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8012186:	4b37      	ldr	r3, [pc, #220]	@ (8012264 <HAL_RCC_ClockConfig+0x1bc>)
 8012188:	689b      	ldr	r3, [r3, #8]
 801218a:	f023 0203 	bic.w	r2, r3, #3
 801218e:	687b      	ldr	r3, [r7, #4]
 8012190:	685b      	ldr	r3, [r3, #4]
 8012192:	4934      	ldr	r1, [pc, #208]	@ (8012264 <HAL_RCC_ClockConfig+0x1bc>)
 8012194:	4313      	orrs	r3, r2
 8012196:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8012198:	f7f9 fed4 	bl	800bf44 <HAL_GetTick>
 801219c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 801219e:	e00a      	b.n	80121b6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80121a0:	f7f9 fed0 	bl	800bf44 <HAL_GetTick>
 80121a4:	4602      	mov	r2, r0
 80121a6:	68fb      	ldr	r3, [r7, #12]
 80121a8:	1ad3      	subs	r3, r2, r3
 80121aa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80121ae:	4293      	cmp	r3, r2
 80121b0:	d901      	bls.n	80121b6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80121b2:	2303      	movs	r3, #3
 80121b4:	e04f      	b.n	8012256 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80121b6:	4b2b      	ldr	r3, [pc, #172]	@ (8012264 <HAL_RCC_ClockConfig+0x1bc>)
 80121b8:	689b      	ldr	r3, [r3, #8]
 80121ba:	f003 020c 	and.w	r2, r3, #12
 80121be:	687b      	ldr	r3, [r7, #4]
 80121c0:	685b      	ldr	r3, [r3, #4]
 80121c2:	009b      	lsls	r3, r3, #2
 80121c4:	429a      	cmp	r2, r3
 80121c6:	d1eb      	bne.n	80121a0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80121c8:	4b25      	ldr	r3, [pc, #148]	@ (8012260 <HAL_RCC_ClockConfig+0x1b8>)
 80121ca:	681b      	ldr	r3, [r3, #0]
 80121cc:	f003 0307 	and.w	r3, r3, #7
 80121d0:	683a      	ldr	r2, [r7, #0]
 80121d2:	429a      	cmp	r2, r3
 80121d4:	d20c      	bcs.n	80121f0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80121d6:	4b22      	ldr	r3, [pc, #136]	@ (8012260 <HAL_RCC_ClockConfig+0x1b8>)
 80121d8:	683a      	ldr	r2, [r7, #0]
 80121da:	b2d2      	uxtb	r2, r2
 80121dc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80121de:	4b20      	ldr	r3, [pc, #128]	@ (8012260 <HAL_RCC_ClockConfig+0x1b8>)
 80121e0:	681b      	ldr	r3, [r3, #0]
 80121e2:	f003 0307 	and.w	r3, r3, #7
 80121e6:	683a      	ldr	r2, [r7, #0]
 80121e8:	429a      	cmp	r2, r3
 80121ea:	d001      	beq.n	80121f0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80121ec:	2301      	movs	r3, #1
 80121ee:	e032      	b.n	8012256 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80121f0:	687b      	ldr	r3, [r7, #4]
 80121f2:	681b      	ldr	r3, [r3, #0]
 80121f4:	f003 0304 	and.w	r3, r3, #4
 80121f8:	2b00      	cmp	r3, #0
 80121fa:	d008      	beq.n	801220e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80121fc:	4b19      	ldr	r3, [pc, #100]	@ (8012264 <HAL_RCC_ClockConfig+0x1bc>)
 80121fe:	689b      	ldr	r3, [r3, #8]
 8012200:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8012204:	687b      	ldr	r3, [r7, #4]
 8012206:	68db      	ldr	r3, [r3, #12]
 8012208:	4916      	ldr	r1, [pc, #88]	@ (8012264 <HAL_RCC_ClockConfig+0x1bc>)
 801220a:	4313      	orrs	r3, r2
 801220c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 801220e:	687b      	ldr	r3, [r7, #4]
 8012210:	681b      	ldr	r3, [r3, #0]
 8012212:	f003 0308 	and.w	r3, r3, #8
 8012216:	2b00      	cmp	r3, #0
 8012218:	d009      	beq.n	801222e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 801221a:	4b12      	ldr	r3, [pc, #72]	@ (8012264 <HAL_RCC_ClockConfig+0x1bc>)
 801221c:	689b      	ldr	r3, [r3, #8]
 801221e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8012222:	687b      	ldr	r3, [r7, #4]
 8012224:	691b      	ldr	r3, [r3, #16]
 8012226:	00db      	lsls	r3, r3, #3
 8012228:	490e      	ldr	r1, [pc, #56]	@ (8012264 <HAL_RCC_ClockConfig+0x1bc>)
 801222a:	4313      	orrs	r3, r2
 801222c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 801222e:	f000 f82d 	bl	801228c <HAL_RCC_GetSysClockFreq>
 8012232:	4602      	mov	r2, r0
 8012234:	4b0b      	ldr	r3, [pc, #44]	@ (8012264 <HAL_RCC_ClockConfig+0x1bc>)
 8012236:	689b      	ldr	r3, [r3, #8]
 8012238:	091b      	lsrs	r3, r3, #4
 801223a:	f003 030f 	and.w	r3, r3, #15
 801223e:	490a      	ldr	r1, [pc, #40]	@ (8012268 <HAL_RCC_ClockConfig+0x1c0>)
 8012240:	5ccb      	ldrb	r3, [r1, r3]
 8012242:	fa22 f303 	lsr.w	r3, r2, r3
 8012246:	4a09      	ldr	r2, [pc, #36]	@ (801226c <HAL_RCC_ClockConfig+0x1c4>)
 8012248:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 801224a:	4b09      	ldr	r3, [pc, #36]	@ (8012270 <HAL_RCC_ClockConfig+0x1c8>)
 801224c:	681b      	ldr	r3, [r3, #0]
 801224e:	4618      	mov	r0, r3
 8012250:	f7f9 fce2 	bl	800bc18 <HAL_InitTick>

  return HAL_OK;
 8012254:	2300      	movs	r3, #0
}
 8012256:	4618      	mov	r0, r3
 8012258:	3710      	adds	r7, #16
 801225a:	46bd      	mov	sp, r7
 801225c:	bd80      	pop	{r7, pc}
 801225e:	bf00      	nop
 8012260:	40023c00 	.word	0x40023c00
 8012264:	40023800 	.word	0x40023800
 8012268:	08021fd0 	.word	0x08021fd0
 801226c:	20000064 	.word	0x20000064
 8012270:	20000068 	.word	0x20000068

08012274 <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 8012274:	b480      	push	{r7}
 8012276:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 8012278:	4b03      	ldr	r3, [pc, #12]	@ (8012288 <HAL_RCC_EnableCSS+0x14>)
 801227a:	2201      	movs	r2, #1
 801227c:	601a      	str	r2, [r3, #0]
}
 801227e:	bf00      	nop
 8012280:	46bd      	mov	sp, r7
 8012282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012286:	4770      	bx	lr
 8012288:	4247004c 	.word	0x4247004c

0801228c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 801228c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8012290:	b094      	sub	sp, #80	@ 0x50
 8012292:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8012294:	2300      	movs	r3, #0
 8012296:	647b      	str	r3, [r7, #68]	@ 0x44
 8012298:	2300      	movs	r3, #0
 801229a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 801229c:	2300      	movs	r3, #0
 801229e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80122a0:	2300      	movs	r3, #0
 80122a2:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80122a4:	4b79      	ldr	r3, [pc, #484]	@ (801248c <HAL_RCC_GetSysClockFreq+0x200>)
 80122a6:	689b      	ldr	r3, [r3, #8]
 80122a8:	f003 030c 	and.w	r3, r3, #12
 80122ac:	2b08      	cmp	r3, #8
 80122ae:	d00d      	beq.n	80122cc <HAL_RCC_GetSysClockFreq+0x40>
 80122b0:	2b08      	cmp	r3, #8
 80122b2:	f200 80e1 	bhi.w	8012478 <HAL_RCC_GetSysClockFreq+0x1ec>
 80122b6:	2b00      	cmp	r3, #0
 80122b8:	d002      	beq.n	80122c0 <HAL_RCC_GetSysClockFreq+0x34>
 80122ba:	2b04      	cmp	r3, #4
 80122bc:	d003      	beq.n	80122c6 <HAL_RCC_GetSysClockFreq+0x3a>
 80122be:	e0db      	b.n	8012478 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80122c0:	4b73      	ldr	r3, [pc, #460]	@ (8012490 <HAL_RCC_GetSysClockFreq+0x204>)
 80122c2:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 80122c4:	e0db      	b.n	801247e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80122c6:	4b73      	ldr	r3, [pc, #460]	@ (8012494 <HAL_RCC_GetSysClockFreq+0x208>)
 80122c8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80122ca:	e0d8      	b.n	801247e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80122cc:	4b6f      	ldr	r3, [pc, #444]	@ (801248c <HAL_RCC_GetSysClockFreq+0x200>)
 80122ce:	685b      	ldr	r3, [r3, #4]
 80122d0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80122d4:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80122d6:	4b6d      	ldr	r3, [pc, #436]	@ (801248c <HAL_RCC_GetSysClockFreq+0x200>)
 80122d8:	685b      	ldr	r3, [r3, #4]
 80122da:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80122de:	2b00      	cmp	r3, #0
 80122e0:	d063      	beq.n	80123aa <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80122e2:	4b6a      	ldr	r3, [pc, #424]	@ (801248c <HAL_RCC_GetSysClockFreq+0x200>)
 80122e4:	685b      	ldr	r3, [r3, #4]
 80122e6:	099b      	lsrs	r3, r3, #6
 80122e8:	2200      	movs	r2, #0
 80122ea:	63bb      	str	r3, [r7, #56]	@ 0x38
 80122ec:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80122ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80122f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80122f4:	633b      	str	r3, [r7, #48]	@ 0x30
 80122f6:	2300      	movs	r3, #0
 80122f8:	637b      	str	r3, [r7, #52]	@ 0x34
 80122fa:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80122fe:	4622      	mov	r2, r4
 8012300:	462b      	mov	r3, r5
 8012302:	f04f 0000 	mov.w	r0, #0
 8012306:	f04f 0100 	mov.w	r1, #0
 801230a:	0159      	lsls	r1, r3, #5
 801230c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8012310:	0150      	lsls	r0, r2, #5
 8012312:	4602      	mov	r2, r0
 8012314:	460b      	mov	r3, r1
 8012316:	4621      	mov	r1, r4
 8012318:	1a51      	subs	r1, r2, r1
 801231a:	6139      	str	r1, [r7, #16]
 801231c:	4629      	mov	r1, r5
 801231e:	eb63 0301 	sbc.w	r3, r3, r1
 8012322:	617b      	str	r3, [r7, #20]
 8012324:	f04f 0200 	mov.w	r2, #0
 8012328:	f04f 0300 	mov.w	r3, #0
 801232c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8012330:	4659      	mov	r1, fp
 8012332:	018b      	lsls	r3, r1, #6
 8012334:	4651      	mov	r1, sl
 8012336:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 801233a:	4651      	mov	r1, sl
 801233c:	018a      	lsls	r2, r1, #6
 801233e:	4651      	mov	r1, sl
 8012340:	ebb2 0801 	subs.w	r8, r2, r1
 8012344:	4659      	mov	r1, fp
 8012346:	eb63 0901 	sbc.w	r9, r3, r1
 801234a:	f04f 0200 	mov.w	r2, #0
 801234e:	f04f 0300 	mov.w	r3, #0
 8012352:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8012356:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 801235a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 801235e:	4690      	mov	r8, r2
 8012360:	4699      	mov	r9, r3
 8012362:	4623      	mov	r3, r4
 8012364:	eb18 0303 	adds.w	r3, r8, r3
 8012368:	60bb      	str	r3, [r7, #8]
 801236a:	462b      	mov	r3, r5
 801236c:	eb49 0303 	adc.w	r3, r9, r3
 8012370:	60fb      	str	r3, [r7, #12]
 8012372:	f04f 0200 	mov.w	r2, #0
 8012376:	f04f 0300 	mov.w	r3, #0
 801237a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 801237e:	4629      	mov	r1, r5
 8012380:	024b      	lsls	r3, r1, #9
 8012382:	4621      	mov	r1, r4
 8012384:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8012388:	4621      	mov	r1, r4
 801238a:	024a      	lsls	r2, r1, #9
 801238c:	4610      	mov	r0, r2
 801238e:	4619      	mov	r1, r3
 8012390:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8012392:	2200      	movs	r2, #0
 8012394:	62bb      	str	r3, [r7, #40]	@ 0x28
 8012396:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8012398:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 801239c:	f7ee fd82 	bl	8000ea4 <__aeabi_uldivmod>
 80123a0:	4602      	mov	r2, r0
 80123a2:	460b      	mov	r3, r1
 80123a4:	4613      	mov	r3, r2
 80123a6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80123a8:	e058      	b.n	801245c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80123aa:	4b38      	ldr	r3, [pc, #224]	@ (801248c <HAL_RCC_GetSysClockFreq+0x200>)
 80123ac:	685b      	ldr	r3, [r3, #4]
 80123ae:	099b      	lsrs	r3, r3, #6
 80123b0:	2200      	movs	r2, #0
 80123b2:	4618      	mov	r0, r3
 80123b4:	4611      	mov	r1, r2
 80123b6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80123ba:	623b      	str	r3, [r7, #32]
 80123bc:	2300      	movs	r3, #0
 80123be:	627b      	str	r3, [r7, #36]	@ 0x24
 80123c0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80123c4:	4642      	mov	r2, r8
 80123c6:	464b      	mov	r3, r9
 80123c8:	f04f 0000 	mov.w	r0, #0
 80123cc:	f04f 0100 	mov.w	r1, #0
 80123d0:	0159      	lsls	r1, r3, #5
 80123d2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80123d6:	0150      	lsls	r0, r2, #5
 80123d8:	4602      	mov	r2, r0
 80123da:	460b      	mov	r3, r1
 80123dc:	4641      	mov	r1, r8
 80123de:	ebb2 0a01 	subs.w	sl, r2, r1
 80123e2:	4649      	mov	r1, r9
 80123e4:	eb63 0b01 	sbc.w	fp, r3, r1
 80123e8:	f04f 0200 	mov.w	r2, #0
 80123ec:	f04f 0300 	mov.w	r3, #0
 80123f0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80123f4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80123f8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80123fc:	ebb2 040a 	subs.w	r4, r2, sl
 8012400:	eb63 050b 	sbc.w	r5, r3, fp
 8012404:	f04f 0200 	mov.w	r2, #0
 8012408:	f04f 0300 	mov.w	r3, #0
 801240c:	00eb      	lsls	r3, r5, #3
 801240e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8012412:	00e2      	lsls	r2, r4, #3
 8012414:	4614      	mov	r4, r2
 8012416:	461d      	mov	r5, r3
 8012418:	4643      	mov	r3, r8
 801241a:	18e3      	adds	r3, r4, r3
 801241c:	603b      	str	r3, [r7, #0]
 801241e:	464b      	mov	r3, r9
 8012420:	eb45 0303 	adc.w	r3, r5, r3
 8012424:	607b      	str	r3, [r7, #4]
 8012426:	f04f 0200 	mov.w	r2, #0
 801242a:	f04f 0300 	mov.w	r3, #0
 801242e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8012432:	4629      	mov	r1, r5
 8012434:	028b      	lsls	r3, r1, #10
 8012436:	4621      	mov	r1, r4
 8012438:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 801243c:	4621      	mov	r1, r4
 801243e:	028a      	lsls	r2, r1, #10
 8012440:	4610      	mov	r0, r2
 8012442:	4619      	mov	r1, r3
 8012444:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8012446:	2200      	movs	r2, #0
 8012448:	61bb      	str	r3, [r7, #24]
 801244a:	61fa      	str	r2, [r7, #28]
 801244c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8012450:	f7ee fd28 	bl	8000ea4 <__aeabi_uldivmod>
 8012454:	4602      	mov	r2, r0
 8012456:	460b      	mov	r3, r1
 8012458:	4613      	mov	r3, r2
 801245a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 801245c:	4b0b      	ldr	r3, [pc, #44]	@ (801248c <HAL_RCC_GetSysClockFreq+0x200>)
 801245e:	685b      	ldr	r3, [r3, #4]
 8012460:	0c1b      	lsrs	r3, r3, #16
 8012462:	f003 0303 	and.w	r3, r3, #3
 8012466:	3301      	adds	r3, #1
 8012468:	005b      	lsls	r3, r3, #1
 801246a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 801246c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 801246e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8012470:	fbb2 f3f3 	udiv	r3, r2, r3
 8012474:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8012476:	e002      	b.n	801247e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8012478:	4b05      	ldr	r3, [pc, #20]	@ (8012490 <HAL_RCC_GetSysClockFreq+0x204>)
 801247a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 801247c:	bf00      	nop
    }
  }
  return sysclockfreq;
 801247e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8012480:	4618      	mov	r0, r3
 8012482:	3750      	adds	r7, #80	@ 0x50
 8012484:	46bd      	mov	sp, r7
 8012486:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 801248a:	bf00      	nop
 801248c:	40023800 	.word	0x40023800
 8012490:	00f42400 	.word	0x00f42400
 8012494:	007a1200 	.word	0x007a1200

08012498 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8012498:	b480      	push	{r7}
 801249a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 801249c:	4b03      	ldr	r3, [pc, #12]	@ (80124ac <HAL_RCC_GetHCLKFreq+0x14>)
 801249e:	681b      	ldr	r3, [r3, #0]
}
 80124a0:	4618      	mov	r0, r3
 80124a2:	46bd      	mov	sp, r7
 80124a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124a8:	4770      	bx	lr
 80124aa:	bf00      	nop
 80124ac:	20000064 	.word	0x20000064

080124b0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80124b0:	b580      	push	{r7, lr}
 80124b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80124b4:	f7ff fff0 	bl	8012498 <HAL_RCC_GetHCLKFreq>
 80124b8:	4602      	mov	r2, r0
 80124ba:	4b05      	ldr	r3, [pc, #20]	@ (80124d0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80124bc:	689b      	ldr	r3, [r3, #8]
 80124be:	0a9b      	lsrs	r3, r3, #10
 80124c0:	f003 0307 	and.w	r3, r3, #7
 80124c4:	4903      	ldr	r1, [pc, #12]	@ (80124d4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80124c6:	5ccb      	ldrb	r3, [r1, r3]
 80124c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80124cc:	4618      	mov	r0, r3
 80124ce:	bd80      	pop	{r7, pc}
 80124d0:	40023800 	.word	0x40023800
 80124d4:	08021fe0 	.word	0x08021fe0

080124d8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80124d8:	b580      	push	{r7, lr}
 80124da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80124dc:	f7ff ffdc 	bl	8012498 <HAL_RCC_GetHCLKFreq>
 80124e0:	4602      	mov	r2, r0
 80124e2:	4b05      	ldr	r3, [pc, #20]	@ (80124f8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80124e4:	689b      	ldr	r3, [r3, #8]
 80124e6:	0b5b      	lsrs	r3, r3, #13
 80124e8:	f003 0307 	and.w	r3, r3, #7
 80124ec:	4903      	ldr	r1, [pc, #12]	@ (80124fc <HAL_RCC_GetPCLK2Freq+0x24>)
 80124ee:	5ccb      	ldrb	r3, [r1, r3]
 80124f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80124f4:	4618      	mov	r0, r3
 80124f6:	bd80      	pop	{r7, pc}
 80124f8:	40023800 	.word	0x40023800
 80124fc:	08021fe0 	.word	0x08021fe0

08012500 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8012500:	b480      	push	{r7}
 8012502:	b083      	sub	sp, #12
 8012504:	af00      	add	r7, sp, #0
 8012506:	6078      	str	r0, [r7, #4]
 8012508:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 801250a:	687b      	ldr	r3, [r7, #4]
 801250c:	220f      	movs	r2, #15
 801250e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8012510:	4b12      	ldr	r3, [pc, #72]	@ (801255c <HAL_RCC_GetClockConfig+0x5c>)
 8012512:	689b      	ldr	r3, [r3, #8]
 8012514:	f003 0203 	and.w	r2, r3, #3
 8012518:	687b      	ldr	r3, [r7, #4]
 801251a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 801251c:	4b0f      	ldr	r3, [pc, #60]	@ (801255c <HAL_RCC_GetClockConfig+0x5c>)
 801251e:	689b      	ldr	r3, [r3, #8]
 8012520:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8012524:	687b      	ldr	r3, [r7, #4]
 8012526:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8012528:	4b0c      	ldr	r3, [pc, #48]	@ (801255c <HAL_RCC_GetClockConfig+0x5c>)
 801252a:	689b      	ldr	r3, [r3, #8]
 801252c:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8012530:	687b      	ldr	r3, [r7, #4]
 8012532:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8012534:	4b09      	ldr	r3, [pc, #36]	@ (801255c <HAL_RCC_GetClockConfig+0x5c>)
 8012536:	689b      	ldr	r3, [r3, #8]
 8012538:	08db      	lsrs	r3, r3, #3
 801253a:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 801253e:	687b      	ldr	r3, [r7, #4]
 8012540:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8012542:	4b07      	ldr	r3, [pc, #28]	@ (8012560 <HAL_RCC_GetClockConfig+0x60>)
 8012544:	681b      	ldr	r3, [r3, #0]
 8012546:	f003 0207 	and.w	r2, r3, #7
 801254a:	683b      	ldr	r3, [r7, #0]
 801254c:	601a      	str	r2, [r3, #0]
}
 801254e:	bf00      	nop
 8012550:	370c      	adds	r7, #12
 8012552:	46bd      	mov	sp, r7
 8012554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012558:	4770      	bx	lr
 801255a:	bf00      	nop
 801255c:	40023800 	.word	0x40023800
 8012560:	40023c00 	.word	0x40023c00

08012564 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8012564:	b580      	push	{r7, lr}
 8012566:	b082      	sub	sp, #8
 8012568:	af00      	add	r7, sp, #0
 801256a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 801256c:	687b      	ldr	r3, [r7, #4]
 801256e:	2b00      	cmp	r3, #0
 8012570:	d101      	bne.n	8012576 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8012572:	2301      	movs	r3, #1
 8012574:	e07b      	b.n	801266e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8012576:	687b      	ldr	r3, [r7, #4]
 8012578:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801257a:	2b00      	cmp	r3, #0
 801257c:	d108      	bne.n	8012590 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 801257e:	687b      	ldr	r3, [r7, #4]
 8012580:	685b      	ldr	r3, [r3, #4]
 8012582:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8012586:	d009      	beq.n	801259c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8012588:	687b      	ldr	r3, [r7, #4]
 801258a:	2200      	movs	r2, #0
 801258c:	61da      	str	r2, [r3, #28]
 801258e:	e005      	b.n	801259c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8012590:	687b      	ldr	r3, [r7, #4]
 8012592:	2200      	movs	r2, #0
 8012594:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8012596:	687b      	ldr	r3, [r7, #4]
 8012598:	2200      	movs	r2, #0
 801259a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 801259c:	687b      	ldr	r3, [r7, #4]
 801259e:	2200      	movs	r2, #0
 80125a0:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80125a2:	687b      	ldr	r3, [r7, #4]
 80125a4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80125a8:	b2db      	uxtb	r3, r3
 80125aa:	2b00      	cmp	r3, #0
 80125ac:	d106      	bne.n	80125bc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80125ae:	687b      	ldr	r3, [r7, #4]
 80125b0:	2200      	movs	r2, #0
 80125b2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80125b6:	6878      	ldr	r0, [r7, #4]
 80125b8:	f7f0 fde0 	bl	800317c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80125bc:	687b      	ldr	r3, [r7, #4]
 80125be:	2202      	movs	r2, #2
 80125c0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80125c4:	687b      	ldr	r3, [r7, #4]
 80125c6:	681b      	ldr	r3, [r3, #0]
 80125c8:	681a      	ldr	r2, [r3, #0]
 80125ca:	687b      	ldr	r3, [r7, #4]
 80125cc:	681b      	ldr	r3, [r3, #0]
 80125ce:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80125d2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80125d4:	687b      	ldr	r3, [r7, #4]
 80125d6:	685b      	ldr	r3, [r3, #4]
 80125d8:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80125dc:	687b      	ldr	r3, [r7, #4]
 80125de:	689b      	ldr	r3, [r3, #8]
 80125e0:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80125e4:	431a      	orrs	r2, r3
 80125e6:	687b      	ldr	r3, [r7, #4]
 80125e8:	68db      	ldr	r3, [r3, #12]
 80125ea:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80125ee:	431a      	orrs	r2, r3
 80125f0:	687b      	ldr	r3, [r7, #4]
 80125f2:	691b      	ldr	r3, [r3, #16]
 80125f4:	f003 0302 	and.w	r3, r3, #2
 80125f8:	431a      	orrs	r2, r3
 80125fa:	687b      	ldr	r3, [r7, #4]
 80125fc:	695b      	ldr	r3, [r3, #20]
 80125fe:	f003 0301 	and.w	r3, r3, #1
 8012602:	431a      	orrs	r2, r3
 8012604:	687b      	ldr	r3, [r7, #4]
 8012606:	699b      	ldr	r3, [r3, #24]
 8012608:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 801260c:	431a      	orrs	r2, r3
 801260e:	687b      	ldr	r3, [r7, #4]
 8012610:	69db      	ldr	r3, [r3, #28]
 8012612:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8012616:	431a      	orrs	r2, r3
 8012618:	687b      	ldr	r3, [r7, #4]
 801261a:	6a1b      	ldr	r3, [r3, #32]
 801261c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8012620:	ea42 0103 	orr.w	r1, r2, r3
 8012624:	687b      	ldr	r3, [r7, #4]
 8012626:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012628:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 801262c:	687b      	ldr	r3, [r7, #4]
 801262e:	681b      	ldr	r3, [r3, #0]
 8012630:	430a      	orrs	r2, r1
 8012632:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8012634:	687b      	ldr	r3, [r7, #4]
 8012636:	699b      	ldr	r3, [r3, #24]
 8012638:	0c1b      	lsrs	r3, r3, #16
 801263a:	f003 0104 	and.w	r1, r3, #4
 801263e:	687b      	ldr	r3, [r7, #4]
 8012640:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012642:	f003 0210 	and.w	r2, r3, #16
 8012646:	687b      	ldr	r3, [r7, #4]
 8012648:	681b      	ldr	r3, [r3, #0]
 801264a:	430a      	orrs	r2, r1
 801264c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 801264e:	687b      	ldr	r3, [r7, #4]
 8012650:	681b      	ldr	r3, [r3, #0]
 8012652:	69da      	ldr	r2, [r3, #28]
 8012654:	687b      	ldr	r3, [r7, #4]
 8012656:	681b      	ldr	r3, [r3, #0]
 8012658:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 801265c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 801265e:	687b      	ldr	r3, [r7, #4]
 8012660:	2200      	movs	r2, #0
 8012662:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8012664:	687b      	ldr	r3, [r7, #4]
 8012666:	2201      	movs	r2, #1
 8012668:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 801266c:	2300      	movs	r3, #0
}
 801266e:	4618      	mov	r0, r3
 8012670:	3708      	adds	r7, #8
 8012672:	46bd      	mov	sp, r7
 8012674:	bd80      	pop	{r7, pc}
	...

08012678 <HAL_SPI_Receive_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8012678:	b580      	push	{r7, lr}
 801267a:	b086      	sub	sp, #24
 801267c:	af00      	add	r7, sp, #0
 801267e:	60f8      	str	r0, [r7, #12]
 8012680:	60b9      	str	r1, [r7, #8]
 8012682:	4613      	mov	r3, r2
 8012684:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8012686:	2300      	movs	r3, #0
 8012688:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 801268a:	68fb      	ldr	r3, [r7, #12]
 801268c:	689b      	ldr	r3, [r3, #8]
 801268e:	2b00      	cmp	r3, #0
 8012690:	d110      	bne.n	80126b4 <HAL_SPI_Receive_IT+0x3c>
 8012692:	68fb      	ldr	r3, [r7, #12]
 8012694:	685b      	ldr	r3, [r3, #4]
 8012696:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 801269a:	d10b      	bne.n	80126b4 <HAL_SPI_Receive_IT+0x3c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 801269c:	68fb      	ldr	r3, [r7, #12]
 801269e:	2204      	movs	r2, #4
 80126a0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_IT(hspi, pData, pData, Size);
 80126a4:	88fb      	ldrh	r3, [r7, #6]
 80126a6:	68ba      	ldr	r2, [r7, #8]
 80126a8:	68b9      	ldr	r1, [r7, #8]
 80126aa:	68f8      	ldr	r0, [r7, #12]
 80126ac:	f000 f882 	bl	80127b4 <HAL_SPI_TransmitReceive_IT>
 80126b0:	4603      	mov	r3, r0
 80126b2:	e076      	b.n	80127a2 <HAL_SPI_Receive_IT+0x12a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80126b4:	68fb      	ldr	r3, [r7, #12]
 80126b6:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80126ba:	2b01      	cmp	r3, #1
 80126bc:	d101      	bne.n	80126c2 <HAL_SPI_Receive_IT+0x4a>
 80126be:	2302      	movs	r3, #2
 80126c0:	e06f      	b.n	80127a2 <HAL_SPI_Receive_IT+0x12a>
 80126c2:	68fb      	ldr	r3, [r7, #12]
 80126c4:	2201      	movs	r2, #1
 80126c6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 80126ca:	68fb      	ldr	r3, [r7, #12]
 80126cc:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80126d0:	b2db      	uxtb	r3, r3
 80126d2:	2b01      	cmp	r3, #1
 80126d4:	d002      	beq.n	80126dc <HAL_SPI_Receive_IT+0x64>
  {
    errorcode = HAL_BUSY;
 80126d6:	2302      	movs	r3, #2
 80126d8:	75fb      	strb	r3, [r7, #23]
    goto error;
 80126da:	e05d      	b.n	8012798 <HAL_SPI_Receive_IT+0x120>
  }

  if ((pData == NULL) || (Size == 0U))
 80126dc:	68bb      	ldr	r3, [r7, #8]
 80126de:	2b00      	cmp	r3, #0
 80126e0:	d002      	beq.n	80126e8 <HAL_SPI_Receive_IT+0x70>
 80126e2:	88fb      	ldrh	r3, [r7, #6]
 80126e4:	2b00      	cmp	r3, #0
 80126e6:	d102      	bne.n	80126ee <HAL_SPI_Receive_IT+0x76>
  {
    errorcode = HAL_ERROR;
 80126e8:	2301      	movs	r3, #1
 80126ea:	75fb      	strb	r3, [r7, #23]
    goto error;
 80126ec:	e054      	b.n	8012798 <HAL_SPI_Receive_IT+0x120>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80126ee:	68fb      	ldr	r3, [r7, #12]
 80126f0:	2204      	movs	r2, #4
 80126f2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80126f6:	68fb      	ldr	r3, [r7, #12]
 80126f8:	2200      	movs	r2, #0
 80126fa:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80126fc:	68fb      	ldr	r3, [r7, #12]
 80126fe:	68ba      	ldr	r2, [r7, #8]
 8012700:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8012702:	68fb      	ldr	r3, [r7, #12]
 8012704:	88fa      	ldrh	r2, [r7, #6]
 8012706:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8012708:	68fb      	ldr	r3, [r7, #12]
 801270a:	88fa      	ldrh	r2, [r7, #6]
 801270c:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 801270e:	68fb      	ldr	r3, [r7, #12]
 8012710:	2200      	movs	r2, #0
 8012712:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8012714:	68fb      	ldr	r3, [r7, #12]
 8012716:	2200      	movs	r2, #0
 8012718:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 801271a:	68fb      	ldr	r3, [r7, #12]
 801271c:	2200      	movs	r2, #0
 801271e:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxISR       = NULL;
 8012720:	68fb      	ldr	r3, [r7, #12]
 8012722:	2200      	movs	r2, #0
 8012724:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8012726:	68fb      	ldr	r3, [r7, #12]
 8012728:	68db      	ldr	r3, [r3, #12]
 801272a:	2b00      	cmp	r3, #0
 801272c:	d003      	beq.n	8012736 <HAL_SPI_Receive_IT+0xbe>
  {
    hspi->RxISR = SPI_RxISR_16BIT;
 801272e:	68fb      	ldr	r3, [r7, #12]
 8012730:	4a1e      	ldr	r2, [pc, #120]	@ (80127ac <HAL_SPI_Receive_IT+0x134>)
 8012732:	641a      	str	r2, [r3, #64]	@ 0x40
 8012734:	e002      	b.n	801273c <HAL_SPI_Receive_IT+0xc4>
  }
  else
  {
    hspi->RxISR = SPI_RxISR_8BIT;
 8012736:	68fb      	ldr	r3, [r7, #12]
 8012738:	4a1d      	ldr	r2, [pc, #116]	@ (80127b0 <HAL_SPI_Receive_IT+0x138>)
 801273a:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 801273c:	68fb      	ldr	r3, [r7, #12]
 801273e:	689b      	ldr	r3, [r3, #8]
 8012740:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8012744:	d10f      	bne.n	8012766 <HAL_SPI_Receive_IT+0xee>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8012746:	68fb      	ldr	r3, [r7, #12]
 8012748:	681b      	ldr	r3, [r3, #0]
 801274a:	681a      	ldr	r2, [r3, #0]
 801274c:	68fb      	ldr	r3, [r7, #12]
 801274e:	681b      	ldr	r3, [r3, #0]
 8012750:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8012754:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8012756:	68fb      	ldr	r3, [r7, #12]
 8012758:	681b      	ldr	r3, [r3, #0]
 801275a:	681a      	ldr	r2, [r3, #0]
 801275c:	68fb      	ldr	r3, [r7, #12]
 801275e:	681b      	ldr	r3, [r3, #0]
 8012760:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8012764:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8012766:	68fb      	ldr	r3, [r7, #12]
 8012768:	681b      	ldr	r3, [r3, #0]
 801276a:	685a      	ldr	r2, [r3, #4]
 801276c:	68fb      	ldr	r3, [r7, #12]
 801276e:	681b      	ldr	r3, [r3, #0]
 8012770:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 8012774:	605a      	str	r2, [r3, #4]
  /* Note : The SPI must be enabled after unlocking current process
            to avoid the risk of SPI interrupt handle execution before current
            process unlock */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8012776:	68fb      	ldr	r3, [r7, #12]
 8012778:	681b      	ldr	r3, [r3, #0]
 801277a:	681b      	ldr	r3, [r3, #0]
 801277c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8012780:	2b40      	cmp	r3, #64	@ 0x40
 8012782:	d008      	beq.n	8012796 <HAL_SPI_Receive_IT+0x11e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8012784:	68fb      	ldr	r3, [r7, #12]
 8012786:	681b      	ldr	r3, [r3, #0]
 8012788:	681a      	ldr	r2, [r3, #0]
 801278a:	68fb      	ldr	r3, [r7, #12]
 801278c:	681b      	ldr	r3, [r3, #0]
 801278e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8012792:	601a      	str	r2, [r3, #0]
 8012794:	e000      	b.n	8012798 <HAL_SPI_Receive_IT+0x120>
  }

error :
 8012796:	bf00      	nop
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8012798:	68fb      	ldr	r3, [r7, #12]
 801279a:	2200      	movs	r2, #0
 801279c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 80127a0:	7dfb      	ldrb	r3, [r7, #23]
}
 80127a2:	4618      	mov	r0, r3
 80127a4:	3718      	adds	r7, #24
 80127a6:	46bd      	mov	sp, r7
 80127a8:	bd80      	pop	{r7, pc}
 80127aa:	bf00      	nop
 80127ac:	08012ce1 	.word	0x08012ce1
 80127b0:	08012c97 	.word	0x08012c97

080127b4 <HAL_SPI_TransmitReceive_IT>:
  * @param  pRxData pointer to reception data buffer
  * @param  Size amount of data to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size)
{
 80127b4:	b480      	push	{r7}
 80127b6:	b087      	sub	sp, #28
 80127b8:	af00      	add	r7, sp, #0
 80127ba:	60f8      	str	r0, [r7, #12]
 80127bc:	60b9      	str	r1, [r7, #8]
 80127be:	607a      	str	r2, [r7, #4]
 80127c0:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80127c2:	2300      	movs	r3, #0
 80127c4:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 80127c6:	68fb      	ldr	r3, [r7, #12]
 80127c8:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80127cc:	2b01      	cmp	r3, #1
 80127ce:	d101      	bne.n	80127d4 <HAL_SPI_TransmitReceive_IT+0x20>
 80127d0:	2302      	movs	r3, #2
 80127d2:	e075      	b.n	80128c0 <HAL_SPI_TransmitReceive_IT+0x10c>
 80127d4:	68fb      	ldr	r3, [r7, #12]
 80127d6:	2201      	movs	r2, #1
 80127d8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80127dc:	68fb      	ldr	r3, [r7, #12]
 80127de:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80127e2:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 80127e4:	68fb      	ldr	r3, [r7, #12]
 80127e6:	685b      	ldr	r3, [r3, #4]
 80127e8:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80127ea:	7dbb      	ldrb	r3, [r7, #22]
 80127ec:	2b01      	cmp	r3, #1
 80127ee:	d00d      	beq.n	801280c <HAL_SPI_TransmitReceive_IT+0x58>
 80127f0:	693b      	ldr	r3, [r7, #16]
 80127f2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80127f6:	d106      	bne.n	8012806 <HAL_SPI_TransmitReceive_IT+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80127f8:	68fb      	ldr	r3, [r7, #12]
 80127fa:	689b      	ldr	r3, [r3, #8]
 80127fc:	2b00      	cmp	r3, #0
 80127fe:	d102      	bne.n	8012806 <HAL_SPI_TransmitReceive_IT+0x52>
 8012800:	7dbb      	ldrb	r3, [r7, #22]
 8012802:	2b04      	cmp	r3, #4
 8012804:	d002      	beq.n	801280c <HAL_SPI_TransmitReceive_IT+0x58>
  {
    errorcode = HAL_BUSY;
 8012806:	2302      	movs	r3, #2
 8012808:	75fb      	strb	r3, [r7, #23]
    goto error;
 801280a:	e054      	b.n	80128b6 <HAL_SPI_TransmitReceive_IT+0x102>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 801280c:	68bb      	ldr	r3, [r7, #8]
 801280e:	2b00      	cmp	r3, #0
 8012810:	d005      	beq.n	801281e <HAL_SPI_TransmitReceive_IT+0x6a>
 8012812:	687b      	ldr	r3, [r7, #4]
 8012814:	2b00      	cmp	r3, #0
 8012816:	d002      	beq.n	801281e <HAL_SPI_TransmitReceive_IT+0x6a>
 8012818:	887b      	ldrh	r3, [r7, #2]
 801281a:	2b00      	cmp	r3, #0
 801281c:	d102      	bne.n	8012824 <HAL_SPI_TransmitReceive_IT+0x70>
  {
    errorcode = HAL_ERROR;
 801281e:	2301      	movs	r3, #1
 8012820:	75fb      	strb	r3, [r7, #23]
    goto error;
 8012822:	e048      	b.n	80128b6 <HAL_SPI_TransmitReceive_IT+0x102>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8012824:	68fb      	ldr	r3, [r7, #12]
 8012826:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 801282a:	b2db      	uxtb	r3, r3
 801282c:	2b04      	cmp	r3, #4
 801282e:	d003      	beq.n	8012838 <HAL_SPI_TransmitReceive_IT+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8012830:	68fb      	ldr	r3, [r7, #12]
 8012832:	2205      	movs	r2, #5
 8012834:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8012838:	68fb      	ldr	r3, [r7, #12]
 801283a:	2200      	movs	r2, #0
 801283c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 801283e:	68fb      	ldr	r3, [r7, #12]
 8012840:	68ba      	ldr	r2, [r7, #8]
 8012842:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8012844:	68fb      	ldr	r3, [r7, #12]
 8012846:	887a      	ldrh	r2, [r7, #2]
 8012848:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 801284a:	68fb      	ldr	r3, [r7, #12]
 801284c:	887a      	ldrh	r2, [r7, #2]
 801284e:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8012850:	68fb      	ldr	r3, [r7, #12]
 8012852:	687a      	ldr	r2, [r7, #4]
 8012854:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8012856:	68fb      	ldr	r3, [r7, #12]
 8012858:	887a      	ldrh	r2, [r7, #2]
 801285a:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 801285c:	68fb      	ldr	r3, [r7, #12]
 801285e:	887a      	ldrh	r2, [r7, #2]
 8012860:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8012862:	68fb      	ldr	r3, [r7, #12]
 8012864:	68db      	ldr	r3, [r3, #12]
 8012866:	2b00      	cmp	r3, #0
 8012868:	d006      	beq.n	8012878 <HAL_SPI_TransmitReceive_IT+0xc4>
  {
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 801286a:	68fb      	ldr	r3, [r7, #12]
 801286c:	4a17      	ldr	r2, [pc, #92]	@ (80128cc <HAL_SPI_TransmitReceive_IT+0x118>)
 801286e:	641a      	str	r2, [r3, #64]	@ 0x40
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 8012870:	68fb      	ldr	r3, [r7, #12]
 8012872:	4a17      	ldr	r2, [pc, #92]	@ (80128d0 <HAL_SPI_TransmitReceive_IT+0x11c>)
 8012874:	645a      	str	r2, [r3, #68]	@ 0x44
 8012876:	e005      	b.n	8012884 <HAL_SPI_TransmitReceive_IT+0xd0>
  }
  else
  {
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 8012878:	68fb      	ldr	r3, [r7, #12]
 801287a:	4a16      	ldr	r2, [pc, #88]	@ (80128d4 <HAL_SPI_TransmitReceive_IT+0x120>)
 801287c:	641a      	str	r2, [r3, #64]	@ 0x40
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 801287e:	68fb      	ldr	r3, [r7, #12]
 8012880:	4a15      	ldr	r2, [pc, #84]	@ (80128d8 <HAL_SPI_TransmitReceive_IT+0x124>)
 8012882:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE, RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8012884:	68fb      	ldr	r3, [r7, #12]
 8012886:	681b      	ldr	r3, [r3, #0]
 8012888:	685a      	ldr	r2, [r3, #4]
 801288a:	68fb      	ldr	r3, [r7, #12]
 801288c:	681b      	ldr	r3, [r3, #0]
 801288e:	f042 02e0 	orr.w	r2, r2, #224	@ 0xe0
 8012892:	605a      	str	r2, [r3, #4]

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8012894:	68fb      	ldr	r3, [r7, #12]
 8012896:	681b      	ldr	r3, [r3, #0]
 8012898:	681b      	ldr	r3, [r3, #0]
 801289a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801289e:	2b40      	cmp	r3, #64	@ 0x40
 80128a0:	d008      	beq.n	80128b4 <HAL_SPI_TransmitReceive_IT+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80128a2:	68fb      	ldr	r3, [r7, #12]
 80128a4:	681b      	ldr	r3, [r3, #0]
 80128a6:	681a      	ldr	r2, [r3, #0]
 80128a8:	68fb      	ldr	r3, [r7, #12]
 80128aa:	681b      	ldr	r3, [r3, #0]
 80128ac:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80128b0:	601a      	str	r2, [r3, #0]
 80128b2:	e000      	b.n	80128b6 <HAL_SPI_TransmitReceive_IT+0x102>
  }

error :
 80128b4:	bf00      	nop
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80128b6:	68fb      	ldr	r3, [r7, #12]
 80128b8:	2200      	movs	r2, #0
 80128ba:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 80128be:	7dfb      	ldrb	r3, [r7, #23]
}
 80128c0:	4618      	mov	r0, r3
 80128c2:	371c      	adds	r7, #28
 80128c4:	46bd      	mov	sp, r7
 80128c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128ca:	4770      	bx	lr
 80128cc:	08012bd9 	.word	0x08012bd9
 80128d0:	08012c39 	.word	0x08012c39
 80128d4:	08012b15 	.word	0x08012b15
 80128d8:	08012b79 	.word	0x08012b79

080128dc <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80128dc:	b580      	push	{r7, lr}
 80128de:	b088      	sub	sp, #32
 80128e0:	af00      	add	r7, sp, #0
 80128e2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80128e4:	687b      	ldr	r3, [r7, #4]
 80128e6:	681b      	ldr	r3, [r3, #0]
 80128e8:	685b      	ldr	r3, [r3, #4]
 80128ea:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80128ec:	687b      	ldr	r3, [r7, #4]
 80128ee:	681b      	ldr	r3, [r3, #0]
 80128f0:	689b      	ldr	r3, [r3, #8]
 80128f2:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80128f4:	69bb      	ldr	r3, [r7, #24]
 80128f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80128fa:	2b00      	cmp	r3, #0
 80128fc:	d10e      	bne.n	801291c <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80128fe:	69bb      	ldr	r3, [r7, #24]
 8012900:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8012904:	2b00      	cmp	r3, #0
 8012906:	d009      	beq.n	801291c <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8012908:	69fb      	ldr	r3, [r7, #28]
 801290a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801290e:	2b00      	cmp	r3, #0
 8012910:	d004      	beq.n	801291c <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 8012912:	687b      	ldr	r3, [r7, #4]
 8012914:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8012916:	6878      	ldr	r0, [r7, #4]
 8012918:	4798      	blx	r3
    return;
 801291a:	e0ce      	b.n	8012aba <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 801291c:	69bb      	ldr	r3, [r7, #24]
 801291e:	f003 0302 	and.w	r3, r3, #2
 8012922:	2b00      	cmp	r3, #0
 8012924:	d009      	beq.n	801293a <HAL_SPI_IRQHandler+0x5e>
 8012926:	69fb      	ldr	r3, [r7, #28]
 8012928:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 801292c:	2b00      	cmp	r3, #0
 801292e:	d004      	beq.n	801293a <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 8012930:	687b      	ldr	r3, [r7, #4]
 8012932:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8012934:	6878      	ldr	r0, [r7, #4]
 8012936:	4798      	blx	r3
    return;
 8012938:	e0bf      	b.n	8012aba <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 801293a:	69bb      	ldr	r3, [r7, #24]
 801293c:	f003 0320 	and.w	r3, r3, #32
 8012940:	2b00      	cmp	r3, #0
 8012942:	d10a      	bne.n	801295a <HAL_SPI_IRQHandler+0x7e>
 8012944:	69bb      	ldr	r3, [r7, #24]
 8012946:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801294a:	2b00      	cmp	r3, #0
 801294c:	d105      	bne.n	801295a <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 801294e:	69bb      	ldr	r3, [r7, #24]
 8012950:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8012954:	2b00      	cmp	r3, #0
 8012956:	f000 80b0 	beq.w	8012aba <HAL_SPI_IRQHandler+0x1de>
 801295a:	69fb      	ldr	r3, [r7, #28]
 801295c:	f003 0320 	and.w	r3, r3, #32
 8012960:	2b00      	cmp	r3, #0
 8012962:	f000 80aa 	beq.w	8012aba <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8012966:	69bb      	ldr	r3, [r7, #24]
 8012968:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801296c:	2b00      	cmp	r3, #0
 801296e:	d023      	beq.n	80129b8 <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8012970:	687b      	ldr	r3, [r7, #4]
 8012972:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8012976:	b2db      	uxtb	r3, r3
 8012978:	2b03      	cmp	r3, #3
 801297a:	d011      	beq.n	80129a0 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 801297c:	687b      	ldr	r3, [r7, #4]
 801297e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8012980:	f043 0204 	orr.w	r2, r3, #4
 8012984:	687b      	ldr	r3, [r7, #4]
 8012986:	655a      	str	r2, [r3, #84]	@ 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8012988:	2300      	movs	r3, #0
 801298a:	617b      	str	r3, [r7, #20]
 801298c:	687b      	ldr	r3, [r7, #4]
 801298e:	681b      	ldr	r3, [r3, #0]
 8012990:	68db      	ldr	r3, [r3, #12]
 8012992:	617b      	str	r3, [r7, #20]
 8012994:	687b      	ldr	r3, [r7, #4]
 8012996:	681b      	ldr	r3, [r3, #0]
 8012998:	689b      	ldr	r3, [r3, #8]
 801299a:	617b      	str	r3, [r7, #20]
 801299c:	697b      	ldr	r3, [r7, #20]
 801299e:	e00b      	b.n	80129b8 <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80129a0:	2300      	movs	r3, #0
 80129a2:	613b      	str	r3, [r7, #16]
 80129a4:	687b      	ldr	r3, [r7, #4]
 80129a6:	681b      	ldr	r3, [r3, #0]
 80129a8:	68db      	ldr	r3, [r3, #12]
 80129aa:	613b      	str	r3, [r7, #16]
 80129ac:	687b      	ldr	r3, [r7, #4]
 80129ae:	681b      	ldr	r3, [r3, #0]
 80129b0:	689b      	ldr	r3, [r3, #8]
 80129b2:	613b      	str	r3, [r7, #16]
 80129b4:	693b      	ldr	r3, [r7, #16]
        return;
 80129b6:	e080      	b.n	8012aba <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80129b8:	69bb      	ldr	r3, [r7, #24]
 80129ba:	f003 0320 	and.w	r3, r3, #32
 80129be:	2b00      	cmp	r3, #0
 80129c0:	d014      	beq.n	80129ec <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80129c2:	687b      	ldr	r3, [r7, #4]
 80129c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80129c6:	f043 0201 	orr.w	r2, r3, #1
 80129ca:	687b      	ldr	r3, [r7, #4]
 80129cc:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80129ce:	2300      	movs	r3, #0
 80129d0:	60fb      	str	r3, [r7, #12]
 80129d2:	687b      	ldr	r3, [r7, #4]
 80129d4:	681b      	ldr	r3, [r3, #0]
 80129d6:	689b      	ldr	r3, [r3, #8]
 80129d8:	60fb      	str	r3, [r7, #12]
 80129da:	687b      	ldr	r3, [r7, #4]
 80129dc:	681b      	ldr	r3, [r3, #0]
 80129de:	681a      	ldr	r2, [r3, #0]
 80129e0:	687b      	ldr	r3, [r7, #4]
 80129e2:	681b      	ldr	r3, [r3, #0]
 80129e4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80129e8:	601a      	str	r2, [r3, #0]
 80129ea:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 80129ec:	69bb      	ldr	r3, [r7, #24]
 80129ee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80129f2:	2b00      	cmp	r3, #0
 80129f4:	d00c      	beq.n	8012a10 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80129f6:	687b      	ldr	r3, [r7, #4]
 80129f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80129fa:	f043 0208 	orr.w	r2, r3, #8
 80129fe:	687b      	ldr	r3, [r7, #4]
 8012a00:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8012a02:	2300      	movs	r3, #0
 8012a04:	60bb      	str	r3, [r7, #8]
 8012a06:	687b      	ldr	r3, [r7, #4]
 8012a08:	681b      	ldr	r3, [r3, #0]
 8012a0a:	689b      	ldr	r3, [r3, #8]
 8012a0c:	60bb      	str	r3, [r7, #8]
 8012a0e:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8012a10:	687b      	ldr	r3, [r7, #4]
 8012a12:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8012a14:	2b00      	cmp	r3, #0
 8012a16:	d04f      	beq.n	8012ab8 <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8012a18:	687b      	ldr	r3, [r7, #4]
 8012a1a:	681b      	ldr	r3, [r3, #0]
 8012a1c:	685a      	ldr	r2, [r3, #4]
 8012a1e:	687b      	ldr	r3, [r7, #4]
 8012a20:	681b      	ldr	r3, [r3, #0]
 8012a22:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8012a26:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8012a28:	687b      	ldr	r3, [r7, #4]
 8012a2a:	2201      	movs	r2, #1
 8012a2c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8012a30:	69fb      	ldr	r3, [r7, #28]
 8012a32:	f003 0302 	and.w	r3, r3, #2
 8012a36:	2b00      	cmp	r3, #0
 8012a38:	d104      	bne.n	8012a44 <HAL_SPI_IRQHandler+0x168>
 8012a3a:	69fb      	ldr	r3, [r7, #28]
 8012a3c:	f003 0301 	and.w	r3, r3, #1
 8012a40:	2b00      	cmp	r3, #0
 8012a42:	d034      	beq.n	8012aae <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8012a44:	687b      	ldr	r3, [r7, #4]
 8012a46:	681b      	ldr	r3, [r3, #0]
 8012a48:	685a      	ldr	r2, [r3, #4]
 8012a4a:	687b      	ldr	r3, [r7, #4]
 8012a4c:	681b      	ldr	r3, [r3, #0]
 8012a4e:	f022 0203 	bic.w	r2, r2, #3
 8012a52:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8012a54:	687b      	ldr	r3, [r7, #4]
 8012a56:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8012a58:	2b00      	cmp	r3, #0
 8012a5a:	d011      	beq.n	8012a80 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8012a5c:	687b      	ldr	r3, [r7, #4]
 8012a5e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8012a60:	4a17      	ldr	r2, [pc, #92]	@ (8012ac0 <HAL_SPI_IRQHandler+0x1e4>)
 8012a62:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8012a64:	687b      	ldr	r3, [r7, #4]
 8012a66:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8012a68:	4618      	mov	r0, r3
 8012a6a:	f7fa fc3d 	bl	800d2e8 <HAL_DMA_Abort_IT>
 8012a6e:	4603      	mov	r3, r0
 8012a70:	2b00      	cmp	r3, #0
 8012a72:	d005      	beq.n	8012a80 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8012a74:	687b      	ldr	r3, [r7, #4]
 8012a76:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8012a78:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8012a7c:	687b      	ldr	r3, [r7, #4]
 8012a7e:	655a      	str	r2, [r3, #84]	@ 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8012a80:	687b      	ldr	r3, [r7, #4]
 8012a82:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8012a84:	2b00      	cmp	r3, #0
 8012a86:	d016      	beq.n	8012ab6 <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8012a88:	687b      	ldr	r3, [r7, #4]
 8012a8a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8012a8c:	4a0c      	ldr	r2, [pc, #48]	@ (8012ac0 <HAL_SPI_IRQHandler+0x1e4>)
 8012a8e:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8012a90:	687b      	ldr	r3, [r7, #4]
 8012a92:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8012a94:	4618      	mov	r0, r3
 8012a96:	f7fa fc27 	bl	800d2e8 <HAL_DMA_Abort_IT>
 8012a9a:	4603      	mov	r3, r0
 8012a9c:	2b00      	cmp	r3, #0
 8012a9e:	d00a      	beq.n	8012ab6 <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8012aa0:	687b      	ldr	r3, [r7, #4]
 8012aa2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8012aa4:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8012aa8:	687b      	ldr	r3, [r7, #4]
 8012aaa:	655a      	str	r2, [r3, #84]	@ 0x54
        if (hspi->hdmatx != NULL)
 8012aac:	e003      	b.n	8012ab6 <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8012aae:	6878      	ldr	r0, [r7, #4]
 8012ab0:	f000 f812 	bl	8012ad8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8012ab4:	e000      	b.n	8012ab8 <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 8012ab6:	bf00      	nop
    return;
 8012ab8:	bf00      	nop
  }
}
 8012aba:	3720      	adds	r7, #32
 8012abc:	46bd      	mov	sp, r7
 8012abe:	bd80      	pop	{r7, pc}
 8012ac0:	08012aed 	.word	0x08012aed

08012ac4 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8012ac4:	b480      	push	{r7}
 8012ac6:	b083      	sub	sp, #12
 8012ac8:	af00      	add	r7, sp, #0
 8012aca:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8012acc:	bf00      	nop
 8012ace:	370c      	adds	r7, #12
 8012ad0:	46bd      	mov	sp, r7
 8012ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ad6:	4770      	bx	lr

08012ad8 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8012ad8:	b480      	push	{r7}
 8012ada:	b083      	sub	sp, #12
 8012adc:	af00      	add	r7, sp, #0
 8012ade:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8012ae0:	bf00      	nop
 8012ae2:	370c      	adds	r7, #12
 8012ae4:	46bd      	mov	sp, r7
 8012ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012aea:	4770      	bx	lr

08012aec <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8012aec:	b580      	push	{r7, lr}
 8012aee:	b084      	sub	sp, #16
 8012af0:	af00      	add	r7, sp, #0
 8012af2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8012af4:	687b      	ldr	r3, [r7, #4]
 8012af6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012af8:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8012afa:	68fb      	ldr	r3, [r7, #12]
 8012afc:	2200      	movs	r2, #0
 8012afe:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferCount = 0U;
 8012b00:	68fb      	ldr	r3, [r7, #12]
 8012b02:	2200      	movs	r2, #0
 8012b04:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8012b06:	68f8      	ldr	r0, [r7, #12]
 8012b08:	f7ff ffe6 	bl	8012ad8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8012b0c:	bf00      	nop
 8012b0e:	3710      	adds	r7, #16
 8012b10:	46bd      	mov	sp, r7
 8012b12:	bd80      	pop	{r7, pc}

08012b14 <SPI_2linesRxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8012b14:	b580      	push	{r7, lr}
 8012b16:	b082      	sub	sp, #8
 8012b18:	af00      	add	r7, sp, #0
 8012b1a:	6078      	str	r0, [r7, #4]
  /* Receive data in 8bit mode */
  *hspi->pRxBuffPtr = *((__IO uint8_t *)&hspi->Instance->DR);
 8012b1c:	687b      	ldr	r3, [r7, #4]
 8012b1e:	681b      	ldr	r3, [r3, #0]
 8012b20:	f103 020c 	add.w	r2, r3, #12
 8012b24:	687b      	ldr	r3, [r7, #4]
 8012b26:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012b28:	7812      	ldrb	r2, [r2, #0]
 8012b2a:	b2d2      	uxtb	r2, r2
 8012b2c:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
 8012b2e:	687b      	ldr	r3, [r7, #4]
 8012b30:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012b32:	1c5a      	adds	r2, r3, #1
 8012b34:	687b      	ldr	r3, [r7, #4]
 8012b36:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount--;
 8012b38:	687b      	ldr	r3, [r7, #4]
 8012b3a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8012b3c:	b29b      	uxth	r3, r3
 8012b3e:	3b01      	subs	r3, #1
 8012b40:	b29a      	uxth	r2, r3
 8012b42:	687b      	ldr	r3, [r7, #4]
 8012b44:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Check end of the reception */
  if (hspi->RxXferCount == 0U)
 8012b46:	687b      	ldr	r3, [r7, #4]
 8012b48:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8012b4a:	b29b      	uxth	r3, r3
 8012b4c:	2b00      	cmp	r3, #0
 8012b4e:	d10f      	bne.n	8012b70 <SPI_2linesRxISR_8BIT+0x5c>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE  and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8012b50:	687b      	ldr	r3, [r7, #4]
 8012b52:	681b      	ldr	r3, [r3, #0]
 8012b54:	685a      	ldr	r2, [r3, #4]
 8012b56:	687b      	ldr	r3, [r7, #4]
 8012b58:	681b      	ldr	r3, [r3, #0]
 8012b5a:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8012b5e:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8012b60:	687b      	ldr	r3, [r7, #4]
 8012b62:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8012b64:	b29b      	uxth	r3, r3
 8012b66:	2b00      	cmp	r3, #0
 8012b68:	d102      	bne.n	8012b70 <SPI_2linesRxISR_8BIT+0x5c>
    {
      SPI_CloseRxTx_ISR(hspi);
 8012b6a:	6878      	ldr	r0, [r7, #4]
 8012b6c:	f000 fa0c 	bl	8012f88 <SPI_CloseRxTx_ISR>
    }
  }
}
 8012b70:	bf00      	nop
 8012b72:	3708      	adds	r7, #8
 8012b74:	46bd      	mov	sp, r7
 8012b76:	bd80      	pop	{r7, pc}

08012b78 <SPI_2linesTxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8012b78:	b580      	push	{r7, lr}
 8012b7a:	b082      	sub	sp, #8
 8012b7c:	af00      	add	r7, sp, #0
 8012b7e:	6078      	str	r0, [r7, #4]
  *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8012b80:	687b      	ldr	r3, [r7, #4]
 8012b82:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8012b84:	687b      	ldr	r3, [r7, #4]
 8012b86:	681b      	ldr	r3, [r3, #0]
 8012b88:	330c      	adds	r3, #12
 8012b8a:	7812      	ldrb	r2, [r2, #0]
 8012b8c:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr++;
 8012b8e:	687b      	ldr	r3, [r7, #4]
 8012b90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8012b92:	1c5a      	adds	r2, r3, #1
 8012b94:	687b      	ldr	r3, [r7, #4]
 8012b96:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount--;
 8012b98:	687b      	ldr	r3, [r7, #4]
 8012b9a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8012b9c:	b29b      	uxth	r3, r3
 8012b9e:	3b01      	subs	r3, #1
 8012ba0:	b29a      	uxth	r2, r3
 8012ba2:	687b      	ldr	r3, [r7, #4]
 8012ba4:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Check the end of the transmission */
  if (hspi->TxXferCount == 0U)
 8012ba6:	687b      	ldr	r3, [r7, #4]
 8012ba8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8012baa:	b29b      	uxth	r3, r3
 8012bac:	2b00      	cmp	r3, #0
 8012bae:	d10f      	bne.n	8012bd0 <SPI_2linesTxISR_8BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8012bb0:	687b      	ldr	r3, [r7, #4]
 8012bb2:	681b      	ldr	r3, [r3, #0]
 8012bb4:	685a      	ldr	r2, [r3, #4]
 8012bb6:	687b      	ldr	r3, [r7, #4]
 8012bb8:	681b      	ldr	r3, [r3, #0]
 8012bba:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8012bbe:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8012bc0:	687b      	ldr	r3, [r7, #4]
 8012bc2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8012bc4:	b29b      	uxth	r3, r3
 8012bc6:	2b00      	cmp	r3, #0
 8012bc8:	d102      	bne.n	8012bd0 <SPI_2linesTxISR_8BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 8012bca:	6878      	ldr	r0, [r7, #4]
 8012bcc:	f000 f9dc 	bl	8012f88 <SPI_CloseRxTx_ISR>
    }
  }
}
 8012bd0:	bf00      	nop
 8012bd2:	3708      	adds	r7, #8
 8012bd4:	46bd      	mov	sp, r7
 8012bd6:	bd80      	pop	{r7, pc}

08012bd8 <SPI_2linesRxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8012bd8:	b580      	push	{r7, lr}
 8012bda:	b082      	sub	sp, #8
 8012bdc:	af00      	add	r7, sp, #0
 8012bde:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8012be0:	687b      	ldr	r3, [r7, #4]
 8012be2:	681b      	ldr	r3, [r3, #0]
 8012be4:	68da      	ldr	r2, [r3, #12]
 8012be6:	687b      	ldr	r3, [r7, #4]
 8012be8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012bea:	b292      	uxth	r2, r2
 8012bec:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 8012bee:	687b      	ldr	r3, [r7, #4]
 8012bf0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012bf2:	1c9a      	adds	r2, r3, #2
 8012bf4:	687b      	ldr	r3, [r7, #4]
 8012bf6:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount--;
 8012bf8:	687b      	ldr	r3, [r7, #4]
 8012bfa:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8012bfc:	b29b      	uxth	r3, r3
 8012bfe:	3b01      	subs	r3, #1
 8012c00:	b29a      	uxth	r2, r3
 8012c02:	687b      	ldr	r3, [r7, #4]
 8012c04:	87da      	strh	r2, [r3, #62]	@ 0x3e

  if (hspi->RxXferCount == 0U)
 8012c06:	687b      	ldr	r3, [r7, #4]
 8012c08:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8012c0a:	b29b      	uxth	r3, r3
 8012c0c:	2b00      	cmp	r3, #0
 8012c0e:	d10f      	bne.n	8012c30 <SPI_2linesRxISR_16BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 8012c10:	687b      	ldr	r3, [r7, #4]
 8012c12:	681b      	ldr	r3, [r3, #0]
 8012c14:	685a      	ldr	r2, [r3, #4]
 8012c16:	687b      	ldr	r3, [r7, #4]
 8012c18:	681b      	ldr	r3, [r3, #0]
 8012c1a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8012c1e:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8012c20:	687b      	ldr	r3, [r7, #4]
 8012c22:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8012c24:	b29b      	uxth	r3, r3
 8012c26:	2b00      	cmp	r3, #0
 8012c28:	d102      	bne.n	8012c30 <SPI_2linesRxISR_16BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 8012c2a:	6878      	ldr	r0, [r7, #4]
 8012c2c:	f000 f9ac 	bl	8012f88 <SPI_CloseRxTx_ISR>
    }
  }
}
 8012c30:	bf00      	nop
 8012c32:	3708      	adds	r7, #8
 8012c34:	46bd      	mov	sp, r7
 8012c36:	bd80      	pop	{r7, pc}

08012c38 <SPI_2linesTxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8012c38:	b580      	push	{r7, lr}
 8012c3a:	b082      	sub	sp, #8
 8012c3c:	af00      	add	r7, sp, #0
 8012c3e:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8012c40:	687b      	ldr	r3, [r7, #4]
 8012c42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8012c44:	881a      	ldrh	r2, [r3, #0]
 8012c46:	687b      	ldr	r3, [r7, #4]
 8012c48:	681b      	ldr	r3, [r3, #0]
 8012c4a:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 8012c4c:	687b      	ldr	r3, [r7, #4]
 8012c4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8012c50:	1c9a      	adds	r2, r3, #2
 8012c52:	687b      	ldr	r3, [r7, #4]
 8012c54:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount--;
 8012c56:	687b      	ldr	r3, [r7, #4]
 8012c58:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8012c5a:	b29b      	uxth	r3, r3
 8012c5c:	3b01      	subs	r3, #1
 8012c5e:	b29a      	uxth	r2, r3
 8012c60:	687b      	ldr	r3, [r7, #4]
 8012c62:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Enable CRC Transmission */
  if (hspi->TxXferCount == 0U)
 8012c64:	687b      	ldr	r3, [r7, #4]
 8012c66:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8012c68:	b29b      	uxth	r3, r3
 8012c6a:	2b00      	cmp	r3, #0
 8012c6c:	d10f      	bne.n	8012c8e <SPI_2linesTxISR_16BIT+0x56>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8012c6e:	687b      	ldr	r3, [r7, #4]
 8012c70:	681b      	ldr	r3, [r3, #0]
 8012c72:	685a      	ldr	r2, [r3, #4]
 8012c74:	687b      	ldr	r3, [r7, #4]
 8012c76:	681b      	ldr	r3, [r3, #0]
 8012c78:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8012c7c:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8012c7e:	687b      	ldr	r3, [r7, #4]
 8012c80:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8012c82:	b29b      	uxth	r3, r3
 8012c84:	2b00      	cmp	r3, #0
 8012c86:	d102      	bne.n	8012c8e <SPI_2linesTxISR_16BIT+0x56>
    {
      SPI_CloseRxTx_ISR(hspi);
 8012c88:	6878      	ldr	r0, [r7, #4]
 8012c8a:	f000 f97d 	bl	8012f88 <SPI_CloseRxTx_ISR>
    }
  }
}
 8012c8e:	bf00      	nop
 8012c90:	3708      	adds	r7, #8
 8012c92:	46bd      	mov	sp, r7
 8012c94:	bd80      	pop	{r7, pc}

08012c96 <SPI_RxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8012c96:	b580      	push	{r7, lr}
 8012c98:	b082      	sub	sp, #8
 8012c9a:	af00      	add	r7, sp, #0
 8012c9c:	6078      	str	r0, [r7, #4]
  *hspi->pRxBuffPtr = (*(__IO uint8_t *)&hspi->Instance->DR);
 8012c9e:	687b      	ldr	r3, [r7, #4]
 8012ca0:	681b      	ldr	r3, [r3, #0]
 8012ca2:	f103 020c 	add.w	r2, r3, #12
 8012ca6:	687b      	ldr	r3, [r7, #4]
 8012ca8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012caa:	7812      	ldrb	r2, [r2, #0]
 8012cac:	b2d2      	uxtb	r2, r2
 8012cae:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
 8012cb0:	687b      	ldr	r3, [r7, #4]
 8012cb2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012cb4:	1c5a      	adds	r2, r3, #1
 8012cb6:	687b      	ldr	r3, [r7, #4]
 8012cb8:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount--;
 8012cba:	687b      	ldr	r3, [r7, #4]
 8012cbc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8012cbe:	b29b      	uxth	r3, r3
 8012cc0:	3b01      	subs	r3, #1
 8012cc2:	b29a      	uxth	r2, r3
 8012cc4:	687b      	ldr	r3, [r7, #4]
 8012cc6:	87da      	strh	r2, [r3, #62]	@ 0x3e
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 8012cc8:	687b      	ldr	r3, [r7, #4]
 8012cca:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8012ccc:	b29b      	uxth	r3, r3
 8012cce:	2b00      	cmp	r3, #0
 8012cd0:	d102      	bne.n	8012cd8 <SPI_RxISR_8BIT+0x42>
    {
      hspi->RxISR =  SPI_RxISR_8BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 8012cd2:	6878      	ldr	r0, [r7, #4]
 8012cd4:	f000 f9cc 	bl	8013070 <SPI_CloseRx_ISR>
  }
}
 8012cd8:	bf00      	nop
 8012cda:	3708      	adds	r7, #8
 8012cdc:	46bd      	mov	sp, r7
 8012cde:	bd80      	pop	{r7, pc}

08012ce0 <SPI_RxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8012ce0:	b580      	push	{r7, lr}
 8012ce2:	b082      	sub	sp, #8
 8012ce4:	af00      	add	r7, sp, #0
 8012ce6:	6078      	str	r0, [r7, #4]
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8012ce8:	687b      	ldr	r3, [r7, #4]
 8012cea:	681b      	ldr	r3, [r3, #0]
 8012cec:	68da      	ldr	r2, [r3, #12]
 8012cee:	687b      	ldr	r3, [r7, #4]
 8012cf0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012cf2:	b292      	uxth	r2, r2
 8012cf4:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 8012cf6:	687b      	ldr	r3, [r7, #4]
 8012cf8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012cfa:	1c9a      	adds	r2, r3, #2
 8012cfc:	687b      	ldr	r3, [r7, #4]
 8012cfe:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount--;
 8012d00:	687b      	ldr	r3, [r7, #4]
 8012d02:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8012d04:	b29b      	uxth	r3, r3
 8012d06:	3b01      	subs	r3, #1
 8012d08:	b29a      	uxth	r2, r3
 8012d0a:	687b      	ldr	r3, [r7, #4]
 8012d0c:	87da      	strh	r2, [r3, #62]	@ 0x3e
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 8012d0e:	687b      	ldr	r3, [r7, #4]
 8012d10:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8012d12:	b29b      	uxth	r3, r3
 8012d14:	2b00      	cmp	r3, #0
 8012d16:	d102      	bne.n	8012d1e <SPI_RxISR_16BIT+0x3e>
    {
      hspi->RxISR = SPI_RxISR_16BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 8012d18:	6878      	ldr	r0, [r7, #4]
 8012d1a:	f000 f9a9 	bl	8013070 <SPI_CloseRx_ISR>
  }
}
 8012d1e:	bf00      	nop
 8012d20:	3708      	adds	r7, #8
 8012d22:	46bd      	mov	sp, r7
 8012d24:	bd80      	pop	{r7, pc}
	...

08012d28 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8012d28:	b580      	push	{r7, lr}
 8012d2a:	b088      	sub	sp, #32
 8012d2c:	af00      	add	r7, sp, #0
 8012d2e:	60f8      	str	r0, [r7, #12]
 8012d30:	60b9      	str	r1, [r7, #8]
 8012d32:	603b      	str	r3, [r7, #0]
 8012d34:	4613      	mov	r3, r2
 8012d36:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8012d38:	f7f9 f904 	bl	800bf44 <HAL_GetTick>
 8012d3c:	4602      	mov	r2, r0
 8012d3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012d40:	1a9b      	subs	r3, r3, r2
 8012d42:	683a      	ldr	r2, [r7, #0]
 8012d44:	4413      	add	r3, r2
 8012d46:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8012d48:	f7f9 f8fc 	bl	800bf44 <HAL_GetTick>
 8012d4c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8012d4e:	4b39      	ldr	r3, [pc, #228]	@ (8012e34 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8012d50:	681b      	ldr	r3, [r3, #0]
 8012d52:	015b      	lsls	r3, r3, #5
 8012d54:	0d1b      	lsrs	r3, r3, #20
 8012d56:	69fa      	ldr	r2, [r7, #28]
 8012d58:	fb02 f303 	mul.w	r3, r2, r3
 8012d5c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8012d5e:	e054      	b.n	8012e0a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8012d60:	683b      	ldr	r3, [r7, #0]
 8012d62:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8012d66:	d050      	beq.n	8012e0a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8012d68:	f7f9 f8ec 	bl	800bf44 <HAL_GetTick>
 8012d6c:	4602      	mov	r2, r0
 8012d6e:	69bb      	ldr	r3, [r7, #24]
 8012d70:	1ad3      	subs	r3, r2, r3
 8012d72:	69fa      	ldr	r2, [r7, #28]
 8012d74:	429a      	cmp	r2, r3
 8012d76:	d902      	bls.n	8012d7e <SPI_WaitFlagStateUntilTimeout+0x56>
 8012d78:	69fb      	ldr	r3, [r7, #28]
 8012d7a:	2b00      	cmp	r3, #0
 8012d7c:	d13d      	bne.n	8012dfa <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8012d7e:	68fb      	ldr	r3, [r7, #12]
 8012d80:	681b      	ldr	r3, [r3, #0]
 8012d82:	685a      	ldr	r2, [r3, #4]
 8012d84:	68fb      	ldr	r3, [r7, #12]
 8012d86:	681b      	ldr	r3, [r3, #0]
 8012d88:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8012d8c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8012d8e:	68fb      	ldr	r3, [r7, #12]
 8012d90:	685b      	ldr	r3, [r3, #4]
 8012d92:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8012d96:	d111      	bne.n	8012dbc <SPI_WaitFlagStateUntilTimeout+0x94>
 8012d98:	68fb      	ldr	r3, [r7, #12]
 8012d9a:	689b      	ldr	r3, [r3, #8]
 8012d9c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8012da0:	d004      	beq.n	8012dac <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8012da2:	68fb      	ldr	r3, [r7, #12]
 8012da4:	689b      	ldr	r3, [r3, #8]
 8012da6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8012daa:	d107      	bne.n	8012dbc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8012dac:	68fb      	ldr	r3, [r7, #12]
 8012dae:	681b      	ldr	r3, [r3, #0]
 8012db0:	681a      	ldr	r2, [r3, #0]
 8012db2:	68fb      	ldr	r3, [r7, #12]
 8012db4:	681b      	ldr	r3, [r3, #0]
 8012db6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8012dba:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8012dbc:	68fb      	ldr	r3, [r7, #12]
 8012dbe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012dc0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8012dc4:	d10f      	bne.n	8012de6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8012dc6:	68fb      	ldr	r3, [r7, #12]
 8012dc8:	681b      	ldr	r3, [r3, #0]
 8012dca:	681a      	ldr	r2, [r3, #0]
 8012dcc:	68fb      	ldr	r3, [r7, #12]
 8012dce:	681b      	ldr	r3, [r3, #0]
 8012dd0:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8012dd4:	601a      	str	r2, [r3, #0]
 8012dd6:	68fb      	ldr	r3, [r7, #12]
 8012dd8:	681b      	ldr	r3, [r3, #0]
 8012dda:	681a      	ldr	r2, [r3, #0]
 8012ddc:	68fb      	ldr	r3, [r7, #12]
 8012dde:	681b      	ldr	r3, [r3, #0]
 8012de0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8012de4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8012de6:	68fb      	ldr	r3, [r7, #12]
 8012de8:	2201      	movs	r2, #1
 8012dea:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8012dee:	68fb      	ldr	r3, [r7, #12]
 8012df0:	2200      	movs	r2, #0
 8012df2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8012df6:	2303      	movs	r3, #3
 8012df8:	e017      	b.n	8012e2a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8012dfa:	697b      	ldr	r3, [r7, #20]
 8012dfc:	2b00      	cmp	r3, #0
 8012dfe:	d101      	bne.n	8012e04 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8012e00:	2300      	movs	r3, #0
 8012e02:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8012e04:	697b      	ldr	r3, [r7, #20]
 8012e06:	3b01      	subs	r3, #1
 8012e08:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8012e0a:	68fb      	ldr	r3, [r7, #12]
 8012e0c:	681b      	ldr	r3, [r3, #0]
 8012e0e:	689a      	ldr	r2, [r3, #8]
 8012e10:	68bb      	ldr	r3, [r7, #8]
 8012e12:	4013      	ands	r3, r2
 8012e14:	68ba      	ldr	r2, [r7, #8]
 8012e16:	429a      	cmp	r2, r3
 8012e18:	bf0c      	ite	eq
 8012e1a:	2301      	moveq	r3, #1
 8012e1c:	2300      	movne	r3, #0
 8012e1e:	b2db      	uxtb	r3, r3
 8012e20:	461a      	mov	r2, r3
 8012e22:	79fb      	ldrb	r3, [r7, #7]
 8012e24:	429a      	cmp	r2, r3
 8012e26:	d19b      	bne.n	8012d60 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8012e28:	2300      	movs	r3, #0
}
 8012e2a:	4618      	mov	r0, r3
 8012e2c:	3720      	adds	r7, #32
 8012e2e:	46bd      	mov	sp, r7
 8012e30:	bd80      	pop	{r7, pc}
 8012e32:	bf00      	nop
 8012e34:	20000064 	.word	0x20000064

08012e38 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8012e38:	b580      	push	{r7, lr}
 8012e3a:	b086      	sub	sp, #24
 8012e3c:	af02      	add	r7, sp, #8
 8012e3e:	60f8      	str	r0, [r7, #12]
 8012e40:	60b9      	str	r1, [r7, #8]
 8012e42:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8012e44:	68fb      	ldr	r3, [r7, #12]
 8012e46:	685b      	ldr	r3, [r3, #4]
 8012e48:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8012e4c:	d111      	bne.n	8012e72 <SPI_EndRxTransaction+0x3a>
 8012e4e:	68fb      	ldr	r3, [r7, #12]
 8012e50:	689b      	ldr	r3, [r3, #8]
 8012e52:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8012e56:	d004      	beq.n	8012e62 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8012e58:	68fb      	ldr	r3, [r7, #12]
 8012e5a:	689b      	ldr	r3, [r3, #8]
 8012e5c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8012e60:	d107      	bne.n	8012e72 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8012e62:	68fb      	ldr	r3, [r7, #12]
 8012e64:	681b      	ldr	r3, [r3, #0]
 8012e66:	681a      	ldr	r2, [r3, #0]
 8012e68:	68fb      	ldr	r3, [r7, #12]
 8012e6a:	681b      	ldr	r3, [r3, #0]
 8012e6c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8012e70:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8012e72:	68fb      	ldr	r3, [r7, #12]
 8012e74:	685b      	ldr	r3, [r3, #4]
 8012e76:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8012e7a:	d12a      	bne.n	8012ed2 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8012e7c:	68fb      	ldr	r3, [r7, #12]
 8012e7e:	689b      	ldr	r3, [r3, #8]
 8012e80:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8012e84:	d012      	beq.n	8012eac <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8012e86:	687b      	ldr	r3, [r7, #4]
 8012e88:	9300      	str	r3, [sp, #0]
 8012e8a:	68bb      	ldr	r3, [r7, #8]
 8012e8c:	2200      	movs	r2, #0
 8012e8e:	2180      	movs	r1, #128	@ 0x80
 8012e90:	68f8      	ldr	r0, [r7, #12]
 8012e92:	f7ff ff49 	bl	8012d28 <SPI_WaitFlagStateUntilTimeout>
 8012e96:	4603      	mov	r3, r0
 8012e98:	2b00      	cmp	r3, #0
 8012e9a:	d02d      	beq.n	8012ef8 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8012e9c:	68fb      	ldr	r3, [r7, #12]
 8012e9e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8012ea0:	f043 0220 	orr.w	r2, r3, #32
 8012ea4:	68fb      	ldr	r3, [r7, #12]
 8012ea6:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8012ea8:	2303      	movs	r3, #3
 8012eaa:	e026      	b.n	8012efa <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8012eac:	687b      	ldr	r3, [r7, #4]
 8012eae:	9300      	str	r3, [sp, #0]
 8012eb0:	68bb      	ldr	r3, [r7, #8]
 8012eb2:	2200      	movs	r2, #0
 8012eb4:	2101      	movs	r1, #1
 8012eb6:	68f8      	ldr	r0, [r7, #12]
 8012eb8:	f7ff ff36 	bl	8012d28 <SPI_WaitFlagStateUntilTimeout>
 8012ebc:	4603      	mov	r3, r0
 8012ebe:	2b00      	cmp	r3, #0
 8012ec0:	d01a      	beq.n	8012ef8 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8012ec2:	68fb      	ldr	r3, [r7, #12]
 8012ec4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8012ec6:	f043 0220 	orr.w	r2, r3, #32
 8012eca:	68fb      	ldr	r3, [r7, #12]
 8012ecc:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8012ece:	2303      	movs	r3, #3
 8012ed0:	e013      	b.n	8012efa <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8012ed2:	687b      	ldr	r3, [r7, #4]
 8012ed4:	9300      	str	r3, [sp, #0]
 8012ed6:	68bb      	ldr	r3, [r7, #8]
 8012ed8:	2200      	movs	r2, #0
 8012eda:	2101      	movs	r1, #1
 8012edc:	68f8      	ldr	r0, [r7, #12]
 8012ede:	f7ff ff23 	bl	8012d28 <SPI_WaitFlagStateUntilTimeout>
 8012ee2:	4603      	mov	r3, r0
 8012ee4:	2b00      	cmp	r3, #0
 8012ee6:	d007      	beq.n	8012ef8 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8012ee8:	68fb      	ldr	r3, [r7, #12]
 8012eea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8012eec:	f043 0220 	orr.w	r2, r3, #32
 8012ef0:	68fb      	ldr	r3, [r7, #12]
 8012ef2:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8012ef4:	2303      	movs	r3, #3
 8012ef6:	e000      	b.n	8012efa <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8012ef8:	2300      	movs	r3, #0
}
 8012efa:	4618      	mov	r0, r3
 8012efc:	3710      	adds	r7, #16
 8012efe:	46bd      	mov	sp, r7
 8012f00:	bd80      	pop	{r7, pc}
	...

08012f04 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8012f04:	b580      	push	{r7, lr}
 8012f06:	b088      	sub	sp, #32
 8012f08:	af02      	add	r7, sp, #8
 8012f0a:	60f8      	str	r0, [r7, #12]
 8012f0c:	60b9      	str	r1, [r7, #8]
 8012f0e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8012f10:	4b1b      	ldr	r3, [pc, #108]	@ (8012f80 <SPI_EndRxTxTransaction+0x7c>)
 8012f12:	681b      	ldr	r3, [r3, #0]
 8012f14:	4a1b      	ldr	r2, [pc, #108]	@ (8012f84 <SPI_EndRxTxTransaction+0x80>)
 8012f16:	fba2 2303 	umull	r2, r3, r2, r3
 8012f1a:	0d5b      	lsrs	r3, r3, #21
 8012f1c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8012f20:	fb02 f303 	mul.w	r3, r2, r3
 8012f24:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8012f26:	68fb      	ldr	r3, [r7, #12]
 8012f28:	685b      	ldr	r3, [r3, #4]
 8012f2a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8012f2e:	d112      	bne.n	8012f56 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8012f30:	687b      	ldr	r3, [r7, #4]
 8012f32:	9300      	str	r3, [sp, #0]
 8012f34:	68bb      	ldr	r3, [r7, #8]
 8012f36:	2200      	movs	r2, #0
 8012f38:	2180      	movs	r1, #128	@ 0x80
 8012f3a:	68f8      	ldr	r0, [r7, #12]
 8012f3c:	f7ff fef4 	bl	8012d28 <SPI_WaitFlagStateUntilTimeout>
 8012f40:	4603      	mov	r3, r0
 8012f42:	2b00      	cmp	r3, #0
 8012f44:	d016      	beq.n	8012f74 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8012f46:	68fb      	ldr	r3, [r7, #12]
 8012f48:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8012f4a:	f043 0220 	orr.w	r2, r3, #32
 8012f4e:	68fb      	ldr	r3, [r7, #12]
 8012f50:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8012f52:	2303      	movs	r3, #3
 8012f54:	e00f      	b.n	8012f76 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8012f56:	697b      	ldr	r3, [r7, #20]
 8012f58:	2b00      	cmp	r3, #0
 8012f5a:	d00a      	beq.n	8012f72 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8012f5c:	697b      	ldr	r3, [r7, #20]
 8012f5e:	3b01      	subs	r3, #1
 8012f60:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8012f62:	68fb      	ldr	r3, [r7, #12]
 8012f64:	681b      	ldr	r3, [r3, #0]
 8012f66:	689b      	ldr	r3, [r3, #8]
 8012f68:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8012f6c:	2b80      	cmp	r3, #128	@ 0x80
 8012f6e:	d0f2      	beq.n	8012f56 <SPI_EndRxTxTransaction+0x52>
 8012f70:	e000      	b.n	8012f74 <SPI_EndRxTxTransaction+0x70>
        break;
 8012f72:	bf00      	nop
  }

  return HAL_OK;
 8012f74:	2300      	movs	r3, #0
}
 8012f76:	4618      	mov	r0, r3
 8012f78:	3718      	adds	r7, #24
 8012f7a:	46bd      	mov	sp, r7
 8012f7c:	bd80      	pop	{r7, pc}
 8012f7e:	bf00      	nop
 8012f80:	20000064 	.word	0x20000064
 8012f84:	165e9f81 	.word	0x165e9f81

08012f88 <SPI_CloseRxTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRxTx_ISR(SPI_HandleTypeDef *hspi)
{
 8012f88:	b580      	push	{r7, lr}
 8012f8a:	b086      	sub	sp, #24
 8012f8c:	af00      	add	r7, sp, #0
 8012f8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 8012f90:	4b35      	ldr	r3, [pc, #212]	@ (8013068 <SPI_CloseRxTx_ISR+0xe0>)
 8012f92:	681b      	ldr	r3, [r3, #0]
 8012f94:	4a35      	ldr	r2, [pc, #212]	@ (801306c <SPI_CloseRxTx_ISR+0xe4>)
 8012f96:	fba2 2303 	umull	r2, r3, r2, r3
 8012f9a:	0a5b      	lsrs	r3, r3, #9
 8012f9c:	2264      	movs	r2, #100	@ 0x64
 8012f9e:	fb02 f303 	mul.w	r3, r2, r3
 8012fa2:	613b      	str	r3, [r7, #16]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8012fa4:	f7f8 ffce 	bl	800bf44 <HAL_GetTick>
 8012fa8:	6178      	str	r0, [r7, #20]

  /* Disable ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8012faa:	687b      	ldr	r3, [r7, #4]
 8012fac:	681b      	ldr	r3, [r3, #0]
 8012fae:	685a      	ldr	r2, [r3, #4]
 8012fb0:	687b      	ldr	r3, [r7, #4]
 8012fb2:	681b      	ldr	r3, [r3, #0]
 8012fb4:	f022 0220 	bic.w	r2, r2, #32
 8012fb8:	605a      	str	r2, [r3, #4]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8012fba:	693b      	ldr	r3, [r7, #16]
 8012fbc:	2b00      	cmp	r3, #0
 8012fbe:	d106      	bne.n	8012fce <SPI_CloseRxTx_ISR+0x46>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8012fc0:	687b      	ldr	r3, [r7, #4]
 8012fc2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8012fc4:	f043 0220 	orr.w	r2, r3, #32
 8012fc8:	687b      	ldr	r3, [r7, #4]
 8012fca:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8012fcc:	e009      	b.n	8012fe2 <SPI_CloseRxTx_ISR+0x5a>
    }
    count--;
 8012fce:	693b      	ldr	r3, [r7, #16]
 8012fd0:	3b01      	subs	r3, #1
 8012fd2:	613b      	str	r3, [r7, #16]
  } while ((hspi->Instance->SR & SPI_FLAG_TXE) == RESET);
 8012fd4:	687b      	ldr	r3, [r7, #4]
 8012fd6:	681b      	ldr	r3, [r3, #0]
 8012fd8:	689b      	ldr	r3, [r3, #8]
 8012fda:	f003 0302 	and.w	r3, r3, #2
 8012fde:	2b00      	cmp	r3, #0
 8012fe0:	d0eb      	beq.n	8012fba <SPI_CloseRxTx_ISR+0x32>

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8012fe2:	697a      	ldr	r2, [r7, #20]
 8012fe4:	2164      	movs	r1, #100	@ 0x64
 8012fe6:	6878      	ldr	r0, [r7, #4]
 8012fe8:	f7ff ff8c 	bl	8012f04 <SPI_EndRxTxTransaction>
 8012fec:	4603      	mov	r3, r0
 8012fee:	2b00      	cmp	r3, #0
 8012ff0:	d005      	beq.n	8012ffe <SPI_CloseRxTx_ISR+0x76>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8012ff2:	687b      	ldr	r3, [r7, #4]
 8012ff4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8012ff6:	f043 0220 	orr.w	r2, r3, #32
 8012ffa:	687b      	ldr	r3, [r7, #4]
 8012ffc:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8012ffe:	687b      	ldr	r3, [r7, #4]
 8013000:	689b      	ldr	r3, [r3, #8]
 8013002:	2b00      	cmp	r3, #0
 8013004:	d10a      	bne.n	801301c <SPI_CloseRxTx_ISR+0x94>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8013006:	2300      	movs	r3, #0
 8013008:	60fb      	str	r3, [r7, #12]
 801300a:	687b      	ldr	r3, [r7, #4]
 801300c:	681b      	ldr	r3, [r3, #0]
 801300e:	68db      	ldr	r3, [r3, #12]
 8013010:	60fb      	str	r3, [r7, #12]
 8013012:	687b      	ldr	r3, [r7, #4]
 8013014:	681b      	ldr	r3, [r3, #0]
 8013016:	689b      	ldr	r3, [r3, #8]
 8013018:	60fb      	str	r3, [r7, #12]
 801301a:	68fb      	ldr	r3, [r7, #12]
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 801301c:	687b      	ldr	r3, [r7, #4]
 801301e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8013020:	2b00      	cmp	r3, #0
 8013022:	d115      	bne.n	8013050 <SPI_CloseRxTx_ISR+0xc8>
    {
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8013024:	687b      	ldr	r3, [r7, #4]
 8013026:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 801302a:	b2db      	uxtb	r3, r3
 801302c:	2b04      	cmp	r3, #4
 801302e:	d107      	bne.n	8013040 <SPI_CloseRxTx_ISR+0xb8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8013030:	687b      	ldr	r3, [r7, #4]
 8013032:	2201      	movs	r2, #1
 8013034:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->RxCpltCallback(hspi);
#else
        HAL_SPI_RxCpltCallback(hspi);
 8013038:	6878      	ldr	r0, [r7, #4]
 801303a:	f7f8 fdb7 	bl	800bbac <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 801303e:	e00e      	b.n	801305e <SPI_CloseRxTx_ISR+0xd6>
        hspi->State = HAL_SPI_STATE_READY;
 8013040:	687b      	ldr	r3, [r7, #4]
 8013042:	2201      	movs	r2, #1
 8013044:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        HAL_SPI_TxRxCpltCallback(hspi);
 8013048:	6878      	ldr	r0, [r7, #4]
 801304a:	f7ff fd3b 	bl	8012ac4 <HAL_SPI_TxRxCpltCallback>
}
 801304e:	e006      	b.n	801305e <SPI_CloseRxTx_ISR+0xd6>
      hspi->State = HAL_SPI_STATE_READY;
 8013050:	687b      	ldr	r3, [r7, #4]
 8013052:	2201      	movs	r2, #1
 8013054:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      HAL_SPI_ErrorCallback(hspi);
 8013058:	6878      	ldr	r0, [r7, #4]
 801305a:	f7ff fd3d 	bl	8012ad8 <HAL_SPI_ErrorCallback>
}
 801305e:	bf00      	nop
 8013060:	3718      	adds	r7, #24
 8013062:	46bd      	mov	sp, r7
 8013064:	bd80      	pop	{r7, pc}
 8013066:	bf00      	nop
 8013068:	20000064 	.word	0x20000064
 801306c:	057619f1 	.word	0x057619f1

08013070 <SPI_CloseRx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRx_ISR(SPI_HandleTypeDef *hspi)
{
 8013070:	b580      	push	{r7, lr}
 8013072:	b084      	sub	sp, #16
 8013074:	af00      	add	r7, sp, #0
 8013076:	6078      	str	r0, [r7, #4]
  /* Disable RXNE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8013078:	687b      	ldr	r3, [r7, #4]
 801307a:	681b      	ldr	r3, [r3, #0]
 801307c:	685a      	ldr	r2, [r3, #4]
 801307e:	687b      	ldr	r3, [r7, #4]
 8013080:	681b      	ldr	r3, [r3, #0]
 8013082:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8013086:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 8013088:	f7f8 ff5c 	bl	800bf44 <HAL_GetTick>
 801308c:	4603      	mov	r3, r0
 801308e:	461a      	mov	r2, r3
 8013090:	2164      	movs	r1, #100	@ 0x64
 8013092:	6878      	ldr	r0, [r7, #4]
 8013094:	f7ff fed0 	bl	8012e38 <SPI_EndRxTransaction>
 8013098:	4603      	mov	r3, r0
 801309a:	2b00      	cmp	r3, #0
 801309c:	d005      	beq.n	80130aa <SPI_CloseRx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 801309e:	687b      	ldr	r3, [r7, #4]
 80130a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80130a2:	f043 0220 	orr.w	r2, r3, #32
 80130a6:	687b      	ldr	r3, [r7, #4]
 80130a8:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80130aa:	687b      	ldr	r3, [r7, #4]
 80130ac:	689b      	ldr	r3, [r3, #8]
 80130ae:	2b00      	cmp	r3, #0
 80130b0:	d10a      	bne.n	80130c8 <SPI_CloseRx_ISR+0x58>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80130b2:	2300      	movs	r3, #0
 80130b4:	60fb      	str	r3, [r7, #12]
 80130b6:	687b      	ldr	r3, [r7, #4]
 80130b8:	681b      	ldr	r3, [r3, #0]
 80130ba:	68db      	ldr	r3, [r3, #12]
 80130bc:	60fb      	str	r3, [r7, #12]
 80130be:	687b      	ldr	r3, [r7, #4]
 80130c0:	681b      	ldr	r3, [r3, #0]
 80130c2:	689b      	ldr	r3, [r3, #8]
 80130c4:	60fb      	str	r3, [r7, #12]
 80130c6:	68fb      	ldr	r3, [r7, #12]
  }
  hspi->State = HAL_SPI_STATE_READY;
 80130c8:	687b      	ldr	r3, [r7, #4]
 80130ca:	2201      	movs	r2, #1
 80130cc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 80130d0:	687b      	ldr	r3, [r7, #4]
 80130d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80130d4:	2b00      	cmp	r3, #0
 80130d6:	d103      	bne.n	80130e0 <SPI_CloseRx_ISR+0x70>
    {
      /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->RxCpltCallback(hspi);
#else
      HAL_SPI_RxCpltCallback(hspi);
 80130d8:	6878      	ldr	r0, [r7, #4]
 80130da:	f7f8 fd67 	bl	800bbac <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 80130de:	e002      	b.n	80130e6 <SPI_CloseRx_ISR+0x76>
      HAL_SPI_ErrorCallback(hspi);
 80130e0:	6878      	ldr	r0, [r7, #4]
 80130e2:	f7ff fcf9 	bl	8012ad8 <HAL_SPI_ErrorCallback>
}
 80130e6:	bf00      	nop
 80130e8:	3710      	adds	r7, #16
 80130ea:	46bd      	mov	sp, r7
 80130ec:	bd80      	pop	{r7, pc}

080130ee <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80130ee:	b580      	push	{r7, lr}
 80130f0:	b082      	sub	sp, #8
 80130f2:	af00      	add	r7, sp, #0
 80130f4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80130f6:	687b      	ldr	r3, [r7, #4]
 80130f8:	2b00      	cmp	r3, #0
 80130fa:	d101      	bne.n	8013100 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80130fc:	2301      	movs	r3, #1
 80130fe:	e041      	b.n	8013184 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8013100:	687b      	ldr	r3, [r7, #4]
 8013102:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8013106:	b2db      	uxtb	r3, r3
 8013108:	2b00      	cmp	r3, #0
 801310a:	d106      	bne.n	801311a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 801310c:	687b      	ldr	r3, [r7, #4]
 801310e:	2200      	movs	r2, #0
 8013110:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8013114:	6878      	ldr	r0, [r7, #4]
 8013116:	f7ef fc07 	bl	8002928 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801311a:	687b      	ldr	r3, [r7, #4]
 801311c:	2202      	movs	r2, #2
 801311e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8013122:	687b      	ldr	r3, [r7, #4]
 8013124:	681a      	ldr	r2, [r3, #0]
 8013126:	687b      	ldr	r3, [r7, #4]
 8013128:	3304      	adds	r3, #4
 801312a:	4619      	mov	r1, r3
 801312c:	4610      	mov	r0, r2
 801312e:	f000 fe0b 	bl	8013d48 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8013132:	687b      	ldr	r3, [r7, #4]
 8013134:	2201      	movs	r2, #1
 8013136:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801313a:	687b      	ldr	r3, [r7, #4]
 801313c:	2201      	movs	r2, #1
 801313e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8013142:	687b      	ldr	r3, [r7, #4]
 8013144:	2201      	movs	r2, #1
 8013146:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 801314a:	687b      	ldr	r3, [r7, #4]
 801314c:	2201      	movs	r2, #1
 801314e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8013152:	687b      	ldr	r3, [r7, #4]
 8013154:	2201      	movs	r2, #1
 8013156:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801315a:	687b      	ldr	r3, [r7, #4]
 801315c:	2201      	movs	r2, #1
 801315e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8013162:	687b      	ldr	r3, [r7, #4]
 8013164:	2201      	movs	r2, #1
 8013166:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 801316a:	687b      	ldr	r3, [r7, #4]
 801316c:	2201      	movs	r2, #1
 801316e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8013172:	687b      	ldr	r3, [r7, #4]
 8013174:	2201      	movs	r2, #1
 8013176:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 801317a:	687b      	ldr	r3, [r7, #4]
 801317c:	2201      	movs	r2, #1
 801317e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8013182:	2300      	movs	r3, #0
}
 8013184:	4618      	mov	r0, r3
 8013186:	3708      	adds	r7, #8
 8013188:	46bd      	mov	sp, r7
 801318a:	bd80      	pop	{r7, pc}

0801318c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 801318c:	b480      	push	{r7}
 801318e:	b085      	sub	sp, #20
 8013190:	af00      	add	r7, sp, #0
 8013192:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8013194:	687b      	ldr	r3, [r7, #4]
 8013196:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 801319a:	b2db      	uxtb	r3, r3
 801319c:	2b01      	cmp	r3, #1
 801319e:	d001      	beq.n	80131a4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80131a0:	2301      	movs	r3, #1
 80131a2:	e046      	b.n	8013232 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80131a4:	687b      	ldr	r3, [r7, #4]
 80131a6:	2202      	movs	r2, #2
 80131a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80131ac:	687b      	ldr	r3, [r7, #4]
 80131ae:	681b      	ldr	r3, [r3, #0]
 80131b0:	4a23      	ldr	r2, [pc, #140]	@ (8013240 <HAL_TIM_Base_Start+0xb4>)
 80131b2:	4293      	cmp	r3, r2
 80131b4:	d022      	beq.n	80131fc <HAL_TIM_Base_Start+0x70>
 80131b6:	687b      	ldr	r3, [r7, #4]
 80131b8:	681b      	ldr	r3, [r3, #0]
 80131ba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80131be:	d01d      	beq.n	80131fc <HAL_TIM_Base_Start+0x70>
 80131c0:	687b      	ldr	r3, [r7, #4]
 80131c2:	681b      	ldr	r3, [r3, #0]
 80131c4:	4a1f      	ldr	r2, [pc, #124]	@ (8013244 <HAL_TIM_Base_Start+0xb8>)
 80131c6:	4293      	cmp	r3, r2
 80131c8:	d018      	beq.n	80131fc <HAL_TIM_Base_Start+0x70>
 80131ca:	687b      	ldr	r3, [r7, #4]
 80131cc:	681b      	ldr	r3, [r3, #0]
 80131ce:	4a1e      	ldr	r2, [pc, #120]	@ (8013248 <HAL_TIM_Base_Start+0xbc>)
 80131d0:	4293      	cmp	r3, r2
 80131d2:	d013      	beq.n	80131fc <HAL_TIM_Base_Start+0x70>
 80131d4:	687b      	ldr	r3, [r7, #4]
 80131d6:	681b      	ldr	r3, [r3, #0]
 80131d8:	4a1c      	ldr	r2, [pc, #112]	@ (801324c <HAL_TIM_Base_Start+0xc0>)
 80131da:	4293      	cmp	r3, r2
 80131dc:	d00e      	beq.n	80131fc <HAL_TIM_Base_Start+0x70>
 80131de:	687b      	ldr	r3, [r7, #4]
 80131e0:	681b      	ldr	r3, [r3, #0]
 80131e2:	4a1b      	ldr	r2, [pc, #108]	@ (8013250 <HAL_TIM_Base_Start+0xc4>)
 80131e4:	4293      	cmp	r3, r2
 80131e6:	d009      	beq.n	80131fc <HAL_TIM_Base_Start+0x70>
 80131e8:	687b      	ldr	r3, [r7, #4]
 80131ea:	681b      	ldr	r3, [r3, #0]
 80131ec:	4a19      	ldr	r2, [pc, #100]	@ (8013254 <HAL_TIM_Base_Start+0xc8>)
 80131ee:	4293      	cmp	r3, r2
 80131f0:	d004      	beq.n	80131fc <HAL_TIM_Base_Start+0x70>
 80131f2:	687b      	ldr	r3, [r7, #4]
 80131f4:	681b      	ldr	r3, [r3, #0]
 80131f6:	4a18      	ldr	r2, [pc, #96]	@ (8013258 <HAL_TIM_Base_Start+0xcc>)
 80131f8:	4293      	cmp	r3, r2
 80131fa:	d111      	bne.n	8013220 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80131fc:	687b      	ldr	r3, [r7, #4]
 80131fe:	681b      	ldr	r3, [r3, #0]
 8013200:	689b      	ldr	r3, [r3, #8]
 8013202:	f003 0307 	and.w	r3, r3, #7
 8013206:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8013208:	68fb      	ldr	r3, [r7, #12]
 801320a:	2b06      	cmp	r3, #6
 801320c:	d010      	beq.n	8013230 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 801320e:	687b      	ldr	r3, [r7, #4]
 8013210:	681b      	ldr	r3, [r3, #0]
 8013212:	681a      	ldr	r2, [r3, #0]
 8013214:	687b      	ldr	r3, [r7, #4]
 8013216:	681b      	ldr	r3, [r3, #0]
 8013218:	f042 0201 	orr.w	r2, r2, #1
 801321c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801321e:	e007      	b.n	8013230 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8013220:	687b      	ldr	r3, [r7, #4]
 8013222:	681b      	ldr	r3, [r3, #0]
 8013224:	681a      	ldr	r2, [r3, #0]
 8013226:	687b      	ldr	r3, [r7, #4]
 8013228:	681b      	ldr	r3, [r3, #0]
 801322a:	f042 0201 	orr.w	r2, r2, #1
 801322e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8013230:	2300      	movs	r3, #0
}
 8013232:	4618      	mov	r0, r3
 8013234:	3714      	adds	r7, #20
 8013236:	46bd      	mov	sp, r7
 8013238:	f85d 7b04 	ldr.w	r7, [sp], #4
 801323c:	4770      	bx	lr
 801323e:	bf00      	nop
 8013240:	40010000 	.word	0x40010000
 8013244:	40000400 	.word	0x40000400
 8013248:	40000800 	.word	0x40000800
 801324c:	40000c00 	.word	0x40000c00
 8013250:	40010400 	.word	0x40010400
 8013254:	40014000 	.word	0x40014000
 8013258:	40001800 	.word	0x40001800

0801325c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 801325c:	b480      	push	{r7}
 801325e:	b085      	sub	sp, #20
 8013260:	af00      	add	r7, sp, #0
 8013262:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8013264:	687b      	ldr	r3, [r7, #4]
 8013266:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 801326a:	b2db      	uxtb	r3, r3
 801326c:	2b01      	cmp	r3, #1
 801326e:	d001      	beq.n	8013274 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8013270:	2301      	movs	r3, #1
 8013272:	e04e      	b.n	8013312 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8013274:	687b      	ldr	r3, [r7, #4]
 8013276:	2202      	movs	r2, #2
 8013278:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 801327c:	687b      	ldr	r3, [r7, #4]
 801327e:	681b      	ldr	r3, [r3, #0]
 8013280:	68da      	ldr	r2, [r3, #12]
 8013282:	687b      	ldr	r3, [r7, #4]
 8013284:	681b      	ldr	r3, [r3, #0]
 8013286:	f042 0201 	orr.w	r2, r2, #1
 801328a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801328c:	687b      	ldr	r3, [r7, #4]
 801328e:	681b      	ldr	r3, [r3, #0]
 8013290:	4a23      	ldr	r2, [pc, #140]	@ (8013320 <HAL_TIM_Base_Start_IT+0xc4>)
 8013292:	4293      	cmp	r3, r2
 8013294:	d022      	beq.n	80132dc <HAL_TIM_Base_Start_IT+0x80>
 8013296:	687b      	ldr	r3, [r7, #4]
 8013298:	681b      	ldr	r3, [r3, #0]
 801329a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801329e:	d01d      	beq.n	80132dc <HAL_TIM_Base_Start_IT+0x80>
 80132a0:	687b      	ldr	r3, [r7, #4]
 80132a2:	681b      	ldr	r3, [r3, #0]
 80132a4:	4a1f      	ldr	r2, [pc, #124]	@ (8013324 <HAL_TIM_Base_Start_IT+0xc8>)
 80132a6:	4293      	cmp	r3, r2
 80132a8:	d018      	beq.n	80132dc <HAL_TIM_Base_Start_IT+0x80>
 80132aa:	687b      	ldr	r3, [r7, #4]
 80132ac:	681b      	ldr	r3, [r3, #0]
 80132ae:	4a1e      	ldr	r2, [pc, #120]	@ (8013328 <HAL_TIM_Base_Start_IT+0xcc>)
 80132b0:	4293      	cmp	r3, r2
 80132b2:	d013      	beq.n	80132dc <HAL_TIM_Base_Start_IT+0x80>
 80132b4:	687b      	ldr	r3, [r7, #4]
 80132b6:	681b      	ldr	r3, [r3, #0]
 80132b8:	4a1c      	ldr	r2, [pc, #112]	@ (801332c <HAL_TIM_Base_Start_IT+0xd0>)
 80132ba:	4293      	cmp	r3, r2
 80132bc:	d00e      	beq.n	80132dc <HAL_TIM_Base_Start_IT+0x80>
 80132be:	687b      	ldr	r3, [r7, #4]
 80132c0:	681b      	ldr	r3, [r3, #0]
 80132c2:	4a1b      	ldr	r2, [pc, #108]	@ (8013330 <HAL_TIM_Base_Start_IT+0xd4>)
 80132c4:	4293      	cmp	r3, r2
 80132c6:	d009      	beq.n	80132dc <HAL_TIM_Base_Start_IT+0x80>
 80132c8:	687b      	ldr	r3, [r7, #4]
 80132ca:	681b      	ldr	r3, [r3, #0]
 80132cc:	4a19      	ldr	r2, [pc, #100]	@ (8013334 <HAL_TIM_Base_Start_IT+0xd8>)
 80132ce:	4293      	cmp	r3, r2
 80132d0:	d004      	beq.n	80132dc <HAL_TIM_Base_Start_IT+0x80>
 80132d2:	687b      	ldr	r3, [r7, #4]
 80132d4:	681b      	ldr	r3, [r3, #0]
 80132d6:	4a18      	ldr	r2, [pc, #96]	@ (8013338 <HAL_TIM_Base_Start_IT+0xdc>)
 80132d8:	4293      	cmp	r3, r2
 80132da:	d111      	bne.n	8013300 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80132dc:	687b      	ldr	r3, [r7, #4]
 80132de:	681b      	ldr	r3, [r3, #0]
 80132e0:	689b      	ldr	r3, [r3, #8]
 80132e2:	f003 0307 	and.w	r3, r3, #7
 80132e6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80132e8:	68fb      	ldr	r3, [r7, #12]
 80132ea:	2b06      	cmp	r3, #6
 80132ec:	d010      	beq.n	8013310 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80132ee:	687b      	ldr	r3, [r7, #4]
 80132f0:	681b      	ldr	r3, [r3, #0]
 80132f2:	681a      	ldr	r2, [r3, #0]
 80132f4:	687b      	ldr	r3, [r7, #4]
 80132f6:	681b      	ldr	r3, [r3, #0]
 80132f8:	f042 0201 	orr.w	r2, r2, #1
 80132fc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80132fe:	e007      	b.n	8013310 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8013300:	687b      	ldr	r3, [r7, #4]
 8013302:	681b      	ldr	r3, [r3, #0]
 8013304:	681a      	ldr	r2, [r3, #0]
 8013306:	687b      	ldr	r3, [r7, #4]
 8013308:	681b      	ldr	r3, [r3, #0]
 801330a:	f042 0201 	orr.w	r2, r2, #1
 801330e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8013310:	2300      	movs	r3, #0
}
 8013312:	4618      	mov	r0, r3
 8013314:	3714      	adds	r7, #20
 8013316:	46bd      	mov	sp, r7
 8013318:	f85d 7b04 	ldr.w	r7, [sp], #4
 801331c:	4770      	bx	lr
 801331e:	bf00      	nop
 8013320:	40010000 	.word	0x40010000
 8013324:	40000400 	.word	0x40000400
 8013328:	40000800 	.word	0x40000800
 801332c:	40000c00 	.word	0x40000c00
 8013330:	40010400 	.word	0x40010400
 8013334:	40014000 	.word	0x40014000
 8013338:	40001800 	.word	0x40001800

0801333c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 801333c:	b580      	push	{r7, lr}
 801333e:	b082      	sub	sp, #8
 8013340:	af00      	add	r7, sp, #0
 8013342:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8013344:	687b      	ldr	r3, [r7, #4]
 8013346:	2b00      	cmp	r3, #0
 8013348:	d101      	bne.n	801334e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 801334a:	2301      	movs	r3, #1
 801334c:	e041      	b.n	80133d2 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 801334e:	687b      	ldr	r3, [r7, #4]
 8013350:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8013354:	b2db      	uxtb	r3, r3
 8013356:	2b00      	cmp	r3, #0
 8013358:	d106      	bne.n	8013368 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 801335a:	687b      	ldr	r3, [r7, #4]
 801335c:	2200      	movs	r2, #0
 801335e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8013362:	6878      	ldr	r0, [r7, #4]
 8013364:	f7ef f9a2 	bl	80026ac <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8013368:	687b      	ldr	r3, [r7, #4]
 801336a:	2202      	movs	r2, #2
 801336c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8013370:	687b      	ldr	r3, [r7, #4]
 8013372:	681a      	ldr	r2, [r3, #0]
 8013374:	687b      	ldr	r3, [r7, #4]
 8013376:	3304      	adds	r3, #4
 8013378:	4619      	mov	r1, r3
 801337a:	4610      	mov	r0, r2
 801337c:	f000 fce4 	bl	8013d48 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8013380:	687b      	ldr	r3, [r7, #4]
 8013382:	2201      	movs	r2, #1
 8013384:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8013388:	687b      	ldr	r3, [r7, #4]
 801338a:	2201      	movs	r2, #1
 801338c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8013390:	687b      	ldr	r3, [r7, #4]
 8013392:	2201      	movs	r2, #1
 8013394:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8013398:	687b      	ldr	r3, [r7, #4]
 801339a:	2201      	movs	r2, #1
 801339c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80133a0:	687b      	ldr	r3, [r7, #4]
 80133a2:	2201      	movs	r2, #1
 80133a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80133a8:	687b      	ldr	r3, [r7, #4]
 80133aa:	2201      	movs	r2, #1
 80133ac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80133b0:	687b      	ldr	r3, [r7, #4]
 80133b2:	2201      	movs	r2, #1
 80133b4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80133b8:	687b      	ldr	r3, [r7, #4]
 80133ba:	2201      	movs	r2, #1
 80133bc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80133c0:	687b      	ldr	r3, [r7, #4]
 80133c2:	2201      	movs	r2, #1
 80133c4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80133c8:	687b      	ldr	r3, [r7, #4]
 80133ca:	2201      	movs	r2, #1
 80133cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80133d0:	2300      	movs	r3, #0
}
 80133d2:	4618      	mov	r0, r3
 80133d4:	3708      	adds	r7, #8
 80133d6:	46bd      	mov	sp, r7
 80133d8:	bd80      	pop	{r7, pc}
	...

080133dc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80133dc:	b580      	push	{r7, lr}
 80133de:	b084      	sub	sp, #16
 80133e0:	af00      	add	r7, sp, #0
 80133e2:	6078      	str	r0, [r7, #4]
 80133e4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80133e6:	683b      	ldr	r3, [r7, #0]
 80133e8:	2b00      	cmp	r3, #0
 80133ea:	d109      	bne.n	8013400 <HAL_TIM_PWM_Start+0x24>
 80133ec:	687b      	ldr	r3, [r7, #4]
 80133ee:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80133f2:	b2db      	uxtb	r3, r3
 80133f4:	2b01      	cmp	r3, #1
 80133f6:	bf14      	ite	ne
 80133f8:	2301      	movne	r3, #1
 80133fa:	2300      	moveq	r3, #0
 80133fc:	b2db      	uxtb	r3, r3
 80133fe:	e022      	b.n	8013446 <HAL_TIM_PWM_Start+0x6a>
 8013400:	683b      	ldr	r3, [r7, #0]
 8013402:	2b04      	cmp	r3, #4
 8013404:	d109      	bne.n	801341a <HAL_TIM_PWM_Start+0x3e>
 8013406:	687b      	ldr	r3, [r7, #4]
 8013408:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 801340c:	b2db      	uxtb	r3, r3
 801340e:	2b01      	cmp	r3, #1
 8013410:	bf14      	ite	ne
 8013412:	2301      	movne	r3, #1
 8013414:	2300      	moveq	r3, #0
 8013416:	b2db      	uxtb	r3, r3
 8013418:	e015      	b.n	8013446 <HAL_TIM_PWM_Start+0x6a>
 801341a:	683b      	ldr	r3, [r7, #0]
 801341c:	2b08      	cmp	r3, #8
 801341e:	d109      	bne.n	8013434 <HAL_TIM_PWM_Start+0x58>
 8013420:	687b      	ldr	r3, [r7, #4]
 8013422:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8013426:	b2db      	uxtb	r3, r3
 8013428:	2b01      	cmp	r3, #1
 801342a:	bf14      	ite	ne
 801342c:	2301      	movne	r3, #1
 801342e:	2300      	moveq	r3, #0
 8013430:	b2db      	uxtb	r3, r3
 8013432:	e008      	b.n	8013446 <HAL_TIM_PWM_Start+0x6a>
 8013434:	687b      	ldr	r3, [r7, #4]
 8013436:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 801343a:	b2db      	uxtb	r3, r3
 801343c:	2b01      	cmp	r3, #1
 801343e:	bf14      	ite	ne
 8013440:	2301      	movne	r3, #1
 8013442:	2300      	moveq	r3, #0
 8013444:	b2db      	uxtb	r3, r3
 8013446:	2b00      	cmp	r3, #0
 8013448:	d001      	beq.n	801344e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 801344a:	2301      	movs	r3, #1
 801344c:	e07c      	b.n	8013548 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 801344e:	683b      	ldr	r3, [r7, #0]
 8013450:	2b00      	cmp	r3, #0
 8013452:	d104      	bne.n	801345e <HAL_TIM_PWM_Start+0x82>
 8013454:	687b      	ldr	r3, [r7, #4]
 8013456:	2202      	movs	r2, #2
 8013458:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 801345c:	e013      	b.n	8013486 <HAL_TIM_PWM_Start+0xaa>
 801345e:	683b      	ldr	r3, [r7, #0]
 8013460:	2b04      	cmp	r3, #4
 8013462:	d104      	bne.n	801346e <HAL_TIM_PWM_Start+0x92>
 8013464:	687b      	ldr	r3, [r7, #4]
 8013466:	2202      	movs	r2, #2
 8013468:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 801346c:	e00b      	b.n	8013486 <HAL_TIM_PWM_Start+0xaa>
 801346e:	683b      	ldr	r3, [r7, #0]
 8013470:	2b08      	cmp	r3, #8
 8013472:	d104      	bne.n	801347e <HAL_TIM_PWM_Start+0xa2>
 8013474:	687b      	ldr	r3, [r7, #4]
 8013476:	2202      	movs	r2, #2
 8013478:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 801347c:	e003      	b.n	8013486 <HAL_TIM_PWM_Start+0xaa>
 801347e:	687b      	ldr	r3, [r7, #4]
 8013480:	2202      	movs	r2, #2
 8013482:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8013486:	687b      	ldr	r3, [r7, #4]
 8013488:	681b      	ldr	r3, [r3, #0]
 801348a:	2201      	movs	r2, #1
 801348c:	6839      	ldr	r1, [r7, #0]
 801348e:	4618      	mov	r0, r3
 8013490:	f000 ff44 	bl	801431c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8013494:	687b      	ldr	r3, [r7, #4]
 8013496:	681b      	ldr	r3, [r3, #0]
 8013498:	4a2d      	ldr	r2, [pc, #180]	@ (8013550 <HAL_TIM_PWM_Start+0x174>)
 801349a:	4293      	cmp	r3, r2
 801349c:	d004      	beq.n	80134a8 <HAL_TIM_PWM_Start+0xcc>
 801349e:	687b      	ldr	r3, [r7, #4]
 80134a0:	681b      	ldr	r3, [r3, #0]
 80134a2:	4a2c      	ldr	r2, [pc, #176]	@ (8013554 <HAL_TIM_PWM_Start+0x178>)
 80134a4:	4293      	cmp	r3, r2
 80134a6:	d101      	bne.n	80134ac <HAL_TIM_PWM_Start+0xd0>
 80134a8:	2301      	movs	r3, #1
 80134aa:	e000      	b.n	80134ae <HAL_TIM_PWM_Start+0xd2>
 80134ac:	2300      	movs	r3, #0
 80134ae:	2b00      	cmp	r3, #0
 80134b0:	d007      	beq.n	80134c2 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80134b2:	687b      	ldr	r3, [r7, #4]
 80134b4:	681b      	ldr	r3, [r3, #0]
 80134b6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80134b8:	687b      	ldr	r3, [r7, #4]
 80134ba:	681b      	ldr	r3, [r3, #0]
 80134bc:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80134c0:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80134c2:	687b      	ldr	r3, [r7, #4]
 80134c4:	681b      	ldr	r3, [r3, #0]
 80134c6:	4a22      	ldr	r2, [pc, #136]	@ (8013550 <HAL_TIM_PWM_Start+0x174>)
 80134c8:	4293      	cmp	r3, r2
 80134ca:	d022      	beq.n	8013512 <HAL_TIM_PWM_Start+0x136>
 80134cc:	687b      	ldr	r3, [r7, #4]
 80134ce:	681b      	ldr	r3, [r3, #0]
 80134d0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80134d4:	d01d      	beq.n	8013512 <HAL_TIM_PWM_Start+0x136>
 80134d6:	687b      	ldr	r3, [r7, #4]
 80134d8:	681b      	ldr	r3, [r3, #0]
 80134da:	4a1f      	ldr	r2, [pc, #124]	@ (8013558 <HAL_TIM_PWM_Start+0x17c>)
 80134dc:	4293      	cmp	r3, r2
 80134de:	d018      	beq.n	8013512 <HAL_TIM_PWM_Start+0x136>
 80134e0:	687b      	ldr	r3, [r7, #4]
 80134e2:	681b      	ldr	r3, [r3, #0]
 80134e4:	4a1d      	ldr	r2, [pc, #116]	@ (801355c <HAL_TIM_PWM_Start+0x180>)
 80134e6:	4293      	cmp	r3, r2
 80134e8:	d013      	beq.n	8013512 <HAL_TIM_PWM_Start+0x136>
 80134ea:	687b      	ldr	r3, [r7, #4]
 80134ec:	681b      	ldr	r3, [r3, #0]
 80134ee:	4a1c      	ldr	r2, [pc, #112]	@ (8013560 <HAL_TIM_PWM_Start+0x184>)
 80134f0:	4293      	cmp	r3, r2
 80134f2:	d00e      	beq.n	8013512 <HAL_TIM_PWM_Start+0x136>
 80134f4:	687b      	ldr	r3, [r7, #4]
 80134f6:	681b      	ldr	r3, [r3, #0]
 80134f8:	4a16      	ldr	r2, [pc, #88]	@ (8013554 <HAL_TIM_PWM_Start+0x178>)
 80134fa:	4293      	cmp	r3, r2
 80134fc:	d009      	beq.n	8013512 <HAL_TIM_PWM_Start+0x136>
 80134fe:	687b      	ldr	r3, [r7, #4]
 8013500:	681b      	ldr	r3, [r3, #0]
 8013502:	4a18      	ldr	r2, [pc, #96]	@ (8013564 <HAL_TIM_PWM_Start+0x188>)
 8013504:	4293      	cmp	r3, r2
 8013506:	d004      	beq.n	8013512 <HAL_TIM_PWM_Start+0x136>
 8013508:	687b      	ldr	r3, [r7, #4]
 801350a:	681b      	ldr	r3, [r3, #0]
 801350c:	4a16      	ldr	r2, [pc, #88]	@ (8013568 <HAL_TIM_PWM_Start+0x18c>)
 801350e:	4293      	cmp	r3, r2
 8013510:	d111      	bne.n	8013536 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8013512:	687b      	ldr	r3, [r7, #4]
 8013514:	681b      	ldr	r3, [r3, #0]
 8013516:	689b      	ldr	r3, [r3, #8]
 8013518:	f003 0307 	and.w	r3, r3, #7
 801351c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801351e:	68fb      	ldr	r3, [r7, #12]
 8013520:	2b06      	cmp	r3, #6
 8013522:	d010      	beq.n	8013546 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8013524:	687b      	ldr	r3, [r7, #4]
 8013526:	681b      	ldr	r3, [r3, #0]
 8013528:	681a      	ldr	r2, [r3, #0]
 801352a:	687b      	ldr	r3, [r7, #4]
 801352c:	681b      	ldr	r3, [r3, #0]
 801352e:	f042 0201 	orr.w	r2, r2, #1
 8013532:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8013534:	e007      	b.n	8013546 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8013536:	687b      	ldr	r3, [r7, #4]
 8013538:	681b      	ldr	r3, [r3, #0]
 801353a:	681a      	ldr	r2, [r3, #0]
 801353c:	687b      	ldr	r3, [r7, #4]
 801353e:	681b      	ldr	r3, [r3, #0]
 8013540:	f042 0201 	orr.w	r2, r2, #1
 8013544:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8013546:	2300      	movs	r3, #0
}
 8013548:	4618      	mov	r0, r3
 801354a:	3710      	adds	r7, #16
 801354c:	46bd      	mov	sp, r7
 801354e:	bd80      	pop	{r7, pc}
 8013550:	40010000 	.word	0x40010000
 8013554:	40010400 	.word	0x40010400
 8013558:	40000400 	.word	0x40000400
 801355c:	40000800 	.word	0x40000800
 8013560:	40000c00 	.word	0x40000c00
 8013564:	40014000 	.word	0x40014000
 8013568:	40001800 	.word	0x40001800

0801356c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 801356c:	b580      	push	{r7, lr}
 801356e:	b086      	sub	sp, #24
 8013570:	af00      	add	r7, sp, #0
 8013572:	6078      	str	r0, [r7, #4]
 8013574:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8013576:	687b      	ldr	r3, [r7, #4]
 8013578:	2b00      	cmp	r3, #0
 801357a:	d101      	bne.n	8013580 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 801357c:	2301      	movs	r3, #1
 801357e:	e097      	b.n	80136b0 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8013580:	687b      	ldr	r3, [r7, #4]
 8013582:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8013586:	b2db      	uxtb	r3, r3
 8013588:	2b00      	cmp	r3, #0
 801358a:	d106      	bne.n	801359a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 801358c:	687b      	ldr	r3, [r7, #4]
 801358e:	2200      	movs	r2, #0
 8013590:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8013594:	6878      	ldr	r0, [r7, #4]
 8013596:	f7ef fc7b 	bl	8002e90 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801359a:	687b      	ldr	r3, [r7, #4]
 801359c:	2202      	movs	r2, #2
 801359e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80135a2:	687b      	ldr	r3, [r7, #4]
 80135a4:	681b      	ldr	r3, [r3, #0]
 80135a6:	689b      	ldr	r3, [r3, #8]
 80135a8:	687a      	ldr	r2, [r7, #4]
 80135aa:	6812      	ldr	r2, [r2, #0]
 80135ac:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80135b0:	f023 0307 	bic.w	r3, r3, #7
 80135b4:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80135b6:	687b      	ldr	r3, [r7, #4]
 80135b8:	681a      	ldr	r2, [r3, #0]
 80135ba:	687b      	ldr	r3, [r7, #4]
 80135bc:	3304      	adds	r3, #4
 80135be:	4619      	mov	r1, r3
 80135c0:	4610      	mov	r0, r2
 80135c2:	f000 fbc1 	bl	8013d48 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80135c6:	687b      	ldr	r3, [r7, #4]
 80135c8:	681b      	ldr	r3, [r3, #0]
 80135ca:	689b      	ldr	r3, [r3, #8]
 80135cc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80135ce:	687b      	ldr	r3, [r7, #4]
 80135d0:	681b      	ldr	r3, [r3, #0]
 80135d2:	699b      	ldr	r3, [r3, #24]
 80135d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80135d6:	687b      	ldr	r3, [r7, #4]
 80135d8:	681b      	ldr	r3, [r3, #0]
 80135da:	6a1b      	ldr	r3, [r3, #32]
 80135dc:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80135de:	683b      	ldr	r3, [r7, #0]
 80135e0:	681b      	ldr	r3, [r3, #0]
 80135e2:	697a      	ldr	r2, [r7, #20]
 80135e4:	4313      	orrs	r3, r2
 80135e6:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80135e8:	693b      	ldr	r3, [r7, #16]
 80135ea:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80135ee:	f023 0303 	bic.w	r3, r3, #3
 80135f2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80135f4:	683b      	ldr	r3, [r7, #0]
 80135f6:	689a      	ldr	r2, [r3, #8]
 80135f8:	683b      	ldr	r3, [r7, #0]
 80135fa:	699b      	ldr	r3, [r3, #24]
 80135fc:	021b      	lsls	r3, r3, #8
 80135fe:	4313      	orrs	r3, r2
 8013600:	693a      	ldr	r2, [r7, #16]
 8013602:	4313      	orrs	r3, r2
 8013604:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8013606:	693b      	ldr	r3, [r7, #16]
 8013608:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 801360c:	f023 030c 	bic.w	r3, r3, #12
 8013610:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8013612:	693b      	ldr	r3, [r7, #16]
 8013614:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8013618:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 801361c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 801361e:	683b      	ldr	r3, [r7, #0]
 8013620:	68da      	ldr	r2, [r3, #12]
 8013622:	683b      	ldr	r3, [r7, #0]
 8013624:	69db      	ldr	r3, [r3, #28]
 8013626:	021b      	lsls	r3, r3, #8
 8013628:	4313      	orrs	r3, r2
 801362a:	693a      	ldr	r2, [r7, #16]
 801362c:	4313      	orrs	r3, r2
 801362e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8013630:	683b      	ldr	r3, [r7, #0]
 8013632:	691b      	ldr	r3, [r3, #16]
 8013634:	011a      	lsls	r2, r3, #4
 8013636:	683b      	ldr	r3, [r7, #0]
 8013638:	6a1b      	ldr	r3, [r3, #32]
 801363a:	031b      	lsls	r3, r3, #12
 801363c:	4313      	orrs	r3, r2
 801363e:	693a      	ldr	r2, [r7, #16]
 8013640:	4313      	orrs	r3, r2
 8013642:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8013644:	68fb      	ldr	r3, [r7, #12]
 8013646:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 801364a:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 801364c:	68fb      	ldr	r3, [r7, #12]
 801364e:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8013652:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8013654:	683b      	ldr	r3, [r7, #0]
 8013656:	685a      	ldr	r2, [r3, #4]
 8013658:	683b      	ldr	r3, [r7, #0]
 801365a:	695b      	ldr	r3, [r3, #20]
 801365c:	011b      	lsls	r3, r3, #4
 801365e:	4313      	orrs	r3, r2
 8013660:	68fa      	ldr	r2, [r7, #12]
 8013662:	4313      	orrs	r3, r2
 8013664:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8013666:	687b      	ldr	r3, [r7, #4]
 8013668:	681b      	ldr	r3, [r3, #0]
 801366a:	697a      	ldr	r2, [r7, #20]
 801366c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 801366e:	687b      	ldr	r3, [r7, #4]
 8013670:	681b      	ldr	r3, [r3, #0]
 8013672:	693a      	ldr	r2, [r7, #16]
 8013674:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8013676:	687b      	ldr	r3, [r7, #4]
 8013678:	681b      	ldr	r3, [r3, #0]
 801367a:	68fa      	ldr	r2, [r7, #12]
 801367c:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 801367e:	687b      	ldr	r3, [r7, #4]
 8013680:	2201      	movs	r2, #1
 8013682:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8013686:	687b      	ldr	r3, [r7, #4]
 8013688:	2201      	movs	r2, #1
 801368a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 801368e:	687b      	ldr	r3, [r7, #4]
 8013690:	2201      	movs	r2, #1
 8013692:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8013696:	687b      	ldr	r3, [r7, #4]
 8013698:	2201      	movs	r2, #1
 801369a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 801369e:	687b      	ldr	r3, [r7, #4]
 80136a0:	2201      	movs	r2, #1
 80136a2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80136a6:	687b      	ldr	r3, [r7, #4]
 80136a8:	2201      	movs	r2, #1
 80136aa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80136ae:	2300      	movs	r3, #0
}
 80136b0:	4618      	mov	r0, r3
 80136b2:	3718      	adds	r7, #24
 80136b4:	46bd      	mov	sp, r7
 80136b6:	bd80      	pop	{r7, pc}

080136b8 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80136b8:	b580      	push	{r7, lr}
 80136ba:	b084      	sub	sp, #16
 80136bc:	af00      	add	r7, sp, #0
 80136be:	6078      	str	r0, [r7, #4]
 80136c0:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80136c2:	687b      	ldr	r3, [r7, #4]
 80136c4:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80136c8:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80136ca:	687b      	ldr	r3, [r7, #4]
 80136cc:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80136d0:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80136d2:	687b      	ldr	r3, [r7, #4]
 80136d4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80136d8:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80136da:	687b      	ldr	r3, [r7, #4]
 80136dc:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80136e0:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80136e2:	683b      	ldr	r3, [r7, #0]
 80136e4:	2b00      	cmp	r3, #0
 80136e6:	d110      	bne.n	801370a <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80136e8:	7bfb      	ldrb	r3, [r7, #15]
 80136ea:	2b01      	cmp	r3, #1
 80136ec:	d102      	bne.n	80136f4 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80136ee:	7b7b      	ldrb	r3, [r7, #13]
 80136f0:	2b01      	cmp	r3, #1
 80136f2:	d001      	beq.n	80136f8 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80136f4:	2301      	movs	r3, #1
 80136f6:	e069      	b.n	80137cc <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80136f8:	687b      	ldr	r3, [r7, #4]
 80136fa:	2202      	movs	r2, #2
 80136fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8013700:	687b      	ldr	r3, [r7, #4]
 8013702:	2202      	movs	r2, #2
 8013704:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8013708:	e031      	b.n	801376e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 801370a:	683b      	ldr	r3, [r7, #0]
 801370c:	2b04      	cmp	r3, #4
 801370e:	d110      	bne.n	8013732 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8013710:	7bbb      	ldrb	r3, [r7, #14]
 8013712:	2b01      	cmp	r3, #1
 8013714:	d102      	bne.n	801371c <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8013716:	7b3b      	ldrb	r3, [r7, #12]
 8013718:	2b01      	cmp	r3, #1
 801371a:	d001      	beq.n	8013720 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 801371c:	2301      	movs	r3, #1
 801371e:	e055      	b.n	80137cc <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8013720:	687b      	ldr	r3, [r7, #4]
 8013722:	2202      	movs	r2, #2
 8013724:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8013728:	687b      	ldr	r3, [r7, #4]
 801372a:	2202      	movs	r2, #2
 801372c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8013730:	e01d      	b.n	801376e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8013732:	7bfb      	ldrb	r3, [r7, #15]
 8013734:	2b01      	cmp	r3, #1
 8013736:	d108      	bne.n	801374a <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8013738:	7bbb      	ldrb	r3, [r7, #14]
 801373a:	2b01      	cmp	r3, #1
 801373c:	d105      	bne.n	801374a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 801373e:	7b7b      	ldrb	r3, [r7, #13]
 8013740:	2b01      	cmp	r3, #1
 8013742:	d102      	bne.n	801374a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8013744:	7b3b      	ldrb	r3, [r7, #12]
 8013746:	2b01      	cmp	r3, #1
 8013748:	d001      	beq.n	801374e <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 801374a:	2301      	movs	r3, #1
 801374c:	e03e      	b.n	80137cc <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 801374e:	687b      	ldr	r3, [r7, #4]
 8013750:	2202      	movs	r2, #2
 8013752:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8013756:	687b      	ldr	r3, [r7, #4]
 8013758:	2202      	movs	r2, #2
 801375a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 801375e:	687b      	ldr	r3, [r7, #4]
 8013760:	2202      	movs	r2, #2
 8013762:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8013766:	687b      	ldr	r3, [r7, #4]
 8013768:	2202      	movs	r2, #2
 801376a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 801376e:	683b      	ldr	r3, [r7, #0]
 8013770:	2b00      	cmp	r3, #0
 8013772:	d003      	beq.n	801377c <HAL_TIM_Encoder_Start+0xc4>
 8013774:	683b      	ldr	r3, [r7, #0]
 8013776:	2b04      	cmp	r3, #4
 8013778:	d008      	beq.n	801378c <HAL_TIM_Encoder_Start+0xd4>
 801377a:	e00f      	b.n	801379c <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 801377c:	687b      	ldr	r3, [r7, #4]
 801377e:	681b      	ldr	r3, [r3, #0]
 8013780:	2201      	movs	r2, #1
 8013782:	2100      	movs	r1, #0
 8013784:	4618      	mov	r0, r3
 8013786:	f000 fdc9 	bl	801431c <TIM_CCxChannelCmd>
      break;
 801378a:	e016      	b.n	80137ba <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 801378c:	687b      	ldr	r3, [r7, #4]
 801378e:	681b      	ldr	r3, [r3, #0]
 8013790:	2201      	movs	r2, #1
 8013792:	2104      	movs	r1, #4
 8013794:	4618      	mov	r0, r3
 8013796:	f000 fdc1 	bl	801431c <TIM_CCxChannelCmd>
      break;
 801379a:	e00e      	b.n	80137ba <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 801379c:	687b      	ldr	r3, [r7, #4]
 801379e:	681b      	ldr	r3, [r3, #0]
 80137a0:	2201      	movs	r2, #1
 80137a2:	2100      	movs	r1, #0
 80137a4:	4618      	mov	r0, r3
 80137a6:	f000 fdb9 	bl	801431c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80137aa:	687b      	ldr	r3, [r7, #4]
 80137ac:	681b      	ldr	r3, [r3, #0]
 80137ae:	2201      	movs	r2, #1
 80137b0:	2104      	movs	r1, #4
 80137b2:	4618      	mov	r0, r3
 80137b4:	f000 fdb2 	bl	801431c <TIM_CCxChannelCmd>
      break;
 80137b8:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80137ba:	687b      	ldr	r3, [r7, #4]
 80137bc:	681b      	ldr	r3, [r3, #0]
 80137be:	681a      	ldr	r2, [r3, #0]
 80137c0:	687b      	ldr	r3, [r7, #4]
 80137c2:	681b      	ldr	r3, [r3, #0]
 80137c4:	f042 0201 	orr.w	r2, r2, #1
 80137c8:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80137ca:	2300      	movs	r3, #0
}
 80137cc:	4618      	mov	r0, r3
 80137ce:	3710      	adds	r7, #16
 80137d0:	46bd      	mov	sp, r7
 80137d2:	bd80      	pop	{r7, pc}

080137d4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80137d4:	b580      	push	{r7, lr}
 80137d6:	b082      	sub	sp, #8
 80137d8:	af00      	add	r7, sp, #0
 80137da:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80137dc:	687b      	ldr	r3, [r7, #4]
 80137de:	681b      	ldr	r3, [r3, #0]
 80137e0:	691b      	ldr	r3, [r3, #16]
 80137e2:	f003 0302 	and.w	r3, r3, #2
 80137e6:	2b02      	cmp	r3, #2
 80137e8:	d122      	bne.n	8013830 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80137ea:	687b      	ldr	r3, [r7, #4]
 80137ec:	681b      	ldr	r3, [r3, #0]
 80137ee:	68db      	ldr	r3, [r3, #12]
 80137f0:	f003 0302 	and.w	r3, r3, #2
 80137f4:	2b02      	cmp	r3, #2
 80137f6:	d11b      	bne.n	8013830 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80137f8:	687b      	ldr	r3, [r7, #4]
 80137fa:	681b      	ldr	r3, [r3, #0]
 80137fc:	f06f 0202 	mvn.w	r2, #2
 8013800:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8013802:	687b      	ldr	r3, [r7, #4]
 8013804:	2201      	movs	r2, #1
 8013806:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8013808:	687b      	ldr	r3, [r7, #4]
 801380a:	681b      	ldr	r3, [r3, #0]
 801380c:	699b      	ldr	r3, [r3, #24]
 801380e:	f003 0303 	and.w	r3, r3, #3
 8013812:	2b00      	cmp	r3, #0
 8013814:	d003      	beq.n	801381e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8013816:	6878      	ldr	r0, [r7, #4]
 8013818:	f000 fa77 	bl	8013d0a <HAL_TIM_IC_CaptureCallback>
 801381c:	e005      	b.n	801382a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 801381e:	6878      	ldr	r0, [r7, #4]
 8013820:	f000 fa69 	bl	8013cf6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8013824:	6878      	ldr	r0, [r7, #4]
 8013826:	f000 fa7a 	bl	8013d1e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801382a:	687b      	ldr	r3, [r7, #4]
 801382c:	2200      	movs	r2, #0
 801382e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8013830:	687b      	ldr	r3, [r7, #4]
 8013832:	681b      	ldr	r3, [r3, #0]
 8013834:	691b      	ldr	r3, [r3, #16]
 8013836:	f003 0304 	and.w	r3, r3, #4
 801383a:	2b04      	cmp	r3, #4
 801383c:	d122      	bne.n	8013884 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 801383e:	687b      	ldr	r3, [r7, #4]
 8013840:	681b      	ldr	r3, [r3, #0]
 8013842:	68db      	ldr	r3, [r3, #12]
 8013844:	f003 0304 	and.w	r3, r3, #4
 8013848:	2b04      	cmp	r3, #4
 801384a:	d11b      	bne.n	8013884 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 801384c:	687b      	ldr	r3, [r7, #4]
 801384e:	681b      	ldr	r3, [r3, #0]
 8013850:	f06f 0204 	mvn.w	r2, #4
 8013854:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8013856:	687b      	ldr	r3, [r7, #4]
 8013858:	2202      	movs	r2, #2
 801385a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 801385c:	687b      	ldr	r3, [r7, #4]
 801385e:	681b      	ldr	r3, [r3, #0]
 8013860:	699b      	ldr	r3, [r3, #24]
 8013862:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8013866:	2b00      	cmp	r3, #0
 8013868:	d003      	beq.n	8013872 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 801386a:	6878      	ldr	r0, [r7, #4]
 801386c:	f000 fa4d 	bl	8013d0a <HAL_TIM_IC_CaptureCallback>
 8013870:	e005      	b.n	801387e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8013872:	6878      	ldr	r0, [r7, #4]
 8013874:	f000 fa3f 	bl	8013cf6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8013878:	6878      	ldr	r0, [r7, #4]
 801387a:	f000 fa50 	bl	8013d1e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801387e:	687b      	ldr	r3, [r7, #4]
 8013880:	2200      	movs	r2, #0
 8013882:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8013884:	687b      	ldr	r3, [r7, #4]
 8013886:	681b      	ldr	r3, [r3, #0]
 8013888:	691b      	ldr	r3, [r3, #16]
 801388a:	f003 0308 	and.w	r3, r3, #8
 801388e:	2b08      	cmp	r3, #8
 8013890:	d122      	bne.n	80138d8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8013892:	687b      	ldr	r3, [r7, #4]
 8013894:	681b      	ldr	r3, [r3, #0]
 8013896:	68db      	ldr	r3, [r3, #12]
 8013898:	f003 0308 	and.w	r3, r3, #8
 801389c:	2b08      	cmp	r3, #8
 801389e:	d11b      	bne.n	80138d8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80138a0:	687b      	ldr	r3, [r7, #4]
 80138a2:	681b      	ldr	r3, [r3, #0]
 80138a4:	f06f 0208 	mvn.w	r2, #8
 80138a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80138aa:	687b      	ldr	r3, [r7, #4]
 80138ac:	2204      	movs	r2, #4
 80138ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80138b0:	687b      	ldr	r3, [r7, #4]
 80138b2:	681b      	ldr	r3, [r3, #0]
 80138b4:	69db      	ldr	r3, [r3, #28]
 80138b6:	f003 0303 	and.w	r3, r3, #3
 80138ba:	2b00      	cmp	r3, #0
 80138bc:	d003      	beq.n	80138c6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80138be:	6878      	ldr	r0, [r7, #4]
 80138c0:	f000 fa23 	bl	8013d0a <HAL_TIM_IC_CaptureCallback>
 80138c4:	e005      	b.n	80138d2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80138c6:	6878      	ldr	r0, [r7, #4]
 80138c8:	f000 fa15 	bl	8013cf6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80138cc:	6878      	ldr	r0, [r7, #4]
 80138ce:	f000 fa26 	bl	8013d1e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80138d2:	687b      	ldr	r3, [r7, #4]
 80138d4:	2200      	movs	r2, #0
 80138d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80138d8:	687b      	ldr	r3, [r7, #4]
 80138da:	681b      	ldr	r3, [r3, #0]
 80138dc:	691b      	ldr	r3, [r3, #16]
 80138de:	f003 0310 	and.w	r3, r3, #16
 80138e2:	2b10      	cmp	r3, #16
 80138e4:	d122      	bne.n	801392c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80138e6:	687b      	ldr	r3, [r7, #4]
 80138e8:	681b      	ldr	r3, [r3, #0]
 80138ea:	68db      	ldr	r3, [r3, #12]
 80138ec:	f003 0310 	and.w	r3, r3, #16
 80138f0:	2b10      	cmp	r3, #16
 80138f2:	d11b      	bne.n	801392c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80138f4:	687b      	ldr	r3, [r7, #4]
 80138f6:	681b      	ldr	r3, [r3, #0]
 80138f8:	f06f 0210 	mvn.w	r2, #16
 80138fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80138fe:	687b      	ldr	r3, [r7, #4]
 8013900:	2208      	movs	r2, #8
 8013902:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8013904:	687b      	ldr	r3, [r7, #4]
 8013906:	681b      	ldr	r3, [r3, #0]
 8013908:	69db      	ldr	r3, [r3, #28]
 801390a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 801390e:	2b00      	cmp	r3, #0
 8013910:	d003      	beq.n	801391a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8013912:	6878      	ldr	r0, [r7, #4]
 8013914:	f000 f9f9 	bl	8013d0a <HAL_TIM_IC_CaptureCallback>
 8013918:	e005      	b.n	8013926 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801391a:	6878      	ldr	r0, [r7, #4]
 801391c:	f000 f9eb 	bl	8013cf6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8013920:	6878      	ldr	r0, [r7, #4]
 8013922:	f000 f9fc 	bl	8013d1e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8013926:	687b      	ldr	r3, [r7, #4]
 8013928:	2200      	movs	r2, #0
 801392a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 801392c:	687b      	ldr	r3, [r7, #4]
 801392e:	681b      	ldr	r3, [r3, #0]
 8013930:	691b      	ldr	r3, [r3, #16]
 8013932:	f003 0301 	and.w	r3, r3, #1
 8013936:	2b01      	cmp	r3, #1
 8013938:	d10e      	bne.n	8013958 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 801393a:	687b      	ldr	r3, [r7, #4]
 801393c:	681b      	ldr	r3, [r3, #0]
 801393e:	68db      	ldr	r3, [r3, #12]
 8013940:	f003 0301 	and.w	r3, r3, #1
 8013944:	2b01      	cmp	r3, #1
 8013946:	d107      	bne.n	8013958 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8013948:	687b      	ldr	r3, [r7, #4]
 801394a:	681b      	ldr	r3, [r3, #0]
 801394c:	f06f 0201 	mvn.w	r2, #1
 8013950:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8013952:	6878      	ldr	r0, [r7, #4]
 8013954:	f7f7 fde2 	bl	800b51c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8013958:	687b      	ldr	r3, [r7, #4]
 801395a:	681b      	ldr	r3, [r3, #0]
 801395c:	691b      	ldr	r3, [r3, #16]
 801395e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8013962:	2b80      	cmp	r3, #128	@ 0x80
 8013964:	d10e      	bne.n	8013984 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8013966:	687b      	ldr	r3, [r7, #4]
 8013968:	681b      	ldr	r3, [r3, #0]
 801396a:	68db      	ldr	r3, [r3, #12]
 801396c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8013970:	2b80      	cmp	r3, #128	@ 0x80
 8013972:	d107      	bne.n	8013984 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8013974:	687b      	ldr	r3, [r7, #4]
 8013976:	681b      	ldr	r3, [r3, #0]
 8013978:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 801397c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 801397e:	6878      	ldr	r0, [r7, #4]
 8013980:	f000 fd78 	bl	8014474 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8013984:	687b      	ldr	r3, [r7, #4]
 8013986:	681b      	ldr	r3, [r3, #0]
 8013988:	691b      	ldr	r3, [r3, #16]
 801398a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801398e:	2b40      	cmp	r3, #64	@ 0x40
 8013990:	d10e      	bne.n	80139b0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8013992:	687b      	ldr	r3, [r7, #4]
 8013994:	681b      	ldr	r3, [r3, #0]
 8013996:	68db      	ldr	r3, [r3, #12]
 8013998:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801399c:	2b40      	cmp	r3, #64	@ 0x40
 801399e:	d107      	bne.n	80139b0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80139a0:	687b      	ldr	r3, [r7, #4]
 80139a2:	681b      	ldr	r3, [r3, #0]
 80139a4:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80139a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80139aa:	6878      	ldr	r0, [r7, #4]
 80139ac:	f000 f9c1 	bl	8013d32 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80139b0:	687b      	ldr	r3, [r7, #4]
 80139b2:	681b      	ldr	r3, [r3, #0]
 80139b4:	691b      	ldr	r3, [r3, #16]
 80139b6:	f003 0320 	and.w	r3, r3, #32
 80139ba:	2b20      	cmp	r3, #32
 80139bc:	d10e      	bne.n	80139dc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80139be:	687b      	ldr	r3, [r7, #4]
 80139c0:	681b      	ldr	r3, [r3, #0]
 80139c2:	68db      	ldr	r3, [r3, #12]
 80139c4:	f003 0320 	and.w	r3, r3, #32
 80139c8:	2b20      	cmp	r3, #32
 80139ca:	d107      	bne.n	80139dc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80139cc:	687b      	ldr	r3, [r7, #4]
 80139ce:	681b      	ldr	r3, [r3, #0]
 80139d0:	f06f 0220 	mvn.w	r2, #32
 80139d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80139d6:	6878      	ldr	r0, [r7, #4]
 80139d8:	f000 fd42 	bl	8014460 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80139dc:	bf00      	nop
 80139de:	3708      	adds	r7, #8
 80139e0:	46bd      	mov	sp, r7
 80139e2:	bd80      	pop	{r7, pc}

080139e4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80139e4:	b580      	push	{r7, lr}
 80139e6:	b086      	sub	sp, #24
 80139e8:	af00      	add	r7, sp, #0
 80139ea:	60f8      	str	r0, [r7, #12]
 80139ec:	60b9      	str	r1, [r7, #8]
 80139ee:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80139f0:	2300      	movs	r3, #0
 80139f2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80139f4:	68fb      	ldr	r3, [r7, #12]
 80139f6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80139fa:	2b01      	cmp	r3, #1
 80139fc:	d101      	bne.n	8013a02 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80139fe:	2302      	movs	r3, #2
 8013a00:	e0ae      	b.n	8013b60 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8013a02:	68fb      	ldr	r3, [r7, #12]
 8013a04:	2201      	movs	r2, #1
 8013a06:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8013a0a:	687b      	ldr	r3, [r7, #4]
 8013a0c:	2b0c      	cmp	r3, #12
 8013a0e:	f200 809f 	bhi.w	8013b50 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8013a12:	a201      	add	r2, pc, #4	@ (adr r2, 8013a18 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8013a14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013a18:	08013a4d 	.word	0x08013a4d
 8013a1c:	08013b51 	.word	0x08013b51
 8013a20:	08013b51 	.word	0x08013b51
 8013a24:	08013b51 	.word	0x08013b51
 8013a28:	08013a8d 	.word	0x08013a8d
 8013a2c:	08013b51 	.word	0x08013b51
 8013a30:	08013b51 	.word	0x08013b51
 8013a34:	08013b51 	.word	0x08013b51
 8013a38:	08013acf 	.word	0x08013acf
 8013a3c:	08013b51 	.word	0x08013b51
 8013a40:	08013b51 	.word	0x08013b51
 8013a44:	08013b51 	.word	0x08013b51
 8013a48:	08013b0f 	.word	0x08013b0f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8013a4c:	68fb      	ldr	r3, [r7, #12]
 8013a4e:	681b      	ldr	r3, [r3, #0]
 8013a50:	68b9      	ldr	r1, [r7, #8]
 8013a52:	4618      	mov	r0, r3
 8013a54:	f000 fa18 	bl	8013e88 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8013a58:	68fb      	ldr	r3, [r7, #12]
 8013a5a:	681b      	ldr	r3, [r3, #0]
 8013a5c:	699a      	ldr	r2, [r3, #24]
 8013a5e:	68fb      	ldr	r3, [r7, #12]
 8013a60:	681b      	ldr	r3, [r3, #0]
 8013a62:	f042 0208 	orr.w	r2, r2, #8
 8013a66:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8013a68:	68fb      	ldr	r3, [r7, #12]
 8013a6a:	681b      	ldr	r3, [r3, #0]
 8013a6c:	699a      	ldr	r2, [r3, #24]
 8013a6e:	68fb      	ldr	r3, [r7, #12]
 8013a70:	681b      	ldr	r3, [r3, #0]
 8013a72:	f022 0204 	bic.w	r2, r2, #4
 8013a76:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8013a78:	68fb      	ldr	r3, [r7, #12]
 8013a7a:	681b      	ldr	r3, [r3, #0]
 8013a7c:	6999      	ldr	r1, [r3, #24]
 8013a7e:	68bb      	ldr	r3, [r7, #8]
 8013a80:	691a      	ldr	r2, [r3, #16]
 8013a82:	68fb      	ldr	r3, [r7, #12]
 8013a84:	681b      	ldr	r3, [r3, #0]
 8013a86:	430a      	orrs	r2, r1
 8013a88:	619a      	str	r2, [r3, #24]
      break;
 8013a8a:	e064      	b.n	8013b56 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8013a8c:	68fb      	ldr	r3, [r7, #12]
 8013a8e:	681b      	ldr	r3, [r3, #0]
 8013a90:	68b9      	ldr	r1, [r7, #8]
 8013a92:	4618      	mov	r0, r3
 8013a94:	f000 fa68 	bl	8013f68 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8013a98:	68fb      	ldr	r3, [r7, #12]
 8013a9a:	681b      	ldr	r3, [r3, #0]
 8013a9c:	699a      	ldr	r2, [r3, #24]
 8013a9e:	68fb      	ldr	r3, [r7, #12]
 8013aa0:	681b      	ldr	r3, [r3, #0]
 8013aa2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8013aa6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8013aa8:	68fb      	ldr	r3, [r7, #12]
 8013aaa:	681b      	ldr	r3, [r3, #0]
 8013aac:	699a      	ldr	r2, [r3, #24]
 8013aae:	68fb      	ldr	r3, [r7, #12]
 8013ab0:	681b      	ldr	r3, [r3, #0]
 8013ab2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8013ab6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8013ab8:	68fb      	ldr	r3, [r7, #12]
 8013aba:	681b      	ldr	r3, [r3, #0]
 8013abc:	6999      	ldr	r1, [r3, #24]
 8013abe:	68bb      	ldr	r3, [r7, #8]
 8013ac0:	691b      	ldr	r3, [r3, #16]
 8013ac2:	021a      	lsls	r2, r3, #8
 8013ac4:	68fb      	ldr	r3, [r7, #12]
 8013ac6:	681b      	ldr	r3, [r3, #0]
 8013ac8:	430a      	orrs	r2, r1
 8013aca:	619a      	str	r2, [r3, #24]
      break;
 8013acc:	e043      	b.n	8013b56 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8013ace:	68fb      	ldr	r3, [r7, #12]
 8013ad0:	681b      	ldr	r3, [r3, #0]
 8013ad2:	68b9      	ldr	r1, [r7, #8]
 8013ad4:	4618      	mov	r0, r3
 8013ad6:	f000 fabd 	bl	8014054 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8013ada:	68fb      	ldr	r3, [r7, #12]
 8013adc:	681b      	ldr	r3, [r3, #0]
 8013ade:	69da      	ldr	r2, [r3, #28]
 8013ae0:	68fb      	ldr	r3, [r7, #12]
 8013ae2:	681b      	ldr	r3, [r3, #0]
 8013ae4:	f042 0208 	orr.w	r2, r2, #8
 8013ae8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8013aea:	68fb      	ldr	r3, [r7, #12]
 8013aec:	681b      	ldr	r3, [r3, #0]
 8013aee:	69da      	ldr	r2, [r3, #28]
 8013af0:	68fb      	ldr	r3, [r7, #12]
 8013af2:	681b      	ldr	r3, [r3, #0]
 8013af4:	f022 0204 	bic.w	r2, r2, #4
 8013af8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8013afa:	68fb      	ldr	r3, [r7, #12]
 8013afc:	681b      	ldr	r3, [r3, #0]
 8013afe:	69d9      	ldr	r1, [r3, #28]
 8013b00:	68bb      	ldr	r3, [r7, #8]
 8013b02:	691a      	ldr	r2, [r3, #16]
 8013b04:	68fb      	ldr	r3, [r7, #12]
 8013b06:	681b      	ldr	r3, [r3, #0]
 8013b08:	430a      	orrs	r2, r1
 8013b0a:	61da      	str	r2, [r3, #28]
      break;
 8013b0c:	e023      	b.n	8013b56 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8013b0e:	68fb      	ldr	r3, [r7, #12]
 8013b10:	681b      	ldr	r3, [r3, #0]
 8013b12:	68b9      	ldr	r1, [r7, #8]
 8013b14:	4618      	mov	r0, r3
 8013b16:	f000 fb11 	bl	801413c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8013b1a:	68fb      	ldr	r3, [r7, #12]
 8013b1c:	681b      	ldr	r3, [r3, #0]
 8013b1e:	69da      	ldr	r2, [r3, #28]
 8013b20:	68fb      	ldr	r3, [r7, #12]
 8013b22:	681b      	ldr	r3, [r3, #0]
 8013b24:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8013b28:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8013b2a:	68fb      	ldr	r3, [r7, #12]
 8013b2c:	681b      	ldr	r3, [r3, #0]
 8013b2e:	69da      	ldr	r2, [r3, #28]
 8013b30:	68fb      	ldr	r3, [r7, #12]
 8013b32:	681b      	ldr	r3, [r3, #0]
 8013b34:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8013b38:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8013b3a:	68fb      	ldr	r3, [r7, #12]
 8013b3c:	681b      	ldr	r3, [r3, #0]
 8013b3e:	69d9      	ldr	r1, [r3, #28]
 8013b40:	68bb      	ldr	r3, [r7, #8]
 8013b42:	691b      	ldr	r3, [r3, #16]
 8013b44:	021a      	lsls	r2, r3, #8
 8013b46:	68fb      	ldr	r3, [r7, #12]
 8013b48:	681b      	ldr	r3, [r3, #0]
 8013b4a:	430a      	orrs	r2, r1
 8013b4c:	61da      	str	r2, [r3, #28]
      break;
 8013b4e:	e002      	b.n	8013b56 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8013b50:	2301      	movs	r3, #1
 8013b52:	75fb      	strb	r3, [r7, #23]
      break;
 8013b54:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8013b56:	68fb      	ldr	r3, [r7, #12]
 8013b58:	2200      	movs	r2, #0
 8013b5a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8013b5e:	7dfb      	ldrb	r3, [r7, #23]
}
 8013b60:	4618      	mov	r0, r3
 8013b62:	3718      	adds	r7, #24
 8013b64:	46bd      	mov	sp, r7
 8013b66:	bd80      	pop	{r7, pc}

08013b68 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8013b68:	b580      	push	{r7, lr}
 8013b6a:	b084      	sub	sp, #16
 8013b6c:	af00      	add	r7, sp, #0
 8013b6e:	6078      	str	r0, [r7, #4]
 8013b70:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8013b72:	2300      	movs	r3, #0
 8013b74:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8013b76:	687b      	ldr	r3, [r7, #4]
 8013b78:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8013b7c:	2b01      	cmp	r3, #1
 8013b7e:	d101      	bne.n	8013b84 <HAL_TIM_ConfigClockSource+0x1c>
 8013b80:	2302      	movs	r3, #2
 8013b82:	e0b4      	b.n	8013cee <HAL_TIM_ConfigClockSource+0x186>
 8013b84:	687b      	ldr	r3, [r7, #4]
 8013b86:	2201      	movs	r2, #1
 8013b88:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8013b8c:	687b      	ldr	r3, [r7, #4]
 8013b8e:	2202      	movs	r2, #2
 8013b90:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8013b94:	687b      	ldr	r3, [r7, #4]
 8013b96:	681b      	ldr	r3, [r3, #0]
 8013b98:	689b      	ldr	r3, [r3, #8]
 8013b9a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8013b9c:	68bb      	ldr	r3, [r7, #8]
 8013b9e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8013ba2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8013ba4:	68bb      	ldr	r3, [r7, #8]
 8013ba6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8013baa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8013bac:	687b      	ldr	r3, [r7, #4]
 8013bae:	681b      	ldr	r3, [r3, #0]
 8013bb0:	68ba      	ldr	r2, [r7, #8]
 8013bb2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8013bb4:	683b      	ldr	r3, [r7, #0]
 8013bb6:	681b      	ldr	r3, [r3, #0]
 8013bb8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8013bbc:	d03e      	beq.n	8013c3c <HAL_TIM_ConfigClockSource+0xd4>
 8013bbe:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8013bc2:	f200 8087 	bhi.w	8013cd4 <HAL_TIM_ConfigClockSource+0x16c>
 8013bc6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8013bca:	f000 8086 	beq.w	8013cda <HAL_TIM_ConfigClockSource+0x172>
 8013bce:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8013bd2:	d87f      	bhi.n	8013cd4 <HAL_TIM_ConfigClockSource+0x16c>
 8013bd4:	2b70      	cmp	r3, #112	@ 0x70
 8013bd6:	d01a      	beq.n	8013c0e <HAL_TIM_ConfigClockSource+0xa6>
 8013bd8:	2b70      	cmp	r3, #112	@ 0x70
 8013bda:	d87b      	bhi.n	8013cd4 <HAL_TIM_ConfigClockSource+0x16c>
 8013bdc:	2b60      	cmp	r3, #96	@ 0x60
 8013bde:	d050      	beq.n	8013c82 <HAL_TIM_ConfigClockSource+0x11a>
 8013be0:	2b60      	cmp	r3, #96	@ 0x60
 8013be2:	d877      	bhi.n	8013cd4 <HAL_TIM_ConfigClockSource+0x16c>
 8013be4:	2b50      	cmp	r3, #80	@ 0x50
 8013be6:	d03c      	beq.n	8013c62 <HAL_TIM_ConfigClockSource+0xfa>
 8013be8:	2b50      	cmp	r3, #80	@ 0x50
 8013bea:	d873      	bhi.n	8013cd4 <HAL_TIM_ConfigClockSource+0x16c>
 8013bec:	2b40      	cmp	r3, #64	@ 0x40
 8013bee:	d058      	beq.n	8013ca2 <HAL_TIM_ConfigClockSource+0x13a>
 8013bf0:	2b40      	cmp	r3, #64	@ 0x40
 8013bf2:	d86f      	bhi.n	8013cd4 <HAL_TIM_ConfigClockSource+0x16c>
 8013bf4:	2b30      	cmp	r3, #48	@ 0x30
 8013bf6:	d064      	beq.n	8013cc2 <HAL_TIM_ConfigClockSource+0x15a>
 8013bf8:	2b30      	cmp	r3, #48	@ 0x30
 8013bfa:	d86b      	bhi.n	8013cd4 <HAL_TIM_ConfigClockSource+0x16c>
 8013bfc:	2b20      	cmp	r3, #32
 8013bfe:	d060      	beq.n	8013cc2 <HAL_TIM_ConfigClockSource+0x15a>
 8013c00:	2b20      	cmp	r3, #32
 8013c02:	d867      	bhi.n	8013cd4 <HAL_TIM_ConfigClockSource+0x16c>
 8013c04:	2b00      	cmp	r3, #0
 8013c06:	d05c      	beq.n	8013cc2 <HAL_TIM_ConfigClockSource+0x15a>
 8013c08:	2b10      	cmp	r3, #16
 8013c0a:	d05a      	beq.n	8013cc2 <HAL_TIM_ConfigClockSource+0x15a>
 8013c0c:	e062      	b.n	8013cd4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8013c0e:	687b      	ldr	r3, [r7, #4]
 8013c10:	6818      	ldr	r0, [r3, #0]
 8013c12:	683b      	ldr	r3, [r7, #0]
 8013c14:	6899      	ldr	r1, [r3, #8]
 8013c16:	683b      	ldr	r3, [r7, #0]
 8013c18:	685a      	ldr	r2, [r3, #4]
 8013c1a:	683b      	ldr	r3, [r7, #0]
 8013c1c:	68db      	ldr	r3, [r3, #12]
 8013c1e:	f000 fb5d 	bl	80142dc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8013c22:	687b      	ldr	r3, [r7, #4]
 8013c24:	681b      	ldr	r3, [r3, #0]
 8013c26:	689b      	ldr	r3, [r3, #8]
 8013c28:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8013c2a:	68bb      	ldr	r3, [r7, #8]
 8013c2c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8013c30:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8013c32:	687b      	ldr	r3, [r7, #4]
 8013c34:	681b      	ldr	r3, [r3, #0]
 8013c36:	68ba      	ldr	r2, [r7, #8]
 8013c38:	609a      	str	r2, [r3, #8]
      break;
 8013c3a:	e04f      	b.n	8013cdc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8013c3c:	687b      	ldr	r3, [r7, #4]
 8013c3e:	6818      	ldr	r0, [r3, #0]
 8013c40:	683b      	ldr	r3, [r7, #0]
 8013c42:	6899      	ldr	r1, [r3, #8]
 8013c44:	683b      	ldr	r3, [r7, #0]
 8013c46:	685a      	ldr	r2, [r3, #4]
 8013c48:	683b      	ldr	r3, [r7, #0]
 8013c4a:	68db      	ldr	r3, [r3, #12]
 8013c4c:	f000 fb46 	bl	80142dc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8013c50:	687b      	ldr	r3, [r7, #4]
 8013c52:	681b      	ldr	r3, [r3, #0]
 8013c54:	689a      	ldr	r2, [r3, #8]
 8013c56:	687b      	ldr	r3, [r7, #4]
 8013c58:	681b      	ldr	r3, [r3, #0]
 8013c5a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8013c5e:	609a      	str	r2, [r3, #8]
      break;
 8013c60:	e03c      	b.n	8013cdc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8013c62:	687b      	ldr	r3, [r7, #4]
 8013c64:	6818      	ldr	r0, [r3, #0]
 8013c66:	683b      	ldr	r3, [r7, #0]
 8013c68:	6859      	ldr	r1, [r3, #4]
 8013c6a:	683b      	ldr	r3, [r7, #0]
 8013c6c:	68db      	ldr	r3, [r3, #12]
 8013c6e:	461a      	mov	r2, r3
 8013c70:	f000 faba 	bl	80141e8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8013c74:	687b      	ldr	r3, [r7, #4]
 8013c76:	681b      	ldr	r3, [r3, #0]
 8013c78:	2150      	movs	r1, #80	@ 0x50
 8013c7a:	4618      	mov	r0, r3
 8013c7c:	f000 fb13 	bl	80142a6 <TIM_ITRx_SetConfig>
      break;
 8013c80:	e02c      	b.n	8013cdc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8013c82:	687b      	ldr	r3, [r7, #4]
 8013c84:	6818      	ldr	r0, [r3, #0]
 8013c86:	683b      	ldr	r3, [r7, #0]
 8013c88:	6859      	ldr	r1, [r3, #4]
 8013c8a:	683b      	ldr	r3, [r7, #0]
 8013c8c:	68db      	ldr	r3, [r3, #12]
 8013c8e:	461a      	mov	r2, r3
 8013c90:	f000 fad9 	bl	8014246 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8013c94:	687b      	ldr	r3, [r7, #4]
 8013c96:	681b      	ldr	r3, [r3, #0]
 8013c98:	2160      	movs	r1, #96	@ 0x60
 8013c9a:	4618      	mov	r0, r3
 8013c9c:	f000 fb03 	bl	80142a6 <TIM_ITRx_SetConfig>
      break;
 8013ca0:	e01c      	b.n	8013cdc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8013ca2:	687b      	ldr	r3, [r7, #4]
 8013ca4:	6818      	ldr	r0, [r3, #0]
 8013ca6:	683b      	ldr	r3, [r7, #0]
 8013ca8:	6859      	ldr	r1, [r3, #4]
 8013caa:	683b      	ldr	r3, [r7, #0]
 8013cac:	68db      	ldr	r3, [r3, #12]
 8013cae:	461a      	mov	r2, r3
 8013cb0:	f000 fa9a 	bl	80141e8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8013cb4:	687b      	ldr	r3, [r7, #4]
 8013cb6:	681b      	ldr	r3, [r3, #0]
 8013cb8:	2140      	movs	r1, #64	@ 0x40
 8013cba:	4618      	mov	r0, r3
 8013cbc:	f000 faf3 	bl	80142a6 <TIM_ITRx_SetConfig>
      break;
 8013cc0:	e00c      	b.n	8013cdc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8013cc2:	687b      	ldr	r3, [r7, #4]
 8013cc4:	681a      	ldr	r2, [r3, #0]
 8013cc6:	683b      	ldr	r3, [r7, #0]
 8013cc8:	681b      	ldr	r3, [r3, #0]
 8013cca:	4619      	mov	r1, r3
 8013ccc:	4610      	mov	r0, r2
 8013cce:	f000 faea 	bl	80142a6 <TIM_ITRx_SetConfig>
      break;
 8013cd2:	e003      	b.n	8013cdc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8013cd4:	2301      	movs	r3, #1
 8013cd6:	73fb      	strb	r3, [r7, #15]
      break;
 8013cd8:	e000      	b.n	8013cdc <HAL_TIM_ConfigClockSource+0x174>
      break;
 8013cda:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8013cdc:	687b      	ldr	r3, [r7, #4]
 8013cde:	2201      	movs	r2, #1
 8013ce0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8013ce4:	687b      	ldr	r3, [r7, #4]
 8013ce6:	2200      	movs	r2, #0
 8013ce8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8013cec:	7bfb      	ldrb	r3, [r7, #15]
}
 8013cee:	4618      	mov	r0, r3
 8013cf0:	3710      	adds	r7, #16
 8013cf2:	46bd      	mov	sp, r7
 8013cf4:	bd80      	pop	{r7, pc}

08013cf6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8013cf6:	b480      	push	{r7}
 8013cf8:	b083      	sub	sp, #12
 8013cfa:	af00      	add	r7, sp, #0
 8013cfc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8013cfe:	bf00      	nop
 8013d00:	370c      	adds	r7, #12
 8013d02:	46bd      	mov	sp, r7
 8013d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d08:	4770      	bx	lr

08013d0a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8013d0a:	b480      	push	{r7}
 8013d0c:	b083      	sub	sp, #12
 8013d0e:	af00      	add	r7, sp, #0
 8013d10:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8013d12:	bf00      	nop
 8013d14:	370c      	adds	r7, #12
 8013d16:	46bd      	mov	sp, r7
 8013d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d1c:	4770      	bx	lr

08013d1e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8013d1e:	b480      	push	{r7}
 8013d20:	b083      	sub	sp, #12
 8013d22:	af00      	add	r7, sp, #0
 8013d24:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8013d26:	bf00      	nop
 8013d28:	370c      	adds	r7, #12
 8013d2a:	46bd      	mov	sp, r7
 8013d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d30:	4770      	bx	lr

08013d32 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8013d32:	b480      	push	{r7}
 8013d34:	b083      	sub	sp, #12
 8013d36:	af00      	add	r7, sp, #0
 8013d38:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8013d3a:	bf00      	nop
 8013d3c:	370c      	adds	r7, #12
 8013d3e:	46bd      	mov	sp, r7
 8013d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d44:	4770      	bx	lr
	...

08013d48 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8013d48:	b480      	push	{r7}
 8013d4a:	b085      	sub	sp, #20
 8013d4c:	af00      	add	r7, sp, #0
 8013d4e:	6078      	str	r0, [r7, #4]
 8013d50:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8013d52:	687b      	ldr	r3, [r7, #4]
 8013d54:	681b      	ldr	r3, [r3, #0]
 8013d56:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8013d58:	687b      	ldr	r3, [r7, #4]
 8013d5a:	4a40      	ldr	r2, [pc, #256]	@ (8013e5c <TIM_Base_SetConfig+0x114>)
 8013d5c:	4293      	cmp	r3, r2
 8013d5e:	d013      	beq.n	8013d88 <TIM_Base_SetConfig+0x40>
 8013d60:	687b      	ldr	r3, [r7, #4]
 8013d62:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8013d66:	d00f      	beq.n	8013d88 <TIM_Base_SetConfig+0x40>
 8013d68:	687b      	ldr	r3, [r7, #4]
 8013d6a:	4a3d      	ldr	r2, [pc, #244]	@ (8013e60 <TIM_Base_SetConfig+0x118>)
 8013d6c:	4293      	cmp	r3, r2
 8013d6e:	d00b      	beq.n	8013d88 <TIM_Base_SetConfig+0x40>
 8013d70:	687b      	ldr	r3, [r7, #4]
 8013d72:	4a3c      	ldr	r2, [pc, #240]	@ (8013e64 <TIM_Base_SetConfig+0x11c>)
 8013d74:	4293      	cmp	r3, r2
 8013d76:	d007      	beq.n	8013d88 <TIM_Base_SetConfig+0x40>
 8013d78:	687b      	ldr	r3, [r7, #4]
 8013d7a:	4a3b      	ldr	r2, [pc, #236]	@ (8013e68 <TIM_Base_SetConfig+0x120>)
 8013d7c:	4293      	cmp	r3, r2
 8013d7e:	d003      	beq.n	8013d88 <TIM_Base_SetConfig+0x40>
 8013d80:	687b      	ldr	r3, [r7, #4]
 8013d82:	4a3a      	ldr	r2, [pc, #232]	@ (8013e6c <TIM_Base_SetConfig+0x124>)
 8013d84:	4293      	cmp	r3, r2
 8013d86:	d108      	bne.n	8013d9a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8013d88:	68fb      	ldr	r3, [r7, #12]
 8013d8a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8013d8e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8013d90:	683b      	ldr	r3, [r7, #0]
 8013d92:	685b      	ldr	r3, [r3, #4]
 8013d94:	68fa      	ldr	r2, [r7, #12]
 8013d96:	4313      	orrs	r3, r2
 8013d98:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8013d9a:	687b      	ldr	r3, [r7, #4]
 8013d9c:	4a2f      	ldr	r2, [pc, #188]	@ (8013e5c <TIM_Base_SetConfig+0x114>)
 8013d9e:	4293      	cmp	r3, r2
 8013da0:	d02b      	beq.n	8013dfa <TIM_Base_SetConfig+0xb2>
 8013da2:	687b      	ldr	r3, [r7, #4]
 8013da4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8013da8:	d027      	beq.n	8013dfa <TIM_Base_SetConfig+0xb2>
 8013daa:	687b      	ldr	r3, [r7, #4]
 8013dac:	4a2c      	ldr	r2, [pc, #176]	@ (8013e60 <TIM_Base_SetConfig+0x118>)
 8013dae:	4293      	cmp	r3, r2
 8013db0:	d023      	beq.n	8013dfa <TIM_Base_SetConfig+0xb2>
 8013db2:	687b      	ldr	r3, [r7, #4]
 8013db4:	4a2b      	ldr	r2, [pc, #172]	@ (8013e64 <TIM_Base_SetConfig+0x11c>)
 8013db6:	4293      	cmp	r3, r2
 8013db8:	d01f      	beq.n	8013dfa <TIM_Base_SetConfig+0xb2>
 8013dba:	687b      	ldr	r3, [r7, #4]
 8013dbc:	4a2a      	ldr	r2, [pc, #168]	@ (8013e68 <TIM_Base_SetConfig+0x120>)
 8013dbe:	4293      	cmp	r3, r2
 8013dc0:	d01b      	beq.n	8013dfa <TIM_Base_SetConfig+0xb2>
 8013dc2:	687b      	ldr	r3, [r7, #4]
 8013dc4:	4a29      	ldr	r2, [pc, #164]	@ (8013e6c <TIM_Base_SetConfig+0x124>)
 8013dc6:	4293      	cmp	r3, r2
 8013dc8:	d017      	beq.n	8013dfa <TIM_Base_SetConfig+0xb2>
 8013dca:	687b      	ldr	r3, [r7, #4]
 8013dcc:	4a28      	ldr	r2, [pc, #160]	@ (8013e70 <TIM_Base_SetConfig+0x128>)
 8013dce:	4293      	cmp	r3, r2
 8013dd0:	d013      	beq.n	8013dfa <TIM_Base_SetConfig+0xb2>
 8013dd2:	687b      	ldr	r3, [r7, #4]
 8013dd4:	4a27      	ldr	r2, [pc, #156]	@ (8013e74 <TIM_Base_SetConfig+0x12c>)
 8013dd6:	4293      	cmp	r3, r2
 8013dd8:	d00f      	beq.n	8013dfa <TIM_Base_SetConfig+0xb2>
 8013dda:	687b      	ldr	r3, [r7, #4]
 8013ddc:	4a26      	ldr	r2, [pc, #152]	@ (8013e78 <TIM_Base_SetConfig+0x130>)
 8013dde:	4293      	cmp	r3, r2
 8013de0:	d00b      	beq.n	8013dfa <TIM_Base_SetConfig+0xb2>
 8013de2:	687b      	ldr	r3, [r7, #4]
 8013de4:	4a25      	ldr	r2, [pc, #148]	@ (8013e7c <TIM_Base_SetConfig+0x134>)
 8013de6:	4293      	cmp	r3, r2
 8013de8:	d007      	beq.n	8013dfa <TIM_Base_SetConfig+0xb2>
 8013dea:	687b      	ldr	r3, [r7, #4]
 8013dec:	4a24      	ldr	r2, [pc, #144]	@ (8013e80 <TIM_Base_SetConfig+0x138>)
 8013dee:	4293      	cmp	r3, r2
 8013df0:	d003      	beq.n	8013dfa <TIM_Base_SetConfig+0xb2>
 8013df2:	687b      	ldr	r3, [r7, #4]
 8013df4:	4a23      	ldr	r2, [pc, #140]	@ (8013e84 <TIM_Base_SetConfig+0x13c>)
 8013df6:	4293      	cmp	r3, r2
 8013df8:	d108      	bne.n	8013e0c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8013dfa:	68fb      	ldr	r3, [r7, #12]
 8013dfc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8013e00:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8013e02:	683b      	ldr	r3, [r7, #0]
 8013e04:	68db      	ldr	r3, [r3, #12]
 8013e06:	68fa      	ldr	r2, [r7, #12]
 8013e08:	4313      	orrs	r3, r2
 8013e0a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8013e0c:	68fb      	ldr	r3, [r7, #12]
 8013e0e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8013e12:	683b      	ldr	r3, [r7, #0]
 8013e14:	695b      	ldr	r3, [r3, #20]
 8013e16:	4313      	orrs	r3, r2
 8013e18:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8013e1a:	687b      	ldr	r3, [r7, #4]
 8013e1c:	68fa      	ldr	r2, [r7, #12]
 8013e1e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8013e20:	683b      	ldr	r3, [r7, #0]
 8013e22:	689a      	ldr	r2, [r3, #8]
 8013e24:	687b      	ldr	r3, [r7, #4]
 8013e26:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8013e28:	683b      	ldr	r3, [r7, #0]
 8013e2a:	681a      	ldr	r2, [r3, #0]
 8013e2c:	687b      	ldr	r3, [r7, #4]
 8013e2e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8013e30:	687b      	ldr	r3, [r7, #4]
 8013e32:	4a0a      	ldr	r2, [pc, #40]	@ (8013e5c <TIM_Base_SetConfig+0x114>)
 8013e34:	4293      	cmp	r3, r2
 8013e36:	d003      	beq.n	8013e40 <TIM_Base_SetConfig+0xf8>
 8013e38:	687b      	ldr	r3, [r7, #4]
 8013e3a:	4a0c      	ldr	r2, [pc, #48]	@ (8013e6c <TIM_Base_SetConfig+0x124>)
 8013e3c:	4293      	cmp	r3, r2
 8013e3e:	d103      	bne.n	8013e48 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8013e40:	683b      	ldr	r3, [r7, #0]
 8013e42:	691a      	ldr	r2, [r3, #16]
 8013e44:	687b      	ldr	r3, [r7, #4]
 8013e46:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8013e48:	687b      	ldr	r3, [r7, #4]
 8013e4a:	2201      	movs	r2, #1
 8013e4c:	615a      	str	r2, [r3, #20]
}
 8013e4e:	bf00      	nop
 8013e50:	3714      	adds	r7, #20
 8013e52:	46bd      	mov	sp, r7
 8013e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e58:	4770      	bx	lr
 8013e5a:	bf00      	nop
 8013e5c:	40010000 	.word	0x40010000
 8013e60:	40000400 	.word	0x40000400
 8013e64:	40000800 	.word	0x40000800
 8013e68:	40000c00 	.word	0x40000c00
 8013e6c:	40010400 	.word	0x40010400
 8013e70:	40014000 	.word	0x40014000
 8013e74:	40014400 	.word	0x40014400
 8013e78:	40014800 	.word	0x40014800
 8013e7c:	40001800 	.word	0x40001800
 8013e80:	40001c00 	.word	0x40001c00
 8013e84:	40002000 	.word	0x40002000

08013e88 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8013e88:	b480      	push	{r7}
 8013e8a:	b087      	sub	sp, #28
 8013e8c:	af00      	add	r7, sp, #0
 8013e8e:	6078      	str	r0, [r7, #4]
 8013e90:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8013e92:	687b      	ldr	r3, [r7, #4]
 8013e94:	6a1b      	ldr	r3, [r3, #32]
 8013e96:	f023 0201 	bic.w	r2, r3, #1
 8013e9a:	687b      	ldr	r3, [r7, #4]
 8013e9c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8013e9e:	687b      	ldr	r3, [r7, #4]
 8013ea0:	6a1b      	ldr	r3, [r3, #32]
 8013ea2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8013ea4:	687b      	ldr	r3, [r7, #4]
 8013ea6:	685b      	ldr	r3, [r3, #4]
 8013ea8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8013eaa:	687b      	ldr	r3, [r7, #4]
 8013eac:	699b      	ldr	r3, [r3, #24]
 8013eae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8013eb0:	68fb      	ldr	r3, [r7, #12]
 8013eb2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8013eb6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8013eb8:	68fb      	ldr	r3, [r7, #12]
 8013eba:	f023 0303 	bic.w	r3, r3, #3
 8013ebe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8013ec0:	683b      	ldr	r3, [r7, #0]
 8013ec2:	681b      	ldr	r3, [r3, #0]
 8013ec4:	68fa      	ldr	r2, [r7, #12]
 8013ec6:	4313      	orrs	r3, r2
 8013ec8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8013eca:	697b      	ldr	r3, [r7, #20]
 8013ecc:	f023 0302 	bic.w	r3, r3, #2
 8013ed0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8013ed2:	683b      	ldr	r3, [r7, #0]
 8013ed4:	689b      	ldr	r3, [r3, #8]
 8013ed6:	697a      	ldr	r2, [r7, #20]
 8013ed8:	4313      	orrs	r3, r2
 8013eda:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8013edc:	687b      	ldr	r3, [r7, #4]
 8013ede:	4a20      	ldr	r2, [pc, #128]	@ (8013f60 <TIM_OC1_SetConfig+0xd8>)
 8013ee0:	4293      	cmp	r3, r2
 8013ee2:	d003      	beq.n	8013eec <TIM_OC1_SetConfig+0x64>
 8013ee4:	687b      	ldr	r3, [r7, #4]
 8013ee6:	4a1f      	ldr	r2, [pc, #124]	@ (8013f64 <TIM_OC1_SetConfig+0xdc>)
 8013ee8:	4293      	cmp	r3, r2
 8013eea:	d10c      	bne.n	8013f06 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8013eec:	697b      	ldr	r3, [r7, #20]
 8013eee:	f023 0308 	bic.w	r3, r3, #8
 8013ef2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8013ef4:	683b      	ldr	r3, [r7, #0]
 8013ef6:	68db      	ldr	r3, [r3, #12]
 8013ef8:	697a      	ldr	r2, [r7, #20]
 8013efa:	4313      	orrs	r3, r2
 8013efc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8013efe:	697b      	ldr	r3, [r7, #20]
 8013f00:	f023 0304 	bic.w	r3, r3, #4
 8013f04:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8013f06:	687b      	ldr	r3, [r7, #4]
 8013f08:	4a15      	ldr	r2, [pc, #84]	@ (8013f60 <TIM_OC1_SetConfig+0xd8>)
 8013f0a:	4293      	cmp	r3, r2
 8013f0c:	d003      	beq.n	8013f16 <TIM_OC1_SetConfig+0x8e>
 8013f0e:	687b      	ldr	r3, [r7, #4]
 8013f10:	4a14      	ldr	r2, [pc, #80]	@ (8013f64 <TIM_OC1_SetConfig+0xdc>)
 8013f12:	4293      	cmp	r3, r2
 8013f14:	d111      	bne.n	8013f3a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8013f16:	693b      	ldr	r3, [r7, #16]
 8013f18:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8013f1c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8013f1e:	693b      	ldr	r3, [r7, #16]
 8013f20:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8013f24:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8013f26:	683b      	ldr	r3, [r7, #0]
 8013f28:	695b      	ldr	r3, [r3, #20]
 8013f2a:	693a      	ldr	r2, [r7, #16]
 8013f2c:	4313      	orrs	r3, r2
 8013f2e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8013f30:	683b      	ldr	r3, [r7, #0]
 8013f32:	699b      	ldr	r3, [r3, #24]
 8013f34:	693a      	ldr	r2, [r7, #16]
 8013f36:	4313      	orrs	r3, r2
 8013f38:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8013f3a:	687b      	ldr	r3, [r7, #4]
 8013f3c:	693a      	ldr	r2, [r7, #16]
 8013f3e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8013f40:	687b      	ldr	r3, [r7, #4]
 8013f42:	68fa      	ldr	r2, [r7, #12]
 8013f44:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8013f46:	683b      	ldr	r3, [r7, #0]
 8013f48:	685a      	ldr	r2, [r3, #4]
 8013f4a:	687b      	ldr	r3, [r7, #4]
 8013f4c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8013f4e:	687b      	ldr	r3, [r7, #4]
 8013f50:	697a      	ldr	r2, [r7, #20]
 8013f52:	621a      	str	r2, [r3, #32]
}
 8013f54:	bf00      	nop
 8013f56:	371c      	adds	r7, #28
 8013f58:	46bd      	mov	sp, r7
 8013f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f5e:	4770      	bx	lr
 8013f60:	40010000 	.word	0x40010000
 8013f64:	40010400 	.word	0x40010400

08013f68 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8013f68:	b480      	push	{r7}
 8013f6a:	b087      	sub	sp, #28
 8013f6c:	af00      	add	r7, sp, #0
 8013f6e:	6078      	str	r0, [r7, #4]
 8013f70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8013f72:	687b      	ldr	r3, [r7, #4]
 8013f74:	6a1b      	ldr	r3, [r3, #32]
 8013f76:	f023 0210 	bic.w	r2, r3, #16
 8013f7a:	687b      	ldr	r3, [r7, #4]
 8013f7c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8013f7e:	687b      	ldr	r3, [r7, #4]
 8013f80:	6a1b      	ldr	r3, [r3, #32]
 8013f82:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8013f84:	687b      	ldr	r3, [r7, #4]
 8013f86:	685b      	ldr	r3, [r3, #4]
 8013f88:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8013f8a:	687b      	ldr	r3, [r7, #4]
 8013f8c:	699b      	ldr	r3, [r3, #24]
 8013f8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8013f90:	68fb      	ldr	r3, [r7, #12]
 8013f92:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8013f96:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8013f98:	68fb      	ldr	r3, [r7, #12]
 8013f9a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8013f9e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8013fa0:	683b      	ldr	r3, [r7, #0]
 8013fa2:	681b      	ldr	r3, [r3, #0]
 8013fa4:	021b      	lsls	r3, r3, #8
 8013fa6:	68fa      	ldr	r2, [r7, #12]
 8013fa8:	4313      	orrs	r3, r2
 8013faa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8013fac:	697b      	ldr	r3, [r7, #20]
 8013fae:	f023 0320 	bic.w	r3, r3, #32
 8013fb2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8013fb4:	683b      	ldr	r3, [r7, #0]
 8013fb6:	689b      	ldr	r3, [r3, #8]
 8013fb8:	011b      	lsls	r3, r3, #4
 8013fba:	697a      	ldr	r2, [r7, #20]
 8013fbc:	4313      	orrs	r3, r2
 8013fbe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8013fc0:	687b      	ldr	r3, [r7, #4]
 8013fc2:	4a22      	ldr	r2, [pc, #136]	@ (801404c <TIM_OC2_SetConfig+0xe4>)
 8013fc4:	4293      	cmp	r3, r2
 8013fc6:	d003      	beq.n	8013fd0 <TIM_OC2_SetConfig+0x68>
 8013fc8:	687b      	ldr	r3, [r7, #4]
 8013fca:	4a21      	ldr	r2, [pc, #132]	@ (8014050 <TIM_OC2_SetConfig+0xe8>)
 8013fcc:	4293      	cmp	r3, r2
 8013fce:	d10d      	bne.n	8013fec <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8013fd0:	697b      	ldr	r3, [r7, #20]
 8013fd2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8013fd6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8013fd8:	683b      	ldr	r3, [r7, #0]
 8013fda:	68db      	ldr	r3, [r3, #12]
 8013fdc:	011b      	lsls	r3, r3, #4
 8013fde:	697a      	ldr	r2, [r7, #20]
 8013fe0:	4313      	orrs	r3, r2
 8013fe2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8013fe4:	697b      	ldr	r3, [r7, #20]
 8013fe6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8013fea:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8013fec:	687b      	ldr	r3, [r7, #4]
 8013fee:	4a17      	ldr	r2, [pc, #92]	@ (801404c <TIM_OC2_SetConfig+0xe4>)
 8013ff0:	4293      	cmp	r3, r2
 8013ff2:	d003      	beq.n	8013ffc <TIM_OC2_SetConfig+0x94>
 8013ff4:	687b      	ldr	r3, [r7, #4]
 8013ff6:	4a16      	ldr	r2, [pc, #88]	@ (8014050 <TIM_OC2_SetConfig+0xe8>)
 8013ff8:	4293      	cmp	r3, r2
 8013ffa:	d113      	bne.n	8014024 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8013ffc:	693b      	ldr	r3, [r7, #16]
 8013ffe:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8014002:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8014004:	693b      	ldr	r3, [r7, #16]
 8014006:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 801400a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 801400c:	683b      	ldr	r3, [r7, #0]
 801400e:	695b      	ldr	r3, [r3, #20]
 8014010:	009b      	lsls	r3, r3, #2
 8014012:	693a      	ldr	r2, [r7, #16]
 8014014:	4313      	orrs	r3, r2
 8014016:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8014018:	683b      	ldr	r3, [r7, #0]
 801401a:	699b      	ldr	r3, [r3, #24]
 801401c:	009b      	lsls	r3, r3, #2
 801401e:	693a      	ldr	r2, [r7, #16]
 8014020:	4313      	orrs	r3, r2
 8014022:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8014024:	687b      	ldr	r3, [r7, #4]
 8014026:	693a      	ldr	r2, [r7, #16]
 8014028:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 801402a:	687b      	ldr	r3, [r7, #4]
 801402c:	68fa      	ldr	r2, [r7, #12]
 801402e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8014030:	683b      	ldr	r3, [r7, #0]
 8014032:	685a      	ldr	r2, [r3, #4]
 8014034:	687b      	ldr	r3, [r7, #4]
 8014036:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8014038:	687b      	ldr	r3, [r7, #4]
 801403a:	697a      	ldr	r2, [r7, #20]
 801403c:	621a      	str	r2, [r3, #32]
}
 801403e:	bf00      	nop
 8014040:	371c      	adds	r7, #28
 8014042:	46bd      	mov	sp, r7
 8014044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014048:	4770      	bx	lr
 801404a:	bf00      	nop
 801404c:	40010000 	.word	0x40010000
 8014050:	40010400 	.word	0x40010400

08014054 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8014054:	b480      	push	{r7}
 8014056:	b087      	sub	sp, #28
 8014058:	af00      	add	r7, sp, #0
 801405a:	6078      	str	r0, [r7, #4]
 801405c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 801405e:	687b      	ldr	r3, [r7, #4]
 8014060:	6a1b      	ldr	r3, [r3, #32]
 8014062:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8014066:	687b      	ldr	r3, [r7, #4]
 8014068:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801406a:	687b      	ldr	r3, [r7, #4]
 801406c:	6a1b      	ldr	r3, [r3, #32]
 801406e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8014070:	687b      	ldr	r3, [r7, #4]
 8014072:	685b      	ldr	r3, [r3, #4]
 8014074:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8014076:	687b      	ldr	r3, [r7, #4]
 8014078:	69db      	ldr	r3, [r3, #28]
 801407a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 801407c:	68fb      	ldr	r3, [r7, #12]
 801407e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8014082:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8014084:	68fb      	ldr	r3, [r7, #12]
 8014086:	f023 0303 	bic.w	r3, r3, #3
 801408a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 801408c:	683b      	ldr	r3, [r7, #0]
 801408e:	681b      	ldr	r3, [r3, #0]
 8014090:	68fa      	ldr	r2, [r7, #12]
 8014092:	4313      	orrs	r3, r2
 8014094:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8014096:	697b      	ldr	r3, [r7, #20]
 8014098:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 801409c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 801409e:	683b      	ldr	r3, [r7, #0]
 80140a0:	689b      	ldr	r3, [r3, #8]
 80140a2:	021b      	lsls	r3, r3, #8
 80140a4:	697a      	ldr	r2, [r7, #20]
 80140a6:	4313      	orrs	r3, r2
 80140a8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80140aa:	687b      	ldr	r3, [r7, #4]
 80140ac:	4a21      	ldr	r2, [pc, #132]	@ (8014134 <TIM_OC3_SetConfig+0xe0>)
 80140ae:	4293      	cmp	r3, r2
 80140b0:	d003      	beq.n	80140ba <TIM_OC3_SetConfig+0x66>
 80140b2:	687b      	ldr	r3, [r7, #4]
 80140b4:	4a20      	ldr	r2, [pc, #128]	@ (8014138 <TIM_OC3_SetConfig+0xe4>)
 80140b6:	4293      	cmp	r3, r2
 80140b8:	d10d      	bne.n	80140d6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80140ba:	697b      	ldr	r3, [r7, #20]
 80140bc:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80140c0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80140c2:	683b      	ldr	r3, [r7, #0]
 80140c4:	68db      	ldr	r3, [r3, #12]
 80140c6:	021b      	lsls	r3, r3, #8
 80140c8:	697a      	ldr	r2, [r7, #20]
 80140ca:	4313      	orrs	r3, r2
 80140cc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80140ce:	697b      	ldr	r3, [r7, #20]
 80140d0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80140d4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80140d6:	687b      	ldr	r3, [r7, #4]
 80140d8:	4a16      	ldr	r2, [pc, #88]	@ (8014134 <TIM_OC3_SetConfig+0xe0>)
 80140da:	4293      	cmp	r3, r2
 80140dc:	d003      	beq.n	80140e6 <TIM_OC3_SetConfig+0x92>
 80140de:	687b      	ldr	r3, [r7, #4]
 80140e0:	4a15      	ldr	r2, [pc, #84]	@ (8014138 <TIM_OC3_SetConfig+0xe4>)
 80140e2:	4293      	cmp	r3, r2
 80140e4:	d113      	bne.n	801410e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80140e6:	693b      	ldr	r3, [r7, #16]
 80140e8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80140ec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80140ee:	693b      	ldr	r3, [r7, #16]
 80140f0:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80140f4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80140f6:	683b      	ldr	r3, [r7, #0]
 80140f8:	695b      	ldr	r3, [r3, #20]
 80140fa:	011b      	lsls	r3, r3, #4
 80140fc:	693a      	ldr	r2, [r7, #16]
 80140fe:	4313      	orrs	r3, r2
 8014100:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8014102:	683b      	ldr	r3, [r7, #0]
 8014104:	699b      	ldr	r3, [r3, #24]
 8014106:	011b      	lsls	r3, r3, #4
 8014108:	693a      	ldr	r2, [r7, #16]
 801410a:	4313      	orrs	r3, r2
 801410c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801410e:	687b      	ldr	r3, [r7, #4]
 8014110:	693a      	ldr	r2, [r7, #16]
 8014112:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8014114:	687b      	ldr	r3, [r7, #4]
 8014116:	68fa      	ldr	r2, [r7, #12]
 8014118:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 801411a:	683b      	ldr	r3, [r7, #0]
 801411c:	685a      	ldr	r2, [r3, #4]
 801411e:	687b      	ldr	r3, [r7, #4]
 8014120:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8014122:	687b      	ldr	r3, [r7, #4]
 8014124:	697a      	ldr	r2, [r7, #20]
 8014126:	621a      	str	r2, [r3, #32]
}
 8014128:	bf00      	nop
 801412a:	371c      	adds	r7, #28
 801412c:	46bd      	mov	sp, r7
 801412e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014132:	4770      	bx	lr
 8014134:	40010000 	.word	0x40010000
 8014138:	40010400 	.word	0x40010400

0801413c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 801413c:	b480      	push	{r7}
 801413e:	b087      	sub	sp, #28
 8014140:	af00      	add	r7, sp, #0
 8014142:	6078      	str	r0, [r7, #4]
 8014144:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8014146:	687b      	ldr	r3, [r7, #4]
 8014148:	6a1b      	ldr	r3, [r3, #32]
 801414a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 801414e:	687b      	ldr	r3, [r7, #4]
 8014150:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8014152:	687b      	ldr	r3, [r7, #4]
 8014154:	6a1b      	ldr	r3, [r3, #32]
 8014156:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8014158:	687b      	ldr	r3, [r7, #4]
 801415a:	685b      	ldr	r3, [r3, #4]
 801415c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 801415e:	687b      	ldr	r3, [r7, #4]
 8014160:	69db      	ldr	r3, [r3, #28]
 8014162:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8014164:	68fb      	ldr	r3, [r7, #12]
 8014166:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 801416a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 801416c:	68fb      	ldr	r3, [r7, #12]
 801416e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8014172:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8014174:	683b      	ldr	r3, [r7, #0]
 8014176:	681b      	ldr	r3, [r3, #0]
 8014178:	021b      	lsls	r3, r3, #8
 801417a:	68fa      	ldr	r2, [r7, #12]
 801417c:	4313      	orrs	r3, r2
 801417e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8014180:	693b      	ldr	r3, [r7, #16]
 8014182:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8014186:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8014188:	683b      	ldr	r3, [r7, #0]
 801418a:	689b      	ldr	r3, [r3, #8]
 801418c:	031b      	lsls	r3, r3, #12
 801418e:	693a      	ldr	r2, [r7, #16]
 8014190:	4313      	orrs	r3, r2
 8014192:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8014194:	687b      	ldr	r3, [r7, #4]
 8014196:	4a12      	ldr	r2, [pc, #72]	@ (80141e0 <TIM_OC4_SetConfig+0xa4>)
 8014198:	4293      	cmp	r3, r2
 801419a:	d003      	beq.n	80141a4 <TIM_OC4_SetConfig+0x68>
 801419c:	687b      	ldr	r3, [r7, #4]
 801419e:	4a11      	ldr	r2, [pc, #68]	@ (80141e4 <TIM_OC4_SetConfig+0xa8>)
 80141a0:	4293      	cmp	r3, r2
 80141a2:	d109      	bne.n	80141b8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80141a4:	697b      	ldr	r3, [r7, #20]
 80141a6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80141aa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80141ac:	683b      	ldr	r3, [r7, #0]
 80141ae:	695b      	ldr	r3, [r3, #20]
 80141b0:	019b      	lsls	r3, r3, #6
 80141b2:	697a      	ldr	r2, [r7, #20]
 80141b4:	4313      	orrs	r3, r2
 80141b6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80141b8:	687b      	ldr	r3, [r7, #4]
 80141ba:	697a      	ldr	r2, [r7, #20]
 80141bc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80141be:	687b      	ldr	r3, [r7, #4]
 80141c0:	68fa      	ldr	r2, [r7, #12]
 80141c2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80141c4:	683b      	ldr	r3, [r7, #0]
 80141c6:	685a      	ldr	r2, [r3, #4]
 80141c8:	687b      	ldr	r3, [r7, #4]
 80141ca:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80141cc:	687b      	ldr	r3, [r7, #4]
 80141ce:	693a      	ldr	r2, [r7, #16]
 80141d0:	621a      	str	r2, [r3, #32]
}
 80141d2:	bf00      	nop
 80141d4:	371c      	adds	r7, #28
 80141d6:	46bd      	mov	sp, r7
 80141d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80141dc:	4770      	bx	lr
 80141de:	bf00      	nop
 80141e0:	40010000 	.word	0x40010000
 80141e4:	40010400 	.word	0x40010400

080141e8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80141e8:	b480      	push	{r7}
 80141ea:	b087      	sub	sp, #28
 80141ec:	af00      	add	r7, sp, #0
 80141ee:	60f8      	str	r0, [r7, #12]
 80141f0:	60b9      	str	r1, [r7, #8]
 80141f2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80141f4:	68fb      	ldr	r3, [r7, #12]
 80141f6:	6a1b      	ldr	r3, [r3, #32]
 80141f8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80141fa:	68fb      	ldr	r3, [r7, #12]
 80141fc:	6a1b      	ldr	r3, [r3, #32]
 80141fe:	f023 0201 	bic.w	r2, r3, #1
 8014202:	68fb      	ldr	r3, [r7, #12]
 8014204:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8014206:	68fb      	ldr	r3, [r7, #12]
 8014208:	699b      	ldr	r3, [r3, #24]
 801420a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 801420c:	693b      	ldr	r3, [r7, #16]
 801420e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8014212:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8014214:	687b      	ldr	r3, [r7, #4]
 8014216:	011b      	lsls	r3, r3, #4
 8014218:	693a      	ldr	r2, [r7, #16]
 801421a:	4313      	orrs	r3, r2
 801421c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 801421e:	697b      	ldr	r3, [r7, #20]
 8014220:	f023 030a 	bic.w	r3, r3, #10
 8014224:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8014226:	697a      	ldr	r2, [r7, #20]
 8014228:	68bb      	ldr	r3, [r7, #8]
 801422a:	4313      	orrs	r3, r2
 801422c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 801422e:	68fb      	ldr	r3, [r7, #12]
 8014230:	693a      	ldr	r2, [r7, #16]
 8014232:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8014234:	68fb      	ldr	r3, [r7, #12]
 8014236:	697a      	ldr	r2, [r7, #20]
 8014238:	621a      	str	r2, [r3, #32]
}
 801423a:	bf00      	nop
 801423c:	371c      	adds	r7, #28
 801423e:	46bd      	mov	sp, r7
 8014240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014244:	4770      	bx	lr

08014246 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8014246:	b480      	push	{r7}
 8014248:	b087      	sub	sp, #28
 801424a:	af00      	add	r7, sp, #0
 801424c:	60f8      	str	r0, [r7, #12]
 801424e:	60b9      	str	r1, [r7, #8]
 8014250:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8014252:	68fb      	ldr	r3, [r7, #12]
 8014254:	6a1b      	ldr	r3, [r3, #32]
 8014256:	f023 0210 	bic.w	r2, r3, #16
 801425a:	68fb      	ldr	r3, [r7, #12]
 801425c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 801425e:	68fb      	ldr	r3, [r7, #12]
 8014260:	699b      	ldr	r3, [r3, #24]
 8014262:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8014264:	68fb      	ldr	r3, [r7, #12]
 8014266:	6a1b      	ldr	r3, [r3, #32]
 8014268:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 801426a:	697b      	ldr	r3, [r7, #20]
 801426c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8014270:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8014272:	687b      	ldr	r3, [r7, #4]
 8014274:	031b      	lsls	r3, r3, #12
 8014276:	697a      	ldr	r2, [r7, #20]
 8014278:	4313      	orrs	r3, r2
 801427a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 801427c:	693b      	ldr	r3, [r7, #16]
 801427e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8014282:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8014284:	68bb      	ldr	r3, [r7, #8]
 8014286:	011b      	lsls	r3, r3, #4
 8014288:	693a      	ldr	r2, [r7, #16]
 801428a:	4313      	orrs	r3, r2
 801428c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 801428e:	68fb      	ldr	r3, [r7, #12]
 8014290:	697a      	ldr	r2, [r7, #20]
 8014292:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8014294:	68fb      	ldr	r3, [r7, #12]
 8014296:	693a      	ldr	r2, [r7, #16]
 8014298:	621a      	str	r2, [r3, #32]
}
 801429a:	bf00      	nop
 801429c:	371c      	adds	r7, #28
 801429e:	46bd      	mov	sp, r7
 80142a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80142a4:	4770      	bx	lr

080142a6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80142a6:	b480      	push	{r7}
 80142a8:	b085      	sub	sp, #20
 80142aa:	af00      	add	r7, sp, #0
 80142ac:	6078      	str	r0, [r7, #4]
 80142ae:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80142b0:	687b      	ldr	r3, [r7, #4]
 80142b2:	689b      	ldr	r3, [r3, #8]
 80142b4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80142b6:	68fb      	ldr	r3, [r7, #12]
 80142b8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80142bc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80142be:	683a      	ldr	r2, [r7, #0]
 80142c0:	68fb      	ldr	r3, [r7, #12]
 80142c2:	4313      	orrs	r3, r2
 80142c4:	f043 0307 	orr.w	r3, r3, #7
 80142c8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80142ca:	687b      	ldr	r3, [r7, #4]
 80142cc:	68fa      	ldr	r2, [r7, #12]
 80142ce:	609a      	str	r2, [r3, #8]
}
 80142d0:	bf00      	nop
 80142d2:	3714      	adds	r7, #20
 80142d4:	46bd      	mov	sp, r7
 80142d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80142da:	4770      	bx	lr

080142dc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80142dc:	b480      	push	{r7}
 80142de:	b087      	sub	sp, #28
 80142e0:	af00      	add	r7, sp, #0
 80142e2:	60f8      	str	r0, [r7, #12]
 80142e4:	60b9      	str	r1, [r7, #8]
 80142e6:	607a      	str	r2, [r7, #4]
 80142e8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80142ea:	68fb      	ldr	r3, [r7, #12]
 80142ec:	689b      	ldr	r3, [r3, #8]
 80142ee:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80142f0:	697b      	ldr	r3, [r7, #20]
 80142f2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80142f6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80142f8:	683b      	ldr	r3, [r7, #0]
 80142fa:	021a      	lsls	r2, r3, #8
 80142fc:	687b      	ldr	r3, [r7, #4]
 80142fe:	431a      	orrs	r2, r3
 8014300:	68bb      	ldr	r3, [r7, #8]
 8014302:	4313      	orrs	r3, r2
 8014304:	697a      	ldr	r2, [r7, #20]
 8014306:	4313      	orrs	r3, r2
 8014308:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 801430a:	68fb      	ldr	r3, [r7, #12]
 801430c:	697a      	ldr	r2, [r7, #20]
 801430e:	609a      	str	r2, [r3, #8]
}
 8014310:	bf00      	nop
 8014312:	371c      	adds	r7, #28
 8014314:	46bd      	mov	sp, r7
 8014316:	f85d 7b04 	ldr.w	r7, [sp], #4
 801431a:	4770      	bx	lr

0801431c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 801431c:	b480      	push	{r7}
 801431e:	b087      	sub	sp, #28
 8014320:	af00      	add	r7, sp, #0
 8014322:	60f8      	str	r0, [r7, #12]
 8014324:	60b9      	str	r1, [r7, #8]
 8014326:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8014328:	68bb      	ldr	r3, [r7, #8]
 801432a:	f003 031f 	and.w	r3, r3, #31
 801432e:	2201      	movs	r2, #1
 8014330:	fa02 f303 	lsl.w	r3, r2, r3
 8014334:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8014336:	68fb      	ldr	r3, [r7, #12]
 8014338:	6a1a      	ldr	r2, [r3, #32]
 801433a:	697b      	ldr	r3, [r7, #20]
 801433c:	43db      	mvns	r3, r3
 801433e:	401a      	ands	r2, r3
 8014340:	68fb      	ldr	r3, [r7, #12]
 8014342:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8014344:	68fb      	ldr	r3, [r7, #12]
 8014346:	6a1a      	ldr	r2, [r3, #32]
 8014348:	68bb      	ldr	r3, [r7, #8]
 801434a:	f003 031f 	and.w	r3, r3, #31
 801434e:	6879      	ldr	r1, [r7, #4]
 8014350:	fa01 f303 	lsl.w	r3, r1, r3
 8014354:	431a      	orrs	r2, r3
 8014356:	68fb      	ldr	r3, [r7, #12]
 8014358:	621a      	str	r2, [r3, #32]
}
 801435a:	bf00      	nop
 801435c:	371c      	adds	r7, #28
 801435e:	46bd      	mov	sp, r7
 8014360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014364:	4770      	bx	lr
	...

08014368 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8014368:	b480      	push	{r7}
 801436a:	b085      	sub	sp, #20
 801436c:	af00      	add	r7, sp, #0
 801436e:	6078      	str	r0, [r7, #4]
 8014370:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8014372:	687b      	ldr	r3, [r7, #4]
 8014374:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8014378:	2b01      	cmp	r3, #1
 801437a:	d101      	bne.n	8014380 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 801437c:	2302      	movs	r3, #2
 801437e:	e05a      	b.n	8014436 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8014380:	687b      	ldr	r3, [r7, #4]
 8014382:	2201      	movs	r2, #1
 8014384:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8014388:	687b      	ldr	r3, [r7, #4]
 801438a:	2202      	movs	r2, #2
 801438c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8014390:	687b      	ldr	r3, [r7, #4]
 8014392:	681b      	ldr	r3, [r3, #0]
 8014394:	685b      	ldr	r3, [r3, #4]
 8014396:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8014398:	687b      	ldr	r3, [r7, #4]
 801439a:	681b      	ldr	r3, [r3, #0]
 801439c:	689b      	ldr	r3, [r3, #8]
 801439e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80143a0:	68fb      	ldr	r3, [r7, #12]
 80143a2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80143a6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80143a8:	683b      	ldr	r3, [r7, #0]
 80143aa:	681b      	ldr	r3, [r3, #0]
 80143ac:	68fa      	ldr	r2, [r7, #12]
 80143ae:	4313      	orrs	r3, r2
 80143b0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80143b2:	687b      	ldr	r3, [r7, #4]
 80143b4:	681b      	ldr	r3, [r3, #0]
 80143b6:	68fa      	ldr	r2, [r7, #12]
 80143b8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80143ba:	687b      	ldr	r3, [r7, #4]
 80143bc:	681b      	ldr	r3, [r3, #0]
 80143be:	4a21      	ldr	r2, [pc, #132]	@ (8014444 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80143c0:	4293      	cmp	r3, r2
 80143c2:	d022      	beq.n	801440a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80143c4:	687b      	ldr	r3, [r7, #4]
 80143c6:	681b      	ldr	r3, [r3, #0]
 80143c8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80143cc:	d01d      	beq.n	801440a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80143ce:	687b      	ldr	r3, [r7, #4]
 80143d0:	681b      	ldr	r3, [r3, #0]
 80143d2:	4a1d      	ldr	r2, [pc, #116]	@ (8014448 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80143d4:	4293      	cmp	r3, r2
 80143d6:	d018      	beq.n	801440a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80143d8:	687b      	ldr	r3, [r7, #4]
 80143da:	681b      	ldr	r3, [r3, #0]
 80143dc:	4a1b      	ldr	r2, [pc, #108]	@ (801444c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80143de:	4293      	cmp	r3, r2
 80143e0:	d013      	beq.n	801440a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80143e2:	687b      	ldr	r3, [r7, #4]
 80143e4:	681b      	ldr	r3, [r3, #0]
 80143e6:	4a1a      	ldr	r2, [pc, #104]	@ (8014450 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80143e8:	4293      	cmp	r3, r2
 80143ea:	d00e      	beq.n	801440a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80143ec:	687b      	ldr	r3, [r7, #4]
 80143ee:	681b      	ldr	r3, [r3, #0]
 80143f0:	4a18      	ldr	r2, [pc, #96]	@ (8014454 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80143f2:	4293      	cmp	r3, r2
 80143f4:	d009      	beq.n	801440a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80143f6:	687b      	ldr	r3, [r7, #4]
 80143f8:	681b      	ldr	r3, [r3, #0]
 80143fa:	4a17      	ldr	r2, [pc, #92]	@ (8014458 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80143fc:	4293      	cmp	r3, r2
 80143fe:	d004      	beq.n	801440a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8014400:	687b      	ldr	r3, [r7, #4]
 8014402:	681b      	ldr	r3, [r3, #0]
 8014404:	4a15      	ldr	r2, [pc, #84]	@ (801445c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8014406:	4293      	cmp	r3, r2
 8014408:	d10c      	bne.n	8014424 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 801440a:	68bb      	ldr	r3, [r7, #8]
 801440c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8014410:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8014412:	683b      	ldr	r3, [r7, #0]
 8014414:	685b      	ldr	r3, [r3, #4]
 8014416:	68ba      	ldr	r2, [r7, #8]
 8014418:	4313      	orrs	r3, r2
 801441a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 801441c:	687b      	ldr	r3, [r7, #4]
 801441e:	681b      	ldr	r3, [r3, #0]
 8014420:	68ba      	ldr	r2, [r7, #8]
 8014422:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8014424:	687b      	ldr	r3, [r7, #4]
 8014426:	2201      	movs	r2, #1
 8014428:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 801442c:	687b      	ldr	r3, [r7, #4]
 801442e:	2200      	movs	r2, #0
 8014430:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8014434:	2300      	movs	r3, #0
}
 8014436:	4618      	mov	r0, r3
 8014438:	3714      	adds	r7, #20
 801443a:	46bd      	mov	sp, r7
 801443c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014440:	4770      	bx	lr
 8014442:	bf00      	nop
 8014444:	40010000 	.word	0x40010000
 8014448:	40000400 	.word	0x40000400
 801444c:	40000800 	.word	0x40000800
 8014450:	40000c00 	.word	0x40000c00
 8014454:	40010400 	.word	0x40010400
 8014458:	40014000 	.word	0x40014000
 801445c:	40001800 	.word	0x40001800

08014460 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8014460:	b480      	push	{r7}
 8014462:	b083      	sub	sp, #12
 8014464:	af00      	add	r7, sp, #0
 8014466:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8014468:	bf00      	nop
 801446a:	370c      	adds	r7, #12
 801446c:	46bd      	mov	sp, r7
 801446e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014472:	4770      	bx	lr

08014474 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8014474:	b480      	push	{r7}
 8014476:	b083      	sub	sp, #12
 8014478:	af00      	add	r7, sp, #0
 801447a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 801447c:	bf00      	nop
 801447e:	370c      	adds	r7, #12
 8014480:	46bd      	mov	sp, r7
 8014482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014486:	4770      	bx	lr

08014488 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8014488:	b580      	push	{r7, lr}
 801448a:	b082      	sub	sp, #8
 801448c:	af00      	add	r7, sp, #0
 801448e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8014490:	687b      	ldr	r3, [r7, #4]
 8014492:	2b00      	cmp	r3, #0
 8014494:	d101      	bne.n	801449a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8014496:	2301      	movs	r3, #1
 8014498:	e03f      	b.n	801451a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 801449a:	687b      	ldr	r3, [r7, #4]
 801449c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80144a0:	b2db      	uxtb	r3, r3
 80144a2:	2b00      	cmp	r3, #0
 80144a4:	d106      	bne.n	80144b4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80144a6:	687b      	ldr	r3, [r7, #4]
 80144a8:	2200      	movs	r2, #0
 80144aa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80144ae:	6878      	ldr	r0, [r7, #4]
 80144b0:	f7ee fb78 	bl	8002ba4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80144b4:	687b      	ldr	r3, [r7, #4]
 80144b6:	2224      	movs	r2, #36	@ 0x24
 80144b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80144bc:	687b      	ldr	r3, [r7, #4]
 80144be:	681b      	ldr	r3, [r3, #0]
 80144c0:	68da      	ldr	r2, [r3, #12]
 80144c2:	687b      	ldr	r3, [r7, #4]
 80144c4:	681b      	ldr	r3, [r3, #0]
 80144c6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80144ca:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80144cc:	6878      	ldr	r0, [r7, #4]
 80144ce:	f000 fdd5 	bl	801507c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80144d2:	687b      	ldr	r3, [r7, #4]
 80144d4:	681b      	ldr	r3, [r3, #0]
 80144d6:	691a      	ldr	r2, [r3, #16]
 80144d8:	687b      	ldr	r3, [r7, #4]
 80144da:	681b      	ldr	r3, [r3, #0]
 80144dc:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80144e0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80144e2:	687b      	ldr	r3, [r7, #4]
 80144e4:	681b      	ldr	r3, [r3, #0]
 80144e6:	695a      	ldr	r2, [r3, #20]
 80144e8:	687b      	ldr	r3, [r7, #4]
 80144ea:	681b      	ldr	r3, [r3, #0]
 80144ec:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80144f0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80144f2:	687b      	ldr	r3, [r7, #4]
 80144f4:	681b      	ldr	r3, [r3, #0]
 80144f6:	68da      	ldr	r2, [r3, #12]
 80144f8:	687b      	ldr	r3, [r7, #4]
 80144fa:	681b      	ldr	r3, [r3, #0]
 80144fc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8014500:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8014502:	687b      	ldr	r3, [r7, #4]
 8014504:	2200      	movs	r2, #0
 8014506:	641a      	str	r2, [r3, #64]	@ 0x40
  huart->gState = HAL_UART_STATE_READY;
 8014508:	687b      	ldr	r3, [r7, #4]
 801450a:	2220      	movs	r2, #32
 801450c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8014510:	687b      	ldr	r3, [r7, #4]
 8014512:	2220      	movs	r2, #32
 8014514:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8014518:	2300      	movs	r3, #0
}
 801451a:	4618      	mov	r0, r3
 801451c:	3708      	adds	r7, #8
 801451e:	46bd      	mov	sp, r7
 8014520:	bd80      	pop	{r7, pc}

08014522 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8014522:	b580      	push	{r7, lr}
 8014524:	b08a      	sub	sp, #40	@ 0x28
 8014526:	af02      	add	r7, sp, #8
 8014528:	60f8      	str	r0, [r7, #12]
 801452a:	60b9      	str	r1, [r7, #8]
 801452c:	603b      	str	r3, [r7, #0]
 801452e:	4613      	mov	r3, r2
 8014530:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8014532:	2300      	movs	r3, #0
 8014534:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8014536:	68fb      	ldr	r3, [r7, #12]
 8014538:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 801453c:	b2db      	uxtb	r3, r3
 801453e:	2b20      	cmp	r3, #32
 8014540:	d17c      	bne.n	801463c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8014542:	68bb      	ldr	r3, [r7, #8]
 8014544:	2b00      	cmp	r3, #0
 8014546:	d002      	beq.n	801454e <HAL_UART_Transmit+0x2c>
 8014548:	88fb      	ldrh	r3, [r7, #6]
 801454a:	2b00      	cmp	r3, #0
 801454c:	d101      	bne.n	8014552 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 801454e:	2301      	movs	r3, #1
 8014550:	e075      	b.n	801463e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8014552:	68fb      	ldr	r3, [r7, #12]
 8014554:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8014558:	2b01      	cmp	r3, #1
 801455a:	d101      	bne.n	8014560 <HAL_UART_Transmit+0x3e>
 801455c:	2302      	movs	r3, #2
 801455e:	e06e      	b.n	801463e <HAL_UART_Transmit+0x11c>
 8014560:	68fb      	ldr	r3, [r7, #12]
 8014562:	2201      	movs	r2, #1
 8014564:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8014568:	68fb      	ldr	r3, [r7, #12]
 801456a:	2200      	movs	r2, #0
 801456c:	641a      	str	r2, [r3, #64]	@ 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 801456e:	68fb      	ldr	r3, [r7, #12]
 8014570:	2221      	movs	r2, #33	@ 0x21
 8014572:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8014576:	f7f7 fce5 	bl	800bf44 <HAL_GetTick>
 801457a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 801457c:	68fb      	ldr	r3, [r7, #12]
 801457e:	88fa      	ldrh	r2, [r7, #6]
 8014580:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8014582:	68fb      	ldr	r3, [r7, #12]
 8014584:	88fa      	ldrh	r2, [r7, #6]
 8014586:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8014588:	68fb      	ldr	r3, [r7, #12]
 801458a:	689b      	ldr	r3, [r3, #8]
 801458c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8014590:	d108      	bne.n	80145a4 <HAL_UART_Transmit+0x82>
 8014592:	68fb      	ldr	r3, [r7, #12]
 8014594:	691b      	ldr	r3, [r3, #16]
 8014596:	2b00      	cmp	r3, #0
 8014598:	d104      	bne.n	80145a4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 801459a:	2300      	movs	r3, #0
 801459c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 801459e:	68bb      	ldr	r3, [r7, #8]
 80145a0:	61bb      	str	r3, [r7, #24]
 80145a2:	e003      	b.n	80145ac <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80145a4:	68bb      	ldr	r3, [r7, #8]
 80145a6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80145a8:	2300      	movs	r3, #0
 80145aa:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80145ac:	68fb      	ldr	r3, [r7, #12]
 80145ae:	2200      	movs	r2, #0
 80145b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    while (huart->TxXferCount > 0U)
 80145b4:	e02a      	b.n	801460c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80145b6:	683b      	ldr	r3, [r7, #0]
 80145b8:	9300      	str	r3, [sp, #0]
 80145ba:	697b      	ldr	r3, [r7, #20]
 80145bc:	2200      	movs	r2, #0
 80145be:	2180      	movs	r1, #128	@ 0x80
 80145c0:	68f8      	ldr	r0, [r7, #12]
 80145c2:	f000 fb15 	bl	8014bf0 <UART_WaitOnFlagUntilTimeout>
 80145c6:	4603      	mov	r3, r0
 80145c8:	2b00      	cmp	r3, #0
 80145ca:	d001      	beq.n	80145d0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80145cc:	2303      	movs	r3, #3
 80145ce:	e036      	b.n	801463e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80145d0:	69fb      	ldr	r3, [r7, #28]
 80145d2:	2b00      	cmp	r3, #0
 80145d4:	d10b      	bne.n	80145ee <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80145d6:	69bb      	ldr	r3, [r7, #24]
 80145d8:	881b      	ldrh	r3, [r3, #0]
 80145da:	461a      	mov	r2, r3
 80145dc:	68fb      	ldr	r3, [r7, #12]
 80145de:	681b      	ldr	r3, [r3, #0]
 80145e0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80145e4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80145e6:	69bb      	ldr	r3, [r7, #24]
 80145e8:	3302      	adds	r3, #2
 80145ea:	61bb      	str	r3, [r7, #24]
 80145ec:	e007      	b.n	80145fe <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80145ee:	69fb      	ldr	r3, [r7, #28]
 80145f0:	781a      	ldrb	r2, [r3, #0]
 80145f2:	68fb      	ldr	r3, [r7, #12]
 80145f4:	681b      	ldr	r3, [r3, #0]
 80145f6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80145f8:	69fb      	ldr	r3, [r7, #28]
 80145fa:	3301      	adds	r3, #1
 80145fc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80145fe:	68fb      	ldr	r3, [r7, #12]
 8014600:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8014602:	b29b      	uxth	r3, r3
 8014604:	3b01      	subs	r3, #1
 8014606:	b29a      	uxth	r2, r3
 8014608:	68fb      	ldr	r3, [r7, #12]
 801460a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 801460c:	68fb      	ldr	r3, [r7, #12]
 801460e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8014610:	b29b      	uxth	r3, r3
 8014612:	2b00      	cmp	r3, #0
 8014614:	d1cf      	bne.n	80145b6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8014616:	683b      	ldr	r3, [r7, #0]
 8014618:	9300      	str	r3, [sp, #0]
 801461a:	697b      	ldr	r3, [r7, #20]
 801461c:	2200      	movs	r2, #0
 801461e:	2140      	movs	r1, #64	@ 0x40
 8014620:	68f8      	ldr	r0, [r7, #12]
 8014622:	f000 fae5 	bl	8014bf0 <UART_WaitOnFlagUntilTimeout>
 8014626:	4603      	mov	r3, r0
 8014628:	2b00      	cmp	r3, #0
 801462a:	d001      	beq.n	8014630 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 801462c:	2303      	movs	r3, #3
 801462e:	e006      	b.n	801463e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8014630:	68fb      	ldr	r3, [r7, #12]
 8014632:	2220      	movs	r2, #32
 8014634:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 8014638:	2300      	movs	r3, #0
 801463a:	e000      	b.n	801463e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 801463c:	2302      	movs	r3, #2
  }
}
 801463e:	4618      	mov	r0, r3
 8014640:	3720      	adds	r7, #32
 8014642:	46bd      	mov	sp, r7
 8014644:	bd80      	pop	{r7, pc}

08014646 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8014646:	b580      	push	{r7, lr}
 8014648:	b084      	sub	sp, #16
 801464a:	af00      	add	r7, sp, #0
 801464c:	60f8      	str	r0, [r7, #12]
 801464e:	60b9      	str	r1, [r7, #8]
 8014650:	4613      	mov	r3, r2
 8014652:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8014654:	68fb      	ldr	r3, [r7, #12]
 8014656:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 801465a:	b2db      	uxtb	r3, r3
 801465c:	2b20      	cmp	r3, #32
 801465e:	d11d      	bne.n	801469c <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8014660:	68bb      	ldr	r3, [r7, #8]
 8014662:	2b00      	cmp	r3, #0
 8014664:	d002      	beq.n	801466c <HAL_UART_Receive_IT+0x26>
 8014666:	88fb      	ldrh	r3, [r7, #6]
 8014668:	2b00      	cmp	r3, #0
 801466a:	d101      	bne.n	8014670 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 801466c:	2301      	movs	r3, #1
 801466e:	e016      	b.n	801469e <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8014670:	68fb      	ldr	r3, [r7, #12]
 8014672:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8014676:	2b01      	cmp	r3, #1
 8014678:	d101      	bne.n	801467e <HAL_UART_Receive_IT+0x38>
 801467a:	2302      	movs	r3, #2
 801467c:	e00f      	b.n	801469e <HAL_UART_Receive_IT+0x58>
 801467e:	68fb      	ldr	r3, [r7, #12]
 8014680:	2201      	movs	r2, #1
 8014682:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8014686:	68fb      	ldr	r3, [r7, #12]
 8014688:	2200      	movs	r2, #0
 801468a:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 801468c:	88fb      	ldrh	r3, [r7, #6]
 801468e:	461a      	mov	r2, r3
 8014690:	68b9      	ldr	r1, [r7, #8]
 8014692:	68f8      	ldr	r0, [r7, #12]
 8014694:	f000 fb1a 	bl	8014ccc <UART_Start_Receive_IT>
 8014698:	4603      	mov	r3, r0
 801469a:	e000      	b.n	801469e <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 801469c:	2302      	movs	r3, #2
  }
}
 801469e:	4618      	mov	r0, r3
 80146a0:	3710      	adds	r7, #16
 80146a2:	46bd      	mov	sp, r7
 80146a4:	bd80      	pop	{r7, pc}
	...

080146a8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80146a8:	b580      	push	{r7, lr}
 80146aa:	b0ba      	sub	sp, #232	@ 0xe8
 80146ac:	af00      	add	r7, sp, #0
 80146ae:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80146b0:	687b      	ldr	r3, [r7, #4]
 80146b2:	681b      	ldr	r3, [r3, #0]
 80146b4:	681b      	ldr	r3, [r3, #0]
 80146b6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80146ba:	687b      	ldr	r3, [r7, #4]
 80146bc:	681b      	ldr	r3, [r3, #0]
 80146be:	68db      	ldr	r3, [r3, #12]
 80146c0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80146c4:	687b      	ldr	r3, [r7, #4]
 80146c6:	681b      	ldr	r3, [r3, #0]
 80146c8:	695b      	ldr	r3, [r3, #20]
 80146ca:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80146ce:	2300      	movs	r3, #0
 80146d0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80146d4:	2300      	movs	r3, #0
 80146d6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80146da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80146de:	f003 030f 	and.w	r3, r3, #15
 80146e2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80146e6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80146ea:	2b00      	cmp	r3, #0
 80146ec:	d10f      	bne.n	801470e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80146ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80146f2:	f003 0320 	and.w	r3, r3, #32
 80146f6:	2b00      	cmp	r3, #0
 80146f8:	d009      	beq.n	801470e <HAL_UART_IRQHandler+0x66>
 80146fa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80146fe:	f003 0320 	and.w	r3, r3, #32
 8014702:	2b00      	cmp	r3, #0
 8014704:	d003      	beq.n	801470e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8014706:	6878      	ldr	r0, [r7, #4]
 8014708:	f000 fbfd 	bl	8014f06 <UART_Receive_IT>
      return;
 801470c:	e256      	b.n	8014bbc <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 801470e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8014712:	2b00      	cmp	r3, #0
 8014714:	f000 80de 	beq.w	80148d4 <HAL_UART_IRQHandler+0x22c>
 8014718:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 801471c:	f003 0301 	and.w	r3, r3, #1
 8014720:	2b00      	cmp	r3, #0
 8014722:	d106      	bne.n	8014732 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8014724:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8014728:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 801472c:	2b00      	cmp	r3, #0
 801472e:	f000 80d1 	beq.w	80148d4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8014732:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8014736:	f003 0301 	and.w	r3, r3, #1
 801473a:	2b00      	cmp	r3, #0
 801473c:	d00b      	beq.n	8014756 <HAL_UART_IRQHandler+0xae>
 801473e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8014742:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8014746:	2b00      	cmp	r3, #0
 8014748:	d005      	beq.n	8014756 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 801474a:	687b      	ldr	r3, [r7, #4]
 801474c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801474e:	f043 0201 	orr.w	r2, r3, #1
 8014752:	687b      	ldr	r3, [r7, #4]
 8014754:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8014756:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 801475a:	f003 0304 	and.w	r3, r3, #4
 801475e:	2b00      	cmp	r3, #0
 8014760:	d00b      	beq.n	801477a <HAL_UART_IRQHandler+0xd2>
 8014762:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8014766:	f003 0301 	and.w	r3, r3, #1
 801476a:	2b00      	cmp	r3, #0
 801476c:	d005      	beq.n	801477a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 801476e:	687b      	ldr	r3, [r7, #4]
 8014770:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8014772:	f043 0202 	orr.w	r2, r3, #2
 8014776:	687b      	ldr	r3, [r7, #4]
 8014778:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 801477a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 801477e:	f003 0302 	and.w	r3, r3, #2
 8014782:	2b00      	cmp	r3, #0
 8014784:	d00b      	beq.n	801479e <HAL_UART_IRQHandler+0xf6>
 8014786:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 801478a:	f003 0301 	and.w	r3, r3, #1
 801478e:	2b00      	cmp	r3, #0
 8014790:	d005      	beq.n	801479e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8014792:	687b      	ldr	r3, [r7, #4]
 8014794:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8014796:	f043 0204 	orr.w	r2, r3, #4
 801479a:	687b      	ldr	r3, [r7, #4]
 801479c:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 801479e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80147a2:	f003 0308 	and.w	r3, r3, #8
 80147a6:	2b00      	cmp	r3, #0
 80147a8:	d011      	beq.n	80147ce <HAL_UART_IRQHandler+0x126>
 80147aa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80147ae:	f003 0320 	and.w	r3, r3, #32
 80147b2:	2b00      	cmp	r3, #0
 80147b4:	d105      	bne.n	80147c2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80147b6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80147ba:	f003 0301 	and.w	r3, r3, #1
 80147be:	2b00      	cmp	r3, #0
 80147c0:	d005      	beq.n	80147ce <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80147c2:	687b      	ldr	r3, [r7, #4]
 80147c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80147c6:	f043 0208 	orr.w	r2, r3, #8
 80147ca:	687b      	ldr	r3, [r7, #4]
 80147cc:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80147ce:	687b      	ldr	r3, [r7, #4]
 80147d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80147d2:	2b00      	cmp	r3, #0
 80147d4:	f000 81ed 	beq.w	8014bb2 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80147d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80147dc:	f003 0320 	and.w	r3, r3, #32
 80147e0:	2b00      	cmp	r3, #0
 80147e2:	d008      	beq.n	80147f6 <HAL_UART_IRQHandler+0x14e>
 80147e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80147e8:	f003 0320 	and.w	r3, r3, #32
 80147ec:	2b00      	cmp	r3, #0
 80147ee:	d002      	beq.n	80147f6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80147f0:	6878      	ldr	r0, [r7, #4]
 80147f2:	f000 fb88 	bl	8014f06 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80147f6:	687b      	ldr	r3, [r7, #4]
 80147f8:	681b      	ldr	r3, [r3, #0]
 80147fa:	695b      	ldr	r3, [r3, #20]
 80147fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8014800:	2b40      	cmp	r3, #64	@ 0x40
 8014802:	bf0c      	ite	eq
 8014804:	2301      	moveq	r3, #1
 8014806:	2300      	movne	r3, #0
 8014808:	b2db      	uxtb	r3, r3
 801480a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 801480e:	687b      	ldr	r3, [r7, #4]
 8014810:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8014812:	f003 0308 	and.w	r3, r3, #8
 8014816:	2b00      	cmp	r3, #0
 8014818:	d103      	bne.n	8014822 <HAL_UART_IRQHandler+0x17a>
 801481a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 801481e:	2b00      	cmp	r3, #0
 8014820:	d04f      	beq.n	80148c2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8014822:	6878      	ldr	r0, [r7, #4]
 8014824:	f000 fa90 	bl	8014d48 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8014828:	687b      	ldr	r3, [r7, #4]
 801482a:	681b      	ldr	r3, [r3, #0]
 801482c:	695b      	ldr	r3, [r3, #20]
 801482e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8014832:	2b40      	cmp	r3, #64	@ 0x40
 8014834:	d141      	bne.n	80148ba <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8014836:	687b      	ldr	r3, [r7, #4]
 8014838:	681b      	ldr	r3, [r3, #0]
 801483a:	3314      	adds	r3, #20
 801483c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014840:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8014844:	e853 3f00 	ldrex	r3, [r3]
 8014848:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 801484c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8014850:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8014854:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8014858:	687b      	ldr	r3, [r7, #4]
 801485a:	681b      	ldr	r3, [r3, #0]
 801485c:	3314      	adds	r3, #20
 801485e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8014862:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8014866:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801486a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 801486e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8014872:	e841 2300 	strex	r3, r2, [r1]
 8014876:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 801487a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 801487e:	2b00      	cmp	r3, #0
 8014880:	d1d9      	bne.n	8014836 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8014882:	687b      	ldr	r3, [r7, #4]
 8014884:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8014886:	2b00      	cmp	r3, #0
 8014888:	d013      	beq.n	80148b2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 801488a:	687b      	ldr	r3, [r7, #4]
 801488c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801488e:	4a7d      	ldr	r2, [pc, #500]	@ (8014a84 <HAL_UART_IRQHandler+0x3dc>)
 8014890:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8014892:	687b      	ldr	r3, [r7, #4]
 8014894:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8014896:	4618      	mov	r0, r3
 8014898:	f7f8 fd26 	bl	800d2e8 <HAL_DMA_Abort_IT>
 801489c:	4603      	mov	r3, r0
 801489e:	2b00      	cmp	r3, #0
 80148a0:	d016      	beq.n	80148d0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80148a2:	687b      	ldr	r3, [r7, #4]
 80148a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80148a6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80148a8:	687a      	ldr	r2, [r7, #4]
 80148aa:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80148ac:	4610      	mov	r0, r2
 80148ae:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80148b0:	e00e      	b.n	80148d0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80148b2:	6878      	ldr	r0, [r7, #4]
 80148b4:	f000 f986 	bl	8014bc4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80148b8:	e00a      	b.n	80148d0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80148ba:	6878      	ldr	r0, [r7, #4]
 80148bc:	f000 f982 	bl	8014bc4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80148c0:	e006      	b.n	80148d0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80148c2:	6878      	ldr	r0, [r7, #4]
 80148c4:	f000 f97e 	bl	8014bc4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80148c8:	687b      	ldr	r3, [r7, #4]
 80148ca:	2200      	movs	r2, #0
 80148cc:	641a      	str	r2, [r3, #64]	@ 0x40
      }
    }
    return;
 80148ce:	e170      	b.n	8014bb2 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80148d0:	bf00      	nop
    return;
 80148d2:	e16e      	b.n	8014bb2 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80148d4:	687b      	ldr	r3, [r7, #4]
 80148d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80148d8:	2b01      	cmp	r3, #1
 80148da:	f040 814a 	bne.w	8014b72 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80148de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80148e2:	f003 0310 	and.w	r3, r3, #16
 80148e6:	2b00      	cmp	r3, #0
 80148e8:	f000 8143 	beq.w	8014b72 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80148ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80148f0:	f003 0310 	and.w	r3, r3, #16
 80148f4:	2b00      	cmp	r3, #0
 80148f6:	f000 813c 	beq.w	8014b72 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80148fa:	2300      	movs	r3, #0
 80148fc:	60bb      	str	r3, [r7, #8]
 80148fe:	687b      	ldr	r3, [r7, #4]
 8014900:	681b      	ldr	r3, [r3, #0]
 8014902:	681b      	ldr	r3, [r3, #0]
 8014904:	60bb      	str	r3, [r7, #8]
 8014906:	687b      	ldr	r3, [r7, #4]
 8014908:	681b      	ldr	r3, [r3, #0]
 801490a:	685b      	ldr	r3, [r3, #4]
 801490c:	60bb      	str	r3, [r7, #8]
 801490e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8014910:	687b      	ldr	r3, [r7, #4]
 8014912:	681b      	ldr	r3, [r3, #0]
 8014914:	695b      	ldr	r3, [r3, #20]
 8014916:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801491a:	2b40      	cmp	r3, #64	@ 0x40
 801491c:	f040 80b4 	bne.w	8014a88 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8014920:	687b      	ldr	r3, [r7, #4]
 8014922:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8014924:	681b      	ldr	r3, [r3, #0]
 8014926:	685b      	ldr	r3, [r3, #4]
 8014928:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 801492c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8014930:	2b00      	cmp	r3, #0
 8014932:	f000 8140 	beq.w	8014bb6 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8014936:	687b      	ldr	r3, [r7, #4]
 8014938:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 801493a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 801493e:	429a      	cmp	r2, r3
 8014940:	f080 8139 	bcs.w	8014bb6 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8014944:	687b      	ldr	r3, [r7, #4]
 8014946:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 801494a:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 801494c:	687b      	ldr	r3, [r7, #4]
 801494e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8014950:	69db      	ldr	r3, [r3, #28]
 8014952:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8014956:	f000 8088 	beq.w	8014a6a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801495a:	687b      	ldr	r3, [r7, #4]
 801495c:	681b      	ldr	r3, [r3, #0]
 801495e:	330c      	adds	r3, #12
 8014960:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014964:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8014968:	e853 3f00 	ldrex	r3, [r3]
 801496c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8014970:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8014974:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8014978:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 801497c:	687b      	ldr	r3, [r7, #4]
 801497e:	681b      	ldr	r3, [r3, #0]
 8014980:	330c      	adds	r3, #12
 8014982:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8014986:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 801498a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801498e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8014992:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8014996:	e841 2300 	strex	r3, r2, [r1]
 801499a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 801499e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80149a2:	2b00      	cmp	r3, #0
 80149a4:	d1d9      	bne.n	801495a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80149a6:	687b      	ldr	r3, [r7, #4]
 80149a8:	681b      	ldr	r3, [r3, #0]
 80149aa:	3314      	adds	r3, #20
 80149ac:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80149ae:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80149b0:	e853 3f00 	ldrex	r3, [r3]
 80149b4:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80149b6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80149b8:	f023 0301 	bic.w	r3, r3, #1
 80149bc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80149c0:	687b      	ldr	r3, [r7, #4]
 80149c2:	681b      	ldr	r3, [r3, #0]
 80149c4:	3314      	adds	r3, #20
 80149c6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80149ca:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80149ce:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80149d0:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80149d2:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80149d6:	e841 2300 	strex	r3, r2, [r1]
 80149da:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80149dc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80149de:	2b00      	cmp	r3, #0
 80149e0:	d1e1      	bne.n	80149a6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80149e2:	687b      	ldr	r3, [r7, #4]
 80149e4:	681b      	ldr	r3, [r3, #0]
 80149e6:	3314      	adds	r3, #20
 80149e8:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80149ea:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80149ec:	e853 3f00 	ldrex	r3, [r3]
 80149f0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80149f2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80149f4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80149f8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80149fc:	687b      	ldr	r3, [r7, #4]
 80149fe:	681b      	ldr	r3, [r3, #0]
 8014a00:	3314      	adds	r3, #20
 8014a02:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8014a06:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8014a08:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014a0a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8014a0c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8014a0e:	e841 2300 	strex	r3, r2, [r1]
 8014a12:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8014a14:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8014a16:	2b00      	cmp	r3, #0
 8014a18:	d1e3      	bne.n	80149e2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8014a1a:	687b      	ldr	r3, [r7, #4]
 8014a1c:	2220      	movs	r2, #32
 8014a1e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8014a22:	687b      	ldr	r3, [r7, #4]
 8014a24:	2200      	movs	r2, #0
 8014a26:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8014a28:	687b      	ldr	r3, [r7, #4]
 8014a2a:	681b      	ldr	r3, [r3, #0]
 8014a2c:	330c      	adds	r3, #12
 8014a2e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014a30:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8014a32:	e853 3f00 	ldrex	r3, [r3]
 8014a36:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8014a38:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8014a3a:	f023 0310 	bic.w	r3, r3, #16
 8014a3e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8014a42:	687b      	ldr	r3, [r7, #4]
 8014a44:	681b      	ldr	r3, [r3, #0]
 8014a46:	330c      	adds	r3, #12
 8014a48:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8014a4c:	65ba      	str	r2, [r7, #88]	@ 0x58
 8014a4e:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014a50:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8014a52:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8014a54:	e841 2300 	strex	r3, r2, [r1]
 8014a58:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8014a5a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8014a5c:	2b00      	cmp	r3, #0
 8014a5e:	d1e3      	bne.n	8014a28 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8014a60:	687b      	ldr	r3, [r7, #4]
 8014a62:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8014a64:	4618      	mov	r0, r3
 8014a66:	f7f8 fbcf 	bl	800d208 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8014a6a:	687b      	ldr	r3, [r7, #4]
 8014a6c:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8014a6e:	687b      	ldr	r3, [r7, #4]
 8014a70:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8014a72:	b29b      	uxth	r3, r3
 8014a74:	1ad3      	subs	r3, r2, r3
 8014a76:	b29b      	uxth	r3, r3
 8014a78:	4619      	mov	r1, r3
 8014a7a:	6878      	ldr	r0, [r7, #4]
 8014a7c:	f000 f8ac 	bl	8014bd8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8014a80:	e099      	b.n	8014bb6 <HAL_UART_IRQHandler+0x50e>
 8014a82:	bf00      	nop
 8014a84:	08014e0f 	.word	0x08014e0f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8014a88:	687b      	ldr	r3, [r7, #4]
 8014a8a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8014a8c:	687b      	ldr	r3, [r7, #4]
 8014a8e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8014a90:	b29b      	uxth	r3, r3
 8014a92:	1ad3      	subs	r3, r2, r3
 8014a94:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8014a98:	687b      	ldr	r3, [r7, #4]
 8014a9a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8014a9c:	b29b      	uxth	r3, r3
 8014a9e:	2b00      	cmp	r3, #0
 8014aa0:	f000 808b 	beq.w	8014bba <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8014aa4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8014aa8:	2b00      	cmp	r3, #0
 8014aaa:	f000 8086 	beq.w	8014bba <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8014aae:	687b      	ldr	r3, [r7, #4]
 8014ab0:	681b      	ldr	r3, [r3, #0]
 8014ab2:	330c      	adds	r3, #12
 8014ab4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014ab6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014ab8:	e853 3f00 	ldrex	r3, [r3]
 8014abc:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8014abe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8014ac0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8014ac4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8014ac8:	687b      	ldr	r3, [r7, #4]
 8014aca:	681b      	ldr	r3, [r3, #0]
 8014acc:	330c      	adds	r3, #12
 8014ace:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8014ad2:	647a      	str	r2, [r7, #68]	@ 0x44
 8014ad4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014ad6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8014ad8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8014ada:	e841 2300 	strex	r3, r2, [r1]
 8014ade:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8014ae0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8014ae2:	2b00      	cmp	r3, #0
 8014ae4:	d1e3      	bne.n	8014aae <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8014ae6:	687b      	ldr	r3, [r7, #4]
 8014ae8:	681b      	ldr	r3, [r3, #0]
 8014aea:	3314      	adds	r3, #20
 8014aec:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014aee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014af0:	e853 3f00 	ldrex	r3, [r3]
 8014af4:	623b      	str	r3, [r7, #32]
   return(result);
 8014af6:	6a3b      	ldr	r3, [r7, #32]
 8014af8:	f023 0301 	bic.w	r3, r3, #1
 8014afc:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8014b00:	687b      	ldr	r3, [r7, #4]
 8014b02:	681b      	ldr	r3, [r3, #0]
 8014b04:	3314      	adds	r3, #20
 8014b06:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8014b0a:	633a      	str	r2, [r7, #48]	@ 0x30
 8014b0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014b0e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8014b10:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8014b12:	e841 2300 	strex	r3, r2, [r1]
 8014b16:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8014b18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014b1a:	2b00      	cmp	r3, #0
 8014b1c:	d1e3      	bne.n	8014ae6 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8014b1e:	687b      	ldr	r3, [r7, #4]
 8014b20:	2220      	movs	r2, #32
 8014b22:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8014b26:	687b      	ldr	r3, [r7, #4]
 8014b28:	2200      	movs	r2, #0
 8014b2a:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8014b2c:	687b      	ldr	r3, [r7, #4]
 8014b2e:	681b      	ldr	r3, [r3, #0]
 8014b30:	330c      	adds	r3, #12
 8014b32:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014b34:	693b      	ldr	r3, [r7, #16]
 8014b36:	e853 3f00 	ldrex	r3, [r3]
 8014b3a:	60fb      	str	r3, [r7, #12]
   return(result);
 8014b3c:	68fb      	ldr	r3, [r7, #12]
 8014b3e:	f023 0310 	bic.w	r3, r3, #16
 8014b42:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8014b46:	687b      	ldr	r3, [r7, #4]
 8014b48:	681b      	ldr	r3, [r3, #0]
 8014b4a:	330c      	adds	r3, #12
 8014b4c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8014b50:	61fa      	str	r2, [r7, #28]
 8014b52:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014b54:	69b9      	ldr	r1, [r7, #24]
 8014b56:	69fa      	ldr	r2, [r7, #28]
 8014b58:	e841 2300 	strex	r3, r2, [r1]
 8014b5c:	617b      	str	r3, [r7, #20]
   return(result);
 8014b5e:	697b      	ldr	r3, [r7, #20]
 8014b60:	2b00      	cmp	r3, #0
 8014b62:	d1e3      	bne.n	8014b2c <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8014b64:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8014b68:	4619      	mov	r1, r3
 8014b6a:	6878      	ldr	r0, [r7, #4]
 8014b6c:	f000 f834 	bl	8014bd8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8014b70:	e023      	b.n	8014bba <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8014b72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8014b76:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8014b7a:	2b00      	cmp	r3, #0
 8014b7c:	d009      	beq.n	8014b92 <HAL_UART_IRQHandler+0x4ea>
 8014b7e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8014b82:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8014b86:	2b00      	cmp	r3, #0
 8014b88:	d003      	beq.n	8014b92 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8014b8a:	6878      	ldr	r0, [r7, #4]
 8014b8c:	f000 f953 	bl	8014e36 <UART_Transmit_IT>
    return;
 8014b90:	e014      	b.n	8014bbc <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8014b92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8014b96:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8014b9a:	2b00      	cmp	r3, #0
 8014b9c:	d00e      	beq.n	8014bbc <HAL_UART_IRQHandler+0x514>
 8014b9e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8014ba2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8014ba6:	2b00      	cmp	r3, #0
 8014ba8:	d008      	beq.n	8014bbc <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8014baa:	6878      	ldr	r0, [r7, #4]
 8014bac:	f000 f993 	bl	8014ed6 <UART_EndTransmit_IT>
    return;
 8014bb0:	e004      	b.n	8014bbc <HAL_UART_IRQHandler+0x514>
    return;
 8014bb2:	bf00      	nop
 8014bb4:	e002      	b.n	8014bbc <HAL_UART_IRQHandler+0x514>
      return;
 8014bb6:	bf00      	nop
 8014bb8:	e000      	b.n	8014bbc <HAL_UART_IRQHandler+0x514>
      return;
 8014bba:	bf00      	nop
  }
}
 8014bbc:	37e8      	adds	r7, #232	@ 0xe8
 8014bbe:	46bd      	mov	sp, r7
 8014bc0:	bd80      	pop	{r7, pc}
 8014bc2:	bf00      	nop

08014bc4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8014bc4:	b480      	push	{r7}
 8014bc6:	b083      	sub	sp, #12
 8014bc8:	af00      	add	r7, sp, #0
 8014bca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8014bcc:	bf00      	nop
 8014bce:	370c      	adds	r7, #12
 8014bd0:	46bd      	mov	sp, r7
 8014bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014bd6:	4770      	bx	lr

08014bd8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8014bd8:	b480      	push	{r7}
 8014bda:	b083      	sub	sp, #12
 8014bdc:	af00      	add	r7, sp, #0
 8014bde:	6078      	str	r0, [r7, #4]
 8014be0:	460b      	mov	r3, r1
 8014be2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8014be4:	bf00      	nop
 8014be6:	370c      	adds	r7, #12
 8014be8:	46bd      	mov	sp, r7
 8014bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014bee:	4770      	bx	lr

08014bf0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8014bf0:	b580      	push	{r7, lr}
 8014bf2:	b090      	sub	sp, #64	@ 0x40
 8014bf4:	af00      	add	r7, sp, #0
 8014bf6:	60f8      	str	r0, [r7, #12]
 8014bf8:	60b9      	str	r1, [r7, #8]
 8014bfa:	603b      	str	r3, [r7, #0]
 8014bfc:	4613      	mov	r3, r2
 8014bfe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8014c00:	e050      	b.n	8014ca4 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8014c02:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8014c04:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8014c08:	d04c      	beq.n	8014ca4 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8014c0a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8014c0c:	2b00      	cmp	r3, #0
 8014c0e:	d007      	beq.n	8014c20 <UART_WaitOnFlagUntilTimeout+0x30>
 8014c10:	f7f7 f998 	bl	800bf44 <HAL_GetTick>
 8014c14:	4602      	mov	r2, r0
 8014c16:	683b      	ldr	r3, [r7, #0]
 8014c18:	1ad3      	subs	r3, r2, r3
 8014c1a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8014c1c:	429a      	cmp	r2, r3
 8014c1e:	d241      	bcs.n	8014ca4 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8014c20:	68fb      	ldr	r3, [r7, #12]
 8014c22:	681b      	ldr	r3, [r3, #0]
 8014c24:	330c      	adds	r3, #12
 8014c26:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014c28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014c2a:	e853 3f00 	ldrex	r3, [r3]
 8014c2e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8014c30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014c32:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8014c36:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8014c38:	68fb      	ldr	r3, [r7, #12]
 8014c3a:	681b      	ldr	r3, [r3, #0]
 8014c3c:	330c      	adds	r3, #12
 8014c3e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8014c40:	637a      	str	r2, [r7, #52]	@ 0x34
 8014c42:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014c44:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8014c46:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8014c48:	e841 2300 	strex	r3, r2, [r1]
 8014c4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8014c4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014c50:	2b00      	cmp	r3, #0
 8014c52:	d1e5      	bne.n	8014c20 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8014c54:	68fb      	ldr	r3, [r7, #12]
 8014c56:	681b      	ldr	r3, [r3, #0]
 8014c58:	3314      	adds	r3, #20
 8014c5a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014c5c:	697b      	ldr	r3, [r7, #20]
 8014c5e:	e853 3f00 	ldrex	r3, [r3]
 8014c62:	613b      	str	r3, [r7, #16]
   return(result);
 8014c64:	693b      	ldr	r3, [r7, #16]
 8014c66:	f023 0301 	bic.w	r3, r3, #1
 8014c6a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8014c6c:	68fb      	ldr	r3, [r7, #12]
 8014c6e:	681b      	ldr	r3, [r3, #0]
 8014c70:	3314      	adds	r3, #20
 8014c72:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8014c74:	623a      	str	r2, [r7, #32]
 8014c76:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014c78:	69f9      	ldr	r1, [r7, #28]
 8014c7a:	6a3a      	ldr	r2, [r7, #32]
 8014c7c:	e841 2300 	strex	r3, r2, [r1]
 8014c80:	61bb      	str	r3, [r7, #24]
   return(result);
 8014c82:	69bb      	ldr	r3, [r7, #24]
 8014c84:	2b00      	cmp	r3, #0
 8014c86:	d1e5      	bne.n	8014c54 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8014c88:	68fb      	ldr	r3, [r7, #12]
 8014c8a:	2220      	movs	r2, #32
 8014c8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8014c90:	68fb      	ldr	r3, [r7, #12]
 8014c92:	2220      	movs	r2, #32
 8014c94:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8014c98:	68fb      	ldr	r3, [r7, #12]
 8014c9a:	2200      	movs	r2, #0
 8014c9c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_TIMEOUT;
 8014ca0:	2303      	movs	r3, #3
 8014ca2:	e00f      	b.n	8014cc4 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8014ca4:	68fb      	ldr	r3, [r7, #12]
 8014ca6:	681b      	ldr	r3, [r3, #0]
 8014ca8:	681a      	ldr	r2, [r3, #0]
 8014caa:	68bb      	ldr	r3, [r7, #8]
 8014cac:	4013      	ands	r3, r2
 8014cae:	68ba      	ldr	r2, [r7, #8]
 8014cb0:	429a      	cmp	r2, r3
 8014cb2:	bf0c      	ite	eq
 8014cb4:	2301      	moveq	r3, #1
 8014cb6:	2300      	movne	r3, #0
 8014cb8:	b2db      	uxtb	r3, r3
 8014cba:	461a      	mov	r2, r3
 8014cbc:	79fb      	ldrb	r3, [r7, #7]
 8014cbe:	429a      	cmp	r2, r3
 8014cc0:	d09f      	beq.n	8014c02 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8014cc2:	2300      	movs	r3, #0
}
 8014cc4:	4618      	mov	r0, r3
 8014cc6:	3740      	adds	r7, #64	@ 0x40
 8014cc8:	46bd      	mov	sp, r7
 8014cca:	bd80      	pop	{r7, pc}

08014ccc <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8014ccc:	b480      	push	{r7}
 8014cce:	b085      	sub	sp, #20
 8014cd0:	af00      	add	r7, sp, #0
 8014cd2:	60f8      	str	r0, [r7, #12]
 8014cd4:	60b9      	str	r1, [r7, #8]
 8014cd6:	4613      	mov	r3, r2
 8014cd8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8014cda:	68fb      	ldr	r3, [r7, #12]
 8014cdc:	68ba      	ldr	r2, [r7, #8]
 8014cde:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8014ce0:	68fb      	ldr	r3, [r7, #12]
 8014ce2:	88fa      	ldrh	r2, [r7, #6]
 8014ce4:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8014ce6:	68fb      	ldr	r3, [r7, #12]
 8014ce8:	88fa      	ldrh	r2, [r7, #6]
 8014cea:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8014cec:	68fb      	ldr	r3, [r7, #12]
 8014cee:	2200      	movs	r2, #0
 8014cf0:	641a      	str	r2, [r3, #64]	@ 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8014cf2:	68fb      	ldr	r3, [r7, #12]
 8014cf4:	2222      	movs	r2, #34	@ 0x22
 8014cf6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8014cfa:	68fb      	ldr	r3, [r7, #12]
 8014cfc:	2200      	movs	r2, #0
 8014cfe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8014d02:	68fb      	ldr	r3, [r7, #12]
 8014d04:	691b      	ldr	r3, [r3, #16]
 8014d06:	2b00      	cmp	r3, #0
 8014d08:	d007      	beq.n	8014d1a <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8014d0a:	68fb      	ldr	r3, [r7, #12]
 8014d0c:	681b      	ldr	r3, [r3, #0]
 8014d0e:	68da      	ldr	r2, [r3, #12]
 8014d10:	68fb      	ldr	r3, [r7, #12]
 8014d12:	681b      	ldr	r3, [r3, #0]
 8014d14:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8014d18:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8014d1a:	68fb      	ldr	r3, [r7, #12]
 8014d1c:	681b      	ldr	r3, [r3, #0]
 8014d1e:	695a      	ldr	r2, [r3, #20]
 8014d20:	68fb      	ldr	r3, [r7, #12]
 8014d22:	681b      	ldr	r3, [r3, #0]
 8014d24:	f042 0201 	orr.w	r2, r2, #1
 8014d28:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8014d2a:	68fb      	ldr	r3, [r7, #12]
 8014d2c:	681b      	ldr	r3, [r3, #0]
 8014d2e:	68da      	ldr	r2, [r3, #12]
 8014d30:	68fb      	ldr	r3, [r7, #12]
 8014d32:	681b      	ldr	r3, [r3, #0]
 8014d34:	f042 0220 	orr.w	r2, r2, #32
 8014d38:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8014d3a:	2300      	movs	r3, #0
}
 8014d3c:	4618      	mov	r0, r3
 8014d3e:	3714      	adds	r7, #20
 8014d40:	46bd      	mov	sp, r7
 8014d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d46:	4770      	bx	lr

08014d48 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8014d48:	b480      	push	{r7}
 8014d4a:	b095      	sub	sp, #84	@ 0x54
 8014d4c:	af00      	add	r7, sp, #0
 8014d4e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8014d50:	687b      	ldr	r3, [r7, #4]
 8014d52:	681b      	ldr	r3, [r3, #0]
 8014d54:	330c      	adds	r3, #12
 8014d56:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014d58:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8014d5a:	e853 3f00 	ldrex	r3, [r3]
 8014d5e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8014d60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014d62:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8014d66:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8014d68:	687b      	ldr	r3, [r7, #4]
 8014d6a:	681b      	ldr	r3, [r3, #0]
 8014d6c:	330c      	adds	r3, #12
 8014d6e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8014d70:	643a      	str	r2, [r7, #64]	@ 0x40
 8014d72:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014d74:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8014d76:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8014d78:	e841 2300 	strex	r3, r2, [r1]
 8014d7c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8014d7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014d80:	2b00      	cmp	r3, #0
 8014d82:	d1e5      	bne.n	8014d50 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8014d84:	687b      	ldr	r3, [r7, #4]
 8014d86:	681b      	ldr	r3, [r3, #0]
 8014d88:	3314      	adds	r3, #20
 8014d8a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014d8c:	6a3b      	ldr	r3, [r7, #32]
 8014d8e:	e853 3f00 	ldrex	r3, [r3]
 8014d92:	61fb      	str	r3, [r7, #28]
   return(result);
 8014d94:	69fb      	ldr	r3, [r7, #28]
 8014d96:	f023 0301 	bic.w	r3, r3, #1
 8014d9a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8014d9c:	687b      	ldr	r3, [r7, #4]
 8014d9e:	681b      	ldr	r3, [r3, #0]
 8014da0:	3314      	adds	r3, #20
 8014da2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8014da4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8014da6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014da8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8014daa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8014dac:	e841 2300 	strex	r3, r2, [r1]
 8014db0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8014db2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014db4:	2b00      	cmp	r3, #0
 8014db6:	d1e5      	bne.n	8014d84 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8014db8:	687b      	ldr	r3, [r7, #4]
 8014dba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8014dbc:	2b01      	cmp	r3, #1
 8014dbe:	d119      	bne.n	8014df4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8014dc0:	687b      	ldr	r3, [r7, #4]
 8014dc2:	681b      	ldr	r3, [r3, #0]
 8014dc4:	330c      	adds	r3, #12
 8014dc6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014dc8:	68fb      	ldr	r3, [r7, #12]
 8014dca:	e853 3f00 	ldrex	r3, [r3]
 8014dce:	60bb      	str	r3, [r7, #8]
   return(result);
 8014dd0:	68bb      	ldr	r3, [r7, #8]
 8014dd2:	f023 0310 	bic.w	r3, r3, #16
 8014dd6:	647b      	str	r3, [r7, #68]	@ 0x44
 8014dd8:	687b      	ldr	r3, [r7, #4]
 8014dda:	681b      	ldr	r3, [r3, #0]
 8014ddc:	330c      	adds	r3, #12
 8014dde:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8014de0:	61ba      	str	r2, [r7, #24]
 8014de2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014de4:	6979      	ldr	r1, [r7, #20]
 8014de6:	69ba      	ldr	r2, [r7, #24]
 8014de8:	e841 2300 	strex	r3, r2, [r1]
 8014dec:	613b      	str	r3, [r7, #16]
   return(result);
 8014dee:	693b      	ldr	r3, [r7, #16]
 8014df0:	2b00      	cmp	r3, #0
 8014df2:	d1e5      	bne.n	8014dc0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8014df4:	687b      	ldr	r3, [r7, #4]
 8014df6:	2220      	movs	r2, #32
 8014df8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8014dfc:	687b      	ldr	r3, [r7, #4]
 8014dfe:	2200      	movs	r2, #0
 8014e00:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8014e02:	bf00      	nop
 8014e04:	3754      	adds	r7, #84	@ 0x54
 8014e06:	46bd      	mov	sp, r7
 8014e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e0c:	4770      	bx	lr

08014e0e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8014e0e:	b580      	push	{r7, lr}
 8014e10:	b084      	sub	sp, #16
 8014e12:	af00      	add	r7, sp, #0
 8014e14:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8014e16:	687b      	ldr	r3, [r7, #4]
 8014e18:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8014e1a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8014e1c:	68fb      	ldr	r3, [r7, #12]
 8014e1e:	2200      	movs	r2, #0
 8014e20:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8014e22:	68fb      	ldr	r3, [r7, #12]
 8014e24:	2200      	movs	r2, #0
 8014e26:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8014e28:	68f8      	ldr	r0, [r7, #12]
 8014e2a:	f7ff fecb 	bl	8014bc4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8014e2e:	bf00      	nop
 8014e30:	3710      	adds	r7, #16
 8014e32:	46bd      	mov	sp, r7
 8014e34:	bd80      	pop	{r7, pc}

08014e36 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8014e36:	b480      	push	{r7}
 8014e38:	b085      	sub	sp, #20
 8014e3a:	af00      	add	r7, sp, #0
 8014e3c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8014e3e:	687b      	ldr	r3, [r7, #4]
 8014e40:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8014e44:	b2db      	uxtb	r3, r3
 8014e46:	2b21      	cmp	r3, #33	@ 0x21
 8014e48:	d13e      	bne.n	8014ec8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8014e4a:	687b      	ldr	r3, [r7, #4]
 8014e4c:	689b      	ldr	r3, [r3, #8]
 8014e4e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8014e52:	d114      	bne.n	8014e7e <UART_Transmit_IT+0x48>
 8014e54:	687b      	ldr	r3, [r7, #4]
 8014e56:	691b      	ldr	r3, [r3, #16]
 8014e58:	2b00      	cmp	r3, #0
 8014e5a:	d110      	bne.n	8014e7e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8014e5c:	687b      	ldr	r3, [r7, #4]
 8014e5e:	6a1b      	ldr	r3, [r3, #32]
 8014e60:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8014e62:	68fb      	ldr	r3, [r7, #12]
 8014e64:	881b      	ldrh	r3, [r3, #0]
 8014e66:	461a      	mov	r2, r3
 8014e68:	687b      	ldr	r3, [r7, #4]
 8014e6a:	681b      	ldr	r3, [r3, #0]
 8014e6c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8014e70:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8014e72:	687b      	ldr	r3, [r7, #4]
 8014e74:	6a1b      	ldr	r3, [r3, #32]
 8014e76:	1c9a      	adds	r2, r3, #2
 8014e78:	687b      	ldr	r3, [r7, #4]
 8014e7a:	621a      	str	r2, [r3, #32]
 8014e7c:	e008      	b.n	8014e90 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8014e7e:	687b      	ldr	r3, [r7, #4]
 8014e80:	6a1b      	ldr	r3, [r3, #32]
 8014e82:	1c59      	adds	r1, r3, #1
 8014e84:	687a      	ldr	r2, [r7, #4]
 8014e86:	6211      	str	r1, [r2, #32]
 8014e88:	781a      	ldrb	r2, [r3, #0]
 8014e8a:	687b      	ldr	r3, [r7, #4]
 8014e8c:	681b      	ldr	r3, [r3, #0]
 8014e8e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8014e90:	687b      	ldr	r3, [r7, #4]
 8014e92:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8014e94:	b29b      	uxth	r3, r3
 8014e96:	3b01      	subs	r3, #1
 8014e98:	b29b      	uxth	r3, r3
 8014e9a:	687a      	ldr	r2, [r7, #4]
 8014e9c:	4619      	mov	r1, r3
 8014e9e:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8014ea0:	2b00      	cmp	r3, #0
 8014ea2:	d10f      	bne.n	8014ec4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8014ea4:	687b      	ldr	r3, [r7, #4]
 8014ea6:	681b      	ldr	r3, [r3, #0]
 8014ea8:	68da      	ldr	r2, [r3, #12]
 8014eaa:	687b      	ldr	r3, [r7, #4]
 8014eac:	681b      	ldr	r3, [r3, #0]
 8014eae:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8014eb2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8014eb4:	687b      	ldr	r3, [r7, #4]
 8014eb6:	681b      	ldr	r3, [r3, #0]
 8014eb8:	68da      	ldr	r2, [r3, #12]
 8014eba:	687b      	ldr	r3, [r7, #4]
 8014ebc:	681b      	ldr	r3, [r3, #0]
 8014ebe:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8014ec2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8014ec4:	2300      	movs	r3, #0
 8014ec6:	e000      	b.n	8014eca <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8014ec8:	2302      	movs	r3, #2
  }
}
 8014eca:	4618      	mov	r0, r3
 8014ecc:	3714      	adds	r7, #20
 8014ece:	46bd      	mov	sp, r7
 8014ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ed4:	4770      	bx	lr

08014ed6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8014ed6:	b580      	push	{r7, lr}
 8014ed8:	b082      	sub	sp, #8
 8014eda:	af00      	add	r7, sp, #0
 8014edc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8014ede:	687b      	ldr	r3, [r7, #4]
 8014ee0:	681b      	ldr	r3, [r3, #0]
 8014ee2:	68da      	ldr	r2, [r3, #12]
 8014ee4:	687b      	ldr	r3, [r7, #4]
 8014ee6:	681b      	ldr	r3, [r3, #0]
 8014ee8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8014eec:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8014eee:	687b      	ldr	r3, [r7, #4]
 8014ef0:	2220      	movs	r2, #32
 8014ef2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8014ef6:	6878      	ldr	r0, [r7, #4]
 8014ef8:	f7f6 fc46 	bl	800b788 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8014efc:	2300      	movs	r3, #0
}
 8014efe:	4618      	mov	r0, r3
 8014f00:	3708      	adds	r7, #8
 8014f02:	46bd      	mov	sp, r7
 8014f04:	bd80      	pop	{r7, pc}

08014f06 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8014f06:	b580      	push	{r7, lr}
 8014f08:	b08c      	sub	sp, #48	@ 0x30
 8014f0a:	af00      	add	r7, sp, #0
 8014f0c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8014f0e:	687b      	ldr	r3, [r7, #4]
 8014f10:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8014f14:	b2db      	uxtb	r3, r3
 8014f16:	2b22      	cmp	r3, #34	@ 0x22
 8014f18:	f040 80ab 	bne.w	8015072 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8014f1c:	687b      	ldr	r3, [r7, #4]
 8014f1e:	689b      	ldr	r3, [r3, #8]
 8014f20:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8014f24:	d117      	bne.n	8014f56 <UART_Receive_IT+0x50>
 8014f26:	687b      	ldr	r3, [r7, #4]
 8014f28:	691b      	ldr	r3, [r3, #16]
 8014f2a:	2b00      	cmp	r3, #0
 8014f2c:	d113      	bne.n	8014f56 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8014f2e:	2300      	movs	r3, #0
 8014f30:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8014f32:	687b      	ldr	r3, [r7, #4]
 8014f34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8014f36:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8014f38:	687b      	ldr	r3, [r7, #4]
 8014f3a:	681b      	ldr	r3, [r3, #0]
 8014f3c:	685b      	ldr	r3, [r3, #4]
 8014f3e:	b29b      	uxth	r3, r3
 8014f40:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8014f44:	b29a      	uxth	r2, r3
 8014f46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014f48:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8014f4a:	687b      	ldr	r3, [r7, #4]
 8014f4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8014f4e:	1c9a      	adds	r2, r3, #2
 8014f50:	687b      	ldr	r3, [r7, #4]
 8014f52:	629a      	str	r2, [r3, #40]	@ 0x28
 8014f54:	e026      	b.n	8014fa4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8014f56:	687b      	ldr	r3, [r7, #4]
 8014f58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8014f5a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8014f5c:	2300      	movs	r3, #0
 8014f5e:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8014f60:	687b      	ldr	r3, [r7, #4]
 8014f62:	689b      	ldr	r3, [r3, #8]
 8014f64:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8014f68:	d007      	beq.n	8014f7a <UART_Receive_IT+0x74>
 8014f6a:	687b      	ldr	r3, [r7, #4]
 8014f6c:	689b      	ldr	r3, [r3, #8]
 8014f6e:	2b00      	cmp	r3, #0
 8014f70:	d10a      	bne.n	8014f88 <UART_Receive_IT+0x82>
 8014f72:	687b      	ldr	r3, [r7, #4]
 8014f74:	691b      	ldr	r3, [r3, #16]
 8014f76:	2b00      	cmp	r3, #0
 8014f78:	d106      	bne.n	8014f88 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8014f7a:	687b      	ldr	r3, [r7, #4]
 8014f7c:	681b      	ldr	r3, [r3, #0]
 8014f7e:	685b      	ldr	r3, [r3, #4]
 8014f80:	b2da      	uxtb	r2, r3
 8014f82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014f84:	701a      	strb	r2, [r3, #0]
 8014f86:	e008      	b.n	8014f9a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8014f88:	687b      	ldr	r3, [r7, #4]
 8014f8a:	681b      	ldr	r3, [r3, #0]
 8014f8c:	685b      	ldr	r3, [r3, #4]
 8014f8e:	b2db      	uxtb	r3, r3
 8014f90:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8014f94:	b2da      	uxtb	r2, r3
 8014f96:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014f98:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8014f9a:	687b      	ldr	r3, [r7, #4]
 8014f9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8014f9e:	1c5a      	adds	r2, r3, #1
 8014fa0:	687b      	ldr	r3, [r7, #4]
 8014fa2:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8014fa4:	687b      	ldr	r3, [r7, #4]
 8014fa6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8014fa8:	b29b      	uxth	r3, r3
 8014faa:	3b01      	subs	r3, #1
 8014fac:	b29b      	uxth	r3, r3
 8014fae:	687a      	ldr	r2, [r7, #4]
 8014fb0:	4619      	mov	r1, r3
 8014fb2:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8014fb4:	2b00      	cmp	r3, #0
 8014fb6:	d15a      	bne.n	801506e <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8014fb8:	687b      	ldr	r3, [r7, #4]
 8014fba:	681b      	ldr	r3, [r3, #0]
 8014fbc:	68da      	ldr	r2, [r3, #12]
 8014fbe:	687b      	ldr	r3, [r7, #4]
 8014fc0:	681b      	ldr	r3, [r3, #0]
 8014fc2:	f022 0220 	bic.w	r2, r2, #32
 8014fc6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8014fc8:	687b      	ldr	r3, [r7, #4]
 8014fca:	681b      	ldr	r3, [r3, #0]
 8014fcc:	68da      	ldr	r2, [r3, #12]
 8014fce:	687b      	ldr	r3, [r7, #4]
 8014fd0:	681b      	ldr	r3, [r3, #0]
 8014fd2:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8014fd6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8014fd8:	687b      	ldr	r3, [r7, #4]
 8014fda:	681b      	ldr	r3, [r3, #0]
 8014fdc:	695a      	ldr	r2, [r3, #20]
 8014fde:	687b      	ldr	r3, [r7, #4]
 8014fe0:	681b      	ldr	r3, [r3, #0]
 8014fe2:	f022 0201 	bic.w	r2, r2, #1
 8014fe6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8014fe8:	687b      	ldr	r3, [r7, #4]
 8014fea:	2220      	movs	r2, #32
 8014fec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8014ff0:	687b      	ldr	r3, [r7, #4]
 8014ff2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8014ff4:	2b01      	cmp	r3, #1
 8014ff6:	d135      	bne.n	8015064 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8014ff8:	687b      	ldr	r3, [r7, #4]
 8014ffa:	2200      	movs	r2, #0
 8014ffc:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8014ffe:	687b      	ldr	r3, [r7, #4]
 8015000:	681b      	ldr	r3, [r3, #0]
 8015002:	330c      	adds	r3, #12
 8015004:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015006:	697b      	ldr	r3, [r7, #20]
 8015008:	e853 3f00 	ldrex	r3, [r3]
 801500c:	613b      	str	r3, [r7, #16]
   return(result);
 801500e:	693b      	ldr	r3, [r7, #16]
 8015010:	f023 0310 	bic.w	r3, r3, #16
 8015014:	627b      	str	r3, [r7, #36]	@ 0x24
 8015016:	687b      	ldr	r3, [r7, #4]
 8015018:	681b      	ldr	r3, [r3, #0]
 801501a:	330c      	adds	r3, #12
 801501c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801501e:	623a      	str	r2, [r7, #32]
 8015020:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015022:	69f9      	ldr	r1, [r7, #28]
 8015024:	6a3a      	ldr	r2, [r7, #32]
 8015026:	e841 2300 	strex	r3, r2, [r1]
 801502a:	61bb      	str	r3, [r7, #24]
   return(result);
 801502c:	69bb      	ldr	r3, [r7, #24]
 801502e:	2b00      	cmp	r3, #0
 8015030:	d1e5      	bne.n	8014ffe <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8015032:	687b      	ldr	r3, [r7, #4]
 8015034:	681b      	ldr	r3, [r3, #0]
 8015036:	681b      	ldr	r3, [r3, #0]
 8015038:	f003 0310 	and.w	r3, r3, #16
 801503c:	2b10      	cmp	r3, #16
 801503e:	d10a      	bne.n	8015056 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8015040:	2300      	movs	r3, #0
 8015042:	60fb      	str	r3, [r7, #12]
 8015044:	687b      	ldr	r3, [r7, #4]
 8015046:	681b      	ldr	r3, [r3, #0]
 8015048:	681b      	ldr	r3, [r3, #0]
 801504a:	60fb      	str	r3, [r7, #12]
 801504c:	687b      	ldr	r3, [r7, #4]
 801504e:	681b      	ldr	r3, [r3, #0]
 8015050:	685b      	ldr	r3, [r3, #4]
 8015052:	60fb      	str	r3, [r7, #12]
 8015054:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8015056:	687b      	ldr	r3, [r7, #4]
 8015058:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 801505a:	4619      	mov	r1, r3
 801505c:	6878      	ldr	r0, [r7, #4]
 801505e:	f7ff fdbb 	bl	8014bd8 <HAL_UARTEx_RxEventCallback>
 8015062:	e002      	b.n	801506a <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8015064:	6878      	ldr	r0, [r7, #4]
 8015066:	f7f6 fb99 	bl	800b79c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 801506a:	2300      	movs	r3, #0
 801506c:	e002      	b.n	8015074 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 801506e:	2300      	movs	r3, #0
 8015070:	e000      	b.n	8015074 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8015072:	2302      	movs	r3, #2
  }
}
 8015074:	4618      	mov	r0, r3
 8015076:	3730      	adds	r7, #48	@ 0x30
 8015078:	46bd      	mov	sp, r7
 801507a:	bd80      	pop	{r7, pc}

0801507c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 801507c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8015080:	b0c0      	sub	sp, #256	@ 0x100
 8015082:	af00      	add	r7, sp, #0
 8015084:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8015088:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 801508c:	681b      	ldr	r3, [r3, #0]
 801508e:	691b      	ldr	r3, [r3, #16]
 8015090:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8015094:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8015098:	68d9      	ldr	r1, [r3, #12]
 801509a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 801509e:	681a      	ldr	r2, [r3, #0]
 80150a0:	ea40 0301 	orr.w	r3, r0, r1
 80150a4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80150a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80150aa:	689a      	ldr	r2, [r3, #8]
 80150ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80150b0:	691b      	ldr	r3, [r3, #16]
 80150b2:	431a      	orrs	r2, r3
 80150b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80150b8:	695b      	ldr	r3, [r3, #20]
 80150ba:	431a      	orrs	r2, r3
 80150bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80150c0:	69db      	ldr	r3, [r3, #28]
 80150c2:	4313      	orrs	r3, r2
 80150c4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80150c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80150cc:	681b      	ldr	r3, [r3, #0]
 80150ce:	68db      	ldr	r3, [r3, #12]
 80150d0:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80150d4:	f021 010c 	bic.w	r1, r1, #12
 80150d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80150dc:	681a      	ldr	r2, [r3, #0]
 80150de:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80150e2:	430b      	orrs	r3, r1
 80150e4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80150e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80150ea:	681b      	ldr	r3, [r3, #0]
 80150ec:	695b      	ldr	r3, [r3, #20]
 80150ee:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80150f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80150f6:	6999      	ldr	r1, [r3, #24]
 80150f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80150fc:	681a      	ldr	r2, [r3, #0]
 80150fe:	ea40 0301 	orr.w	r3, r0, r1
 8015102:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8015104:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8015108:	681a      	ldr	r2, [r3, #0]
 801510a:	4b8f      	ldr	r3, [pc, #572]	@ (8015348 <UART_SetConfig+0x2cc>)
 801510c:	429a      	cmp	r2, r3
 801510e:	d005      	beq.n	801511c <UART_SetConfig+0xa0>
 8015110:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8015114:	681a      	ldr	r2, [r3, #0]
 8015116:	4b8d      	ldr	r3, [pc, #564]	@ (801534c <UART_SetConfig+0x2d0>)
 8015118:	429a      	cmp	r2, r3
 801511a:	d104      	bne.n	8015126 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 801511c:	f7fd f9dc 	bl	80124d8 <HAL_RCC_GetPCLK2Freq>
 8015120:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8015124:	e003      	b.n	801512e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8015126:	f7fd f9c3 	bl	80124b0 <HAL_RCC_GetPCLK1Freq>
 801512a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 801512e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8015132:	69db      	ldr	r3, [r3, #28]
 8015134:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8015138:	f040 810c 	bne.w	8015354 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 801513c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8015140:	2200      	movs	r2, #0
 8015142:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8015146:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 801514a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 801514e:	4622      	mov	r2, r4
 8015150:	462b      	mov	r3, r5
 8015152:	1891      	adds	r1, r2, r2
 8015154:	65b9      	str	r1, [r7, #88]	@ 0x58
 8015156:	415b      	adcs	r3, r3
 8015158:	65fb      	str	r3, [r7, #92]	@ 0x5c
 801515a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 801515e:	4621      	mov	r1, r4
 8015160:	eb12 0801 	adds.w	r8, r2, r1
 8015164:	4629      	mov	r1, r5
 8015166:	eb43 0901 	adc.w	r9, r3, r1
 801516a:	f04f 0200 	mov.w	r2, #0
 801516e:	f04f 0300 	mov.w	r3, #0
 8015172:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8015176:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 801517a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 801517e:	4690      	mov	r8, r2
 8015180:	4699      	mov	r9, r3
 8015182:	4623      	mov	r3, r4
 8015184:	eb18 0303 	adds.w	r3, r8, r3
 8015188:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 801518c:	462b      	mov	r3, r5
 801518e:	eb49 0303 	adc.w	r3, r9, r3
 8015192:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8015196:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 801519a:	685b      	ldr	r3, [r3, #4]
 801519c:	2200      	movs	r2, #0
 801519e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80151a2:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80151a6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80151aa:	460b      	mov	r3, r1
 80151ac:	18db      	adds	r3, r3, r3
 80151ae:	653b      	str	r3, [r7, #80]	@ 0x50
 80151b0:	4613      	mov	r3, r2
 80151b2:	eb42 0303 	adc.w	r3, r2, r3
 80151b6:	657b      	str	r3, [r7, #84]	@ 0x54
 80151b8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80151bc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80151c0:	f7eb fe70 	bl	8000ea4 <__aeabi_uldivmod>
 80151c4:	4602      	mov	r2, r0
 80151c6:	460b      	mov	r3, r1
 80151c8:	4b61      	ldr	r3, [pc, #388]	@ (8015350 <UART_SetConfig+0x2d4>)
 80151ca:	fba3 2302 	umull	r2, r3, r3, r2
 80151ce:	095b      	lsrs	r3, r3, #5
 80151d0:	011c      	lsls	r4, r3, #4
 80151d2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80151d6:	2200      	movs	r2, #0
 80151d8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80151dc:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80151e0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80151e4:	4642      	mov	r2, r8
 80151e6:	464b      	mov	r3, r9
 80151e8:	1891      	adds	r1, r2, r2
 80151ea:	64b9      	str	r1, [r7, #72]	@ 0x48
 80151ec:	415b      	adcs	r3, r3
 80151ee:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80151f0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80151f4:	4641      	mov	r1, r8
 80151f6:	eb12 0a01 	adds.w	sl, r2, r1
 80151fa:	4649      	mov	r1, r9
 80151fc:	eb43 0b01 	adc.w	fp, r3, r1
 8015200:	f04f 0200 	mov.w	r2, #0
 8015204:	f04f 0300 	mov.w	r3, #0
 8015208:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 801520c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8015210:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8015214:	4692      	mov	sl, r2
 8015216:	469b      	mov	fp, r3
 8015218:	4643      	mov	r3, r8
 801521a:	eb1a 0303 	adds.w	r3, sl, r3
 801521e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8015222:	464b      	mov	r3, r9
 8015224:	eb4b 0303 	adc.w	r3, fp, r3
 8015228:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 801522c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8015230:	685b      	ldr	r3, [r3, #4]
 8015232:	2200      	movs	r2, #0
 8015234:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8015238:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 801523c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8015240:	460b      	mov	r3, r1
 8015242:	18db      	adds	r3, r3, r3
 8015244:	643b      	str	r3, [r7, #64]	@ 0x40
 8015246:	4613      	mov	r3, r2
 8015248:	eb42 0303 	adc.w	r3, r2, r3
 801524c:	647b      	str	r3, [r7, #68]	@ 0x44
 801524e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8015252:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8015256:	f7eb fe25 	bl	8000ea4 <__aeabi_uldivmod>
 801525a:	4602      	mov	r2, r0
 801525c:	460b      	mov	r3, r1
 801525e:	4611      	mov	r1, r2
 8015260:	4b3b      	ldr	r3, [pc, #236]	@ (8015350 <UART_SetConfig+0x2d4>)
 8015262:	fba3 2301 	umull	r2, r3, r3, r1
 8015266:	095b      	lsrs	r3, r3, #5
 8015268:	2264      	movs	r2, #100	@ 0x64
 801526a:	fb02 f303 	mul.w	r3, r2, r3
 801526e:	1acb      	subs	r3, r1, r3
 8015270:	00db      	lsls	r3, r3, #3
 8015272:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8015276:	4b36      	ldr	r3, [pc, #216]	@ (8015350 <UART_SetConfig+0x2d4>)
 8015278:	fba3 2302 	umull	r2, r3, r3, r2
 801527c:	095b      	lsrs	r3, r3, #5
 801527e:	005b      	lsls	r3, r3, #1
 8015280:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8015284:	441c      	add	r4, r3
 8015286:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 801528a:	2200      	movs	r2, #0
 801528c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8015290:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8015294:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8015298:	4642      	mov	r2, r8
 801529a:	464b      	mov	r3, r9
 801529c:	1891      	adds	r1, r2, r2
 801529e:	63b9      	str	r1, [r7, #56]	@ 0x38
 80152a0:	415b      	adcs	r3, r3
 80152a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80152a4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80152a8:	4641      	mov	r1, r8
 80152aa:	1851      	adds	r1, r2, r1
 80152ac:	6339      	str	r1, [r7, #48]	@ 0x30
 80152ae:	4649      	mov	r1, r9
 80152b0:	414b      	adcs	r3, r1
 80152b2:	637b      	str	r3, [r7, #52]	@ 0x34
 80152b4:	f04f 0200 	mov.w	r2, #0
 80152b8:	f04f 0300 	mov.w	r3, #0
 80152bc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80152c0:	4659      	mov	r1, fp
 80152c2:	00cb      	lsls	r3, r1, #3
 80152c4:	4651      	mov	r1, sl
 80152c6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80152ca:	4651      	mov	r1, sl
 80152cc:	00ca      	lsls	r2, r1, #3
 80152ce:	4610      	mov	r0, r2
 80152d0:	4619      	mov	r1, r3
 80152d2:	4603      	mov	r3, r0
 80152d4:	4642      	mov	r2, r8
 80152d6:	189b      	adds	r3, r3, r2
 80152d8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80152dc:	464b      	mov	r3, r9
 80152de:	460a      	mov	r2, r1
 80152e0:	eb42 0303 	adc.w	r3, r2, r3
 80152e4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80152e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80152ec:	685b      	ldr	r3, [r3, #4]
 80152ee:	2200      	movs	r2, #0
 80152f0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80152f4:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80152f8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80152fc:	460b      	mov	r3, r1
 80152fe:	18db      	adds	r3, r3, r3
 8015300:	62bb      	str	r3, [r7, #40]	@ 0x28
 8015302:	4613      	mov	r3, r2
 8015304:	eb42 0303 	adc.w	r3, r2, r3
 8015308:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801530a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 801530e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8015312:	f7eb fdc7 	bl	8000ea4 <__aeabi_uldivmod>
 8015316:	4602      	mov	r2, r0
 8015318:	460b      	mov	r3, r1
 801531a:	4b0d      	ldr	r3, [pc, #52]	@ (8015350 <UART_SetConfig+0x2d4>)
 801531c:	fba3 1302 	umull	r1, r3, r3, r2
 8015320:	095b      	lsrs	r3, r3, #5
 8015322:	2164      	movs	r1, #100	@ 0x64
 8015324:	fb01 f303 	mul.w	r3, r1, r3
 8015328:	1ad3      	subs	r3, r2, r3
 801532a:	00db      	lsls	r3, r3, #3
 801532c:	3332      	adds	r3, #50	@ 0x32
 801532e:	4a08      	ldr	r2, [pc, #32]	@ (8015350 <UART_SetConfig+0x2d4>)
 8015330:	fba2 2303 	umull	r2, r3, r2, r3
 8015334:	095b      	lsrs	r3, r3, #5
 8015336:	f003 0207 	and.w	r2, r3, #7
 801533a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 801533e:	681b      	ldr	r3, [r3, #0]
 8015340:	4422      	add	r2, r4
 8015342:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8015344:	e106      	b.n	8015554 <UART_SetConfig+0x4d8>
 8015346:	bf00      	nop
 8015348:	40011000 	.word	0x40011000
 801534c:	40011400 	.word	0x40011400
 8015350:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8015354:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8015358:	2200      	movs	r2, #0
 801535a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 801535e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8015362:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8015366:	4642      	mov	r2, r8
 8015368:	464b      	mov	r3, r9
 801536a:	1891      	adds	r1, r2, r2
 801536c:	6239      	str	r1, [r7, #32]
 801536e:	415b      	adcs	r3, r3
 8015370:	627b      	str	r3, [r7, #36]	@ 0x24
 8015372:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8015376:	4641      	mov	r1, r8
 8015378:	1854      	adds	r4, r2, r1
 801537a:	4649      	mov	r1, r9
 801537c:	eb43 0501 	adc.w	r5, r3, r1
 8015380:	f04f 0200 	mov.w	r2, #0
 8015384:	f04f 0300 	mov.w	r3, #0
 8015388:	00eb      	lsls	r3, r5, #3
 801538a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 801538e:	00e2      	lsls	r2, r4, #3
 8015390:	4614      	mov	r4, r2
 8015392:	461d      	mov	r5, r3
 8015394:	4643      	mov	r3, r8
 8015396:	18e3      	adds	r3, r4, r3
 8015398:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 801539c:	464b      	mov	r3, r9
 801539e:	eb45 0303 	adc.w	r3, r5, r3
 80153a2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80153a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80153aa:	685b      	ldr	r3, [r3, #4]
 80153ac:	2200      	movs	r2, #0
 80153ae:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80153b2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80153b6:	f04f 0200 	mov.w	r2, #0
 80153ba:	f04f 0300 	mov.w	r3, #0
 80153be:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80153c2:	4629      	mov	r1, r5
 80153c4:	008b      	lsls	r3, r1, #2
 80153c6:	4621      	mov	r1, r4
 80153c8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80153cc:	4621      	mov	r1, r4
 80153ce:	008a      	lsls	r2, r1, #2
 80153d0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80153d4:	f7eb fd66 	bl	8000ea4 <__aeabi_uldivmod>
 80153d8:	4602      	mov	r2, r0
 80153da:	460b      	mov	r3, r1
 80153dc:	4b60      	ldr	r3, [pc, #384]	@ (8015560 <UART_SetConfig+0x4e4>)
 80153de:	fba3 2302 	umull	r2, r3, r3, r2
 80153e2:	095b      	lsrs	r3, r3, #5
 80153e4:	011c      	lsls	r4, r3, #4
 80153e6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80153ea:	2200      	movs	r2, #0
 80153ec:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80153f0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80153f4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80153f8:	4642      	mov	r2, r8
 80153fa:	464b      	mov	r3, r9
 80153fc:	1891      	adds	r1, r2, r2
 80153fe:	61b9      	str	r1, [r7, #24]
 8015400:	415b      	adcs	r3, r3
 8015402:	61fb      	str	r3, [r7, #28]
 8015404:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8015408:	4641      	mov	r1, r8
 801540a:	1851      	adds	r1, r2, r1
 801540c:	6139      	str	r1, [r7, #16]
 801540e:	4649      	mov	r1, r9
 8015410:	414b      	adcs	r3, r1
 8015412:	617b      	str	r3, [r7, #20]
 8015414:	f04f 0200 	mov.w	r2, #0
 8015418:	f04f 0300 	mov.w	r3, #0
 801541c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8015420:	4659      	mov	r1, fp
 8015422:	00cb      	lsls	r3, r1, #3
 8015424:	4651      	mov	r1, sl
 8015426:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 801542a:	4651      	mov	r1, sl
 801542c:	00ca      	lsls	r2, r1, #3
 801542e:	4610      	mov	r0, r2
 8015430:	4619      	mov	r1, r3
 8015432:	4603      	mov	r3, r0
 8015434:	4642      	mov	r2, r8
 8015436:	189b      	adds	r3, r3, r2
 8015438:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 801543c:	464b      	mov	r3, r9
 801543e:	460a      	mov	r2, r1
 8015440:	eb42 0303 	adc.w	r3, r2, r3
 8015444:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8015448:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 801544c:	685b      	ldr	r3, [r3, #4]
 801544e:	2200      	movs	r2, #0
 8015450:	67bb      	str	r3, [r7, #120]	@ 0x78
 8015452:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8015454:	f04f 0200 	mov.w	r2, #0
 8015458:	f04f 0300 	mov.w	r3, #0
 801545c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8015460:	4649      	mov	r1, r9
 8015462:	008b      	lsls	r3, r1, #2
 8015464:	4641      	mov	r1, r8
 8015466:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 801546a:	4641      	mov	r1, r8
 801546c:	008a      	lsls	r2, r1, #2
 801546e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8015472:	f7eb fd17 	bl	8000ea4 <__aeabi_uldivmod>
 8015476:	4602      	mov	r2, r0
 8015478:	460b      	mov	r3, r1
 801547a:	4611      	mov	r1, r2
 801547c:	4b38      	ldr	r3, [pc, #224]	@ (8015560 <UART_SetConfig+0x4e4>)
 801547e:	fba3 2301 	umull	r2, r3, r3, r1
 8015482:	095b      	lsrs	r3, r3, #5
 8015484:	2264      	movs	r2, #100	@ 0x64
 8015486:	fb02 f303 	mul.w	r3, r2, r3
 801548a:	1acb      	subs	r3, r1, r3
 801548c:	011b      	lsls	r3, r3, #4
 801548e:	3332      	adds	r3, #50	@ 0x32
 8015490:	4a33      	ldr	r2, [pc, #204]	@ (8015560 <UART_SetConfig+0x4e4>)
 8015492:	fba2 2303 	umull	r2, r3, r2, r3
 8015496:	095b      	lsrs	r3, r3, #5
 8015498:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 801549c:	441c      	add	r4, r3
 801549e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80154a2:	2200      	movs	r2, #0
 80154a4:	673b      	str	r3, [r7, #112]	@ 0x70
 80154a6:	677a      	str	r2, [r7, #116]	@ 0x74
 80154a8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80154ac:	4642      	mov	r2, r8
 80154ae:	464b      	mov	r3, r9
 80154b0:	1891      	adds	r1, r2, r2
 80154b2:	60b9      	str	r1, [r7, #8]
 80154b4:	415b      	adcs	r3, r3
 80154b6:	60fb      	str	r3, [r7, #12]
 80154b8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80154bc:	4641      	mov	r1, r8
 80154be:	1851      	adds	r1, r2, r1
 80154c0:	6039      	str	r1, [r7, #0]
 80154c2:	4649      	mov	r1, r9
 80154c4:	414b      	adcs	r3, r1
 80154c6:	607b      	str	r3, [r7, #4]
 80154c8:	f04f 0200 	mov.w	r2, #0
 80154cc:	f04f 0300 	mov.w	r3, #0
 80154d0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80154d4:	4659      	mov	r1, fp
 80154d6:	00cb      	lsls	r3, r1, #3
 80154d8:	4651      	mov	r1, sl
 80154da:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80154de:	4651      	mov	r1, sl
 80154e0:	00ca      	lsls	r2, r1, #3
 80154e2:	4610      	mov	r0, r2
 80154e4:	4619      	mov	r1, r3
 80154e6:	4603      	mov	r3, r0
 80154e8:	4642      	mov	r2, r8
 80154ea:	189b      	adds	r3, r3, r2
 80154ec:	66bb      	str	r3, [r7, #104]	@ 0x68
 80154ee:	464b      	mov	r3, r9
 80154f0:	460a      	mov	r2, r1
 80154f2:	eb42 0303 	adc.w	r3, r2, r3
 80154f6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80154f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80154fc:	685b      	ldr	r3, [r3, #4]
 80154fe:	2200      	movs	r2, #0
 8015500:	663b      	str	r3, [r7, #96]	@ 0x60
 8015502:	667a      	str	r2, [r7, #100]	@ 0x64
 8015504:	f04f 0200 	mov.w	r2, #0
 8015508:	f04f 0300 	mov.w	r3, #0
 801550c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8015510:	4649      	mov	r1, r9
 8015512:	008b      	lsls	r3, r1, #2
 8015514:	4641      	mov	r1, r8
 8015516:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 801551a:	4641      	mov	r1, r8
 801551c:	008a      	lsls	r2, r1, #2
 801551e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8015522:	f7eb fcbf 	bl	8000ea4 <__aeabi_uldivmod>
 8015526:	4602      	mov	r2, r0
 8015528:	460b      	mov	r3, r1
 801552a:	4b0d      	ldr	r3, [pc, #52]	@ (8015560 <UART_SetConfig+0x4e4>)
 801552c:	fba3 1302 	umull	r1, r3, r3, r2
 8015530:	095b      	lsrs	r3, r3, #5
 8015532:	2164      	movs	r1, #100	@ 0x64
 8015534:	fb01 f303 	mul.w	r3, r1, r3
 8015538:	1ad3      	subs	r3, r2, r3
 801553a:	011b      	lsls	r3, r3, #4
 801553c:	3332      	adds	r3, #50	@ 0x32
 801553e:	4a08      	ldr	r2, [pc, #32]	@ (8015560 <UART_SetConfig+0x4e4>)
 8015540:	fba2 2303 	umull	r2, r3, r2, r3
 8015544:	095b      	lsrs	r3, r3, #5
 8015546:	f003 020f 	and.w	r2, r3, #15
 801554a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 801554e:	681b      	ldr	r3, [r3, #0]
 8015550:	4422      	add	r2, r4
 8015552:	609a      	str	r2, [r3, #8]
}
 8015554:	bf00      	nop
 8015556:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 801555a:	46bd      	mov	sp, r7
 801555c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8015560:	51eb851f 	.word	0x51eb851f

08015564 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8015564:	b084      	sub	sp, #16
 8015566:	b580      	push	{r7, lr}
 8015568:	b084      	sub	sp, #16
 801556a:	af00      	add	r7, sp, #0
 801556c:	6078      	str	r0, [r7, #4]
 801556e:	f107 001c 	add.w	r0, r7, #28
 8015572:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8015576:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015578:	2b01      	cmp	r3, #1
 801557a:	d122      	bne.n	80155c2 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 801557c:	687b      	ldr	r3, [r7, #4]
 801557e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8015580:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8015584:	687b      	ldr	r3, [r7, #4]
 8015586:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8015588:	687b      	ldr	r3, [r7, #4]
 801558a:	68db      	ldr	r3, [r3, #12]
 801558c:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8015590:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8015594:	687a      	ldr	r2, [r7, #4]
 8015596:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8015598:	687b      	ldr	r3, [r7, #4]
 801559a:	68db      	ldr	r3, [r3, #12]
 801559c:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80155a0:	687b      	ldr	r3, [r7, #4]
 80155a2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80155a4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80155a6:	2b01      	cmp	r3, #1
 80155a8:	d105      	bne.n	80155b6 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80155aa:	687b      	ldr	r3, [r7, #4]
 80155ac:	68db      	ldr	r3, [r3, #12]
 80155ae:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80155b2:	687b      	ldr	r3, [r7, #4]
 80155b4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80155b6:	6878      	ldr	r0, [r7, #4]
 80155b8:	f001 fbee 	bl	8016d98 <USB_CoreReset>
 80155bc:	4603      	mov	r3, r0
 80155be:	73fb      	strb	r3, [r7, #15]
 80155c0:	e01a      	b.n	80155f8 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80155c2:	687b      	ldr	r3, [r7, #4]
 80155c4:	68db      	ldr	r3, [r3, #12]
 80155c6:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80155ca:	687b      	ldr	r3, [r7, #4]
 80155cc:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80155ce:	6878      	ldr	r0, [r7, #4]
 80155d0:	f001 fbe2 	bl	8016d98 <USB_CoreReset>
 80155d4:	4603      	mov	r3, r0
 80155d6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80155d8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80155da:	2b00      	cmp	r3, #0
 80155dc:	d106      	bne.n	80155ec <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80155de:	687b      	ldr	r3, [r7, #4]
 80155e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80155e2:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80155e6:	687b      	ldr	r3, [r7, #4]
 80155e8:	639a      	str	r2, [r3, #56]	@ 0x38
 80155ea:	e005      	b.n	80155f8 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80155ec:	687b      	ldr	r3, [r7, #4]
 80155ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80155f0:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80155f4:	687b      	ldr	r3, [r7, #4]
 80155f6:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80155f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80155fa:	2b01      	cmp	r3, #1
 80155fc:	d10b      	bne.n	8015616 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80155fe:	687b      	ldr	r3, [r7, #4]
 8015600:	689b      	ldr	r3, [r3, #8]
 8015602:	f043 0206 	orr.w	r2, r3, #6
 8015606:	687b      	ldr	r3, [r7, #4]
 8015608:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 801560a:	687b      	ldr	r3, [r7, #4]
 801560c:	689b      	ldr	r3, [r3, #8]
 801560e:	f043 0220 	orr.w	r2, r3, #32
 8015612:	687b      	ldr	r3, [r7, #4]
 8015614:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8015616:	7bfb      	ldrb	r3, [r7, #15]
}
 8015618:	4618      	mov	r0, r3
 801561a:	3710      	adds	r7, #16
 801561c:	46bd      	mov	sp, r7
 801561e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8015622:	b004      	add	sp, #16
 8015624:	4770      	bx	lr
	...

08015628 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8015628:	b480      	push	{r7}
 801562a:	b087      	sub	sp, #28
 801562c:	af00      	add	r7, sp, #0
 801562e:	60f8      	str	r0, [r7, #12]
 8015630:	60b9      	str	r1, [r7, #8]
 8015632:	4613      	mov	r3, r2
 8015634:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8015636:	79fb      	ldrb	r3, [r7, #7]
 8015638:	2b02      	cmp	r3, #2
 801563a:	d165      	bne.n	8015708 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 801563c:	68bb      	ldr	r3, [r7, #8]
 801563e:	4a41      	ldr	r2, [pc, #260]	@ (8015744 <USB_SetTurnaroundTime+0x11c>)
 8015640:	4293      	cmp	r3, r2
 8015642:	d906      	bls.n	8015652 <USB_SetTurnaroundTime+0x2a>
 8015644:	68bb      	ldr	r3, [r7, #8]
 8015646:	4a40      	ldr	r2, [pc, #256]	@ (8015748 <USB_SetTurnaroundTime+0x120>)
 8015648:	4293      	cmp	r3, r2
 801564a:	d202      	bcs.n	8015652 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 801564c:	230f      	movs	r3, #15
 801564e:	617b      	str	r3, [r7, #20]
 8015650:	e062      	b.n	8015718 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8015652:	68bb      	ldr	r3, [r7, #8]
 8015654:	4a3c      	ldr	r2, [pc, #240]	@ (8015748 <USB_SetTurnaroundTime+0x120>)
 8015656:	4293      	cmp	r3, r2
 8015658:	d306      	bcc.n	8015668 <USB_SetTurnaroundTime+0x40>
 801565a:	68bb      	ldr	r3, [r7, #8]
 801565c:	4a3b      	ldr	r2, [pc, #236]	@ (801574c <USB_SetTurnaroundTime+0x124>)
 801565e:	4293      	cmp	r3, r2
 8015660:	d202      	bcs.n	8015668 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8015662:	230e      	movs	r3, #14
 8015664:	617b      	str	r3, [r7, #20]
 8015666:	e057      	b.n	8015718 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8015668:	68bb      	ldr	r3, [r7, #8]
 801566a:	4a38      	ldr	r2, [pc, #224]	@ (801574c <USB_SetTurnaroundTime+0x124>)
 801566c:	4293      	cmp	r3, r2
 801566e:	d306      	bcc.n	801567e <USB_SetTurnaroundTime+0x56>
 8015670:	68bb      	ldr	r3, [r7, #8]
 8015672:	4a37      	ldr	r2, [pc, #220]	@ (8015750 <USB_SetTurnaroundTime+0x128>)
 8015674:	4293      	cmp	r3, r2
 8015676:	d202      	bcs.n	801567e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8015678:	230d      	movs	r3, #13
 801567a:	617b      	str	r3, [r7, #20]
 801567c:	e04c      	b.n	8015718 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 801567e:	68bb      	ldr	r3, [r7, #8]
 8015680:	4a33      	ldr	r2, [pc, #204]	@ (8015750 <USB_SetTurnaroundTime+0x128>)
 8015682:	4293      	cmp	r3, r2
 8015684:	d306      	bcc.n	8015694 <USB_SetTurnaroundTime+0x6c>
 8015686:	68bb      	ldr	r3, [r7, #8]
 8015688:	4a32      	ldr	r2, [pc, #200]	@ (8015754 <USB_SetTurnaroundTime+0x12c>)
 801568a:	4293      	cmp	r3, r2
 801568c:	d802      	bhi.n	8015694 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 801568e:	230c      	movs	r3, #12
 8015690:	617b      	str	r3, [r7, #20]
 8015692:	e041      	b.n	8015718 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8015694:	68bb      	ldr	r3, [r7, #8]
 8015696:	4a2f      	ldr	r2, [pc, #188]	@ (8015754 <USB_SetTurnaroundTime+0x12c>)
 8015698:	4293      	cmp	r3, r2
 801569a:	d906      	bls.n	80156aa <USB_SetTurnaroundTime+0x82>
 801569c:	68bb      	ldr	r3, [r7, #8]
 801569e:	4a2e      	ldr	r2, [pc, #184]	@ (8015758 <USB_SetTurnaroundTime+0x130>)
 80156a0:	4293      	cmp	r3, r2
 80156a2:	d802      	bhi.n	80156aa <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80156a4:	230b      	movs	r3, #11
 80156a6:	617b      	str	r3, [r7, #20]
 80156a8:	e036      	b.n	8015718 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80156aa:	68bb      	ldr	r3, [r7, #8]
 80156ac:	4a2a      	ldr	r2, [pc, #168]	@ (8015758 <USB_SetTurnaroundTime+0x130>)
 80156ae:	4293      	cmp	r3, r2
 80156b0:	d906      	bls.n	80156c0 <USB_SetTurnaroundTime+0x98>
 80156b2:	68bb      	ldr	r3, [r7, #8]
 80156b4:	4a29      	ldr	r2, [pc, #164]	@ (801575c <USB_SetTurnaroundTime+0x134>)
 80156b6:	4293      	cmp	r3, r2
 80156b8:	d802      	bhi.n	80156c0 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80156ba:	230a      	movs	r3, #10
 80156bc:	617b      	str	r3, [r7, #20]
 80156be:	e02b      	b.n	8015718 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80156c0:	68bb      	ldr	r3, [r7, #8]
 80156c2:	4a26      	ldr	r2, [pc, #152]	@ (801575c <USB_SetTurnaroundTime+0x134>)
 80156c4:	4293      	cmp	r3, r2
 80156c6:	d906      	bls.n	80156d6 <USB_SetTurnaroundTime+0xae>
 80156c8:	68bb      	ldr	r3, [r7, #8]
 80156ca:	4a25      	ldr	r2, [pc, #148]	@ (8015760 <USB_SetTurnaroundTime+0x138>)
 80156cc:	4293      	cmp	r3, r2
 80156ce:	d202      	bcs.n	80156d6 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80156d0:	2309      	movs	r3, #9
 80156d2:	617b      	str	r3, [r7, #20]
 80156d4:	e020      	b.n	8015718 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80156d6:	68bb      	ldr	r3, [r7, #8]
 80156d8:	4a21      	ldr	r2, [pc, #132]	@ (8015760 <USB_SetTurnaroundTime+0x138>)
 80156da:	4293      	cmp	r3, r2
 80156dc:	d306      	bcc.n	80156ec <USB_SetTurnaroundTime+0xc4>
 80156de:	68bb      	ldr	r3, [r7, #8]
 80156e0:	4a20      	ldr	r2, [pc, #128]	@ (8015764 <USB_SetTurnaroundTime+0x13c>)
 80156e2:	4293      	cmp	r3, r2
 80156e4:	d802      	bhi.n	80156ec <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80156e6:	2308      	movs	r3, #8
 80156e8:	617b      	str	r3, [r7, #20]
 80156ea:	e015      	b.n	8015718 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80156ec:	68bb      	ldr	r3, [r7, #8]
 80156ee:	4a1d      	ldr	r2, [pc, #116]	@ (8015764 <USB_SetTurnaroundTime+0x13c>)
 80156f0:	4293      	cmp	r3, r2
 80156f2:	d906      	bls.n	8015702 <USB_SetTurnaroundTime+0xda>
 80156f4:	68bb      	ldr	r3, [r7, #8]
 80156f6:	4a1c      	ldr	r2, [pc, #112]	@ (8015768 <USB_SetTurnaroundTime+0x140>)
 80156f8:	4293      	cmp	r3, r2
 80156fa:	d202      	bcs.n	8015702 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80156fc:	2307      	movs	r3, #7
 80156fe:	617b      	str	r3, [r7, #20]
 8015700:	e00a      	b.n	8015718 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8015702:	2306      	movs	r3, #6
 8015704:	617b      	str	r3, [r7, #20]
 8015706:	e007      	b.n	8015718 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8015708:	79fb      	ldrb	r3, [r7, #7]
 801570a:	2b00      	cmp	r3, #0
 801570c:	d102      	bne.n	8015714 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 801570e:	2309      	movs	r3, #9
 8015710:	617b      	str	r3, [r7, #20]
 8015712:	e001      	b.n	8015718 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8015714:	2309      	movs	r3, #9
 8015716:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8015718:	68fb      	ldr	r3, [r7, #12]
 801571a:	68db      	ldr	r3, [r3, #12]
 801571c:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8015720:	68fb      	ldr	r3, [r7, #12]
 8015722:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8015724:	68fb      	ldr	r3, [r7, #12]
 8015726:	68da      	ldr	r2, [r3, #12]
 8015728:	697b      	ldr	r3, [r7, #20]
 801572a:	029b      	lsls	r3, r3, #10
 801572c:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8015730:	431a      	orrs	r2, r3
 8015732:	68fb      	ldr	r3, [r7, #12]
 8015734:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8015736:	2300      	movs	r3, #0
}
 8015738:	4618      	mov	r0, r3
 801573a:	371c      	adds	r7, #28
 801573c:	46bd      	mov	sp, r7
 801573e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015742:	4770      	bx	lr
 8015744:	00d8acbf 	.word	0x00d8acbf
 8015748:	00e4e1c0 	.word	0x00e4e1c0
 801574c:	00f42400 	.word	0x00f42400
 8015750:	01067380 	.word	0x01067380
 8015754:	011a499f 	.word	0x011a499f
 8015758:	01312cff 	.word	0x01312cff
 801575c:	014ca43f 	.word	0x014ca43f
 8015760:	016e3600 	.word	0x016e3600
 8015764:	01a6ab1f 	.word	0x01a6ab1f
 8015768:	01e84800 	.word	0x01e84800

0801576c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 801576c:	b480      	push	{r7}
 801576e:	b083      	sub	sp, #12
 8015770:	af00      	add	r7, sp, #0
 8015772:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8015774:	687b      	ldr	r3, [r7, #4]
 8015776:	689b      	ldr	r3, [r3, #8]
 8015778:	f043 0201 	orr.w	r2, r3, #1
 801577c:	687b      	ldr	r3, [r7, #4]
 801577e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8015780:	2300      	movs	r3, #0
}
 8015782:	4618      	mov	r0, r3
 8015784:	370c      	adds	r7, #12
 8015786:	46bd      	mov	sp, r7
 8015788:	f85d 7b04 	ldr.w	r7, [sp], #4
 801578c:	4770      	bx	lr

0801578e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 801578e:	b480      	push	{r7}
 8015790:	b083      	sub	sp, #12
 8015792:	af00      	add	r7, sp, #0
 8015794:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8015796:	687b      	ldr	r3, [r7, #4]
 8015798:	689b      	ldr	r3, [r3, #8]
 801579a:	f023 0201 	bic.w	r2, r3, #1
 801579e:	687b      	ldr	r3, [r7, #4]
 80157a0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80157a2:	2300      	movs	r3, #0
}
 80157a4:	4618      	mov	r0, r3
 80157a6:	370c      	adds	r7, #12
 80157a8:	46bd      	mov	sp, r7
 80157aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80157ae:	4770      	bx	lr

080157b0 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80157b0:	b580      	push	{r7, lr}
 80157b2:	b084      	sub	sp, #16
 80157b4:	af00      	add	r7, sp, #0
 80157b6:	6078      	str	r0, [r7, #4]
 80157b8:	460b      	mov	r3, r1
 80157ba:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80157bc:	2300      	movs	r3, #0
 80157be:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80157c0:	687b      	ldr	r3, [r7, #4]
 80157c2:	68db      	ldr	r3, [r3, #12]
 80157c4:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 80157c8:	687b      	ldr	r3, [r7, #4]
 80157ca:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80157cc:	78fb      	ldrb	r3, [r7, #3]
 80157ce:	2b01      	cmp	r3, #1
 80157d0:	d115      	bne.n	80157fe <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80157d2:	687b      	ldr	r3, [r7, #4]
 80157d4:	68db      	ldr	r3, [r3, #12]
 80157d6:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80157da:	687b      	ldr	r3, [r7, #4]
 80157dc:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80157de:	2001      	movs	r0, #1
 80157e0:	f7f6 fbbc 	bl	800bf5c <HAL_Delay>
      ms++;
 80157e4:	68fb      	ldr	r3, [r7, #12]
 80157e6:	3301      	adds	r3, #1
 80157e8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80157ea:	6878      	ldr	r0, [r7, #4]
 80157ec:	f001 fa45 	bl	8016c7a <USB_GetMode>
 80157f0:	4603      	mov	r3, r0
 80157f2:	2b01      	cmp	r3, #1
 80157f4:	d01e      	beq.n	8015834 <USB_SetCurrentMode+0x84>
 80157f6:	68fb      	ldr	r3, [r7, #12]
 80157f8:	2b31      	cmp	r3, #49	@ 0x31
 80157fa:	d9f0      	bls.n	80157de <USB_SetCurrentMode+0x2e>
 80157fc:	e01a      	b.n	8015834 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80157fe:	78fb      	ldrb	r3, [r7, #3]
 8015800:	2b00      	cmp	r3, #0
 8015802:	d115      	bne.n	8015830 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8015804:	687b      	ldr	r3, [r7, #4]
 8015806:	68db      	ldr	r3, [r3, #12]
 8015808:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 801580c:	687b      	ldr	r3, [r7, #4]
 801580e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8015810:	2001      	movs	r0, #1
 8015812:	f7f6 fba3 	bl	800bf5c <HAL_Delay>
      ms++;
 8015816:	68fb      	ldr	r3, [r7, #12]
 8015818:	3301      	adds	r3, #1
 801581a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 801581c:	6878      	ldr	r0, [r7, #4]
 801581e:	f001 fa2c 	bl	8016c7a <USB_GetMode>
 8015822:	4603      	mov	r3, r0
 8015824:	2b00      	cmp	r3, #0
 8015826:	d005      	beq.n	8015834 <USB_SetCurrentMode+0x84>
 8015828:	68fb      	ldr	r3, [r7, #12]
 801582a:	2b31      	cmp	r3, #49	@ 0x31
 801582c:	d9f0      	bls.n	8015810 <USB_SetCurrentMode+0x60>
 801582e:	e001      	b.n	8015834 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8015830:	2301      	movs	r3, #1
 8015832:	e005      	b.n	8015840 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8015834:	68fb      	ldr	r3, [r7, #12]
 8015836:	2b32      	cmp	r3, #50	@ 0x32
 8015838:	d101      	bne.n	801583e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 801583a:	2301      	movs	r3, #1
 801583c:	e000      	b.n	8015840 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 801583e:	2300      	movs	r3, #0
}
 8015840:	4618      	mov	r0, r3
 8015842:	3710      	adds	r7, #16
 8015844:	46bd      	mov	sp, r7
 8015846:	bd80      	pop	{r7, pc}

08015848 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8015848:	b084      	sub	sp, #16
 801584a:	b580      	push	{r7, lr}
 801584c:	b086      	sub	sp, #24
 801584e:	af00      	add	r7, sp, #0
 8015850:	6078      	str	r0, [r7, #4]
 8015852:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8015856:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 801585a:	2300      	movs	r3, #0
 801585c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801585e:	687b      	ldr	r3, [r7, #4]
 8015860:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8015862:	2300      	movs	r3, #0
 8015864:	613b      	str	r3, [r7, #16]
 8015866:	e009      	b.n	801587c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8015868:	687a      	ldr	r2, [r7, #4]
 801586a:	693b      	ldr	r3, [r7, #16]
 801586c:	3340      	adds	r3, #64	@ 0x40
 801586e:	009b      	lsls	r3, r3, #2
 8015870:	4413      	add	r3, r2
 8015872:	2200      	movs	r2, #0
 8015874:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8015876:	693b      	ldr	r3, [r7, #16]
 8015878:	3301      	adds	r3, #1
 801587a:	613b      	str	r3, [r7, #16]
 801587c:	693b      	ldr	r3, [r7, #16]
 801587e:	2b0e      	cmp	r3, #14
 8015880:	d9f2      	bls.n	8015868 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8015882:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8015884:	2b00      	cmp	r3, #0
 8015886:	d11c      	bne.n	80158c2 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8015888:	68fb      	ldr	r3, [r7, #12]
 801588a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 801588e:	685b      	ldr	r3, [r3, #4]
 8015890:	68fa      	ldr	r2, [r7, #12]
 8015892:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8015896:	f043 0302 	orr.w	r3, r3, #2
 801589a:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 801589c:	687b      	ldr	r3, [r7, #4]
 801589e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80158a0:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80158a4:	687b      	ldr	r3, [r7, #4]
 80158a6:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80158a8:	687b      	ldr	r3, [r7, #4]
 80158aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80158ac:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 80158b0:	687b      	ldr	r3, [r7, #4]
 80158b2:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80158b4:	687b      	ldr	r3, [r7, #4]
 80158b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80158b8:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 80158bc:	687b      	ldr	r3, [r7, #4]
 80158be:	639a      	str	r2, [r3, #56]	@ 0x38
 80158c0:	e00b      	b.n	80158da <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80158c2:	687b      	ldr	r3, [r7, #4]
 80158c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80158c6:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 80158ca:	687b      	ldr	r3, [r7, #4]
 80158cc:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80158ce:	687b      	ldr	r3, [r7, #4]
 80158d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80158d2:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 80158d6:	687b      	ldr	r3, [r7, #4]
 80158d8:	639a      	str	r2, [r3, #56]	@ 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80158da:	68fb      	ldr	r3, [r7, #12]
 80158dc:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80158e0:	461a      	mov	r2, r3
 80158e2:	2300      	movs	r3, #0
 80158e4:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80158e6:	68fb      	ldr	r3, [r7, #12]
 80158e8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80158ec:	4619      	mov	r1, r3
 80158ee:	68fb      	ldr	r3, [r7, #12]
 80158f0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80158f4:	461a      	mov	r2, r3
 80158f6:	680b      	ldr	r3, [r1, #0]
 80158f8:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80158fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80158fc:	2b01      	cmp	r3, #1
 80158fe:	d10c      	bne.n	801591a <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8015900:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015902:	2b00      	cmp	r3, #0
 8015904:	d104      	bne.n	8015910 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8015906:	2100      	movs	r1, #0
 8015908:	6878      	ldr	r0, [r7, #4]
 801590a:	f000 f965 	bl	8015bd8 <USB_SetDevSpeed>
 801590e:	e008      	b.n	8015922 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8015910:	2101      	movs	r1, #1
 8015912:	6878      	ldr	r0, [r7, #4]
 8015914:	f000 f960 	bl	8015bd8 <USB_SetDevSpeed>
 8015918:	e003      	b.n	8015922 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 801591a:	2103      	movs	r1, #3
 801591c:	6878      	ldr	r0, [r7, #4]
 801591e:	f000 f95b 	bl	8015bd8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8015922:	2110      	movs	r1, #16
 8015924:	6878      	ldr	r0, [r7, #4]
 8015926:	f000 f8f3 	bl	8015b10 <USB_FlushTxFifo>
 801592a:	4603      	mov	r3, r0
 801592c:	2b00      	cmp	r3, #0
 801592e:	d001      	beq.n	8015934 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8015930:	2301      	movs	r3, #1
 8015932:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8015934:	6878      	ldr	r0, [r7, #4]
 8015936:	f000 f91f 	bl	8015b78 <USB_FlushRxFifo>
 801593a:	4603      	mov	r3, r0
 801593c:	2b00      	cmp	r3, #0
 801593e:	d001      	beq.n	8015944 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8015940:	2301      	movs	r3, #1
 8015942:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8015944:	68fb      	ldr	r3, [r7, #12]
 8015946:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 801594a:	461a      	mov	r2, r3
 801594c:	2300      	movs	r3, #0
 801594e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8015950:	68fb      	ldr	r3, [r7, #12]
 8015952:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8015956:	461a      	mov	r2, r3
 8015958:	2300      	movs	r3, #0
 801595a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 801595c:	68fb      	ldr	r3, [r7, #12]
 801595e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8015962:	461a      	mov	r2, r3
 8015964:	2300      	movs	r3, #0
 8015966:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8015968:	2300      	movs	r3, #0
 801596a:	613b      	str	r3, [r7, #16]
 801596c:	e043      	b.n	80159f6 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 801596e:	693b      	ldr	r3, [r7, #16]
 8015970:	015a      	lsls	r2, r3, #5
 8015972:	68fb      	ldr	r3, [r7, #12]
 8015974:	4413      	add	r3, r2
 8015976:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801597a:	681b      	ldr	r3, [r3, #0]
 801597c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8015980:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8015984:	d118      	bne.n	80159b8 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8015986:	693b      	ldr	r3, [r7, #16]
 8015988:	2b00      	cmp	r3, #0
 801598a:	d10a      	bne.n	80159a2 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 801598c:	693b      	ldr	r3, [r7, #16]
 801598e:	015a      	lsls	r2, r3, #5
 8015990:	68fb      	ldr	r3, [r7, #12]
 8015992:	4413      	add	r3, r2
 8015994:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8015998:	461a      	mov	r2, r3
 801599a:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 801599e:	6013      	str	r3, [r2, #0]
 80159a0:	e013      	b.n	80159ca <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80159a2:	693b      	ldr	r3, [r7, #16]
 80159a4:	015a      	lsls	r2, r3, #5
 80159a6:	68fb      	ldr	r3, [r7, #12]
 80159a8:	4413      	add	r3, r2
 80159aa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80159ae:	461a      	mov	r2, r3
 80159b0:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80159b4:	6013      	str	r3, [r2, #0]
 80159b6:	e008      	b.n	80159ca <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80159b8:	693b      	ldr	r3, [r7, #16]
 80159ba:	015a      	lsls	r2, r3, #5
 80159bc:	68fb      	ldr	r3, [r7, #12]
 80159be:	4413      	add	r3, r2
 80159c0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80159c4:	461a      	mov	r2, r3
 80159c6:	2300      	movs	r3, #0
 80159c8:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80159ca:	693b      	ldr	r3, [r7, #16]
 80159cc:	015a      	lsls	r2, r3, #5
 80159ce:	68fb      	ldr	r3, [r7, #12]
 80159d0:	4413      	add	r3, r2
 80159d2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80159d6:	461a      	mov	r2, r3
 80159d8:	2300      	movs	r3, #0
 80159da:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80159dc:	693b      	ldr	r3, [r7, #16]
 80159de:	015a      	lsls	r2, r3, #5
 80159e0:	68fb      	ldr	r3, [r7, #12]
 80159e2:	4413      	add	r3, r2
 80159e4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80159e8:	461a      	mov	r2, r3
 80159ea:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80159ee:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80159f0:	693b      	ldr	r3, [r7, #16]
 80159f2:	3301      	adds	r3, #1
 80159f4:	613b      	str	r3, [r7, #16]
 80159f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80159f8:	693a      	ldr	r2, [r7, #16]
 80159fa:	429a      	cmp	r2, r3
 80159fc:	d3b7      	bcc.n	801596e <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80159fe:	2300      	movs	r3, #0
 8015a00:	613b      	str	r3, [r7, #16]
 8015a02:	e043      	b.n	8015a8c <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8015a04:	693b      	ldr	r3, [r7, #16]
 8015a06:	015a      	lsls	r2, r3, #5
 8015a08:	68fb      	ldr	r3, [r7, #12]
 8015a0a:	4413      	add	r3, r2
 8015a0c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8015a10:	681b      	ldr	r3, [r3, #0]
 8015a12:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8015a16:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8015a1a:	d118      	bne.n	8015a4e <USB_DevInit+0x206>
    {
      if (i == 0U)
 8015a1c:	693b      	ldr	r3, [r7, #16]
 8015a1e:	2b00      	cmp	r3, #0
 8015a20:	d10a      	bne.n	8015a38 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8015a22:	693b      	ldr	r3, [r7, #16]
 8015a24:	015a      	lsls	r2, r3, #5
 8015a26:	68fb      	ldr	r3, [r7, #12]
 8015a28:	4413      	add	r3, r2
 8015a2a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8015a2e:	461a      	mov	r2, r3
 8015a30:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8015a34:	6013      	str	r3, [r2, #0]
 8015a36:	e013      	b.n	8015a60 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8015a38:	693b      	ldr	r3, [r7, #16]
 8015a3a:	015a      	lsls	r2, r3, #5
 8015a3c:	68fb      	ldr	r3, [r7, #12]
 8015a3e:	4413      	add	r3, r2
 8015a40:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8015a44:	461a      	mov	r2, r3
 8015a46:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8015a4a:	6013      	str	r3, [r2, #0]
 8015a4c:	e008      	b.n	8015a60 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8015a4e:	693b      	ldr	r3, [r7, #16]
 8015a50:	015a      	lsls	r2, r3, #5
 8015a52:	68fb      	ldr	r3, [r7, #12]
 8015a54:	4413      	add	r3, r2
 8015a56:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8015a5a:	461a      	mov	r2, r3
 8015a5c:	2300      	movs	r3, #0
 8015a5e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8015a60:	693b      	ldr	r3, [r7, #16]
 8015a62:	015a      	lsls	r2, r3, #5
 8015a64:	68fb      	ldr	r3, [r7, #12]
 8015a66:	4413      	add	r3, r2
 8015a68:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8015a6c:	461a      	mov	r2, r3
 8015a6e:	2300      	movs	r3, #0
 8015a70:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8015a72:	693b      	ldr	r3, [r7, #16]
 8015a74:	015a      	lsls	r2, r3, #5
 8015a76:	68fb      	ldr	r3, [r7, #12]
 8015a78:	4413      	add	r3, r2
 8015a7a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8015a7e:	461a      	mov	r2, r3
 8015a80:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8015a84:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8015a86:	693b      	ldr	r3, [r7, #16]
 8015a88:	3301      	adds	r3, #1
 8015a8a:	613b      	str	r3, [r7, #16]
 8015a8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015a8e:	693a      	ldr	r2, [r7, #16]
 8015a90:	429a      	cmp	r2, r3
 8015a92:	d3b7      	bcc.n	8015a04 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8015a94:	68fb      	ldr	r3, [r7, #12]
 8015a96:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8015a9a:	691b      	ldr	r3, [r3, #16]
 8015a9c:	68fa      	ldr	r2, [r7, #12]
 8015a9e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8015aa2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8015aa6:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8015aa8:	687b      	ldr	r3, [r7, #4]
 8015aaa:	2200      	movs	r2, #0
 8015aac:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8015aae:	687b      	ldr	r3, [r7, #4]
 8015ab0:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8015ab4:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8015ab6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015ab8:	2b00      	cmp	r3, #0
 8015aba:	d105      	bne.n	8015ac8 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8015abc:	687b      	ldr	r3, [r7, #4]
 8015abe:	699b      	ldr	r3, [r3, #24]
 8015ac0:	f043 0210 	orr.w	r2, r3, #16
 8015ac4:	687b      	ldr	r3, [r7, #4]
 8015ac6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8015ac8:	687b      	ldr	r3, [r7, #4]
 8015aca:	699a      	ldr	r2, [r3, #24]
 8015acc:	4b0f      	ldr	r3, [pc, #60]	@ (8015b0c <USB_DevInit+0x2c4>)
 8015ace:	4313      	orrs	r3, r2
 8015ad0:	687a      	ldr	r2, [r7, #4]
 8015ad2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8015ad4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8015ad6:	2b00      	cmp	r3, #0
 8015ad8:	d005      	beq.n	8015ae6 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8015ada:	687b      	ldr	r3, [r7, #4]
 8015adc:	699b      	ldr	r3, [r3, #24]
 8015ade:	f043 0208 	orr.w	r2, r3, #8
 8015ae2:	687b      	ldr	r3, [r7, #4]
 8015ae4:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8015ae6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8015ae8:	2b01      	cmp	r3, #1
 8015aea:	d107      	bne.n	8015afc <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8015aec:	687b      	ldr	r3, [r7, #4]
 8015aee:	699b      	ldr	r3, [r3, #24]
 8015af0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8015af4:	f043 0304 	orr.w	r3, r3, #4
 8015af8:	687a      	ldr	r2, [r7, #4]
 8015afa:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8015afc:	7dfb      	ldrb	r3, [r7, #23]
}
 8015afe:	4618      	mov	r0, r3
 8015b00:	3718      	adds	r7, #24
 8015b02:	46bd      	mov	sp, r7
 8015b04:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8015b08:	b004      	add	sp, #16
 8015b0a:	4770      	bx	lr
 8015b0c:	803c3800 	.word	0x803c3800

08015b10 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8015b10:	b480      	push	{r7}
 8015b12:	b085      	sub	sp, #20
 8015b14:	af00      	add	r7, sp, #0
 8015b16:	6078      	str	r0, [r7, #4]
 8015b18:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8015b1a:	2300      	movs	r3, #0
 8015b1c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8015b1e:	68fb      	ldr	r3, [r7, #12]
 8015b20:	3301      	adds	r3, #1
 8015b22:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8015b24:	68fb      	ldr	r3, [r7, #12]
 8015b26:	4a13      	ldr	r2, [pc, #76]	@ (8015b74 <USB_FlushTxFifo+0x64>)
 8015b28:	4293      	cmp	r3, r2
 8015b2a:	d901      	bls.n	8015b30 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8015b2c:	2303      	movs	r3, #3
 8015b2e:	e01b      	b.n	8015b68 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8015b30:	687b      	ldr	r3, [r7, #4]
 8015b32:	691b      	ldr	r3, [r3, #16]
 8015b34:	2b00      	cmp	r3, #0
 8015b36:	daf2      	bge.n	8015b1e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8015b38:	2300      	movs	r3, #0
 8015b3a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8015b3c:	683b      	ldr	r3, [r7, #0]
 8015b3e:	019b      	lsls	r3, r3, #6
 8015b40:	f043 0220 	orr.w	r2, r3, #32
 8015b44:	687b      	ldr	r3, [r7, #4]
 8015b46:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8015b48:	68fb      	ldr	r3, [r7, #12]
 8015b4a:	3301      	adds	r3, #1
 8015b4c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8015b4e:	68fb      	ldr	r3, [r7, #12]
 8015b50:	4a08      	ldr	r2, [pc, #32]	@ (8015b74 <USB_FlushTxFifo+0x64>)
 8015b52:	4293      	cmp	r3, r2
 8015b54:	d901      	bls.n	8015b5a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8015b56:	2303      	movs	r3, #3
 8015b58:	e006      	b.n	8015b68 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8015b5a:	687b      	ldr	r3, [r7, #4]
 8015b5c:	691b      	ldr	r3, [r3, #16]
 8015b5e:	f003 0320 	and.w	r3, r3, #32
 8015b62:	2b20      	cmp	r3, #32
 8015b64:	d0f0      	beq.n	8015b48 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8015b66:	2300      	movs	r3, #0
}
 8015b68:	4618      	mov	r0, r3
 8015b6a:	3714      	adds	r7, #20
 8015b6c:	46bd      	mov	sp, r7
 8015b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015b72:	4770      	bx	lr
 8015b74:	00030d40 	.word	0x00030d40

08015b78 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8015b78:	b480      	push	{r7}
 8015b7a:	b085      	sub	sp, #20
 8015b7c:	af00      	add	r7, sp, #0
 8015b7e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8015b80:	2300      	movs	r3, #0
 8015b82:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8015b84:	68fb      	ldr	r3, [r7, #12]
 8015b86:	3301      	adds	r3, #1
 8015b88:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8015b8a:	68fb      	ldr	r3, [r7, #12]
 8015b8c:	4a11      	ldr	r2, [pc, #68]	@ (8015bd4 <USB_FlushRxFifo+0x5c>)
 8015b8e:	4293      	cmp	r3, r2
 8015b90:	d901      	bls.n	8015b96 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8015b92:	2303      	movs	r3, #3
 8015b94:	e018      	b.n	8015bc8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8015b96:	687b      	ldr	r3, [r7, #4]
 8015b98:	691b      	ldr	r3, [r3, #16]
 8015b9a:	2b00      	cmp	r3, #0
 8015b9c:	daf2      	bge.n	8015b84 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8015b9e:	2300      	movs	r3, #0
 8015ba0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8015ba2:	687b      	ldr	r3, [r7, #4]
 8015ba4:	2210      	movs	r2, #16
 8015ba6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8015ba8:	68fb      	ldr	r3, [r7, #12]
 8015baa:	3301      	adds	r3, #1
 8015bac:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8015bae:	68fb      	ldr	r3, [r7, #12]
 8015bb0:	4a08      	ldr	r2, [pc, #32]	@ (8015bd4 <USB_FlushRxFifo+0x5c>)
 8015bb2:	4293      	cmp	r3, r2
 8015bb4:	d901      	bls.n	8015bba <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8015bb6:	2303      	movs	r3, #3
 8015bb8:	e006      	b.n	8015bc8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8015bba:	687b      	ldr	r3, [r7, #4]
 8015bbc:	691b      	ldr	r3, [r3, #16]
 8015bbe:	f003 0310 	and.w	r3, r3, #16
 8015bc2:	2b10      	cmp	r3, #16
 8015bc4:	d0f0      	beq.n	8015ba8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8015bc6:	2300      	movs	r3, #0
}
 8015bc8:	4618      	mov	r0, r3
 8015bca:	3714      	adds	r7, #20
 8015bcc:	46bd      	mov	sp, r7
 8015bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015bd2:	4770      	bx	lr
 8015bd4:	00030d40 	.word	0x00030d40

08015bd8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8015bd8:	b480      	push	{r7}
 8015bda:	b085      	sub	sp, #20
 8015bdc:	af00      	add	r7, sp, #0
 8015bde:	6078      	str	r0, [r7, #4]
 8015be0:	460b      	mov	r3, r1
 8015be2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8015be4:	687b      	ldr	r3, [r7, #4]
 8015be6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8015be8:	68fb      	ldr	r3, [r7, #12]
 8015bea:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8015bee:	681a      	ldr	r2, [r3, #0]
 8015bf0:	78fb      	ldrb	r3, [r7, #3]
 8015bf2:	68f9      	ldr	r1, [r7, #12]
 8015bf4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8015bf8:	4313      	orrs	r3, r2
 8015bfa:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8015bfc:	2300      	movs	r3, #0
}
 8015bfe:	4618      	mov	r0, r3
 8015c00:	3714      	adds	r7, #20
 8015c02:	46bd      	mov	sp, r7
 8015c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015c08:	4770      	bx	lr

08015c0a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8015c0a:	b480      	push	{r7}
 8015c0c:	b087      	sub	sp, #28
 8015c0e:	af00      	add	r7, sp, #0
 8015c10:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8015c12:	687b      	ldr	r3, [r7, #4]
 8015c14:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8015c16:	693b      	ldr	r3, [r7, #16]
 8015c18:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8015c1c:	689b      	ldr	r3, [r3, #8]
 8015c1e:	f003 0306 	and.w	r3, r3, #6
 8015c22:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8015c24:	68fb      	ldr	r3, [r7, #12]
 8015c26:	2b00      	cmp	r3, #0
 8015c28:	d102      	bne.n	8015c30 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8015c2a:	2300      	movs	r3, #0
 8015c2c:	75fb      	strb	r3, [r7, #23]
 8015c2e:	e00a      	b.n	8015c46 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8015c30:	68fb      	ldr	r3, [r7, #12]
 8015c32:	2b02      	cmp	r3, #2
 8015c34:	d002      	beq.n	8015c3c <USB_GetDevSpeed+0x32>
 8015c36:	68fb      	ldr	r3, [r7, #12]
 8015c38:	2b06      	cmp	r3, #6
 8015c3a:	d102      	bne.n	8015c42 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8015c3c:	2302      	movs	r3, #2
 8015c3e:	75fb      	strb	r3, [r7, #23]
 8015c40:	e001      	b.n	8015c46 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8015c42:	230f      	movs	r3, #15
 8015c44:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8015c46:	7dfb      	ldrb	r3, [r7, #23]
}
 8015c48:	4618      	mov	r0, r3
 8015c4a:	371c      	adds	r7, #28
 8015c4c:	46bd      	mov	sp, r7
 8015c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015c52:	4770      	bx	lr

08015c54 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8015c54:	b480      	push	{r7}
 8015c56:	b085      	sub	sp, #20
 8015c58:	af00      	add	r7, sp, #0
 8015c5a:	6078      	str	r0, [r7, #4]
 8015c5c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8015c5e:	687b      	ldr	r3, [r7, #4]
 8015c60:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8015c62:	683b      	ldr	r3, [r7, #0]
 8015c64:	781b      	ldrb	r3, [r3, #0]
 8015c66:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8015c68:	683b      	ldr	r3, [r7, #0]
 8015c6a:	785b      	ldrb	r3, [r3, #1]
 8015c6c:	2b01      	cmp	r3, #1
 8015c6e:	d13a      	bne.n	8015ce6 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8015c70:	68fb      	ldr	r3, [r7, #12]
 8015c72:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8015c76:	69da      	ldr	r2, [r3, #28]
 8015c78:	683b      	ldr	r3, [r7, #0]
 8015c7a:	781b      	ldrb	r3, [r3, #0]
 8015c7c:	f003 030f 	and.w	r3, r3, #15
 8015c80:	2101      	movs	r1, #1
 8015c82:	fa01 f303 	lsl.w	r3, r1, r3
 8015c86:	b29b      	uxth	r3, r3
 8015c88:	68f9      	ldr	r1, [r7, #12]
 8015c8a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8015c8e:	4313      	orrs	r3, r2
 8015c90:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8015c92:	68bb      	ldr	r3, [r7, #8]
 8015c94:	015a      	lsls	r2, r3, #5
 8015c96:	68fb      	ldr	r3, [r7, #12]
 8015c98:	4413      	add	r3, r2
 8015c9a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8015c9e:	681b      	ldr	r3, [r3, #0]
 8015ca0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8015ca4:	2b00      	cmp	r3, #0
 8015ca6:	d155      	bne.n	8015d54 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8015ca8:	68bb      	ldr	r3, [r7, #8]
 8015caa:	015a      	lsls	r2, r3, #5
 8015cac:	68fb      	ldr	r3, [r7, #12]
 8015cae:	4413      	add	r3, r2
 8015cb0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8015cb4:	681a      	ldr	r2, [r3, #0]
 8015cb6:	683b      	ldr	r3, [r7, #0]
 8015cb8:	68db      	ldr	r3, [r3, #12]
 8015cba:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8015cbe:	683b      	ldr	r3, [r7, #0]
 8015cc0:	791b      	ldrb	r3, [r3, #4]
 8015cc2:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8015cc4:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8015cc6:	68bb      	ldr	r3, [r7, #8]
 8015cc8:	059b      	lsls	r3, r3, #22
 8015cca:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8015ccc:	4313      	orrs	r3, r2
 8015cce:	68ba      	ldr	r2, [r7, #8]
 8015cd0:	0151      	lsls	r1, r2, #5
 8015cd2:	68fa      	ldr	r2, [r7, #12]
 8015cd4:	440a      	add	r2, r1
 8015cd6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8015cda:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8015cde:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8015ce2:	6013      	str	r3, [r2, #0]
 8015ce4:	e036      	b.n	8015d54 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8015ce6:	68fb      	ldr	r3, [r7, #12]
 8015ce8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8015cec:	69da      	ldr	r2, [r3, #28]
 8015cee:	683b      	ldr	r3, [r7, #0]
 8015cf0:	781b      	ldrb	r3, [r3, #0]
 8015cf2:	f003 030f 	and.w	r3, r3, #15
 8015cf6:	2101      	movs	r1, #1
 8015cf8:	fa01 f303 	lsl.w	r3, r1, r3
 8015cfc:	041b      	lsls	r3, r3, #16
 8015cfe:	68f9      	ldr	r1, [r7, #12]
 8015d00:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8015d04:	4313      	orrs	r3, r2
 8015d06:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8015d08:	68bb      	ldr	r3, [r7, #8]
 8015d0a:	015a      	lsls	r2, r3, #5
 8015d0c:	68fb      	ldr	r3, [r7, #12]
 8015d0e:	4413      	add	r3, r2
 8015d10:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8015d14:	681b      	ldr	r3, [r3, #0]
 8015d16:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8015d1a:	2b00      	cmp	r3, #0
 8015d1c:	d11a      	bne.n	8015d54 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8015d1e:	68bb      	ldr	r3, [r7, #8]
 8015d20:	015a      	lsls	r2, r3, #5
 8015d22:	68fb      	ldr	r3, [r7, #12]
 8015d24:	4413      	add	r3, r2
 8015d26:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8015d2a:	681a      	ldr	r2, [r3, #0]
 8015d2c:	683b      	ldr	r3, [r7, #0]
 8015d2e:	68db      	ldr	r3, [r3, #12]
 8015d30:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8015d34:	683b      	ldr	r3, [r7, #0]
 8015d36:	791b      	ldrb	r3, [r3, #4]
 8015d38:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8015d3a:	430b      	orrs	r3, r1
 8015d3c:	4313      	orrs	r3, r2
 8015d3e:	68ba      	ldr	r2, [r7, #8]
 8015d40:	0151      	lsls	r1, r2, #5
 8015d42:	68fa      	ldr	r2, [r7, #12]
 8015d44:	440a      	add	r2, r1
 8015d46:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8015d4a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8015d4e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8015d52:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8015d54:	2300      	movs	r3, #0
}
 8015d56:	4618      	mov	r0, r3
 8015d58:	3714      	adds	r7, #20
 8015d5a:	46bd      	mov	sp, r7
 8015d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015d60:	4770      	bx	lr
	...

08015d64 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8015d64:	b480      	push	{r7}
 8015d66:	b085      	sub	sp, #20
 8015d68:	af00      	add	r7, sp, #0
 8015d6a:	6078      	str	r0, [r7, #4]
 8015d6c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8015d6e:	687b      	ldr	r3, [r7, #4]
 8015d70:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8015d72:	683b      	ldr	r3, [r7, #0]
 8015d74:	781b      	ldrb	r3, [r3, #0]
 8015d76:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8015d78:	683b      	ldr	r3, [r7, #0]
 8015d7a:	785b      	ldrb	r3, [r3, #1]
 8015d7c:	2b01      	cmp	r3, #1
 8015d7e:	d161      	bne.n	8015e44 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8015d80:	68bb      	ldr	r3, [r7, #8]
 8015d82:	015a      	lsls	r2, r3, #5
 8015d84:	68fb      	ldr	r3, [r7, #12]
 8015d86:	4413      	add	r3, r2
 8015d88:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8015d8c:	681b      	ldr	r3, [r3, #0]
 8015d8e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8015d92:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8015d96:	d11f      	bne.n	8015dd8 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8015d98:	68bb      	ldr	r3, [r7, #8]
 8015d9a:	015a      	lsls	r2, r3, #5
 8015d9c:	68fb      	ldr	r3, [r7, #12]
 8015d9e:	4413      	add	r3, r2
 8015da0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8015da4:	681b      	ldr	r3, [r3, #0]
 8015da6:	68ba      	ldr	r2, [r7, #8]
 8015da8:	0151      	lsls	r1, r2, #5
 8015daa:	68fa      	ldr	r2, [r7, #12]
 8015dac:	440a      	add	r2, r1
 8015dae:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8015db2:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8015db6:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8015db8:	68bb      	ldr	r3, [r7, #8]
 8015dba:	015a      	lsls	r2, r3, #5
 8015dbc:	68fb      	ldr	r3, [r7, #12]
 8015dbe:	4413      	add	r3, r2
 8015dc0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8015dc4:	681b      	ldr	r3, [r3, #0]
 8015dc6:	68ba      	ldr	r2, [r7, #8]
 8015dc8:	0151      	lsls	r1, r2, #5
 8015dca:	68fa      	ldr	r2, [r7, #12]
 8015dcc:	440a      	add	r2, r1
 8015dce:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8015dd2:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8015dd6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8015dd8:	68fb      	ldr	r3, [r7, #12]
 8015dda:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8015dde:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8015de0:	683b      	ldr	r3, [r7, #0]
 8015de2:	781b      	ldrb	r3, [r3, #0]
 8015de4:	f003 030f 	and.w	r3, r3, #15
 8015de8:	2101      	movs	r1, #1
 8015dea:	fa01 f303 	lsl.w	r3, r1, r3
 8015dee:	b29b      	uxth	r3, r3
 8015df0:	43db      	mvns	r3, r3
 8015df2:	68f9      	ldr	r1, [r7, #12]
 8015df4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8015df8:	4013      	ands	r3, r2
 8015dfa:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8015dfc:	68fb      	ldr	r3, [r7, #12]
 8015dfe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8015e02:	69da      	ldr	r2, [r3, #28]
 8015e04:	683b      	ldr	r3, [r7, #0]
 8015e06:	781b      	ldrb	r3, [r3, #0]
 8015e08:	f003 030f 	and.w	r3, r3, #15
 8015e0c:	2101      	movs	r1, #1
 8015e0e:	fa01 f303 	lsl.w	r3, r1, r3
 8015e12:	b29b      	uxth	r3, r3
 8015e14:	43db      	mvns	r3, r3
 8015e16:	68f9      	ldr	r1, [r7, #12]
 8015e18:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8015e1c:	4013      	ands	r3, r2
 8015e1e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8015e20:	68bb      	ldr	r3, [r7, #8]
 8015e22:	015a      	lsls	r2, r3, #5
 8015e24:	68fb      	ldr	r3, [r7, #12]
 8015e26:	4413      	add	r3, r2
 8015e28:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8015e2c:	681a      	ldr	r2, [r3, #0]
 8015e2e:	68bb      	ldr	r3, [r7, #8]
 8015e30:	0159      	lsls	r1, r3, #5
 8015e32:	68fb      	ldr	r3, [r7, #12]
 8015e34:	440b      	add	r3, r1
 8015e36:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8015e3a:	4619      	mov	r1, r3
 8015e3c:	4b35      	ldr	r3, [pc, #212]	@ (8015f14 <USB_DeactivateEndpoint+0x1b0>)
 8015e3e:	4013      	ands	r3, r2
 8015e40:	600b      	str	r3, [r1, #0]
 8015e42:	e060      	b.n	8015f06 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8015e44:	68bb      	ldr	r3, [r7, #8]
 8015e46:	015a      	lsls	r2, r3, #5
 8015e48:	68fb      	ldr	r3, [r7, #12]
 8015e4a:	4413      	add	r3, r2
 8015e4c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8015e50:	681b      	ldr	r3, [r3, #0]
 8015e52:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8015e56:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8015e5a:	d11f      	bne.n	8015e9c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8015e5c:	68bb      	ldr	r3, [r7, #8]
 8015e5e:	015a      	lsls	r2, r3, #5
 8015e60:	68fb      	ldr	r3, [r7, #12]
 8015e62:	4413      	add	r3, r2
 8015e64:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8015e68:	681b      	ldr	r3, [r3, #0]
 8015e6a:	68ba      	ldr	r2, [r7, #8]
 8015e6c:	0151      	lsls	r1, r2, #5
 8015e6e:	68fa      	ldr	r2, [r7, #12]
 8015e70:	440a      	add	r2, r1
 8015e72:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8015e76:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8015e7a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8015e7c:	68bb      	ldr	r3, [r7, #8]
 8015e7e:	015a      	lsls	r2, r3, #5
 8015e80:	68fb      	ldr	r3, [r7, #12]
 8015e82:	4413      	add	r3, r2
 8015e84:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8015e88:	681b      	ldr	r3, [r3, #0]
 8015e8a:	68ba      	ldr	r2, [r7, #8]
 8015e8c:	0151      	lsls	r1, r2, #5
 8015e8e:	68fa      	ldr	r2, [r7, #12]
 8015e90:	440a      	add	r2, r1
 8015e92:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8015e96:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8015e9a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8015e9c:	68fb      	ldr	r3, [r7, #12]
 8015e9e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8015ea2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8015ea4:	683b      	ldr	r3, [r7, #0]
 8015ea6:	781b      	ldrb	r3, [r3, #0]
 8015ea8:	f003 030f 	and.w	r3, r3, #15
 8015eac:	2101      	movs	r1, #1
 8015eae:	fa01 f303 	lsl.w	r3, r1, r3
 8015eb2:	041b      	lsls	r3, r3, #16
 8015eb4:	43db      	mvns	r3, r3
 8015eb6:	68f9      	ldr	r1, [r7, #12]
 8015eb8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8015ebc:	4013      	ands	r3, r2
 8015ebe:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8015ec0:	68fb      	ldr	r3, [r7, #12]
 8015ec2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8015ec6:	69da      	ldr	r2, [r3, #28]
 8015ec8:	683b      	ldr	r3, [r7, #0]
 8015eca:	781b      	ldrb	r3, [r3, #0]
 8015ecc:	f003 030f 	and.w	r3, r3, #15
 8015ed0:	2101      	movs	r1, #1
 8015ed2:	fa01 f303 	lsl.w	r3, r1, r3
 8015ed6:	041b      	lsls	r3, r3, #16
 8015ed8:	43db      	mvns	r3, r3
 8015eda:	68f9      	ldr	r1, [r7, #12]
 8015edc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8015ee0:	4013      	ands	r3, r2
 8015ee2:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8015ee4:	68bb      	ldr	r3, [r7, #8]
 8015ee6:	015a      	lsls	r2, r3, #5
 8015ee8:	68fb      	ldr	r3, [r7, #12]
 8015eea:	4413      	add	r3, r2
 8015eec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8015ef0:	681a      	ldr	r2, [r3, #0]
 8015ef2:	68bb      	ldr	r3, [r7, #8]
 8015ef4:	0159      	lsls	r1, r3, #5
 8015ef6:	68fb      	ldr	r3, [r7, #12]
 8015ef8:	440b      	add	r3, r1
 8015efa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8015efe:	4619      	mov	r1, r3
 8015f00:	4b05      	ldr	r3, [pc, #20]	@ (8015f18 <USB_DeactivateEndpoint+0x1b4>)
 8015f02:	4013      	ands	r3, r2
 8015f04:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8015f06:	2300      	movs	r3, #0
}
 8015f08:	4618      	mov	r0, r3
 8015f0a:	3714      	adds	r7, #20
 8015f0c:	46bd      	mov	sp, r7
 8015f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015f12:	4770      	bx	lr
 8015f14:	ec337800 	.word	0xec337800
 8015f18:	eff37800 	.word	0xeff37800

08015f1c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8015f1c:	b580      	push	{r7, lr}
 8015f1e:	b08a      	sub	sp, #40	@ 0x28
 8015f20:	af02      	add	r7, sp, #8
 8015f22:	60f8      	str	r0, [r7, #12]
 8015f24:	60b9      	str	r1, [r7, #8]
 8015f26:	4613      	mov	r3, r2
 8015f28:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8015f2a:	68fb      	ldr	r3, [r7, #12]
 8015f2c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8015f2e:	68bb      	ldr	r3, [r7, #8]
 8015f30:	781b      	ldrb	r3, [r3, #0]
 8015f32:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8015f34:	68bb      	ldr	r3, [r7, #8]
 8015f36:	785b      	ldrb	r3, [r3, #1]
 8015f38:	2b01      	cmp	r3, #1
 8015f3a:	f040 815c 	bne.w	80161f6 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8015f3e:	68bb      	ldr	r3, [r7, #8]
 8015f40:	699b      	ldr	r3, [r3, #24]
 8015f42:	2b00      	cmp	r3, #0
 8015f44:	d132      	bne.n	8015fac <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8015f46:	69bb      	ldr	r3, [r7, #24]
 8015f48:	015a      	lsls	r2, r3, #5
 8015f4a:	69fb      	ldr	r3, [r7, #28]
 8015f4c:	4413      	add	r3, r2
 8015f4e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8015f52:	691b      	ldr	r3, [r3, #16]
 8015f54:	69ba      	ldr	r2, [r7, #24]
 8015f56:	0151      	lsls	r1, r2, #5
 8015f58:	69fa      	ldr	r2, [r7, #28]
 8015f5a:	440a      	add	r2, r1
 8015f5c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8015f60:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8015f64:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8015f68:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8015f6a:	69bb      	ldr	r3, [r7, #24]
 8015f6c:	015a      	lsls	r2, r3, #5
 8015f6e:	69fb      	ldr	r3, [r7, #28]
 8015f70:	4413      	add	r3, r2
 8015f72:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8015f76:	691b      	ldr	r3, [r3, #16]
 8015f78:	69ba      	ldr	r2, [r7, #24]
 8015f7a:	0151      	lsls	r1, r2, #5
 8015f7c:	69fa      	ldr	r2, [r7, #28]
 8015f7e:	440a      	add	r2, r1
 8015f80:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8015f84:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8015f88:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8015f8a:	69bb      	ldr	r3, [r7, #24]
 8015f8c:	015a      	lsls	r2, r3, #5
 8015f8e:	69fb      	ldr	r3, [r7, #28]
 8015f90:	4413      	add	r3, r2
 8015f92:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8015f96:	691b      	ldr	r3, [r3, #16]
 8015f98:	69ba      	ldr	r2, [r7, #24]
 8015f9a:	0151      	lsls	r1, r2, #5
 8015f9c:	69fa      	ldr	r2, [r7, #28]
 8015f9e:	440a      	add	r2, r1
 8015fa0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8015fa4:	0cdb      	lsrs	r3, r3, #19
 8015fa6:	04db      	lsls	r3, r3, #19
 8015fa8:	6113      	str	r3, [r2, #16]
 8015faa:	e074      	b.n	8016096 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8015fac:	69bb      	ldr	r3, [r7, #24]
 8015fae:	015a      	lsls	r2, r3, #5
 8015fb0:	69fb      	ldr	r3, [r7, #28]
 8015fb2:	4413      	add	r3, r2
 8015fb4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8015fb8:	691b      	ldr	r3, [r3, #16]
 8015fba:	69ba      	ldr	r2, [r7, #24]
 8015fbc:	0151      	lsls	r1, r2, #5
 8015fbe:	69fa      	ldr	r2, [r7, #28]
 8015fc0:	440a      	add	r2, r1
 8015fc2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8015fc6:	0cdb      	lsrs	r3, r3, #19
 8015fc8:	04db      	lsls	r3, r3, #19
 8015fca:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8015fcc:	69bb      	ldr	r3, [r7, #24]
 8015fce:	015a      	lsls	r2, r3, #5
 8015fd0:	69fb      	ldr	r3, [r7, #28]
 8015fd2:	4413      	add	r3, r2
 8015fd4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8015fd8:	691b      	ldr	r3, [r3, #16]
 8015fda:	69ba      	ldr	r2, [r7, #24]
 8015fdc:	0151      	lsls	r1, r2, #5
 8015fde:	69fa      	ldr	r2, [r7, #28]
 8015fe0:	440a      	add	r2, r1
 8015fe2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8015fe6:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8015fea:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8015fee:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8015ff0:	69bb      	ldr	r3, [r7, #24]
 8015ff2:	015a      	lsls	r2, r3, #5
 8015ff4:	69fb      	ldr	r3, [r7, #28]
 8015ff6:	4413      	add	r3, r2
 8015ff8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8015ffc:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8015ffe:	68bb      	ldr	r3, [r7, #8]
 8016000:	6999      	ldr	r1, [r3, #24]
 8016002:	68bb      	ldr	r3, [r7, #8]
 8016004:	68db      	ldr	r3, [r3, #12]
 8016006:	440b      	add	r3, r1
 8016008:	1e59      	subs	r1, r3, #1
 801600a:	68bb      	ldr	r3, [r7, #8]
 801600c:	68db      	ldr	r3, [r3, #12]
 801600e:	fbb1 f3f3 	udiv	r3, r1, r3
 8016012:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8016014:	4b9d      	ldr	r3, [pc, #628]	@ (801628c <USB_EPStartXfer+0x370>)
 8016016:	400b      	ands	r3, r1
 8016018:	69b9      	ldr	r1, [r7, #24]
 801601a:	0148      	lsls	r0, r1, #5
 801601c:	69f9      	ldr	r1, [r7, #28]
 801601e:	4401      	add	r1, r0
 8016020:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8016024:	4313      	orrs	r3, r2
 8016026:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8016028:	69bb      	ldr	r3, [r7, #24]
 801602a:	015a      	lsls	r2, r3, #5
 801602c:	69fb      	ldr	r3, [r7, #28]
 801602e:	4413      	add	r3, r2
 8016030:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8016034:	691a      	ldr	r2, [r3, #16]
 8016036:	68bb      	ldr	r3, [r7, #8]
 8016038:	699b      	ldr	r3, [r3, #24]
 801603a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801603e:	69b9      	ldr	r1, [r7, #24]
 8016040:	0148      	lsls	r0, r1, #5
 8016042:	69f9      	ldr	r1, [r7, #28]
 8016044:	4401      	add	r1, r0
 8016046:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 801604a:	4313      	orrs	r3, r2
 801604c:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 801604e:	68bb      	ldr	r3, [r7, #8]
 8016050:	791b      	ldrb	r3, [r3, #4]
 8016052:	2b01      	cmp	r3, #1
 8016054:	d11f      	bne.n	8016096 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8016056:	69bb      	ldr	r3, [r7, #24]
 8016058:	015a      	lsls	r2, r3, #5
 801605a:	69fb      	ldr	r3, [r7, #28]
 801605c:	4413      	add	r3, r2
 801605e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8016062:	691b      	ldr	r3, [r3, #16]
 8016064:	69ba      	ldr	r2, [r7, #24]
 8016066:	0151      	lsls	r1, r2, #5
 8016068:	69fa      	ldr	r2, [r7, #28]
 801606a:	440a      	add	r2, r1
 801606c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8016070:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8016074:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8016076:	69bb      	ldr	r3, [r7, #24]
 8016078:	015a      	lsls	r2, r3, #5
 801607a:	69fb      	ldr	r3, [r7, #28]
 801607c:	4413      	add	r3, r2
 801607e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8016082:	691b      	ldr	r3, [r3, #16]
 8016084:	69ba      	ldr	r2, [r7, #24]
 8016086:	0151      	lsls	r1, r2, #5
 8016088:	69fa      	ldr	r2, [r7, #28]
 801608a:	440a      	add	r2, r1
 801608c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8016090:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8016094:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8016096:	79fb      	ldrb	r3, [r7, #7]
 8016098:	2b01      	cmp	r3, #1
 801609a:	d14b      	bne.n	8016134 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 801609c:	68bb      	ldr	r3, [r7, #8]
 801609e:	695b      	ldr	r3, [r3, #20]
 80160a0:	2b00      	cmp	r3, #0
 80160a2:	d009      	beq.n	80160b8 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80160a4:	69bb      	ldr	r3, [r7, #24]
 80160a6:	015a      	lsls	r2, r3, #5
 80160a8:	69fb      	ldr	r3, [r7, #28]
 80160aa:	4413      	add	r3, r2
 80160ac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80160b0:	461a      	mov	r2, r3
 80160b2:	68bb      	ldr	r3, [r7, #8]
 80160b4:	695b      	ldr	r3, [r3, #20]
 80160b6:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80160b8:	68bb      	ldr	r3, [r7, #8]
 80160ba:	791b      	ldrb	r3, [r3, #4]
 80160bc:	2b01      	cmp	r3, #1
 80160be:	d128      	bne.n	8016112 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80160c0:	69fb      	ldr	r3, [r7, #28]
 80160c2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80160c6:	689b      	ldr	r3, [r3, #8]
 80160c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80160cc:	2b00      	cmp	r3, #0
 80160ce:	d110      	bne.n	80160f2 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80160d0:	69bb      	ldr	r3, [r7, #24]
 80160d2:	015a      	lsls	r2, r3, #5
 80160d4:	69fb      	ldr	r3, [r7, #28]
 80160d6:	4413      	add	r3, r2
 80160d8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80160dc:	681b      	ldr	r3, [r3, #0]
 80160de:	69ba      	ldr	r2, [r7, #24]
 80160e0:	0151      	lsls	r1, r2, #5
 80160e2:	69fa      	ldr	r2, [r7, #28]
 80160e4:	440a      	add	r2, r1
 80160e6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80160ea:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80160ee:	6013      	str	r3, [r2, #0]
 80160f0:	e00f      	b.n	8016112 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80160f2:	69bb      	ldr	r3, [r7, #24]
 80160f4:	015a      	lsls	r2, r3, #5
 80160f6:	69fb      	ldr	r3, [r7, #28]
 80160f8:	4413      	add	r3, r2
 80160fa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80160fe:	681b      	ldr	r3, [r3, #0]
 8016100:	69ba      	ldr	r2, [r7, #24]
 8016102:	0151      	lsls	r1, r2, #5
 8016104:	69fa      	ldr	r2, [r7, #28]
 8016106:	440a      	add	r2, r1
 8016108:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 801610c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8016110:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8016112:	69bb      	ldr	r3, [r7, #24]
 8016114:	015a      	lsls	r2, r3, #5
 8016116:	69fb      	ldr	r3, [r7, #28]
 8016118:	4413      	add	r3, r2
 801611a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801611e:	681b      	ldr	r3, [r3, #0]
 8016120:	69ba      	ldr	r2, [r7, #24]
 8016122:	0151      	lsls	r1, r2, #5
 8016124:	69fa      	ldr	r2, [r7, #28]
 8016126:	440a      	add	r2, r1
 8016128:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 801612c:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8016130:	6013      	str	r3, [r2, #0]
 8016132:	e133      	b.n	801639c <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8016134:	69bb      	ldr	r3, [r7, #24]
 8016136:	015a      	lsls	r2, r3, #5
 8016138:	69fb      	ldr	r3, [r7, #28]
 801613a:	4413      	add	r3, r2
 801613c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8016140:	681b      	ldr	r3, [r3, #0]
 8016142:	69ba      	ldr	r2, [r7, #24]
 8016144:	0151      	lsls	r1, r2, #5
 8016146:	69fa      	ldr	r2, [r7, #28]
 8016148:	440a      	add	r2, r1
 801614a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 801614e:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8016152:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8016154:	68bb      	ldr	r3, [r7, #8]
 8016156:	791b      	ldrb	r3, [r3, #4]
 8016158:	2b01      	cmp	r3, #1
 801615a:	d015      	beq.n	8016188 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 801615c:	68bb      	ldr	r3, [r7, #8]
 801615e:	699b      	ldr	r3, [r3, #24]
 8016160:	2b00      	cmp	r3, #0
 8016162:	f000 811b 	beq.w	801639c <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8016166:	69fb      	ldr	r3, [r7, #28]
 8016168:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 801616c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801616e:	68bb      	ldr	r3, [r7, #8]
 8016170:	781b      	ldrb	r3, [r3, #0]
 8016172:	f003 030f 	and.w	r3, r3, #15
 8016176:	2101      	movs	r1, #1
 8016178:	fa01 f303 	lsl.w	r3, r1, r3
 801617c:	69f9      	ldr	r1, [r7, #28]
 801617e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8016182:	4313      	orrs	r3, r2
 8016184:	634b      	str	r3, [r1, #52]	@ 0x34
 8016186:	e109      	b.n	801639c <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8016188:	69fb      	ldr	r3, [r7, #28]
 801618a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 801618e:	689b      	ldr	r3, [r3, #8]
 8016190:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8016194:	2b00      	cmp	r3, #0
 8016196:	d110      	bne.n	80161ba <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8016198:	69bb      	ldr	r3, [r7, #24]
 801619a:	015a      	lsls	r2, r3, #5
 801619c:	69fb      	ldr	r3, [r7, #28]
 801619e:	4413      	add	r3, r2
 80161a0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80161a4:	681b      	ldr	r3, [r3, #0]
 80161a6:	69ba      	ldr	r2, [r7, #24]
 80161a8:	0151      	lsls	r1, r2, #5
 80161aa:	69fa      	ldr	r2, [r7, #28]
 80161ac:	440a      	add	r2, r1
 80161ae:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80161b2:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80161b6:	6013      	str	r3, [r2, #0]
 80161b8:	e00f      	b.n	80161da <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80161ba:	69bb      	ldr	r3, [r7, #24]
 80161bc:	015a      	lsls	r2, r3, #5
 80161be:	69fb      	ldr	r3, [r7, #28]
 80161c0:	4413      	add	r3, r2
 80161c2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80161c6:	681b      	ldr	r3, [r3, #0]
 80161c8:	69ba      	ldr	r2, [r7, #24]
 80161ca:	0151      	lsls	r1, r2, #5
 80161cc:	69fa      	ldr	r2, [r7, #28]
 80161ce:	440a      	add	r2, r1
 80161d0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80161d4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80161d8:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80161da:	68bb      	ldr	r3, [r7, #8]
 80161dc:	6919      	ldr	r1, [r3, #16]
 80161de:	68bb      	ldr	r3, [r7, #8]
 80161e0:	781a      	ldrb	r2, [r3, #0]
 80161e2:	68bb      	ldr	r3, [r7, #8]
 80161e4:	699b      	ldr	r3, [r3, #24]
 80161e6:	b298      	uxth	r0, r3
 80161e8:	79fb      	ldrb	r3, [r7, #7]
 80161ea:	9300      	str	r3, [sp, #0]
 80161ec:	4603      	mov	r3, r0
 80161ee:	68f8      	ldr	r0, [r7, #12]
 80161f0:	f000 fade 	bl	80167b0 <USB_WritePacket>
 80161f4:	e0d2      	b.n	801639c <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80161f6:	69bb      	ldr	r3, [r7, #24]
 80161f8:	015a      	lsls	r2, r3, #5
 80161fa:	69fb      	ldr	r3, [r7, #28]
 80161fc:	4413      	add	r3, r2
 80161fe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8016202:	691b      	ldr	r3, [r3, #16]
 8016204:	69ba      	ldr	r2, [r7, #24]
 8016206:	0151      	lsls	r1, r2, #5
 8016208:	69fa      	ldr	r2, [r7, #28]
 801620a:	440a      	add	r2, r1
 801620c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8016210:	0cdb      	lsrs	r3, r3, #19
 8016212:	04db      	lsls	r3, r3, #19
 8016214:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8016216:	69bb      	ldr	r3, [r7, #24]
 8016218:	015a      	lsls	r2, r3, #5
 801621a:	69fb      	ldr	r3, [r7, #28]
 801621c:	4413      	add	r3, r2
 801621e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8016222:	691b      	ldr	r3, [r3, #16]
 8016224:	69ba      	ldr	r2, [r7, #24]
 8016226:	0151      	lsls	r1, r2, #5
 8016228:	69fa      	ldr	r2, [r7, #28]
 801622a:	440a      	add	r2, r1
 801622c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8016230:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8016234:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8016238:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 801623a:	68bb      	ldr	r3, [r7, #8]
 801623c:	699b      	ldr	r3, [r3, #24]
 801623e:	2b00      	cmp	r3, #0
 8016240:	d126      	bne.n	8016290 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8016242:	69bb      	ldr	r3, [r7, #24]
 8016244:	015a      	lsls	r2, r3, #5
 8016246:	69fb      	ldr	r3, [r7, #28]
 8016248:	4413      	add	r3, r2
 801624a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801624e:	691a      	ldr	r2, [r3, #16]
 8016250:	68bb      	ldr	r3, [r7, #8]
 8016252:	68db      	ldr	r3, [r3, #12]
 8016254:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8016258:	69b9      	ldr	r1, [r7, #24]
 801625a:	0148      	lsls	r0, r1, #5
 801625c:	69f9      	ldr	r1, [r7, #28]
 801625e:	4401      	add	r1, r0
 8016260:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8016264:	4313      	orrs	r3, r2
 8016266:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8016268:	69bb      	ldr	r3, [r7, #24]
 801626a:	015a      	lsls	r2, r3, #5
 801626c:	69fb      	ldr	r3, [r7, #28]
 801626e:	4413      	add	r3, r2
 8016270:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8016274:	691b      	ldr	r3, [r3, #16]
 8016276:	69ba      	ldr	r2, [r7, #24]
 8016278:	0151      	lsls	r1, r2, #5
 801627a:	69fa      	ldr	r2, [r7, #28]
 801627c:	440a      	add	r2, r1
 801627e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8016282:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8016286:	6113      	str	r3, [r2, #16]
 8016288:	e03a      	b.n	8016300 <USB_EPStartXfer+0x3e4>
 801628a:	bf00      	nop
 801628c:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8016290:	68bb      	ldr	r3, [r7, #8]
 8016292:	699a      	ldr	r2, [r3, #24]
 8016294:	68bb      	ldr	r3, [r7, #8]
 8016296:	68db      	ldr	r3, [r3, #12]
 8016298:	4413      	add	r3, r2
 801629a:	1e5a      	subs	r2, r3, #1
 801629c:	68bb      	ldr	r3, [r7, #8]
 801629e:	68db      	ldr	r3, [r3, #12]
 80162a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80162a4:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 80162a6:	68bb      	ldr	r3, [r7, #8]
 80162a8:	68db      	ldr	r3, [r3, #12]
 80162aa:	8afa      	ldrh	r2, [r7, #22]
 80162ac:	fb03 f202 	mul.w	r2, r3, r2
 80162b0:	68bb      	ldr	r3, [r7, #8]
 80162b2:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80162b4:	69bb      	ldr	r3, [r7, #24]
 80162b6:	015a      	lsls	r2, r3, #5
 80162b8:	69fb      	ldr	r3, [r7, #28]
 80162ba:	4413      	add	r3, r2
 80162bc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80162c0:	691a      	ldr	r2, [r3, #16]
 80162c2:	8afb      	ldrh	r3, [r7, #22]
 80162c4:	04d9      	lsls	r1, r3, #19
 80162c6:	4b38      	ldr	r3, [pc, #224]	@ (80163a8 <USB_EPStartXfer+0x48c>)
 80162c8:	400b      	ands	r3, r1
 80162ca:	69b9      	ldr	r1, [r7, #24]
 80162cc:	0148      	lsls	r0, r1, #5
 80162ce:	69f9      	ldr	r1, [r7, #28]
 80162d0:	4401      	add	r1, r0
 80162d2:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80162d6:	4313      	orrs	r3, r2
 80162d8:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 80162da:	69bb      	ldr	r3, [r7, #24]
 80162dc:	015a      	lsls	r2, r3, #5
 80162de:	69fb      	ldr	r3, [r7, #28]
 80162e0:	4413      	add	r3, r2
 80162e2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80162e6:	691a      	ldr	r2, [r3, #16]
 80162e8:	68bb      	ldr	r3, [r7, #8]
 80162ea:	69db      	ldr	r3, [r3, #28]
 80162ec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80162f0:	69b9      	ldr	r1, [r7, #24]
 80162f2:	0148      	lsls	r0, r1, #5
 80162f4:	69f9      	ldr	r1, [r7, #28]
 80162f6:	4401      	add	r1, r0
 80162f8:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80162fc:	4313      	orrs	r3, r2
 80162fe:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8016300:	79fb      	ldrb	r3, [r7, #7]
 8016302:	2b01      	cmp	r3, #1
 8016304:	d10d      	bne.n	8016322 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8016306:	68bb      	ldr	r3, [r7, #8]
 8016308:	691b      	ldr	r3, [r3, #16]
 801630a:	2b00      	cmp	r3, #0
 801630c:	d009      	beq.n	8016322 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 801630e:	68bb      	ldr	r3, [r7, #8]
 8016310:	6919      	ldr	r1, [r3, #16]
 8016312:	69bb      	ldr	r3, [r7, #24]
 8016314:	015a      	lsls	r2, r3, #5
 8016316:	69fb      	ldr	r3, [r7, #28]
 8016318:	4413      	add	r3, r2
 801631a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801631e:	460a      	mov	r2, r1
 8016320:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8016322:	68bb      	ldr	r3, [r7, #8]
 8016324:	791b      	ldrb	r3, [r3, #4]
 8016326:	2b01      	cmp	r3, #1
 8016328:	d128      	bne.n	801637c <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 801632a:	69fb      	ldr	r3, [r7, #28]
 801632c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8016330:	689b      	ldr	r3, [r3, #8]
 8016332:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8016336:	2b00      	cmp	r3, #0
 8016338:	d110      	bne.n	801635c <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 801633a:	69bb      	ldr	r3, [r7, #24]
 801633c:	015a      	lsls	r2, r3, #5
 801633e:	69fb      	ldr	r3, [r7, #28]
 8016340:	4413      	add	r3, r2
 8016342:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8016346:	681b      	ldr	r3, [r3, #0]
 8016348:	69ba      	ldr	r2, [r7, #24]
 801634a:	0151      	lsls	r1, r2, #5
 801634c:	69fa      	ldr	r2, [r7, #28]
 801634e:	440a      	add	r2, r1
 8016350:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8016354:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8016358:	6013      	str	r3, [r2, #0]
 801635a:	e00f      	b.n	801637c <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 801635c:	69bb      	ldr	r3, [r7, #24]
 801635e:	015a      	lsls	r2, r3, #5
 8016360:	69fb      	ldr	r3, [r7, #28]
 8016362:	4413      	add	r3, r2
 8016364:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8016368:	681b      	ldr	r3, [r3, #0]
 801636a:	69ba      	ldr	r2, [r7, #24]
 801636c:	0151      	lsls	r1, r2, #5
 801636e:	69fa      	ldr	r2, [r7, #28]
 8016370:	440a      	add	r2, r1
 8016372:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8016376:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 801637a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 801637c:	69bb      	ldr	r3, [r7, #24]
 801637e:	015a      	lsls	r2, r3, #5
 8016380:	69fb      	ldr	r3, [r7, #28]
 8016382:	4413      	add	r3, r2
 8016384:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8016388:	681b      	ldr	r3, [r3, #0]
 801638a:	69ba      	ldr	r2, [r7, #24]
 801638c:	0151      	lsls	r1, r2, #5
 801638e:	69fa      	ldr	r2, [r7, #28]
 8016390:	440a      	add	r2, r1
 8016392:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8016396:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 801639a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 801639c:	2300      	movs	r3, #0
}
 801639e:	4618      	mov	r0, r3
 80163a0:	3720      	adds	r7, #32
 80163a2:	46bd      	mov	sp, r7
 80163a4:	bd80      	pop	{r7, pc}
 80163a6:	bf00      	nop
 80163a8:	1ff80000 	.word	0x1ff80000

080163ac <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80163ac:	b480      	push	{r7}
 80163ae:	b087      	sub	sp, #28
 80163b0:	af00      	add	r7, sp, #0
 80163b2:	60f8      	str	r0, [r7, #12]
 80163b4:	60b9      	str	r1, [r7, #8]
 80163b6:	4613      	mov	r3, r2
 80163b8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80163ba:	68fb      	ldr	r3, [r7, #12]
 80163bc:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 80163be:	68bb      	ldr	r3, [r7, #8]
 80163c0:	781b      	ldrb	r3, [r3, #0]
 80163c2:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80163c4:	68bb      	ldr	r3, [r7, #8]
 80163c6:	785b      	ldrb	r3, [r3, #1]
 80163c8:	2b01      	cmp	r3, #1
 80163ca:	f040 80ce 	bne.w	801656a <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80163ce:	68bb      	ldr	r3, [r7, #8]
 80163d0:	699b      	ldr	r3, [r3, #24]
 80163d2:	2b00      	cmp	r3, #0
 80163d4:	d132      	bne.n	801643c <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80163d6:	693b      	ldr	r3, [r7, #16]
 80163d8:	015a      	lsls	r2, r3, #5
 80163da:	697b      	ldr	r3, [r7, #20]
 80163dc:	4413      	add	r3, r2
 80163de:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80163e2:	691b      	ldr	r3, [r3, #16]
 80163e4:	693a      	ldr	r2, [r7, #16]
 80163e6:	0151      	lsls	r1, r2, #5
 80163e8:	697a      	ldr	r2, [r7, #20]
 80163ea:	440a      	add	r2, r1
 80163ec:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80163f0:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80163f4:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80163f8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80163fa:	693b      	ldr	r3, [r7, #16]
 80163fc:	015a      	lsls	r2, r3, #5
 80163fe:	697b      	ldr	r3, [r7, #20]
 8016400:	4413      	add	r3, r2
 8016402:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8016406:	691b      	ldr	r3, [r3, #16]
 8016408:	693a      	ldr	r2, [r7, #16]
 801640a:	0151      	lsls	r1, r2, #5
 801640c:	697a      	ldr	r2, [r7, #20]
 801640e:	440a      	add	r2, r1
 8016410:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8016414:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8016418:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 801641a:	693b      	ldr	r3, [r7, #16]
 801641c:	015a      	lsls	r2, r3, #5
 801641e:	697b      	ldr	r3, [r7, #20]
 8016420:	4413      	add	r3, r2
 8016422:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8016426:	691b      	ldr	r3, [r3, #16]
 8016428:	693a      	ldr	r2, [r7, #16]
 801642a:	0151      	lsls	r1, r2, #5
 801642c:	697a      	ldr	r2, [r7, #20]
 801642e:	440a      	add	r2, r1
 8016430:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8016434:	0cdb      	lsrs	r3, r3, #19
 8016436:	04db      	lsls	r3, r3, #19
 8016438:	6113      	str	r3, [r2, #16]
 801643a:	e04e      	b.n	80164da <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 801643c:	693b      	ldr	r3, [r7, #16]
 801643e:	015a      	lsls	r2, r3, #5
 8016440:	697b      	ldr	r3, [r7, #20]
 8016442:	4413      	add	r3, r2
 8016444:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8016448:	691b      	ldr	r3, [r3, #16]
 801644a:	693a      	ldr	r2, [r7, #16]
 801644c:	0151      	lsls	r1, r2, #5
 801644e:	697a      	ldr	r2, [r7, #20]
 8016450:	440a      	add	r2, r1
 8016452:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8016456:	0cdb      	lsrs	r3, r3, #19
 8016458:	04db      	lsls	r3, r3, #19
 801645a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 801645c:	693b      	ldr	r3, [r7, #16]
 801645e:	015a      	lsls	r2, r3, #5
 8016460:	697b      	ldr	r3, [r7, #20]
 8016462:	4413      	add	r3, r2
 8016464:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8016468:	691b      	ldr	r3, [r3, #16]
 801646a:	693a      	ldr	r2, [r7, #16]
 801646c:	0151      	lsls	r1, r2, #5
 801646e:	697a      	ldr	r2, [r7, #20]
 8016470:	440a      	add	r2, r1
 8016472:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8016476:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 801647a:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 801647e:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8016480:	68bb      	ldr	r3, [r7, #8]
 8016482:	699a      	ldr	r2, [r3, #24]
 8016484:	68bb      	ldr	r3, [r7, #8]
 8016486:	68db      	ldr	r3, [r3, #12]
 8016488:	429a      	cmp	r2, r3
 801648a:	d903      	bls.n	8016494 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 801648c:	68bb      	ldr	r3, [r7, #8]
 801648e:	68da      	ldr	r2, [r3, #12]
 8016490:	68bb      	ldr	r3, [r7, #8]
 8016492:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8016494:	693b      	ldr	r3, [r7, #16]
 8016496:	015a      	lsls	r2, r3, #5
 8016498:	697b      	ldr	r3, [r7, #20]
 801649a:	4413      	add	r3, r2
 801649c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80164a0:	691b      	ldr	r3, [r3, #16]
 80164a2:	693a      	ldr	r2, [r7, #16]
 80164a4:	0151      	lsls	r1, r2, #5
 80164a6:	697a      	ldr	r2, [r7, #20]
 80164a8:	440a      	add	r2, r1
 80164aa:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80164ae:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80164b2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80164b4:	693b      	ldr	r3, [r7, #16]
 80164b6:	015a      	lsls	r2, r3, #5
 80164b8:	697b      	ldr	r3, [r7, #20]
 80164ba:	4413      	add	r3, r2
 80164bc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80164c0:	691a      	ldr	r2, [r3, #16]
 80164c2:	68bb      	ldr	r3, [r7, #8]
 80164c4:	699b      	ldr	r3, [r3, #24]
 80164c6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80164ca:	6939      	ldr	r1, [r7, #16]
 80164cc:	0148      	lsls	r0, r1, #5
 80164ce:	6979      	ldr	r1, [r7, #20]
 80164d0:	4401      	add	r1, r0
 80164d2:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80164d6:	4313      	orrs	r3, r2
 80164d8:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80164da:	79fb      	ldrb	r3, [r7, #7]
 80164dc:	2b01      	cmp	r3, #1
 80164de:	d11e      	bne.n	801651e <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80164e0:	68bb      	ldr	r3, [r7, #8]
 80164e2:	695b      	ldr	r3, [r3, #20]
 80164e4:	2b00      	cmp	r3, #0
 80164e6:	d009      	beq.n	80164fc <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80164e8:	693b      	ldr	r3, [r7, #16]
 80164ea:	015a      	lsls	r2, r3, #5
 80164ec:	697b      	ldr	r3, [r7, #20]
 80164ee:	4413      	add	r3, r2
 80164f0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80164f4:	461a      	mov	r2, r3
 80164f6:	68bb      	ldr	r3, [r7, #8]
 80164f8:	695b      	ldr	r3, [r3, #20]
 80164fa:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80164fc:	693b      	ldr	r3, [r7, #16]
 80164fe:	015a      	lsls	r2, r3, #5
 8016500:	697b      	ldr	r3, [r7, #20]
 8016502:	4413      	add	r3, r2
 8016504:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8016508:	681b      	ldr	r3, [r3, #0]
 801650a:	693a      	ldr	r2, [r7, #16]
 801650c:	0151      	lsls	r1, r2, #5
 801650e:	697a      	ldr	r2, [r7, #20]
 8016510:	440a      	add	r2, r1
 8016512:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8016516:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 801651a:	6013      	str	r3, [r2, #0]
 801651c:	e097      	b.n	801664e <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 801651e:	693b      	ldr	r3, [r7, #16]
 8016520:	015a      	lsls	r2, r3, #5
 8016522:	697b      	ldr	r3, [r7, #20]
 8016524:	4413      	add	r3, r2
 8016526:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801652a:	681b      	ldr	r3, [r3, #0]
 801652c:	693a      	ldr	r2, [r7, #16]
 801652e:	0151      	lsls	r1, r2, #5
 8016530:	697a      	ldr	r2, [r7, #20]
 8016532:	440a      	add	r2, r1
 8016534:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8016538:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 801653c:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 801653e:	68bb      	ldr	r3, [r7, #8]
 8016540:	699b      	ldr	r3, [r3, #24]
 8016542:	2b00      	cmp	r3, #0
 8016544:	f000 8083 	beq.w	801664e <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8016548:	697b      	ldr	r3, [r7, #20]
 801654a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 801654e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8016550:	68bb      	ldr	r3, [r7, #8]
 8016552:	781b      	ldrb	r3, [r3, #0]
 8016554:	f003 030f 	and.w	r3, r3, #15
 8016558:	2101      	movs	r1, #1
 801655a:	fa01 f303 	lsl.w	r3, r1, r3
 801655e:	6979      	ldr	r1, [r7, #20]
 8016560:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8016564:	4313      	orrs	r3, r2
 8016566:	634b      	str	r3, [r1, #52]	@ 0x34
 8016568:	e071      	b.n	801664e <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 801656a:	693b      	ldr	r3, [r7, #16]
 801656c:	015a      	lsls	r2, r3, #5
 801656e:	697b      	ldr	r3, [r7, #20]
 8016570:	4413      	add	r3, r2
 8016572:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8016576:	691b      	ldr	r3, [r3, #16]
 8016578:	693a      	ldr	r2, [r7, #16]
 801657a:	0151      	lsls	r1, r2, #5
 801657c:	697a      	ldr	r2, [r7, #20]
 801657e:	440a      	add	r2, r1
 8016580:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8016584:	0cdb      	lsrs	r3, r3, #19
 8016586:	04db      	lsls	r3, r3, #19
 8016588:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 801658a:	693b      	ldr	r3, [r7, #16]
 801658c:	015a      	lsls	r2, r3, #5
 801658e:	697b      	ldr	r3, [r7, #20]
 8016590:	4413      	add	r3, r2
 8016592:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8016596:	691b      	ldr	r3, [r3, #16]
 8016598:	693a      	ldr	r2, [r7, #16]
 801659a:	0151      	lsls	r1, r2, #5
 801659c:	697a      	ldr	r2, [r7, #20]
 801659e:	440a      	add	r2, r1
 80165a0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80165a4:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80165a8:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80165ac:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 80165ae:	68bb      	ldr	r3, [r7, #8]
 80165b0:	699b      	ldr	r3, [r3, #24]
 80165b2:	2b00      	cmp	r3, #0
 80165b4:	d003      	beq.n	80165be <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 80165b6:	68bb      	ldr	r3, [r7, #8]
 80165b8:	68da      	ldr	r2, [r3, #12]
 80165ba:	68bb      	ldr	r3, [r7, #8]
 80165bc:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 80165be:	68bb      	ldr	r3, [r7, #8]
 80165c0:	68da      	ldr	r2, [r3, #12]
 80165c2:	68bb      	ldr	r3, [r7, #8]
 80165c4:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80165c6:	693b      	ldr	r3, [r7, #16]
 80165c8:	015a      	lsls	r2, r3, #5
 80165ca:	697b      	ldr	r3, [r7, #20]
 80165cc:	4413      	add	r3, r2
 80165ce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80165d2:	691b      	ldr	r3, [r3, #16]
 80165d4:	693a      	ldr	r2, [r7, #16]
 80165d6:	0151      	lsls	r1, r2, #5
 80165d8:	697a      	ldr	r2, [r7, #20]
 80165da:	440a      	add	r2, r1
 80165dc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80165e0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80165e4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 80165e6:	693b      	ldr	r3, [r7, #16]
 80165e8:	015a      	lsls	r2, r3, #5
 80165ea:	697b      	ldr	r3, [r7, #20]
 80165ec:	4413      	add	r3, r2
 80165ee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80165f2:	691a      	ldr	r2, [r3, #16]
 80165f4:	68bb      	ldr	r3, [r7, #8]
 80165f6:	69db      	ldr	r3, [r3, #28]
 80165f8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80165fc:	6939      	ldr	r1, [r7, #16]
 80165fe:	0148      	lsls	r0, r1, #5
 8016600:	6979      	ldr	r1, [r7, #20]
 8016602:	4401      	add	r1, r0
 8016604:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8016608:	4313      	orrs	r3, r2
 801660a:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 801660c:	79fb      	ldrb	r3, [r7, #7]
 801660e:	2b01      	cmp	r3, #1
 8016610:	d10d      	bne.n	801662e <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8016612:	68bb      	ldr	r3, [r7, #8]
 8016614:	691b      	ldr	r3, [r3, #16]
 8016616:	2b00      	cmp	r3, #0
 8016618:	d009      	beq.n	801662e <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 801661a:	68bb      	ldr	r3, [r7, #8]
 801661c:	6919      	ldr	r1, [r3, #16]
 801661e:	693b      	ldr	r3, [r7, #16]
 8016620:	015a      	lsls	r2, r3, #5
 8016622:	697b      	ldr	r3, [r7, #20]
 8016624:	4413      	add	r3, r2
 8016626:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801662a:	460a      	mov	r2, r1
 801662c:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 801662e:	693b      	ldr	r3, [r7, #16]
 8016630:	015a      	lsls	r2, r3, #5
 8016632:	697b      	ldr	r3, [r7, #20]
 8016634:	4413      	add	r3, r2
 8016636:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801663a:	681b      	ldr	r3, [r3, #0]
 801663c:	693a      	ldr	r2, [r7, #16]
 801663e:	0151      	lsls	r1, r2, #5
 8016640:	697a      	ldr	r2, [r7, #20]
 8016642:	440a      	add	r2, r1
 8016644:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8016648:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 801664c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 801664e:	2300      	movs	r3, #0
}
 8016650:	4618      	mov	r0, r3
 8016652:	371c      	adds	r7, #28
 8016654:	46bd      	mov	sp, r7
 8016656:	f85d 7b04 	ldr.w	r7, [sp], #4
 801665a:	4770      	bx	lr

0801665c <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 801665c:	b480      	push	{r7}
 801665e:	b087      	sub	sp, #28
 8016660:	af00      	add	r7, sp, #0
 8016662:	6078      	str	r0, [r7, #4]
 8016664:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8016666:	2300      	movs	r3, #0
 8016668:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 801666a:	2300      	movs	r3, #0
 801666c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801666e:	687b      	ldr	r3, [r7, #4]
 8016670:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8016672:	683b      	ldr	r3, [r7, #0]
 8016674:	785b      	ldrb	r3, [r3, #1]
 8016676:	2b01      	cmp	r3, #1
 8016678:	d14a      	bne.n	8016710 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 801667a:	683b      	ldr	r3, [r7, #0]
 801667c:	781b      	ldrb	r3, [r3, #0]
 801667e:	015a      	lsls	r2, r3, #5
 8016680:	693b      	ldr	r3, [r7, #16]
 8016682:	4413      	add	r3, r2
 8016684:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8016688:	681b      	ldr	r3, [r3, #0]
 801668a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 801668e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8016692:	f040 8086 	bne.w	80167a2 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8016696:	683b      	ldr	r3, [r7, #0]
 8016698:	781b      	ldrb	r3, [r3, #0]
 801669a:	015a      	lsls	r2, r3, #5
 801669c:	693b      	ldr	r3, [r7, #16]
 801669e:	4413      	add	r3, r2
 80166a0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80166a4:	681b      	ldr	r3, [r3, #0]
 80166a6:	683a      	ldr	r2, [r7, #0]
 80166a8:	7812      	ldrb	r2, [r2, #0]
 80166aa:	0151      	lsls	r1, r2, #5
 80166ac:	693a      	ldr	r2, [r7, #16]
 80166ae:	440a      	add	r2, r1
 80166b0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80166b4:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80166b8:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 80166ba:	683b      	ldr	r3, [r7, #0]
 80166bc:	781b      	ldrb	r3, [r3, #0]
 80166be:	015a      	lsls	r2, r3, #5
 80166c0:	693b      	ldr	r3, [r7, #16]
 80166c2:	4413      	add	r3, r2
 80166c4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80166c8:	681b      	ldr	r3, [r3, #0]
 80166ca:	683a      	ldr	r2, [r7, #0]
 80166cc:	7812      	ldrb	r2, [r2, #0]
 80166ce:	0151      	lsls	r1, r2, #5
 80166d0:	693a      	ldr	r2, [r7, #16]
 80166d2:	440a      	add	r2, r1
 80166d4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80166d8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80166dc:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80166de:	68fb      	ldr	r3, [r7, #12]
 80166e0:	3301      	adds	r3, #1
 80166e2:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80166e4:	68fb      	ldr	r3, [r7, #12]
 80166e6:	f242 7210 	movw	r2, #10000	@ 0x2710
 80166ea:	4293      	cmp	r3, r2
 80166ec:	d902      	bls.n	80166f4 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 80166ee:	2301      	movs	r3, #1
 80166f0:	75fb      	strb	r3, [r7, #23]
          break;
 80166f2:	e056      	b.n	80167a2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 80166f4:	683b      	ldr	r3, [r7, #0]
 80166f6:	781b      	ldrb	r3, [r3, #0]
 80166f8:	015a      	lsls	r2, r3, #5
 80166fa:	693b      	ldr	r3, [r7, #16]
 80166fc:	4413      	add	r3, r2
 80166fe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8016702:	681b      	ldr	r3, [r3, #0]
 8016704:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8016708:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 801670c:	d0e7      	beq.n	80166de <USB_EPStopXfer+0x82>
 801670e:	e048      	b.n	80167a2 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8016710:	683b      	ldr	r3, [r7, #0]
 8016712:	781b      	ldrb	r3, [r3, #0]
 8016714:	015a      	lsls	r2, r3, #5
 8016716:	693b      	ldr	r3, [r7, #16]
 8016718:	4413      	add	r3, r2
 801671a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801671e:	681b      	ldr	r3, [r3, #0]
 8016720:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8016724:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8016728:	d13b      	bne.n	80167a2 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 801672a:	683b      	ldr	r3, [r7, #0]
 801672c:	781b      	ldrb	r3, [r3, #0]
 801672e:	015a      	lsls	r2, r3, #5
 8016730:	693b      	ldr	r3, [r7, #16]
 8016732:	4413      	add	r3, r2
 8016734:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8016738:	681b      	ldr	r3, [r3, #0]
 801673a:	683a      	ldr	r2, [r7, #0]
 801673c:	7812      	ldrb	r2, [r2, #0]
 801673e:	0151      	lsls	r1, r2, #5
 8016740:	693a      	ldr	r2, [r7, #16]
 8016742:	440a      	add	r2, r1
 8016744:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8016748:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 801674c:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 801674e:	683b      	ldr	r3, [r7, #0]
 8016750:	781b      	ldrb	r3, [r3, #0]
 8016752:	015a      	lsls	r2, r3, #5
 8016754:	693b      	ldr	r3, [r7, #16]
 8016756:	4413      	add	r3, r2
 8016758:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801675c:	681b      	ldr	r3, [r3, #0]
 801675e:	683a      	ldr	r2, [r7, #0]
 8016760:	7812      	ldrb	r2, [r2, #0]
 8016762:	0151      	lsls	r1, r2, #5
 8016764:	693a      	ldr	r2, [r7, #16]
 8016766:	440a      	add	r2, r1
 8016768:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 801676c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8016770:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8016772:	68fb      	ldr	r3, [r7, #12]
 8016774:	3301      	adds	r3, #1
 8016776:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8016778:	68fb      	ldr	r3, [r7, #12]
 801677a:	f242 7210 	movw	r2, #10000	@ 0x2710
 801677e:	4293      	cmp	r3, r2
 8016780:	d902      	bls.n	8016788 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8016782:	2301      	movs	r3, #1
 8016784:	75fb      	strb	r3, [r7, #23]
          break;
 8016786:	e00c      	b.n	80167a2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8016788:	683b      	ldr	r3, [r7, #0]
 801678a:	781b      	ldrb	r3, [r3, #0]
 801678c:	015a      	lsls	r2, r3, #5
 801678e:	693b      	ldr	r3, [r7, #16]
 8016790:	4413      	add	r3, r2
 8016792:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8016796:	681b      	ldr	r3, [r3, #0]
 8016798:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 801679c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80167a0:	d0e7      	beq.n	8016772 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 80167a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80167a4:	4618      	mov	r0, r3
 80167a6:	371c      	adds	r7, #28
 80167a8:	46bd      	mov	sp, r7
 80167aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80167ae:	4770      	bx	lr

080167b0 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80167b0:	b480      	push	{r7}
 80167b2:	b089      	sub	sp, #36	@ 0x24
 80167b4:	af00      	add	r7, sp, #0
 80167b6:	60f8      	str	r0, [r7, #12]
 80167b8:	60b9      	str	r1, [r7, #8]
 80167ba:	4611      	mov	r1, r2
 80167bc:	461a      	mov	r2, r3
 80167be:	460b      	mov	r3, r1
 80167c0:	71fb      	strb	r3, [r7, #7]
 80167c2:	4613      	mov	r3, r2
 80167c4:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80167c6:	68fb      	ldr	r3, [r7, #12]
 80167c8:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80167ca:	68bb      	ldr	r3, [r7, #8]
 80167cc:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80167ce:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80167d2:	2b00      	cmp	r3, #0
 80167d4:	d123      	bne.n	801681e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80167d6:	88bb      	ldrh	r3, [r7, #4]
 80167d8:	3303      	adds	r3, #3
 80167da:	089b      	lsrs	r3, r3, #2
 80167dc:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80167de:	2300      	movs	r3, #0
 80167e0:	61bb      	str	r3, [r7, #24]
 80167e2:	e018      	b.n	8016816 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80167e4:	79fb      	ldrb	r3, [r7, #7]
 80167e6:	031a      	lsls	r2, r3, #12
 80167e8:	697b      	ldr	r3, [r7, #20]
 80167ea:	4413      	add	r3, r2
 80167ec:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80167f0:	461a      	mov	r2, r3
 80167f2:	69fb      	ldr	r3, [r7, #28]
 80167f4:	681b      	ldr	r3, [r3, #0]
 80167f6:	6013      	str	r3, [r2, #0]
      pSrc++;
 80167f8:	69fb      	ldr	r3, [r7, #28]
 80167fa:	3301      	adds	r3, #1
 80167fc:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80167fe:	69fb      	ldr	r3, [r7, #28]
 8016800:	3301      	adds	r3, #1
 8016802:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8016804:	69fb      	ldr	r3, [r7, #28]
 8016806:	3301      	adds	r3, #1
 8016808:	61fb      	str	r3, [r7, #28]
      pSrc++;
 801680a:	69fb      	ldr	r3, [r7, #28]
 801680c:	3301      	adds	r3, #1
 801680e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8016810:	69bb      	ldr	r3, [r7, #24]
 8016812:	3301      	adds	r3, #1
 8016814:	61bb      	str	r3, [r7, #24]
 8016816:	69ba      	ldr	r2, [r7, #24]
 8016818:	693b      	ldr	r3, [r7, #16]
 801681a:	429a      	cmp	r2, r3
 801681c:	d3e2      	bcc.n	80167e4 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 801681e:	2300      	movs	r3, #0
}
 8016820:	4618      	mov	r0, r3
 8016822:	3724      	adds	r7, #36	@ 0x24
 8016824:	46bd      	mov	sp, r7
 8016826:	f85d 7b04 	ldr.w	r7, [sp], #4
 801682a:	4770      	bx	lr

0801682c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 801682c:	b480      	push	{r7}
 801682e:	b08b      	sub	sp, #44	@ 0x2c
 8016830:	af00      	add	r7, sp, #0
 8016832:	60f8      	str	r0, [r7, #12]
 8016834:	60b9      	str	r1, [r7, #8]
 8016836:	4613      	mov	r3, r2
 8016838:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801683a:	68fb      	ldr	r3, [r7, #12]
 801683c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 801683e:	68bb      	ldr	r3, [r7, #8]
 8016840:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8016842:	88fb      	ldrh	r3, [r7, #6]
 8016844:	089b      	lsrs	r3, r3, #2
 8016846:	b29b      	uxth	r3, r3
 8016848:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 801684a:	88fb      	ldrh	r3, [r7, #6]
 801684c:	f003 0303 	and.w	r3, r3, #3
 8016850:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8016852:	2300      	movs	r3, #0
 8016854:	623b      	str	r3, [r7, #32]
 8016856:	e014      	b.n	8016882 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8016858:	69bb      	ldr	r3, [r7, #24]
 801685a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 801685e:	681a      	ldr	r2, [r3, #0]
 8016860:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016862:	601a      	str	r2, [r3, #0]
    pDest++;
 8016864:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016866:	3301      	adds	r3, #1
 8016868:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 801686a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801686c:	3301      	adds	r3, #1
 801686e:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8016870:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016872:	3301      	adds	r3, #1
 8016874:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8016876:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016878:	3301      	adds	r3, #1
 801687a:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 801687c:	6a3b      	ldr	r3, [r7, #32]
 801687e:	3301      	adds	r3, #1
 8016880:	623b      	str	r3, [r7, #32]
 8016882:	6a3a      	ldr	r2, [r7, #32]
 8016884:	697b      	ldr	r3, [r7, #20]
 8016886:	429a      	cmp	r2, r3
 8016888:	d3e6      	bcc.n	8016858 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 801688a:	8bfb      	ldrh	r3, [r7, #30]
 801688c:	2b00      	cmp	r3, #0
 801688e:	d01e      	beq.n	80168ce <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8016890:	2300      	movs	r3, #0
 8016892:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8016894:	69bb      	ldr	r3, [r7, #24]
 8016896:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 801689a:	461a      	mov	r2, r3
 801689c:	f107 0310 	add.w	r3, r7, #16
 80168a0:	6812      	ldr	r2, [r2, #0]
 80168a2:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80168a4:	693a      	ldr	r2, [r7, #16]
 80168a6:	6a3b      	ldr	r3, [r7, #32]
 80168a8:	b2db      	uxtb	r3, r3
 80168aa:	00db      	lsls	r3, r3, #3
 80168ac:	fa22 f303 	lsr.w	r3, r2, r3
 80168b0:	b2da      	uxtb	r2, r3
 80168b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80168b4:	701a      	strb	r2, [r3, #0]
      i++;
 80168b6:	6a3b      	ldr	r3, [r7, #32]
 80168b8:	3301      	adds	r3, #1
 80168ba:	623b      	str	r3, [r7, #32]
      pDest++;
 80168bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80168be:	3301      	adds	r3, #1
 80168c0:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 80168c2:	8bfb      	ldrh	r3, [r7, #30]
 80168c4:	3b01      	subs	r3, #1
 80168c6:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80168c8:	8bfb      	ldrh	r3, [r7, #30]
 80168ca:	2b00      	cmp	r3, #0
 80168cc:	d1ea      	bne.n	80168a4 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80168ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80168d0:	4618      	mov	r0, r3
 80168d2:	372c      	adds	r7, #44	@ 0x2c
 80168d4:	46bd      	mov	sp, r7
 80168d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80168da:	4770      	bx	lr

080168dc <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80168dc:	b480      	push	{r7}
 80168de:	b085      	sub	sp, #20
 80168e0:	af00      	add	r7, sp, #0
 80168e2:	6078      	str	r0, [r7, #4]
 80168e4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80168e6:	687b      	ldr	r3, [r7, #4]
 80168e8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80168ea:	683b      	ldr	r3, [r7, #0]
 80168ec:	781b      	ldrb	r3, [r3, #0]
 80168ee:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80168f0:	683b      	ldr	r3, [r7, #0]
 80168f2:	785b      	ldrb	r3, [r3, #1]
 80168f4:	2b01      	cmp	r3, #1
 80168f6:	d12c      	bne.n	8016952 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80168f8:	68bb      	ldr	r3, [r7, #8]
 80168fa:	015a      	lsls	r2, r3, #5
 80168fc:	68fb      	ldr	r3, [r7, #12]
 80168fe:	4413      	add	r3, r2
 8016900:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8016904:	681b      	ldr	r3, [r3, #0]
 8016906:	2b00      	cmp	r3, #0
 8016908:	db12      	blt.n	8016930 <USB_EPSetStall+0x54>
 801690a:	68bb      	ldr	r3, [r7, #8]
 801690c:	2b00      	cmp	r3, #0
 801690e:	d00f      	beq.n	8016930 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8016910:	68bb      	ldr	r3, [r7, #8]
 8016912:	015a      	lsls	r2, r3, #5
 8016914:	68fb      	ldr	r3, [r7, #12]
 8016916:	4413      	add	r3, r2
 8016918:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801691c:	681b      	ldr	r3, [r3, #0]
 801691e:	68ba      	ldr	r2, [r7, #8]
 8016920:	0151      	lsls	r1, r2, #5
 8016922:	68fa      	ldr	r2, [r7, #12]
 8016924:	440a      	add	r2, r1
 8016926:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 801692a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 801692e:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8016930:	68bb      	ldr	r3, [r7, #8]
 8016932:	015a      	lsls	r2, r3, #5
 8016934:	68fb      	ldr	r3, [r7, #12]
 8016936:	4413      	add	r3, r2
 8016938:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801693c:	681b      	ldr	r3, [r3, #0]
 801693e:	68ba      	ldr	r2, [r7, #8]
 8016940:	0151      	lsls	r1, r2, #5
 8016942:	68fa      	ldr	r2, [r7, #12]
 8016944:	440a      	add	r2, r1
 8016946:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 801694a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 801694e:	6013      	str	r3, [r2, #0]
 8016950:	e02b      	b.n	80169aa <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8016952:	68bb      	ldr	r3, [r7, #8]
 8016954:	015a      	lsls	r2, r3, #5
 8016956:	68fb      	ldr	r3, [r7, #12]
 8016958:	4413      	add	r3, r2
 801695a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801695e:	681b      	ldr	r3, [r3, #0]
 8016960:	2b00      	cmp	r3, #0
 8016962:	db12      	blt.n	801698a <USB_EPSetStall+0xae>
 8016964:	68bb      	ldr	r3, [r7, #8]
 8016966:	2b00      	cmp	r3, #0
 8016968:	d00f      	beq.n	801698a <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 801696a:	68bb      	ldr	r3, [r7, #8]
 801696c:	015a      	lsls	r2, r3, #5
 801696e:	68fb      	ldr	r3, [r7, #12]
 8016970:	4413      	add	r3, r2
 8016972:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8016976:	681b      	ldr	r3, [r3, #0]
 8016978:	68ba      	ldr	r2, [r7, #8]
 801697a:	0151      	lsls	r1, r2, #5
 801697c:	68fa      	ldr	r2, [r7, #12]
 801697e:	440a      	add	r2, r1
 8016980:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8016984:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8016988:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 801698a:	68bb      	ldr	r3, [r7, #8]
 801698c:	015a      	lsls	r2, r3, #5
 801698e:	68fb      	ldr	r3, [r7, #12]
 8016990:	4413      	add	r3, r2
 8016992:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8016996:	681b      	ldr	r3, [r3, #0]
 8016998:	68ba      	ldr	r2, [r7, #8]
 801699a:	0151      	lsls	r1, r2, #5
 801699c:	68fa      	ldr	r2, [r7, #12]
 801699e:	440a      	add	r2, r1
 80169a0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80169a4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80169a8:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80169aa:	2300      	movs	r3, #0
}
 80169ac:	4618      	mov	r0, r3
 80169ae:	3714      	adds	r7, #20
 80169b0:	46bd      	mov	sp, r7
 80169b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80169b6:	4770      	bx	lr

080169b8 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80169b8:	b480      	push	{r7}
 80169ba:	b085      	sub	sp, #20
 80169bc:	af00      	add	r7, sp, #0
 80169be:	6078      	str	r0, [r7, #4]
 80169c0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80169c2:	687b      	ldr	r3, [r7, #4]
 80169c4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80169c6:	683b      	ldr	r3, [r7, #0]
 80169c8:	781b      	ldrb	r3, [r3, #0]
 80169ca:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80169cc:	683b      	ldr	r3, [r7, #0]
 80169ce:	785b      	ldrb	r3, [r3, #1]
 80169d0:	2b01      	cmp	r3, #1
 80169d2:	d128      	bne.n	8016a26 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80169d4:	68bb      	ldr	r3, [r7, #8]
 80169d6:	015a      	lsls	r2, r3, #5
 80169d8:	68fb      	ldr	r3, [r7, #12]
 80169da:	4413      	add	r3, r2
 80169dc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80169e0:	681b      	ldr	r3, [r3, #0]
 80169e2:	68ba      	ldr	r2, [r7, #8]
 80169e4:	0151      	lsls	r1, r2, #5
 80169e6:	68fa      	ldr	r2, [r7, #12]
 80169e8:	440a      	add	r2, r1
 80169ea:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80169ee:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80169f2:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80169f4:	683b      	ldr	r3, [r7, #0]
 80169f6:	791b      	ldrb	r3, [r3, #4]
 80169f8:	2b03      	cmp	r3, #3
 80169fa:	d003      	beq.n	8016a04 <USB_EPClearStall+0x4c>
 80169fc:	683b      	ldr	r3, [r7, #0]
 80169fe:	791b      	ldrb	r3, [r3, #4]
 8016a00:	2b02      	cmp	r3, #2
 8016a02:	d138      	bne.n	8016a76 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8016a04:	68bb      	ldr	r3, [r7, #8]
 8016a06:	015a      	lsls	r2, r3, #5
 8016a08:	68fb      	ldr	r3, [r7, #12]
 8016a0a:	4413      	add	r3, r2
 8016a0c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8016a10:	681b      	ldr	r3, [r3, #0]
 8016a12:	68ba      	ldr	r2, [r7, #8]
 8016a14:	0151      	lsls	r1, r2, #5
 8016a16:	68fa      	ldr	r2, [r7, #12]
 8016a18:	440a      	add	r2, r1
 8016a1a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8016a1e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8016a22:	6013      	str	r3, [r2, #0]
 8016a24:	e027      	b.n	8016a76 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8016a26:	68bb      	ldr	r3, [r7, #8]
 8016a28:	015a      	lsls	r2, r3, #5
 8016a2a:	68fb      	ldr	r3, [r7, #12]
 8016a2c:	4413      	add	r3, r2
 8016a2e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8016a32:	681b      	ldr	r3, [r3, #0]
 8016a34:	68ba      	ldr	r2, [r7, #8]
 8016a36:	0151      	lsls	r1, r2, #5
 8016a38:	68fa      	ldr	r2, [r7, #12]
 8016a3a:	440a      	add	r2, r1
 8016a3c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8016a40:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8016a44:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8016a46:	683b      	ldr	r3, [r7, #0]
 8016a48:	791b      	ldrb	r3, [r3, #4]
 8016a4a:	2b03      	cmp	r3, #3
 8016a4c:	d003      	beq.n	8016a56 <USB_EPClearStall+0x9e>
 8016a4e:	683b      	ldr	r3, [r7, #0]
 8016a50:	791b      	ldrb	r3, [r3, #4]
 8016a52:	2b02      	cmp	r3, #2
 8016a54:	d10f      	bne.n	8016a76 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8016a56:	68bb      	ldr	r3, [r7, #8]
 8016a58:	015a      	lsls	r2, r3, #5
 8016a5a:	68fb      	ldr	r3, [r7, #12]
 8016a5c:	4413      	add	r3, r2
 8016a5e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8016a62:	681b      	ldr	r3, [r3, #0]
 8016a64:	68ba      	ldr	r2, [r7, #8]
 8016a66:	0151      	lsls	r1, r2, #5
 8016a68:	68fa      	ldr	r2, [r7, #12]
 8016a6a:	440a      	add	r2, r1
 8016a6c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8016a70:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8016a74:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8016a76:	2300      	movs	r3, #0
}
 8016a78:	4618      	mov	r0, r3
 8016a7a:	3714      	adds	r7, #20
 8016a7c:	46bd      	mov	sp, r7
 8016a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016a82:	4770      	bx	lr

08016a84 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8016a84:	b480      	push	{r7}
 8016a86:	b085      	sub	sp, #20
 8016a88:	af00      	add	r7, sp, #0
 8016a8a:	6078      	str	r0, [r7, #4]
 8016a8c:	460b      	mov	r3, r1
 8016a8e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8016a90:	687b      	ldr	r3, [r7, #4]
 8016a92:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8016a94:	68fb      	ldr	r3, [r7, #12]
 8016a96:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8016a9a:	681b      	ldr	r3, [r3, #0]
 8016a9c:	68fa      	ldr	r2, [r7, #12]
 8016a9e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8016aa2:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8016aa6:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8016aa8:	68fb      	ldr	r3, [r7, #12]
 8016aaa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8016aae:	681a      	ldr	r2, [r3, #0]
 8016ab0:	78fb      	ldrb	r3, [r7, #3]
 8016ab2:	011b      	lsls	r3, r3, #4
 8016ab4:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8016ab8:	68f9      	ldr	r1, [r7, #12]
 8016aba:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8016abe:	4313      	orrs	r3, r2
 8016ac0:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8016ac2:	2300      	movs	r3, #0
}
 8016ac4:	4618      	mov	r0, r3
 8016ac6:	3714      	adds	r7, #20
 8016ac8:	46bd      	mov	sp, r7
 8016aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016ace:	4770      	bx	lr

08016ad0 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8016ad0:	b480      	push	{r7}
 8016ad2:	b085      	sub	sp, #20
 8016ad4:	af00      	add	r7, sp, #0
 8016ad6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8016ad8:	687b      	ldr	r3, [r7, #4]
 8016ada:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8016adc:	68fb      	ldr	r3, [r7, #12]
 8016ade:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8016ae2:	681b      	ldr	r3, [r3, #0]
 8016ae4:	68fa      	ldr	r2, [r7, #12]
 8016ae6:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8016aea:	f023 0303 	bic.w	r3, r3, #3
 8016aee:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8016af0:	68fb      	ldr	r3, [r7, #12]
 8016af2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8016af6:	685b      	ldr	r3, [r3, #4]
 8016af8:	68fa      	ldr	r2, [r7, #12]
 8016afa:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8016afe:	f023 0302 	bic.w	r3, r3, #2
 8016b02:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8016b04:	2300      	movs	r3, #0
}
 8016b06:	4618      	mov	r0, r3
 8016b08:	3714      	adds	r7, #20
 8016b0a:	46bd      	mov	sp, r7
 8016b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016b10:	4770      	bx	lr

08016b12 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8016b12:	b480      	push	{r7}
 8016b14:	b085      	sub	sp, #20
 8016b16:	af00      	add	r7, sp, #0
 8016b18:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8016b1a:	687b      	ldr	r3, [r7, #4]
 8016b1c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8016b1e:	68fb      	ldr	r3, [r7, #12]
 8016b20:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8016b24:	681b      	ldr	r3, [r3, #0]
 8016b26:	68fa      	ldr	r2, [r7, #12]
 8016b28:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8016b2c:	f023 0303 	bic.w	r3, r3, #3
 8016b30:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8016b32:	68fb      	ldr	r3, [r7, #12]
 8016b34:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8016b38:	685b      	ldr	r3, [r3, #4]
 8016b3a:	68fa      	ldr	r2, [r7, #12]
 8016b3c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8016b40:	f043 0302 	orr.w	r3, r3, #2
 8016b44:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8016b46:	2300      	movs	r3, #0
}
 8016b48:	4618      	mov	r0, r3
 8016b4a:	3714      	adds	r7, #20
 8016b4c:	46bd      	mov	sp, r7
 8016b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016b52:	4770      	bx	lr

08016b54 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8016b54:	b480      	push	{r7}
 8016b56:	b085      	sub	sp, #20
 8016b58:	af00      	add	r7, sp, #0
 8016b5a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8016b5c:	687b      	ldr	r3, [r7, #4]
 8016b5e:	695b      	ldr	r3, [r3, #20]
 8016b60:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8016b62:	687b      	ldr	r3, [r7, #4]
 8016b64:	699b      	ldr	r3, [r3, #24]
 8016b66:	68fa      	ldr	r2, [r7, #12]
 8016b68:	4013      	ands	r3, r2
 8016b6a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8016b6c:	68fb      	ldr	r3, [r7, #12]
}
 8016b6e:	4618      	mov	r0, r3
 8016b70:	3714      	adds	r7, #20
 8016b72:	46bd      	mov	sp, r7
 8016b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016b78:	4770      	bx	lr

08016b7a <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8016b7a:	b480      	push	{r7}
 8016b7c:	b085      	sub	sp, #20
 8016b7e:	af00      	add	r7, sp, #0
 8016b80:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8016b82:	687b      	ldr	r3, [r7, #4]
 8016b84:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8016b86:	68fb      	ldr	r3, [r7, #12]
 8016b88:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8016b8c:	699b      	ldr	r3, [r3, #24]
 8016b8e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8016b90:	68fb      	ldr	r3, [r7, #12]
 8016b92:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8016b96:	69db      	ldr	r3, [r3, #28]
 8016b98:	68ba      	ldr	r2, [r7, #8]
 8016b9a:	4013      	ands	r3, r2
 8016b9c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8016b9e:	68bb      	ldr	r3, [r7, #8]
 8016ba0:	0c1b      	lsrs	r3, r3, #16
}
 8016ba2:	4618      	mov	r0, r3
 8016ba4:	3714      	adds	r7, #20
 8016ba6:	46bd      	mov	sp, r7
 8016ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016bac:	4770      	bx	lr

08016bae <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8016bae:	b480      	push	{r7}
 8016bb0:	b085      	sub	sp, #20
 8016bb2:	af00      	add	r7, sp, #0
 8016bb4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8016bb6:	687b      	ldr	r3, [r7, #4]
 8016bb8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8016bba:	68fb      	ldr	r3, [r7, #12]
 8016bbc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8016bc0:	699b      	ldr	r3, [r3, #24]
 8016bc2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8016bc4:	68fb      	ldr	r3, [r7, #12]
 8016bc6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8016bca:	69db      	ldr	r3, [r3, #28]
 8016bcc:	68ba      	ldr	r2, [r7, #8]
 8016bce:	4013      	ands	r3, r2
 8016bd0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8016bd2:	68bb      	ldr	r3, [r7, #8]
 8016bd4:	b29b      	uxth	r3, r3
}
 8016bd6:	4618      	mov	r0, r3
 8016bd8:	3714      	adds	r7, #20
 8016bda:	46bd      	mov	sp, r7
 8016bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016be0:	4770      	bx	lr

08016be2 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8016be2:	b480      	push	{r7}
 8016be4:	b085      	sub	sp, #20
 8016be6:	af00      	add	r7, sp, #0
 8016be8:	6078      	str	r0, [r7, #4]
 8016bea:	460b      	mov	r3, r1
 8016bec:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8016bee:	687b      	ldr	r3, [r7, #4]
 8016bf0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8016bf2:	78fb      	ldrb	r3, [r7, #3]
 8016bf4:	015a      	lsls	r2, r3, #5
 8016bf6:	68fb      	ldr	r3, [r7, #12]
 8016bf8:	4413      	add	r3, r2
 8016bfa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8016bfe:	689b      	ldr	r3, [r3, #8]
 8016c00:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8016c02:	68fb      	ldr	r3, [r7, #12]
 8016c04:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8016c08:	695b      	ldr	r3, [r3, #20]
 8016c0a:	68ba      	ldr	r2, [r7, #8]
 8016c0c:	4013      	ands	r3, r2
 8016c0e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8016c10:	68bb      	ldr	r3, [r7, #8]
}
 8016c12:	4618      	mov	r0, r3
 8016c14:	3714      	adds	r7, #20
 8016c16:	46bd      	mov	sp, r7
 8016c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016c1c:	4770      	bx	lr

08016c1e <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8016c1e:	b480      	push	{r7}
 8016c20:	b087      	sub	sp, #28
 8016c22:	af00      	add	r7, sp, #0
 8016c24:	6078      	str	r0, [r7, #4]
 8016c26:	460b      	mov	r3, r1
 8016c28:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8016c2a:	687b      	ldr	r3, [r7, #4]
 8016c2c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8016c2e:	697b      	ldr	r3, [r7, #20]
 8016c30:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8016c34:	691b      	ldr	r3, [r3, #16]
 8016c36:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8016c38:	697b      	ldr	r3, [r7, #20]
 8016c3a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8016c3e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8016c40:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8016c42:	78fb      	ldrb	r3, [r7, #3]
 8016c44:	f003 030f 	and.w	r3, r3, #15
 8016c48:	68fa      	ldr	r2, [r7, #12]
 8016c4a:	fa22 f303 	lsr.w	r3, r2, r3
 8016c4e:	01db      	lsls	r3, r3, #7
 8016c50:	b2db      	uxtb	r3, r3
 8016c52:	693a      	ldr	r2, [r7, #16]
 8016c54:	4313      	orrs	r3, r2
 8016c56:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8016c58:	78fb      	ldrb	r3, [r7, #3]
 8016c5a:	015a      	lsls	r2, r3, #5
 8016c5c:	697b      	ldr	r3, [r7, #20]
 8016c5e:	4413      	add	r3, r2
 8016c60:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8016c64:	689b      	ldr	r3, [r3, #8]
 8016c66:	693a      	ldr	r2, [r7, #16]
 8016c68:	4013      	ands	r3, r2
 8016c6a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8016c6c:	68bb      	ldr	r3, [r7, #8]
}
 8016c6e:	4618      	mov	r0, r3
 8016c70:	371c      	adds	r7, #28
 8016c72:	46bd      	mov	sp, r7
 8016c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016c78:	4770      	bx	lr

08016c7a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8016c7a:	b480      	push	{r7}
 8016c7c:	b083      	sub	sp, #12
 8016c7e:	af00      	add	r7, sp, #0
 8016c80:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8016c82:	687b      	ldr	r3, [r7, #4]
 8016c84:	695b      	ldr	r3, [r3, #20]
 8016c86:	f003 0301 	and.w	r3, r3, #1
}
 8016c8a:	4618      	mov	r0, r3
 8016c8c:	370c      	adds	r7, #12
 8016c8e:	46bd      	mov	sp, r7
 8016c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016c94:	4770      	bx	lr

08016c96 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8016c96:	b480      	push	{r7}
 8016c98:	b085      	sub	sp, #20
 8016c9a:	af00      	add	r7, sp, #0
 8016c9c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8016c9e:	687b      	ldr	r3, [r7, #4]
 8016ca0:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8016ca2:	68fb      	ldr	r3, [r7, #12]
 8016ca4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8016ca8:	681b      	ldr	r3, [r3, #0]
 8016caa:	68fa      	ldr	r2, [r7, #12]
 8016cac:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8016cb0:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8016cb4:	f023 0307 	bic.w	r3, r3, #7
 8016cb8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8016cba:	68fb      	ldr	r3, [r7, #12]
 8016cbc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8016cc0:	685b      	ldr	r3, [r3, #4]
 8016cc2:	68fa      	ldr	r2, [r7, #12]
 8016cc4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8016cc8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8016ccc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8016cce:	2300      	movs	r3, #0
}
 8016cd0:	4618      	mov	r0, r3
 8016cd2:	3714      	adds	r7, #20
 8016cd4:	46bd      	mov	sp, r7
 8016cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016cda:	4770      	bx	lr

08016cdc <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8016cdc:	b480      	push	{r7}
 8016cde:	b087      	sub	sp, #28
 8016ce0:	af00      	add	r7, sp, #0
 8016ce2:	60f8      	str	r0, [r7, #12]
 8016ce4:	460b      	mov	r3, r1
 8016ce6:	607a      	str	r2, [r7, #4]
 8016ce8:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8016cea:	68fb      	ldr	r3, [r7, #12]
 8016cec:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8016cee:	68fb      	ldr	r3, [r7, #12]
 8016cf0:	333c      	adds	r3, #60	@ 0x3c
 8016cf2:	3304      	adds	r3, #4
 8016cf4:	681b      	ldr	r3, [r3, #0]
 8016cf6:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8016cf8:	693b      	ldr	r3, [r7, #16]
 8016cfa:	4a26      	ldr	r2, [pc, #152]	@ (8016d94 <USB_EP0_OutStart+0xb8>)
 8016cfc:	4293      	cmp	r3, r2
 8016cfe:	d90a      	bls.n	8016d16 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8016d00:	697b      	ldr	r3, [r7, #20]
 8016d02:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8016d06:	681b      	ldr	r3, [r3, #0]
 8016d08:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8016d0c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8016d10:	d101      	bne.n	8016d16 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8016d12:	2300      	movs	r3, #0
 8016d14:	e037      	b.n	8016d86 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8016d16:	697b      	ldr	r3, [r7, #20]
 8016d18:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8016d1c:	461a      	mov	r2, r3
 8016d1e:	2300      	movs	r3, #0
 8016d20:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8016d22:	697b      	ldr	r3, [r7, #20]
 8016d24:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8016d28:	691b      	ldr	r3, [r3, #16]
 8016d2a:	697a      	ldr	r2, [r7, #20]
 8016d2c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8016d30:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8016d34:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8016d36:	697b      	ldr	r3, [r7, #20]
 8016d38:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8016d3c:	691b      	ldr	r3, [r3, #16]
 8016d3e:	697a      	ldr	r2, [r7, #20]
 8016d40:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8016d44:	f043 0318 	orr.w	r3, r3, #24
 8016d48:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8016d4a:	697b      	ldr	r3, [r7, #20]
 8016d4c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8016d50:	691b      	ldr	r3, [r3, #16]
 8016d52:	697a      	ldr	r2, [r7, #20]
 8016d54:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8016d58:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8016d5c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8016d5e:	7afb      	ldrb	r3, [r7, #11]
 8016d60:	2b01      	cmp	r3, #1
 8016d62:	d10f      	bne.n	8016d84 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8016d64:	697b      	ldr	r3, [r7, #20]
 8016d66:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8016d6a:	461a      	mov	r2, r3
 8016d6c:	687b      	ldr	r3, [r7, #4]
 8016d6e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8016d70:	697b      	ldr	r3, [r7, #20]
 8016d72:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8016d76:	681b      	ldr	r3, [r3, #0]
 8016d78:	697a      	ldr	r2, [r7, #20]
 8016d7a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8016d7e:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 8016d82:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8016d84:	2300      	movs	r3, #0
}
 8016d86:	4618      	mov	r0, r3
 8016d88:	371c      	adds	r7, #28
 8016d8a:	46bd      	mov	sp, r7
 8016d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016d90:	4770      	bx	lr
 8016d92:	bf00      	nop
 8016d94:	4f54300a 	.word	0x4f54300a

08016d98 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8016d98:	b480      	push	{r7}
 8016d9a:	b085      	sub	sp, #20
 8016d9c:	af00      	add	r7, sp, #0
 8016d9e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8016da0:	2300      	movs	r3, #0
 8016da2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8016da4:	68fb      	ldr	r3, [r7, #12]
 8016da6:	3301      	adds	r3, #1
 8016da8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8016daa:	68fb      	ldr	r3, [r7, #12]
 8016dac:	4a13      	ldr	r2, [pc, #76]	@ (8016dfc <USB_CoreReset+0x64>)
 8016dae:	4293      	cmp	r3, r2
 8016db0:	d901      	bls.n	8016db6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8016db2:	2303      	movs	r3, #3
 8016db4:	e01b      	b.n	8016dee <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8016db6:	687b      	ldr	r3, [r7, #4]
 8016db8:	691b      	ldr	r3, [r3, #16]
 8016dba:	2b00      	cmp	r3, #0
 8016dbc:	daf2      	bge.n	8016da4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8016dbe:	2300      	movs	r3, #0
 8016dc0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8016dc2:	687b      	ldr	r3, [r7, #4]
 8016dc4:	691b      	ldr	r3, [r3, #16]
 8016dc6:	f043 0201 	orr.w	r2, r3, #1
 8016dca:	687b      	ldr	r3, [r7, #4]
 8016dcc:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8016dce:	68fb      	ldr	r3, [r7, #12]
 8016dd0:	3301      	adds	r3, #1
 8016dd2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8016dd4:	68fb      	ldr	r3, [r7, #12]
 8016dd6:	4a09      	ldr	r2, [pc, #36]	@ (8016dfc <USB_CoreReset+0x64>)
 8016dd8:	4293      	cmp	r3, r2
 8016dda:	d901      	bls.n	8016de0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8016ddc:	2303      	movs	r3, #3
 8016dde:	e006      	b.n	8016dee <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8016de0:	687b      	ldr	r3, [r7, #4]
 8016de2:	691b      	ldr	r3, [r3, #16]
 8016de4:	f003 0301 	and.w	r3, r3, #1
 8016de8:	2b01      	cmp	r3, #1
 8016dea:	d0f0      	beq.n	8016dce <USB_CoreReset+0x36>

  return HAL_OK;
 8016dec:	2300      	movs	r3, #0
}
 8016dee:	4618      	mov	r0, r3
 8016df0:	3714      	adds	r7, #20
 8016df2:	46bd      	mov	sp, r7
 8016df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016df8:	4770      	bx	lr
 8016dfa:	bf00      	nop
 8016dfc:	00030d40 	.word	0x00030d40

08016e00 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8016e00:	b580      	push	{r7, lr}
 8016e02:	b084      	sub	sp, #16
 8016e04:	af00      	add	r7, sp, #0
 8016e06:	6078      	str	r0, [r7, #4]
 8016e08:	460b      	mov	r3, r1
 8016e0a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8016e0c:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8016e10:	f7f0 fa2c 	bl	800726c <USBD_static_malloc>
 8016e14:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8016e16:	68fb      	ldr	r3, [r7, #12]
 8016e18:	2b00      	cmp	r3, #0
 8016e1a:	d109      	bne.n	8016e30 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8016e1c:	687b      	ldr	r3, [r7, #4]
 8016e1e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8016e22:	687b      	ldr	r3, [r7, #4]
 8016e24:	32b0      	adds	r2, #176	@ 0xb0
 8016e26:	2100      	movs	r1, #0
 8016e28:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8016e2c:	2302      	movs	r3, #2
 8016e2e:	e0d4      	b.n	8016fda <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8016e30:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8016e34:	2100      	movs	r1, #0
 8016e36:	68f8      	ldr	r0, [r7, #12]
 8016e38:	f006 fe81 	bl	801db3e <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8016e3c:	687b      	ldr	r3, [r7, #4]
 8016e3e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8016e42:	687b      	ldr	r3, [r7, #4]
 8016e44:	32b0      	adds	r2, #176	@ 0xb0
 8016e46:	68f9      	ldr	r1, [r7, #12]
 8016e48:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8016e4c:	687b      	ldr	r3, [r7, #4]
 8016e4e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8016e52:	687b      	ldr	r3, [r7, #4]
 8016e54:	32b0      	adds	r2, #176	@ 0xb0
 8016e56:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8016e5a:	687b      	ldr	r3, [r7, #4]
 8016e5c:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8016e60:	687b      	ldr	r3, [r7, #4]
 8016e62:	7c1b      	ldrb	r3, [r3, #16]
 8016e64:	2b00      	cmp	r3, #0
 8016e66:	d138      	bne.n	8016eda <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8016e68:	4b5e      	ldr	r3, [pc, #376]	@ (8016fe4 <USBD_CDC_Init+0x1e4>)
 8016e6a:	7819      	ldrb	r1, [r3, #0]
 8016e6c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8016e70:	2202      	movs	r2, #2
 8016e72:	6878      	ldr	r0, [r7, #4]
 8016e74:	f7f0 f8d7 	bl	8007026 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8016e78:	4b5a      	ldr	r3, [pc, #360]	@ (8016fe4 <USBD_CDC_Init+0x1e4>)
 8016e7a:	781b      	ldrb	r3, [r3, #0]
 8016e7c:	f003 020f 	and.w	r2, r3, #15
 8016e80:	6879      	ldr	r1, [r7, #4]
 8016e82:	4613      	mov	r3, r2
 8016e84:	009b      	lsls	r3, r3, #2
 8016e86:	4413      	add	r3, r2
 8016e88:	009b      	lsls	r3, r3, #2
 8016e8a:	440b      	add	r3, r1
 8016e8c:	3324      	adds	r3, #36	@ 0x24
 8016e8e:	2201      	movs	r2, #1
 8016e90:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8016e92:	4b55      	ldr	r3, [pc, #340]	@ (8016fe8 <USBD_CDC_Init+0x1e8>)
 8016e94:	7819      	ldrb	r1, [r3, #0]
 8016e96:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8016e9a:	2202      	movs	r2, #2
 8016e9c:	6878      	ldr	r0, [r7, #4]
 8016e9e:	f7f0 f8c2 	bl	8007026 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8016ea2:	4b51      	ldr	r3, [pc, #324]	@ (8016fe8 <USBD_CDC_Init+0x1e8>)
 8016ea4:	781b      	ldrb	r3, [r3, #0]
 8016ea6:	f003 020f 	and.w	r2, r3, #15
 8016eaa:	6879      	ldr	r1, [r7, #4]
 8016eac:	4613      	mov	r3, r2
 8016eae:	009b      	lsls	r3, r3, #2
 8016eb0:	4413      	add	r3, r2
 8016eb2:	009b      	lsls	r3, r3, #2
 8016eb4:	440b      	add	r3, r1
 8016eb6:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8016eba:	2201      	movs	r2, #1
 8016ebc:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8016ebe:	4b4b      	ldr	r3, [pc, #300]	@ (8016fec <USBD_CDC_Init+0x1ec>)
 8016ec0:	781b      	ldrb	r3, [r3, #0]
 8016ec2:	f003 020f 	and.w	r2, r3, #15
 8016ec6:	6879      	ldr	r1, [r7, #4]
 8016ec8:	4613      	mov	r3, r2
 8016eca:	009b      	lsls	r3, r3, #2
 8016ecc:	4413      	add	r3, r2
 8016ece:	009b      	lsls	r3, r3, #2
 8016ed0:	440b      	add	r3, r1
 8016ed2:	3326      	adds	r3, #38	@ 0x26
 8016ed4:	2210      	movs	r2, #16
 8016ed6:	801a      	strh	r2, [r3, #0]
 8016ed8:	e035      	b.n	8016f46 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8016eda:	4b42      	ldr	r3, [pc, #264]	@ (8016fe4 <USBD_CDC_Init+0x1e4>)
 8016edc:	7819      	ldrb	r1, [r3, #0]
 8016ede:	2340      	movs	r3, #64	@ 0x40
 8016ee0:	2202      	movs	r2, #2
 8016ee2:	6878      	ldr	r0, [r7, #4]
 8016ee4:	f7f0 f89f 	bl	8007026 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8016ee8:	4b3e      	ldr	r3, [pc, #248]	@ (8016fe4 <USBD_CDC_Init+0x1e4>)
 8016eea:	781b      	ldrb	r3, [r3, #0]
 8016eec:	f003 020f 	and.w	r2, r3, #15
 8016ef0:	6879      	ldr	r1, [r7, #4]
 8016ef2:	4613      	mov	r3, r2
 8016ef4:	009b      	lsls	r3, r3, #2
 8016ef6:	4413      	add	r3, r2
 8016ef8:	009b      	lsls	r3, r3, #2
 8016efa:	440b      	add	r3, r1
 8016efc:	3324      	adds	r3, #36	@ 0x24
 8016efe:	2201      	movs	r2, #1
 8016f00:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8016f02:	4b39      	ldr	r3, [pc, #228]	@ (8016fe8 <USBD_CDC_Init+0x1e8>)
 8016f04:	7819      	ldrb	r1, [r3, #0]
 8016f06:	2340      	movs	r3, #64	@ 0x40
 8016f08:	2202      	movs	r2, #2
 8016f0a:	6878      	ldr	r0, [r7, #4]
 8016f0c:	f7f0 f88b 	bl	8007026 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8016f10:	4b35      	ldr	r3, [pc, #212]	@ (8016fe8 <USBD_CDC_Init+0x1e8>)
 8016f12:	781b      	ldrb	r3, [r3, #0]
 8016f14:	f003 020f 	and.w	r2, r3, #15
 8016f18:	6879      	ldr	r1, [r7, #4]
 8016f1a:	4613      	mov	r3, r2
 8016f1c:	009b      	lsls	r3, r3, #2
 8016f1e:	4413      	add	r3, r2
 8016f20:	009b      	lsls	r3, r3, #2
 8016f22:	440b      	add	r3, r1
 8016f24:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8016f28:	2201      	movs	r2, #1
 8016f2a:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8016f2c:	4b2f      	ldr	r3, [pc, #188]	@ (8016fec <USBD_CDC_Init+0x1ec>)
 8016f2e:	781b      	ldrb	r3, [r3, #0]
 8016f30:	f003 020f 	and.w	r2, r3, #15
 8016f34:	6879      	ldr	r1, [r7, #4]
 8016f36:	4613      	mov	r3, r2
 8016f38:	009b      	lsls	r3, r3, #2
 8016f3a:	4413      	add	r3, r2
 8016f3c:	009b      	lsls	r3, r3, #2
 8016f3e:	440b      	add	r3, r1
 8016f40:	3326      	adds	r3, #38	@ 0x26
 8016f42:	2210      	movs	r2, #16
 8016f44:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8016f46:	4b29      	ldr	r3, [pc, #164]	@ (8016fec <USBD_CDC_Init+0x1ec>)
 8016f48:	7819      	ldrb	r1, [r3, #0]
 8016f4a:	2308      	movs	r3, #8
 8016f4c:	2203      	movs	r2, #3
 8016f4e:	6878      	ldr	r0, [r7, #4]
 8016f50:	f7f0 f869 	bl	8007026 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8016f54:	4b25      	ldr	r3, [pc, #148]	@ (8016fec <USBD_CDC_Init+0x1ec>)
 8016f56:	781b      	ldrb	r3, [r3, #0]
 8016f58:	f003 020f 	and.w	r2, r3, #15
 8016f5c:	6879      	ldr	r1, [r7, #4]
 8016f5e:	4613      	mov	r3, r2
 8016f60:	009b      	lsls	r3, r3, #2
 8016f62:	4413      	add	r3, r2
 8016f64:	009b      	lsls	r3, r3, #2
 8016f66:	440b      	add	r3, r1
 8016f68:	3324      	adds	r3, #36	@ 0x24
 8016f6a:	2201      	movs	r2, #1
 8016f6c:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8016f6e:	68fb      	ldr	r3, [r7, #12]
 8016f70:	2200      	movs	r2, #0
 8016f72:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8016f76:	687b      	ldr	r3, [r7, #4]
 8016f78:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8016f7c:	687a      	ldr	r2, [r7, #4]
 8016f7e:	33b0      	adds	r3, #176	@ 0xb0
 8016f80:	009b      	lsls	r3, r3, #2
 8016f82:	4413      	add	r3, r2
 8016f84:	685b      	ldr	r3, [r3, #4]
 8016f86:	681b      	ldr	r3, [r3, #0]
 8016f88:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8016f8a:	68fb      	ldr	r3, [r7, #12]
 8016f8c:	2200      	movs	r2, #0
 8016f8e:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 8016f92:	68fb      	ldr	r3, [r7, #12]
 8016f94:	2200      	movs	r2, #0
 8016f96:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 8016f9a:	68fb      	ldr	r3, [r7, #12]
 8016f9c:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8016fa0:	2b00      	cmp	r3, #0
 8016fa2:	d101      	bne.n	8016fa8 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8016fa4:	2302      	movs	r3, #2
 8016fa6:	e018      	b.n	8016fda <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8016fa8:	687b      	ldr	r3, [r7, #4]
 8016faa:	7c1b      	ldrb	r3, [r3, #16]
 8016fac:	2b00      	cmp	r3, #0
 8016fae:	d10a      	bne.n	8016fc6 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8016fb0:	4b0d      	ldr	r3, [pc, #52]	@ (8016fe8 <USBD_CDC_Init+0x1e8>)
 8016fb2:	7819      	ldrb	r1, [r3, #0]
 8016fb4:	68fb      	ldr	r3, [r7, #12]
 8016fb6:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8016fba:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8016fbe:	6878      	ldr	r0, [r7, #4]
 8016fc0:	f7f0 f920 	bl	8007204 <USBD_LL_PrepareReceive>
 8016fc4:	e008      	b.n	8016fd8 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8016fc6:	4b08      	ldr	r3, [pc, #32]	@ (8016fe8 <USBD_CDC_Init+0x1e8>)
 8016fc8:	7819      	ldrb	r1, [r3, #0]
 8016fca:	68fb      	ldr	r3, [r7, #12]
 8016fcc:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8016fd0:	2340      	movs	r3, #64	@ 0x40
 8016fd2:	6878      	ldr	r0, [r7, #4]
 8016fd4:	f7f0 f916 	bl	8007204 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8016fd8:	2300      	movs	r3, #0
}
 8016fda:	4618      	mov	r0, r3
 8016fdc:	3710      	adds	r7, #16
 8016fde:	46bd      	mov	sp, r7
 8016fe0:	bd80      	pop	{r7, pc}
 8016fe2:	bf00      	nop
 8016fe4:	200000f7 	.word	0x200000f7
 8016fe8:	200000f8 	.word	0x200000f8
 8016fec:	200000f9 	.word	0x200000f9

08016ff0 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8016ff0:	b580      	push	{r7, lr}
 8016ff2:	b082      	sub	sp, #8
 8016ff4:	af00      	add	r7, sp, #0
 8016ff6:	6078      	str	r0, [r7, #4]
 8016ff8:	460b      	mov	r3, r1
 8016ffa:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8016ffc:	4b3a      	ldr	r3, [pc, #232]	@ (80170e8 <USBD_CDC_DeInit+0xf8>)
 8016ffe:	781b      	ldrb	r3, [r3, #0]
 8017000:	4619      	mov	r1, r3
 8017002:	6878      	ldr	r0, [r7, #4]
 8017004:	f7f0 f835 	bl	8007072 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8017008:	4b37      	ldr	r3, [pc, #220]	@ (80170e8 <USBD_CDC_DeInit+0xf8>)
 801700a:	781b      	ldrb	r3, [r3, #0]
 801700c:	f003 020f 	and.w	r2, r3, #15
 8017010:	6879      	ldr	r1, [r7, #4]
 8017012:	4613      	mov	r3, r2
 8017014:	009b      	lsls	r3, r3, #2
 8017016:	4413      	add	r3, r2
 8017018:	009b      	lsls	r3, r3, #2
 801701a:	440b      	add	r3, r1
 801701c:	3324      	adds	r3, #36	@ 0x24
 801701e:	2200      	movs	r2, #0
 8017020:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8017022:	4b32      	ldr	r3, [pc, #200]	@ (80170ec <USBD_CDC_DeInit+0xfc>)
 8017024:	781b      	ldrb	r3, [r3, #0]
 8017026:	4619      	mov	r1, r3
 8017028:	6878      	ldr	r0, [r7, #4]
 801702a:	f7f0 f822 	bl	8007072 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 801702e:	4b2f      	ldr	r3, [pc, #188]	@ (80170ec <USBD_CDC_DeInit+0xfc>)
 8017030:	781b      	ldrb	r3, [r3, #0]
 8017032:	f003 020f 	and.w	r2, r3, #15
 8017036:	6879      	ldr	r1, [r7, #4]
 8017038:	4613      	mov	r3, r2
 801703a:	009b      	lsls	r3, r3, #2
 801703c:	4413      	add	r3, r2
 801703e:	009b      	lsls	r3, r3, #2
 8017040:	440b      	add	r3, r1
 8017042:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8017046:	2200      	movs	r2, #0
 8017048:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 801704a:	4b29      	ldr	r3, [pc, #164]	@ (80170f0 <USBD_CDC_DeInit+0x100>)
 801704c:	781b      	ldrb	r3, [r3, #0]
 801704e:	4619      	mov	r1, r3
 8017050:	6878      	ldr	r0, [r7, #4]
 8017052:	f7f0 f80e 	bl	8007072 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8017056:	4b26      	ldr	r3, [pc, #152]	@ (80170f0 <USBD_CDC_DeInit+0x100>)
 8017058:	781b      	ldrb	r3, [r3, #0]
 801705a:	f003 020f 	and.w	r2, r3, #15
 801705e:	6879      	ldr	r1, [r7, #4]
 8017060:	4613      	mov	r3, r2
 8017062:	009b      	lsls	r3, r3, #2
 8017064:	4413      	add	r3, r2
 8017066:	009b      	lsls	r3, r3, #2
 8017068:	440b      	add	r3, r1
 801706a:	3324      	adds	r3, #36	@ 0x24
 801706c:	2200      	movs	r2, #0
 801706e:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8017070:	4b1f      	ldr	r3, [pc, #124]	@ (80170f0 <USBD_CDC_DeInit+0x100>)
 8017072:	781b      	ldrb	r3, [r3, #0]
 8017074:	f003 020f 	and.w	r2, r3, #15
 8017078:	6879      	ldr	r1, [r7, #4]
 801707a:	4613      	mov	r3, r2
 801707c:	009b      	lsls	r3, r3, #2
 801707e:	4413      	add	r3, r2
 8017080:	009b      	lsls	r3, r3, #2
 8017082:	440b      	add	r3, r1
 8017084:	3326      	adds	r3, #38	@ 0x26
 8017086:	2200      	movs	r2, #0
 8017088:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 801708a:	687b      	ldr	r3, [r7, #4]
 801708c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8017090:	687b      	ldr	r3, [r7, #4]
 8017092:	32b0      	adds	r2, #176	@ 0xb0
 8017094:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8017098:	2b00      	cmp	r3, #0
 801709a:	d01f      	beq.n	80170dc <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 801709c:	687b      	ldr	r3, [r7, #4]
 801709e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80170a2:	687a      	ldr	r2, [r7, #4]
 80170a4:	33b0      	adds	r3, #176	@ 0xb0
 80170a6:	009b      	lsls	r3, r3, #2
 80170a8:	4413      	add	r3, r2
 80170aa:	685b      	ldr	r3, [r3, #4]
 80170ac:	685b      	ldr	r3, [r3, #4]
 80170ae:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 80170b0:	687b      	ldr	r3, [r7, #4]
 80170b2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80170b6:	687b      	ldr	r3, [r7, #4]
 80170b8:	32b0      	adds	r2, #176	@ 0xb0
 80170ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80170be:	4618      	mov	r0, r3
 80170c0:	f7f0 f8e2 	bl	8007288 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80170c4:	687b      	ldr	r3, [r7, #4]
 80170c6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80170ca:	687b      	ldr	r3, [r7, #4]
 80170cc:	32b0      	adds	r2, #176	@ 0xb0
 80170ce:	2100      	movs	r1, #0
 80170d0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 80170d4:	687b      	ldr	r3, [r7, #4]
 80170d6:	2200      	movs	r2, #0
 80170d8:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 80170dc:	2300      	movs	r3, #0
}
 80170de:	4618      	mov	r0, r3
 80170e0:	3708      	adds	r7, #8
 80170e2:	46bd      	mov	sp, r7
 80170e4:	bd80      	pop	{r7, pc}
 80170e6:	bf00      	nop
 80170e8:	200000f7 	.word	0x200000f7
 80170ec:	200000f8 	.word	0x200000f8
 80170f0:	200000f9 	.word	0x200000f9

080170f4 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80170f4:	b580      	push	{r7, lr}
 80170f6:	b086      	sub	sp, #24
 80170f8:	af00      	add	r7, sp, #0
 80170fa:	6078      	str	r0, [r7, #4]
 80170fc:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80170fe:	687b      	ldr	r3, [r7, #4]
 8017100:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8017104:	687b      	ldr	r3, [r7, #4]
 8017106:	32b0      	adds	r2, #176	@ 0xb0
 8017108:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801710c:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 801710e:	2300      	movs	r3, #0
 8017110:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8017112:	2300      	movs	r3, #0
 8017114:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8017116:	2300      	movs	r3, #0
 8017118:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 801711a:	693b      	ldr	r3, [r7, #16]
 801711c:	2b00      	cmp	r3, #0
 801711e:	d101      	bne.n	8017124 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8017120:	2303      	movs	r3, #3
 8017122:	e0bf      	b.n	80172a4 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8017124:	683b      	ldr	r3, [r7, #0]
 8017126:	781b      	ldrb	r3, [r3, #0]
 8017128:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 801712c:	2b00      	cmp	r3, #0
 801712e:	d050      	beq.n	80171d2 <USBD_CDC_Setup+0xde>
 8017130:	2b20      	cmp	r3, #32
 8017132:	f040 80af 	bne.w	8017294 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8017136:	683b      	ldr	r3, [r7, #0]
 8017138:	88db      	ldrh	r3, [r3, #6]
 801713a:	2b00      	cmp	r3, #0
 801713c:	d03a      	beq.n	80171b4 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 801713e:	683b      	ldr	r3, [r7, #0]
 8017140:	781b      	ldrb	r3, [r3, #0]
 8017142:	b25b      	sxtb	r3, r3
 8017144:	2b00      	cmp	r3, #0
 8017146:	da1b      	bge.n	8017180 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8017148:	687b      	ldr	r3, [r7, #4]
 801714a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 801714e:	687a      	ldr	r2, [r7, #4]
 8017150:	33b0      	adds	r3, #176	@ 0xb0
 8017152:	009b      	lsls	r3, r3, #2
 8017154:	4413      	add	r3, r2
 8017156:	685b      	ldr	r3, [r3, #4]
 8017158:	689b      	ldr	r3, [r3, #8]
 801715a:	683a      	ldr	r2, [r7, #0]
 801715c:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 801715e:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8017160:	683a      	ldr	r2, [r7, #0]
 8017162:	88d2      	ldrh	r2, [r2, #6]
 8017164:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8017166:	683b      	ldr	r3, [r7, #0]
 8017168:	88db      	ldrh	r3, [r3, #6]
 801716a:	2b07      	cmp	r3, #7
 801716c:	bf28      	it	cs
 801716e:	2307      	movcs	r3, #7
 8017170:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8017172:	693b      	ldr	r3, [r7, #16]
 8017174:	89fa      	ldrh	r2, [r7, #14]
 8017176:	4619      	mov	r1, r3
 8017178:	6878      	ldr	r0, [r7, #4]
 801717a:	f001 fd87 	bl	8018c8c <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 801717e:	e090      	b.n	80172a2 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8017180:	683b      	ldr	r3, [r7, #0]
 8017182:	785a      	ldrb	r2, [r3, #1]
 8017184:	693b      	ldr	r3, [r7, #16]
 8017186:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 801718a:	683b      	ldr	r3, [r7, #0]
 801718c:	88db      	ldrh	r3, [r3, #6]
 801718e:	2b3f      	cmp	r3, #63	@ 0x3f
 8017190:	d803      	bhi.n	801719a <USBD_CDC_Setup+0xa6>
 8017192:	683b      	ldr	r3, [r7, #0]
 8017194:	88db      	ldrh	r3, [r3, #6]
 8017196:	b2da      	uxtb	r2, r3
 8017198:	e000      	b.n	801719c <USBD_CDC_Setup+0xa8>
 801719a:	2240      	movs	r2, #64	@ 0x40
 801719c:	693b      	ldr	r3, [r7, #16]
 801719e:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 80171a2:	6939      	ldr	r1, [r7, #16]
 80171a4:	693b      	ldr	r3, [r7, #16]
 80171a6:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 80171aa:	461a      	mov	r2, r3
 80171ac:	6878      	ldr	r0, [r7, #4]
 80171ae:	f001 fd99 	bl	8018ce4 <USBD_CtlPrepareRx>
      break;
 80171b2:	e076      	b.n	80172a2 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80171b4:	687b      	ldr	r3, [r7, #4]
 80171b6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80171ba:	687a      	ldr	r2, [r7, #4]
 80171bc:	33b0      	adds	r3, #176	@ 0xb0
 80171be:	009b      	lsls	r3, r3, #2
 80171c0:	4413      	add	r3, r2
 80171c2:	685b      	ldr	r3, [r3, #4]
 80171c4:	689b      	ldr	r3, [r3, #8]
 80171c6:	683a      	ldr	r2, [r7, #0]
 80171c8:	7850      	ldrb	r0, [r2, #1]
 80171ca:	2200      	movs	r2, #0
 80171cc:	6839      	ldr	r1, [r7, #0]
 80171ce:	4798      	blx	r3
      break;
 80171d0:	e067      	b.n	80172a2 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80171d2:	683b      	ldr	r3, [r7, #0]
 80171d4:	785b      	ldrb	r3, [r3, #1]
 80171d6:	2b0b      	cmp	r3, #11
 80171d8:	d851      	bhi.n	801727e <USBD_CDC_Setup+0x18a>
 80171da:	a201      	add	r2, pc, #4	@ (adr r2, 80171e0 <USBD_CDC_Setup+0xec>)
 80171dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80171e0:	08017211 	.word	0x08017211
 80171e4:	0801728d 	.word	0x0801728d
 80171e8:	0801727f 	.word	0x0801727f
 80171ec:	0801727f 	.word	0x0801727f
 80171f0:	0801727f 	.word	0x0801727f
 80171f4:	0801727f 	.word	0x0801727f
 80171f8:	0801727f 	.word	0x0801727f
 80171fc:	0801727f 	.word	0x0801727f
 8017200:	0801727f 	.word	0x0801727f
 8017204:	0801727f 	.word	0x0801727f
 8017208:	0801723b 	.word	0x0801723b
 801720c:	08017265 	.word	0x08017265
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8017210:	687b      	ldr	r3, [r7, #4]
 8017212:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8017216:	b2db      	uxtb	r3, r3
 8017218:	2b03      	cmp	r3, #3
 801721a:	d107      	bne.n	801722c <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 801721c:	f107 030a 	add.w	r3, r7, #10
 8017220:	2202      	movs	r2, #2
 8017222:	4619      	mov	r1, r3
 8017224:	6878      	ldr	r0, [r7, #4]
 8017226:	f001 fd31 	bl	8018c8c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 801722a:	e032      	b.n	8017292 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 801722c:	6839      	ldr	r1, [r7, #0]
 801722e:	6878      	ldr	r0, [r7, #4]
 8017230:	f001 fcbb 	bl	8018baa <USBD_CtlError>
            ret = USBD_FAIL;
 8017234:	2303      	movs	r3, #3
 8017236:	75fb      	strb	r3, [r7, #23]
          break;
 8017238:	e02b      	b.n	8017292 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801723a:	687b      	ldr	r3, [r7, #4]
 801723c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8017240:	b2db      	uxtb	r3, r3
 8017242:	2b03      	cmp	r3, #3
 8017244:	d107      	bne.n	8017256 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8017246:	f107 030d 	add.w	r3, r7, #13
 801724a:	2201      	movs	r2, #1
 801724c:	4619      	mov	r1, r3
 801724e:	6878      	ldr	r0, [r7, #4]
 8017250:	f001 fd1c 	bl	8018c8c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8017254:	e01d      	b.n	8017292 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8017256:	6839      	ldr	r1, [r7, #0]
 8017258:	6878      	ldr	r0, [r7, #4]
 801725a:	f001 fca6 	bl	8018baa <USBD_CtlError>
            ret = USBD_FAIL;
 801725e:	2303      	movs	r3, #3
 8017260:	75fb      	strb	r3, [r7, #23]
          break;
 8017262:	e016      	b.n	8017292 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8017264:	687b      	ldr	r3, [r7, #4]
 8017266:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801726a:	b2db      	uxtb	r3, r3
 801726c:	2b03      	cmp	r3, #3
 801726e:	d00f      	beq.n	8017290 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8017270:	6839      	ldr	r1, [r7, #0]
 8017272:	6878      	ldr	r0, [r7, #4]
 8017274:	f001 fc99 	bl	8018baa <USBD_CtlError>
            ret = USBD_FAIL;
 8017278:	2303      	movs	r3, #3
 801727a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 801727c:	e008      	b.n	8017290 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 801727e:	6839      	ldr	r1, [r7, #0]
 8017280:	6878      	ldr	r0, [r7, #4]
 8017282:	f001 fc92 	bl	8018baa <USBD_CtlError>
          ret = USBD_FAIL;
 8017286:	2303      	movs	r3, #3
 8017288:	75fb      	strb	r3, [r7, #23]
          break;
 801728a:	e002      	b.n	8017292 <USBD_CDC_Setup+0x19e>
          break;
 801728c:	bf00      	nop
 801728e:	e008      	b.n	80172a2 <USBD_CDC_Setup+0x1ae>
          break;
 8017290:	bf00      	nop
      }
      break;
 8017292:	e006      	b.n	80172a2 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8017294:	6839      	ldr	r1, [r7, #0]
 8017296:	6878      	ldr	r0, [r7, #4]
 8017298:	f001 fc87 	bl	8018baa <USBD_CtlError>
      ret = USBD_FAIL;
 801729c:	2303      	movs	r3, #3
 801729e:	75fb      	strb	r3, [r7, #23]
      break;
 80172a0:	bf00      	nop
  }

  return (uint8_t)ret;
 80172a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80172a4:	4618      	mov	r0, r3
 80172a6:	3718      	adds	r7, #24
 80172a8:	46bd      	mov	sp, r7
 80172aa:	bd80      	pop	{r7, pc}

080172ac <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80172ac:	b580      	push	{r7, lr}
 80172ae:	b084      	sub	sp, #16
 80172b0:	af00      	add	r7, sp, #0
 80172b2:	6078      	str	r0, [r7, #4]
 80172b4:	460b      	mov	r3, r1
 80172b6:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 80172b8:	687b      	ldr	r3, [r7, #4]
 80172ba:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80172be:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80172c0:	687b      	ldr	r3, [r7, #4]
 80172c2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80172c6:	687b      	ldr	r3, [r7, #4]
 80172c8:	32b0      	adds	r2, #176	@ 0xb0
 80172ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80172ce:	2b00      	cmp	r3, #0
 80172d0:	d101      	bne.n	80172d6 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 80172d2:	2303      	movs	r3, #3
 80172d4:	e065      	b.n	80173a2 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80172d6:	687b      	ldr	r3, [r7, #4]
 80172d8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80172dc:	687b      	ldr	r3, [r7, #4]
 80172de:	32b0      	adds	r2, #176	@ 0xb0
 80172e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80172e4:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80172e6:	78fb      	ldrb	r3, [r7, #3]
 80172e8:	f003 020f 	and.w	r2, r3, #15
 80172ec:	6879      	ldr	r1, [r7, #4]
 80172ee:	4613      	mov	r3, r2
 80172f0:	009b      	lsls	r3, r3, #2
 80172f2:	4413      	add	r3, r2
 80172f4:	009b      	lsls	r3, r3, #2
 80172f6:	440b      	add	r3, r1
 80172f8:	3318      	adds	r3, #24
 80172fa:	681b      	ldr	r3, [r3, #0]
 80172fc:	2b00      	cmp	r3, #0
 80172fe:	d02f      	beq.n	8017360 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8017300:	78fb      	ldrb	r3, [r7, #3]
 8017302:	f003 020f 	and.w	r2, r3, #15
 8017306:	6879      	ldr	r1, [r7, #4]
 8017308:	4613      	mov	r3, r2
 801730a:	009b      	lsls	r3, r3, #2
 801730c:	4413      	add	r3, r2
 801730e:	009b      	lsls	r3, r3, #2
 8017310:	440b      	add	r3, r1
 8017312:	3318      	adds	r3, #24
 8017314:	681a      	ldr	r2, [r3, #0]
 8017316:	78fb      	ldrb	r3, [r7, #3]
 8017318:	f003 010f 	and.w	r1, r3, #15
 801731c:	68f8      	ldr	r0, [r7, #12]
 801731e:	460b      	mov	r3, r1
 8017320:	00db      	lsls	r3, r3, #3
 8017322:	440b      	add	r3, r1
 8017324:	009b      	lsls	r3, r3, #2
 8017326:	4403      	add	r3, r0
 8017328:	3348      	adds	r3, #72	@ 0x48
 801732a:	681b      	ldr	r3, [r3, #0]
 801732c:	fbb2 f1f3 	udiv	r1, r2, r3
 8017330:	fb01 f303 	mul.w	r3, r1, r3
 8017334:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8017336:	2b00      	cmp	r3, #0
 8017338:	d112      	bne.n	8017360 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 801733a:	78fb      	ldrb	r3, [r7, #3]
 801733c:	f003 020f 	and.w	r2, r3, #15
 8017340:	6879      	ldr	r1, [r7, #4]
 8017342:	4613      	mov	r3, r2
 8017344:	009b      	lsls	r3, r3, #2
 8017346:	4413      	add	r3, r2
 8017348:	009b      	lsls	r3, r3, #2
 801734a:	440b      	add	r3, r1
 801734c:	3318      	adds	r3, #24
 801734e:	2200      	movs	r2, #0
 8017350:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8017352:	78f9      	ldrb	r1, [r7, #3]
 8017354:	2300      	movs	r3, #0
 8017356:	2200      	movs	r2, #0
 8017358:	6878      	ldr	r0, [r7, #4]
 801735a:	f7ef ff32 	bl	80071c2 <USBD_LL_Transmit>
 801735e:	e01f      	b.n	80173a0 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8017360:	68bb      	ldr	r3, [r7, #8]
 8017362:	2200      	movs	r2, #0
 8017364:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8017368:	687b      	ldr	r3, [r7, #4]
 801736a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 801736e:	687a      	ldr	r2, [r7, #4]
 8017370:	33b0      	adds	r3, #176	@ 0xb0
 8017372:	009b      	lsls	r3, r3, #2
 8017374:	4413      	add	r3, r2
 8017376:	685b      	ldr	r3, [r3, #4]
 8017378:	691b      	ldr	r3, [r3, #16]
 801737a:	2b00      	cmp	r3, #0
 801737c:	d010      	beq.n	80173a0 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 801737e:	687b      	ldr	r3, [r7, #4]
 8017380:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8017384:	687a      	ldr	r2, [r7, #4]
 8017386:	33b0      	adds	r3, #176	@ 0xb0
 8017388:	009b      	lsls	r3, r3, #2
 801738a:	4413      	add	r3, r2
 801738c:	685b      	ldr	r3, [r3, #4]
 801738e:	691b      	ldr	r3, [r3, #16]
 8017390:	68ba      	ldr	r2, [r7, #8]
 8017392:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 8017396:	68ba      	ldr	r2, [r7, #8]
 8017398:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 801739c:	78fa      	ldrb	r2, [r7, #3]
 801739e:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80173a0:	2300      	movs	r3, #0
}
 80173a2:	4618      	mov	r0, r3
 80173a4:	3710      	adds	r7, #16
 80173a6:	46bd      	mov	sp, r7
 80173a8:	bd80      	pop	{r7, pc}

080173aa <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80173aa:	b580      	push	{r7, lr}
 80173ac:	b084      	sub	sp, #16
 80173ae:	af00      	add	r7, sp, #0
 80173b0:	6078      	str	r0, [r7, #4]
 80173b2:	460b      	mov	r3, r1
 80173b4:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80173b6:	687b      	ldr	r3, [r7, #4]
 80173b8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80173bc:	687b      	ldr	r3, [r7, #4]
 80173be:	32b0      	adds	r2, #176	@ 0xb0
 80173c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80173c4:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80173c6:	687b      	ldr	r3, [r7, #4]
 80173c8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80173cc:	687b      	ldr	r3, [r7, #4]
 80173ce:	32b0      	adds	r2, #176	@ 0xb0
 80173d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80173d4:	2b00      	cmp	r3, #0
 80173d6:	d101      	bne.n	80173dc <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 80173d8:	2303      	movs	r3, #3
 80173da:	e01a      	b.n	8017412 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80173dc:	78fb      	ldrb	r3, [r7, #3]
 80173de:	4619      	mov	r1, r3
 80173e0:	6878      	ldr	r0, [r7, #4]
 80173e2:	f7ef ff30 	bl	8007246 <USBD_LL_GetRxDataSize>
 80173e6:	4602      	mov	r2, r0
 80173e8:	68fb      	ldr	r3, [r7, #12]
 80173ea:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80173ee:	687b      	ldr	r3, [r7, #4]
 80173f0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80173f4:	687a      	ldr	r2, [r7, #4]
 80173f6:	33b0      	adds	r3, #176	@ 0xb0
 80173f8:	009b      	lsls	r3, r3, #2
 80173fa:	4413      	add	r3, r2
 80173fc:	685b      	ldr	r3, [r3, #4]
 80173fe:	68db      	ldr	r3, [r3, #12]
 8017400:	68fa      	ldr	r2, [r7, #12]
 8017402:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8017406:	68fa      	ldr	r2, [r7, #12]
 8017408:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 801740c:	4611      	mov	r1, r2
 801740e:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8017410:	2300      	movs	r3, #0
}
 8017412:	4618      	mov	r0, r3
 8017414:	3710      	adds	r7, #16
 8017416:	46bd      	mov	sp, r7
 8017418:	bd80      	pop	{r7, pc}

0801741a <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 801741a:	b580      	push	{r7, lr}
 801741c:	b084      	sub	sp, #16
 801741e:	af00      	add	r7, sp, #0
 8017420:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8017422:	687b      	ldr	r3, [r7, #4]
 8017424:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8017428:	687b      	ldr	r3, [r7, #4]
 801742a:	32b0      	adds	r2, #176	@ 0xb0
 801742c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8017430:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8017432:	68fb      	ldr	r3, [r7, #12]
 8017434:	2b00      	cmp	r3, #0
 8017436:	d101      	bne.n	801743c <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8017438:	2303      	movs	r3, #3
 801743a:	e024      	b.n	8017486 <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 801743c:	687b      	ldr	r3, [r7, #4]
 801743e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8017442:	687a      	ldr	r2, [r7, #4]
 8017444:	33b0      	adds	r3, #176	@ 0xb0
 8017446:	009b      	lsls	r3, r3, #2
 8017448:	4413      	add	r3, r2
 801744a:	685b      	ldr	r3, [r3, #4]
 801744c:	2b00      	cmp	r3, #0
 801744e:	d019      	beq.n	8017484 <USBD_CDC_EP0_RxReady+0x6a>
 8017450:	68fb      	ldr	r3, [r7, #12]
 8017452:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8017456:	2bff      	cmp	r3, #255	@ 0xff
 8017458:	d014      	beq.n	8017484 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 801745a:	687b      	ldr	r3, [r7, #4]
 801745c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8017460:	687a      	ldr	r2, [r7, #4]
 8017462:	33b0      	adds	r3, #176	@ 0xb0
 8017464:	009b      	lsls	r3, r3, #2
 8017466:	4413      	add	r3, r2
 8017468:	685b      	ldr	r3, [r3, #4]
 801746a:	689b      	ldr	r3, [r3, #8]
 801746c:	68fa      	ldr	r2, [r7, #12]
 801746e:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 8017472:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8017474:	68fa      	ldr	r2, [r7, #12]
 8017476:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 801747a:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 801747c:	68fb      	ldr	r3, [r7, #12]
 801747e:	22ff      	movs	r2, #255	@ 0xff
 8017480:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 8017484:	2300      	movs	r3, #0
}
 8017486:	4618      	mov	r0, r3
 8017488:	3710      	adds	r7, #16
 801748a:	46bd      	mov	sp, r7
 801748c:	bd80      	pop	{r7, pc}
	...

08017490 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8017490:	b580      	push	{r7, lr}
 8017492:	b086      	sub	sp, #24
 8017494:	af00      	add	r7, sp, #0
 8017496:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8017498:	2182      	movs	r1, #130	@ 0x82
 801749a:	4818      	ldr	r0, [pc, #96]	@ (80174fc <USBD_CDC_GetFSCfgDesc+0x6c>)
 801749c:	f000 fd4f 	bl	8017f3e <USBD_GetEpDesc>
 80174a0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80174a2:	2101      	movs	r1, #1
 80174a4:	4815      	ldr	r0, [pc, #84]	@ (80174fc <USBD_CDC_GetFSCfgDesc+0x6c>)
 80174a6:	f000 fd4a 	bl	8017f3e <USBD_GetEpDesc>
 80174aa:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80174ac:	2181      	movs	r1, #129	@ 0x81
 80174ae:	4813      	ldr	r0, [pc, #76]	@ (80174fc <USBD_CDC_GetFSCfgDesc+0x6c>)
 80174b0:	f000 fd45 	bl	8017f3e <USBD_GetEpDesc>
 80174b4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80174b6:	697b      	ldr	r3, [r7, #20]
 80174b8:	2b00      	cmp	r3, #0
 80174ba:	d002      	beq.n	80174c2 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80174bc:	697b      	ldr	r3, [r7, #20]
 80174be:	2210      	movs	r2, #16
 80174c0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80174c2:	693b      	ldr	r3, [r7, #16]
 80174c4:	2b00      	cmp	r3, #0
 80174c6:	d006      	beq.n	80174d6 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80174c8:	693b      	ldr	r3, [r7, #16]
 80174ca:	2200      	movs	r2, #0
 80174cc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80174d0:	711a      	strb	r2, [r3, #4]
 80174d2:	2200      	movs	r2, #0
 80174d4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80174d6:	68fb      	ldr	r3, [r7, #12]
 80174d8:	2b00      	cmp	r3, #0
 80174da:	d006      	beq.n	80174ea <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80174dc:	68fb      	ldr	r3, [r7, #12]
 80174de:	2200      	movs	r2, #0
 80174e0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80174e4:	711a      	strb	r2, [r3, #4]
 80174e6:	2200      	movs	r2, #0
 80174e8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80174ea:	687b      	ldr	r3, [r7, #4]
 80174ec:	2243      	movs	r2, #67	@ 0x43
 80174ee:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80174f0:	4b02      	ldr	r3, [pc, #8]	@ (80174fc <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 80174f2:	4618      	mov	r0, r3
 80174f4:	3718      	adds	r7, #24
 80174f6:	46bd      	mov	sp, r7
 80174f8:	bd80      	pop	{r7, pc}
 80174fa:	bf00      	nop
 80174fc:	200000b4 	.word	0x200000b4

08017500 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8017500:	b580      	push	{r7, lr}
 8017502:	b086      	sub	sp, #24
 8017504:	af00      	add	r7, sp, #0
 8017506:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8017508:	2182      	movs	r1, #130	@ 0x82
 801750a:	4818      	ldr	r0, [pc, #96]	@ (801756c <USBD_CDC_GetHSCfgDesc+0x6c>)
 801750c:	f000 fd17 	bl	8017f3e <USBD_GetEpDesc>
 8017510:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8017512:	2101      	movs	r1, #1
 8017514:	4815      	ldr	r0, [pc, #84]	@ (801756c <USBD_CDC_GetHSCfgDesc+0x6c>)
 8017516:	f000 fd12 	bl	8017f3e <USBD_GetEpDesc>
 801751a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 801751c:	2181      	movs	r1, #129	@ 0x81
 801751e:	4813      	ldr	r0, [pc, #76]	@ (801756c <USBD_CDC_GetHSCfgDesc+0x6c>)
 8017520:	f000 fd0d 	bl	8017f3e <USBD_GetEpDesc>
 8017524:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8017526:	697b      	ldr	r3, [r7, #20]
 8017528:	2b00      	cmp	r3, #0
 801752a:	d002      	beq.n	8017532 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 801752c:	697b      	ldr	r3, [r7, #20]
 801752e:	2210      	movs	r2, #16
 8017530:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8017532:	693b      	ldr	r3, [r7, #16]
 8017534:	2b00      	cmp	r3, #0
 8017536:	d006      	beq.n	8017546 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8017538:	693b      	ldr	r3, [r7, #16]
 801753a:	2200      	movs	r2, #0
 801753c:	711a      	strb	r2, [r3, #4]
 801753e:	2200      	movs	r2, #0
 8017540:	f042 0202 	orr.w	r2, r2, #2
 8017544:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8017546:	68fb      	ldr	r3, [r7, #12]
 8017548:	2b00      	cmp	r3, #0
 801754a:	d006      	beq.n	801755a <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 801754c:	68fb      	ldr	r3, [r7, #12]
 801754e:	2200      	movs	r2, #0
 8017550:	711a      	strb	r2, [r3, #4]
 8017552:	2200      	movs	r2, #0
 8017554:	f042 0202 	orr.w	r2, r2, #2
 8017558:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 801755a:	687b      	ldr	r3, [r7, #4]
 801755c:	2243      	movs	r2, #67	@ 0x43
 801755e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8017560:	4b02      	ldr	r3, [pc, #8]	@ (801756c <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8017562:	4618      	mov	r0, r3
 8017564:	3718      	adds	r7, #24
 8017566:	46bd      	mov	sp, r7
 8017568:	bd80      	pop	{r7, pc}
 801756a:	bf00      	nop
 801756c:	200000b4 	.word	0x200000b4

08017570 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8017570:	b580      	push	{r7, lr}
 8017572:	b086      	sub	sp, #24
 8017574:	af00      	add	r7, sp, #0
 8017576:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8017578:	2182      	movs	r1, #130	@ 0x82
 801757a:	4818      	ldr	r0, [pc, #96]	@ (80175dc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 801757c:	f000 fcdf 	bl	8017f3e <USBD_GetEpDesc>
 8017580:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8017582:	2101      	movs	r1, #1
 8017584:	4815      	ldr	r0, [pc, #84]	@ (80175dc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8017586:	f000 fcda 	bl	8017f3e <USBD_GetEpDesc>
 801758a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 801758c:	2181      	movs	r1, #129	@ 0x81
 801758e:	4813      	ldr	r0, [pc, #76]	@ (80175dc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8017590:	f000 fcd5 	bl	8017f3e <USBD_GetEpDesc>
 8017594:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8017596:	697b      	ldr	r3, [r7, #20]
 8017598:	2b00      	cmp	r3, #0
 801759a:	d002      	beq.n	80175a2 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 801759c:	697b      	ldr	r3, [r7, #20]
 801759e:	2210      	movs	r2, #16
 80175a0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80175a2:	693b      	ldr	r3, [r7, #16]
 80175a4:	2b00      	cmp	r3, #0
 80175a6:	d006      	beq.n	80175b6 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80175a8:	693b      	ldr	r3, [r7, #16]
 80175aa:	2200      	movs	r2, #0
 80175ac:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80175b0:	711a      	strb	r2, [r3, #4]
 80175b2:	2200      	movs	r2, #0
 80175b4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80175b6:	68fb      	ldr	r3, [r7, #12]
 80175b8:	2b00      	cmp	r3, #0
 80175ba:	d006      	beq.n	80175ca <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80175bc:	68fb      	ldr	r3, [r7, #12]
 80175be:	2200      	movs	r2, #0
 80175c0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80175c4:	711a      	strb	r2, [r3, #4]
 80175c6:	2200      	movs	r2, #0
 80175c8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80175ca:	687b      	ldr	r3, [r7, #4]
 80175cc:	2243      	movs	r2, #67	@ 0x43
 80175ce:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80175d0:	4b02      	ldr	r3, [pc, #8]	@ (80175dc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 80175d2:	4618      	mov	r0, r3
 80175d4:	3718      	adds	r7, #24
 80175d6:	46bd      	mov	sp, r7
 80175d8:	bd80      	pop	{r7, pc}
 80175da:	bf00      	nop
 80175dc:	200000b4 	.word	0x200000b4

080175e0 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80175e0:	b480      	push	{r7}
 80175e2:	b083      	sub	sp, #12
 80175e4:	af00      	add	r7, sp, #0
 80175e6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80175e8:	687b      	ldr	r3, [r7, #4]
 80175ea:	220a      	movs	r2, #10
 80175ec:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80175ee:	4b03      	ldr	r3, [pc, #12]	@ (80175fc <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80175f0:	4618      	mov	r0, r3
 80175f2:	370c      	adds	r7, #12
 80175f4:	46bd      	mov	sp, r7
 80175f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80175fa:	4770      	bx	lr
 80175fc:	20000070 	.word	0x20000070

08017600 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8017600:	b480      	push	{r7}
 8017602:	b083      	sub	sp, #12
 8017604:	af00      	add	r7, sp, #0
 8017606:	6078      	str	r0, [r7, #4]
 8017608:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 801760a:	683b      	ldr	r3, [r7, #0]
 801760c:	2b00      	cmp	r3, #0
 801760e:	d101      	bne.n	8017614 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8017610:	2303      	movs	r3, #3
 8017612:	e009      	b.n	8017628 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8017614:	687b      	ldr	r3, [r7, #4]
 8017616:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 801761a:	687a      	ldr	r2, [r7, #4]
 801761c:	33b0      	adds	r3, #176	@ 0xb0
 801761e:	009b      	lsls	r3, r3, #2
 8017620:	4413      	add	r3, r2
 8017622:	683a      	ldr	r2, [r7, #0]
 8017624:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8017626:	2300      	movs	r3, #0
}
 8017628:	4618      	mov	r0, r3
 801762a:	370c      	adds	r7, #12
 801762c:	46bd      	mov	sp, r7
 801762e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017632:	4770      	bx	lr

08017634 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8017634:	b480      	push	{r7}
 8017636:	b087      	sub	sp, #28
 8017638:	af00      	add	r7, sp, #0
 801763a:	60f8      	str	r0, [r7, #12]
 801763c:	60b9      	str	r1, [r7, #8]
 801763e:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8017640:	68fb      	ldr	r3, [r7, #12]
 8017642:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8017646:	68fb      	ldr	r3, [r7, #12]
 8017648:	32b0      	adds	r2, #176	@ 0xb0
 801764a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801764e:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8017650:	697b      	ldr	r3, [r7, #20]
 8017652:	2b00      	cmp	r3, #0
 8017654:	d101      	bne.n	801765a <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8017656:	2303      	movs	r3, #3
 8017658:	e008      	b.n	801766c <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 801765a:	697b      	ldr	r3, [r7, #20]
 801765c:	68ba      	ldr	r2, [r7, #8]
 801765e:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8017662:	697b      	ldr	r3, [r7, #20]
 8017664:	687a      	ldr	r2, [r7, #4]
 8017666:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 801766a:	2300      	movs	r3, #0
}
 801766c:	4618      	mov	r0, r3
 801766e:	371c      	adds	r7, #28
 8017670:	46bd      	mov	sp, r7
 8017672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017676:	4770      	bx	lr

08017678 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8017678:	b480      	push	{r7}
 801767a:	b085      	sub	sp, #20
 801767c:	af00      	add	r7, sp, #0
 801767e:	6078      	str	r0, [r7, #4]
 8017680:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8017682:	687b      	ldr	r3, [r7, #4]
 8017684:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8017688:	687b      	ldr	r3, [r7, #4]
 801768a:	32b0      	adds	r2, #176	@ 0xb0
 801768c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8017690:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8017692:	68fb      	ldr	r3, [r7, #12]
 8017694:	2b00      	cmp	r3, #0
 8017696:	d101      	bne.n	801769c <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8017698:	2303      	movs	r3, #3
 801769a:	e004      	b.n	80176a6 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 801769c:	68fb      	ldr	r3, [r7, #12]
 801769e:	683a      	ldr	r2, [r7, #0]
 80176a0:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 80176a4:	2300      	movs	r3, #0
}
 80176a6:	4618      	mov	r0, r3
 80176a8:	3714      	adds	r7, #20
 80176aa:	46bd      	mov	sp, r7
 80176ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80176b0:	4770      	bx	lr
	...

080176b4 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80176b4:	b580      	push	{r7, lr}
 80176b6:	b084      	sub	sp, #16
 80176b8:	af00      	add	r7, sp, #0
 80176ba:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80176bc:	687b      	ldr	r3, [r7, #4]
 80176be:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80176c2:	687b      	ldr	r3, [r7, #4]
 80176c4:	32b0      	adds	r2, #176	@ 0xb0
 80176c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80176ca:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 80176cc:	2301      	movs	r3, #1
 80176ce:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80176d0:	687b      	ldr	r3, [r7, #4]
 80176d2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80176d6:	687b      	ldr	r3, [r7, #4]
 80176d8:	32b0      	adds	r2, #176	@ 0xb0
 80176da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80176de:	2b00      	cmp	r3, #0
 80176e0:	d101      	bne.n	80176e6 <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 80176e2:	2303      	movs	r3, #3
 80176e4:	e025      	b.n	8017732 <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 80176e6:	68bb      	ldr	r3, [r7, #8]
 80176e8:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 80176ec:	2b00      	cmp	r3, #0
 80176ee:	d11f      	bne.n	8017730 <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 80176f0:	68bb      	ldr	r3, [r7, #8]
 80176f2:	2201      	movs	r2, #1
 80176f4:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 80176f8:	4b10      	ldr	r3, [pc, #64]	@ (801773c <USBD_CDC_TransmitPacket+0x88>)
 80176fa:	781b      	ldrb	r3, [r3, #0]
 80176fc:	f003 020f 	and.w	r2, r3, #15
 8017700:	68bb      	ldr	r3, [r7, #8]
 8017702:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 8017706:	6878      	ldr	r0, [r7, #4]
 8017708:	4613      	mov	r3, r2
 801770a:	009b      	lsls	r3, r3, #2
 801770c:	4413      	add	r3, r2
 801770e:	009b      	lsls	r3, r3, #2
 8017710:	4403      	add	r3, r0
 8017712:	3318      	adds	r3, #24
 8017714:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8017716:	4b09      	ldr	r3, [pc, #36]	@ (801773c <USBD_CDC_TransmitPacket+0x88>)
 8017718:	7819      	ldrb	r1, [r3, #0]
 801771a:	68bb      	ldr	r3, [r7, #8]
 801771c:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 8017720:	68bb      	ldr	r3, [r7, #8]
 8017722:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 8017726:	6878      	ldr	r0, [r7, #4]
 8017728:	f7ef fd4b 	bl	80071c2 <USBD_LL_Transmit>

    ret = USBD_OK;
 801772c:	2300      	movs	r3, #0
 801772e:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8017730:	7bfb      	ldrb	r3, [r7, #15]
}
 8017732:	4618      	mov	r0, r3
 8017734:	3710      	adds	r7, #16
 8017736:	46bd      	mov	sp, r7
 8017738:	bd80      	pop	{r7, pc}
 801773a:	bf00      	nop
 801773c:	200000f7 	.word	0x200000f7

08017740 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8017740:	b580      	push	{r7, lr}
 8017742:	b084      	sub	sp, #16
 8017744:	af00      	add	r7, sp, #0
 8017746:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8017748:	687b      	ldr	r3, [r7, #4]
 801774a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801774e:	687b      	ldr	r3, [r7, #4]
 8017750:	32b0      	adds	r2, #176	@ 0xb0
 8017752:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8017756:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8017758:	687b      	ldr	r3, [r7, #4]
 801775a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801775e:	687b      	ldr	r3, [r7, #4]
 8017760:	32b0      	adds	r2, #176	@ 0xb0
 8017762:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8017766:	2b00      	cmp	r3, #0
 8017768:	d101      	bne.n	801776e <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 801776a:	2303      	movs	r3, #3
 801776c:	e018      	b.n	80177a0 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 801776e:	687b      	ldr	r3, [r7, #4]
 8017770:	7c1b      	ldrb	r3, [r3, #16]
 8017772:	2b00      	cmp	r3, #0
 8017774:	d10a      	bne.n	801778c <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8017776:	4b0c      	ldr	r3, [pc, #48]	@ (80177a8 <USBD_CDC_ReceivePacket+0x68>)
 8017778:	7819      	ldrb	r1, [r3, #0]
 801777a:	68fb      	ldr	r3, [r7, #12]
 801777c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8017780:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8017784:	6878      	ldr	r0, [r7, #4]
 8017786:	f7ef fd3d 	bl	8007204 <USBD_LL_PrepareReceive>
 801778a:	e008      	b.n	801779e <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 801778c:	4b06      	ldr	r3, [pc, #24]	@ (80177a8 <USBD_CDC_ReceivePacket+0x68>)
 801778e:	7819      	ldrb	r1, [r3, #0]
 8017790:	68fb      	ldr	r3, [r7, #12]
 8017792:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8017796:	2340      	movs	r3, #64	@ 0x40
 8017798:	6878      	ldr	r0, [r7, #4]
 801779a:	f7ef fd33 	bl	8007204 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 801779e:	2300      	movs	r3, #0
}
 80177a0:	4618      	mov	r0, r3
 80177a2:	3710      	adds	r7, #16
 80177a4:	46bd      	mov	sp, r7
 80177a6:	bd80      	pop	{r7, pc}
 80177a8:	200000f8 	.word	0x200000f8

080177ac <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80177ac:	b580      	push	{r7, lr}
 80177ae:	b086      	sub	sp, #24
 80177b0:	af00      	add	r7, sp, #0
 80177b2:	60f8      	str	r0, [r7, #12]
 80177b4:	60b9      	str	r1, [r7, #8]
 80177b6:	4613      	mov	r3, r2
 80177b8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80177ba:	68fb      	ldr	r3, [r7, #12]
 80177bc:	2b00      	cmp	r3, #0
 80177be:	d101      	bne.n	80177c4 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80177c0:	2303      	movs	r3, #3
 80177c2:	e01f      	b.n	8017804 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 80177c4:	68fb      	ldr	r3, [r7, #12]
 80177c6:	2200      	movs	r2, #0
 80177c8:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 80177cc:	68fb      	ldr	r3, [r7, #12]
 80177ce:	2200      	movs	r2, #0
 80177d0:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 80177d4:	68fb      	ldr	r3, [r7, #12]
 80177d6:	2200      	movs	r2, #0
 80177d8:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80177dc:	68bb      	ldr	r3, [r7, #8]
 80177de:	2b00      	cmp	r3, #0
 80177e0:	d003      	beq.n	80177ea <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80177e2:	68fb      	ldr	r3, [r7, #12]
 80177e4:	68ba      	ldr	r2, [r7, #8]
 80177e6:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80177ea:	68fb      	ldr	r3, [r7, #12]
 80177ec:	2201      	movs	r2, #1
 80177ee:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 80177f2:	68fb      	ldr	r3, [r7, #12]
 80177f4:	79fa      	ldrb	r2, [r7, #7]
 80177f6:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80177f8:	68f8      	ldr	r0, [r7, #12]
 80177fa:	f7ef fbad 	bl	8006f58 <USBD_LL_Init>
 80177fe:	4603      	mov	r3, r0
 8017800:	75fb      	strb	r3, [r7, #23]

  return ret;
 8017802:	7dfb      	ldrb	r3, [r7, #23]
}
 8017804:	4618      	mov	r0, r3
 8017806:	3718      	adds	r7, #24
 8017808:	46bd      	mov	sp, r7
 801780a:	bd80      	pop	{r7, pc}

0801780c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 801780c:	b580      	push	{r7, lr}
 801780e:	b084      	sub	sp, #16
 8017810:	af00      	add	r7, sp, #0
 8017812:	6078      	str	r0, [r7, #4]
 8017814:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8017816:	2300      	movs	r3, #0
 8017818:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 801781a:	683b      	ldr	r3, [r7, #0]
 801781c:	2b00      	cmp	r3, #0
 801781e:	d101      	bne.n	8017824 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8017820:	2303      	movs	r3, #3
 8017822:	e025      	b.n	8017870 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8017824:	687b      	ldr	r3, [r7, #4]
 8017826:	683a      	ldr	r2, [r7, #0]
 8017828:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 801782c:	687b      	ldr	r3, [r7, #4]
 801782e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8017832:	687b      	ldr	r3, [r7, #4]
 8017834:	32ae      	adds	r2, #174	@ 0xae
 8017836:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801783a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801783c:	2b00      	cmp	r3, #0
 801783e:	d00f      	beq.n	8017860 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8017840:	687b      	ldr	r3, [r7, #4]
 8017842:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8017846:	687b      	ldr	r3, [r7, #4]
 8017848:	32ae      	adds	r2, #174	@ 0xae
 801784a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801784e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8017850:	f107 020e 	add.w	r2, r7, #14
 8017854:	4610      	mov	r0, r2
 8017856:	4798      	blx	r3
 8017858:	4602      	mov	r2, r0
 801785a:	687b      	ldr	r3, [r7, #4]
 801785c:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8017860:	687b      	ldr	r3, [r7, #4]
 8017862:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8017866:	1c5a      	adds	r2, r3, #1
 8017868:	687b      	ldr	r3, [r7, #4]
 801786a:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 801786e:	2300      	movs	r3, #0
}
 8017870:	4618      	mov	r0, r3
 8017872:	3710      	adds	r7, #16
 8017874:	46bd      	mov	sp, r7
 8017876:	bd80      	pop	{r7, pc}

08017878 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8017878:	b580      	push	{r7, lr}
 801787a:	b082      	sub	sp, #8
 801787c:	af00      	add	r7, sp, #0
 801787e:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8017880:	6878      	ldr	r0, [r7, #4]
 8017882:	f7ef fbb5 	bl	8006ff0 <USBD_LL_Start>
 8017886:	4603      	mov	r3, r0
}
 8017888:	4618      	mov	r0, r3
 801788a:	3708      	adds	r7, #8
 801788c:	46bd      	mov	sp, r7
 801788e:	bd80      	pop	{r7, pc}

08017890 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8017890:	b480      	push	{r7}
 8017892:	b083      	sub	sp, #12
 8017894:	af00      	add	r7, sp, #0
 8017896:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8017898:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 801789a:	4618      	mov	r0, r3
 801789c:	370c      	adds	r7, #12
 801789e:	46bd      	mov	sp, r7
 80178a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80178a4:	4770      	bx	lr

080178a6 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80178a6:	b580      	push	{r7, lr}
 80178a8:	b084      	sub	sp, #16
 80178aa:	af00      	add	r7, sp, #0
 80178ac:	6078      	str	r0, [r7, #4]
 80178ae:	460b      	mov	r3, r1
 80178b0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80178b2:	2300      	movs	r3, #0
 80178b4:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80178b6:	687b      	ldr	r3, [r7, #4]
 80178b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80178bc:	2b00      	cmp	r3, #0
 80178be:	d009      	beq.n	80178d4 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 80178c0:	687b      	ldr	r3, [r7, #4]
 80178c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80178c6:	681b      	ldr	r3, [r3, #0]
 80178c8:	78fa      	ldrb	r2, [r7, #3]
 80178ca:	4611      	mov	r1, r2
 80178cc:	6878      	ldr	r0, [r7, #4]
 80178ce:	4798      	blx	r3
 80178d0:	4603      	mov	r3, r0
 80178d2:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80178d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80178d6:	4618      	mov	r0, r3
 80178d8:	3710      	adds	r7, #16
 80178da:	46bd      	mov	sp, r7
 80178dc:	bd80      	pop	{r7, pc}

080178de <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80178de:	b580      	push	{r7, lr}
 80178e0:	b084      	sub	sp, #16
 80178e2:	af00      	add	r7, sp, #0
 80178e4:	6078      	str	r0, [r7, #4]
 80178e6:	460b      	mov	r3, r1
 80178e8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80178ea:	2300      	movs	r3, #0
 80178ec:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 80178ee:	687b      	ldr	r3, [r7, #4]
 80178f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80178f4:	685b      	ldr	r3, [r3, #4]
 80178f6:	78fa      	ldrb	r2, [r7, #3]
 80178f8:	4611      	mov	r1, r2
 80178fa:	6878      	ldr	r0, [r7, #4]
 80178fc:	4798      	blx	r3
 80178fe:	4603      	mov	r3, r0
 8017900:	2b00      	cmp	r3, #0
 8017902:	d001      	beq.n	8017908 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8017904:	2303      	movs	r3, #3
 8017906:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8017908:	7bfb      	ldrb	r3, [r7, #15]
}
 801790a:	4618      	mov	r0, r3
 801790c:	3710      	adds	r7, #16
 801790e:	46bd      	mov	sp, r7
 8017910:	bd80      	pop	{r7, pc}

08017912 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8017912:	b580      	push	{r7, lr}
 8017914:	b084      	sub	sp, #16
 8017916:	af00      	add	r7, sp, #0
 8017918:	6078      	str	r0, [r7, #4]
 801791a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 801791c:	687b      	ldr	r3, [r7, #4]
 801791e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8017922:	6839      	ldr	r1, [r7, #0]
 8017924:	4618      	mov	r0, r3
 8017926:	f001 f906 	bl	8018b36 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 801792a:	687b      	ldr	r3, [r7, #4]
 801792c:	2201      	movs	r2, #1
 801792e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8017932:	687b      	ldr	r3, [r7, #4]
 8017934:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8017938:	461a      	mov	r2, r3
 801793a:	687b      	ldr	r3, [r7, #4]
 801793c:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8017940:	687b      	ldr	r3, [r7, #4]
 8017942:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8017946:	f003 031f 	and.w	r3, r3, #31
 801794a:	2b02      	cmp	r3, #2
 801794c:	d01a      	beq.n	8017984 <USBD_LL_SetupStage+0x72>
 801794e:	2b02      	cmp	r3, #2
 8017950:	d822      	bhi.n	8017998 <USBD_LL_SetupStage+0x86>
 8017952:	2b00      	cmp	r3, #0
 8017954:	d002      	beq.n	801795c <USBD_LL_SetupStage+0x4a>
 8017956:	2b01      	cmp	r3, #1
 8017958:	d00a      	beq.n	8017970 <USBD_LL_SetupStage+0x5e>
 801795a:	e01d      	b.n	8017998 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 801795c:	687b      	ldr	r3, [r7, #4]
 801795e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8017962:	4619      	mov	r1, r3
 8017964:	6878      	ldr	r0, [r7, #4]
 8017966:	f000 fb5d 	bl	8018024 <USBD_StdDevReq>
 801796a:	4603      	mov	r3, r0
 801796c:	73fb      	strb	r3, [r7, #15]
      break;
 801796e:	e020      	b.n	80179b2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8017970:	687b      	ldr	r3, [r7, #4]
 8017972:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8017976:	4619      	mov	r1, r3
 8017978:	6878      	ldr	r0, [r7, #4]
 801797a:	f000 fbc5 	bl	8018108 <USBD_StdItfReq>
 801797e:	4603      	mov	r3, r0
 8017980:	73fb      	strb	r3, [r7, #15]
      break;
 8017982:	e016      	b.n	80179b2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8017984:	687b      	ldr	r3, [r7, #4]
 8017986:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 801798a:	4619      	mov	r1, r3
 801798c:	6878      	ldr	r0, [r7, #4]
 801798e:	f000 fc27 	bl	80181e0 <USBD_StdEPReq>
 8017992:	4603      	mov	r3, r0
 8017994:	73fb      	strb	r3, [r7, #15]
      break;
 8017996:	e00c      	b.n	80179b2 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8017998:	687b      	ldr	r3, [r7, #4]
 801799a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 801799e:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80179a2:	b2db      	uxtb	r3, r3
 80179a4:	4619      	mov	r1, r3
 80179a6:	6878      	ldr	r0, [r7, #4]
 80179a8:	f7ef fb82 	bl	80070b0 <USBD_LL_StallEP>
 80179ac:	4603      	mov	r3, r0
 80179ae:	73fb      	strb	r3, [r7, #15]
      break;
 80179b0:	bf00      	nop
  }

  return ret;
 80179b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80179b4:	4618      	mov	r0, r3
 80179b6:	3710      	adds	r7, #16
 80179b8:	46bd      	mov	sp, r7
 80179ba:	bd80      	pop	{r7, pc}

080179bc <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80179bc:	b580      	push	{r7, lr}
 80179be:	b086      	sub	sp, #24
 80179c0:	af00      	add	r7, sp, #0
 80179c2:	60f8      	str	r0, [r7, #12]
 80179c4:	460b      	mov	r3, r1
 80179c6:	607a      	str	r2, [r7, #4]
 80179c8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 80179ca:	2300      	movs	r3, #0
 80179cc:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 80179ce:	7afb      	ldrb	r3, [r7, #11]
 80179d0:	2b00      	cmp	r3, #0
 80179d2:	d16e      	bne.n	8017ab2 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 80179d4:	68fb      	ldr	r3, [r7, #12]
 80179d6:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 80179da:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80179dc:	68fb      	ldr	r3, [r7, #12]
 80179de:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80179e2:	2b03      	cmp	r3, #3
 80179e4:	f040 8098 	bne.w	8017b18 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 80179e8:	693b      	ldr	r3, [r7, #16]
 80179ea:	689a      	ldr	r2, [r3, #8]
 80179ec:	693b      	ldr	r3, [r7, #16]
 80179ee:	68db      	ldr	r3, [r3, #12]
 80179f0:	429a      	cmp	r2, r3
 80179f2:	d913      	bls.n	8017a1c <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 80179f4:	693b      	ldr	r3, [r7, #16]
 80179f6:	689a      	ldr	r2, [r3, #8]
 80179f8:	693b      	ldr	r3, [r7, #16]
 80179fa:	68db      	ldr	r3, [r3, #12]
 80179fc:	1ad2      	subs	r2, r2, r3
 80179fe:	693b      	ldr	r3, [r7, #16]
 8017a00:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8017a02:	693b      	ldr	r3, [r7, #16]
 8017a04:	68da      	ldr	r2, [r3, #12]
 8017a06:	693b      	ldr	r3, [r7, #16]
 8017a08:	689b      	ldr	r3, [r3, #8]
 8017a0a:	4293      	cmp	r3, r2
 8017a0c:	bf28      	it	cs
 8017a0e:	4613      	movcs	r3, r2
 8017a10:	461a      	mov	r2, r3
 8017a12:	6879      	ldr	r1, [r7, #4]
 8017a14:	68f8      	ldr	r0, [r7, #12]
 8017a16:	f001 f982 	bl	8018d1e <USBD_CtlContinueRx>
 8017a1a:	e07d      	b.n	8017b18 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8017a1c:	68fb      	ldr	r3, [r7, #12]
 8017a1e:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8017a22:	f003 031f 	and.w	r3, r3, #31
 8017a26:	2b02      	cmp	r3, #2
 8017a28:	d014      	beq.n	8017a54 <USBD_LL_DataOutStage+0x98>
 8017a2a:	2b02      	cmp	r3, #2
 8017a2c:	d81d      	bhi.n	8017a6a <USBD_LL_DataOutStage+0xae>
 8017a2e:	2b00      	cmp	r3, #0
 8017a30:	d002      	beq.n	8017a38 <USBD_LL_DataOutStage+0x7c>
 8017a32:	2b01      	cmp	r3, #1
 8017a34:	d003      	beq.n	8017a3e <USBD_LL_DataOutStage+0x82>
 8017a36:	e018      	b.n	8017a6a <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8017a38:	2300      	movs	r3, #0
 8017a3a:	75bb      	strb	r3, [r7, #22]
            break;
 8017a3c:	e018      	b.n	8017a70 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8017a3e:	68fb      	ldr	r3, [r7, #12]
 8017a40:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8017a44:	b2db      	uxtb	r3, r3
 8017a46:	4619      	mov	r1, r3
 8017a48:	68f8      	ldr	r0, [r7, #12]
 8017a4a:	f000 fa5e 	bl	8017f0a <USBD_CoreFindIF>
 8017a4e:	4603      	mov	r3, r0
 8017a50:	75bb      	strb	r3, [r7, #22]
            break;
 8017a52:	e00d      	b.n	8017a70 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8017a54:	68fb      	ldr	r3, [r7, #12]
 8017a56:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8017a5a:	b2db      	uxtb	r3, r3
 8017a5c:	4619      	mov	r1, r3
 8017a5e:	68f8      	ldr	r0, [r7, #12]
 8017a60:	f000 fa60 	bl	8017f24 <USBD_CoreFindEP>
 8017a64:	4603      	mov	r3, r0
 8017a66:	75bb      	strb	r3, [r7, #22]
            break;
 8017a68:	e002      	b.n	8017a70 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8017a6a:	2300      	movs	r3, #0
 8017a6c:	75bb      	strb	r3, [r7, #22]
            break;
 8017a6e:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8017a70:	7dbb      	ldrb	r3, [r7, #22]
 8017a72:	2b00      	cmp	r3, #0
 8017a74:	d119      	bne.n	8017aaa <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8017a76:	68fb      	ldr	r3, [r7, #12]
 8017a78:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8017a7c:	b2db      	uxtb	r3, r3
 8017a7e:	2b03      	cmp	r3, #3
 8017a80:	d113      	bne.n	8017aaa <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8017a82:	7dba      	ldrb	r2, [r7, #22]
 8017a84:	68fb      	ldr	r3, [r7, #12]
 8017a86:	32ae      	adds	r2, #174	@ 0xae
 8017a88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8017a8c:	691b      	ldr	r3, [r3, #16]
 8017a8e:	2b00      	cmp	r3, #0
 8017a90:	d00b      	beq.n	8017aaa <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8017a92:	7dba      	ldrb	r2, [r7, #22]
 8017a94:	68fb      	ldr	r3, [r7, #12]
 8017a96:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8017a9a:	7dba      	ldrb	r2, [r7, #22]
 8017a9c:	68fb      	ldr	r3, [r7, #12]
 8017a9e:	32ae      	adds	r2, #174	@ 0xae
 8017aa0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8017aa4:	691b      	ldr	r3, [r3, #16]
 8017aa6:	68f8      	ldr	r0, [r7, #12]
 8017aa8:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8017aaa:	68f8      	ldr	r0, [r7, #12]
 8017aac:	f001 f948 	bl	8018d40 <USBD_CtlSendStatus>
 8017ab0:	e032      	b.n	8017b18 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8017ab2:	7afb      	ldrb	r3, [r7, #11]
 8017ab4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8017ab8:	b2db      	uxtb	r3, r3
 8017aba:	4619      	mov	r1, r3
 8017abc:	68f8      	ldr	r0, [r7, #12]
 8017abe:	f000 fa31 	bl	8017f24 <USBD_CoreFindEP>
 8017ac2:	4603      	mov	r3, r0
 8017ac4:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8017ac6:	7dbb      	ldrb	r3, [r7, #22]
 8017ac8:	2bff      	cmp	r3, #255	@ 0xff
 8017aca:	d025      	beq.n	8017b18 <USBD_LL_DataOutStage+0x15c>
 8017acc:	7dbb      	ldrb	r3, [r7, #22]
 8017ace:	2b00      	cmp	r3, #0
 8017ad0:	d122      	bne.n	8017b18 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8017ad2:	68fb      	ldr	r3, [r7, #12]
 8017ad4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8017ad8:	b2db      	uxtb	r3, r3
 8017ada:	2b03      	cmp	r3, #3
 8017adc:	d117      	bne.n	8017b0e <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8017ade:	7dba      	ldrb	r2, [r7, #22]
 8017ae0:	68fb      	ldr	r3, [r7, #12]
 8017ae2:	32ae      	adds	r2, #174	@ 0xae
 8017ae4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8017ae8:	699b      	ldr	r3, [r3, #24]
 8017aea:	2b00      	cmp	r3, #0
 8017aec:	d00f      	beq.n	8017b0e <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8017aee:	7dba      	ldrb	r2, [r7, #22]
 8017af0:	68fb      	ldr	r3, [r7, #12]
 8017af2:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8017af6:	7dba      	ldrb	r2, [r7, #22]
 8017af8:	68fb      	ldr	r3, [r7, #12]
 8017afa:	32ae      	adds	r2, #174	@ 0xae
 8017afc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8017b00:	699b      	ldr	r3, [r3, #24]
 8017b02:	7afa      	ldrb	r2, [r7, #11]
 8017b04:	4611      	mov	r1, r2
 8017b06:	68f8      	ldr	r0, [r7, #12]
 8017b08:	4798      	blx	r3
 8017b0a:	4603      	mov	r3, r0
 8017b0c:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8017b0e:	7dfb      	ldrb	r3, [r7, #23]
 8017b10:	2b00      	cmp	r3, #0
 8017b12:	d001      	beq.n	8017b18 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8017b14:	7dfb      	ldrb	r3, [r7, #23]
 8017b16:	e000      	b.n	8017b1a <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8017b18:	2300      	movs	r3, #0
}
 8017b1a:	4618      	mov	r0, r3
 8017b1c:	3718      	adds	r7, #24
 8017b1e:	46bd      	mov	sp, r7
 8017b20:	bd80      	pop	{r7, pc}

08017b22 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8017b22:	b580      	push	{r7, lr}
 8017b24:	b086      	sub	sp, #24
 8017b26:	af00      	add	r7, sp, #0
 8017b28:	60f8      	str	r0, [r7, #12]
 8017b2a:	460b      	mov	r3, r1
 8017b2c:	607a      	str	r2, [r7, #4]
 8017b2e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8017b30:	7afb      	ldrb	r3, [r7, #11]
 8017b32:	2b00      	cmp	r3, #0
 8017b34:	d16f      	bne.n	8017c16 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8017b36:	68fb      	ldr	r3, [r7, #12]
 8017b38:	3314      	adds	r3, #20
 8017b3a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8017b3c:	68fb      	ldr	r3, [r7, #12]
 8017b3e:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8017b42:	2b02      	cmp	r3, #2
 8017b44:	d15a      	bne.n	8017bfc <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8017b46:	693b      	ldr	r3, [r7, #16]
 8017b48:	689a      	ldr	r2, [r3, #8]
 8017b4a:	693b      	ldr	r3, [r7, #16]
 8017b4c:	68db      	ldr	r3, [r3, #12]
 8017b4e:	429a      	cmp	r2, r3
 8017b50:	d914      	bls.n	8017b7c <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8017b52:	693b      	ldr	r3, [r7, #16]
 8017b54:	689a      	ldr	r2, [r3, #8]
 8017b56:	693b      	ldr	r3, [r7, #16]
 8017b58:	68db      	ldr	r3, [r3, #12]
 8017b5a:	1ad2      	subs	r2, r2, r3
 8017b5c:	693b      	ldr	r3, [r7, #16]
 8017b5e:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8017b60:	693b      	ldr	r3, [r7, #16]
 8017b62:	689b      	ldr	r3, [r3, #8]
 8017b64:	461a      	mov	r2, r3
 8017b66:	6879      	ldr	r1, [r7, #4]
 8017b68:	68f8      	ldr	r0, [r7, #12]
 8017b6a:	f001 f8aa 	bl	8018cc2 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8017b6e:	2300      	movs	r3, #0
 8017b70:	2200      	movs	r2, #0
 8017b72:	2100      	movs	r1, #0
 8017b74:	68f8      	ldr	r0, [r7, #12]
 8017b76:	f7ef fb45 	bl	8007204 <USBD_LL_PrepareReceive>
 8017b7a:	e03f      	b.n	8017bfc <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8017b7c:	693b      	ldr	r3, [r7, #16]
 8017b7e:	68da      	ldr	r2, [r3, #12]
 8017b80:	693b      	ldr	r3, [r7, #16]
 8017b82:	689b      	ldr	r3, [r3, #8]
 8017b84:	429a      	cmp	r2, r3
 8017b86:	d11c      	bne.n	8017bc2 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8017b88:	693b      	ldr	r3, [r7, #16]
 8017b8a:	685a      	ldr	r2, [r3, #4]
 8017b8c:	693b      	ldr	r3, [r7, #16]
 8017b8e:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8017b90:	429a      	cmp	r2, r3
 8017b92:	d316      	bcc.n	8017bc2 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8017b94:	693b      	ldr	r3, [r7, #16]
 8017b96:	685a      	ldr	r2, [r3, #4]
 8017b98:	68fb      	ldr	r3, [r7, #12]
 8017b9a:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8017b9e:	429a      	cmp	r2, r3
 8017ba0:	d20f      	bcs.n	8017bc2 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8017ba2:	2200      	movs	r2, #0
 8017ba4:	2100      	movs	r1, #0
 8017ba6:	68f8      	ldr	r0, [r7, #12]
 8017ba8:	f001 f88b 	bl	8018cc2 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8017bac:	68fb      	ldr	r3, [r7, #12]
 8017bae:	2200      	movs	r2, #0
 8017bb0:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8017bb4:	2300      	movs	r3, #0
 8017bb6:	2200      	movs	r2, #0
 8017bb8:	2100      	movs	r1, #0
 8017bba:	68f8      	ldr	r0, [r7, #12]
 8017bbc:	f7ef fb22 	bl	8007204 <USBD_LL_PrepareReceive>
 8017bc0:	e01c      	b.n	8017bfc <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8017bc2:	68fb      	ldr	r3, [r7, #12]
 8017bc4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8017bc8:	b2db      	uxtb	r3, r3
 8017bca:	2b03      	cmp	r3, #3
 8017bcc:	d10f      	bne.n	8017bee <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8017bce:	68fb      	ldr	r3, [r7, #12]
 8017bd0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8017bd4:	68db      	ldr	r3, [r3, #12]
 8017bd6:	2b00      	cmp	r3, #0
 8017bd8:	d009      	beq.n	8017bee <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8017bda:	68fb      	ldr	r3, [r7, #12]
 8017bdc:	2200      	movs	r2, #0
 8017bde:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8017be2:	68fb      	ldr	r3, [r7, #12]
 8017be4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8017be8:	68db      	ldr	r3, [r3, #12]
 8017bea:	68f8      	ldr	r0, [r7, #12]
 8017bec:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8017bee:	2180      	movs	r1, #128	@ 0x80
 8017bf0:	68f8      	ldr	r0, [r7, #12]
 8017bf2:	f7ef fa5d 	bl	80070b0 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8017bf6:	68f8      	ldr	r0, [r7, #12]
 8017bf8:	f001 f8b5 	bl	8018d66 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8017bfc:	68fb      	ldr	r3, [r7, #12]
 8017bfe:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8017c02:	2b00      	cmp	r3, #0
 8017c04:	d03a      	beq.n	8017c7c <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8017c06:	68f8      	ldr	r0, [r7, #12]
 8017c08:	f7ff fe42 	bl	8017890 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8017c0c:	68fb      	ldr	r3, [r7, #12]
 8017c0e:	2200      	movs	r2, #0
 8017c10:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8017c14:	e032      	b.n	8017c7c <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8017c16:	7afb      	ldrb	r3, [r7, #11]
 8017c18:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8017c1c:	b2db      	uxtb	r3, r3
 8017c1e:	4619      	mov	r1, r3
 8017c20:	68f8      	ldr	r0, [r7, #12]
 8017c22:	f000 f97f 	bl	8017f24 <USBD_CoreFindEP>
 8017c26:	4603      	mov	r3, r0
 8017c28:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8017c2a:	7dfb      	ldrb	r3, [r7, #23]
 8017c2c:	2bff      	cmp	r3, #255	@ 0xff
 8017c2e:	d025      	beq.n	8017c7c <USBD_LL_DataInStage+0x15a>
 8017c30:	7dfb      	ldrb	r3, [r7, #23]
 8017c32:	2b00      	cmp	r3, #0
 8017c34:	d122      	bne.n	8017c7c <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8017c36:	68fb      	ldr	r3, [r7, #12]
 8017c38:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8017c3c:	b2db      	uxtb	r3, r3
 8017c3e:	2b03      	cmp	r3, #3
 8017c40:	d11c      	bne.n	8017c7c <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8017c42:	7dfa      	ldrb	r2, [r7, #23]
 8017c44:	68fb      	ldr	r3, [r7, #12]
 8017c46:	32ae      	adds	r2, #174	@ 0xae
 8017c48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8017c4c:	695b      	ldr	r3, [r3, #20]
 8017c4e:	2b00      	cmp	r3, #0
 8017c50:	d014      	beq.n	8017c7c <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8017c52:	7dfa      	ldrb	r2, [r7, #23]
 8017c54:	68fb      	ldr	r3, [r7, #12]
 8017c56:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8017c5a:	7dfa      	ldrb	r2, [r7, #23]
 8017c5c:	68fb      	ldr	r3, [r7, #12]
 8017c5e:	32ae      	adds	r2, #174	@ 0xae
 8017c60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8017c64:	695b      	ldr	r3, [r3, #20]
 8017c66:	7afa      	ldrb	r2, [r7, #11]
 8017c68:	4611      	mov	r1, r2
 8017c6a:	68f8      	ldr	r0, [r7, #12]
 8017c6c:	4798      	blx	r3
 8017c6e:	4603      	mov	r3, r0
 8017c70:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8017c72:	7dbb      	ldrb	r3, [r7, #22]
 8017c74:	2b00      	cmp	r3, #0
 8017c76:	d001      	beq.n	8017c7c <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8017c78:	7dbb      	ldrb	r3, [r7, #22]
 8017c7a:	e000      	b.n	8017c7e <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8017c7c:	2300      	movs	r3, #0
}
 8017c7e:	4618      	mov	r0, r3
 8017c80:	3718      	adds	r7, #24
 8017c82:	46bd      	mov	sp, r7
 8017c84:	bd80      	pop	{r7, pc}

08017c86 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8017c86:	b580      	push	{r7, lr}
 8017c88:	b084      	sub	sp, #16
 8017c8a:	af00      	add	r7, sp, #0
 8017c8c:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8017c8e:	2300      	movs	r3, #0
 8017c90:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8017c92:	687b      	ldr	r3, [r7, #4]
 8017c94:	2201      	movs	r2, #1
 8017c96:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8017c9a:	687b      	ldr	r3, [r7, #4]
 8017c9c:	2200      	movs	r2, #0
 8017c9e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8017ca2:	687b      	ldr	r3, [r7, #4]
 8017ca4:	2200      	movs	r2, #0
 8017ca6:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8017ca8:	687b      	ldr	r3, [r7, #4]
 8017caa:	2200      	movs	r2, #0
 8017cac:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8017cb0:	687b      	ldr	r3, [r7, #4]
 8017cb2:	2200      	movs	r2, #0
 8017cb4:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8017cb8:	687b      	ldr	r3, [r7, #4]
 8017cba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8017cbe:	2b00      	cmp	r3, #0
 8017cc0:	d014      	beq.n	8017cec <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8017cc2:	687b      	ldr	r3, [r7, #4]
 8017cc4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8017cc8:	685b      	ldr	r3, [r3, #4]
 8017cca:	2b00      	cmp	r3, #0
 8017ccc:	d00e      	beq.n	8017cec <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8017cce:	687b      	ldr	r3, [r7, #4]
 8017cd0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8017cd4:	685b      	ldr	r3, [r3, #4]
 8017cd6:	687a      	ldr	r2, [r7, #4]
 8017cd8:	6852      	ldr	r2, [r2, #4]
 8017cda:	b2d2      	uxtb	r2, r2
 8017cdc:	4611      	mov	r1, r2
 8017cde:	6878      	ldr	r0, [r7, #4]
 8017ce0:	4798      	blx	r3
 8017ce2:	4603      	mov	r3, r0
 8017ce4:	2b00      	cmp	r3, #0
 8017ce6:	d001      	beq.n	8017cec <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8017ce8:	2303      	movs	r3, #3
 8017cea:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8017cec:	2340      	movs	r3, #64	@ 0x40
 8017cee:	2200      	movs	r2, #0
 8017cf0:	2100      	movs	r1, #0
 8017cf2:	6878      	ldr	r0, [r7, #4]
 8017cf4:	f7ef f997 	bl	8007026 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8017cf8:	687b      	ldr	r3, [r7, #4]
 8017cfa:	2201      	movs	r2, #1
 8017cfc:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8017d00:	687b      	ldr	r3, [r7, #4]
 8017d02:	2240      	movs	r2, #64	@ 0x40
 8017d04:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8017d08:	2340      	movs	r3, #64	@ 0x40
 8017d0a:	2200      	movs	r2, #0
 8017d0c:	2180      	movs	r1, #128	@ 0x80
 8017d0e:	6878      	ldr	r0, [r7, #4]
 8017d10:	f7ef f989 	bl	8007026 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8017d14:	687b      	ldr	r3, [r7, #4]
 8017d16:	2201      	movs	r2, #1
 8017d18:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8017d1a:	687b      	ldr	r3, [r7, #4]
 8017d1c:	2240      	movs	r2, #64	@ 0x40
 8017d1e:	621a      	str	r2, [r3, #32]

  return ret;
 8017d20:	7bfb      	ldrb	r3, [r7, #15]
}
 8017d22:	4618      	mov	r0, r3
 8017d24:	3710      	adds	r7, #16
 8017d26:	46bd      	mov	sp, r7
 8017d28:	bd80      	pop	{r7, pc}

08017d2a <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8017d2a:	b480      	push	{r7}
 8017d2c:	b083      	sub	sp, #12
 8017d2e:	af00      	add	r7, sp, #0
 8017d30:	6078      	str	r0, [r7, #4]
 8017d32:	460b      	mov	r3, r1
 8017d34:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8017d36:	687b      	ldr	r3, [r7, #4]
 8017d38:	78fa      	ldrb	r2, [r7, #3]
 8017d3a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8017d3c:	2300      	movs	r3, #0
}
 8017d3e:	4618      	mov	r0, r3
 8017d40:	370c      	adds	r7, #12
 8017d42:	46bd      	mov	sp, r7
 8017d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017d48:	4770      	bx	lr

08017d4a <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8017d4a:	b480      	push	{r7}
 8017d4c:	b083      	sub	sp, #12
 8017d4e:	af00      	add	r7, sp, #0
 8017d50:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8017d52:	687b      	ldr	r3, [r7, #4]
 8017d54:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8017d58:	b2da      	uxtb	r2, r3
 8017d5a:	687b      	ldr	r3, [r7, #4]
 8017d5c:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8017d60:	687b      	ldr	r3, [r7, #4]
 8017d62:	2204      	movs	r2, #4
 8017d64:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8017d68:	2300      	movs	r3, #0
}
 8017d6a:	4618      	mov	r0, r3
 8017d6c:	370c      	adds	r7, #12
 8017d6e:	46bd      	mov	sp, r7
 8017d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017d74:	4770      	bx	lr

08017d76 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8017d76:	b480      	push	{r7}
 8017d78:	b083      	sub	sp, #12
 8017d7a:	af00      	add	r7, sp, #0
 8017d7c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8017d7e:	687b      	ldr	r3, [r7, #4]
 8017d80:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8017d84:	b2db      	uxtb	r3, r3
 8017d86:	2b04      	cmp	r3, #4
 8017d88:	d106      	bne.n	8017d98 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8017d8a:	687b      	ldr	r3, [r7, #4]
 8017d8c:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8017d90:	b2da      	uxtb	r2, r3
 8017d92:	687b      	ldr	r3, [r7, #4]
 8017d94:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8017d98:	2300      	movs	r3, #0
}
 8017d9a:	4618      	mov	r0, r3
 8017d9c:	370c      	adds	r7, #12
 8017d9e:	46bd      	mov	sp, r7
 8017da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017da4:	4770      	bx	lr

08017da6 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8017da6:	b580      	push	{r7, lr}
 8017da8:	b082      	sub	sp, #8
 8017daa:	af00      	add	r7, sp, #0
 8017dac:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8017dae:	687b      	ldr	r3, [r7, #4]
 8017db0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8017db4:	b2db      	uxtb	r3, r3
 8017db6:	2b03      	cmp	r3, #3
 8017db8:	d110      	bne.n	8017ddc <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8017dba:	687b      	ldr	r3, [r7, #4]
 8017dbc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8017dc0:	2b00      	cmp	r3, #0
 8017dc2:	d00b      	beq.n	8017ddc <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8017dc4:	687b      	ldr	r3, [r7, #4]
 8017dc6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8017dca:	69db      	ldr	r3, [r3, #28]
 8017dcc:	2b00      	cmp	r3, #0
 8017dce:	d005      	beq.n	8017ddc <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8017dd0:	687b      	ldr	r3, [r7, #4]
 8017dd2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8017dd6:	69db      	ldr	r3, [r3, #28]
 8017dd8:	6878      	ldr	r0, [r7, #4]
 8017dda:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8017ddc:	2300      	movs	r3, #0
}
 8017dde:	4618      	mov	r0, r3
 8017de0:	3708      	adds	r7, #8
 8017de2:	46bd      	mov	sp, r7
 8017de4:	bd80      	pop	{r7, pc}

08017de6 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8017de6:	b580      	push	{r7, lr}
 8017de8:	b082      	sub	sp, #8
 8017dea:	af00      	add	r7, sp, #0
 8017dec:	6078      	str	r0, [r7, #4]
 8017dee:	460b      	mov	r3, r1
 8017df0:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8017df2:	687b      	ldr	r3, [r7, #4]
 8017df4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8017df8:	687b      	ldr	r3, [r7, #4]
 8017dfa:	32ae      	adds	r2, #174	@ 0xae
 8017dfc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8017e00:	2b00      	cmp	r3, #0
 8017e02:	d101      	bne.n	8017e08 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8017e04:	2303      	movs	r3, #3
 8017e06:	e01c      	b.n	8017e42 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8017e08:	687b      	ldr	r3, [r7, #4]
 8017e0a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8017e0e:	b2db      	uxtb	r3, r3
 8017e10:	2b03      	cmp	r3, #3
 8017e12:	d115      	bne.n	8017e40 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8017e14:	687b      	ldr	r3, [r7, #4]
 8017e16:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8017e1a:	687b      	ldr	r3, [r7, #4]
 8017e1c:	32ae      	adds	r2, #174	@ 0xae
 8017e1e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8017e22:	6a1b      	ldr	r3, [r3, #32]
 8017e24:	2b00      	cmp	r3, #0
 8017e26:	d00b      	beq.n	8017e40 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8017e28:	687b      	ldr	r3, [r7, #4]
 8017e2a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8017e2e:	687b      	ldr	r3, [r7, #4]
 8017e30:	32ae      	adds	r2, #174	@ 0xae
 8017e32:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8017e36:	6a1b      	ldr	r3, [r3, #32]
 8017e38:	78fa      	ldrb	r2, [r7, #3]
 8017e3a:	4611      	mov	r1, r2
 8017e3c:	6878      	ldr	r0, [r7, #4]
 8017e3e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8017e40:	2300      	movs	r3, #0
}
 8017e42:	4618      	mov	r0, r3
 8017e44:	3708      	adds	r7, #8
 8017e46:	46bd      	mov	sp, r7
 8017e48:	bd80      	pop	{r7, pc}

08017e4a <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8017e4a:	b580      	push	{r7, lr}
 8017e4c:	b082      	sub	sp, #8
 8017e4e:	af00      	add	r7, sp, #0
 8017e50:	6078      	str	r0, [r7, #4]
 8017e52:	460b      	mov	r3, r1
 8017e54:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8017e56:	687b      	ldr	r3, [r7, #4]
 8017e58:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8017e5c:	687b      	ldr	r3, [r7, #4]
 8017e5e:	32ae      	adds	r2, #174	@ 0xae
 8017e60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8017e64:	2b00      	cmp	r3, #0
 8017e66:	d101      	bne.n	8017e6c <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8017e68:	2303      	movs	r3, #3
 8017e6a:	e01c      	b.n	8017ea6 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8017e6c:	687b      	ldr	r3, [r7, #4]
 8017e6e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8017e72:	b2db      	uxtb	r3, r3
 8017e74:	2b03      	cmp	r3, #3
 8017e76:	d115      	bne.n	8017ea4 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8017e78:	687b      	ldr	r3, [r7, #4]
 8017e7a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8017e7e:	687b      	ldr	r3, [r7, #4]
 8017e80:	32ae      	adds	r2, #174	@ 0xae
 8017e82:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8017e86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8017e88:	2b00      	cmp	r3, #0
 8017e8a:	d00b      	beq.n	8017ea4 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8017e8c:	687b      	ldr	r3, [r7, #4]
 8017e8e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8017e92:	687b      	ldr	r3, [r7, #4]
 8017e94:	32ae      	adds	r2, #174	@ 0xae
 8017e96:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8017e9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8017e9c:	78fa      	ldrb	r2, [r7, #3]
 8017e9e:	4611      	mov	r1, r2
 8017ea0:	6878      	ldr	r0, [r7, #4]
 8017ea2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8017ea4:	2300      	movs	r3, #0
}
 8017ea6:	4618      	mov	r0, r3
 8017ea8:	3708      	adds	r7, #8
 8017eaa:	46bd      	mov	sp, r7
 8017eac:	bd80      	pop	{r7, pc}

08017eae <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8017eae:	b480      	push	{r7}
 8017eb0:	b083      	sub	sp, #12
 8017eb2:	af00      	add	r7, sp, #0
 8017eb4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8017eb6:	2300      	movs	r3, #0
}
 8017eb8:	4618      	mov	r0, r3
 8017eba:	370c      	adds	r7, #12
 8017ebc:	46bd      	mov	sp, r7
 8017ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017ec2:	4770      	bx	lr

08017ec4 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8017ec4:	b580      	push	{r7, lr}
 8017ec6:	b084      	sub	sp, #16
 8017ec8:	af00      	add	r7, sp, #0
 8017eca:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8017ecc:	2300      	movs	r3, #0
 8017ece:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8017ed0:	687b      	ldr	r3, [r7, #4]
 8017ed2:	2201      	movs	r2, #1
 8017ed4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8017ed8:	687b      	ldr	r3, [r7, #4]
 8017eda:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8017ede:	2b00      	cmp	r3, #0
 8017ee0:	d00e      	beq.n	8017f00 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8017ee2:	687b      	ldr	r3, [r7, #4]
 8017ee4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8017ee8:	685b      	ldr	r3, [r3, #4]
 8017eea:	687a      	ldr	r2, [r7, #4]
 8017eec:	6852      	ldr	r2, [r2, #4]
 8017eee:	b2d2      	uxtb	r2, r2
 8017ef0:	4611      	mov	r1, r2
 8017ef2:	6878      	ldr	r0, [r7, #4]
 8017ef4:	4798      	blx	r3
 8017ef6:	4603      	mov	r3, r0
 8017ef8:	2b00      	cmp	r3, #0
 8017efa:	d001      	beq.n	8017f00 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8017efc:	2303      	movs	r3, #3
 8017efe:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8017f00:	7bfb      	ldrb	r3, [r7, #15]
}
 8017f02:	4618      	mov	r0, r3
 8017f04:	3710      	adds	r7, #16
 8017f06:	46bd      	mov	sp, r7
 8017f08:	bd80      	pop	{r7, pc}

08017f0a <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8017f0a:	b480      	push	{r7}
 8017f0c:	b083      	sub	sp, #12
 8017f0e:	af00      	add	r7, sp, #0
 8017f10:	6078      	str	r0, [r7, #4]
 8017f12:	460b      	mov	r3, r1
 8017f14:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8017f16:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8017f18:	4618      	mov	r0, r3
 8017f1a:	370c      	adds	r7, #12
 8017f1c:	46bd      	mov	sp, r7
 8017f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017f22:	4770      	bx	lr

08017f24 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8017f24:	b480      	push	{r7}
 8017f26:	b083      	sub	sp, #12
 8017f28:	af00      	add	r7, sp, #0
 8017f2a:	6078      	str	r0, [r7, #4]
 8017f2c:	460b      	mov	r3, r1
 8017f2e:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8017f30:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8017f32:	4618      	mov	r0, r3
 8017f34:	370c      	adds	r7, #12
 8017f36:	46bd      	mov	sp, r7
 8017f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017f3c:	4770      	bx	lr

08017f3e <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8017f3e:	b580      	push	{r7, lr}
 8017f40:	b086      	sub	sp, #24
 8017f42:	af00      	add	r7, sp, #0
 8017f44:	6078      	str	r0, [r7, #4]
 8017f46:	460b      	mov	r3, r1
 8017f48:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8017f4a:	687b      	ldr	r3, [r7, #4]
 8017f4c:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8017f4e:	687b      	ldr	r3, [r7, #4]
 8017f50:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8017f52:	2300      	movs	r3, #0
 8017f54:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8017f56:	68fb      	ldr	r3, [r7, #12]
 8017f58:	885b      	ldrh	r3, [r3, #2]
 8017f5a:	b29b      	uxth	r3, r3
 8017f5c:	68fa      	ldr	r2, [r7, #12]
 8017f5e:	7812      	ldrb	r2, [r2, #0]
 8017f60:	4293      	cmp	r3, r2
 8017f62:	d91f      	bls.n	8017fa4 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 8017f64:	68fb      	ldr	r3, [r7, #12]
 8017f66:	781b      	ldrb	r3, [r3, #0]
 8017f68:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8017f6a:	e013      	b.n	8017f94 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8017f6c:	f107 030a 	add.w	r3, r7, #10
 8017f70:	4619      	mov	r1, r3
 8017f72:	6978      	ldr	r0, [r7, #20]
 8017f74:	f000 f81b 	bl	8017fae <USBD_GetNextDesc>
 8017f78:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8017f7a:	697b      	ldr	r3, [r7, #20]
 8017f7c:	785b      	ldrb	r3, [r3, #1]
 8017f7e:	2b05      	cmp	r3, #5
 8017f80:	d108      	bne.n	8017f94 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8017f82:	697b      	ldr	r3, [r7, #20]
 8017f84:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8017f86:	693b      	ldr	r3, [r7, #16]
 8017f88:	789b      	ldrb	r3, [r3, #2]
 8017f8a:	78fa      	ldrb	r2, [r7, #3]
 8017f8c:	429a      	cmp	r2, r3
 8017f8e:	d008      	beq.n	8017fa2 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8017f90:	2300      	movs	r3, #0
 8017f92:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8017f94:	68fb      	ldr	r3, [r7, #12]
 8017f96:	885b      	ldrh	r3, [r3, #2]
 8017f98:	b29a      	uxth	r2, r3
 8017f9a:	897b      	ldrh	r3, [r7, #10]
 8017f9c:	429a      	cmp	r2, r3
 8017f9e:	d8e5      	bhi.n	8017f6c <USBD_GetEpDesc+0x2e>
 8017fa0:	e000      	b.n	8017fa4 <USBD_GetEpDesc+0x66>
          break;
 8017fa2:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8017fa4:	693b      	ldr	r3, [r7, #16]
}
 8017fa6:	4618      	mov	r0, r3
 8017fa8:	3718      	adds	r7, #24
 8017faa:	46bd      	mov	sp, r7
 8017fac:	bd80      	pop	{r7, pc}

08017fae <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8017fae:	b480      	push	{r7}
 8017fb0:	b085      	sub	sp, #20
 8017fb2:	af00      	add	r7, sp, #0
 8017fb4:	6078      	str	r0, [r7, #4]
 8017fb6:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8017fb8:	687b      	ldr	r3, [r7, #4]
 8017fba:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8017fbc:	683b      	ldr	r3, [r7, #0]
 8017fbe:	881b      	ldrh	r3, [r3, #0]
 8017fc0:	68fa      	ldr	r2, [r7, #12]
 8017fc2:	7812      	ldrb	r2, [r2, #0]
 8017fc4:	4413      	add	r3, r2
 8017fc6:	b29a      	uxth	r2, r3
 8017fc8:	683b      	ldr	r3, [r7, #0]
 8017fca:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8017fcc:	68fb      	ldr	r3, [r7, #12]
 8017fce:	781b      	ldrb	r3, [r3, #0]
 8017fd0:	461a      	mov	r2, r3
 8017fd2:	687b      	ldr	r3, [r7, #4]
 8017fd4:	4413      	add	r3, r2
 8017fd6:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8017fd8:	68fb      	ldr	r3, [r7, #12]
}
 8017fda:	4618      	mov	r0, r3
 8017fdc:	3714      	adds	r7, #20
 8017fde:	46bd      	mov	sp, r7
 8017fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017fe4:	4770      	bx	lr

08017fe6 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8017fe6:	b480      	push	{r7}
 8017fe8:	b087      	sub	sp, #28
 8017fea:	af00      	add	r7, sp, #0
 8017fec:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8017fee:	687b      	ldr	r3, [r7, #4]
 8017ff0:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8017ff2:	697b      	ldr	r3, [r7, #20]
 8017ff4:	781b      	ldrb	r3, [r3, #0]
 8017ff6:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8017ff8:	697b      	ldr	r3, [r7, #20]
 8017ffa:	3301      	adds	r3, #1
 8017ffc:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8017ffe:	697b      	ldr	r3, [r7, #20]
 8018000:	781b      	ldrb	r3, [r3, #0]
 8018002:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8018004:	8a3b      	ldrh	r3, [r7, #16]
 8018006:	021b      	lsls	r3, r3, #8
 8018008:	b21a      	sxth	r2, r3
 801800a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 801800e:	4313      	orrs	r3, r2
 8018010:	b21b      	sxth	r3, r3
 8018012:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8018014:	89fb      	ldrh	r3, [r7, #14]
}
 8018016:	4618      	mov	r0, r3
 8018018:	371c      	adds	r7, #28
 801801a:	46bd      	mov	sp, r7
 801801c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018020:	4770      	bx	lr
	...

08018024 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8018024:	b580      	push	{r7, lr}
 8018026:	b084      	sub	sp, #16
 8018028:	af00      	add	r7, sp, #0
 801802a:	6078      	str	r0, [r7, #4]
 801802c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801802e:	2300      	movs	r3, #0
 8018030:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8018032:	683b      	ldr	r3, [r7, #0]
 8018034:	781b      	ldrb	r3, [r3, #0]
 8018036:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 801803a:	2b40      	cmp	r3, #64	@ 0x40
 801803c:	d005      	beq.n	801804a <USBD_StdDevReq+0x26>
 801803e:	2b40      	cmp	r3, #64	@ 0x40
 8018040:	d857      	bhi.n	80180f2 <USBD_StdDevReq+0xce>
 8018042:	2b00      	cmp	r3, #0
 8018044:	d00f      	beq.n	8018066 <USBD_StdDevReq+0x42>
 8018046:	2b20      	cmp	r3, #32
 8018048:	d153      	bne.n	80180f2 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 801804a:	687b      	ldr	r3, [r7, #4]
 801804c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8018050:	687b      	ldr	r3, [r7, #4]
 8018052:	32ae      	adds	r2, #174	@ 0xae
 8018054:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8018058:	689b      	ldr	r3, [r3, #8]
 801805a:	6839      	ldr	r1, [r7, #0]
 801805c:	6878      	ldr	r0, [r7, #4]
 801805e:	4798      	blx	r3
 8018060:	4603      	mov	r3, r0
 8018062:	73fb      	strb	r3, [r7, #15]
      break;
 8018064:	e04a      	b.n	80180fc <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8018066:	683b      	ldr	r3, [r7, #0]
 8018068:	785b      	ldrb	r3, [r3, #1]
 801806a:	2b09      	cmp	r3, #9
 801806c:	d83b      	bhi.n	80180e6 <USBD_StdDevReq+0xc2>
 801806e:	a201      	add	r2, pc, #4	@ (adr r2, 8018074 <USBD_StdDevReq+0x50>)
 8018070:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018074:	080180c9 	.word	0x080180c9
 8018078:	080180dd 	.word	0x080180dd
 801807c:	080180e7 	.word	0x080180e7
 8018080:	080180d3 	.word	0x080180d3
 8018084:	080180e7 	.word	0x080180e7
 8018088:	080180a7 	.word	0x080180a7
 801808c:	0801809d 	.word	0x0801809d
 8018090:	080180e7 	.word	0x080180e7
 8018094:	080180bf 	.word	0x080180bf
 8018098:	080180b1 	.word	0x080180b1
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 801809c:	6839      	ldr	r1, [r7, #0]
 801809e:	6878      	ldr	r0, [r7, #4]
 80180a0:	f000 fa3c 	bl	801851c <USBD_GetDescriptor>
          break;
 80180a4:	e024      	b.n	80180f0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80180a6:	6839      	ldr	r1, [r7, #0]
 80180a8:	6878      	ldr	r0, [r7, #4]
 80180aa:	f000 fba1 	bl	80187f0 <USBD_SetAddress>
          break;
 80180ae:	e01f      	b.n	80180f0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80180b0:	6839      	ldr	r1, [r7, #0]
 80180b2:	6878      	ldr	r0, [r7, #4]
 80180b4:	f000 fbe0 	bl	8018878 <USBD_SetConfig>
 80180b8:	4603      	mov	r3, r0
 80180ba:	73fb      	strb	r3, [r7, #15]
          break;
 80180bc:	e018      	b.n	80180f0 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80180be:	6839      	ldr	r1, [r7, #0]
 80180c0:	6878      	ldr	r0, [r7, #4]
 80180c2:	f000 fc83 	bl	80189cc <USBD_GetConfig>
          break;
 80180c6:	e013      	b.n	80180f0 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80180c8:	6839      	ldr	r1, [r7, #0]
 80180ca:	6878      	ldr	r0, [r7, #4]
 80180cc:	f000 fcb4 	bl	8018a38 <USBD_GetStatus>
          break;
 80180d0:	e00e      	b.n	80180f0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80180d2:	6839      	ldr	r1, [r7, #0]
 80180d4:	6878      	ldr	r0, [r7, #4]
 80180d6:	f000 fce3 	bl	8018aa0 <USBD_SetFeature>
          break;
 80180da:	e009      	b.n	80180f0 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80180dc:	6839      	ldr	r1, [r7, #0]
 80180de:	6878      	ldr	r0, [r7, #4]
 80180e0:	f000 fd07 	bl	8018af2 <USBD_ClrFeature>
          break;
 80180e4:	e004      	b.n	80180f0 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 80180e6:	6839      	ldr	r1, [r7, #0]
 80180e8:	6878      	ldr	r0, [r7, #4]
 80180ea:	f000 fd5e 	bl	8018baa <USBD_CtlError>
          break;
 80180ee:	bf00      	nop
      }
      break;
 80180f0:	e004      	b.n	80180fc <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 80180f2:	6839      	ldr	r1, [r7, #0]
 80180f4:	6878      	ldr	r0, [r7, #4]
 80180f6:	f000 fd58 	bl	8018baa <USBD_CtlError>
      break;
 80180fa:	bf00      	nop
  }

  return ret;
 80180fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80180fe:	4618      	mov	r0, r3
 8018100:	3710      	adds	r7, #16
 8018102:	46bd      	mov	sp, r7
 8018104:	bd80      	pop	{r7, pc}
 8018106:	bf00      	nop

08018108 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8018108:	b580      	push	{r7, lr}
 801810a:	b084      	sub	sp, #16
 801810c:	af00      	add	r7, sp, #0
 801810e:	6078      	str	r0, [r7, #4]
 8018110:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8018112:	2300      	movs	r3, #0
 8018114:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8018116:	683b      	ldr	r3, [r7, #0]
 8018118:	781b      	ldrb	r3, [r3, #0]
 801811a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 801811e:	2b40      	cmp	r3, #64	@ 0x40
 8018120:	d005      	beq.n	801812e <USBD_StdItfReq+0x26>
 8018122:	2b40      	cmp	r3, #64	@ 0x40
 8018124:	d852      	bhi.n	80181cc <USBD_StdItfReq+0xc4>
 8018126:	2b00      	cmp	r3, #0
 8018128:	d001      	beq.n	801812e <USBD_StdItfReq+0x26>
 801812a:	2b20      	cmp	r3, #32
 801812c:	d14e      	bne.n	80181cc <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 801812e:	687b      	ldr	r3, [r7, #4]
 8018130:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8018134:	b2db      	uxtb	r3, r3
 8018136:	3b01      	subs	r3, #1
 8018138:	2b02      	cmp	r3, #2
 801813a:	d840      	bhi.n	80181be <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 801813c:	683b      	ldr	r3, [r7, #0]
 801813e:	889b      	ldrh	r3, [r3, #4]
 8018140:	b2db      	uxtb	r3, r3
 8018142:	2b01      	cmp	r3, #1
 8018144:	d836      	bhi.n	80181b4 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8018146:	683b      	ldr	r3, [r7, #0]
 8018148:	889b      	ldrh	r3, [r3, #4]
 801814a:	b2db      	uxtb	r3, r3
 801814c:	4619      	mov	r1, r3
 801814e:	6878      	ldr	r0, [r7, #4]
 8018150:	f7ff fedb 	bl	8017f0a <USBD_CoreFindIF>
 8018154:	4603      	mov	r3, r0
 8018156:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8018158:	7bbb      	ldrb	r3, [r7, #14]
 801815a:	2bff      	cmp	r3, #255	@ 0xff
 801815c:	d01d      	beq.n	801819a <USBD_StdItfReq+0x92>
 801815e:	7bbb      	ldrb	r3, [r7, #14]
 8018160:	2b00      	cmp	r3, #0
 8018162:	d11a      	bne.n	801819a <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8018164:	7bba      	ldrb	r2, [r7, #14]
 8018166:	687b      	ldr	r3, [r7, #4]
 8018168:	32ae      	adds	r2, #174	@ 0xae
 801816a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801816e:	689b      	ldr	r3, [r3, #8]
 8018170:	2b00      	cmp	r3, #0
 8018172:	d00f      	beq.n	8018194 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8018174:	7bba      	ldrb	r2, [r7, #14]
 8018176:	687b      	ldr	r3, [r7, #4]
 8018178:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 801817c:	7bba      	ldrb	r2, [r7, #14]
 801817e:	687b      	ldr	r3, [r7, #4]
 8018180:	32ae      	adds	r2, #174	@ 0xae
 8018182:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8018186:	689b      	ldr	r3, [r3, #8]
 8018188:	6839      	ldr	r1, [r7, #0]
 801818a:	6878      	ldr	r0, [r7, #4]
 801818c:	4798      	blx	r3
 801818e:	4603      	mov	r3, r0
 8018190:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8018192:	e004      	b.n	801819e <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8018194:	2303      	movs	r3, #3
 8018196:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8018198:	e001      	b.n	801819e <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 801819a:	2303      	movs	r3, #3
 801819c:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 801819e:	683b      	ldr	r3, [r7, #0]
 80181a0:	88db      	ldrh	r3, [r3, #6]
 80181a2:	2b00      	cmp	r3, #0
 80181a4:	d110      	bne.n	80181c8 <USBD_StdItfReq+0xc0>
 80181a6:	7bfb      	ldrb	r3, [r7, #15]
 80181a8:	2b00      	cmp	r3, #0
 80181aa:	d10d      	bne.n	80181c8 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 80181ac:	6878      	ldr	r0, [r7, #4]
 80181ae:	f000 fdc7 	bl	8018d40 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80181b2:	e009      	b.n	80181c8 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 80181b4:	6839      	ldr	r1, [r7, #0]
 80181b6:	6878      	ldr	r0, [r7, #4]
 80181b8:	f000 fcf7 	bl	8018baa <USBD_CtlError>
          break;
 80181bc:	e004      	b.n	80181c8 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 80181be:	6839      	ldr	r1, [r7, #0]
 80181c0:	6878      	ldr	r0, [r7, #4]
 80181c2:	f000 fcf2 	bl	8018baa <USBD_CtlError>
          break;
 80181c6:	e000      	b.n	80181ca <USBD_StdItfReq+0xc2>
          break;
 80181c8:	bf00      	nop
      }
      break;
 80181ca:	e004      	b.n	80181d6 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 80181cc:	6839      	ldr	r1, [r7, #0]
 80181ce:	6878      	ldr	r0, [r7, #4]
 80181d0:	f000 fceb 	bl	8018baa <USBD_CtlError>
      break;
 80181d4:	bf00      	nop
  }

  return ret;
 80181d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80181d8:	4618      	mov	r0, r3
 80181da:	3710      	adds	r7, #16
 80181dc:	46bd      	mov	sp, r7
 80181de:	bd80      	pop	{r7, pc}

080181e0 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80181e0:	b580      	push	{r7, lr}
 80181e2:	b084      	sub	sp, #16
 80181e4:	af00      	add	r7, sp, #0
 80181e6:	6078      	str	r0, [r7, #4]
 80181e8:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 80181ea:	2300      	movs	r3, #0
 80181ec:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 80181ee:	683b      	ldr	r3, [r7, #0]
 80181f0:	889b      	ldrh	r3, [r3, #4]
 80181f2:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80181f4:	683b      	ldr	r3, [r7, #0]
 80181f6:	781b      	ldrb	r3, [r3, #0]
 80181f8:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80181fc:	2b40      	cmp	r3, #64	@ 0x40
 80181fe:	d007      	beq.n	8018210 <USBD_StdEPReq+0x30>
 8018200:	2b40      	cmp	r3, #64	@ 0x40
 8018202:	f200 817f 	bhi.w	8018504 <USBD_StdEPReq+0x324>
 8018206:	2b00      	cmp	r3, #0
 8018208:	d02a      	beq.n	8018260 <USBD_StdEPReq+0x80>
 801820a:	2b20      	cmp	r3, #32
 801820c:	f040 817a 	bne.w	8018504 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8018210:	7bbb      	ldrb	r3, [r7, #14]
 8018212:	4619      	mov	r1, r3
 8018214:	6878      	ldr	r0, [r7, #4]
 8018216:	f7ff fe85 	bl	8017f24 <USBD_CoreFindEP>
 801821a:	4603      	mov	r3, r0
 801821c:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 801821e:	7b7b      	ldrb	r3, [r7, #13]
 8018220:	2bff      	cmp	r3, #255	@ 0xff
 8018222:	f000 8174 	beq.w	801850e <USBD_StdEPReq+0x32e>
 8018226:	7b7b      	ldrb	r3, [r7, #13]
 8018228:	2b00      	cmp	r3, #0
 801822a:	f040 8170 	bne.w	801850e <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 801822e:	7b7a      	ldrb	r2, [r7, #13]
 8018230:	687b      	ldr	r3, [r7, #4]
 8018232:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8018236:	7b7a      	ldrb	r2, [r7, #13]
 8018238:	687b      	ldr	r3, [r7, #4]
 801823a:	32ae      	adds	r2, #174	@ 0xae
 801823c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8018240:	689b      	ldr	r3, [r3, #8]
 8018242:	2b00      	cmp	r3, #0
 8018244:	f000 8163 	beq.w	801850e <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8018248:	7b7a      	ldrb	r2, [r7, #13]
 801824a:	687b      	ldr	r3, [r7, #4]
 801824c:	32ae      	adds	r2, #174	@ 0xae
 801824e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8018252:	689b      	ldr	r3, [r3, #8]
 8018254:	6839      	ldr	r1, [r7, #0]
 8018256:	6878      	ldr	r0, [r7, #4]
 8018258:	4798      	blx	r3
 801825a:	4603      	mov	r3, r0
 801825c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 801825e:	e156      	b.n	801850e <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8018260:	683b      	ldr	r3, [r7, #0]
 8018262:	785b      	ldrb	r3, [r3, #1]
 8018264:	2b03      	cmp	r3, #3
 8018266:	d008      	beq.n	801827a <USBD_StdEPReq+0x9a>
 8018268:	2b03      	cmp	r3, #3
 801826a:	f300 8145 	bgt.w	80184f8 <USBD_StdEPReq+0x318>
 801826e:	2b00      	cmp	r3, #0
 8018270:	f000 809b 	beq.w	80183aa <USBD_StdEPReq+0x1ca>
 8018274:	2b01      	cmp	r3, #1
 8018276:	d03c      	beq.n	80182f2 <USBD_StdEPReq+0x112>
 8018278:	e13e      	b.n	80184f8 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 801827a:	687b      	ldr	r3, [r7, #4]
 801827c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8018280:	b2db      	uxtb	r3, r3
 8018282:	2b02      	cmp	r3, #2
 8018284:	d002      	beq.n	801828c <USBD_StdEPReq+0xac>
 8018286:	2b03      	cmp	r3, #3
 8018288:	d016      	beq.n	80182b8 <USBD_StdEPReq+0xd8>
 801828a:	e02c      	b.n	80182e6 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 801828c:	7bbb      	ldrb	r3, [r7, #14]
 801828e:	2b00      	cmp	r3, #0
 8018290:	d00d      	beq.n	80182ae <USBD_StdEPReq+0xce>
 8018292:	7bbb      	ldrb	r3, [r7, #14]
 8018294:	2b80      	cmp	r3, #128	@ 0x80
 8018296:	d00a      	beq.n	80182ae <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8018298:	7bbb      	ldrb	r3, [r7, #14]
 801829a:	4619      	mov	r1, r3
 801829c:	6878      	ldr	r0, [r7, #4]
 801829e:	f7ee ff07 	bl	80070b0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80182a2:	2180      	movs	r1, #128	@ 0x80
 80182a4:	6878      	ldr	r0, [r7, #4]
 80182a6:	f7ee ff03 	bl	80070b0 <USBD_LL_StallEP>
 80182aa:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80182ac:	e020      	b.n	80182f0 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 80182ae:	6839      	ldr	r1, [r7, #0]
 80182b0:	6878      	ldr	r0, [r7, #4]
 80182b2:	f000 fc7a 	bl	8018baa <USBD_CtlError>
              break;
 80182b6:	e01b      	b.n	80182f0 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80182b8:	683b      	ldr	r3, [r7, #0]
 80182ba:	885b      	ldrh	r3, [r3, #2]
 80182bc:	2b00      	cmp	r3, #0
 80182be:	d10e      	bne.n	80182de <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80182c0:	7bbb      	ldrb	r3, [r7, #14]
 80182c2:	2b00      	cmp	r3, #0
 80182c4:	d00b      	beq.n	80182de <USBD_StdEPReq+0xfe>
 80182c6:	7bbb      	ldrb	r3, [r7, #14]
 80182c8:	2b80      	cmp	r3, #128	@ 0x80
 80182ca:	d008      	beq.n	80182de <USBD_StdEPReq+0xfe>
 80182cc:	683b      	ldr	r3, [r7, #0]
 80182ce:	88db      	ldrh	r3, [r3, #6]
 80182d0:	2b00      	cmp	r3, #0
 80182d2:	d104      	bne.n	80182de <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80182d4:	7bbb      	ldrb	r3, [r7, #14]
 80182d6:	4619      	mov	r1, r3
 80182d8:	6878      	ldr	r0, [r7, #4]
 80182da:	f7ee fee9 	bl	80070b0 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80182de:	6878      	ldr	r0, [r7, #4]
 80182e0:	f000 fd2e 	bl	8018d40 <USBD_CtlSendStatus>

              break;
 80182e4:	e004      	b.n	80182f0 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 80182e6:	6839      	ldr	r1, [r7, #0]
 80182e8:	6878      	ldr	r0, [r7, #4]
 80182ea:	f000 fc5e 	bl	8018baa <USBD_CtlError>
              break;
 80182ee:	bf00      	nop
          }
          break;
 80182f0:	e107      	b.n	8018502 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80182f2:	687b      	ldr	r3, [r7, #4]
 80182f4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80182f8:	b2db      	uxtb	r3, r3
 80182fa:	2b02      	cmp	r3, #2
 80182fc:	d002      	beq.n	8018304 <USBD_StdEPReq+0x124>
 80182fe:	2b03      	cmp	r3, #3
 8018300:	d016      	beq.n	8018330 <USBD_StdEPReq+0x150>
 8018302:	e04b      	b.n	801839c <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8018304:	7bbb      	ldrb	r3, [r7, #14]
 8018306:	2b00      	cmp	r3, #0
 8018308:	d00d      	beq.n	8018326 <USBD_StdEPReq+0x146>
 801830a:	7bbb      	ldrb	r3, [r7, #14]
 801830c:	2b80      	cmp	r3, #128	@ 0x80
 801830e:	d00a      	beq.n	8018326 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8018310:	7bbb      	ldrb	r3, [r7, #14]
 8018312:	4619      	mov	r1, r3
 8018314:	6878      	ldr	r0, [r7, #4]
 8018316:	f7ee fecb 	bl	80070b0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 801831a:	2180      	movs	r1, #128	@ 0x80
 801831c:	6878      	ldr	r0, [r7, #4]
 801831e:	f7ee fec7 	bl	80070b0 <USBD_LL_StallEP>
 8018322:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8018324:	e040      	b.n	80183a8 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8018326:	6839      	ldr	r1, [r7, #0]
 8018328:	6878      	ldr	r0, [r7, #4]
 801832a:	f000 fc3e 	bl	8018baa <USBD_CtlError>
              break;
 801832e:	e03b      	b.n	80183a8 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8018330:	683b      	ldr	r3, [r7, #0]
 8018332:	885b      	ldrh	r3, [r3, #2]
 8018334:	2b00      	cmp	r3, #0
 8018336:	d136      	bne.n	80183a6 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8018338:	7bbb      	ldrb	r3, [r7, #14]
 801833a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801833e:	2b00      	cmp	r3, #0
 8018340:	d004      	beq.n	801834c <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8018342:	7bbb      	ldrb	r3, [r7, #14]
 8018344:	4619      	mov	r1, r3
 8018346:	6878      	ldr	r0, [r7, #4]
 8018348:	f7ee fed1 	bl	80070ee <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 801834c:	6878      	ldr	r0, [r7, #4]
 801834e:	f000 fcf7 	bl	8018d40 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8018352:	7bbb      	ldrb	r3, [r7, #14]
 8018354:	4619      	mov	r1, r3
 8018356:	6878      	ldr	r0, [r7, #4]
 8018358:	f7ff fde4 	bl	8017f24 <USBD_CoreFindEP>
 801835c:	4603      	mov	r3, r0
 801835e:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8018360:	7b7b      	ldrb	r3, [r7, #13]
 8018362:	2bff      	cmp	r3, #255	@ 0xff
 8018364:	d01f      	beq.n	80183a6 <USBD_StdEPReq+0x1c6>
 8018366:	7b7b      	ldrb	r3, [r7, #13]
 8018368:	2b00      	cmp	r3, #0
 801836a:	d11c      	bne.n	80183a6 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 801836c:	7b7a      	ldrb	r2, [r7, #13]
 801836e:	687b      	ldr	r3, [r7, #4]
 8018370:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8018374:	7b7a      	ldrb	r2, [r7, #13]
 8018376:	687b      	ldr	r3, [r7, #4]
 8018378:	32ae      	adds	r2, #174	@ 0xae
 801837a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801837e:	689b      	ldr	r3, [r3, #8]
 8018380:	2b00      	cmp	r3, #0
 8018382:	d010      	beq.n	80183a6 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8018384:	7b7a      	ldrb	r2, [r7, #13]
 8018386:	687b      	ldr	r3, [r7, #4]
 8018388:	32ae      	adds	r2, #174	@ 0xae
 801838a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801838e:	689b      	ldr	r3, [r3, #8]
 8018390:	6839      	ldr	r1, [r7, #0]
 8018392:	6878      	ldr	r0, [r7, #4]
 8018394:	4798      	blx	r3
 8018396:	4603      	mov	r3, r0
 8018398:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 801839a:	e004      	b.n	80183a6 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 801839c:	6839      	ldr	r1, [r7, #0]
 801839e:	6878      	ldr	r0, [r7, #4]
 80183a0:	f000 fc03 	bl	8018baa <USBD_CtlError>
              break;
 80183a4:	e000      	b.n	80183a8 <USBD_StdEPReq+0x1c8>
              break;
 80183a6:	bf00      	nop
          }
          break;
 80183a8:	e0ab      	b.n	8018502 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80183aa:	687b      	ldr	r3, [r7, #4]
 80183ac:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80183b0:	b2db      	uxtb	r3, r3
 80183b2:	2b02      	cmp	r3, #2
 80183b4:	d002      	beq.n	80183bc <USBD_StdEPReq+0x1dc>
 80183b6:	2b03      	cmp	r3, #3
 80183b8:	d032      	beq.n	8018420 <USBD_StdEPReq+0x240>
 80183ba:	e097      	b.n	80184ec <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80183bc:	7bbb      	ldrb	r3, [r7, #14]
 80183be:	2b00      	cmp	r3, #0
 80183c0:	d007      	beq.n	80183d2 <USBD_StdEPReq+0x1f2>
 80183c2:	7bbb      	ldrb	r3, [r7, #14]
 80183c4:	2b80      	cmp	r3, #128	@ 0x80
 80183c6:	d004      	beq.n	80183d2 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 80183c8:	6839      	ldr	r1, [r7, #0]
 80183ca:	6878      	ldr	r0, [r7, #4]
 80183cc:	f000 fbed 	bl	8018baa <USBD_CtlError>
                break;
 80183d0:	e091      	b.n	80184f6 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80183d2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80183d6:	2b00      	cmp	r3, #0
 80183d8:	da0b      	bge.n	80183f2 <USBD_StdEPReq+0x212>
 80183da:	7bbb      	ldrb	r3, [r7, #14]
 80183dc:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80183e0:	4613      	mov	r3, r2
 80183e2:	009b      	lsls	r3, r3, #2
 80183e4:	4413      	add	r3, r2
 80183e6:	009b      	lsls	r3, r3, #2
 80183e8:	3310      	adds	r3, #16
 80183ea:	687a      	ldr	r2, [r7, #4]
 80183ec:	4413      	add	r3, r2
 80183ee:	3304      	adds	r3, #4
 80183f0:	e00b      	b.n	801840a <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80183f2:	7bbb      	ldrb	r3, [r7, #14]
 80183f4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80183f8:	4613      	mov	r3, r2
 80183fa:	009b      	lsls	r3, r3, #2
 80183fc:	4413      	add	r3, r2
 80183fe:	009b      	lsls	r3, r3, #2
 8018400:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8018404:	687a      	ldr	r2, [r7, #4]
 8018406:	4413      	add	r3, r2
 8018408:	3304      	adds	r3, #4
 801840a:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 801840c:	68bb      	ldr	r3, [r7, #8]
 801840e:	2200      	movs	r2, #0
 8018410:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8018412:	68bb      	ldr	r3, [r7, #8]
 8018414:	2202      	movs	r2, #2
 8018416:	4619      	mov	r1, r3
 8018418:	6878      	ldr	r0, [r7, #4]
 801841a:	f000 fc37 	bl	8018c8c <USBD_CtlSendData>
              break;
 801841e:	e06a      	b.n	80184f6 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8018420:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8018424:	2b00      	cmp	r3, #0
 8018426:	da11      	bge.n	801844c <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8018428:	7bbb      	ldrb	r3, [r7, #14]
 801842a:	f003 020f 	and.w	r2, r3, #15
 801842e:	6879      	ldr	r1, [r7, #4]
 8018430:	4613      	mov	r3, r2
 8018432:	009b      	lsls	r3, r3, #2
 8018434:	4413      	add	r3, r2
 8018436:	009b      	lsls	r3, r3, #2
 8018438:	440b      	add	r3, r1
 801843a:	3324      	adds	r3, #36	@ 0x24
 801843c:	881b      	ldrh	r3, [r3, #0]
 801843e:	2b00      	cmp	r3, #0
 8018440:	d117      	bne.n	8018472 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8018442:	6839      	ldr	r1, [r7, #0]
 8018444:	6878      	ldr	r0, [r7, #4]
 8018446:	f000 fbb0 	bl	8018baa <USBD_CtlError>
                  break;
 801844a:	e054      	b.n	80184f6 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 801844c:	7bbb      	ldrb	r3, [r7, #14]
 801844e:	f003 020f 	and.w	r2, r3, #15
 8018452:	6879      	ldr	r1, [r7, #4]
 8018454:	4613      	mov	r3, r2
 8018456:	009b      	lsls	r3, r3, #2
 8018458:	4413      	add	r3, r2
 801845a:	009b      	lsls	r3, r3, #2
 801845c:	440b      	add	r3, r1
 801845e:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8018462:	881b      	ldrh	r3, [r3, #0]
 8018464:	2b00      	cmp	r3, #0
 8018466:	d104      	bne.n	8018472 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8018468:	6839      	ldr	r1, [r7, #0]
 801846a:	6878      	ldr	r0, [r7, #4]
 801846c:	f000 fb9d 	bl	8018baa <USBD_CtlError>
                  break;
 8018470:	e041      	b.n	80184f6 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8018472:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8018476:	2b00      	cmp	r3, #0
 8018478:	da0b      	bge.n	8018492 <USBD_StdEPReq+0x2b2>
 801847a:	7bbb      	ldrb	r3, [r7, #14]
 801847c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8018480:	4613      	mov	r3, r2
 8018482:	009b      	lsls	r3, r3, #2
 8018484:	4413      	add	r3, r2
 8018486:	009b      	lsls	r3, r3, #2
 8018488:	3310      	adds	r3, #16
 801848a:	687a      	ldr	r2, [r7, #4]
 801848c:	4413      	add	r3, r2
 801848e:	3304      	adds	r3, #4
 8018490:	e00b      	b.n	80184aa <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8018492:	7bbb      	ldrb	r3, [r7, #14]
 8018494:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8018498:	4613      	mov	r3, r2
 801849a:	009b      	lsls	r3, r3, #2
 801849c:	4413      	add	r3, r2
 801849e:	009b      	lsls	r3, r3, #2
 80184a0:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80184a4:	687a      	ldr	r2, [r7, #4]
 80184a6:	4413      	add	r3, r2
 80184a8:	3304      	adds	r3, #4
 80184aa:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80184ac:	7bbb      	ldrb	r3, [r7, #14]
 80184ae:	2b00      	cmp	r3, #0
 80184b0:	d002      	beq.n	80184b8 <USBD_StdEPReq+0x2d8>
 80184b2:	7bbb      	ldrb	r3, [r7, #14]
 80184b4:	2b80      	cmp	r3, #128	@ 0x80
 80184b6:	d103      	bne.n	80184c0 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 80184b8:	68bb      	ldr	r3, [r7, #8]
 80184ba:	2200      	movs	r2, #0
 80184bc:	601a      	str	r2, [r3, #0]
 80184be:	e00e      	b.n	80184de <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80184c0:	7bbb      	ldrb	r3, [r7, #14]
 80184c2:	4619      	mov	r1, r3
 80184c4:	6878      	ldr	r0, [r7, #4]
 80184c6:	f7ee fe31 	bl	800712c <USBD_LL_IsStallEP>
 80184ca:	4603      	mov	r3, r0
 80184cc:	2b00      	cmp	r3, #0
 80184ce:	d003      	beq.n	80184d8 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 80184d0:	68bb      	ldr	r3, [r7, #8]
 80184d2:	2201      	movs	r2, #1
 80184d4:	601a      	str	r2, [r3, #0]
 80184d6:	e002      	b.n	80184de <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 80184d8:	68bb      	ldr	r3, [r7, #8]
 80184da:	2200      	movs	r2, #0
 80184dc:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80184de:	68bb      	ldr	r3, [r7, #8]
 80184e0:	2202      	movs	r2, #2
 80184e2:	4619      	mov	r1, r3
 80184e4:	6878      	ldr	r0, [r7, #4]
 80184e6:	f000 fbd1 	bl	8018c8c <USBD_CtlSendData>
              break;
 80184ea:	e004      	b.n	80184f6 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 80184ec:	6839      	ldr	r1, [r7, #0]
 80184ee:	6878      	ldr	r0, [r7, #4]
 80184f0:	f000 fb5b 	bl	8018baa <USBD_CtlError>
              break;
 80184f4:	bf00      	nop
          }
          break;
 80184f6:	e004      	b.n	8018502 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 80184f8:	6839      	ldr	r1, [r7, #0]
 80184fa:	6878      	ldr	r0, [r7, #4]
 80184fc:	f000 fb55 	bl	8018baa <USBD_CtlError>
          break;
 8018500:	bf00      	nop
      }
      break;
 8018502:	e005      	b.n	8018510 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8018504:	6839      	ldr	r1, [r7, #0]
 8018506:	6878      	ldr	r0, [r7, #4]
 8018508:	f000 fb4f 	bl	8018baa <USBD_CtlError>
      break;
 801850c:	e000      	b.n	8018510 <USBD_StdEPReq+0x330>
      break;
 801850e:	bf00      	nop
  }

  return ret;
 8018510:	7bfb      	ldrb	r3, [r7, #15]
}
 8018512:	4618      	mov	r0, r3
 8018514:	3710      	adds	r7, #16
 8018516:	46bd      	mov	sp, r7
 8018518:	bd80      	pop	{r7, pc}
	...

0801851c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801851c:	b580      	push	{r7, lr}
 801851e:	b084      	sub	sp, #16
 8018520:	af00      	add	r7, sp, #0
 8018522:	6078      	str	r0, [r7, #4]
 8018524:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8018526:	2300      	movs	r3, #0
 8018528:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 801852a:	2300      	movs	r3, #0
 801852c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 801852e:	2300      	movs	r3, #0
 8018530:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8018532:	683b      	ldr	r3, [r7, #0]
 8018534:	885b      	ldrh	r3, [r3, #2]
 8018536:	0a1b      	lsrs	r3, r3, #8
 8018538:	b29b      	uxth	r3, r3
 801853a:	3b01      	subs	r3, #1
 801853c:	2b06      	cmp	r3, #6
 801853e:	f200 8128 	bhi.w	8018792 <USBD_GetDescriptor+0x276>
 8018542:	a201      	add	r2, pc, #4	@ (adr r2, 8018548 <USBD_GetDescriptor+0x2c>)
 8018544:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018548:	08018565 	.word	0x08018565
 801854c:	0801857d 	.word	0x0801857d
 8018550:	080185bd 	.word	0x080185bd
 8018554:	08018793 	.word	0x08018793
 8018558:	08018793 	.word	0x08018793
 801855c:	08018733 	.word	0x08018733
 8018560:	0801875f 	.word	0x0801875f
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8018564:	687b      	ldr	r3, [r7, #4]
 8018566:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801856a:	681b      	ldr	r3, [r3, #0]
 801856c:	687a      	ldr	r2, [r7, #4]
 801856e:	7c12      	ldrb	r2, [r2, #16]
 8018570:	f107 0108 	add.w	r1, r7, #8
 8018574:	4610      	mov	r0, r2
 8018576:	4798      	blx	r3
 8018578:	60f8      	str	r0, [r7, #12]
      break;
 801857a:	e112      	b.n	80187a2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 801857c:	687b      	ldr	r3, [r7, #4]
 801857e:	7c1b      	ldrb	r3, [r3, #16]
 8018580:	2b00      	cmp	r3, #0
 8018582:	d10d      	bne.n	80185a0 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8018584:	687b      	ldr	r3, [r7, #4]
 8018586:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 801858a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801858c:	f107 0208 	add.w	r2, r7, #8
 8018590:	4610      	mov	r0, r2
 8018592:	4798      	blx	r3
 8018594:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8018596:	68fb      	ldr	r3, [r7, #12]
 8018598:	3301      	adds	r3, #1
 801859a:	2202      	movs	r2, #2
 801859c:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 801859e:	e100      	b.n	80187a2 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 80185a0:	687b      	ldr	r3, [r7, #4]
 80185a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80185a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80185a8:	f107 0208 	add.w	r2, r7, #8
 80185ac:	4610      	mov	r0, r2
 80185ae:	4798      	blx	r3
 80185b0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80185b2:	68fb      	ldr	r3, [r7, #12]
 80185b4:	3301      	adds	r3, #1
 80185b6:	2202      	movs	r2, #2
 80185b8:	701a      	strb	r2, [r3, #0]
      break;
 80185ba:	e0f2      	b.n	80187a2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80185bc:	683b      	ldr	r3, [r7, #0]
 80185be:	885b      	ldrh	r3, [r3, #2]
 80185c0:	b2db      	uxtb	r3, r3
 80185c2:	2b05      	cmp	r3, #5
 80185c4:	f200 80ac 	bhi.w	8018720 <USBD_GetDescriptor+0x204>
 80185c8:	a201      	add	r2, pc, #4	@ (adr r2, 80185d0 <USBD_GetDescriptor+0xb4>)
 80185ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80185ce:	bf00      	nop
 80185d0:	080185e9 	.word	0x080185e9
 80185d4:	0801861d 	.word	0x0801861d
 80185d8:	08018651 	.word	0x08018651
 80185dc:	08018685 	.word	0x08018685
 80185e0:	080186b9 	.word	0x080186b9
 80185e4:	080186ed 	.word	0x080186ed
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80185e8:	687b      	ldr	r3, [r7, #4]
 80185ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80185ee:	685b      	ldr	r3, [r3, #4]
 80185f0:	2b00      	cmp	r3, #0
 80185f2:	d00b      	beq.n	801860c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80185f4:	687b      	ldr	r3, [r7, #4]
 80185f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80185fa:	685b      	ldr	r3, [r3, #4]
 80185fc:	687a      	ldr	r2, [r7, #4]
 80185fe:	7c12      	ldrb	r2, [r2, #16]
 8018600:	f107 0108 	add.w	r1, r7, #8
 8018604:	4610      	mov	r0, r2
 8018606:	4798      	blx	r3
 8018608:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801860a:	e091      	b.n	8018730 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 801860c:	6839      	ldr	r1, [r7, #0]
 801860e:	6878      	ldr	r0, [r7, #4]
 8018610:	f000 facb 	bl	8018baa <USBD_CtlError>
            err++;
 8018614:	7afb      	ldrb	r3, [r7, #11]
 8018616:	3301      	adds	r3, #1
 8018618:	72fb      	strb	r3, [r7, #11]
          break;
 801861a:	e089      	b.n	8018730 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 801861c:	687b      	ldr	r3, [r7, #4]
 801861e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8018622:	689b      	ldr	r3, [r3, #8]
 8018624:	2b00      	cmp	r3, #0
 8018626:	d00b      	beq.n	8018640 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8018628:	687b      	ldr	r3, [r7, #4]
 801862a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801862e:	689b      	ldr	r3, [r3, #8]
 8018630:	687a      	ldr	r2, [r7, #4]
 8018632:	7c12      	ldrb	r2, [r2, #16]
 8018634:	f107 0108 	add.w	r1, r7, #8
 8018638:	4610      	mov	r0, r2
 801863a:	4798      	blx	r3
 801863c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801863e:	e077      	b.n	8018730 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8018640:	6839      	ldr	r1, [r7, #0]
 8018642:	6878      	ldr	r0, [r7, #4]
 8018644:	f000 fab1 	bl	8018baa <USBD_CtlError>
            err++;
 8018648:	7afb      	ldrb	r3, [r7, #11]
 801864a:	3301      	adds	r3, #1
 801864c:	72fb      	strb	r3, [r7, #11]
          break;
 801864e:	e06f      	b.n	8018730 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8018650:	687b      	ldr	r3, [r7, #4]
 8018652:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8018656:	68db      	ldr	r3, [r3, #12]
 8018658:	2b00      	cmp	r3, #0
 801865a:	d00b      	beq.n	8018674 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 801865c:	687b      	ldr	r3, [r7, #4]
 801865e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8018662:	68db      	ldr	r3, [r3, #12]
 8018664:	687a      	ldr	r2, [r7, #4]
 8018666:	7c12      	ldrb	r2, [r2, #16]
 8018668:	f107 0108 	add.w	r1, r7, #8
 801866c:	4610      	mov	r0, r2
 801866e:	4798      	blx	r3
 8018670:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8018672:	e05d      	b.n	8018730 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8018674:	6839      	ldr	r1, [r7, #0]
 8018676:	6878      	ldr	r0, [r7, #4]
 8018678:	f000 fa97 	bl	8018baa <USBD_CtlError>
            err++;
 801867c:	7afb      	ldrb	r3, [r7, #11]
 801867e:	3301      	adds	r3, #1
 8018680:	72fb      	strb	r3, [r7, #11]
          break;
 8018682:	e055      	b.n	8018730 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8018684:	687b      	ldr	r3, [r7, #4]
 8018686:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801868a:	691b      	ldr	r3, [r3, #16]
 801868c:	2b00      	cmp	r3, #0
 801868e:	d00b      	beq.n	80186a8 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8018690:	687b      	ldr	r3, [r7, #4]
 8018692:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8018696:	691b      	ldr	r3, [r3, #16]
 8018698:	687a      	ldr	r2, [r7, #4]
 801869a:	7c12      	ldrb	r2, [r2, #16]
 801869c:	f107 0108 	add.w	r1, r7, #8
 80186a0:	4610      	mov	r0, r2
 80186a2:	4798      	blx	r3
 80186a4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80186a6:	e043      	b.n	8018730 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80186a8:	6839      	ldr	r1, [r7, #0]
 80186aa:	6878      	ldr	r0, [r7, #4]
 80186ac:	f000 fa7d 	bl	8018baa <USBD_CtlError>
            err++;
 80186b0:	7afb      	ldrb	r3, [r7, #11]
 80186b2:	3301      	adds	r3, #1
 80186b4:	72fb      	strb	r3, [r7, #11]
          break;
 80186b6:	e03b      	b.n	8018730 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80186b8:	687b      	ldr	r3, [r7, #4]
 80186ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80186be:	695b      	ldr	r3, [r3, #20]
 80186c0:	2b00      	cmp	r3, #0
 80186c2:	d00b      	beq.n	80186dc <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80186c4:	687b      	ldr	r3, [r7, #4]
 80186c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80186ca:	695b      	ldr	r3, [r3, #20]
 80186cc:	687a      	ldr	r2, [r7, #4]
 80186ce:	7c12      	ldrb	r2, [r2, #16]
 80186d0:	f107 0108 	add.w	r1, r7, #8
 80186d4:	4610      	mov	r0, r2
 80186d6:	4798      	blx	r3
 80186d8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80186da:	e029      	b.n	8018730 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80186dc:	6839      	ldr	r1, [r7, #0]
 80186de:	6878      	ldr	r0, [r7, #4]
 80186e0:	f000 fa63 	bl	8018baa <USBD_CtlError>
            err++;
 80186e4:	7afb      	ldrb	r3, [r7, #11]
 80186e6:	3301      	adds	r3, #1
 80186e8:	72fb      	strb	r3, [r7, #11]
          break;
 80186ea:	e021      	b.n	8018730 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80186ec:	687b      	ldr	r3, [r7, #4]
 80186ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80186f2:	699b      	ldr	r3, [r3, #24]
 80186f4:	2b00      	cmp	r3, #0
 80186f6:	d00b      	beq.n	8018710 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80186f8:	687b      	ldr	r3, [r7, #4]
 80186fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80186fe:	699b      	ldr	r3, [r3, #24]
 8018700:	687a      	ldr	r2, [r7, #4]
 8018702:	7c12      	ldrb	r2, [r2, #16]
 8018704:	f107 0108 	add.w	r1, r7, #8
 8018708:	4610      	mov	r0, r2
 801870a:	4798      	blx	r3
 801870c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801870e:	e00f      	b.n	8018730 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8018710:	6839      	ldr	r1, [r7, #0]
 8018712:	6878      	ldr	r0, [r7, #4]
 8018714:	f000 fa49 	bl	8018baa <USBD_CtlError>
            err++;
 8018718:	7afb      	ldrb	r3, [r7, #11]
 801871a:	3301      	adds	r3, #1
 801871c:	72fb      	strb	r3, [r7, #11]
          break;
 801871e:	e007      	b.n	8018730 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8018720:	6839      	ldr	r1, [r7, #0]
 8018722:	6878      	ldr	r0, [r7, #4]
 8018724:	f000 fa41 	bl	8018baa <USBD_CtlError>
          err++;
 8018728:	7afb      	ldrb	r3, [r7, #11]
 801872a:	3301      	adds	r3, #1
 801872c:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 801872e:	bf00      	nop
      }
      break;
 8018730:	e037      	b.n	80187a2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8018732:	687b      	ldr	r3, [r7, #4]
 8018734:	7c1b      	ldrb	r3, [r3, #16]
 8018736:	2b00      	cmp	r3, #0
 8018738:	d109      	bne.n	801874e <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 801873a:	687b      	ldr	r3, [r7, #4]
 801873c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8018740:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8018742:	f107 0208 	add.w	r2, r7, #8
 8018746:	4610      	mov	r0, r2
 8018748:	4798      	blx	r3
 801874a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 801874c:	e029      	b.n	80187a2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 801874e:	6839      	ldr	r1, [r7, #0]
 8018750:	6878      	ldr	r0, [r7, #4]
 8018752:	f000 fa2a 	bl	8018baa <USBD_CtlError>
        err++;
 8018756:	7afb      	ldrb	r3, [r7, #11]
 8018758:	3301      	adds	r3, #1
 801875a:	72fb      	strb	r3, [r7, #11]
      break;
 801875c:	e021      	b.n	80187a2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 801875e:	687b      	ldr	r3, [r7, #4]
 8018760:	7c1b      	ldrb	r3, [r3, #16]
 8018762:	2b00      	cmp	r3, #0
 8018764:	d10d      	bne.n	8018782 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8018766:	687b      	ldr	r3, [r7, #4]
 8018768:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 801876c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801876e:	f107 0208 	add.w	r2, r7, #8
 8018772:	4610      	mov	r0, r2
 8018774:	4798      	blx	r3
 8018776:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8018778:	68fb      	ldr	r3, [r7, #12]
 801877a:	3301      	adds	r3, #1
 801877c:	2207      	movs	r2, #7
 801877e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8018780:	e00f      	b.n	80187a2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8018782:	6839      	ldr	r1, [r7, #0]
 8018784:	6878      	ldr	r0, [r7, #4]
 8018786:	f000 fa10 	bl	8018baa <USBD_CtlError>
        err++;
 801878a:	7afb      	ldrb	r3, [r7, #11]
 801878c:	3301      	adds	r3, #1
 801878e:	72fb      	strb	r3, [r7, #11]
      break;
 8018790:	e007      	b.n	80187a2 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8018792:	6839      	ldr	r1, [r7, #0]
 8018794:	6878      	ldr	r0, [r7, #4]
 8018796:	f000 fa08 	bl	8018baa <USBD_CtlError>
      err++;
 801879a:	7afb      	ldrb	r3, [r7, #11]
 801879c:	3301      	adds	r3, #1
 801879e:	72fb      	strb	r3, [r7, #11]
      break;
 80187a0:	bf00      	nop
  }

  if (err != 0U)
 80187a2:	7afb      	ldrb	r3, [r7, #11]
 80187a4:	2b00      	cmp	r3, #0
 80187a6:	d11e      	bne.n	80187e6 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 80187a8:	683b      	ldr	r3, [r7, #0]
 80187aa:	88db      	ldrh	r3, [r3, #6]
 80187ac:	2b00      	cmp	r3, #0
 80187ae:	d016      	beq.n	80187de <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 80187b0:	893b      	ldrh	r3, [r7, #8]
 80187b2:	2b00      	cmp	r3, #0
 80187b4:	d00e      	beq.n	80187d4 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 80187b6:	683b      	ldr	r3, [r7, #0]
 80187b8:	88da      	ldrh	r2, [r3, #6]
 80187ba:	893b      	ldrh	r3, [r7, #8]
 80187bc:	4293      	cmp	r3, r2
 80187be:	bf28      	it	cs
 80187c0:	4613      	movcs	r3, r2
 80187c2:	b29b      	uxth	r3, r3
 80187c4:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80187c6:	893b      	ldrh	r3, [r7, #8]
 80187c8:	461a      	mov	r2, r3
 80187ca:	68f9      	ldr	r1, [r7, #12]
 80187cc:	6878      	ldr	r0, [r7, #4]
 80187ce:	f000 fa5d 	bl	8018c8c <USBD_CtlSendData>
 80187d2:	e009      	b.n	80187e8 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80187d4:	6839      	ldr	r1, [r7, #0]
 80187d6:	6878      	ldr	r0, [r7, #4]
 80187d8:	f000 f9e7 	bl	8018baa <USBD_CtlError>
 80187dc:	e004      	b.n	80187e8 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80187de:	6878      	ldr	r0, [r7, #4]
 80187e0:	f000 faae 	bl	8018d40 <USBD_CtlSendStatus>
 80187e4:	e000      	b.n	80187e8 <USBD_GetDescriptor+0x2cc>
    return;
 80187e6:	bf00      	nop
  }
}
 80187e8:	3710      	adds	r7, #16
 80187ea:	46bd      	mov	sp, r7
 80187ec:	bd80      	pop	{r7, pc}
 80187ee:	bf00      	nop

080187f0 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80187f0:	b580      	push	{r7, lr}
 80187f2:	b084      	sub	sp, #16
 80187f4:	af00      	add	r7, sp, #0
 80187f6:	6078      	str	r0, [r7, #4]
 80187f8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80187fa:	683b      	ldr	r3, [r7, #0]
 80187fc:	889b      	ldrh	r3, [r3, #4]
 80187fe:	2b00      	cmp	r3, #0
 8018800:	d131      	bne.n	8018866 <USBD_SetAddress+0x76>
 8018802:	683b      	ldr	r3, [r7, #0]
 8018804:	88db      	ldrh	r3, [r3, #6]
 8018806:	2b00      	cmp	r3, #0
 8018808:	d12d      	bne.n	8018866 <USBD_SetAddress+0x76>
 801880a:	683b      	ldr	r3, [r7, #0]
 801880c:	885b      	ldrh	r3, [r3, #2]
 801880e:	2b7f      	cmp	r3, #127	@ 0x7f
 8018810:	d829      	bhi.n	8018866 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8018812:	683b      	ldr	r3, [r7, #0]
 8018814:	885b      	ldrh	r3, [r3, #2]
 8018816:	b2db      	uxtb	r3, r3
 8018818:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801881c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801881e:	687b      	ldr	r3, [r7, #4]
 8018820:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8018824:	b2db      	uxtb	r3, r3
 8018826:	2b03      	cmp	r3, #3
 8018828:	d104      	bne.n	8018834 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 801882a:	6839      	ldr	r1, [r7, #0]
 801882c:	6878      	ldr	r0, [r7, #4]
 801882e:	f000 f9bc 	bl	8018baa <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8018832:	e01d      	b.n	8018870 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8018834:	687b      	ldr	r3, [r7, #4]
 8018836:	7bfa      	ldrb	r2, [r7, #15]
 8018838:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 801883c:	7bfb      	ldrb	r3, [r7, #15]
 801883e:	4619      	mov	r1, r3
 8018840:	6878      	ldr	r0, [r7, #4]
 8018842:	f7ee fc9f 	bl	8007184 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8018846:	6878      	ldr	r0, [r7, #4]
 8018848:	f000 fa7a 	bl	8018d40 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 801884c:	7bfb      	ldrb	r3, [r7, #15]
 801884e:	2b00      	cmp	r3, #0
 8018850:	d004      	beq.n	801885c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8018852:	687b      	ldr	r3, [r7, #4]
 8018854:	2202      	movs	r2, #2
 8018856:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801885a:	e009      	b.n	8018870 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 801885c:	687b      	ldr	r3, [r7, #4]
 801885e:	2201      	movs	r2, #1
 8018860:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8018864:	e004      	b.n	8018870 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8018866:	6839      	ldr	r1, [r7, #0]
 8018868:	6878      	ldr	r0, [r7, #4]
 801886a:	f000 f99e 	bl	8018baa <USBD_CtlError>
  }
}
 801886e:	bf00      	nop
 8018870:	bf00      	nop
 8018872:	3710      	adds	r7, #16
 8018874:	46bd      	mov	sp, r7
 8018876:	bd80      	pop	{r7, pc}

08018878 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8018878:	b580      	push	{r7, lr}
 801887a:	b084      	sub	sp, #16
 801887c:	af00      	add	r7, sp, #0
 801887e:	6078      	str	r0, [r7, #4]
 8018880:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8018882:	2300      	movs	r3, #0
 8018884:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8018886:	683b      	ldr	r3, [r7, #0]
 8018888:	885b      	ldrh	r3, [r3, #2]
 801888a:	b2da      	uxtb	r2, r3
 801888c:	4b4e      	ldr	r3, [pc, #312]	@ (80189c8 <USBD_SetConfig+0x150>)
 801888e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8018890:	4b4d      	ldr	r3, [pc, #308]	@ (80189c8 <USBD_SetConfig+0x150>)
 8018892:	781b      	ldrb	r3, [r3, #0]
 8018894:	2b01      	cmp	r3, #1
 8018896:	d905      	bls.n	80188a4 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8018898:	6839      	ldr	r1, [r7, #0]
 801889a:	6878      	ldr	r0, [r7, #4]
 801889c:	f000 f985 	bl	8018baa <USBD_CtlError>
    return USBD_FAIL;
 80188a0:	2303      	movs	r3, #3
 80188a2:	e08c      	b.n	80189be <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 80188a4:	687b      	ldr	r3, [r7, #4]
 80188a6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80188aa:	b2db      	uxtb	r3, r3
 80188ac:	2b02      	cmp	r3, #2
 80188ae:	d002      	beq.n	80188b6 <USBD_SetConfig+0x3e>
 80188b0:	2b03      	cmp	r3, #3
 80188b2:	d029      	beq.n	8018908 <USBD_SetConfig+0x90>
 80188b4:	e075      	b.n	80189a2 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80188b6:	4b44      	ldr	r3, [pc, #272]	@ (80189c8 <USBD_SetConfig+0x150>)
 80188b8:	781b      	ldrb	r3, [r3, #0]
 80188ba:	2b00      	cmp	r3, #0
 80188bc:	d020      	beq.n	8018900 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 80188be:	4b42      	ldr	r3, [pc, #264]	@ (80189c8 <USBD_SetConfig+0x150>)
 80188c0:	781b      	ldrb	r3, [r3, #0]
 80188c2:	461a      	mov	r2, r3
 80188c4:	687b      	ldr	r3, [r7, #4]
 80188c6:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80188c8:	4b3f      	ldr	r3, [pc, #252]	@ (80189c8 <USBD_SetConfig+0x150>)
 80188ca:	781b      	ldrb	r3, [r3, #0]
 80188cc:	4619      	mov	r1, r3
 80188ce:	6878      	ldr	r0, [r7, #4]
 80188d0:	f7fe ffe9 	bl	80178a6 <USBD_SetClassConfig>
 80188d4:	4603      	mov	r3, r0
 80188d6:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80188d8:	7bfb      	ldrb	r3, [r7, #15]
 80188da:	2b00      	cmp	r3, #0
 80188dc:	d008      	beq.n	80188f0 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 80188de:	6839      	ldr	r1, [r7, #0]
 80188e0:	6878      	ldr	r0, [r7, #4]
 80188e2:	f000 f962 	bl	8018baa <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80188e6:	687b      	ldr	r3, [r7, #4]
 80188e8:	2202      	movs	r2, #2
 80188ea:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80188ee:	e065      	b.n	80189bc <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80188f0:	6878      	ldr	r0, [r7, #4]
 80188f2:	f000 fa25 	bl	8018d40 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80188f6:	687b      	ldr	r3, [r7, #4]
 80188f8:	2203      	movs	r2, #3
 80188fa:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 80188fe:	e05d      	b.n	80189bc <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8018900:	6878      	ldr	r0, [r7, #4]
 8018902:	f000 fa1d 	bl	8018d40 <USBD_CtlSendStatus>
      break;
 8018906:	e059      	b.n	80189bc <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8018908:	4b2f      	ldr	r3, [pc, #188]	@ (80189c8 <USBD_SetConfig+0x150>)
 801890a:	781b      	ldrb	r3, [r3, #0]
 801890c:	2b00      	cmp	r3, #0
 801890e:	d112      	bne.n	8018936 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8018910:	687b      	ldr	r3, [r7, #4]
 8018912:	2202      	movs	r2, #2
 8018914:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8018918:	4b2b      	ldr	r3, [pc, #172]	@ (80189c8 <USBD_SetConfig+0x150>)
 801891a:	781b      	ldrb	r3, [r3, #0]
 801891c:	461a      	mov	r2, r3
 801891e:	687b      	ldr	r3, [r7, #4]
 8018920:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8018922:	4b29      	ldr	r3, [pc, #164]	@ (80189c8 <USBD_SetConfig+0x150>)
 8018924:	781b      	ldrb	r3, [r3, #0]
 8018926:	4619      	mov	r1, r3
 8018928:	6878      	ldr	r0, [r7, #4]
 801892a:	f7fe ffd8 	bl	80178de <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 801892e:	6878      	ldr	r0, [r7, #4]
 8018930:	f000 fa06 	bl	8018d40 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8018934:	e042      	b.n	80189bc <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8018936:	4b24      	ldr	r3, [pc, #144]	@ (80189c8 <USBD_SetConfig+0x150>)
 8018938:	781b      	ldrb	r3, [r3, #0]
 801893a:	461a      	mov	r2, r3
 801893c:	687b      	ldr	r3, [r7, #4]
 801893e:	685b      	ldr	r3, [r3, #4]
 8018940:	429a      	cmp	r2, r3
 8018942:	d02a      	beq.n	801899a <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8018944:	687b      	ldr	r3, [r7, #4]
 8018946:	685b      	ldr	r3, [r3, #4]
 8018948:	b2db      	uxtb	r3, r3
 801894a:	4619      	mov	r1, r3
 801894c:	6878      	ldr	r0, [r7, #4]
 801894e:	f7fe ffc6 	bl	80178de <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8018952:	4b1d      	ldr	r3, [pc, #116]	@ (80189c8 <USBD_SetConfig+0x150>)
 8018954:	781b      	ldrb	r3, [r3, #0]
 8018956:	461a      	mov	r2, r3
 8018958:	687b      	ldr	r3, [r7, #4]
 801895a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 801895c:	4b1a      	ldr	r3, [pc, #104]	@ (80189c8 <USBD_SetConfig+0x150>)
 801895e:	781b      	ldrb	r3, [r3, #0]
 8018960:	4619      	mov	r1, r3
 8018962:	6878      	ldr	r0, [r7, #4]
 8018964:	f7fe ff9f 	bl	80178a6 <USBD_SetClassConfig>
 8018968:	4603      	mov	r3, r0
 801896a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 801896c:	7bfb      	ldrb	r3, [r7, #15]
 801896e:	2b00      	cmp	r3, #0
 8018970:	d00f      	beq.n	8018992 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8018972:	6839      	ldr	r1, [r7, #0]
 8018974:	6878      	ldr	r0, [r7, #4]
 8018976:	f000 f918 	bl	8018baa <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 801897a:	687b      	ldr	r3, [r7, #4]
 801897c:	685b      	ldr	r3, [r3, #4]
 801897e:	b2db      	uxtb	r3, r3
 8018980:	4619      	mov	r1, r3
 8018982:	6878      	ldr	r0, [r7, #4]
 8018984:	f7fe ffab 	bl	80178de <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8018988:	687b      	ldr	r3, [r7, #4]
 801898a:	2202      	movs	r2, #2
 801898c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8018990:	e014      	b.n	80189bc <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8018992:	6878      	ldr	r0, [r7, #4]
 8018994:	f000 f9d4 	bl	8018d40 <USBD_CtlSendStatus>
      break;
 8018998:	e010      	b.n	80189bc <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 801899a:	6878      	ldr	r0, [r7, #4]
 801899c:	f000 f9d0 	bl	8018d40 <USBD_CtlSendStatus>
      break;
 80189a0:	e00c      	b.n	80189bc <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 80189a2:	6839      	ldr	r1, [r7, #0]
 80189a4:	6878      	ldr	r0, [r7, #4]
 80189a6:	f000 f900 	bl	8018baa <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80189aa:	4b07      	ldr	r3, [pc, #28]	@ (80189c8 <USBD_SetConfig+0x150>)
 80189ac:	781b      	ldrb	r3, [r3, #0]
 80189ae:	4619      	mov	r1, r3
 80189b0:	6878      	ldr	r0, [r7, #4]
 80189b2:	f7fe ff94 	bl	80178de <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80189b6:	2303      	movs	r3, #3
 80189b8:	73fb      	strb	r3, [r7, #15]
      break;
 80189ba:	bf00      	nop
  }

  return ret;
 80189bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80189be:	4618      	mov	r0, r3
 80189c0:	3710      	adds	r7, #16
 80189c2:	46bd      	mov	sp, r7
 80189c4:	bd80      	pop	{r7, pc}
 80189c6:	bf00      	nop
 80189c8:	20001654 	.word	0x20001654

080189cc <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80189cc:	b580      	push	{r7, lr}
 80189ce:	b082      	sub	sp, #8
 80189d0:	af00      	add	r7, sp, #0
 80189d2:	6078      	str	r0, [r7, #4]
 80189d4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80189d6:	683b      	ldr	r3, [r7, #0]
 80189d8:	88db      	ldrh	r3, [r3, #6]
 80189da:	2b01      	cmp	r3, #1
 80189dc:	d004      	beq.n	80189e8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80189de:	6839      	ldr	r1, [r7, #0]
 80189e0:	6878      	ldr	r0, [r7, #4]
 80189e2:	f000 f8e2 	bl	8018baa <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80189e6:	e023      	b.n	8018a30 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80189e8:	687b      	ldr	r3, [r7, #4]
 80189ea:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80189ee:	b2db      	uxtb	r3, r3
 80189f0:	2b02      	cmp	r3, #2
 80189f2:	dc02      	bgt.n	80189fa <USBD_GetConfig+0x2e>
 80189f4:	2b00      	cmp	r3, #0
 80189f6:	dc03      	bgt.n	8018a00 <USBD_GetConfig+0x34>
 80189f8:	e015      	b.n	8018a26 <USBD_GetConfig+0x5a>
 80189fa:	2b03      	cmp	r3, #3
 80189fc:	d00b      	beq.n	8018a16 <USBD_GetConfig+0x4a>
 80189fe:	e012      	b.n	8018a26 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8018a00:	687b      	ldr	r3, [r7, #4]
 8018a02:	2200      	movs	r2, #0
 8018a04:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8018a06:	687b      	ldr	r3, [r7, #4]
 8018a08:	3308      	adds	r3, #8
 8018a0a:	2201      	movs	r2, #1
 8018a0c:	4619      	mov	r1, r3
 8018a0e:	6878      	ldr	r0, [r7, #4]
 8018a10:	f000 f93c 	bl	8018c8c <USBD_CtlSendData>
        break;
 8018a14:	e00c      	b.n	8018a30 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8018a16:	687b      	ldr	r3, [r7, #4]
 8018a18:	3304      	adds	r3, #4
 8018a1a:	2201      	movs	r2, #1
 8018a1c:	4619      	mov	r1, r3
 8018a1e:	6878      	ldr	r0, [r7, #4]
 8018a20:	f000 f934 	bl	8018c8c <USBD_CtlSendData>
        break;
 8018a24:	e004      	b.n	8018a30 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8018a26:	6839      	ldr	r1, [r7, #0]
 8018a28:	6878      	ldr	r0, [r7, #4]
 8018a2a:	f000 f8be 	bl	8018baa <USBD_CtlError>
        break;
 8018a2e:	bf00      	nop
}
 8018a30:	bf00      	nop
 8018a32:	3708      	adds	r7, #8
 8018a34:	46bd      	mov	sp, r7
 8018a36:	bd80      	pop	{r7, pc}

08018a38 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8018a38:	b580      	push	{r7, lr}
 8018a3a:	b082      	sub	sp, #8
 8018a3c:	af00      	add	r7, sp, #0
 8018a3e:	6078      	str	r0, [r7, #4]
 8018a40:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8018a42:	687b      	ldr	r3, [r7, #4]
 8018a44:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8018a48:	b2db      	uxtb	r3, r3
 8018a4a:	3b01      	subs	r3, #1
 8018a4c:	2b02      	cmp	r3, #2
 8018a4e:	d81e      	bhi.n	8018a8e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8018a50:	683b      	ldr	r3, [r7, #0]
 8018a52:	88db      	ldrh	r3, [r3, #6]
 8018a54:	2b02      	cmp	r3, #2
 8018a56:	d004      	beq.n	8018a62 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8018a58:	6839      	ldr	r1, [r7, #0]
 8018a5a:	6878      	ldr	r0, [r7, #4]
 8018a5c:	f000 f8a5 	bl	8018baa <USBD_CtlError>
        break;
 8018a60:	e01a      	b.n	8018a98 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8018a62:	687b      	ldr	r3, [r7, #4]
 8018a64:	2201      	movs	r2, #1
 8018a66:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8018a68:	687b      	ldr	r3, [r7, #4]
 8018a6a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8018a6e:	2b00      	cmp	r3, #0
 8018a70:	d005      	beq.n	8018a7e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8018a72:	687b      	ldr	r3, [r7, #4]
 8018a74:	68db      	ldr	r3, [r3, #12]
 8018a76:	f043 0202 	orr.w	r2, r3, #2
 8018a7a:	687b      	ldr	r3, [r7, #4]
 8018a7c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8018a7e:	687b      	ldr	r3, [r7, #4]
 8018a80:	330c      	adds	r3, #12
 8018a82:	2202      	movs	r2, #2
 8018a84:	4619      	mov	r1, r3
 8018a86:	6878      	ldr	r0, [r7, #4]
 8018a88:	f000 f900 	bl	8018c8c <USBD_CtlSendData>
      break;
 8018a8c:	e004      	b.n	8018a98 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8018a8e:	6839      	ldr	r1, [r7, #0]
 8018a90:	6878      	ldr	r0, [r7, #4]
 8018a92:	f000 f88a 	bl	8018baa <USBD_CtlError>
      break;
 8018a96:	bf00      	nop
  }
}
 8018a98:	bf00      	nop
 8018a9a:	3708      	adds	r7, #8
 8018a9c:	46bd      	mov	sp, r7
 8018a9e:	bd80      	pop	{r7, pc}

08018aa0 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8018aa0:	b580      	push	{r7, lr}
 8018aa2:	b082      	sub	sp, #8
 8018aa4:	af00      	add	r7, sp, #0
 8018aa6:	6078      	str	r0, [r7, #4]
 8018aa8:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8018aaa:	683b      	ldr	r3, [r7, #0]
 8018aac:	885b      	ldrh	r3, [r3, #2]
 8018aae:	2b01      	cmp	r3, #1
 8018ab0:	d107      	bne.n	8018ac2 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8018ab2:	687b      	ldr	r3, [r7, #4]
 8018ab4:	2201      	movs	r2, #1
 8018ab6:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8018aba:	6878      	ldr	r0, [r7, #4]
 8018abc:	f000 f940 	bl	8018d40 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8018ac0:	e013      	b.n	8018aea <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8018ac2:	683b      	ldr	r3, [r7, #0]
 8018ac4:	885b      	ldrh	r3, [r3, #2]
 8018ac6:	2b02      	cmp	r3, #2
 8018ac8:	d10b      	bne.n	8018ae2 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 8018aca:	683b      	ldr	r3, [r7, #0]
 8018acc:	889b      	ldrh	r3, [r3, #4]
 8018ace:	0a1b      	lsrs	r3, r3, #8
 8018ad0:	b29b      	uxth	r3, r3
 8018ad2:	b2da      	uxtb	r2, r3
 8018ad4:	687b      	ldr	r3, [r7, #4]
 8018ad6:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8018ada:	6878      	ldr	r0, [r7, #4]
 8018adc:	f000 f930 	bl	8018d40 <USBD_CtlSendStatus>
}
 8018ae0:	e003      	b.n	8018aea <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8018ae2:	6839      	ldr	r1, [r7, #0]
 8018ae4:	6878      	ldr	r0, [r7, #4]
 8018ae6:	f000 f860 	bl	8018baa <USBD_CtlError>
}
 8018aea:	bf00      	nop
 8018aec:	3708      	adds	r7, #8
 8018aee:	46bd      	mov	sp, r7
 8018af0:	bd80      	pop	{r7, pc}

08018af2 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8018af2:	b580      	push	{r7, lr}
 8018af4:	b082      	sub	sp, #8
 8018af6:	af00      	add	r7, sp, #0
 8018af8:	6078      	str	r0, [r7, #4]
 8018afa:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8018afc:	687b      	ldr	r3, [r7, #4]
 8018afe:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8018b02:	b2db      	uxtb	r3, r3
 8018b04:	3b01      	subs	r3, #1
 8018b06:	2b02      	cmp	r3, #2
 8018b08:	d80b      	bhi.n	8018b22 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8018b0a:	683b      	ldr	r3, [r7, #0]
 8018b0c:	885b      	ldrh	r3, [r3, #2]
 8018b0e:	2b01      	cmp	r3, #1
 8018b10:	d10c      	bne.n	8018b2c <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8018b12:	687b      	ldr	r3, [r7, #4]
 8018b14:	2200      	movs	r2, #0
 8018b16:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8018b1a:	6878      	ldr	r0, [r7, #4]
 8018b1c:	f000 f910 	bl	8018d40 <USBD_CtlSendStatus>
      }
      break;
 8018b20:	e004      	b.n	8018b2c <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8018b22:	6839      	ldr	r1, [r7, #0]
 8018b24:	6878      	ldr	r0, [r7, #4]
 8018b26:	f000 f840 	bl	8018baa <USBD_CtlError>
      break;
 8018b2a:	e000      	b.n	8018b2e <USBD_ClrFeature+0x3c>
      break;
 8018b2c:	bf00      	nop
  }
}
 8018b2e:	bf00      	nop
 8018b30:	3708      	adds	r7, #8
 8018b32:	46bd      	mov	sp, r7
 8018b34:	bd80      	pop	{r7, pc}

08018b36 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8018b36:	b580      	push	{r7, lr}
 8018b38:	b084      	sub	sp, #16
 8018b3a:	af00      	add	r7, sp, #0
 8018b3c:	6078      	str	r0, [r7, #4]
 8018b3e:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8018b40:	683b      	ldr	r3, [r7, #0]
 8018b42:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8018b44:	68fb      	ldr	r3, [r7, #12]
 8018b46:	781a      	ldrb	r2, [r3, #0]
 8018b48:	687b      	ldr	r3, [r7, #4]
 8018b4a:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8018b4c:	68fb      	ldr	r3, [r7, #12]
 8018b4e:	3301      	adds	r3, #1
 8018b50:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8018b52:	68fb      	ldr	r3, [r7, #12]
 8018b54:	781a      	ldrb	r2, [r3, #0]
 8018b56:	687b      	ldr	r3, [r7, #4]
 8018b58:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8018b5a:	68fb      	ldr	r3, [r7, #12]
 8018b5c:	3301      	adds	r3, #1
 8018b5e:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8018b60:	68f8      	ldr	r0, [r7, #12]
 8018b62:	f7ff fa40 	bl	8017fe6 <SWAPBYTE>
 8018b66:	4603      	mov	r3, r0
 8018b68:	461a      	mov	r2, r3
 8018b6a:	687b      	ldr	r3, [r7, #4]
 8018b6c:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8018b6e:	68fb      	ldr	r3, [r7, #12]
 8018b70:	3301      	adds	r3, #1
 8018b72:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8018b74:	68fb      	ldr	r3, [r7, #12]
 8018b76:	3301      	adds	r3, #1
 8018b78:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8018b7a:	68f8      	ldr	r0, [r7, #12]
 8018b7c:	f7ff fa33 	bl	8017fe6 <SWAPBYTE>
 8018b80:	4603      	mov	r3, r0
 8018b82:	461a      	mov	r2, r3
 8018b84:	687b      	ldr	r3, [r7, #4]
 8018b86:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8018b88:	68fb      	ldr	r3, [r7, #12]
 8018b8a:	3301      	adds	r3, #1
 8018b8c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8018b8e:	68fb      	ldr	r3, [r7, #12]
 8018b90:	3301      	adds	r3, #1
 8018b92:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8018b94:	68f8      	ldr	r0, [r7, #12]
 8018b96:	f7ff fa26 	bl	8017fe6 <SWAPBYTE>
 8018b9a:	4603      	mov	r3, r0
 8018b9c:	461a      	mov	r2, r3
 8018b9e:	687b      	ldr	r3, [r7, #4]
 8018ba0:	80da      	strh	r2, [r3, #6]
}
 8018ba2:	bf00      	nop
 8018ba4:	3710      	adds	r7, #16
 8018ba6:	46bd      	mov	sp, r7
 8018ba8:	bd80      	pop	{r7, pc}

08018baa <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8018baa:	b580      	push	{r7, lr}
 8018bac:	b082      	sub	sp, #8
 8018bae:	af00      	add	r7, sp, #0
 8018bb0:	6078      	str	r0, [r7, #4]
 8018bb2:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8018bb4:	2180      	movs	r1, #128	@ 0x80
 8018bb6:	6878      	ldr	r0, [r7, #4]
 8018bb8:	f7ee fa7a 	bl	80070b0 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8018bbc:	2100      	movs	r1, #0
 8018bbe:	6878      	ldr	r0, [r7, #4]
 8018bc0:	f7ee fa76 	bl	80070b0 <USBD_LL_StallEP>
}
 8018bc4:	bf00      	nop
 8018bc6:	3708      	adds	r7, #8
 8018bc8:	46bd      	mov	sp, r7
 8018bca:	bd80      	pop	{r7, pc}

08018bcc <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8018bcc:	b580      	push	{r7, lr}
 8018bce:	b086      	sub	sp, #24
 8018bd0:	af00      	add	r7, sp, #0
 8018bd2:	60f8      	str	r0, [r7, #12]
 8018bd4:	60b9      	str	r1, [r7, #8]
 8018bd6:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8018bd8:	2300      	movs	r3, #0
 8018bda:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8018bdc:	68fb      	ldr	r3, [r7, #12]
 8018bde:	2b00      	cmp	r3, #0
 8018be0:	d036      	beq.n	8018c50 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8018be2:	68fb      	ldr	r3, [r7, #12]
 8018be4:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8018be6:	6938      	ldr	r0, [r7, #16]
 8018be8:	f000 f836 	bl	8018c58 <USBD_GetLen>
 8018bec:	4603      	mov	r3, r0
 8018bee:	3301      	adds	r3, #1
 8018bf0:	b29b      	uxth	r3, r3
 8018bf2:	005b      	lsls	r3, r3, #1
 8018bf4:	b29a      	uxth	r2, r3
 8018bf6:	687b      	ldr	r3, [r7, #4]
 8018bf8:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8018bfa:	7dfb      	ldrb	r3, [r7, #23]
 8018bfc:	68ba      	ldr	r2, [r7, #8]
 8018bfe:	4413      	add	r3, r2
 8018c00:	687a      	ldr	r2, [r7, #4]
 8018c02:	7812      	ldrb	r2, [r2, #0]
 8018c04:	701a      	strb	r2, [r3, #0]
  idx++;
 8018c06:	7dfb      	ldrb	r3, [r7, #23]
 8018c08:	3301      	adds	r3, #1
 8018c0a:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8018c0c:	7dfb      	ldrb	r3, [r7, #23]
 8018c0e:	68ba      	ldr	r2, [r7, #8]
 8018c10:	4413      	add	r3, r2
 8018c12:	2203      	movs	r2, #3
 8018c14:	701a      	strb	r2, [r3, #0]
  idx++;
 8018c16:	7dfb      	ldrb	r3, [r7, #23]
 8018c18:	3301      	adds	r3, #1
 8018c1a:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8018c1c:	e013      	b.n	8018c46 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8018c1e:	7dfb      	ldrb	r3, [r7, #23]
 8018c20:	68ba      	ldr	r2, [r7, #8]
 8018c22:	4413      	add	r3, r2
 8018c24:	693a      	ldr	r2, [r7, #16]
 8018c26:	7812      	ldrb	r2, [r2, #0]
 8018c28:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8018c2a:	693b      	ldr	r3, [r7, #16]
 8018c2c:	3301      	adds	r3, #1
 8018c2e:	613b      	str	r3, [r7, #16]
    idx++;
 8018c30:	7dfb      	ldrb	r3, [r7, #23]
 8018c32:	3301      	adds	r3, #1
 8018c34:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8018c36:	7dfb      	ldrb	r3, [r7, #23]
 8018c38:	68ba      	ldr	r2, [r7, #8]
 8018c3a:	4413      	add	r3, r2
 8018c3c:	2200      	movs	r2, #0
 8018c3e:	701a      	strb	r2, [r3, #0]
    idx++;
 8018c40:	7dfb      	ldrb	r3, [r7, #23]
 8018c42:	3301      	adds	r3, #1
 8018c44:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8018c46:	693b      	ldr	r3, [r7, #16]
 8018c48:	781b      	ldrb	r3, [r3, #0]
 8018c4a:	2b00      	cmp	r3, #0
 8018c4c:	d1e7      	bne.n	8018c1e <USBD_GetString+0x52>
 8018c4e:	e000      	b.n	8018c52 <USBD_GetString+0x86>
    return;
 8018c50:	bf00      	nop
  }
}
 8018c52:	3718      	adds	r7, #24
 8018c54:	46bd      	mov	sp, r7
 8018c56:	bd80      	pop	{r7, pc}

08018c58 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8018c58:	b480      	push	{r7}
 8018c5a:	b085      	sub	sp, #20
 8018c5c:	af00      	add	r7, sp, #0
 8018c5e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8018c60:	2300      	movs	r3, #0
 8018c62:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8018c64:	687b      	ldr	r3, [r7, #4]
 8018c66:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8018c68:	e005      	b.n	8018c76 <USBD_GetLen+0x1e>
  {
    len++;
 8018c6a:	7bfb      	ldrb	r3, [r7, #15]
 8018c6c:	3301      	adds	r3, #1
 8018c6e:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8018c70:	68bb      	ldr	r3, [r7, #8]
 8018c72:	3301      	adds	r3, #1
 8018c74:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8018c76:	68bb      	ldr	r3, [r7, #8]
 8018c78:	781b      	ldrb	r3, [r3, #0]
 8018c7a:	2b00      	cmp	r3, #0
 8018c7c:	d1f5      	bne.n	8018c6a <USBD_GetLen+0x12>
  }

  return len;
 8018c7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8018c80:	4618      	mov	r0, r3
 8018c82:	3714      	adds	r7, #20
 8018c84:	46bd      	mov	sp, r7
 8018c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018c8a:	4770      	bx	lr

08018c8c <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8018c8c:	b580      	push	{r7, lr}
 8018c8e:	b084      	sub	sp, #16
 8018c90:	af00      	add	r7, sp, #0
 8018c92:	60f8      	str	r0, [r7, #12]
 8018c94:	60b9      	str	r1, [r7, #8]
 8018c96:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8018c98:	68fb      	ldr	r3, [r7, #12]
 8018c9a:	2202      	movs	r2, #2
 8018c9c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8018ca0:	68fb      	ldr	r3, [r7, #12]
 8018ca2:	687a      	ldr	r2, [r7, #4]
 8018ca4:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8018ca6:	68fb      	ldr	r3, [r7, #12]
 8018ca8:	687a      	ldr	r2, [r7, #4]
 8018caa:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8018cac:	687b      	ldr	r3, [r7, #4]
 8018cae:	68ba      	ldr	r2, [r7, #8]
 8018cb0:	2100      	movs	r1, #0
 8018cb2:	68f8      	ldr	r0, [r7, #12]
 8018cb4:	f7ee fa85 	bl	80071c2 <USBD_LL_Transmit>

  return USBD_OK;
 8018cb8:	2300      	movs	r3, #0
}
 8018cba:	4618      	mov	r0, r3
 8018cbc:	3710      	adds	r7, #16
 8018cbe:	46bd      	mov	sp, r7
 8018cc0:	bd80      	pop	{r7, pc}

08018cc2 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8018cc2:	b580      	push	{r7, lr}
 8018cc4:	b084      	sub	sp, #16
 8018cc6:	af00      	add	r7, sp, #0
 8018cc8:	60f8      	str	r0, [r7, #12]
 8018cca:	60b9      	str	r1, [r7, #8]
 8018ccc:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8018cce:	687b      	ldr	r3, [r7, #4]
 8018cd0:	68ba      	ldr	r2, [r7, #8]
 8018cd2:	2100      	movs	r1, #0
 8018cd4:	68f8      	ldr	r0, [r7, #12]
 8018cd6:	f7ee fa74 	bl	80071c2 <USBD_LL_Transmit>

  return USBD_OK;
 8018cda:	2300      	movs	r3, #0
}
 8018cdc:	4618      	mov	r0, r3
 8018cde:	3710      	adds	r7, #16
 8018ce0:	46bd      	mov	sp, r7
 8018ce2:	bd80      	pop	{r7, pc}

08018ce4 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8018ce4:	b580      	push	{r7, lr}
 8018ce6:	b084      	sub	sp, #16
 8018ce8:	af00      	add	r7, sp, #0
 8018cea:	60f8      	str	r0, [r7, #12]
 8018cec:	60b9      	str	r1, [r7, #8]
 8018cee:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8018cf0:	68fb      	ldr	r3, [r7, #12]
 8018cf2:	2203      	movs	r2, #3
 8018cf4:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8018cf8:	68fb      	ldr	r3, [r7, #12]
 8018cfa:	687a      	ldr	r2, [r7, #4]
 8018cfc:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8018d00:	68fb      	ldr	r3, [r7, #12]
 8018d02:	687a      	ldr	r2, [r7, #4]
 8018d04:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8018d08:	687b      	ldr	r3, [r7, #4]
 8018d0a:	68ba      	ldr	r2, [r7, #8]
 8018d0c:	2100      	movs	r1, #0
 8018d0e:	68f8      	ldr	r0, [r7, #12]
 8018d10:	f7ee fa78 	bl	8007204 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8018d14:	2300      	movs	r3, #0
}
 8018d16:	4618      	mov	r0, r3
 8018d18:	3710      	adds	r7, #16
 8018d1a:	46bd      	mov	sp, r7
 8018d1c:	bd80      	pop	{r7, pc}

08018d1e <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8018d1e:	b580      	push	{r7, lr}
 8018d20:	b084      	sub	sp, #16
 8018d22:	af00      	add	r7, sp, #0
 8018d24:	60f8      	str	r0, [r7, #12]
 8018d26:	60b9      	str	r1, [r7, #8]
 8018d28:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8018d2a:	687b      	ldr	r3, [r7, #4]
 8018d2c:	68ba      	ldr	r2, [r7, #8]
 8018d2e:	2100      	movs	r1, #0
 8018d30:	68f8      	ldr	r0, [r7, #12]
 8018d32:	f7ee fa67 	bl	8007204 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8018d36:	2300      	movs	r3, #0
}
 8018d38:	4618      	mov	r0, r3
 8018d3a:	3710      	adds	r7, #16
 8018d3c:	46bd      	mov	sp, r7
 8018d3e:	bd80      	pop	{r7, pc}

08018d40 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8018d40:	b580      	push	{r7, lr}
 8018d42:	b082      	sub	sp, #8
 8018d44:	af00      	add	r7, sp, #0
 8018d46:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8018d48:	687b      	ldr	r3, [r7, #4]
 8018d4a:	2204      	movs	r2, #4
 8018d4c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8018d50:	2300      	movs	r3, #0
 8018d52:	2200      	movs	r2, #0
 8018d54:	2100      	movs	r1, #0
 8018d56:	6878      	ldr	r0, [r7, #4]
 8018d58:	f7ee fa33 	bl	80071c2 <USBD_LL_Transmit>

  return USBD_OK;
 8018d5c:	2300      	movs	r3, #0
}
 8018d5e:	4618      	mov	r0, r3
 8018d60:	3708      	adds	r7, #8
 8018d62:	46bd      	mov	sp, r7
 8018d64:	bd80      	pop	{r7, pc}

08018d66 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8018d66:	b580      	push	{r7, lr}
 8018d68:	b082      	sub	sp, #8
 8018d6a:	af00      	add	r7, sp, #0
 8018d6c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8018d6e:	687b      	ldr	r3, [r7, #4]
 8018d70:	2205      	movs	r2, #5
 8018d72:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8018d76:	2300      	movs	r3, #0
 8018d78:	2200      	movs	r2, #0
 8018d7a:	2100      	movs	r1, #0
 8018d7c:	6878      	ldr	r0, [r7, #4]
 8018d7e:	f7ee fa41 	bl	8007204 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8018d82:	2300      	movs	r3, #0
}
 8018d84:	4618      	mov	r0, r3
 8018d86:	3708      	adds	r7, #8
 8018d88:	46bd      	mov	sp, r7
 8018d8a:	bd80      	pop	{r7, pc}

08018d8c <__NVIC_SetPriority>:
{
 8018d8c:	b480      	push	{r7}
 8018d8e:	b083      	sub	sp, #12
 8018d90:	af00      	add	r7, sp, #0
 8018d92:	4603      	mov	r3, r0
 8018d94:	6039      	str	r1, [r7, #0]
 8018d96:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8018d98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8018d9c:	2b00      	cmp	r3, #0
 8018d9e:	db0a      	blt.n	8018db6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8018da0:	683b      	ldr	r3, [r7, #0]
 8018da2:	b2da      	uxtb	r2, r3
 8018da4:	490c      	ldr	r1, [pc, #48]	@ (8018dd8 <__NVIC_SetPriority+0x4c>)
 8018da6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8018daa:	0112      	lsls	r2, r2, #4
 8018dac:	b2d2      	uxtb	r2, r2
 8018dae:	440b      	add	r3, r1
 8018db0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8018db4:	e00a      	b.n	8018dcc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8018db6:	683b      	ldr	r3, [r7, #0]
 8018db8:	b2da      	uxtb	r2, r3
 8018dba:	4908      	ldr	r1, [pc, #32]	@ (8018ddc <__NVIC_SetPriority+0x50>)
 8018dbc:	79fb      	ldrb	r3, [r7, #7]
 8018dbe:	f003 030f 	and.w	r3, r3, #15
 8018dc2:	3b04      	subs	r3, #4
 8018dc4:	0112      	lsls	r2, r2, #4
 8018dc6:	b2d2      	uxtb	r2, r2
 8018dc8:	440b      	add	r3, r1
 8018dca:	761a      	strb	r2, [r3, #24]
}
 8018dcc:	bf00      	nop
 8018dce:	370c      	adds	r7, #12
 8018dd0:	46bd      	mov	sp, r7
 8018dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018dd6:	4770      	bx	lr
 8018dd8:	e000e100 	.word	0xe000e100
 8018ddc:	e000ed00 	.word	0xe000ed00

08018de0 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8018de0:	b580      	push	{r7, lr}
 8018de2:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8018de4:	2100      	movs	r1, #0
 8018de6:	f06f 0004 	mvn.w	r0, #4
 8018dea:	f7ff ffcf 	bl	8018d8c <__NVIC_SetPriority>
#endif
}
 8018dee:	bf00      	nop
 8018df0:	bd80      	pop	{r7, pc}
	...

08018df4 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8018df4:	b480      	push	{r7}
 8018df6:	b083      	sub	sp, #12
 8018df8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8018dfa:	f3ef 8305 	mrs	r3, IPSR
 8018dfe:	603b      	str	r3, [r7, #0]
  return(result);
 8018e00:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8018e02:	2b00      	cmp	r3, #0
 8018e04:	d003      	beq.n	8018e0e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8018e06:	f06f 0305 	mvn.w	r3, #5
 8018e0a:	607b      	str	r3, [r7, #4]
 8018e0c:	e00c      	b.n	8018e28 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8018e0e:	4b0a      	ldr	r3, [pc, #40]	@ (8018e38 <osKernelInitialize+0x44>)
 8018e10:	681b      	ldr	r3, [r3, #0]
 8018e12:	2b00      	cmp	r3, #0
 8018e14:	d105      	bne.n	8018e22 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8018e16:	4b08      	ldr	r3, [pc, #32]	@ (8018e38 <osKernelInitialize+0x44>)
 8018e18:	2201      	movs	r2, #1
 8018e1a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8018e1c:	2300      	movs	r3, #0
 8018e1e:	607b      	str	r3, [r7, #4]
 8018e20:	e002      	b.n	8018e28 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8018e22:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8018e26:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8018e28:	687b      	ldr	r3, [r7, #4]
}
 8018e2a:	4618      	mov	r0, r3
 8018e2c:	370c      	adds	r7, #12
 8018e2e:	46bd      	mov	sp, r7
 8018e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018e34:	4770      	bx	lr
 8018e36:	bf00      	nop
 8018e38:	20001658 	.word	0x20001658

08018e3c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8018e3c:	b580      	push	{r7, lr}
 8018e3e:	b082      	sub	sp, #8
 8018e40:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8018e42:	f3ef 8305 	mrs	r3, IPSR
 8018e46:	603b      	str	r3, [r7, #0]
  return(result);
 8018e48:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8018e4a:	2b00      	cmp	r3, #0
 8018e4c:	d003      	beq.n	8018e56 <osKernelStart+0x1a>
    stat = osErrorISR;
 8018e4e:	f06f 0305 	mvn.w	r3, #5
 8018e52:	607b      	str	r3, [r7, #4]
 8018e54:	e010      	b.n	8018e78 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8018e56:	4b0b      	ldr	r3, [pc, #44]	@ (8018e84 <osKernelStart+0x48>)
 8018e58:	681b      	ldr	r3, [r3, #0]
 8018e5a:	2b01      	cmp	r3, #1
 8018e5c:	d109      	bne.n	8018e72 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8018e5e:	f7ff ffbf 	bl	8018de0 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8018e62:	4b08      	ldr	r3, [pc, #32]	@ (8018e84 <osKernelStart+0x48>)
 8018e64:	2202      	movs	r2, #2
 8018e66:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8018e68:	f001 fff6 	bl	801ae58 <vTaskStartScheduler>
      stat = osOK;
 8018e6c:	2300      	movs	r3, #0
 8018e6e:	607b      	str	r3, [r7, #4]
 8018e70:	e002      	b.n	8018e78 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8018e72:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8018e76:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8018e78:	687b      	ldr	r3, [r7, #4]
}
 8018e7a:	4618      	mov	r0, r3
 8018e7c:	3708      	adds	r7, #8
 8018e7e:	46bd      	mov	sp, r7
 8018e80:	bd80      	pop	{r7, pc}
 8018e82:	bf00      	nop
 8018e84:	20001658 	.word	0x20001658

08018e88 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8018e88:	b580      	push	{r7, lr}
 8018e8a:	b08e      	sub	sp, #56	@ 0x38
 8018e8c:	af04      	add	r7, sp, #16
 8018e8e:	60f8      	str	r0, [r7, #12]
 8018e90:	60b9      	str	r1, [r7, #8]
 8018e92:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8018e94:	2300      	movs	r3, #0
 8018e96:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8018e98:	f3ef 8305 	mrs	r3, IPSR
 8018e9c:	617b      	str	r3, [r7, #20]
  return(result);
 8018e9e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8018ea0:	2b00      	cmp	r3, #0
 8018ea2:	d17e      	bne.n	8018fa2 <osThreadNew+0x11a>
 8018ea4:	68fb      	ldr	r3, [r7, #12]
 8018ea6:	2b00      	cmp	r3, #0
 8018ea8:	d07b      	beq.n	8018fa2 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8018eaa:	2380      	movs	r3, #128	@ 0x80
 8018eac:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8018eae:	2318      	movs	r3, #24
 8018eb0:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8018eb2:	2300      	movs	r3, #0
 8018eb4:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8018eb6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8018eba:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8018ebc:	687b      	ldr	r3, [r7, #4]
 8018ebe:	2b00      	cmp	r3, #0
 8018ec0:	d045      	beq.n	8018f4e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8018ec2:	687b      	ldr	r3, [r7, #4]
 8018ec4:	681b      	ldr	r3, [r3, #0]
 8018ec6:	2b00      	cmp	r3, #0
 8018ec8:	d002      	beq.n	8018ed0 <osThreadNew+0x48>
        name = attr->name;
 8018eca:	687b      	ldr	r3, [r7, #4]
 8018ecc:	681b      	ldr	r3, [r3, #0]
 8018ece:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8018ed0:	687b      	ldr	r3, [r7, #4]
 8018ed2:	699b      	ldr	r3, [r3, #24]
 8018ed4:	2b00      	cmp	r3, #0
 8018ed6:	d002      	beq.n	8018ede <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8018ed8:	687b      	ldr	r3, [r7, #4]
 8018eda:	699b      	ldr	r3, [r3, #24]
 8018edc:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8018ede:	69fb      	ldr	r3, [r7, #28]
 8018ee0:	2b00      	cmp	r3, #0
 8018ee2:	d008      	beq.n	8018ef6 <osThreadNew+0x6e>
 8018ee4:	69fb      	ldr	r3, [r7, #28]
 8018ee6:	2b38      	cmp	r3, #56	@ 0x38
 8018ee8:	d805      	bhi.n	8018ef6 <osThreadNew+0x6e>
 8018eea:	687b      	ldr	r3, [r7, #4]
 8018eec:	685b      	ldr	r3, [r3, #4]
 8018eee:	f003 0301 	and.w	r3, r3, #1
 8018ef2:	2b00      	cmp	r3, #0
 8018ef4:	d001      	beq.n	8018efa <osThreadNew+0x72>
        return (NULL);
 8018ef6:	2300      	movs	r3, #0
 8018ef8:	e054      	b.n	8018fa4 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8018efa:	687b      	ldr	r3, [r7, #4]
 8018efc:	695b      	ldr	r3, [r3, #20]
 8018efe:	2b00      	cmp	r3, #0
 8018f00:	d003      	beq.n	8018f0a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8018f02:	687b      	ldr	r3, [r7, #4]
 8018f04:	695b      	ldr	r3, [r3, #20]
 8018f06:	089b      	lsrs	r3, r3, #2
 8018f08:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8018f0a:	687b      	ldr	r3, [r7, #4]
 8018f0c:	689b      	ldr	r3, [r3, #8]
 8018f0e:	2b00      	cmp	r3, #0
 8018f10:	d00e      	beq.n	8018f30 <osThreadNew+0xa8>
 8018f12:	687b      	ldr	r3, [r7, #4]
 8018f14:	68db      	ldr	r3, [r3, #12]
 8018f16:	2ba7      	cmp	r3, #167	@ 0xa7
 8018f18:	d90a      	bls.n	8018f30 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8018f1a:	687b      	ldr	r3, [r7, #4]
 8018f1c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8018f1e:	2b00      	cmp	r3, #0
 8018f20:	d006      	beq.n	8018f30 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8018f22:	687b      	ldr	r3, [r7, #4]
 8018f24:	695b      	ldr	r3, [r3, #20]
 8018f26:	2b00      	cmp	r3, #0
 8018f28:	d002      	beq.n	8018f30 <osThreadNew+0xa8>
        mem = 1;
 8018f2a:	2301      	movs	r3, #1
 8018f2c:	61bb      	str	r3, [r7, #24]
 8018f2e:	e010      	b.n	8018f52 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8018f30:	687b      	ldr	r3, [r7, #4]
 8018f32:	689b      	ldr	r3, [r3, #8]
 8018f34:	2b00      	cmp	r3, #0
 8018f36:	d10c      	bne.n	8018f52 <osThreadNew+0xca>
 8018f38:	687b      	ldr	r3, [r7, #4]
 8018f3a:	68db      	ldr	r3, [r3, #12]
 8018f3c:	2b00      	cmp	r3, #0
 8018f3e:	d108      	bne.n	8018f52 <osThreadNew+0xca>
 8018f40:	687b      	ldr	r3, [r7, #4]
 8018f42:	691b      	ldr	r3, [r3, #16]
 8018f44:	2b00      	cmp	r3, #0
 8018f46:	d104      	bne.n	8018f52 <osThreadNew+0xca>
          mem = 0;
 8018f48:	2300      	movs	r3, #0
 8018f4a:	61bb      	str	r3, [r7, #24]
 8018f4c:	e001      	b.n	8018f52 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8018f4e:	2300      	movs	r3, #0
 8018f50:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8018f52:	69bb      	ldr	r3, [r7, #24]
 8018f54:	2b01      	cmp	r3, #1
 8018f56:	d110      	bne.n	8018f7a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8018f58:	687b      	ldr	r3, [r7, #4]
 8018f5a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8018f5c:	687a      	ldr	r2, [r7, #4]
 8018f5e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8018f60:	9202      	str	r2, [sp, #8]
 8018f62:	9301      	str	r3, [sp, #4]
 8018f64:	69fb      	ldr	r3, [r7, #28]
 8018f66:	9300      	str	r3, [sp, #0]
 8018f68:	68bb      	ldr	r3, [r7, #8]
 8018f6a:	6a3a      	ldr	r2, [r7, #32]
 8018f6c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8018f6e:	68f8      	ldr	r0, [r7, #12]
 8018f70:	f001 fca3 	bl	801a8ba <xTaskCreateStatic>
 8018f74:	4603      	mov	r3, r0
 8018f76:	613b      	str	r3, [r7, #16]
 8018f78:	e013      	b.n	8018fa2 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8018f7a:	69bb      	ldr	r3, [r7, #24]
 8018f7c:	2b00      	cmp	r3, #0
 8018f7e:	d110      	bne.n	8018fa2 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8018f80:	6a3b      	ldr	r3, [r7, #32]
 8018f82:	b29a      	uxth	r2, r3
 8018f84:	f107 0310 	add.w	r3, r7, #16
 8018f88:	9301      	str	r3, [sp, #4]
 8018f8a:	69fb      	ldr	r3, [r7, #28]
 8018f8c:	9300      	str	r3, [sp, #0]
 8018f8e:	68bb      	ldr	r3, [r7, #8]
 8018f90:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8018f92:	68f8      	ldr	r0, [r7, #12]
 8018f94:	f001 fcf1 	bl	801a97a <xTaskCreate>
 8018f98:	4603      	mov	r3, r0
 8018f9a:	2b01      	cmp	r3, #1
 8018f9c:	d001      	beq.n	8018fa2 <osThreadNew+0x11a>
            hTask = NULL;
 8018f9e:	2300      	movs	r3, #0
 8018fa0:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8018fa2:	693b      	ldr	r3, [r7, #16]
}
 8018fa4:	4618      	mov	r0, r3
 8018fa6:	3728      	adds	r7, #40	@ 0x28
 8018fa8:	46bd      	mov	sp, r7
 8018faa:	bd80      	pop	{r7, pc}

08018fac <osThreadTerminate>:
  vTaskDelete (NULL);
#endif
  for (;;);
}

osStatus_t osThreadTerminate (osThreadId_t thread_id) {
 8018fac:	b580      	push	{r7, lr}
 8018fae:	b086      	sub	sp, #24
 8018fb0:	af00      	add	r7, sp, #0
 8018fb2:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 8018fb4:	687b      	ldr	r3, [r7, #4]
 8018fb6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8018fb8:	f3ef 8305 	mrs	r3, IPSR
 8018fbc:	60bb      	str	r3, [r7, #8]
  return(result);
 8018fbe:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;
#ifndef USE_FreeRTOS_HEAP_1
  eTaskState tstate;

  if (IS_IRQ()) {
 8018fc0:	2b00      	cmp	r3, #0
 8018fc2:	d003      	beq.n	8018fcc <osThreadTerminate+0x20>
    stat = osErrorISR;
 8018fc4:	f06f 0305 	mvn.w	r3, #5
 8018fc8:	617b      	str	r3, [r7, #20]
 8018fca:	e017      	b.n	8018ffc <osThreadTerminate+0x50>
  }
  else if (hTask == NULL) {
 8018fcc:	693b      	ldr	r3, [r7, #16]
 8018fce:	2b00      	cmp	r3, #0
 8018fd0:	d103      	bne.n	8018fda <osThreadTerminate+0x2e>
    stat = osErrorParameter;
 8018fd2:	f06f 0303 	mvn.w	r3, #3
 8018fd6:	617b      	str	r3, [r7, #20]
 8018fd8:	e010      	b.n	8018ffc <osThreadTerminate+0x50>
  }
  else {
    tstate = eTaskGetState (hTask);
 8018fda:	6938      	ldr	r0, [r7, #16]
 8018fdc:	f001 fed4 	bl	801ad88 <eTaskGetState>
 8018fe0:	4603      	mov	r3, r0
 8018fe2:	73fb      	strb	r3, [r7, #15]

    if (tstate != eDeleted) {
 8018fe4:	7bfb      	ldrb	r3, [r7, #15]
 8018fe6:	2b04      	cmp	r3, #4
 8018fe8:	d005      	beq.n	8018ff6 <osThreadTerminate+0x4a>
      stat = osOK;
 8018fea:	2300      	movs	r3, #0
 8018fec:	617b      	str	r3, [r7, #20]
      vTaskDelete (hTask);
 8018fee:	6938      	ldr	r0, [r7, #16]
 8018ff0:	f001 fe20 	bl	801ac34 <vTaskDelete>
 8018ff4:	e002      	b.n	8018ffc <osThreadTerminate+0x50>
    } else {
      stat = osErrorResource;
 8018ff6:	f06f 0302 	mvn.w	r3, #2
 8018ffa:	617b      	str	r3, [r7, #20]
  }
#else
  stat = osError;
#endif

  return (stat);
 8018ffc:	697b      	ldr	r3, [r7, #20]
}
 8018ffe:	4618      	mov	r0, r3
 8019000:	3718      	adds	r7, #24
 8019002:	46bd      	mov	sp, r7
 8019004:	bd80      	pop	{r7, pc}

08019006 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8019006:	b580      	push	{r7, lr}
 8019008:	b084      	sub	sp, #16
 801900a:	af00      	add	r7, sp, #0
 801900c:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801900e:	f3ef 8305 	mrs	r3, IPSR
 8019012:	60bb      	str	r3, [r7, #8]
  return(result);
 8019014:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8019016:	2b00      	cmp	r3, #0
 8019018:	d003      	beq.n	8019022 <osDelay+0x1c>
    stat = osErrorISR;
 801901a:	f06f 0305 	mvn.w	r3, #5
 801901e:	60fb      	str	r3, [r7, #12]
 8019020:	e007      	b.n	8019032 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8019022:	2300      	movs	r3, #0
 8019024:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8019026:	687b      	ldr	r3, [r7, #4]
 8019028:	2b00      	cmp	r3, #0
 801902a:	d002      	beq.n	8019032 <osDelay+0x2c>
      vTaskDelay(ticks);
 801902c:	6878      	ldr	r0, [r7, #4]
 801902e:	f001 fe75 	bl	801ad1c <vTaskDelay>
    }
  }

  return (stat);
 8019032:	68fb      	ldr	r3, [r7, #12]
}
 8019034:	4618      	mov	r0, r3
 8019036:	3710      	adds	r7, #16
 8019038:	46bd      	mov	sp, r7
 801903a:	bd80      	pop	{r7, pc}

0801903c <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 801903c:	b580      	push	{r7, lr}
 801903e:	b08a      	sub	sp, #40	@ 0x28
 8019040:	af02      	add	r7, sp, #8
 8019042:	60f8      	str	r0, [r7, #12]
 8019044:	60b9      	str	r1, [r7, #8]
 8019046:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8019048:	2300      	movs	r3, #0
 801904a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801904c:	f3ef 8305 	mrs	r3, IPSR
 8019050:	613b      	str	r3, [r7, #16]
  return(result);
 8019052:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8019054:	2b00      	cmp	r3, #0
 8019056:	d175      	bne.n	8019144 <osSemaphoreNew+0x108>
 8019058:	68fb      	ldr	r3, [r7, #12]
 801905a:	2b00      	cmp	r3, #0
 801905c:	d072      	beq.n	8019144 <osSemaphoreNew+0x108>
 801905e:	68ba      	ldr	r2, [r7, #8]
 8019060:	68fb      	ldr	r3, [r7, #12]
 8019062:	429a      	cmp	r2, r3
 8019064:	d86e      	bhi.n	8019144 <osSemaphoreNew+0x108>
    mem = -1;
 8019066:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801906a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 801906c:	687b      	ldr	r3, [r7, #4]
 801906e:	2b00      	cmp	r3, #0
 8019070:	d015      	beq.n	801909e <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8019072:	687b      	ldr	r3, [r7, #4]
 8019074:	689b      	ldr	r3, [r3, #8]
 8019076:	2b00      	cmp	r3, #0
 8019078:	d006      	beq.n	8019088 <osSemaphoreNew+0x4c>
 801907a:	687b      	ldr	r3, [r7, #4]
 801907c:	68db      	ldr	r3, [r3, #12]
 801907e:	2b4f      	cmp	r3, #79	@ 0x4f
 8019080:	d902      	bls.n	8019088 <osSemaphoreNew+0x4c>
        mem = 1;
 8019082:	2301      	movs	r3, #1
 8019084:	61bb      	str	r3, [r7, #24]
 8019086:	e00c      	b.n	80190a2 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8019088:	687b      	ldr	r3, [r7, #4]
 801908a:	689b      	ldr	r3, [r3, #8]
 801908c:	2b00      	cmp	r3, #0
 801908e:	d108      	bne.n	80190a2 <osSemaphoreNew+0x66>
 8019090:	687b      	ldr	r3, [r7, #4]
 8019092:	68db      	ldr	r3, [r3, #12]
 8019094:	2b00      	cmp	r3, #0
 8019096:	d104      	bne.n	80190a2 <osSemaphoreNew+0x66>
          mem = 0;
 8019098:	2300      	movs	r3, #0
 801909a:	61bb      	str	r3, [r7, #24]
 801909c:	e001      	b.n	80190a2 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 801909e:	2300      	movs	r3, #0
 80190a0:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 80190a2:	69bb      	ldr	r3, [r7, #24]
 80190a4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80190a8:	d04c      	beq.n	8019144 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 80190aa:	68fb      	ldr	r3, [r7, #12]
 80190ac:	2b01      	cmp	r3, #1
 80190ae:	d128      	bne.n	8019102 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 80190b0:	69bb      	ldr	r3, [r7, #24]
 80190b2:	2b01      	cmp	r3, #1
 80190b4:	d10a      	bne.n	80190cc <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 80190b6:	687b      	ldr	r3, [r7, #4]
 80190b8:	689b      	ldr	r3, [r3, #8]
 80190ba:	2203      	movs	r2, #3
 80190bc:	9200      	str	r2, [sp, #0]
 80190be:	2200      	movs	r2, #0
 80190c0:	2100      	movs	r1, #0
 80190c2:	2001      	movs	r0, #1
 80190c4:	f000 fa2c 	bl	8019520 <xQueueGenericCreateStatic>
 80190c8:	61f8      	str	r0, [r7, #28]
 80190ca:	e005      	b.n	80190d8 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 80190cc:	2203      	movs	r2, #3
 80190ce:	2100      	movs	r1, #0
 80190d0:	2001      	movs	r0, #1
 80190d2:	f000 faa2 	bl	801961a <xQueueGenericCreate>
 80190d6:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 80190d8:	69fb      	ldr	r3, [r7, #28]
 80190da:	2b00      	cmp	r3, #0
 80190dc:	d022      	beq.n	8019124 <osSemaphoreNew+0xe8>
 80190de:	68bb      	ldr	r3, [r7, #8]
 80190e0:	2b00      	cmp	r3, #0
 80190e2:	d01f      	beq.n	8019124 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 80190e4:	2300      	movs	r3, #0
 80190e6:	2200      	movs	r2, #0
 80190e8:	2100      	movs	r1, #0
 80190ea:	69f8      	ldr	r0, [r7, #28]
 80190ec:	f000 fb62 	bl	80197b4 <xQueueGenericSend>
 80190f0:	4603      	mov	r3, r0
 80190f2:	2b01      	cmp	r3, #1
 80190f4:	d016      	beq.n	8019124 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 80190f6:	69f8      	ldr	r0, [r7, #28]
 80190f8:	f001 f800 	bl	801a0fc <vQueueDelete>
            hSemaphore = NULL;
 80190fc:	2300      	movs	r3, #0
 80190fe:	61fb      	str	r3, [r7, #28]
 8019100:	e010      	b.n	8019124 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 8019102:	69bb      	ldr	r3, [r7, #24]
 8019104:	2b01      	cmp	r3, #1
 8019106:	d108      	bne.n	801911a <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8019108:	687b      	ldr	r3, [r7, #4]
 801910a:	689b      	ldr	r3, [r3, #8]
 801910c:	461a      	mov	r2, r3
 801910e:	68b9      	ldr	r1, [r7, #8]
 8019110:	68f8      	ldr	r0, [r7, #12]
 8019112:	f000 fae0 	bl	80196d6 <xQueueCreateCountingSemaphoreStatic>
 8019116:	61f8      	str	r0, [r7, #28]
 8019118:	e004      	b.n	8019124 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 801911a:	68b9      	ldr	r1, [r7, #8]
 801911c:	68f8      	ldr	r0, [r7, #12]
 801911e:	f000 fb13 	bl	8019748 <xQueueCreateCountingSemaphore>
 8019122:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8019124:	69fb      	ldr	r3, [r7, #28]
 8019126:	2b00      	cmp	r3, #0
 8019128:	d00c      	beq.n	8019144 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 801912a:	687b      	ldr	r3, [r7, #4]
 801912c:	2b00      	cmp	r3, #0
 801912e:	d003      	beq.n	8019138 <osSemaphoreNew+0xfc>
          name = attr->name;
 8019130:	687b      	ldr	r3, [r7, #4]
 8019132:	681b      	ldr	r3, [r3, #0]
 8019134:	617b      	str	r3, [r7, #20]
 8019136:	e001      	b.n	801913c <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 8019138:	2300      	movs	r3, #0
 801913a:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 801913c:	6979      	ldr	r1, [r7, #20]
 801913e:	69f8      	ldr	r0, [r7, #28]
 8019140:	f001 f928 	bl	801a394 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8019144:	69fb      	ldr	r3, [r7, #28]
}
 8019146:	4618      	mov	r0, r3
 8019148:	3720      	adds	r7, #32
 801914a:	46bd      	mov	sp, r7
 801914c:	bd80      	pop	{r7, pc}
	...

08019150 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8019150:	b580      	push	{r7, lr}
 8019152:	b086      	sub	sp, #24
 8019154:	af00      	add	r7, sp, #0
 8019156:	6078      	str	r0, [r7, #4]
 8019158:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 801915a:	687b      	ldr	r3, [r7, #4]
 801915c:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 801915e:	2300      	movs	r3, #0
 8019160:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8019162:	693b      	ldr	r3, [r7, #16]
 8019164:	2b00      	cmp	r3, #0
 8019166:	d103      	bne.n	8019170 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8019168:	f06f 0303 	mvn.w	r3, #3
 801916c:	617b      	str	r3, [r7, #20]
 801916e:	e039      	b.n	80191e4 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8019170:	f3ef 8305 	mrs	r3, IPSR
 8019174:	60fb      	str	r3, [r7, #12]
  return(result);
 8019176:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8019178:	2b00      	cmp	r3, #0
 801917a:	d022      	beq.n	80191c2 <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 801917c:	683b      	ldr	r3, [r7, #0]
 801917e:	2b00      	cmp	r3, #0
 8019180:	d003      	beq.n	801918a <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 8019182:	f06f 0303 	mvn.w	r3, #3
 8019186:	617b      	str	r3, [r7, #20]
 8019188:	e02c      	b.n	80191e4 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 801918a:	2300      	movs	r3, #0
 801918c:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 801918e:	f107 0308 	add.w	r3, r7, #8
 8019192:	461a      	mov	r2, r3
 8019194:	2100      	movs	r1, #0
 8019196:	6938      	ldr	r0, [r7, #16]
 8019198:	f000 ff2e 	bl	8019ff8 <xQueueReceiveFromISR>
 801919c:	4603      	mov	r3, r0
 801919e:	2b01      	cmp	r3, #1
 80191a0:	d003      	beq.n	80191aa <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 80191a2:	f06f 0302 	mvn.w	r3, #2
 80191a6:	617b      	str	r3, [r7, #20]
 80191a8:	e01c      	b.n	80191e4 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 80191aa:	68bb      	ldr	r3, [r7, #8]
 80191ac:	2b00      	cmp	r3, #0
 80191ae:	d019      	beq.n	80191e4 <osSemaphoreAcquire+0x94>
 80191b0:	4b0f      	ldr	r3, [pc, #60]	@ (80191f0 <osSemaphoreAcquire+0xa0>)
 80191b2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80191b6:	601a      	str	r2, [r3, #0]
 80191b8:	f3bf 8f4f 	dsb	sy
 80191bc:	f3bf 8f6f 	isb	sy
 80191c0:	e010      	b.n	80191e4 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 80191c2:	6839      	ldr	r1, [r7, #0]
 80191c4:	6938      	ldr	r0, [r7, #16]
 80191c6:	f000 fe07 	bl	8019dd8 <xQueueSemaphoreTake>
 80191ca:	4603      	mov	r3, r0
 80191cc:	2b01      	cmp	r3, #1
 80191ce:	d009      	beq.n	80191e4 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 80191d0:	683b      	ldr	r3, [r7, #0]
 80191d2:	2b00      	cmp	r3, #0
 80191d4:	d003      	beq.n	80191de <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 80191d6:	f06f 0301 	mvn.w	r3, #1
 80191da:	617b      	str	r3, [r7, #20]
 80191dc:	e002      	b.n	80191e4 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 80191de:	f06f 0302 	mvn.w	r3, #2
 80191e2:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 80191e4:	697b      	ldr	r3, [r7, #20]
}
 80191e6:	4618      	mov	r0, r3
 80191e8:	3718      	adds	r7, #24
 80191ea:	46bd      	mov	sp, r7
 80191ec:	bd80      	pop	{r7, pc}
 80191ee:	bf00      	nop
 80191f0:	e000ed04 	.word	0xe000ed04

080191f4 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 80191f4:	b580      	push	{r7, lr}
 80191f6:	b086      	sub	sp, #24
 80191f8:	af00      	add	r7, sp, #0
 80191fa:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 80191fc:	687b      	ldr	r3, [r7, #4]
 80191fe:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8019200:	2300      	movs	r3, #0
 8019202:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8019204:	693b      	ldr	r3, [r7, #16]
 8019206:	2b00      	cmp	r3, #0
 8019208:	d103      	bne.n	8019212 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 801920a:	f06f 0303 	mvn.w	r3, #3
 801920e:	617b      	str	r3, [r7, #20]
 8019210:	e02c      	b.n	801926c <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8019212:	f3ef 8305 	mrs	r3, IPSR
 8019216:	60fb      	str	r3, [r7, #12]
  return(result);
 8019218:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 801921a:	2b00      	cmp	r3, #0
 801921c:	d01a      	beq.n	8019254 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 801921e:	2300      	movs	r3, #0
 8019220:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8019222:	f107 0308 	add.w	r3, r7, #8
 8019226:	4619      	mov	r1, r3
 8019228:	6938      	ldr	r0, [r7, #16]
 801922a:	f000 fc63 	bl	8019af4 <xQueueGiveFromISR>
 801922e:	4603      	mov	r3, r0
 8019230:	2b01      	cmp	r3, #1
 8019232:	d003      	beq.n	801923c <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 8019234:	f06f 0302 	mvn.w	r3, #2
 8019238:	617b      	str	r3, [r7, #20]
 801923a:	e017      	b.n	801926c <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 801923c:	68bb      	ldr	r3, [r7, #8]
 801923e:	2b00      	cmp	r3, #0
 8019240:	d014      	beq.n	801926c <osSemaphoreRelease+0x78>
 8019242:	4b0d      	ldr	r3, [pc, #52]	@ (8019278 <osSemaphoreRelease+0x84>)
 8019244:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8019248:	601a      	str	r2, [r3, #0]
 801924a:	f3bf 8f4f 	dsb	sy
 801924e:	f3bf 8f6f 	isb	sy
 8019252:	e00b      	b.n	801926c <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8019254:	2300      	movs	r3, #0
 8019256:	2200      	movs	r2, #0
 8019258:	2100      	movs	r1, #0
 801925a:	6938      	ldr	r0, [r7, #16]
 801925c:	f000 faaa 	bl	80197b4 <xQueueGenericSend>
 8019260:	4603      	mov	r3, r0
 8019262:	2b01      	cmp	r3, #1
 8019264:	d002      	beq.n	801926c <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 8019266:	f06f 0302 	mvn.w	r3, #2
 801926a:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 801926c:	697b      	ldr	r3, [r7, #20]
}
 801926e:	4618      	mov	r0, r3
 8019270:	3718      	adds	r7, #24
 8019272:	46bd      	mov	sp, r7
 8019274:	bd80      	pop	{r7, pc}
 8019276:	bf00      	nop
 8019278:	e000ed04 	.word	0xe000ed04

0801927c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 801927c:	b480      	push	{r7}
 801927e:	b085      	sub	sp, #20
 8019280:	af00      	add	r7, sp, #0
 8019282:	60f8      	str	r0, [r7, #12]
 8019284:	60b9      	str	r1, [r7, #8]
 8019286:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8019288:	68fb      	ldr	r3, [r7, #12]
 801928a:	4a07      	ldr	r2, [pc, #28]	@ (80192a8 <vApplicationGetIdleTaskMemory+0x2c>)
 801928c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 801928e:	68bb      	ldr	r3, [r7, #8]
 8019290:	4a06      	ldr	r2, [pc, #24]	@ (80192ac <vApplicationGetIdleTaskMemory+0x30>)
 8019292:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8019294:	687b      	ldr	r3, [r7, #4]
 8019296:	2280      	movs	r2, #128	@ 0x80
 8019298:	601a      	str	r2, [r3, #0]
}
 801929a:	bf00      	nop
 801929c:	3714      	adds	r7, #20
 801929e:	46bd      	mov	sp, r7
 80192a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80192a4:	4770      	bx	lr
 80192a6:	bf00      	nop
 80192a8:	2000165c 	.word	0x2000165c
 80192ac:	20001704 	.word	0x20001704

080192b0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80192b0:	b480      	push	{r7}
 80192b2:	b085      	sub	sp, #20
 80192b4:	af00      	add	r7, sp, #0
 80192b6:	60f8      	str	r0, [r7, #12]
 80192b8:	60b9      	str	r1, [r7, #8]
 80192ba:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80192bc:	68fb      	ldr	r3, [r7, #12]
 80192be:	4a07      	ldr	r2, [pc, #28]	@ (80192dc <vApplicationGetTimerTaskMemory+0x2c>)
 80192c0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80192c2:	68bb      	ldr	r3, [r7, #8]
 80192c4:	4a06      	ldr	r2, [pc, #24]	@ (80192e0 <vApplicationGetTimerTaskMemory+0x30>)
 80192c6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80192c8:	687b      	ldr	r3, [r7, #4]
 80192ca:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80192ce:	601a      	str	r2, [r3, #0]
}
 80192d0:	bf00      	nop
 80192d2:	3714      	adds	r7, #20
 80192d4:	46bd      	mov	sp, r7
 80192d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80192da:	4770      	bx	lr
 80192dc:	20001904 	.word	0x20001904
 80192e0:	200019ac 	.word	0x200019ac

080192e4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80192e4:	b480      	push	{r7}
 80192e6:	b083      	sub	sp, #12
 80192e8:	af00      	add	r7, sp, #0
 80192ea:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80192ec:	687b      	ldr	r3, [r7, #4]
 80192ee:	f103 0208 	add.w	r2, r3, #8
 80192f2:	687b      	ldr	r3, [r7, #4]
 80192f4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80192f6:	687b      	ldr	r3, [r7, #4]
 80192f8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80192fc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80192fe:	687b      	ldr	r3, [r7, #4]
 8019300:	f103 0208 	add.w	r2, r3, #8
 8019304:	687b      	ldr	r3, [r7, #4]
 8019306:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8019308:	687b      	ldr	r3, [r7, #4]
 801930a:	f103 0208 	add.w	r2, r3, #8
 801930e:	687b      	ldr	r3, [r7, #4]
 8019310:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8019312:	687b      	ldr	r3, [r7, #4]
 8019314:	2200      	movs	r2, #0
 8019316:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8019318:	bf00      	nop
 801931a:	370c      	adds	r7, #12
 801931c:	46bd      	mov	sp, r7
 801931e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019322:	4770      	bx	lr

08019324 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8019324:	b480      	push	{r7}
 8019326:	b083      	sub	sp, #12
 8019328:	af00      	add	r7, sp, #0
 801932a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 801932c:	687b      	ldr	r3, [r7, #4]
 801932e:	2200      	movs	r2, #0
 8019330:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8019332:	bf00      	nop
 8019334:	370c      	adds	r7, #12
 8019336:	46bd      	mov	sp, r7
 8019338:	f85d 7b04 	ldr.w	r7, [sp], #4
 801933c:	4770      	bx	lr

0801933e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 801933e:	b480      	push	{r7}
 8019340:	b085      	sub	sp, #20
 8019342:	af00      	add	r7, sp, #0
 8019344:	6078      	str	r0, [r7, #4]
 8019346:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8019348:	687b      	ldr	r3, [r7, #4]
 801934a:	685b      	ldr	r3, [r3, #4]
 801934c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 801934e:	683b      	ldr	r3, [r7, #0]
 8019350:	68fa      	ldr	r2, [r7, #12]
 8019352:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8019354:	68fb      	ldr	r3, [r7, #12]
 8019356:	689a      	ldr	r2, [r3, #8]
 8019358:	683b      	ldr	r3, [r7, #0]
 801935a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 801935c:	68fb      	ldr	r3, [r7, #12]
 801935e:	689b      	ldr	r3, [r3, #8]
 8019360:	683a      	ldr	r2, [r7, #0]
 8019362:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8019364:	68fb      	ldr	r3, [r7, #12]
 8019366:	683a      	ldr	r2, [r7, #0]
 8019368:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 801936a:	683b      	ldr	r3, [r7, #0]
 801936c:	687a      	ldr	r2, [r7, #4]
 801936e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8019370:	687b      	ldr	r3, [r7, #4]
 8019372:	681b      	ldr	r3, [r3, #0]
 8019374:	1c5a      	adds	r2, r3, #1
 8019376:	687b      	ldr	r3, [r7, #4]
 8019378:	601a      	str	r2, [r3, #0]
}
 801937a:	bf00      	nop
 801937c:	3714      	adds	r7, #20
 801937e:	46bd      	mov	sp, r7
 8019380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019384:	4770      	bx	lr

08019386 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8019386:	b480      	push	{r7}
 8019388:	b085      	sub	sp, #20
 801938a:	af00      	add	r7, sp, #0
 801938c:	6078      	str	r0, [r7, #4]
 801938e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8019390:	683b      	ldr	r3, [r7, #0]
 8019392:	681b      	ldr	r3, [r3, #0]
 8019394:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8019396:	68bb      	ldr	r3, [r7, #8]
 8019398:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801939c:	d103      	bne.n	80193a6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 801939e:	687b      	ldr	r3, [r7, #4]
 80193a0:	691b      	ldr	r3, [r3, #16]
 80193a2:	60fb      	str	r3, [r7, #12]
 80193a4:	e00c      	b.n	80193c0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80193a6:	687b      	ldr	r3, [r7, #4]
 80193a8:	3308      	adds	r3, #8
 80193aa:	60fb      	str	r3, [r7, #12]
 80193ac:	e002      	b.n	80193b4 <vListInsert+0x2e>
 80193ae:	68fb      	ldr	r3, [r7, #12]
 80193b0:	685b      	ldr	r3, [r3, #4]
 80193b2:	60fb      	str	r3, [r7, #12]
 80193b4:	68fb      	ldr	r3, [r7, #12]
 80193b6:	685b      	ldr	r3, [r3, #4]
 80193b8:	681b      	ldr	r3, [r3, #0]
 80193ba:	68ba      	ldr	r2, [r7, #8]
 80193bc:	429a      	cmp	r2, r3
 80193be:	d2f6      	bcs.n	80193ae <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80193c0:	68fb      	ldr	r3, [r7, #12]
 80193c2:	685a      	ldr	r2, [r3, #4]
 80193c4:	683b      	ldr	r3, [r7, #0]
 80193c6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80193c8:	683b      	ldr	r3, [r7, #0]
 80193ca:	685b      	ldr	r3, [r3, #4]
 80193cc:	683a      	ldr	r2, [r7, #0]
 80193ce:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80193d0:	683b      	ldr	r3, [r7, #0]
 80193d2:	68fa      	ldr	r2, [r7, #12]
 80193d4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80193d6:	68fb      	ldr	r3, [r7, #12]
 80193d8:	683a      	ldr	r2, [r7, #0]
 80193da:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80193dc:	683b      	ldr	r3, [r7, #0]
 80193de:	687a      	ldr	r2, [r7, #4]
 80193e0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80193e2:	687b      	ldr	r3, [r7, #4]
 80193e4:	681b      	ldr	r3, [r3, #0]
 80193e6:	1c5a      	adds	r2, r3, #1
 80193e8:	687b      	ldr	r3, [r7, #4]
 80193ea:	601a      	str	r2, [r3, #0]
}
 80193ec:	bf00      	nop
 80193ee:	3714      	adds	r7, #20
 80193f0:	46bd      	mov	sp, r7
 80193f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80193f6:	4770      	bx	lr

080193f8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80193f8:	b480      	push	{r7}
 80193fa:	b085      	sub	sp, #20
 80193fc:	af00      	add	r7, sp, #0
 80193fe:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8019400:	687b      	ldr	r3, [r7, #4]
 8019402:	691b      	ldr	r3, [r3, #16]
 8019404:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8019406:	687b      	ldr	r3, [r7, #4]
 8019408:	685b      	ldr	r3, [r3, #4]
 801940a:	687a      	ldr	r2, [r7, #4]
 801940c:	6892      	ldr	r2, [r2, #8]
 801940e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8019410:	687b      	ldr	r3, [r7, #4]
 8019412:	689b      	ldr	r3, [r3, #8]
 8019414:	687a      	ldr	r2, [r7, #4]
 8019416:	6852      	ldr	r2, [r2, #4]
 8019418:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 801941a:	68fb      	ldr	r3, [r7, #12]
 801941c:	685b      	ldr	r3, [r3, #4]
 801941e:	687a      	ldr	r2, [r7, #4]
 8019420:	429a      	cmp	r2, r3
 8019422:	d103      	bne.n	801942c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8019424:	687b      	ldr	r3, [r7, #4]
 8019426:	689a      	ldr	r2, [r3, #8]
 8019428:	68fb      	ldr	r3, [r7, #12]
 801942a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 801942c:	687b      	ldr	r3, [r7, #4]
 801942e:	2200      	movs	r2, #0
 8019430:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8019432:	68fb      	ldr	r3, [r7, #12]
 8019434:	681b      	ldr	r3, [r3, #0]
 8019436:	1e5a      	subs	r2, r3, #1
 8019438:	68fb      	ldr	r3, [r7, #12]
 801943a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 801943c:	68fb      	ldr	r3, [r7, #12]
 801943e:	681b      	ldr	r3, [r3, #0]
}
 8019440:	4618      	mov	r0, r3
 8019442:	3714      	adds	r7, #20
 8019444:	46bd      	mov	sp, r7
 8019446:	f85d 7b04 	ldr.w	r7, [sp], #4
 801944a:	4770      	bx	lr

0801944c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 801944c:	b580      	push	{r7, lr}
 801944e:	b084      	sub	sp, #16
 8019450:	af00      	add	r7, sp, #0
 8019452:	6078      	str	r0, [r7, #4]
 8019454:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8019456:	687b      	ldr	r3, [r7, #4]
 8019458:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 801945a:	68fb      	ldr	r3, [r7, #12]
 801945c:	2b00      	cmp	r3, #0
 801945e:	d10b      	bne.n	8019478 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8019460:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8019464:	f383 8811 	msr	BASEPRI, r3
 8019468:	f3bf 8f6f 	isb	sy
 801946c:	f3bf 8f4f 	dsb	sy
 8019470:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8019472:	bf00      	nop
 8019474:	bf00      	nop
 8019476:	e7fd      	b.n	8019474 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8019478:	f003 f8a6 	bl	801c5c8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 801947c:	68fb      	ldr	r3, [r7, #12]
 801947e:	681a      	ldr	r2, [r3, #0]
 8019480:	68fb      	ldr	r3, [r7, #12]
 8019482:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8019484:	68f9      	ldr	r1, [r7, #12]
 8019486:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8019488:	fb01 f303 	mul.w	r3, r1, r3
 801948c:	441a      	add	r2, r3
 801948e:	68fb      	ldr	r3, [r7, #12]
 8019490:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8019492:	68fb      	ldr	r3, [r7, #12]
 8019494:	2200      	movs	r2, #0
 8019496:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8019498:	68fb      	ldr	r3, [r7, #12]
 801949a:	681a      	ldr	r2, [r3, #0]
 801949c:	68fb      	ldr	r3, [r7, #12]
 801949e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80194a0:	68fb      	ldr	r3, [r7, #12]
 80194a2:	681a      	ldr	r2, [r3, #0]
 80194a4:	68fb      	ldr	r3, [r7, #12]
 80194a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80194a8:	3b01      	subs	r3, #1
 80194aa:	68f9      	ldr	r1, [r7, #12]
 80194ac:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80194ae:	fb01 f303 	mul.w	r3, r1, r3
 80194b2:	441a      	add	r2, r3
 80194b4:	68fb      	ldr	r3, [r7, #12]
 80194b6:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80194b8:	68fb      	ldr	r3, [r7, #12]
 80194ba:	22ff      	movs	r2, #255	@ 0xff
 80194bc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80194c0:	68fb      	ldr	r3, [r7, #12]
 80194c2:	22ff      	movs	r2, #255	@ 0xff
 80194c4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 80194c8:	683b      	ldr	r3, [r7, #0]
 80194ca:	2b00      	cmp	r3, #0
 80194cc:	d114      	bne.n	80194f8 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80194ce:	68fb      	ldr	r3, [r7, #12]
 80194d0:	691b      	ldr	r3, [r3, #16]
 80194d2:	2b00      	cmp	r3, #0
 80194d4:	d01a      	beq.n	801950c <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80194d6:	68fb      	ldr	r3, [r7, #12]
 80194d8:	3310      	adds	r3, #16
 80194da:	4618      	mov	r0, r3
 80194dc:	f001 ff5a 	bl	801b394 <xTaskRemoveFromEventList>
 80194e0:	4603      	mov	r3, r0
 80194e2:	2b00      	cmp	r3, #0
 80194e4:	d012      	beq.n	801950c <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80194e6:	4b0d      	ldr	r3, [pc, #52]	@ (801951c <xQueueGenericReset+0xd0>)
 80194e8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80194ec:	601a      	str	r2, [r3, #0]
 80194ee:	f3bf 8f4f 	dsb	sy
 80194f2:	f3bf 8f6f 	isb	sy
 80194f6:	e009      	b.n	801950c <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80194f8:	68fb      	ldr	r3, [r7, #12]
 80194fa:	3310      	adds	r3, #16
 80194fc:	4618      	mov	r0, r3
 80194fe:	f7ff fef1 	bl	80192e4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8019502:	68fb      	ldr	r3, [r7, #12]
 8019504:	3324      	adds	r3, #36	@ 0x24
 8019506:	4618      	mov	r0, r3
 8019508:	f7ff feec 	bl	80192e4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 801950c:	f003 f88e 	bl	801c62c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8019510:	2301      	movs	r3, #1
}
 8019512:	4618      	mov	r0, r3
 8019514:	3710      	adds	r7, #16
 8019516:	46bd      	mov	sp, r7
 8019518:	bd80      	pop	{r7, pc}
 801951a:	bf00      	nop
 801951c:	e000ed04 	.word	0xe000ed04

08019520 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8019520:	b580      	push	{r7, lr}
 8019522:	b08e      	sub	sp, #56	@ 0x38
 8019524:	af02      	add	r7, sp, #8
 8019526:	60f8      	str	r0, [r7, #12]
 8019528:	60b9      	str	r1, [r7, #8]
 801952a:	607a      	str	r2, [r7, #4]
 801952c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 801952e:	68fb      	ldr	r3, [r7, #12]
 8019530:	2b00      	cmp	r3, #0
 8019532:	d10b      	bne.n	801954c <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8019534:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8019538:	f383 8811 	msr	BASEPRI, r3
 801953c:	f3bf 8f6f 	isb	sy
 8019540:	f3bf 8f4f 	dsb	sy
 8019544:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8019546:	bf00      	nop
 8019548:	bf00      	nop
 801954a:	e7fd      	b.n	8019548 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 801954c:	683b      	ldr	r3, [r7, #0]
 801954e:	2b00      	cmp	r3, #0
 8019550:	d10b      	bne.n	801956a <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8019552:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8019556:	f383 8811 	msr	BASEPRI, r3
 801955a:	f3bf 8f6f 	isb	sy
 801955e:	f3bf 8f4f 	dsb	sy
 8019562:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8019564:	bf00      	nop
 8019566:	bf00      	nop
 8019568:	e7fd      	b.n	8019566 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 801956a:	687b      	ldr	r3, [r7, #4]
 801956c:	2b00      	cmp	r3, #0
 801956e:	d002      	beq.n	8019576 <xQueueGenericCreateStatic+0x56>
 8019570:	68bb      	ldr	r3, [r7, #8]
 8019572:	2b00      	cmp	r3, #0
 8019574:	d001      	beq.n	801957a <xQueueGenericCreateStatic+0x5a>
 8019576:	2301      	movs	r3, #1
 8019578:	e000      	b.n	801957c <xQueueGenericCreateStatic+0x5c>
 801957a:	2300      	movs	r3, #0
 801957c:	2b00      	cmp	r3, #0
 801957e:	d10b      	bne.n	8019598 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8019580:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8019584:	f383 8811 	msr	BASEPRI, r3
 8019588:	f3bf 8f6f 	isb	sy
 801958c:	f3bf 8f4f 	dsb	sy
 8019590:	623b      	str	r3, [r7, #32]
}
 8019592:	bf00      	nop
 8019594:	bf00      	nop
 8019596:	e7fd      	b.n	8019594 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8019598:	687b      	ldr	r3, [r7, #4]
 801959a:	2b00      	cmp	r3, #0
 801959c:	d102      	bne.n	80195a4 <xQueueGenericCreateStatic+0x84>
 801959e:	68bb      	ldr	r3, [r7, #8]
 80195a0:	2b00      	cmp	r3, #0
 80195a2:	d101      	bne.n	80195a8 <xQueueGenericCreateStatic+0x88>
 80195a4:	2301      	movs	r3, #1
 80195a6:	e000      	b.n	80195aa <xQueueGenericCreateStatic+0x8a>
 80195a8:	2300      	movs	r3, #0
 80195aa:	2b00      	cmp	r3, #0
 80195ac:	d10b      	bne.n	80195c6 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 80195ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80195b2:	f383 8811 	msr	BASEPRI, r3
 80195b6:	f3bf 8f6f 	isb	sy
 80195ba:	f3bf 8f4f 	dsb	sy
 80195be:	61fb      	str	r3, [r7, #28]
}
 80195c0:	bf00      	nop
 80195c2:	bf00      	nop
 80195c4:	e7fd      	b.n	80195c2 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80195c6:	2350      	movs	r3, #80	@ 0x50
 80195c8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80195ca:	697b      	ldr	r3, [r7, #20]
 80195cc:	2b50      	cmp	r3, #80	@ 0x50
 80195ce:	d00b      	beq.n	80195e8 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 80195d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80195d4:	f383 8811 	msr	BASEPRI, r3
 80195d8:	f3bf 8f6f 	isb	sy
 80195dc:	f3bf 8f4f 	dsb	sy
 80195e0:	61bb      	str	r3, [r7, #24]
}
 80195e2:	bf00      	nop
 80195e4:	bf00      	nop
 80195e6:	e7fd      	b.n	80195e4 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80195e8:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80195ea:	683b      	ldr	r3, [r7, #0]
 80195ec:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 80195ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80195f0:	2b00      	cmp	r3, #0
 80195f2:	d00d      	beq.n	8019610 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80195f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80195f6:	2201      	movs	r2, #1
 80195f8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80195fc:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8019600:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019602:	9300      	str	r3, [sp, #0]
 8019604:	4613      	mov	r3, r2
 8019606:	687a      	ldr	r2, [r7, #4]
 8019608:	68b9      	ldr	r1, [r7, #8]
 801960a:	68f8      	ldr	r0, [r7, #12]
 801960c:	f000 f840 	bl	8019690 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8019610:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8019612:	4618      	mov	r0, r3
 8019614:	3730      	adds	r7, #48	@ 0x30
 8019616:	46bd      	mov	sp, r7
 8019618:	bd80      	pop	{r7, pc}

0801961a <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 801961a:	b580      	push	{r7, lr}
 801961c:	b08a      	sub	sp, #40	@ 0x28
 801961e:	af02      	add	r7, sp, #8
 8019620:	60f8      	str	r0, [r7, #12]
 8019622:	60b9      	str	r1, [r7, #8]
 8019624:	4613      	mov	r3, r2
 8019626:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8019628:	68fb      	ldr	r3, [r7, #12]
 801962a:	2b00      	cmp	r3, #0
 801962c:	d10b      	bne.n	8019646 <xQueueGenericCreate+0x2c>
	__asm volatile
 801962e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8019632:	f383 8811 	msr	BASEPRI, r3
 8019636:	f3bf 8f6f 	isb	sy
 801963a:	f3bf 8f4f 	dsb	sy
 801963e:	613b      	str	r3, [r7, #16]
}
 8019640:	bf00      	nop
 8019642:	bf00      	nop
 8019644:	e7fd      	b.n	8019642 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8019646:	68fb      	ldr	r3, [r7, #12]
 8019648:	68ba      	ldr	r2, [r7, #8]
 801964a:	fb02 f303 	mul.w	r3, r2, r3
 801964e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8019650:	69fb      	ldr	r3, [r7, #28]
 8019652:	3350      	adds	r3, #80	@ 0x50
 8019654:	4618      	mov	r0, r3
 8019656:	f003 f8d9 	bl	801c80c <pvPortMalloc>
 801965a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 801965c:	69bb      	ldr	r3, [r7, #24]
 801965e:	2b00      	cmp	r3, #0
 8019660:	d011      	beq.n	8019686 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8019662:	69bb      	ldr	r3, [r7, #24]
 8019664:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8019666:	697b      	ldr	r3, [r7, #20]
 8019668:	3350      	adds	r3, #80	@ 0x50
 801966a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 801966c:	69bb      	ldr	r3, [r7, #24]
 801966e:	2200      	movs	r2, #0
 8019670:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8019674:	79fa      	ldrb	r2, [r7, #7]
 8019676:	69bb      	ldr	r3, [r7, #24]
 8019678:	9300      	str	r3, [sp, #0]
 801967a:	4613      	mov	r3, r2
 801967c:	697a      	ldr	r2, [r7, #20]
 801967e:	68b9      	ldr	r1, [r7, #8]
 8019680:	68f8      	ldr	r0, [r7, #12]
 8019682:	f000 f805 	bl	8019690 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8019686:	69bb      	ldr	r3, [r7, #24]
	}
 8019688:	4618      	mov	r0, r3
 801968a:	3720      	adds	r7, #32
 801968c:	46bd      	mov	sp, r7
 801968e:	bd80      	pop	{r7, pc}

08019690 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8019690:	b580      	push	{r7, lr}
 8019692:	b084      	sub	sp, #16
 8019694:	af00      	add	r7, sp, #0
 8019696:	60f8      	str	r0, [r7, #12]
 8019698:	60b9      	str	r1, [r7, #8]
 801969a:	607a      	str	r2, [r7, #4]
 801969c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 801969e:	68bb      	ldr	r3, [r7, #8]
 80196a0:	2b00      	cmp	r3, #0
 80196a2:	d103      	bne.n	80196ac <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80196a4:	69bb      	ldr	r3, [r7, #24]
 80196a6:	69ba      	ldr	r2, [r7, #24]
 80196a8:	601a      	str	r2, [r3, #0]
 80196aa:	e002      	b.n	80196b2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80196ac:	69bb      	ldr	r3, [r7, #24]
 80196ae:	687a      	ldr	r2, [r7, #4]
 80196b0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80196b2:	69bb      	ldr	r3, [r7, #24]
 80196b4:	68fa      	ldr	r2, [r7, #12]
 80196b6:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80196b8:	69bb      	ldr	r3, [r7, #24]
 80196ba:	68ba      	ldr	r2, [r7, #8]
 80196bc:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80196be:	2101      	movs	r1, #1
 80196c0:	69b8      	ldr	r0, [r7, #24]
 80196c2:	f7ff fec3 	bl	801944c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80196c6:	69bb      	ldr	r3, [r7, #24]
 80196c8:	78fa      	ldrb	r2, [r7, #3]
 80196ca:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80196ce:	bf00      	nop
 80196d0:	3710      	adds	r7, #16
 80196d2:	46bd      	mov	sp, r7
 80196d4:	bd80      	pop	{r7, pc}

080196d6 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 80196d6:	b580      	push	{r7, lr}
 80196d8:	b08a      	sub	sp, #40	@ 0x28
 80196da:	af02      	add	r7, sp, #8
 80196dc:	60f8      	str	r0, [r7, #12]
 80196de:	60b9      	str	r1, [r7, #8]
 80196e0:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 80196e2:	68fb      	ldr	r3, [r7, #12]
 80196e4:	2b00      	cmp	r3, #0
 80196e6:	d10b      	bne.n	8019700 <xQueueCreateCountingSemaphoreStatic+0x2a>
	__asm volatile
 80196e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80196ec:	f383 8811 	msr	BASEPRI, r3
 80196f0:	f3bf 8f6f 	isb	sy
 80196f4:	f3bf 8f4f 	dsb	sy
 80196f8:	61bb      	str	r3, [r7, #24]
}
 80196fa:	bf00      	nop
 80196fc:	bf00      	nop
 80196fe:	e7fd      	b.n	80196fc <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8019700:	68ba      	ldr	r2, [r7, #8]
 8019702:	68fb      	ldr	r3, [r7, #12]
 8019704:	429a      	cmp	r2, r3
 8019706:	d90b      	bls.n	8019720 <xQueueCreateCountingSemaphoreStatic+0x4a>
	__asm volatile
 8019708:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801970c:	f383 8811 	msr	BASEPRI, r3
 8019710:	f3bf 8f6f 	isb	sy
 8019714:	f3bf 8f4f 	dsb	sy
 8019718:	617b      	str	r3, [r7, #20]
}
 801971a:	bf00      	nop
 801971c:	bf00      	nop
 801971e:	e7fd      	b.n	801971c <xQueueCreateCountingSemaphoreStatic+0x46>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8019720:	2302      	movs	r3, #2
 8019722:	9300      	str	r3, [sp, #0]
 8019724:	687b      	ldr	r3, [r7, #4]
 8019726:	2200      	movs	r2, #0
 8019728:	2100      	movs	r1, #0
 801972a:	68f8      	ldr	r0, [r7, #12]
 801972c:	f7ff fef8 	bl	8019520 <xQueueGenericCreateStatic>
 8019730:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8019732:	69fb      	ldr	r3, [r7, #28]
 8019734:	2b00      	cmp	r3, #0
 8019736:	d002      	beq.n	801973e <xQueueCreateCountingSemaphoreStatic+0x68>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8019738:	69fb      	ldr	r3, [r7, #28]
 801973a:	68ba      	ldr	r2, [r7, #8]
 801973c:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 801973e:	69fb      	ldr	r3, [r7, #28]
	}
 8019740:	4618      	mov	r0, r3
 8019742:	3720      	adds	r7, #32
 8019744:	46bd      	mov	sp, r7
 8019746:	bd80      	pop	{r7, pc}

08019748 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8019748:	b580      	push	{r7, lr}
 801974a:	b086      	sub	sp, #24
 801974c:	af00      	add	r7, sp, #0
 801974e:	6078      	str	r0, [r7, #4]
 8019750:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8019752:	687b      	ldr	r3, [r7, #4]
 8019754:	2b00      	cmp	r3, #0
 8019756:	d10b      	bne.n	8019770 <xQueueCreateCountingSemaphore+0x28>
	__asm volatile
 8019758:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801975c:	f383 8811 	msr	BASEPRI, r3
 8019760:	f3bf 8f6f 	isb	sy
 8019764:	f3bf 8f4f 	dsb	sy
 8019768:	613b      	str	r3, [r7, #16]
}
 801976a:	bf00      	nop
 801976c:	bf00      	nop
 801976e:	e7fd      	b.n	801976c <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8019770:	683a      	ldr	r2, [r7, #0]
 8019772:	687b      	ldr	r3, [r7, #4]
 8019774:	429a      	cmp	r2, r3
 8019776:	d90b      	bls.n	8019790 <xQueueCreateCountingSemaphore+0x48>
	__asm volatile
 8019778:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801977c:	f383 8811 	msr	BASEPRI, r3
 8019780:	f3bf 8f6f 	isb	sy
 8019784:	f3bf 8f4f 	dsb	sy
 8019788:	60fb      	str	r3, [r7, #12]
}
 801978a:	bf00      	nop
 801978c:	bf00      	nop
 801978e:	e7fd      	b.n	801978c <xQueueCreateCountingSemaphore+0x44>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8019790:	2202      	movs	r2, #2
 8019792:	2100      	movs	r1, #0
 8019794:	6878      	ldr	r0, [r7, #4]
 8019796:	f7ff ff40 	bl	801961a <xQueueGenericCreate>
 801979a:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 801979c:	697b      	ldr	r3, [r7, #20]
 801979e:	2b00      	cmp	r3, #0
 80197a0:	d002      	beq.n	80197a8 <xQueueCreateCountingSemaphore+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80197a2:	697b      	ldr	r3, [r7, #20]
 80197a4:	683a      	ldr	r2, [r7, #0]
 80197a6:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80197a8:	697b      	ldr	r3, [r7, #20]
	}
 80197aa:	4618      	mov	r0, r3
 80197ac:	3718      	adds	r7, #24
 80197ae:	46bd      	mov	sp, r7
 80197b0:	bd80      	pop	{r7, pc}
	...

080197b4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80197b4:	b580      	push	{r7, lr}
 80197b6:	b08e      	sub	sp, #56	@ 0x38
 80197b8:	af00      	add	r7, sp, #0
 80197ba:	60f8      	str	r0, [r7, #12]
 80197bc:	60b9      	str	r1, [r7, #8]
 80197be:	607a      	str	r2, [r7, #4]
 80197c0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80197c2:	2300      	movs	r3, #0
 80197c4:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80197c6:	68fb      	ldr	r3, [r7, #12]
 80197c8:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80197ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80197cc:	2b00      	cmp	r3, #0
 80197ce:	d10b      	bne.n	80197e8 <xQueueGenericSend+0x34>
	__asm volatile
 80197d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80197d4:	f383 8811 	msr	BASEPRI, r3
 80197d8:	f3bf 8f6f 	isb	sy
 80197dc:	f3bf 8f4f 	dsb	sy
 80197e0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80197e2:	bf00      	nop
 80197e4:	bf00      	nop
 80197e6:	e7fd      	b.n	80197e4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80197e8:	68bb      	ldr	r3, [r7, #8]
 80197ea:	2b00      	cmp	r3, #0
 80197ec:	d103      	bne.n	80197f6 <xQueueGenericSend+0x42>
 80197ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80197f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80197f2:	2b00      	cmp	r3, #0
 80197f4:	d101      	bne.n	80197fa <xQueueGenericSend+0x46>
 80197f6:	2301      	movs	r3, #1
 80197f8:	e000      	b.n	80197fc <xQueueGenericSend+0x48>
 80197fa:	2300      	movs	r3, #0
 80197fc:	2b00      	cmp	r3, #0
 80197fe:	d10b      	bne.n	8019818 <xQueueGenericSend+0x64>
	__asm volatile
 8019800:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8019804:	f383 8811 	msr	BASEPRI, r3
 8019808:	f3bf 8f6f 	isb	sy
 801980c:	f3bf 8f4f 	dsb	sy
 8019810:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8019812:	bf00      	nop
 8019814:	bf00      	nop
 8019816:	e7fd      	b.n	8019814 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8019818:	683b      	ldr	r3, [r7, #0]
 801981a:	2b02      	cmp	r3, #2
 801981c:	d103      	bne.n	8019826 <xQueueGenericSend+0x72>
 801981e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019820:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8019822:	2b01      	cmp	r3, #1
 8019824:	d101      	bne.n	801982a <xQueueGenericSend+0x76>
 8019826:	2301      	movs	r3, #1
 8019828:	e000      	b.n	801982c <xQueueGenericSend+0x78>
 801982a:	2300      	movs	r3, #0
 801982c:	2b00      	cmp	r3, #0
 801982e:	d10b      	bne.n	8019848 <xQueueGenericSend+0x94>
	__asm volatile
 8019830:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8019834:	f383 8811 	msr	BASEPRI, r3
 8019838:	f3bf 8f6f 	isb	sy
 801983c:	f3bf 8f4f 	dsb	sy
 8019840:	623b      	str	r3, [r7, #32]
}
 8019842:	bf00      	nop
 8019844:	bf00      	nop
 8019846:	e7fd      	b.n	8019844 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8019848:	f001 ff6a 	bl	801b720 <xTaskGetSchedulerState>
 801984c:	4603      	mov	r3, r0
 801984e:	2b00      	cmp	r3, #0
 8019850:	d102      	bne.n	8019858 <xQueueGenericSend+0xa4>
 8019852:	687b      	ldr	r3, [r7, #4]
 8019854:	2b00      	cmp	r3, #0
 8019856:	d101      	bne.n	801985c <xQueueGenericSend+0xa8>
 8019858:	2301      	movs	r3, #1
 801985a:	e000      	b.n	801985e <xQueueGenericSend+0xaa>
 801985c:	2300      	movs	r3, #0
 801985e:	2b00      	cmp	r3, #0
 8019860:	d10b      	bne.n	801987a <xQueueGenericSend+0xc6>
	__asm volatile
 8019862:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8019866:	f383 8811 	msr	BASEPRI, r3
 801986a:	f3bf 8f6f 	isb	sy
 801986e:	f3bf 8f4f 	dsb	sy
 8019872:	61fb      	str	r3, [r7, #28]
}
 8019874:	bf00      	nop
 8019876:	bf00      	nop
 8019878:	e7fd      	b.n	8019876 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 801987a:	f002 fea5 	bl	801c5c8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 801987e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019880:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8019882:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019884:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8019886:	429a      	cmp	r2, r3
 8019888:	d302      	bcc.n	8019890 <xQueueGenericSend+0xdc>
 801988a:	683b      	ldr	r3, [r7, #0]
 801988c:	2b02      	cmp	r3, #2
 801988e:	d129      	bne.n	80198e4 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8019890:	683a      	ldr	r2, [r7, #0]
 8019892:	68b9      	ldr	r1, [r7, #8]
 8019894:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8019896:	f000 fc6d 	bl	801a174 <prvCopyDataToQueue>
 801989a:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801989c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801989e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80198a0:	2b00      	cmp	r3, #0
 80198a2:	d010      	beq.n	80198c6 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80198a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80198a6:	3324      	adds	r3, #36	@ 0x24
 80198a8:	4618      	mov	r0, r3
 80198aa:	f001 fd73 	bl	801b394 <xTaskRemoveFromEventList>
 80198ae:	4603      	mov	r3, r0
 80198b0:	2b00      	cmp	r3, #0
 80198b2:	d013      	beq.n	80198dc <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80198b4:	4b3f      	ldr	r3, [pc, #252]	@ (80199b4 <xQueueGenericSend+0x200>)
 80198b6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80198ba:	601a      	str	r2, [r3, #0]
 80198bc:	f3bf 8f4f 	dsb	sy
 80198c0:	f3bf 8f6f 	isb	sy
 80198c4:	e00a      	b.n	80198dc <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80198c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80198c8:	2b00      	cmp	r3, #0
 80198ca:	d007      	beq.n	80198dc <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80198cc:	4b39      	ldr	r3, [pc, #228]	@ (80199b4 <xQueueGenericSend+0x200>)
 80198ce:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80198d2:	601a      	str	r2, [r3, #0]
 80198d4:	f3bf 8f4f 	dsb	sy
 80198d8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80198dc:	f002 fea6 	bl	801c62c <vPortExitCritical>
				return pdPASS;
 80198e0:	2301      	movs	r3, #1
 80198e2:	e063      	b.n	80199ac <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80198e4:	687b      	ldr	r3, [r7, #4]
 80198e6:	2b00      	cmp	r3, #0
 80198e8:	d103      	bne.n	80198f2 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80198ea:	f002 fe9f 	bl	801c62c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80198ee:	2300      	movs	r3, #0
 80198f0:	e05c      	b.n	80199ac <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80198f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80198f4:	2b00      	cmp	r3, #0
 80198f6:	d106      	bne.n	8019906 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80198f8:	f107 0314 	add.w	r3, r7, #20
 80198fc:	4618      	mov	r0, r3
 80198fe:	f001 fdad 	bl	801b45c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8019902:	2301      	movs	r3, #1
 8019904:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8019906:	f002 fe91 	bl	801c62c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 801990a:	f001 fb15 	bl	801af38 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 801990e:	f002 fe5b 	bl	801c5c8 <vPortEnterCritical>
 8019912:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019914:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8019918:	b25b      	sxtb	r3, r3
 801991a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801991e:	d103      	bne.n	8019928 <xQueueGenericSend+0x174>
 8019920:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019922:	2200      	movs	r2, #0
 8019924:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8019928:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801992a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 801992e:	b25b      	sxtb	r3, r3
 8019930:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8019934:	d103      	bne.n	801993e <xQueueGenericSend+0x18a>
 8019936:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019938:	2200      	movs	r2, #0
 801993a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 801993e:	f002 fe75 	bl	801c62c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8019942:	1d3a      	adds	r2, r7, #4
 8019944:	f107 0314 	add.w	r3, r7, #20
 8019948:	4611      	mov	r1, r2
 801994a:	4618      	mov	r0, r3
 801994c:	f001 fd9c 	bl	801b488 <xTaskCheckForTimeOut>
 8019950:	4603      	mov	r3, r0
 8019952:	2b00      	cmp	r3, #0
 8019954:	d124      	bne.n	80199a0 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8019956:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8019958:	f000 fd04 	bl	801a364 <prvIsQueueFull>
 801995c:	4603      	mov	r3, r0
 801995e:	2b00      	cmp	r3, #0
 8019960:	d018      	beq.n	8019994 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8019962:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019964:	3310      	adds	r3, #16
 8019966:	687a      	ldr	r2, [r7, #4]
 8019968:	4611      	mov	r1, r2
 801996a:	4618      	mov	r0, r3
 801996c:	f001 fcc0 	bl	801b2f0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8019970:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8019972:	f000 fc8f 	bl	801a294 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8019976:	f001 faed 	bl	801af54 <xTaskResumeAll>
 801997a:	4603      	mov	r3, r0
 801997c:	2b00      	cmp	r3, #0
 801997e:	f47f af7c 	bne.w	801987a <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8019982:	4b0c      	ldr	r3, [pc, #48]	@ (80199b4 <xQueueGenericSend+0x200>)
 8019984:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8019988:	601a      	str	r2, [r3, #0]
 801998a:	f3bf 8f4f 	dsb	sy
 801998e:	f3bf 8f6f 	isb	sy
 8019992:	e772      	b.n	801987a <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8019994:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8019996:	f000 fc7d 	bl	801a294 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 801999a:	f001 fadb 	bl	801af54 <xTaskResumeAll>
 801999e:	e76c      	b.n	801987a <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80199a0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80199a2:	f000 fc77 	bl	801a294 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80199a6:	f001 fad5 	bl	801af54 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80199aa:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80199ac:	4618      	mov	r0, r3
 80199ae:	3738      	adds	r7, #56	@ 0x38
 80199b0:	46bd      	mov	sp, r7
 80199b2:	bd80      	pop	{r7, pc}
 80199b4:	e000ed04 	.word	0xe000ed04

080199b8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80199b8:	b580      	push	{r7, lr}
 80199ba:	b090      	sub	sp, #64	@ 0x40
 80199bc:	af00      	add	r7, sp, #0
 80199be:	60f8      	str	r0, [r7, #12]
 80199c0:	60b9      	str	r1, [r7, #8]
 80199c2:	607a      	str	r2, [r7, #4]
 80199c4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80199c6:	68fb      	ldr	r3, [r7, #12]
 80199c8:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 80199ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80199cc:	2b00      	cmp	r3, #0
 80199ce:	d10b      	bne.n	80199e8 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 80199d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80199d4:	f383 8811 	msr	BASEPRI, r3
 80199d8:	f3bf 8f6f 	isb	sy
 80199dc:	f3bf 8f4f 	dsb	sy
 80199e0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80199e2:	bf00      	nop
 80199e4:	bf00      	nop
 80199e6:	e7fd      	b.n	80199e4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80199e8:	68bb      	ldr	r3, [r7, #8]
 80199ea:	2b00      	cmp	r3, #0
 80199ec:	d103      	bne.n	80199f6 <xQueueGenericSendFromISR+0x3e>
 80199ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80199f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80199f2:	2b00      	cmp	r3, #0
 80199f4:	d101      	bne.n	80199fa <xQueueGenericSendFromISR+0x42>
 80199f6:	2301      	movs	r3, #1
 80199f8:	e000      	b.n	80199fc <xQueueGenericSendFromISR+0x44>
 80199fa:	2300      	movs	r3, #0
 80199fc:	2b00      	cmp	r3, #0
 80199fe:	d10b      	bne.n	8019a18 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8019a00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8019a04:	f383 8811 	msr	BASEPRI, r3
 8019a08:	f3bf 8f6f 	isb	sy
 8019a0c:	f3bf 8f4f 	dsb	sy
 8019a10:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8019a12:	bf00      	nop
 8019a14:	bf00      	nop
 8019a16:	e7fd      	b.n	8019a14 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8019a18:	683b      	ldr	r3, [r7, #0]
 8019a1a:	2b02      	cmp	r3, #2
 8019a1c:	d103      	bne.n	8019a26 <xQueueGenericSendFromISR+0x6e>
 8019a1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019a20:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8019a22:	2b01      	cmp	r3, #1
 8019a24:	d101      	bne.n	8019a2a <xQueueGenericSendFromISR+0x72>
 8019a26:	2301      	movs	r3, #1
 8019a28:	e000      	b.n	8019a2c <xQueueGenericSendFromISR+0x74>
 8019a2a:	2300      	movs	r3, #0
 8019a2c:	2b00      	cmp	r3, #0
 8019a2e:	d10b      	bne.n	8019a48 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8019a30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8019a34:	f383 8811 	msr	BASEPRI, r3
 8019a38:	f3bf 8f6f 	isb	sy
 8019a3c:	f3bf 8f4f 	dsb	sy
 8019a40:	623b      	str	r3, [r7, #32]
}
 8019a42:	bf00      	nop
 8019a44:	bf00      	nop
 8019a46:	e7fd      	b.n	8019a44 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8019a48:	f002 fe9e 	bl	801c788 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8019a4c:	f3ef 8211 	mrs	r2, BASEPRI
 8019a50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8019a54:	f383 8811 	msr	BASEPRI, r3
 8019a58:	f3bf 8f6f 	isb	sy
 8019a5c:	f3bf 8f4f 	dsb	sy
 8019a60:	61fa      	str	r2, [r7, #28]
 8019a62:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8019a64:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8019a66:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8019a68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019a6a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8019a6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019a6e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8019a70:	429a      	cmp	r2, r3
 8019a72:	d302      	bcc.n	8019a7a <xQueueGenericSendFromISR+0xc2>
 8019a74:	683b      	ldr	r3, [r7, #0]
 8019a76:	2b02      	cmp	r3, #2
 8019a78:	d12f      	bne.n	8019ada <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8019a7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019a7c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8019a80:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8019a84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019a86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8019a88:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8019a8a:	683a      	ldr	r2, [r7, #0]
 8019a8c:	68b9      	ldr	r1, [r7, #8]
 8019a8e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8019a90:	f000 fb70 	bl	801a174 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8019a94:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8019a98:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8019a9c:	d112      	bne.n	8019ac4 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8019a9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019aa0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8019aa2:	2b00      	cmp	r3, #0
 8019aa4:	d016      	beq.n	8019ad4 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8019aa6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019aa8:	3324      	adds	r3, #36	@ 0x24
 8019aaa:	4618      	mov	r0, r3
 8019aac:	f001 fc72 	bl	801b394 <xTaskRemoveFromEventList>
 8019ab0:	4603      	mov	r3, r0
 8019ab2:	2b00      	cmp	r3, #0
 8019ab4:	d00e      	beq.n	8019ad4 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8019ab6:	687b      	ldr	r3, [r7, #4]
 8019ab8:	2b00      	cmp	r3, #0
 8019aba:	d00b      	beq.n	8019ad4 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8019abc:	687b      	ldr	r3, [r7, #4]
 8019abe:	2201      	movs	r2, #1
 8019ac0:	601a      	str	r2, [r3, #0]
 8019ac2:	e007      	b.n	8019ad4 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8019ac4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8019ac8:	3301      	adds	r3, #1
 8019aca:	b2db      	uxtb	r3, r3
 8019acc:	b25a      	sxtb	r2, r3
 8019ace:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019ad0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8019ad4:	2301      	movs	r3, #1
 8019ad6:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8019ad8:	e001      	b.n	8019ade <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8019ada:	2300      	movs	r3, #0
 8019adc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8019ade:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8019ae0:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8019ae2:	697b      	ldr	r3, [r7, #20]
 8019ae4:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8019ae8:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8019aea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8019aec:	4618      	mov	r0, r3
 8019aee:	3740      	adds	r7, #64	@ 0x40
 8019af0:	46bd      	mov	sp, r7
 8019af2:	bd80      	pop	{r7, pc}

08019af4 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8019af4:	b580      	push	{r7, lr}
 8019af6:	b08e      	sub	sp, #56	@ 0x38
 8019af8:	af00      	add	r7, sp, #0
 8019afa:	6078      	str	r0, [r7, #4]
 8019afc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8019afe:	687b      	ldr	r3, [r7, #4]
 8019b00:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8019b02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019b04:	2b00      	cmp	r3, #0
 8019b06:	d10b      	bne.n	8019b20 <xQueueGiveFromISR+0x2c>
	__asm volatile
 8019b08:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8019b0c:	f383 8811 	msr	BASEPRI, r3
 8019b10:	f3bf 8f6f 	isb	sy
 8019b14:	f3bf 8f4f 	dsb	sy
 8019b18:	623b      	str	r3, [r7, #32]
}
 8019b1a:	bf00      	nop
 8019b1c:	bf00      	nop
 8019b1e:	e7fd      	b.n	8019b1c <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8019b20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019b22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8019b24:	2b00      	cmp	r3, #0
 8019b26:	d00b      	beq.n	8019b40 <xQueueGiveFromISR+0x4c>
	__asm volatile
 8019b28:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8019b2c:	f383 8811 	msr	BASEPRI, r3
 8019b30:	f3bf 8f6f 	isb	sy
 8019b34:	f3bf 8f4f 	dsb	sy
 8019b38:	61fb      	str	r3, [r7, #28]
}
 8019b3a:	bf00      	nop
 8019b3c:	bf00      	nop
 8019b3e:	e7fd      	b.n	8019b3c <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8019b40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019b42:	681b      	ldr	r3, [r3, #0]
 8019b44:	2b00      	cmp	r3, #0
 8019b46:	d103      	bne.n	8019b50 <xQueueGiveFromISR+0x5c>
 8019b48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019b4a:	689b      	ldr	r3, [r3, #8]
 8019b4c:	2b00      	cmp	r3, #0
 8019b4e:	d101      	bne.n	8019b54 <xQueueGiveFromISR+0x60>
 8019b50:	2301      	movs	r3, #1
 8019b52:	e000      	b.n	8019b56 <xQueueGiveFromISR+0x62>
 8019b54:	2300      	movs	r3, #0
 8019b56:	2b00      	cmp	r3, #0
 8019b58:	d10b      	bne.n	8019b72 <xQueueGiveFromISR+0x7e>
	__asm volatile
 8019b5a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8019b5e:	f383 8811 	msr	BASEPRI, r3
 8019b62:	f3bf 8f6f 	isb	sy
 8019b66:	f3bf 8f4f 	dsb	sy
 8019b6a:	61bb      	str	r3, [r7, #24]
}
 8019b6c:	bf00      	nop
 8019b6e:	bf00      	nop
 8019b70:	e7fd      	b.n	8019b6e <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8019b72:	f002 fe09 	bl	801c788 <vPortValidateInterruptPriority>
	__asm volatile
 8019b76:	f3ef 8211 	mrs	r2, BASEPRI
 8019b7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8019b7e:	f383 8811 	msr	BASEPRI, r3
 8019b82:	f3bf 8f6f 	isb	sy
 8019b86:	f3bf 8f4f 	dsb	sy
 8019b8a:	617a      	str	r2, [r7, #20]
 8019b8c:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8019b8e:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8019b90:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8019b92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019b94:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8019b96:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8019b98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019b9a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8019b9c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8019b9e:	429a      	cmp	r2, r3
 8019ba0:	d22b      	bcs.n	8019bfa <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8019ba2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019ba4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8019ba8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8019bac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019bae:	1c5a      	adds	r2, r3, #1
 8019bb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019bb2:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8019bb4:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8019bb8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8019bbc:	d112      	bne.n	8019be4 <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8019bbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019bc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8019bc2:	2b00      	cmp	r3, #0
 8019bc4:	d016      	beq.n	8019bf4 <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8019bc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019bc8:	3324      	adds	r3, #36	@ 0x24
 8019bca:	4618      	mov	r0, r3
 8019bcc:	f001 fbe2 	bl	801b394 <xTaskRemoveFromEventList>
 8019bd0:	4603      	mov	r3, r0
 8019bd2:	2b00      	cmp	r3, #0
 8019bd4:	d00e      	beq.n	8019bf4 <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8019bd6:	683b      	ldr	r3, [r7, #0]
 8019bd8:	2b00      	cmp	r3, #0
 8019bda:	d00b      	beq.n	8019bf4 <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8019bdc:	683b      	ldr	r3, [r7, #0]
 8019bde:	2201      	movs	r2, #1
 8019be0:	601a      	str	r2, [r3, #0]
 8019be2:	e007      	b.n	8019bf4 <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8019be4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8019be8:	3301      	adds	r3, #1
 8019bea:	b2db      	uxtb	r3, r3
 8019bec:	b25a      	sxtb	r2, r3
 8019bee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019bf0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8019bf4:	2301      	movs	r3, #1
 8019bf6:	637b      	str	r3, [r7, #52]	@ 0x34
 8019bf8:	e001      	b.n	8019bfe <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8019bfa:	2300      	movs	r3, #0
 8019bfc:	637b      	str	r3, [r7, #52]	@ 0x34
 8019bfe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019c00:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8019c02:	68fb      	ldr	r3, [r7, #12]
 8019c04:	f383 8811 	msr	BASEPRI, r3
}
 8019c08:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8019c0a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8019c0c:	4618      	mov	r0, r3
 8019c0e:	3738      	adds	r7, #56	@ 0x38
 8019c10:	46bd      	mov	sp, r7
 8019c12:	bd80      	pop	{r7, pc}

08019c14 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8019c14:	b580      	push	{r7, lr}
 8019c16:	b08c      	sub	sp, #48	@ 0x30
 8019c18:	af00      	add	r7, sp, #0
 8019c1a:	60f8      	str	r0, [r7, #12]
 8019c1c:	60b9      	str	r1, [r7, #8]
 8019c1e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8019c20:	2300      	movs	r3, #0
 8019c22:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8019c24:	68fb      	ldr	r3, [r7, #12]
 8019c26:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8019c28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019c2a:	2b00      	cmp	r3, #0
 8019c2c:	d10b      	bne.n	8019c46 <xQueueReceive+0x32>
	__asm volatile
 8019c2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8019c32:	f383 8811 	msr	BASEPRI, r3
 8019c36:	f3bf 8f6f 	isb	sy
 8019c3a:	f3bf 8f4f 	dsb	sy
 8019c3e:	623b      	str	r3, [r7, #32]
}
 8019c40:	bf00      	nop
 8019c42:	bf00      	nop
 8019c44:	e7fd      	b.n	8019c42 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8019c46:	68bb      	ldr	r3, [r7, #8]
 8019c48:	2b00      	cmp	r3, #0
 8019c4a:	d103      	bne.n	8019c54 <xQueueReceive+0x40>
 8019c4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019c4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8019c50:	2b00      	cmp	r3, #0
 8019c52:	d101      	bne.n	8019c58 <xQueueReceive+0x44>
 8019c54:	2301      	movs	r3, #1
 8019c56:	e000      	b.n	8019c5a <xQueueReceive+0x46>
 8019c58:	2300      	movs	r3, #0
 8019c5a:	2b00      	cmp	r3, #0
 8019c5c:	d10b      	bne.n	8019c76 <xQueueReceive+0x62>
	__asm volatile
 8019c5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8019c62:	f383 8811 	msr	BASEPRI, r3
 8019c66:	f3bf 8f6f 	isb	sy
 8019c6a:	f3bf 8f4f 	dsb	sy
 8019c6e:	61fb      	str	r3, [r7, #28]
}
 8019c70:	bf00      	nop
 8019c72:	bf00      	nop
 8019c74:	e7fd      	b.n	8019c72 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8019c76:	f001 fd53 	bl	801b720 <xTaskGetSchedulerState>
 8019c7a:	4603      	mov	r3, r0
 8019c7c:	2b00      	cmp	r3, #0
 8019c7e:	d102      	bne.n	8019c86 <xQueueReceive+0x72>
 8019c80:	687b      	ldr	r3, [r7, #4]
 8019c82:	2b00      	cmp	r3, #0
 8019c84:	d101      	bne.n	8019c8a <xQueueReceive+0x76>
 8019c86:	2301      	movs	r3, #1
 8019c88:	e000      	b.n	8019c8c <xQueueReceive+0x78>
 8019c8a:	2300      	movs	r3, #0
 8019c8c:	2b00      	cmp	r3, #0
 8019c8e:	d10b      	bne.n	8019ca8 <xQueueReceive+0x94>
	__asm volatile
 8019c90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8019c94:	f383 8811 	msr	BASEPRI, r3
 8019c98:	f3bf 8f6f 	isb	sy
 8019c9c:	f3bf 8f4f 	dsb	sy
 8019ca0:	61bb      	str	r3, [r7, #24]
}
 8019ca2:	bf00      	nop
 8019ca4:	bf00      	nop
 8019ca6:	e7fd      	b.n	8019ca4 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8019ca8:	f002 fc8e 	bl	801c5c8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8019cac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019cae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8019cb0:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8019cb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019cb4:	2b00      	cmp	r3, #0
 8019cb6:	d01f      	beq.n	8019cf8 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8019cb8:	68b9      	ldr	r1, [r7, #8]
 8019cba:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8019cbc:	f000 fac4 	bl	801a248 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8019cc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019cc2:	1e5a      	subs	r2, r3, #1
 8019cc4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019cc6:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8019cc8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019cca:	691b      	ldr	r3, [r3, #16]
 8019ccc:	2b00      	cmp	r3, #0
 8019cce:	d00f      	beq.n	8019cf0 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8019cd0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019cd2:	3310      	adds	r3, #16
 8019cd4:	4618      	mov	r0, r3
 8019cd6:	f001 fb5d 	bl	801b394 <xTaskRemoveFromEventList>
 8019cda:	4603      	mov	r3, r0
 8019cdc:	2b00      	cmp	r3, #0
 8019cde:	d007      	beq.n	8019cf0 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8019ce0:	4b3c      	ldr	r3, [pc, #240]	@ (8019dd4 <xQueueReceive+0x1c0>)
 8019ce2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8019ce6:	601a      	str	r2, [r3, #0]
 8019ce8:	f3bf 8f4f 	dsb	sy
 8019cec:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8019cf0:	f002 fc9c 	bl	801c62c <vPortExitCritical>
				return pdPASS;
 8019cf4:	2301      	movs	r3, #1
 8019cf6:	e069      	b.n	8019dcc <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8019cf8:	687b      	ldr	r3, [r7, #4]
 8019cfa:	2b00      	cmp	r3, #0
 8019cfc:	d103      	bne.n	8019d06 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8019cfe:	f002 fc95 	bl	801c62c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8019d02:	2300      	movs	r3, #0
 8019d04:	e062      	b.n	8019dcc <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8019d06:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019d08:	2b00      	cmp	r3, #0
 8019d0a:	d106      	bne.n	8019d1a <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8019d0c:	f107 0310 	add.w	r3, r7, #16
 8019d10:	4618      	mov	r0, r3
 8019d12:	f001 fba3 	bl	801b45c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8019d16:	2301      	movs	r3, #1
 8019d18:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8019d1a:	f002 fc87 	bl	801c62c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8019d1e:	f001 f90b 	bl	801af38 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8019d22:	f002 fc51 	bl	801c5c8 <vPortEnterCritical>
 8019d26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019d28:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8019d2c:	b25b      	sxtb	r3, r3
 8019d2e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8019d32:	d103      	bne.n	8019d3c <xQueueReceive+0x128>
 8019d34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019d36:	2200      	movs	r2, #0
 8019d38:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8019d3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019d3e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8019d42:	b25b      	sxtb	r3, r3
 8019d44:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8019d48:	d103      	bne.n	8019d52 <xQueueReceive+0x13e>
 8019d4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019d4c:	2200      	movs	r2, #0
 8019d4e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8019d52:	f002 fc6b 	bl	801c62c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8019d56:	1d3a      	adds	r2, r7, #4
 8019d58:	f107 0310 	add.w	r3, r7, #16
 8019d5c:	4611      	mov	r1, r2
 8019d5e:	4618      	mov	r0, r3
 8019d60:	f001 fb92 	bl	801b488 <xTaskCheckForTimeOut>
 8019d64:	4603      	mov	r3, r0
 8019d66:	2b00      	cmp	r3, #0
 8019d68:	d123      	bne.n	8019db2 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8019d6a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8019d6c:	f000 fae4 	bl	801a338 <prvIsQueueEmpty>
 8019d70:	4603      	mov	r3, r0
 8019d72:	2b00      	cmp	r3, #0
 8019d74:	d017      	beq.n	8019da6 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8019d76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019d78:	3324      	adds	r3, #36	@ 0x24
 8019d7a:	687a      	ldr	r2, [r7, #4]
 8019d7c:	4611      	mov	r1, r2
 8019d7e:	4618      	mov	r0, r3
 8019d80:	f001 fab6 	bl	801b2f0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8019d84:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8019d86:	f000 fa85 	bl	801a294 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8019d8a:	f001 f8e3 	bl	801af54 <xTaskResumeAll>
 8019d8e:	4603      	mov	r3, r0
 8019d90:	2b00      	cmp	r3, #0
 8019d92:	d189      	bne.n	8019ca8 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8019d94:	4b0f      	ldr	r3, [pc, #60]	@ (8019dd4 <xQueueReceive+0x1c0>)
 8019d96:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8019d9a:	601a      	str	r2, [r3, #0]
 8019d9c:	f3bf 8f4f 	dsb	sy
 8019da0:	f3bf 8f6f 	isb	sy
 8019da4:	e780      	b.n	8019ca8 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8019da6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8019da8:	f000 fa74 	bl	801a294 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8019dac:	f001 f8d2 	bl	801af54 <xTaskResumeAll>
 8019db0:	e77a      	b.n	8019ca8 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8019db2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8019db4:	f000 fa6e 	bl	801a294 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8019db8:	f001 f8cc 	bl	801af54 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8019dbc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8019dbe:	f000 fabb 	bl	801a338 <prvIsQueueEmpty>
 8019dc2:	4603      	mov	r3, r0
 8019dc4:	2b00      	cmp	r3, #0
 8019dc6:	f43f af6f 	beq.w	8019ca8 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8019dca:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8019dcc:	4618      	mov	r0, r3
 8019dce:	3730      	adds	r7, #48	@ 0x30
 8019dd0:	46bd      	mov	sp, r7
 8019dd2:	bd80      	pop	{r7, pc}
 8019dd4:	e000ed04 	.word	0xe000ed04

08019dd8 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8019dd8:	b580      	push	{r7, lr}
 8019dda:	b08e      	sub	sp, #56	@ 0x38
 8019ddc:	af00      	add	r7, sp, #0
 8019dde:	6078      	str	r0, [r7, #4]
 8019de0:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8019de2:	2300      	movs	r3, #0
 8019de4:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8019de6:	687b      	ldr	r3, [r7, #4]
 8019de8:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8019dea:	2300      	movs	r3, #0
 8019dec:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8019dee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019df0:	2b00      	cmp	r3, #0
 8019df2:	d10b      	bne.n	8019e0c <xQueueSemaphoreTake+0x34>
	__asm volatile
 8019df4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8019df8:	f383 8811 	msr	BASEPRI, r3
 8019dfc:	f3bf 8f6f 	isb	sy
 8019e00:	f3bf 8f4f 	dsb	sy
 8019e04:	623b      	str	r3, [r7, #32]
}
 8019e06:	bf00      	nop
 8019e08:	bf00      	nop
 8019e0a:	e7fd      	b.n	8019e08 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8019e0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019e0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8019e10:	2b00      	cmp	r3, #0
 8019e12:	d00b      	beq.n	8019e2c <xQueueSemaphoreTake+0x54>
	__asm volatile
 8019e14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8019e18:	f383 8811 	msr	BASEPRI, r3
 8019e1c:	f3bf 8f6f 	isb	sy
 8019e20:	f3bf 8f4f 	dsb	sy
 8019e24:	61fb      	str	r3, [r7, #28]
}
 8019e26:	bf00      	nop
 8019e28:	bf00      	nop
 8019e2a:	e7fd      	b.n	8019e28 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8019e2c:	f001 fc78 	bl	801b720 <xTaskGetSchedulerState>
 8019e30:	4603      	mov	r3, r0
 8019e32:	2b00      	cmp	r3, #0
 8019e34:	d102      	bne.n	8019e3c <xQueueSemaphoreTake+0x64>
 8019e36:	683b      	ldr	r3, [r7, #0]
 8019e38:	2b00      	cmp	r3, #0
 8019e3a:	d101      	bne.n	8019e40 <xQueueSemaphoreTake+0x68>
 8019e3c:	2301      	movs	r3, #1
 8019e3e:	e000      	b.n	8019e42 <xQueueSemaphoreTake+0x6a>
 8019e40:	2300      	movs	r3, #0
 8019e42:	2b00      	cmp	r3, #0
 8019e44:	d10b      	bne.n	8019e5e <xQueueSemaphoreTake+0x86>
	__asm volatile
 8019e46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8019e4a:	f383 8811 	msr	BASEPRI, r3
 8019e4e:	f3bf 8f6f 	isb	sy
 8019e52:	f3bf 8f4f 	dsb	sy
 8019e56:	61bb      	str	r3, [r7, #24]
}
 8019e58:	bf00      	nop
 8019e5a:	bf00      	nop
 8019e5c:	e7fd      	b.n	8019e5a <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8019e5e:	f002 fbb3 	bl	801c5c8 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8019e62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019e64:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8019e66:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8019e68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019e6a:	2b00      	cmp	r3, #0
 8019e6c:	d024      	beq.n	8019eb8 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8019e6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019e70:	1e5a      	subs	r2, r3, #1
 8019e72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019e74:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8019e76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019e78:	681b      	ldr	r3, [r3, #0]
 8019e7a:	2b00      	cmp	r3, #0
 8019e7c:	d104      	bne.n	8019e88 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8019e7e:	f001 fdc9 	bl	801ba14 <pvTaskIncrementMutexHeldCount>
 8019e82:	4602      	mov	r2, r0
 8019e84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019e86:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8019e88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019e8a:	691b      	ldr	r3, [r3, #16]
 8019e8c:	2b00      	cmp	r3, #0
 8019e8e:	d00f      	beq.n	8019eb0 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8019e90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019e92:	3310      	adds	r3, #16
 8019e94:	4618      	mov	r0, r3
 8019e96:	f001 fa7d 	bl	801b394 <xTaskRemoveFromEventList>
 8019e9a:	4603      	mov	r3, r0
 8019e9c:	2b00      	cmp	r3, #0
 8019e9e:	d007      	beq.n	8019eb0 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8019ea0:	4b54      	ldr	r3, [pc, #336]	@ (8019ff4 <xQueueSemaphoreTake+0x21c>)
 8019ea2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8019ea6:	601a      	str	r2, [r3, #0]
 8019ea8:	f3bf 8f4f 	dsb	sy
 8019eac:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8019eb0:	f002 fbbc 	bl	801c62c <vPortExitCritical>
				return pdPASS;
 8019eb4:	2301      	movs	r3, #1
 8019eb6:	e098      	b.n	8019fea <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8019eb8:	683b      	ldr	r3, [r7, #0]
 8019eba:	2b00      	cmp	r3, #0
 8019ebc:	d112      	bne.n	8019ee4 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8019ebe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019ec0:	2b00      	cmp	r3, #0
 8019ec2:	d00b      	beq.n	8019edc <xQueueSemaphoreTake+0x104>
	__asm volatile
 8019ec4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8019ec8:	f383 8811 	msr	BASEPRI, r3
 8019ecc:	f3bf 8f6f 	isb	sy
 8019ed0:	f3bf 8f4f 	dsb	sy
 8019ed4:	617b      	str	r3, [r7, #20]
}
 8019ed6:	bf00      	nop
 8019ed8:	bf00      	nop
 8019eda:	e7fd      	b.n	8019ed8 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8019edc:	f002 fba6 	bl	801c62c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8019ee0:	2300      	movs	r3, #0
 8019ee2:	e082      	b.n	8019fea <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8019ee4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8019ee6:	2b00      	cmp	r3, #0
 8019ee8:	d106      	bne.n	8019ef8 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8019eea:	f107 030c 	add.w	r3, r7, #12
 8019eee:	4618      	mov	r0, r3
 8019ef0:	f001 fab4 	bl	801b45c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8019ef4:	2301      	movs	r3, #1
 8019ef6:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8019ef8:	f002 fb98 	bl	801c62c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8019efc:	f001 f81c 	bl	801af38 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8019f00:	f002 fb62 	bl	801c5c8 <vPortEnterCritical>
 8019f04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019f06:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8019f0a:	b25b      	sxtb	r3, r3
 8019f0c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8019f10:	d103      	bne.n	8019f1a <xQueueSemaphoreTake+0x142>
 8019f12:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019f14:	2200      	movs	r2, #0
 8019f16:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8019f1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019f1c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8019f20:	b25b      	sxtb	r3, r3
 8019f22:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8019f26:	d103      	bne.n	8019f30 <xQueueSemaphoreTake+0x158>
 8019f28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019f2a:	2200      	movs	r2, #0
 8019f2c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8019f30:	f002 fb7c 	bl	801c62c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8019f34:	463a      	mov	r2, r7
 8019f36:	f107 030c 	add.w	r3, r7, #12
 8019f3a:	4611      	mov	r1, r2
 8019f3c:	4618      	mov	r0, r3
 8019f3e:	f001 faa3 	bl	801b488 <xTaskCheckForTimeOut>
 8019f42:	4603      	mov	r3, r0
 8019f44:	2b00      	cmp	r3, #0
 8019f46:	d132      	bne.n	8019fae <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8019f48:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8019f4a:	f000 f9f5 	bl	801a338 <prvIsQueueEmpty>
 8019f4e:	4603      	mov	r3, r0
 8019f50:	2b00      	cmp	r3, #0
 8019f52:	d026      	beq.n	8019fa2 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8019f54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019f56:	681b      	ldr	r3, [r3, #0]
 8019f58:	2b00      	cmp	r3, #0
 8019f5a:	d109      	bne.n	8019f70 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8019f5c:	f002 fb34 	bl	801c5c8 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8019f60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019f62:	689b      	ldr	r3, [r3, #8]
 8019f64:	4618      	mov	r0, r3
 8019f66:	f001 fbf9 	bl	801b75c <xTaskPriorityInherit>
 8019f6a:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8019f6c:	f002 fb5e 	bl	801c62c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8019f70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019f72:	3324      	adds	r3, #36	@ 0x24
 8019f74:	683a      	ldr	r2, [r7, #0]
 8019f76:	4611      	mov	r1, r2
 8019f78:	4618      	mov	r0, r3
 8019f7a:	f001 f9b9 	bl	801b2f0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8019f7e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8019f80:	f000 f988 	bl	801a294 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8019f84:	f000 ffe6 	bl	801af54 <xTaskResumeAll>
 8019f88:	4603      	mov	r3, r0
 8019f8a:	2b00      	cmp	r3, #0
 8019f8c:	f47f af67 	bne.w	8019e5e <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8019f90:	4b18      	ldr	r3, [pc, #96]	@ (8019ff4 <xQueueSemaphoreTake+0x21c>)
 8019f92:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8019f96:	601a      	str	r2, [r3, #0]
 8019f98:	f3bf 8f4f 	dsb	sy
 8019f9c:	f3bf 8f6f 	isb	sy
 8019fa0:	e75d      	b.n	8019e5e <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8019fa2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8019fa4:	f000 f976 	bl	801a294 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8019fa8:	f000 ffd4 	bl	801af54 <xTaskResumeAll>
 8019fac:	e757      	b.n	8019e5e <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8019fae:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8019fb0:	f000 f970 	bl	801a294 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8019fb4:	f000 ffce 	bl	801af54 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8019fb8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8019fba:	f000 f9bd 	bl	801a338 <prvIsQueueEmpty>
 8019fbe:	4603      	mov	r3, r0
 8019fc0:	2b00      	cmp	r3, #0
 8019fc2:	f43f af4c 	beq.w	8019e5e <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8019fc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019fc8:	2b00      	cmp	r3, #0
 8019fca:	d00d      	beq.n	8019fe8 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8019fcc:	f002 fafc 	bl	801c5c8 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8019fd0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8019fd2:	f000 f8b7 	bl	801a144 <prvGetDisinheritPriorityAfterTimeout>
 8019fd6:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8019fd8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019fda:	689b      	ldr	r3, [r3, #8]
 8019fdc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8019fde:	4618      	mov	r0, r3
 8019fe0:	f001 fc94 	bl	801b90c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8019fe4:	f002 fb22 	bl	801c62c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8019fe8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8019fea:	4618      	mov	r0, r3
 8019fec:	3738      	adds	r7, #56	@ 0x38
 8019fee:	46bd      	mov	sp, r7
 8019ff0:	bd80      	pop	{r7, pc}
 8019ff2:	bf00      	nop
 8019ff4:	e000ed04 	.word	0xe000ed04

08019ff8 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8019ff8:	b580      	push	{r7, lr}
 8019ffa:	b08e      	sub	sp, #56	@ 0x38
 8019ffc:	af00      	add	r7, sp, #0
 8019ffe:	60f8      	str	r0, [r7, #12]
 801a000:	60b9      	str	r1, [r7, #8]
 801a002:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 801a004:	68fb      	ldr	r3, [r7, #12]
 801a006:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 801a008:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a00a:	2b00      	cmp	r3, #0
 801a00c:	d10b      	bne.n	801a026 <xQueueReceiveFromISR+0x2e>
	__asm volatile
 801a00e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801a012:	f383 8811 	msr	BASEPRI, r3
 801a016:	f3bf 8f6f 	isb	sy
 801a01a:	f3bf 8f4f 	dsb	sy
 801a01e:	623b      	str	r3, [r7, #32]
}
 801a020:	bf00      	nop
 801a022:	bf00      	nop
 801a024:	e7fd      	b.n	801a022 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801a026:	68bb      	ldr	r3, [r7, #8]
 801a028:	2b00      	cmp	r3, #0
 801a02a:	d103      	bne.n	801a034 <xQueueReceiveFromISR+0x3c>
 801a02c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a02e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801a030:	2b00      	cmp	r3, #0
 801a032:	d101      	bne.n	801a038 <xQueueReceiveFromISR+0x40>
 801a034:	2301      	movs	r3, #1
 801a036:	e000      	b.n	801a03a <xQueueReceiveFromISR+0x42>
 801a038:	2300      	movs	r3, #0
 801a03a:	2b00      	cmp	r3, #0
 801a03c:	d10b      	bne.n	801a056 <xQueueReceiveFromISR+0x5e>
	__asm volatile
 801a03e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801a042:	f383 8811 	msr	BASEPRI, r3
 801a046:	f3bf 8f6f 	isb	sy
 801a04a:	f3bf 8f4f 	dsb	sy
 801a04e:	61fb      	str	r3, [r7, #28]
}
 801a050:	bf00      	nop
 801a052:	bf00      	nop
 801a054:	e7fd      	b.n	801a052 <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801a056:	f002 fb97 	bl	801c788 <vPortValidateInterruptPriority>
	__asm volatile
 801a05a:	f3ef 8211 	mrs	r2, BASEPRI
 801a05e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801a062:	f383 8811 	msr	BASEPRI, r3
 801a066:	f3bf 8f6f 	isb	sy
 801a06a:	f3bf 8f4f 	dsb	sy
 801a06e:	61ba      	str	r2, [r7, #24]
 801a070:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 801a072:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 801a074:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801a076:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a078:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801a07a:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 801a07c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a07e:	2b00      	cmp	r3, #0
 801a080:	d02f      	beq.n	801a0e2 <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 801a082:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a084:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 801a088:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 801a08c:	68b9      	ldr	r1, [r7, #8]
 801a08e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801a090:	f000 f8da 	bl	801a248 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 801a094:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a096:	1e5a      	subs	r2, r3, #1
 801a098:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a09a:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 801a09c:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 801a0a0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801a0a4:	d112      	bne.n	801a0cc <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801a0a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a0a8:	691b      	ldr	r3, [r3, #16]
 801a0aa:	2b00      	cmp	r3, #0
 801a0ac:	d016      	beq.n	801a0dc <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801a0ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a0b0:	3310      	adds	r3, #16
 801a0b2:	4618      	mov	r0, r3
 801a0b4:	f001 f96e 	bl	801b394 <xTaskRemoveFromEventList>
 801a0b8:	4603      	mov	r3, r0
 801a0ba:	2b00      	cmp	r3, #0
 801a0bc:	d00e      	beq.n	801a0dc <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 801a0be:	687b      	ldr	r3, [r7, #4]
 801a0c0:	2b00      	cmp	r3, #0
 801a0c2:	d00b      	beq.n	801a0dc <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 801a0c4:	687b      	ldr	r3, [r7, #4]
 801a0c6:	2201      	movs	r2, #1
 801a0c8:	601a      	str	r2, [r3, #0]
 801a0ca:	e007      	b.n	801a0dc <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 801a0cc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801a0d0:	3301      	adds	r3, #1
 801a0d2:	b2db      	uxtb	r3, r3
 801a0d4:	b25a      	sxtb	r2, r3
 801a0d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a0d8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 801a0dc:	2301      	movs	r3, #1
 801a0de:	637b      	str	r3, [r7, #52]	@ 0x34
 801a0e0:	e001      	b.n	801a0e6 <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 801a0e2:	2300      	movs	r3, #0
 801a0e4:	637b      	str	r3, [r7, #52]	@ 0x34
 801a0e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a0e8:	613b      	str	r3, [r7, #16]
	__asm volatile
 801a0ea:	693b      	ldr	r3, [r7, #16]
 801a0ec:	f383 8811 	msr	BASEPRI, r3
}
 801a0f0:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 801a0f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 801a0f4:	4618      	mov	r0, r3
 801a0f6:	3738      	adds	r7, #56	@ 0x38
 801a0f8:	46bd      	mov	sp, r7
 801a0fa:	bd80      	pop	{r7, pc}

0801a0fc <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 801a0fc:	b580      	push	{r7, lr}
 801a0fe:	b084      	sub	sp, #16
 801a100:	af00      	add	r7, sp, #0
 801a102:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 801a104:	687b      	ldr	r3, [r7, #4]
 801a106:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 801a108:	68fb      	ldr	r3, [r7, #12]
 801a10a:	2b00      	cmp	r3, #0
 801a10c:	d10b      	bne.n	801a126 <vQueueDelete+0x2a>
	__asm volatile
 801a10e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801a112:	f383 8811 	msr	BASEPRI, r3
 801a116:	f3bf 8f6f 	isb	sy
 801a11a:	f3bf 8f4f 	dsb	sy
 801a11e:	60bb      	str	r3, [r7, #8]
}
 801a120:	bf00      	nop
 801a122:	bf00      	nop
 801a124:	e7fd      	b.n	801a122 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 801a126:	68f8      	ldr	r0, [r7, #12]
 801a128:	f000 f95e 	bl	801a3e8 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 801a12c:	68fb      	ldr	r3, [r7, #12]
 801a12e:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 801a132:	2b00      	cmp	r3, #0
 801a134:	d102      	bne.n	801a13c <vQueueDelete+0x40>
		{
			vPortFree( pxQueue );
 801a136:	68f8      	ldr	r0, [r7, #12]
 801a138:	f002 fc36 	bl	801c9a8 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 801a13c:	bf00      	nop
 801a13e:	3710      	adds	r7, #16
 801a140:	46bd      	mov	sp, r7
 801a142:	bd80      	pop	{r7, pc}

0801a144 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 801a144:	b480      	push	{r7}
 801a146:	b085      	sub	sp, #20
 801a148:	af00      	add	r7, sp, #0
 801a14a:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 801a14c:	687b      	ldr	r3, [r7, #4]
 801a14e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801a150:	2b00      	cmp	r3, #0
 801a152:	d006      	beq.n	801a162 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 801a154:	687b      	ldr	r3, [r7, #4]
 801a156:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801a158:	681b      	ldr	r3, [r3, #0]
 801a15a:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 801a15e:	60fb      	str	r3, [r7, #12]
 801a160:	e001      	b.n	801a166 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 801a162:	2300      	movs	r3, #0
 801a164:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 801a166:	68fb      	ldr	r3, [r7, #12]
	}
 801a168:	4618      	mov	r0, r3
 801a16a:	3714      	adds	r7, #20
 801a16c:	46bd      	mov	sp, r7
 801a16e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a172:	4770      	bx	lr

0801a174 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 801a174:	b580      	push	{r7, lr}
 801a176:	b086      	sub	sp, #24
 801a178:	af00      	add	r7, sp, #0
 801a17a:	60f8      	str	r0, [r7, #12]
 801a17c:	60b9      	str	r1, [r7, #8]
 801a17e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 801a180:	2300      	movs	r3, #0
 801a182:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801a184:	68fb      	ldr	r3, [r7, #12]
 801a186:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801a188:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 801a18a:	68fb      	ldr	r3, [r7, #12]
 801a18c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801a18e:	2b00      	cmp	r3, #0
 801a190:	d10d      	bne.n	801a1ae <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 801a192:	68fb      	ldr	r3, [r7, #12]
 801a194:	681b      	ldr	r3, [r3, #0]
 801a196:	2b00      	cmp	r3, #0
 801a198:	d14d      	bne.n	801a236 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 801a19a:	68fb      	ldr	r3, [r7, #12]
 801a19c:	689b      	ldr	r3, [r3, #8]
 801a19e:	4618      	mov	r0, r3
 801a1a0:	f001 fb44 	bl	801b82c <xTaskPriorityDisinherit>
 801a1a4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 801a1a6:	68fb      	ldr	r3, [r7, #12]
 801a1a8:	2200      	movs	r2, #0
 801a1aa:	609a      	str	r2, [r3, #8]
 801a1ac:	e043      	b.n	801a236 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 801a1ae:	687b      	ldr	r3, [r7, #4]
 801a1b0:	2b00      	cmp	r3, #0
 801a1b2:	d119      	bne.n	801a1e8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 801a1b4:	68fb      	ldr	r3, [r7, #12]
 801a1b6:	6858      	ldr	r0, [r3, #4]
 801a1b8:	68fb      	ldr	r3, [r7, #12]
 801a1ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801a1bc:	461a      	mov	r2, r3
 801a1be:	68b9      	ldr	r1, [r7, #8]
 801a1c0:	f003 fda1 	bl	801dd06 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 801a1c4:	68fb      	ldr	r3, [r7, #12]
 801a1c6:	685a      	ldr	r2, [r3, #4]
 801a1c8:	68fb      	ldr	r3, [r7, #12]
 801a1ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801a1cc:	441a      	add	r2, r3
 801a1ce:	68fb      	ldr	r3, [r7, #12]
 801a1d0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 801a1d2:	68fb      	ldr	r3, [r7, #12]
 801a1d4:	685a      	ldr	r2, [r3, #4]
 801a1d6:	68fb      	ldr	r3, [r7, #12]
 801a1d8:	689b      	ldr	r3, [r3, #8]
 801a1da:	429a      	cmp	r2, r3
 801a1dc:	d32b      	bcc.n	801a236 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 801a1de:	68fb      	ldr	r3, [r7, #12]
 801a1e0:	681a      	ldr	r2, [r3, #0]
 801a1e2:	68fb      	ldr	r3, [r7, #12]
 801a1e4:	605a      	str	r2, [r3, #4]
 801a1e6:	e026      	b.n	801a236 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 801a1e8:	68fb      	ldr	r3, [r7, #12]
 801a1ea:	68d8      	ldr	r0, [r3, #12]
 801a1ec:	68fb      	ldr	r3, [r7, #12]
 801a1ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801a1f0:	461a      	mov	r2, r3
 801a1f2:	68b9      	ldr	r1, [r7, #8]
 801a1f4:	f003 fd87 	bl	801dd06 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 801a1f8:	68fb      	ldr	r3, [r7, #12]
 801a1fa:	68da      	ldr	r2, [r3, #12]
 801a1fc:	68fb      	ldr	r3, [r7, #12]
 801a1fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801a200:	425b      	negs	r3, r3
 801a202:	441a      	add	r2, r3
 801a204:	68fb      	ldr	r3, [r7, #12]
 801a206:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 801a208:	68fb      	ldr	r3, [r7, #12]
 801a20a:	68da      	ldr	r2, [r3, #12]
 801a20c:	68fb      	ldr	r3, [r7, #12]
 801a20e:	681b      	ldr	r3, [r3, #0]
 801a210:	429a      	cmp	r2, r3
 801a212:	d207      	bcs.n	801a224 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 801a214:	68fb      	ldr	r3, [r7, #12]
 801a216:	689a      	ldr	r2, [r3, #8]
 801a218:	68fb      	ldr	r3, [r7, #12]
 801a21a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801a21c:	425b      	negs	r3, r3
 801a21e:	441a      	add	r2, r3
 801a220:	68fb      	ldr	r3, [r7, #12]
 801a222:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 801a224:	687b      	ldr	r3, [r7, #4]
 801a226:	2b02      	cmp	r3, #2
 801a228:	d105      	bne.n	801a236 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 801a22a:	693b      	ldr	r3, [r7, #16]
 801a22c:	2b00      	cmp	r3, #0
 801a22e:	d002      	beq.n	801a236 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 801a230:	693b      	ldr	r3, [r7, #16]
 801a232:	3b01      	subs	r3, #1
 801a234:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 801a236:	693b      	ldr	r3, [r7, #16]
 801a238:	1c5a      	adds	r2, r3, #1
 801a23a:	68fb      	ldr	r3, [r7, #12]
 801a23c:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 801a23e:	697b      	ldr	r3, [r7, #20]
}
 801a240:	4618      	mov	r0, r3
 801a242:	3718      	adds	r7, #24
 801a244:	46bd      	mov	sp, r7
 801a246:	bd80      	pop	{r7, pc}

0801a248 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 801a248:	b580      	push	{r7, lr}
 801a24a:	b082      	sub	sp, #8
 801a24c:	af00      	add	r7, sp, #0
 801a24e:	6078      	str	r0, [r7, #4]
 801a250:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 801a252:	687b      	ldr	r3, [r7, #4]
 801a254:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801a256:	2b00      	cmp	r3, #0
 801a258:	d018      	beq.n	801a28c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 801a25a:	687b      	ldr	r3, [r7, #4]
 801a25c:	68da      	ldr	r2, [r3, #12]
 801a25e:	687b      	ldr	r3, [r7, #4]
 801a260:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801a262:	441a      	add	r2, r3
 801a264:	687b      	ldr	r3, [r7, #4]
 801a266:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 801a268:	687b      	ldr	r3, [r7, #4]
 801a26a:	68da      	ldr	r2, [r3, #12]
 801a26c:	687b      	ldr	r3, [r7, #4]
 801a26e:	689b      	ldr	r3, [r3, #8]
 801a270:	429a      	cmp	r2, r3
 801a272:	d303      	bcc.n	801a27c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 801a274:	687b      	ldr	r3, [r7, #4]
 801a276:	681a      	ldr	r2, [r3, #0]
 801a278:	687b      	ldr	r3, [r7, #4]
 801a27a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 801a27c:	687b      	ldr	r3, [r7, #4]
 801a27e:	68d9      	ldr	r1, [r3, #12]
 801a280:	687b      	ldr	r3, [r7, #4]
 801a282:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801a284:	461a      	mov	r2, r3
 801a286:	6838      	ldr	r0, [r7, #0]
 801a288:	f003 fd3d 	bl	801dd06 <memcpy>
	}
}
 801a28c:	bf00      	nop
 801a28e:	3708      	adds	r7, #8
 801a290:	46bd      	mov	sp, r7
 801a292:	bd80      	pop	{r7, pc}

0801a294 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 801a294:	b580      	push	{r7, lr}
 801a296:	b084      	sub	sp, #16
 801a298:	af00      	add	r7, sp, #0
 801a29a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 801a29c:	f002 f994 	bl	801c5c8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 801a2a0:	687b      	ldr	r3, [r7, #4]
 801a2a2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 801a2a6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 801a2a8:	e011      	b.n	801a2ce <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801a2aa:	687b      	ldr	r3, [r7, #4]
 801a2ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801a2ae:	2b00      	cmp	r3, #0
 801a2b0:	d012      	beq.n	801a2d8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801a2b2:	687b      	ldr	r3, [r7, #4]
 801a2b4:	3324      	adds	r3, #36	@ 0x24
 801a2b6:	4618      	mov	r0, r3
 801a2b8:	f001 f86c 	bl	801b394 <xTaskRemoveFromEventList>
 801a2bc:	4603      	mov	r3, r0
 801a2be:	2b00      	cmp	r3, #0
 801a2c0:	d001      	beq.n	801a2c6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 801a2c2:	f001 f945 	bl	801b550 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 801a2c6:	7bfb      	ldrb	r3, [r7, #15]
 801a2c8:	3b01      	subs	r3, #1
 801a2ca:	b2db      	uxtb	r3, r3
 801a2cc:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 801a2ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801a2d2:	2b00      	cmp	r3, #0
 801a2d4:	dce9      	bgt.n	801a2aa <prvUnlockQueue+0x16>
 801a2d6:	e000      	b.n	801a2da <prvUnlockQueue+0x46>
					break;
 801a2d8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 801a2da:	687b      	ldr	r3, [r7, #4]
 801a2dc:	22ff      	movs	r2, #255	@ 0xff
 801a2de:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 801a2e2:	f002 f9a3 	bl	801c62c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 801a2e6:	f002 f96f 	bl	801c5c8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 801a2ea:	687b      	ldr	r3, [r7, #4]
 801a2ec:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 801a2f0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 801a2f2:	e011      	b.n	801a318 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801a2f4:	687b      	ldr	r3, [r7, #4]
 801a2f6:	691b      	ldr	r3, [r3, #16]
 801a2f8:	2b00      	cmp	r3, #0
 801a2fa:	d012      	beq.n	801a322 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801a2fc:	687b      	ldr	r3, [r7, #4]
 801a2fe:	3310      	adds	r3, #16
 801a300:	4618      	mov	r0, r3
 801a302:	f001 f847 	bl	801b394 <xTaskRemoveFromEventList>
 801a306:	4603      	mov	r3, r0
 801a308:	2b00      	cmp	r3, #0
 801a30a:	d001      	beq.n	801a310 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 801a30c:	f001 f920 	bl	801b550 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 801a310:	7bbb      	ldrb	r3, [r7, #14]
 801a312:	3b01      	subs	r3, #1
 801a314:	b2db      	uxtb	r3, r3
 801a316:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 801a318:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801a31c:	2b00      	cmp	r3, #0
 801a31e:	dce9      	bgt.n	801a2f4 <prvUnlockQueue+0x60>
 801a320:	e000      	b.n	801a324 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 801a322:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 801a324:	687b      	ldr	r3, [r7, #4]
 801a326:	22ff      	movs	r2, #255	@ 0xff
 801a328:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 801a32c:	f002 f97e 	bl	801c62c <vPortExitCritical>
}
 801a330:	bf00      	nop
 801a332:	3710      	adds	r7, #16
 801a334:	46bd      	mov	sp, r7
 801a336:	bd80      	pop	{r7, pc}

0801a338 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 801a338:	b580      	push	{r7, lr}
 801a33a:	b084      	sub	sp, #16
 801a33c:	af00      	add	r7, sp, #0
 801a33e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 801a340:	f002 f942 	bl	801c5c8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 801a344:	687b      	ldr	r3, [r7, #4]
 801a346:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801a348:	2b00      	cmp	r3, #0
 801a34a:	d102      	bne.n	801a352 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 801a34c:	2301      	movs	r3, #1
 801a34e:	60fb      	str	r3, [r7, #12]
 801a350:	e001      	b.n	801a356 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 801a352:	2300      	movs	r3, #0
 801a354:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 801a356:	f002 f969 	bl	801c62c <vPortExitCritical>

	return xReturn;
 801a35a:	68fb      	ldr	r3, [r7, #12]
}
 801a35c:	4618      	mov	r0, r3
 801a35e:	3710      	adds	r7, #16
 801a360:	46bd      	mov	sp, r7
 801a362:	bd80      	pop	{r7, pc}

0801a364 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 801a364:	b580      	push	{r7, lr}
 801a366:	b084      	sub	sp, #16
 801a368:	af00      	add	r7, sp, #0
 801a36a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 801a36c:	f002 f92c 	bl	801c5c8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 801a370:	687b      	ldr	r3, [r7, #4]
 801a372:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801a374:	687b      	ldr	r3, [r7, #4]
 801a376:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801a378:	429a      	cmp	r2, r3
 801a37a:	d102      	bne.n	801a382 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 801a37c:	2301      	movs	r3, #1
 801a37e:	60fb      	str	r3, [r7, #12]
 801a380:	e001      	b.n	801a386 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 801a382:	2300      	movs	r3, #0
 801a384:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 801a386:	f002 f951 	bl	801c62c <vPortExitCritical>

	return xReturn;
 801a38a:	68fb      	ldr	r3, [r7, #12]
}
 801a38c:	4618      	mov	r0, r3
 801a38e:	3710      	adds	r7, #16
 801a390:	46bd      	mov	sp, r7
 801a392:	bd80      	pop	{r7, pc}

0801a394 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 801a394:	b480      	push	{r7}
 801a396:	b085      	sub	sp, #20
 801a398:	af00      	add	r7, sp, #0
 801a39a:	6078      	str	r0, [r7, #4]
 801a39c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 801a39e:	2300      	movs	r3, #0
 801a3a0:	60fb      	str	r3, [r7, #12]
 801a3a2:	e014      	b.n	801a3ce <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 801a3a4:	4a0f      	ldr	r2, [pc, #60]	@ (801a3e4 <vQueueAddToRegistry+0x50>)
 801a3a6:	68fb      	ldr	r3, [r7, #12]
 801a3a8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 801a3ac:	2b00      	cmp	r3, #0
 801a3ae:	d10b      	bne.n	801a3c8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 801a3b0:	490c      	ldr	r1, [pc, #48]	@ (801a3e4 <vQueueAddToRegistry+0x50>)
 801a3b2:	68fb      	ldr	r3, [r7, #12]
 801a3b4:	683a      	ldr	r2, [r7, #0]
 801a3b6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 801a3ba:	4a0a      	ldr	r2, [pc, #40]	@ (801a3e4 <vQueueAddToRegistry+0x50>)
 801a3bc:	68fb      	ldr	r3, [r7, #12]
 801a3be:	00db      	lsls	r3, r3, #3
 801a3c0:	4413      	add	r3, r2
 801a3c2:	687a      	ldr	r2, [r7, #4]
 801a3c4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 801a3c6:	e006      	b.n	801a3d6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 801a3c8:	68fb      	ldr	r3, [r7, #12]
 801a3ca:	3301      	adds	r3, #1
 801a3cc:	60fb      	str	r3, [r7, #12]
 801a3ce:	68fb      	ldr	r3, [r7, #12]
 801a3d0:	2b07      	cmp	r3, #7
 801a3d2:	d9e7      	bls.n	801a3a4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 801a3d4:	bf00      	nop
 801a3d6:	bf00      	nop
 801a3d8:	3714      	adds	r7, #20
 801a3da:	46bd      	mov	sp, r7
 801a3dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a3e0:	4770      	bx	lr
 801a3e2:	bf00      	nop
 801a3e4:	2000bdb0 	.word	0x2000bdb0

0801a3e8 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 801a3e8:	b480      	push	{r7}
 801a3ea:	b085      	sub	sp, #20
 801a3ec:	af00      	add	r7, sp, #0
 801a3ee:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 801a3f0:	2300      	movs	r3, #0
 801a3f2:	60fb      	str	r3, [r7, #12]
 801a3f4:	e016      	b.n	801a424 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 801a3f6:	4a10      	ldr	r2, [pc, #64]	@ (801a438 <vQueueUnregisterQueue+0x50>)
 801a3f8:	68fb      	ldr	r3, [r7, #12]
 801a3fa:	00db      	lsls	r3, r3, #3
 801a3fc:	4413      	add	r3, r2
 801a3fe:	685b      	ldr	r3, [r3, #4]
 801a400:	687a      	ldr	r2, [r7, #4]
 801a402:	429a      	cmp	r2, r3
 801a404:	d10b      	bne.n	801a41e <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 801a406:	4a0c      	ldr	r2, [pc, #48]	@ (801a438 <vQueueUnregisterQueue+0x50>)
 801a408:	68fb      	ldr	r3, [r7, #12]
 801a40a:	2100      	movs	r1, #0
 801a40c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 801a410:	4a09      	ldr	r2, [pc, #36]	@ (801a438 <vQueueUnregisterQueue+0x50>)
 801a412:	68fb      	ldr	r3, [r7, #12]
 801a414:	00db      	lsls	r3, r3, #3
 801a416:	4413      	add	r3, r2
 801a418:	2200      	movs	r2, #0
 801a41a:	605a      	str	r2, [r3, #4]
				break;
 801a41c:	e006      	b.n	801a42c <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 801a41e:	68fb      	ldr	r3, [r7, #12]
 801a420:	3301      	adds	r3, #1
 801a422:	60fb      	str	r3, [r7, #12]
 801a424:	68fb      	ldr	r3, [r7, #12]
 801a426:	2b07      	cmp	r3, #7
 801a428:	d9e5      	bls.n	801a3f6 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 801a42a:	bf00      	nop
 801a42c:	bf00      	nop
 801a42e:	3714      	adds	r7, #20
 801a430:	46bd      	mov	sp, r7
 801a432:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a436:	4770      	bx	lr
 801a438:	2000bdb0 	.word	0x2000bdb0

0801a43c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 801a43c:	b580      	push	{r7, lr}
 801a43e:	b086      	sub	sp, #24
 801a440:	af00      	add	r7, sp, #0
 801a442:	60f8      	str	r0, [r7, #12]
 801a444:	60b9      	str	r1, [r7, #8]
 801a446:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 801a448:	68fb      	ldr	r3, [r7, #12]
 801a44a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 801a44c:	f002 f8bc 	bl	801c5c8 <vPortEnterCritical>
 801a450:	697b      	ldr	r3, [r7, #20]
 801a452:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 801a456:	b25b      	sxtb	r3, r3
 801a458:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801a45c:	d103      	bne.n	801a466 <vQueueWaitForMessageRestricted+0x2a>
 801a45e:	697b      	ldr	r3, [r7, #20]
 801a460:	2200      	movs	r2, #0
 801a462:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 801a466:	697b      	ldr	r3, [r7, #20]
 801a468:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 801a46c:	b25b      	sxtb	r3, r3
 801a46e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801a472:	d103      	bne.n	801a47c <vQueueWaitForMessageRestricted+0x40>
 801a474:	697b      	ldr	r3, [r7, #20]
 801a476:	2200      	movs	r2, #0
 801a478:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 801a47c:	f002 f8d6 	bl	801c62c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 801a480:	697b      	ldr	r3, [r7, #20]
 801a482:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801a484:	2b00      	cmp	r3, #0
 801a486:	d106      	bne.n	801a496 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 801a488:	697b      	ldr	r3, [r7, #20]
 801a48a:	3324      	adds	r3, #36	@ 0x24
 801a48c:	687a      	ldr	r2, [r7, #4]
 801a48e:	68b9      	ldr	r1, [r7, #8]
 801a490:	4618      	mov	r0, r3
 801a492:	f000 ff53 	bl	801b33c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 801a496:	6978      	ldr	r0, [r7, #20]
 801a498:	f7ff fefc 	bl	801a294 <prvUnlockQueue>
	}
 801a49c:	bf00      	nop
 801a49e:	3718      	adds	r7, #24
 801a4a0:	46bd      	mov	sp, r7
 801a4a2:	bd80      	pop	{r7, pc}

0801a4a4 <xStreamBufferGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	StreamBufferHandle_t xStreamBufferGenericCreate( size_t xBufferSizeBytes, size_t xTriggerLevelBytes, BaseType_t xIsMessageBuffer )
	{
 801a4a4:	b580      	push	{r7, lr}
 801a4a6:	b08c      	sub	sp, #48	@ 0x30
 801a4a8:	af02      	add	r7, sp, #8
 801a4aa:	60f8      	str	r0, [r7, #12]
 801a4ac:	60b9      	str	r1, [r7, #8]
 801a4ae:	607a      	str	r2, [r7, #4]

		/* In case the stream buffer is going to be used as a message buffer
		(that is, it will hold discrete messages with a little meta data that
		says how big the next message is) check the buffer will be large enough
		to hold at least one message. */
		if( xIsMessageBuffer == pdTRUE )
 801a4b0:	687b      	ldr	r3, [r7, #4]
 801a4b2:	2b01      	cmp	r3, #1
 801a4b4:	d111      	bne.n	801a4da <xStreamBufferGenericCreate+0x36>
		{
			/* Is a message buffer but not statically allocated. */
			ucFlags = sbFLAGS_IS_MESSAGE_BUFFER;
 801a4b6:	2301      	movs	r3, #1
 801a4b8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			configASSERT( xBufferSizeBytes > sbBYTES_TO_STORE_MESSAGE_LENGTH );
 801a4bc:	68fb      	ldr	r3, [r7, #12]
 801a4be:	2b04      	cmp	r3, #4
 801a4c0:	d81d      	bhi.n	801a4fe <xStreamBufferGenericCreate+0x5a>
	__asm volatile
 801a4c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801a4c6:	f383 8811 	msr	BASEPRI, r3
 801a4ca:	f3bf 8f6f 	isb	sy
 801a4ce:	f3bf 8f4f 	dsb	sy
 801a4d2:	61fb      	str	r3, [r7, #28]
}
 801a4d4:	bf00      	nop
 801a4d6:	bf00      	nop
 801a4d8:	e7fd      	b.n	801a4d6 <xStreamBufferGenericCreate+0x32>
		}
		else
		{
			/* Not a message buffer and not statically allocated. */
			ucFlags = 0;
 801a4da:	2300      	movs	r3, #0
 801a4dc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			configASSERT( xBufferSizeBytes > 0 );
 801a4e0:	68fb      	ldr	r3, [r7, #12]
 801a4e2:	2b00      	cmp	r3, #0
 801a4e4:	d10b      	bne.n	801a4fe <xStreamBufferGenericCreate+0x5a>
	__asm volatile
 801a4e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801a4ea:	f383 8811 	msr	BASEPRI, r3
 801a4ee:	f3bf 8f6f 	isb	sy
 801a4f2:	f3bf 8f4f 	dsb	sy
 801a4f6:	61bb      	str	r3, [r7, #24]
}
 801a4f8:	bf00      	nop
 801a4fa:	bf00      	nop
 801a4fc:	e7fd      	b.n	801a4fa <xStreamBufferGenericCreate+0x56>
		}
		configASSERT( xTriggerLevelBytes <= xBufferSizeBytes );
 801a4fe:	68ba      	ldr	r2, [r7, #8]
 801a500:	68fb      	ldr	r3, [r7, #12]
 801a502:	429a      	cmp	r2, r3
 801a504:	d90b      	bls.n	801a51e <xStreamBufferGenericCreate+0x7a>
	__asm volatile
 801a506:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801a50a:	f383 8811 	msr	BASEPRI, r3
 801a50e:	f3bf 8f6f 	isb	sy
 801a512:	f3bf 8f4f 	dsb	sy
 801a516:	617b      	str	r3, [r7, #20]
}
 801a518:	bf00      	nop
 801a51a:	bf00      	nop
 801a51c:	e7fd      	b.n	801a51a <xStreamBufferGenericCreate+0x76>

		/* A trigger level of 0 would cause a waiting task to unblock even when
		the buffer was empty. */
		if( xTriggerLevelBytes == ( size_t ) 0 )
 801a51e:	68bb      	ldr	r3, [r7, #8]
 801a520:	2b00      	cmp	r3, #0
 801a522:	d101      	bne.n	801a528 <xStreamBufferGenericCreate+0x84>
		{
			xTriggerLevelBytes = ( size_t ) 1;
 801a524:	2301      	movs	r3, #1
 801a526:	60bb      	str	r3, [r7, #8]
		and the buffer follows immediately after.  The requested size is
		incremented so the free space is returned as the user would expect -
		this is a quirk of the implementation that means otherwise the free
		space would be reported as one byte smaller than would be logically
		expected. */
		xBufferSizeBytes++;
 801a528:	68fb      	ldr	r3, [r7, #12]
 801a52a:	3301      	adds	r3, #1
 801a52c:	60fb      	str	r3, [r7, #12]
		pucAllocatedMemory = ( uint8_t * ) pvPortMalloc( xBufferSizeBytes + sizeof( StreamBuffer_t ) ); /*lint !e9079 malloc() only returns void*. */
 801a52e:	68fb      	ldr	r3, [r7, #12]
 801a530:	3324      	adds	r3, #36	@ 0x24
 801a532:	4618      	mov	r0, r3
 801a534:	f002 f96a 	bl	801c80c <pvPortMalloc>
 801a538:	6238      	str	r0, [r7, #32]

		if( pucAllocatedMemory != NULL )
 801a53a:	6a3b      	ldr	r3, [r7, #32]
 801a53c:	2b00      	cmp	r3, #0
 801a53e:	d00a      	beq.n	801a556 <xStreamBufferGenericCreate+0xb2>
		{
			prvInitialiseNewStreamBuffer( ( StreamBuffer_t * ) pucAllocatedMemory, /* Structure at the start of the allocated memory. */ /*lint !e9087 Safe cast as allocated memory is aligned. */ /*lint !e826 Area is not too small and alignment is guaranteed provided malloc() behaves as expected and returns aligned buffer. */
 801a540:	6a3b      	ldr	r3, [r7, #32]
 801a542:	f103 0124 	add.w	r1, r3, #36	@ 0x24
 801a546:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801a54a:	9300      	str	r3, [sp, #0]
 801a54c:	68bb      	ldr	r3, [r7, #8]
 801a54e:	68fa      	ldr	r2, [r7, #12]
 801a550:	6a38      	ldr	r0, [r7, #32]
 801a552:	f000 f97e 	bl	801a852 <prvInitialiseNewStreamBuffer>
		else
		{
			traceSTREAM_BUFFER_CREATE_FAILED( xIsMessageBuffer );
		}

		return ( StreamBufferHandle_t ) pucAllocatedMemory; /*lint !e9087 !e826 Safe cast as allocated memory is aligned. */
 801a556:	6a3b      	ldr	r3, [r7, #32]
	}
 801a558:	4618      	mov	r0, r3
 801a55a:	3728      	adds	r7, #40	@ 0x28
 801a55c:	46bd      	mov	sp, r7
 801a55e:	bd80      	pop	{r7, pc}

0801a560 <xStreamBufferSpacesAvailable>:
	return xReturn;
}
/*-----------------------------------------------------------*/

size_t xStreamBufferSpacesAvailable( StreamBufferHandle_t xStreamBuffer )
{
 801a560:	b480      	push	{r7}
 801a562:	b087      	sub	sp, #28
 801a564:	af00      	add	r7, sp, #0
 801a566:	6078      	str	r0, [r7, #4]
const StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 801a568:	687b      	ldr	r3, [r7, #4]
 801a56a:	613b      	str	r3, [r7, #16]
size_t xSpace;

	configASSERT( pxStreamBuffer );
 801a56c:	693b      	ldr	r3, [r7, #16]
 801a56e:	2b00      	cmp	r3, #0
 801a570:	d10b      	bne.n	801a58a <xStreamBufferSpacesAvailable+0x2a>
	__asm volatile
 801a572:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801a576:	f383 8811 	msr	BASEPRI, r3
 801a57a:	f3bf 8f6f 	isb	sy
 801a57e:	f3bf 8f4f 	dsb	sy
 801a582:	60fb      	str	r3, [r7, #12]
}
 801a584:	bf00      	nop
 801a586:	bf00      	nop
 801a588:	e7fd      	b.n	801a586 <xStreamBufferSpacesAvailable+0x26>

	xSpace = pxStreamBuffer->xLength + pxStreamBuffer->xTail;
 801a58a:	693b      	ldr	r3, [r7, #16]
 801a58c:	689a      	ldr	r2, [r3, #8]
 801a58e:	693b      	ldr	r3, [r7, #16]
 801a590:	681b      	ldr	r3, [r3, #0]
 801a592:	4413      	add	r3, r2
 801a594:	617b      	str	r3, [r7, #20]
	xSpace -= pxStreamBuffer->xHead;
 801a596:	693b      	ldr	r3, [r7, #16]
 801a598:	685b      	ldr	r3, [r3, #4]
 801a59a:	697a      	ldr	r2, [r7, #20]
 801a59c:	1ad3      	subs	r3, r2, r3
 801a59e:	617b      	str	r3, [r7, #20]
	xSpace -= ( size_t ) 1;
 801a5a0:	697b      	ldr	r3, [r7, #20]
 801a5a2:	3b01      	subs	r3, #1
 801a5a4:	617b      	str	r3, [r7, #20]

	if( xSpace >= pxStreamBuffer->xLength )
 801a5a6:	693b      	ldr	r3, [r7, #16]
 801a5a8:	689b      	ldr	r3, [r3, #8]
 801a5aa:	697a      	ldr	r2, [r7, #20]
 801a5ac:	429a      	cmp	r2, r3
 801a5ae:	d304      	bcc.n	801a5ba <xStreamBufferSpacesAvailable+0x5a>
	{
		xSpace -= pxStreamBuffer->xLength;
 801a5b0:	693b      	ldr	r3, [r7, #16]
 801a5b2:	689b      	ldr	r3, [r3, #8]
 801a5b4:	697a      	ldr	r2, [r7, #20]
 801a5b6:	1ad3      	subs	r3, r2, r3
 801a5b8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xSpace;
 801a5ba:	697b      	ldr	r3, [r7, #20]
}
 801a5bc:	4618      	mov	r0, r3
 801a5be:	371c      	adds	r7, #28
 801a5c0:	46bd      	mov	sp, r7
 801a5c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a5c6:	4770      	bx	lr

0801a5c8 <xStreamBufferSendFromISR>:

size_t xStreamBufferSendFromISR( StreamBufferHandle_t xStreamBuffer,
								 const void *pvTxData,
								 size_t xDataLengthBytes,
								 BaseType_t * const pxHigherPriorityTaskWoken )
{
 801a5c8:	b580      	push	{r7, lr}
 801a5ca:	b090      	sub	sp, #64	@ 0x40
 801a5cc:	af02      	add	r7, sp, #8
 801a5ce:	60f8      	str	r0, [r7, #12]
 801a5d0:	60b9      	str	r1, [r7, #8]
 801a5d2:	607a      	str	r2, [r7, #4]
 801a5d4:	603b      	str	r3, [r7, #0]
StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 801a5d6:	68fb      	ldr	r3, [r7, #12]
 801a5d8:	633b      	str	r3, [r7, #48]	@ 0x30
size_t xReturn, xSpace;
size_t xRequiredSpace = xDataLengthBytes;
 801a5da:	687b      	ldr	r3, [r7, #4]
 801a5dc:	637b      	str	r3, [r7, #52]	@ 0x34

	configASSERT( pvTxData );
 801a5de:	68bb      	ldr	r3, [r7, #8]
 801a5e0:	2b00      	cmp	r3, #0
 801a5e2:	d10b      	bne.n	801a5fc <xStreamBufferSendFromISR+0x34>
	__asm volatile
 801a5e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801a5e8:	f383 8811 	msr	BASEPRI, r3
 801a5ec:	f3bf 8f6f 	isb	sy
 801a5f0:	f3bf 8f4f 	dsb	sy
 801a5f4:	623b      	str	r3, [r7, #32]
}
 801a5f6:	bf00      	nop
 801a5f8:	bf00      	nop
 801a5fa:	e7fd      	b.n	801a5f8 <xStreamBufferSendFromISR+0x30>
	configASSERT( pxStreamBuffer );
 801a5fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a5fe:	2b00      	cmp	r3, #0
 801a600:	d10b      	bne.n	801a61a <xStreamBufferSendFromISR+0x52>
	__asm volatile
 801a602:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801a606:	f383 8811 	msr	BASEPRI, r3
 801a60a:	f3bf 8f6f 	isb	sy
 801a60e:	f3bf 8f4f 	dsb	sy
 801a612:	61fb      	str	r3, [r7, #28]
}
 801a614:	bf00      	nop
 801a616:	bf00      	nop
 801a618:	e7fd      	b.n	801a616 <xStreamBufferSendFromISR+0x4e>

	/* This send function is used to write to both message buffers and stream
	buffers.  If this is a message buffer then the space needed must be
	increased by the amount of bytes needed to store the length of the
	message. */
	if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
 801a61a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a61c:	7f1b      	ldrb	r3, [r3, #28]
 801a61e:	f003 0301 	and.w	r3, r3, #1
 801a622:	2b00      	cmp	r3, #0
 801a624:	d002      	beq.n	801a62c <xStreamBufferSendFromISR+0x64>
	{
		xRequiredSpace += sbBYTES_TO_STORE_MESSAGE_LENGTH;
 801a626:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801a628:	3304      	adds	r3, #4
 801a62a:	637b      	str	r3, [r7, #52]	@ 0x34
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
 801a62c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801a62e:	f7ff ff97 	bl	801a560 <xStreamBufferSpacesAvailable>
 801a632:	62f8      	str	r0, [r7, #44]	@ 0x2c
	xReturn = prvWriteMessageToBuffer( pxStreamBuffer, pvTxData, xDataLengthBytes, xSpace, xRequiredSpace );
 801a634:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801a636:	9300      	str	r3, [sp, #0]
 801a638:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a63a:	687a      	ldr	r2, [r7, #4]
 801a63c:	68b9      	ldr	r1, [r7, #8]
 801a63e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801a640:	f000 f835 	bl	801a6ae <prvWriteMessageToBuffer>
 801a644:	62b8      	str	r0, [r7, #40]	@ 0x28

	if( xReturn > ( size_t ) 0 )
 801a646:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a648:	2b00      	cmp	r3, #0
 801a64a:	d02b      	beq.n	801a6a4 <xStreamBufferSendFromISR+0xdc>
	{
		/* Was a task waiting for the data? */
		if( prvBytesInBuffer( pxStreamBuffer ) >= pxStreamBuffer->xTriggerLevelBytes )
 801a64c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801a64e:	f000 f8e0 	bl	801a812 <prvBytesInBuffer>
 801a652:	4602      	mov	r2, r0
 801a654:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a656:	68db      	ldr	r3, [r3, #12]
 801a658:	429a      	cmp	r2, r3
 801a65a:	d323      	bcc.n	801a6a4 <xStreamBufferSendFromISR+0xdc>
	__asm volatile
 801a65c:	f3ef 8211 	mrs	r2, BASEPRI
 801a660:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801a664:	f383 8811 	msr	BASEPRI, r3
 801a668:	f3bf 8f6f 	isb	sy
 801a66c:	f3bf 8f4f 	dsb	sy
 801a670:	61ba      	str	r2, [r7, #24]
 801a672:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 801a674:	69bb      	ldr	r3, [r7, #24]
		{
			sbSEND_COMPLETE_FROM_ISR( pxStreamBuffer, pxHigherPriorityTaskWoken );
 801a676:	627b      	str	r3, [r7, #36]	@ 0x24
 801a678:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a67a:	691b      	ldr	r3, [r3, #16]
 801a67c:	2b00      	cmp	r3, #0
 801a67e:	d00b      	beq.n	801a698 <xStreamBufferSendFromISR+0xd0>
 801a680:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a682:	6918      	ldr	r0, [r3, #16]
 801a684:	683b      	ldr	r3, [r7, #0]
 801a686:	9300      	str	r3, [sp, #0]
 801a688:	2300      	movs	r3, #0
 801a68a:	2200      	movs	r2, #0
 801a68c:	2100      	movs	r1, #0
 801a68e:	f001 f9d5 	bl	801ba3c <xTaskGenericNotifyFromISR>
 801a692:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a694:	2200      	movs	r2, #0
 801a696:	611a      	str	r2, [r3, #16]
 801a698:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a69a:	613b      	str	r3, [r7, #16]
	__asm volatile
 801a69c:	693b      	ldr	r3, [r7, #16]
 801a69e:	f383 8811 	msr	BASEPRI, r3
}
 801a6a2:	bf00      	nop
		mtCOVERAGE_TEST_MARKER();
	}

	traceSTREAM_BUFFER_SEND_FROM_ISR( xStreamBuffer, xReturn );

	return xReturn;
 801a6a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
}
 801a6a6:	4618      	mov	r0, r3
 801a6a8:	3738      	adds	r7, #56	@ 0x38
 801a6aa:	46bd      	mov	sp, r7
 801a6ac:	bd80      	pop	{r7, pc}

0801a6ae <prvWriteMessageToBuffer>:
static size_t prvWriteMessageToBuffer( StreamBuffer_t * const pxStreamBuffer,
									   const void * pvTxData,
									   size_t xDataLengthBytes,
									   size_t xSpace,
									   size_t xRequiredSpace )
{
 801a6ae:	b580      	push	{r7, lr}
 801a6b0:	b086      	sub	sp, #24
 801a6b2:	af00      	add	r7, sp, #0
 801a6b4:	60f8      	str	r0, [r7, #12]
 801a6b6:	60b9      	str	r1, [r7, #8]
 801a6b8:	607a      	str	r2, [r7, #4]
 801a6ba:	603b      	str	r3, [r7, #0]
	BaseType_t xShouldWrite;
	size_t xReturn;

	if( xSpace == ( size_t ) 0 )
 801a6bc:	683b      	ldr	r3, [r7, #0]
 801a6be:	2b00      	cmp	r3, #0
 801a6c0:	d102      	bne.n	801a6c8 <prvWriteMessageToBuffer+0x1a>
	{
		/* Doesn't matter if this is a stream buffer or a message buffer, there
		is no space to write. */
		xShouldWrite = pdFALSE;
 801a6c2:	2300      	movs	r3, #0
 801a6c4:	617b      	str	r3, [r7, #20]
 801a6c6:	e01d      	b.n	801a704 <prvWriteMessageToBuffer+0x56>
	}
	else if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) == ( uint8_t ) 0 )
 801a6c8:	68fb      	ldr	r3, [r7, #12]
 801a6ca:	7f1b      	ldrb	r3, [r3, #28]
 801a6cc:	f003 0301 	and.w	r3, r3, #1
 801a6d0:	2b00      	cmp	r3, #0
 801a6d2:	d108      	bne.n	801a6e6 <prvWriteMessageToBuffer+0x38>
	{
		/* This is a stream buffer, as opposed to a message buffer, so writing a
		stream of bytes rather than discrete messages.  Write as many bytes as
		possible. */
		xShouldWrite = pdTRUE;
 801a6d4:	2301      	movs	r3, #1
 801a6d6:	617b      	str	r3, [r7, #20]
		xDataLengthBytes = configMIN( xDataLengthBytes, xSpace );
 801a6d8:	687a      	ldr	r2, [r7, #4]
 801a6da:	683b      	ldr	r3, [r7, #0]
 801a6dc:	4293      	cmp	r3, r2
 801a6de:	bf28      	it	cs
 801a6e0:	4613      	movcs	r3, r2
 801a6e2:	607b      	str	r3, [r7, #4]
 801a6e4:	e00e      	b.n	801a704 <prvWriteMessageToBuffer+0x56>
	}
	else if( xSpace >= xRequiredSpace )
 801a6e6:	683a      	ldr	r2, [r7, #0]
 801a6e8:	6a3b      	ldr	r3, [r7, #32]
 801a6ea:	429a      	cmp	r2, r3
 801a6ec:	d308      	bcc.n	801a700 <prvWriteMessageToBuffer+0x52>
	{
		/* This is a message buffer, as opposed to a stream buffer, and there
		is enough space to write both the message length and the message itself
		into the buffer.  Start by writing the length of the data, the data
		itself will be written later in this function. */
		xShouldWrite = pdTRUE;
 801a6ee:	2301      	movs	r3, #1
 801a6f0:	617b      	str	r3, [r7, #20]
		( void ) prvWriteBytesToBuffer( pxStreamBuffer, ( const uint8_t * ) &( xDataLengthBytes ), sbBYTES_TO_STORE_MESSAGE_LENGTH );
 801a6f2:	1d3b      	adds	r3, r7, #4
 801a6f4:	2204      	movs	r2, #4
 801a6f6:	4619      	mov	r1, r3
 801a6f8:	68f8      	ldr	r0, [r7, #12]
 801a6fa:	f000 f815 	bl	801a728 <prvWriteBytesToBuffer>
 801a6fe:	e001      	b.n	801a704 <prvWriteMessageToBuffer+0x56>
	}
	else
	{
		/* There is space available, but not enough space. */
		xShouldWrite = pdFALSE;
 801a700:	2300      	movs	r3, #0
 801a702:	617b      	str	r3, [r7, #20]
	}

	if( xShouldWrite != pdFALSE )
 801a704:	697b      	ldr	r3, [r7, #20]
 801a706:	2b00      	cmp	r3, #0
 801a708:	d007      	beq.n	801a71a <prvWriteMessageToBuffer+0x6c>
	{
		/* Writes the data itself. */
		xReturn = prvWriteBytesToBuffer( pxStreamBuffer, ( const uint8_t * ) pvTxData, xDataLengthBytes ); /*lint !e9079 Storage buffer is implemented as uint8_t for ease of sizing, alighment and access. */
 801a70a:	687b      	ldr	r3, [r7, #4]
 801a70c:	461a      	mov	r2, r3
 801a70e:	68b9      	ldr	r1, [r7, #8]
 801a710:	68f8      	ldr	r0, [r7, #12]
 801a712:	f000 f809 	bl	801a728 <prvWriteBytesToBuffer>
 801a716:	6138      	str	r0, [r7, #16]
 801a718:	e001      	b.n	801a71e <prvWriteMessageToBuffer+0x70>
	}
	else
	{
		xReturn = 0;
 801a71a:	2300      	movs	r3, #0
 801a71c:	613b      	str	r3, [r7, #16]
	}

	return xReturn;
 801a71e:	693b      	ldr	r3, [r7, #16]
}
 801a720:	4618      	mov	r0, r3
 801a722:	3718      	adds	r7, #24
 801a724:	46bd      	mov	sp, r7
 801a726:	bd80      	pop	{r7, pc}

0801a728 <prvWriteBytesToBuffer>:
	return xReturn;
}
/*-----------------------------------------------------------*/

static size_t prvWriteBytesToBuffer( StreamBuffer_t * const pxStreamBuffer, const uint8_t *pucData, size_t xCount )
{
 801a728:	b580      	push	{r7, lr}
 801a72a:	b08a      	sub	sp, #40	@ 0x28
 801a72c:	af00      	add	r7, sp, #0
 801a72e:	60f8      	str	r0, [r7, #12]
 801a730:	60b9      	str	r1, [r7, #8]
 801a732:	607a      	str	r2, [r7, #4]
size_t xNextHead, xFirstLength;

	configASSERT( xCount > ( size_t ) 0 );
 801a734:	687b      	ldr	r3, [r7, #4]
 801a736:	2b00      	cmp	r3, #0
 801a738:	d10b      	bne.n	801a752 <prvWriteBytesToBuffer+0x2a>
	__asm volatile
 801a73a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801a73e:	f383 8811 	msr	BASEPRI, r3
 801a742:	f3bf 8f6f 	isb	sy
 801a746:	f3bf 8f4f 	dsb	sy
 801a74a:	61fb      	str	r3, [r7, #28]
}
 801a74c:	bf00      	nop
 801a74e:	bf00      	nop
 801a750:	e7fd      	b.n	801a74e <prvWriteBytesToBuffer+0x26>

	xNextHead = pxStreamBuffer->xHead;
 801a752:	68fb      	ldr	r3, [r7, #12]
 801a754:	685b      	ldr	r3, [r3, #4]
 801a756:	627b      	str	r3, [r7, #36]	@ 0x24

	/* Calculate the number of bytes that can be added in the first write -
	which may be less than the total number of bytes that need to be added if
	the buffer will wrap back to the beginning. */
	xFirstLength = configMIN( pxStreamBuffer->xLength - xNextHead, xCount );
 801a758:	68fb      	ldr	r3, [r7, #12]
 801a75a:	689a      	ldr	r2, [r3, #8]
 801a75c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a75e:	1ad3      	subs	r3, r2, r3
 801a760:	687a      	ldr	r2, [r7, #4]
 801a762:	4293      	cmp	r3, r2
 801a764:	bf28      	it	cs
 801a766:	4613      	movcs	r3, r2
 801a768:	623b      	str	r3, [r7, #32]

	/* Write as many bytes as can be written in the first write. */
	configASSERT( ( xNextHead + xFirstLength ) <= pxStreamBuffer->xLength );
 801a76a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801a76c:	6a3b      	ldr	r3, [r7, #32]
 801a76e:	441a      	add	r2, r3
 801a770:	68fb      	ldr	r3, [r7, #12]
 801a772:	689b      	ldr	r3, [r3, #8]
 801a774:	429a      	cmp	r2, r3
 801a776:	d90b      	bls.n	801a790 <prvWriteBytesToBuffer+0x68>
	__asm volatile
 801a778:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801a77c:	f383 8811 	msr	BASEPRI, r3
 801a780:	f3bf 8f6f 	isb	sy
 801a784:	f3bf 8f4f 	dsb	sy
 801a788:	61bb      	str	r3, [r7, #24]
}
 801a78a:	bf00      	nop
 801a78c:	bf00      	nop
 801a78e:	e7fd      	b.n	801a78c <prvWriteBytesToBuffer+0x64>
	( void ) memcpy( ( void* ) ( &( pxStreamBuffer->pucBuffer[ xNextHead ] ) ), ( const void * ) pucData, xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 801a790:	68fb      	ldr	r3, [r7, #12]
 801a792:	699a      	ldr	r2, [r3, #24]
 801a794:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a796:	4413      	add	r3, r2
 801a798:	6a3a      	ldr	r2, [r7, #32]
 801a79a:	68b9      	ldr	r1, [r7, #8]
 801a79c:	4618      	mov	r0, r3
 801a79e:	f003 fab2 	bl	801dd06 <memcpy>

	/* If the number of bytes written was less than the number that could be
	written in the first write... */
	if( xCount > xFirstLength )
 801a7a2:	687a      	ldr	r2, [r7, #4]
 801a7a4:	6a3b      	ldr	r3, [r7, #32]
 801a7a6:	429a      	cmp	r2, r3
 801a7a8:	d91d      	bls.n	801a7e6 <prvWriteBytesToBuffer+0xbe>
	{
		/* ...then write the remaining bytes to the start of the buffer. */
		configASSERT( ( xCount - xFirstLength ) <= pxStreamBuffer->xLength );
 801a7aa:	687a      	ldr	r2, [r7, #4]
 801a7ac:	6a3b      	ldr	r3, [r7, #32]
 801a7ae:	1ad2      	subs	r2, r2, r3
 801a7b0:	68fb      	ldr	r3, [r7, #12]
 801a7b2:	689b      	ldr	r3, [r3, #8]
 801a7b4:	429a      	cmp	r2, r3
 801a7b6:	d90b      	bls.n	801a7d0 <prvWriteBytesToBuffer+0xa8>
	__asm volatile
 801a7b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801a7bc:	f383 8811 	msr	BASEPRI, r3
 801a7c0:	f3bf 8f6f 	isb	sy
 801a7c4:	f3bf 8f4f 	dsb	sy
 801a7c8:	617b      	str	r3, [r7, #20]
}
 801a7ca:	bf00      	nop
 801a7cc:	bf00      	nop
 801a7ce:	e7fd      	b.n	801a7cc <prvWriteBytesToBuffer+0xa4>
		( void ) memcpy( ( void * ) pxStreamBuffer->pucBuffer, ( const void * ) &( pucData[ xFirstLength ] ), xCount - xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 801a7d0:	68fb      	ldr	r3, [r7, #12]
 801a7d2:	6998      	ldr	r0, [r3, #24]
 801a7d4:	68ba      	ldr	r2, [r7, #8]
 801a7d6:	6a3b      	ldr	r3, [r7, #32]
 801a7d8:	18d1      	adds	r1, r2, r3
 801a7da:	687a      	ldr	r2, [r7, #4]
 801a7dc:	6a3b      	ldr	r3, [r7, #32]
 801a7de:	1ad3      	subs	r3, r2, r3
 801a7e0:	461a      	mov	r2, r3
 801a7e2:	f003 fa90 	bl	801dd06 <memcpy>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	xNextHead += xCount;
 801a7e6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801a7e8:	687b      	ldr	r3, [r7, #4]
 801a7ea:	4413      	add	r3, r2
 801a7ec:	627b      	str	r3, [r7, #36]	@ 0x24
	if( xNextHead >= pxStreamBuffer->xLength )
 801a7ee:	68fb      	ldr	r3, [r7, #12]
 801a7f0:	689b      	ldr	r3, [r3, #8]
 801a7f2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801a7f4:	429a      	cmp	r2, r3
 801a7f6:	d304      	bcc.n	801a802 <prvWriteBytesToBuffer+0xda>
	{
		xNextHead -= pxStreamBuffer->xLength;
 801a7f8:	68fb      	ldr	r3, [r7, #12]
 801a7fa:	689b      	ldr	r3, [r3, #8]
 801a7fc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801a7fe:	1ad3      	subs	r3, r2, r3
 801a800:	627b      	str	r3, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxStreamBuffer->xHead = xNextHead;
 801a802:	68fb      	ldr	r3, [r7, #12]
 801a804:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801a806:	605a      	str	r2, [r3, #4]

	return xCount;
 801a808:	687b      	ldr	r3, [r7, #4]
}
 801a80a:	4618      	mov	r0, r3
 801a80c:	3728      	adds	r7, #40	@ 0x28
 801a80e:	46bd      	mov	sp, r7
 801a810:	bd80      	pop	{r7, pc}

0801a812 <prvBytesInBuffer>:
	return xCount;
}
/*-----------------------------------------------------------*/

static size_t prvBytesInBuffer( const StreamBuffer_t * const pxStreamBuffer )
{
 801a812:	b480      	push	{r7}
 801a814:	b085      	sub	sp, #20
 801a816:	af00      	add	r7, sp, #0
 801a818:	6078      	str	r0, [r7, #4]
/* Returns the distance between xTail and xHead. */
size_t xCount;

	xCount = pxStreamBuffer->xLength + pxStreamBuffer->xHead;
 801a81a:	687b      	ldr	r3, [r7, #4]
 801a81c:	689a      	ldr	r2, [r3, #8]
 801a81e:	687b      	ldr	r3, [r7, #4]
 801a820:	685b      	ldr	r3, [r3, #4]
 801a822:	4413      	add	r3, r2
 801a824:	60fb      	str	r3, [r7, #12]
	xCount -= pxStreamBuffer->xTail;
 801a826:	687b      	ldr	r3, [r7, #4]
 801a828:	681b      	ldr	r3, [r3, #0]
 801a82a:	68fa      	ldr	r2, [r7, #12]
 801a82c:	1ad3      	subs	r3, r2, r3
 801a82e:	60fb      	str	r3, [r7, #12]
	if ( xCount >= pxStreamBuffer->xLength )
 801a830:	687b      	ldr	r3, [r7, #4]
 801a832:	689b      	ldr	r3, [r3, #8]
 801a834:	68fa      	ldr	r2, [r7, #12]
 801a836:	429a      	cmp	r2, r3
 801a838:	d304      	bcc.n	801a844 <prvBytesInBuffer+0x32>
	{
		xCount -= pxStreamBuffer->xLength;
 801a83a:	687b      	ldr	r3, [r7, #4]
 801a83c:	689b      	ldr	r3, [r3, #8]
 801a83e:	68fa      	ldr	r2, [r7, #12]
 801a840:	1ad3      	subs	r3, r2, r3
 801a842:	60fb      	str	r3, [r7, #12]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xCount;
 801a844:	68fb      	ldr	r3, [r7, #12]
}
 801a846:	4618      	mov	r0, r3
 801a848:	3714      	adds	r7, #20
 801a84a:	46bd      	mov	sp, r7
 801a84c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a850:	4770      	bx	lr

0801a852 <prvInitialiseNewStreamBuffer>:
static void prvInitialiseNewStreamBuffer( StreamBuffer_t * const pxStreamBuffer,
										  uint8_t * const pucBuffer,
										  size_t xBufferSizeBytes,
										  size_t xTriggerLevelBytes,
										  uint8_t ucFlags )
{
 801a852:	b580      	push	{r7, lr}
 801a854:	b086      	sub	sp, #24
 801a856:	af00      	add	r7, sp, #0
 801a858:	60f8      	str	r0, [r7, #12]
 801a85a:	60b9      	str	r1, [r7, #8]
 801a85c:	607a      	str	r2, [r7, #4]
 801a85e:	603b      	str	r3, [r7, #0]
	#if( configASSERT_DEFINED == 1 )
	{
		/* The value written just has to be identifiable when looking at the
		memory.  Don't use 0xA5 as that is the stack fill value and could
		result in confusion as to what is actually being observed. */
		const BaseType_t xWriteValue = 0x55;
 801a860:	2355      	movs	r3, #85	@ 0x55
 801a862:	617b      	str	r3, [r7, #20]
		configASSERT( memset( pucBuffer, ( int ) xWriteValue, xBufferSizeBytes ) == pucBuffer );
 801a864:	687a      	ldr	r2, [r7, #4]
 801a866:	6979      	ldr	r1, [r7, #20]
 801a868:	68b8      	ldr	r0, [r7, #8]
 801a86a:	f003 f968 	bl	801db3e <memset>
 801a86e:	4602      	mov	r2, r0
 801a870:	68bb      	ldr	r3, [r7, #8]
 801a872:	4293      	cmp	r3, r2
 801a874:	d00b      	beq.n	801a88e <prvInitialiseNewStreamBuffer+0x3c>
	__asm volatile
 801a876:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801a87a:	f383 8811 	msr	BASEPRI, r3
 801a87e:	f3bf 8f6f 	isb	sy
 801a882:	f3bf 8f4f 	dsb	sy
 801a886:	613b      	str	r3, [r7, #16]
}
 801a888:	bf00      	nop
 801a88a:	bf00      	nop
 801a88c:	e7fd      	b.n	801a88a <prvInitialiseNewStreamBuffer+0x38>
	} /*lint !e529 !e438 xWriteValue is only used if configASSERT() is defined. */
	#endif

	( void ) memset( ( void * ) pxStreamBuffer, 0x00, sizeof( StreamBuffer_t ) ); /*lint !e9087 memset() requires void *. */
 801a88e:	2224      	movs	r2, #36	@ 0x24
 801a890:	2100      	movs	r1, #0
 801a892:	68f8      	ldr	r0, [r7, #12]
 801a894:	f003 f953 	bl	801db3e <memset>
	pxStreamBuffer->pucBuffer = pucBuffer;
 801a898:	68fb      	ldr	r3, [r7, #12]
 801a89a:	68ba      	ldr	r2, [r7, #8]
 801a89c:	619a      	str	r2, [r3, #24]
	pxStreamBuffer->xLength = xBufferSizeBytes;
 801a89e:	68fb      	ldr	r3, [r7, #12]
 801a8a0:	687a      	ldr	r2, [r7, #4]
 801a8a2:	609a      	str	r2, [r3, #8]
	pxStreamBuffer->xTriggerLevelBytes = xTriggerLevelBytes;
 801a8a4:	68fb      	ldr	r3, [r7, #12]
 801a8a6:	683a      	ldr	r2, [r7, #0]
 801a8a8:	60da      	str	r2, [r3, #12]
	pxStreamBuffer->ucFlags = ucFlags;
 801a8aa:	68fb      	ldr	r3, [r7, #12]
 801a8ac:	f897 2020 	ldrb.w	r2, [r7, #32]
 801a8b0:	771a      	strb	r2, [r3, #28]
}
 801a8b2:	bf00      	nop
 801a8b4:	3718      	adds	r7, #24
 801a8b6:	46bd      	mov	sp, r7
 801a8b8:	bd80      	pop	{r7, pc}

0801a8ba <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 801a8ba:	b580      	push	{r7, lr}
 801a8bc:	b08e      	sub	sp, #56	@ 0x38
 801a8be:	af04      	add	r7, sp, #16
 801a8c0:	60f8      	str	r0, [r7, #12]
 801a8c2:	60b9      	str	r1, [r7, #8]
 801a8c4:	607a      	str	r2, [r7, #4]
 801a8c6:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 801a8c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801a8ca:	2b00      	cmp	r3, #0
 801a8cc:	d10b      	bne.n	801a8e6 <xTaskCreateStatic+0x2c>
	__asm volatile
 801a8ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801a8d2:	f383 8811 	msr	BASEPRI, r3
 801a8d6:	f3bf 8f6f 	isb	sy
 801a8da:	f3bf 8f4f 	dsb	sy
 801a8de:	623b      	str	r3, [r7, #32]
}
 801a8e0:	bf00      	nop
 801a8e2:	bf00      	nop
 801a8e4:	e7fd      	b.n	801a8e2 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 801a8e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801a8e8:	2b00      	cmp	r3, #0
 801a8ea:	d10b      	bne.n	801a904 <xTaskCreateStatic+0x4a>
	__asm volatile
 801a8ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801a8f0:	f383 8811 	msr	BASEPRI, r3
 801a8f4:	f3bf 8f6f 	isb	sy
 801a8f8:	f3bf 8f4f 	dsb	sy
 801a8fc:	61fb      	str	r3, [r7, #28]
}
 801a8fe:	bf00      	nop
 801a900:	bf00      	nop
 801a902:	e7fd      	b.n	801a900 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 801a904:	23a8      	movs	r3, #168	@ 0xa8
 801a906:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 801a908:	693b      	ldr	r3, [r7, #16]
 801a90a:	2ba8      	cmp	r3, #168	@ 0xa8
 801a90c:	d00b      	beq.n	801a926 <xTaskCreateStatic+0x6c>
	__asm volatile
 801a90e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801a912:	f383 8811 	msr	BASEPRI, r3
 801a916:	f3bf 8f6f 	isb	sy
 801a91a:	f3bf 8f4f 	dsb	sy
 801a91e:	61bb      	str	r3, [r7, #24]
}
 801a920:	bf00      	nop
 801a922:	bf00      	nop
 801a924:	e7fd      	b.n	801a922 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 801a926:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 801a928:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801a92a:	2b00      	cmp	r3, #0
 801a92c:	d01e      	beq.n	801a96c <xTaskCreateStatic+0xb2>
 801a92e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801a930:	2b00      	cmp	r3, #0
 801a932:	d01b      	beq.n	801a96c <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 801a934:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801a936:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 801a938:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a93a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801a93c:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 801a93e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a940:	2202      	movs	r2, #2
 801a942:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 801a946:	2300      	movs	r3, #0
 801a948:	9303      	str	r3, [sp, #12]
 801a94a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a94c:	9302      	str	r3, [sp, #8]
 801a94e:	f107 0314 	add.w	r3, r7, #20
 801a952:	9301      	str	r3, [sp, #4]
 801a954:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a956:	9300      	str	r3, [sp, #0]
 801a958:	683b      	ldr	r3, [r7, #0]
 801a95a:	687a      	ldr	r2, [r7, #4]
 801a95c:	68b9      	ldr	r1, [r7, #8]
 801a95e:	68f8      	ldr	r0, [r7, #12]
 801a960:	f000 f850 	bl	801aa04 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 801a964:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801a966:	f000 f8f5 	bl	801ab54 <prvAddNewTaskToReadyList>
 801a96a:	e001      	b.n	801a970 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 801a96c:	2300      	movs	r3, #0
 801a96e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 801a970:	697b      	ldr	r3, [r7, #20]
	}
 801a972:	4618      	mov	r0, r3
 801a974:	3728      	adds	r7, #40	@ 0x28
 801a976:	46bd      	mov	sp, r7
 801a978:	bd80      	pop	{r7, pc}

0801a97a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 801a97a:	b580      	push	{r7, lr}
 801a97c:	b08c      	sub	sp, #48	@ 0x30
 801a97e:	af04      	add	r7, sp, #16
 801a980:	60f8      	str	r0, [r7, #12]
 801a982:	60b9      	str	r1, [r7, #8]
 801a984:	603b      	str	r3, [r7, #0]
 801a986:	4613      	mov	r3, r2
 801a988:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 801a98a:	88fb      	ldrh	r3, [r7, #6]
 801a98c:	009b      	lsls	r3, r3, #2
 801a98e:	4618      	mov	r0, r3
 801a990:	f001 ff3c 	bl	801c80c <pvPortMalloc>
 801a994:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 801a996:	697b      	ldr	r3, [r7, #20]
 801a998:	2b00      	cmp	r3, #0
 801a99a:	d00e      	beq.n	801a9ba <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 801a99c:	20a8      	movs	r0, #168	@ 0xa8
 801a99e:	f001 ff35 	bl	801c80c <pvPortMalloc>
 801a9a2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 801a9a4:	69fb      	ldr	r3, [r7, #28]
 801a9a6:	2b00      	cmp	r3, #0
 801a9a8:	d003      	beq.n	801a9b2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 801a9aa:	69fb      	ldr	r3, [r7, #28]
 801a9ac:	697a      	ldr	r2, [r7, #20]
 801a9ae:	631a      	str	r2, [r3, #48]	@ 0x30
 801a9b0:	e005      	b.n	801a9be <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 801a9b2:	6978      	ldr	r0, [r7, #20]
 801a9b4:	f001 fff8 	bl	801c9a8 <vPortFree>
 801a9b8:	e001      	b.n	801a9be <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 801a9ba:	2300      	movs	r3, #0
 801a9bc:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 801a9be:	69fb      	ldr	r3, [r7, #28]
 801a9c0:	2b00      	cmp	r3, #0
 801a9c2:	d017      	beq.n	801a9f4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 801a9c4:	69fb      	ldr	r3, [r7, #28]
 801a9c6:	2200      	movs	r2, #0
 801a9c8:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 801a9cc:	88fa      	ldrh	r2, [r7, #6]
 801a9ce:	2300      	movs	r3, #0
 801a9d0:	9303      	str	r3, [sp, #12]
 801a9d2:	69fb      	ldr	r3, [r7, #28]
 801a9d4:	9302      	str	r3, [sp, #8]
 801a9d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a9d8:	9301      	str	r3, [sp, #4]
 801a9da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a9dc:	9300      	str	r3, [sp, #0]
 801a9de:	683b      	ldr	r3, [r7, #0]
 801a9e0:	68b9      	ldr	r1, [r7, #8]
 801a9e2:	68f8      	ldr	r0, [r7, #12]
 801a9e4:	f000 f80e 	bl	801aa04 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 801a9e8:	69f8      	ldr	r0, [r7, #28]
 801a9ea:	f000 f8b3 	bl	801ab54 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 801a9ee:	2301      	movs	r3, #1
 801a9f0:	61bb      	str	r3, [r7, #24]
 801a9f2:	e002      	b.n	801a9fa <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 801a9f4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801a9f8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 801a9fa:	69bb      	ldr	r3, [r7, #24]
	}
 801a9fc:	4618      	mov	r0, r3
 801a9fe:	3720      	adds	r7, #32
 801aa00:	46bd      	mov	sp, r7
 801aa02:	bd80      	pop	{r7, pc}

0801aa04 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 801aa04:	b580      	push	{r7, lr}
 801aa06:	b088      	sub	sp, #32
 801aa08:	af00      	add	r7, sp, #0
 801aa0a:	60f8      	str	r0, [r7, #12]
 801aa0c:	60b9      	str	r1, [r7, #8]
 801aa0e:	607a      	str	r2, [r7, #4]
 801aa10:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 801aa12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801aa14:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 801aa16:	687b      	ldr	r3, [r7, #4]
 801aa18:	009b      	lsls	r3, r3, #2
 801aa1a:	461a      	mov	r2, r3
 801aa1c:	21a5      	movs	r1, #165	@ 0xa5
 801aa1e:	f003 f88e 	bl	801db3e <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 801aa22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801aa24:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 801aa26:	687b      	ldr	r3, [r7, #4]
 801aa28:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 801aa2c:	3b01      	subs	r3, #1
 801aa2e:	009b      	lsls	r3, r3, #2
 801aa30:	4413      	add	r3, r2
 801aa32:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 801aa34:	69bb      	ldr	r3, [r7, #24]
 801aa36:	f023 0307 	bic.w	r3, r3, #7
 801aa3a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 801aa3c:	69bb      	ldr	r3, [r7, #24]
 801aa3e:	f003 0307 	and.w	r3, r3, #7
 801aa42:	2b00      	cmp	r3, #0
 801aa44:	d00b      	beq.n	801aa5e <prvInitialiseNewTask+0x5a>
	__asm volatile
 801aa46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801aa4a:	f383 8811 	msr	BASEPRI, r3
 801aa4e:	f3bf 8f6f 	isb	sy
 801aa52:	f3bf 8f4f 	dsb	sy
 801aa56:	617b      	str	r3, [r7, #20]
}
 801aa58:	bf00      	nop
 801aa5a:	bf00      	nop
 801aa5c:	e7fd      	b.n	801aa5a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 801aa5e:	68bb      	ldr	r3, [r7, #8]
 801aa60:	2b00      	cmp	r3, #0
 801aa62:	d01f      	beq.n	801aaa4 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 801aa64:	2300      	movs	r3, #0
 801aa66:	61fb      	str	r3, [r7, #28]
 801aa68:	e012      	b.n	801aa90 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 801aa6a:	68ba      	ldr	r2, [r7, #8]
 801aa6c:	69fb      	ldr	r3, [r7, #28]
 801aa6e:	4413      	add	r3, r2
 801aa70:	7819      	ldrb	r1, [r3, #0]
 801aa72:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801aa74:	69fb      	ldr	r3, [r7, #28]
 801aa76:	4413      	add	r3, r2
 801aa78:	3334      	adds	r3, #52	@ 0x34
 801aa7a:	460a      	mov	r2, r1
 801aa7c:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 801aa7e:	68ba      	ldr	r2, [r7, #8]
 801aa80:	69fb      	ldr	r3, [r7, #28]
 801aa82:	4413      	add	r3, r2
 801aa84:	781b      	ldrb	r3, [r3, #0]
 801aa86:	2b00      	cmp	r3, #0
 801aa88:	d006      	beq.n	801aa98 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 801aa8a:	69fb      	ldr	r3, [r7, #28]
 801aa8c:	3301      	adds	r3, #1
 801aa8e:	61fb      	str	r3, [r7, #28]
 801aa90:	69fb      	ldr	r3, [r7, #28]
 801aa92:	2b0f      	cmp	r3, #15
 801aa94:	d9e9      	bls.n	801aa6a <prvInitialiseNewTask+0x66>
 801aa96:	e000      	b.n	801aa9a <prvInitialiseNewTask+0x96>
			{
				break;
 801aa98:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 801aa9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801aa9c:	2200      	movs	r2, #0
 801aa9e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 801aaa2:	e003      	b.n	801aaac <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 801aaa4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801aaa6:	2200      	movs	r2, #0
 801aaa8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 801aaac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801aaae:	2b37      	cmp	r3, #55	@ 0x37
 801aab0:	d901      	bls.n	801aab6 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 801aab2:	2337      	movs	r3, #55	@ 0x37
 801aab4:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 801aab6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801aab8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801aaba:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 801aabc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801aabe:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801aac0:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 801aac2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801aac4:	2200      	movs	r2, #0
 801aac6:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 801aac8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801aaca:	3304      	adds	r3, #4
 801aacc:	4618      	mov	r0, r3
 801aace:	f7fe fc29 	bl	8019324 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 801aad2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801aad4:	3318      	adds	r3, #24
 801aad6:	4618      	mov	r0, r3
 801aad8:	f7fe fc24 	bl	8019324 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 801aadc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801aade:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801aae0:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801aae2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801aae4:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 801aae8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801aaea:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 801aaec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801aaee:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801aaf0:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 801aaf2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801aaf4:	2200      	movs	r2, #0
 801aaf6:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 801aafa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801aafc:	2200      	movs	r2, #0
 801aafe:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 801ab02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801ab04:	3354      	adds	r3, #84	@ 0x54
 801ab06:	224c      	movs	r2, #76	@ 0x4c
 801ab08:	2100      	movs	r1, #0
 801ab0a:	4618      	mov	r0, r3
 801ab0c:	f003 f817 	bl	801db3e <memset>
 801ab10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801ab12:	4a0d      	ldr	r2, [pc, #52]	@ (801ab48 <prvInitialiseNewTask+0x144>)
 801ab14:	659a      	str	r2, [r3, #88]	@ 0x58
 801ab16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801ab18:	4a0c      	ldr	r2, [pc, #48]	@ (801ab4c <prvInitialiseNewTask+0x148>)
 801ab1a:	65da      	str	r2, [r3, #92]	@ 0x5c
 801ab1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801ab1e:	4a0c      	ldr	r2, [pc, #48]	@ (801ab50 <prvInitialiseNewTask+0x14c>)
 801ab20:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 801ab22:	683a      	ldr	r2, [r7, #0]
 801ab24:	68f9      	ldr	r1, [r7, #12]
 801ab26:	69b8      	ldr	r0, [r7, #24]
 801ab28:	f001 fc1c 	bl	801c364 <pxPortInitialiseStack>
 801ab2c:	4602      	mov	r2, r0
 801ab2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801ab30:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 801ab32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801ab34:	2b00      	cmp	r3, #0
 801ab36:	d002      	beq.n	801ab3e <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 801ab38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801ab3a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801ab3c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801ab3e:	bf00      	nop
 801ab40:	3720      	adds	r7, #32
 801ab42:	46bd      	mov	sp, r7
 801ab44:	bd80      	pop	{r7, pc}
 801ab46:	bf00      	nop
 801ab48:	20006000 	.word	0x20006000
 801ab4c:	20006068 	.word	0x20006068
 801ab50:	200060d0 	.word	0x200060d0

0801ab54 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 801ab54:	b580      	push	{r7, lr}
 801ab56:	b082      	sub	sp, #8
 801ab58:	af00      	add	r7, sp, #0
 801ab5a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 801ab5c:	f001 fd34 	bl	801c5c8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 801ab60:	4b2d      	ldr	r3, [pc, #180]	@ (801ac18 <prvAddNewTaskToReadyList+0xc4>)
 801ab62:	681b      	ldr	r3, [r3, #0]
 801ab64:	3301      	adds	r3, #1
 801ab66:	4a2c      	ldr	r2, [pc, #176]	@ (801ac18 <prvAddNewTaskToReadyList+0xc4>)
 801ab68:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 801ab6a:	4b2c      	ldr	r3, [pc, #176]	@ (801ac1c <prvAddNewTaskToReadyList+0xc8>)
 801ab6c:	681b      	ldr	r3, [r3, #0]
 801ab6e:	2b00      	cmp	r3, #0
 801ab70:	d109      	bne.n	801ab86 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 801ab72:	4a2a      	ldr	r2, [pc, #168]	@ (801ac1c <prvAddNewTaskToReadyList+0xc8>)
 801ab74:	687b      	ldr	r3, [r7, #4]
 801ab76:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 801ab78:	4b27      	ldr	r3, [pc, #156]	@ (801ac18 <prvAddNewTaskToReadyList+0xc4>)
 801ab7a:	681b      	ldr	r3, [r3, #0]
 801ab7c:	2b01      	cmp	r3, #1
 801ab7e:	d110      	bne.n	801aba2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 801ab80:	f000 fd0a 	bl	801b598 <prvInitialiseTaskLists>
 801ab84:	e00d      	b.n	801aba2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 801ab86:	4b26      	ldr	r3, [pc, #152]	@ (801ac20 <prvAddNewTaskToReadyList+0xcc>)
 801ab88:	681b      	ldr	r3, [r3, #0]
 801ab8a:	2b00      	cmp	r3, #0
 801ab8c:	d109      	bne.n	801aba2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 801ab8e:	4b23      	ldr	r3, [pc, #140]	@ (801ac1c <prvAddNewTaskToReadyList+0xc8>)
 801ab90:	681b      	ldr	r3, [r3, #0]
 801ab92:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801ab94:	687b      	ldr	r3, [r7, #4]
 801ab96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801ab98:	429a      	cmp	r2, r3
 801ab9a:	d802      	bhi.n	801aba2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 801ab9c:	4a1f      	ldr	r2, [pc, #124]	@ (801ac1c <prvAddNewTaskToReadyList+0xc8>)
 801ab9e:	687b      	ldr	r3, [r7, #4]
 801aba0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 801aba2:	4b20      	ldr	r3, [pc, #128]	@ (801ac24 <prvAddNewTaskToReadyList+0xd0>)
 801aba4:	681b      	ldr	r3, [r3, #0]
 801aba6:	3301      	adds	r3, #1
 801aba8:	4a1e      	ldr	r2, [pc, #120]	@ (801ac24 <prvAddNewTaskToReadyList+0xd0>)
 801abaa:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 801abac:	4b1d      	ldr	r3, [pc, #116]	@ (801ac24 <prvAddNewTaskToReadyList+0xd0>)
 801abae:	681a      	ldr	r2, [r3, #0]
 801abb0:	687b      	ldr	r3, [r7, #4]
 801abb2:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 801abb4:	687b      	ldr	r3, [r7, #4]
 801abb6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801abb8:	4b1b      	ldr	r3, [pc, #108]	@ (801ac28 <prvAddNewTaskToReadyList+0xd4>)
 801abba:	681b      	ldr	r3, [r3, #0]
 801abbc:	429a      	cmp	r2, r3
 801abbe:	d903      	bls.n	801abc8 <prvAddNewTaskToReadyList+0x74>
 801abc0:	687b      	ldr	r3, [r7, #4]
 801abc2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801abc4:	4a18      	ldr	r2, [pc, #96]	@ (801ac28 <prvAddNewTaskToReadyList+0xd4>)
 801abc6:	6013      	str	r3, [r2, #0]
 801abc8:	687b      	ldr	r3, [r7, #4]
 801abca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801abcc:	4613      	mov	r3, r2
 801abce:	009b      	lsls	r3, r3, #2
 801abd0:	4413      	add	r3, r2
 801abd2:	009b      	lsls	r3, r3, #2
 801abd4:	4a15      	ldr	r2, [pc, #84]	@ (801ac2c <prvAddNewTaskToReadyList+0xd8>)
 801abd6:	441a      	add	r2, r3
 801abd8:	687b      	ldr	r3, [r7, #4]
 801abda:	3304      	adds	r3, #4
 801abdc:	4619      	mov	r1, r3
 801abde:	4610      	mov	r0, r2
 801abe0:	f7fe fbad 	bl	801933e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 801abe4:	f001 fd22 	bl	801c62c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 801abe8:	4b0d      	ldr	r3, [pc, #52]	@ (801ac20 <prvAddNewTaskToReadyList+0xcc>)
 801abea:	681b      	ldr	r3, [r3, #0]
 801abec:	2b00      	cmp	r3, #0
 801abee:	d00e      	beq.n	801ac0e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 801abf0:	4b0a      	ldr	r3, [pc, #40]	@ (801ac1c <prvAddNewTaskToReadyList+0xc8>)
 801abf2:	681b      	ldr	r3, [r3, #0]
 801abf4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801abf6:	687b      	ldr	r3, [r7, #4]
 801abf8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801abfa:	429a      	cmp	r2, r3
 801abfc:	d207      	bcs.n	801ac0e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 801abfe:	4b0c      	ldr	r3, [pc, #48]	@ (801ac30 <prvAddNewTaskToReadyList+0xdc>)
 801ac00:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801ac04:	601a      	str	r2, [r3, #0]
 801ac06:	f3bf 8f4f 	dsb	sy
 801ac0a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801ac0e:	bf00      	nop
 801ac10:	3708      	adds	r7, #8
 801ac12:	46bd      	mov	sp, r7
 801ac14:	bd80      	pop	{r7, pc}
 801ac16:	bf00      	nop
 801ac18:	20002280 	.word	0x20002280
 801ac1c:	20001dac 	.word	0x20001dac
 801ac20:	2000228c 	.word	0x2000228c
 801ac24:	2000229c 	.word	0x2000229c
 801ac28:	20002288 	.word	0x20002288
 801ac2c:	20001db0 	.word	0x20001db0
 801ac30:	e000ed04 	.word	0xe000ed04

0801ac34 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 801ac34:	b580      	push	{r7, lr}
 801ac36:	b084      	sub	sp, #16
 801ac38:	af00      	add	r7, sp, #0
 801ac3a:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 801ac3c:	f001 fcc4 	bl	801c5c8 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 801ac40:	687b      	ldr	r3, [r7, #4]
 801ac42:	2b00      	cmp	r3, #0
 801ac44:	d102      	bne.n	801ac4c <vTaskDelete+0x18>
 801ac46:	4b2d      	ldr	r3, [pc, #180]	@ (801acfc <vTaskDelete+0xc8>)
 801ac48:	681b      	ldr	r3, [r3, #0]
 801ac4a:	e000      	b.n	801ac4e <vTaskDelete+0x1a>
 801ac4c:	687b      	ldr	r3, [r7, #4]
 801ac4e:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready/delayed list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801ac50:	68fb      	ldr	r3, [r7, #12]
 801ac52:	3304      	adds	r3, #4
 801ac54:	4618      	mov	r0, r3
 801ac56:	f7fe fbcf 	bl	80193f8 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 801ac5a:	68fb      	ldr	r3, [r7, #12]
 801ac5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801ac5e:	2b00      	cmp	r3, #0
 801ac60:	d004      	beq.n	801ac6c <vTaskDelete+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801ac62:	68fb      	ldr	r3, [r7, #12]
 801ac64:	3318      	adds	r3, #24
 801ac66:	4618      	mov	r0, r3
 801ac68:	f7fe fbc6 	bl	80193f8 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 801ac6c:	4b24      	ldr	r3, [pc, #144]	@ (801ad00 <vTaskDelete+0xcc>)
 801ac6e:	681b      	ldr	r3, [r3, #0]
 801ac70:	3301      	adds	r3, #1
 801ac72:	4a23      	ldr	r2, [pc, #140]	@ (801ad00 <vTaskDelete+0xcc>)
 801ac74:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 801ac76:	4b21      	ldr	r3, [pc, #132]	@ (801acfc <vTaskDelete+0xc8>)
 801ac78:	681b      	ldr	r3, [r3, #0]
 801ac7a:	68fa      	ldr	r2, [r7, #12]
 801ac7c:	429a      	cmp	r2, r3
 801ac7e:	d10b      	bne.n	801ac98 <vTaskDelete+0x64>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 801ac80:	68fb      	ldr	r3, [r7, #12]
 801ac82:	3304      	adds	r3, #4
 801ac84:	4619      	mov	r1, r3
 801ac86:	481f      	ldr	r0, [pc, #124]	@ (801ad04 <vTaskDelete+0xd0>)
 801ac88:	f7fe fb59 	bl	801933e <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 801ac8c:	4b1e      	ldr	r3, [pc, #120]	@ (801ad08 <vTaskDelete+0xd4>)
 801ac8e:	681b      	ldr	r3, [r3, #0]
 801ac90:	3301      	adds	r3, #1
 801ac92:	4a1d      	ldr	r2, [pc, #116]	@ (801ad08 <vTaskDelete+0xd4>)
 801ac94:	6013      	str	r3, [r2, #0]
 801ac96:	e009      	b.n	801acac <vTaskDelete+0x78>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 801ac98:	4b1c      	ldr	r3, [pc, #112]	@ (801ad0c <vTaskDelete+0xd8>)
 801ac9a:	681b      	ldr	r3, [r3, #0]
 801ac9c:	3b01      	subs	r3, #1
 801ac9e:	4a1b      	ldr	r2, [pc, #108]	@ (801ad0c <vTaskDelete+0xd8>)
 801aca0:	6013      	str	r3, [r2, #0]
				traceTASK_DELETE( pxTCB );
				prvDeleteTCB( pxTCB );
 801aca2:	68f8      	ldr	r0, [r7, #12]
 801aca4:	f000 fce6 	bl	801b674 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 801aca8:	f000 fd1a 	bl	801b6e0 <prvResetNextTaskUnblockTime>
			}
		}
		taskEXIT_CRITICAL();
 801acac:	f001 fcbe 	bl	801c62c <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 801acb0:	4b17      	ldr	r3, [pc, #92]	@ (801ad10 <vTaskDelete+0xdc>)
 801acb2:	681b      	ldr	r3, [r3, #0]
 801acb4:	2b00      	cmp	r3, #0
 801acb6:	d01c      	beq.n	801acf2 <vTaskDelete+0xbe>
		{
			if( pxTCB == pxCurrentTCB )
 801acb8:	4b10      	ldr	r3, [pc, #64]	@ (801acfc <vTaskDelete+0xc8>)
 801acba:	681b      	ldr	r3, [r3, #0]
 801acbc:	68fa      	ldr	r2, [r7, #12]
 801acbe:	429a      	cmp	r2, r3
 801acc0:	d117      	bne.n	801acf2 <vTaskDelete+0xbe>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 801acc2:	4b14      	ldr	r3, [pc, #80]	@ (801ad14 <vTaskDelete+0xe0>)
 801acc4:	681b      	ldr	r3, [r3, #0]
 801acc6:	2b00      	cmp	r3, #0
 801acc8:	d00b      	beq.n	801ace2 <vTaskDelete+0xae>
	__asm volatile
 801acca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801acce:	f383 8811 	msr	BASEPRI, r3
 801acd2:	f3bf 8f6f 	isb	sy
 801acd6:	f3bf 8f4f 	dsb	sy
 801acda:	60bb      	str	r3, [r7, #8]
}
 801acdc:	bf00      	nop
 801acde:	bf00      	nop
 801ace0:	e7fd      	b.n	801acde <vTaskDelete+0xaa>
				portYIELD_WITHIN_API();
 801ace2:	4b0d      	ldr	r3, [pc, #52]	@ (801ad18 <vTaskDelete+0xe4>)
 801ace4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801ace8:	601a      	str	r2, [r3, #0]
 801acea:	f3bf 8f4f 	dsb	sy
 801acee:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 801acf2:	bf00      	nop
 801acf4:	3710      	adds	r7, #16
 801acf6:	46bd      	mov	sp, r7
 801acf8:	bd80      	pop	{r7, pc}
 801acfa:	bf00      	nop
 801acfc:	20001dac 	.word	0x20001dac
 801ad00:	2000229c 	.word	0x2000229c
 801ad04:	20002254 	.word	0x20002254
 801ad08:	20002268 	.word	0x20002268
 801ad0c:	20002280 	.word	0x20002280
 801ad10:	2000228c 	.word	0x2000228c
 801ad14:	200022a8 	.word	0x200022a8
 801ad18:	e000ed04 	.word	0xe000ed04

0801ad1c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 801ad1c:	b580      	push	{r7, lr}
 801ad1e:	b084      	sub	sp, #16
 801ad20:	af00      	add	r7, sp, #0
 801ad22:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 801ad24:	2300      	movs	r3, #0
 801ad26:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 801ad28:	687b      	ldr	r3, [r7, #4]
 801ad2a:	2b00      	cmp	r3, #0
 801ad2c:	d018      	beq.n	801ad60 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 801ad2e:	4b14      	ldr	r3, [pc, #80]	@ (801ad80 <vTaskDelay+0x64>)
 801ad30:	681b      	ldr	r3, [r3, #0]
 801ad32:	2b00      	cmp	r3, #0
 801ad34:	d00b      	beq.n	801ad4e <vTaskDelay+0x32>
	__asm volatile
 801ad36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801ad3a:	f383 8811 	msr	BASEPRI, r3
 801ad3e:	f3bf 8f6f 	isb	sy
 801ad42:	f3bf 8f4f 	dsb	sy
 801ad46:	60bb      	str	r3, [r7, #8]
}
 801ad48:	bf00      	nop
 801ad4a:	bf00      	nop
 801ad4c:	e7fd      	b.n	801ad4a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 801ad4e:	f000 f8f3 	bl	801af38 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 801ad52:	2100      	movs	r1, #0
 801ad54:	6878      	ldr	r0, [r7, #4]
 801ad56:	f000 ff57 	bl	801bc08 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 801ad5a:	f000 f8fb 	bl	801af54 <xTaskResumeAll>
 801ad5e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 801ad60:	68fb      	ldr	r3, [r7, #12]
 801ad62:	2b00      	cmp	r3, #0
 801ad64:	d107      	bne.n	801ad76 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 801ad66:	4b07      	ldr	r3, [pc, #28]	@ (801ad84 <vTaskDelay+0x68>)
 801ad68:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801ad6c:	601a      	str	r2, [r3, #0]
 801ad6e:	f3bf 8f4f 	dsb	sy
 801ad72:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 801ad76:	bf00      	nop
 801ad78:	3710      	adds	r7, #16
 801ad7a:	46bd      	mov	sp, r7
 801ad7c:	bd80      	pop	{r7, pc}
 801ad7e:	bf00      	nop
 801ad80:	200022a8 	.word	0x200022a8
 801ad84:	e000ed04 	.word	0xe000ed04

0801ad88 <eTaskGetState>:
/*-----------------------------------------------------------*/

#if( ( INCLUDE_eTaskGetState == 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_xTaskAbortDelay == 1 ) )

	eTaskState eTaskGetState( TaskHandle_t xTask )
	{
 801ad88:	b580      	push	{r7, lr}
 801ad8a:	b088      	sub	sp, #32
 801ad8c:	af00      	add	r7, sp, #0
 801ad8e:	6078      	str	r0, [r7, #4]
	eTaskState eReturn;
	List_t const * pxStateList, *pxDelayedList, *pxOverflowedDelayedList;
	const TCB_t * const pxTCB = xTask;
 801ad90:	687b      	ldr	r3, [r7, #4]
 801ad92:	61bb      	str	r3, [r7, #24]

		configASSERT( pxTCB );
 801ad94:	69bb      	ldr	r3, [r7, #24]
 801ad96:	2b00      	cmp	r3, #0
 801ad98:	d10b      	bne.n	801adb2 <eTaskGetState+0x2a>
	__asm volatile
 801ad9a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801ad9e:	f383 8811 	msr	BASEPRI, r3
 801ada2:	f3bf 8f6f 	isb	sy
 801ada6:	f3bf 8f4f 	dsb	sy
 801adaa:	60bb      	str	r3, [r7, #8]
}
 801adac:	bf00      	nop
 801adae:	bf00      	nop
 801adb0:	e7fd      	b.n	801adae <eTaskGetState+0x26>

		if( pxTCB == pxCurrentTCB )
 801adb2:	4b24      	ldr	r3, [pc, #144]	@ (801ae44 <eTaskGetState+0xbc>)
 801adb4:	681b      	ldr	r3, [r3, #0]
 801adb6:	69ba      	ldr	r2, [r7, #24]
 801adb8:	429a      	cmp	r2, r3
 801adba:	d102      	bne.n	801adc2 <eTaskGetState+0x3a>
		{
			/* The task calling this function is querying its own state. */
			eReturn = eRunning;
 801adbc:	2300      	movs	r3, #0
 801adbe:	77fb      	strb	r3, [r7, #31]
 801adc0:	e03a      	b.n	801ae38 <eTaskGetState+0xb0>
		}
		else
		{
			taskENTER_CRITICAL();
 801adc2:	f001 fc01 	bl	801c5c8 <vPortEnterCritical>
			{
				pxStateList = listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
 801adc6:	69bb      	ldr	r3, [r7, #24]
 801adc8:	695b      	ldr	r3, [r3, #20]
 801adca:	617b      	str	r3, [r7, #20]
				pxDelayedList = pxDelayedTaskList;
 801adcc:	4b1e      	ldr	r3, [pc, #120]	@ (801ae48 <eTaskGetState+0xc0>)
 801adce:	681b      	ldr	r3, [r3, #0]
 801add0:	613b      	str	r3, [r7, #16]
				pxOverflowedDelayedList = pxOverflowDelayedTaskList;
 801add2:	4b1e      	ldr	r3, [pc, #120]	@ (801ae4c <eTaskGetState+0xc4>)
 801add4:	681b      	ldr	r3, [r3, #0]
 801add6:	60fb      	str	r3, [r7, #12]
			}
			taskEXIT_CRITICAL();
 801add8:	f001 fc28 	bl	801c62c <vPortExitCritical>

			if( ( pxStateList == pxDelayedList ) || ( pxStateList == pxOverflowedDelayedList ) )
 801addc:	697a      	ldr	r2, [r7, #20]
 801adde:	693b      	ldr	r3, [r7, #16]
 801ade0:	429a      	cmp	r2, r3
 801ade2:	d003      	beq.n	801adec <eTaskGetState+0x64>
 801ade4:	697a      	ldr	r2, [r7, #20]
 801ade6:	68fb      	ldr	r3, [r7, #12]
 801ade8:	429a      	cmp	r2, r3
 801adea:	d102      	bne.n	801adf2 <eTaskGetState+0x6a>
			{
				/* The task being queried is referenced from one of the Blocked
				lists. */
				eReturn = eBlocked;
 801adec:	2302      	movs	r3, #2
 801adee:	77fb      	strb	r3, [r7, #31]
 801adf0:	e022      	b.n	801ae38 <eTaskGetState+0xb0>
			}

			#if ( INCLUDE_vTaskSuspend == 1 )
				else if( pxStateList == &xSuspendedTaskList )
 801adf2:	697b      	ldr	r3, [r7, #20]
 801adf4:	4a16      	ldr	r2, [pc, #88]	@ (801ae50 <eTaskGetState+0xc8>)
 801adf6:	4293      	cmp	r3, r2
 801adf8:	d112      	bne.n	801ae20 <eTaskGetState+0x98>
				{
					/* The task being queried is referenced from the suspended
					list.  Is it genuinely suspended or is it blocked
					indefinitely? */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
 801adfa:	69bb      	ldr	r3, [r7, #24]
 801adfc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801adfe:	2b00      	cmp	r3, #0
 801ae00:	d10b      	bne.n	801ae1a <eTaskGetState+0x92>
						{
							/* The task does not appear on the event list item of
							and of the RTOS objects, but could still be in the
							blocked state if it is waiting on its notification
							rather than waiting on an object. */
							if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 801ae02:	69bb      	ldr	r3, [r7, #24]
 801ae04:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 801ae08:	b2db      	uxtb	r3, r3
 801ae0a:	2b01      	cmp	r3, #1
 801ae0c:	d102      	bne.n	801ae14 <eTaskGetState+0x8c>
							{
								eReturn = eBlocked;
 801ae0e:	2302      	movs	r3, #2
 801ae10:	77fb      	strb	r3, [r7, #31]
 801ae12:	e011      	b.n	801ae38 <eTaskGetState+0xb0>
							}
							else
							{
								eReturn = eSuspended;
 801ae14:	2303      	movs	r3, #3
 801ae16:	77fb      	strb	r3, [r7, #31]
 801ae18:	e00e      	b.n	801ae38 <eTaskGetState+0xb0>
						}
						#endif
					}
					else
					{
						eReturn = eBlocked;
 801ae1a:	2302      	movs	r3, #2
 801ae1c:	77fb      	strb	r3, [r7, #31]
 801ae1e:	e00b      	b.n	801ae38 <eTaskGetState+0xb0>
					}
				}
			#endif

			#if ( INCLUDE_vTaskDelete == 1 )
				else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
 801ae20:	697b      	ldr	r3, [r7, #20]
 801ae22:	4a0c      	ldr	r2, [pc, #48]	@ (801ae54 <eTaskGetState+0xcc>)
 801ae24:	4293      	cmp	r3, r2
 801ae26:	d002      	beq.n	801ae2e <eTaskGetState+0xa6>
 801ae28:	697b      	ldr	r3, [r7, #20]
 801ae2a:	2b00      	cmp	r3, #0
 801ae2c:	d102      	bne.n	801ae34 <eTaskGetState+0xac>
				{
					/* The task being queried is referenced from the deleted
					tasks list, or it is not referenced from any lists at
					all. */
					eReturn = eDeleted;
 801ae2e:	2304      	movs	r3, #4
 801ae30:	77fb      	strb	r3, [r7, #31]
 801ae32:	e001      	b.n	801ae38 <eTaskGetState+0xb0>

			else /*lint !e525 Negative indentation is intended to make use of pre-processor clearer. */
			{
				/* If the task is not in any other state, it must be in the
				Ready (including pending ready) state. */
				eReturn = eReady;
 801ae34:	2301      	movs	r3, #1
 801ae36:	77fb      	strb	r3, [r7, #31]
			}
		}

		return eReturn;
 801ae38:	7ffb      	ldrb	r3, [r7, #31]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 801ae3a:	4618      	mov	r0, r3
 801ae3c:	3720      	adds	r7, #32
 801ae3e:	46bd      	mov	sp, r7
 801ae40:	bd80      	pop	{r7, pc}
 801ae42:	bf00      	nop
 801ae44:	20001dac 	.word	0x20001dac
 801ae48:	20002238 	.word	0x20002238
 801ae4c:	2000223c 	.word	0x2000223c
 801ae50:	2000226c 	.word	0x2000226c
 801ae54:	20002254 	.word	0x20002254

0801ae58 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 801ae58:	b580      	push	{r7, lr}
 801ae5a:	b08a      	sub	sp, #40	@ 0x28
 801ae5c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 801ae5e:	2300      	movs	r3, #0
 801ae60:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 801ae62:	2300      	movs	r3, #0
 801ae64:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 801ae66:	463a      	mov	r2, r7
 801ae68:	1d39      	adds	r1, r7, #4
 801ae6a:	f107 0308 	add.w	r3, r7, #8
 801ae6e:	4618      	mov	r0, r3
 801ae70:	f7fe fa04 	bl	801927c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 801ae74:	6839      	ldr	r1, [r7, #0]
 801ae76:	687b      	ldr	r3, [r7, #4]
 801ae78:	68ba      	ldr	r2, [r7, #8]
 801ae7a:	9202      	str	r2, [sp, #8]
 801ae7c:	9301      	str	r3, [sp, #4]
 801ae7e:	2300      	movs	r3, #0
 801ae80:	9300      	str	r3, [sp, #0]
 801ae82:	2300      	movs	r3, #0
 801ae84:	460a      	mov	r2, r1
 801ae86:	4924      	ldr	r1, [pc, #144]	@ (801af18 <vTaskStartScheduler+0xc0>)
 801ae88:	4824      	ldr	r0, [pc, #144]	@ (801af1c <vTaskStartScheduler+0xc4>)
 801ae8a:	f7ff fd16 	bl	801a8ba <xTaskCreateStatic>
 801ae8e:	4603      	mov	r3, r0
 801ae90:	4a23      	ldr	r2, [pc, #140]	@ (801af20 <vTaskStartScheduler+0xc8>)
 801ae92:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 801ae94:	4b22      	ldr	r3, [pc, #136]	@ (801af20 <vTaskStartScheduler+0xc8>)
 801ae96:	681b      	ldr	r3, [r3, #0]
 801ae98:	2b00      	cmp	r3, #0
 801ae9a:	d002      	beq.n	801aea2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 801ae9c:	2301      	movs	r3, #1
 801ae9e:	617b      	str	r3, [r7, #20]
 801aea0:	e001      	b.n	801aea6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 801aea2:	2300      	movs	r3, #0
 801aea4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 801aea6:	697b      	ldr	r3, [r7, #20]
 801aea8:	2b01      	cmp	r3, #1
 801aeaa:	d102      	bne.n	801aeb2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 801aeac:	f000 ff00 	bl	801bcb0 <xTimerCreateTimerTask>
 801aeb0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 801aeb2:	697b      	ldr	r3, [r7, #20]
 801aeb4:	2b01      	cmp	r3, #1
 801aeb6:	d11b      	bne.n	801aef0 <vTaskStartScheduler+0x98>
	__asm volatile
 801aeb8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801aebc:	f383 8811 	msr	BASEPRI, r3
 801aec0:	f3bf 8f6f 	isb	sy
 801aec4:	f3bf 8f4f 	dsb	sy
 801aec8:	613b      	str	r3, [r7, #16]
}
 801aeca:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 801aecc:	4b15      	ldr	r3, [pc, #84]	@ (801af24 <vTaskStartScheduler+0xcc>)
 801aece:	681b      	ldr	r3, [r3, #0]
 801aed0:	3354      	adds	r3, #84	@ 0x54
 801aed2:	4a15      	ldr	r2, [pc, #84]	@ (801af28 <vTaskStartScheduler+0xd0>)
 801aed4:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 801aed6:	4b15      	ldr	r3, [pc, #84]	@ (801af2c <vTaskStartScheduler+0xd4>)
 801aed8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801aedc:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 801aede:	4b14      	ldr	r3, [pc, #80]	@ (801af30 <vTaskStartScheduler+0xd8>)
 801aee0:	2201      	movs	r2, #1
 801aee2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 801aee4:	4b13      	ldr	r3, [pc, #76]	@ (801af34 <vTaskStartScheduler+0xdc>)
 801aee6:	2200      	movs	r2, #0
 801aee8:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 801aeea:	f001 fac9 	bl	801c480 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 801aeee:	e00f      	b.n	801af10 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 801aef0:	697b      	ldr	r3, [r7, #20]
 801aef2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801aef6:	d10b      	bne.n	801af10 <vTaskStartScheduler+0xb8>
	__asm volatile
 801aef8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801aefc:	f383 8811 	msr	BASEPRI, r3
 801af00:	f3bf 8f6f 	isb	sy
 801af04:	f3bf 8f4f 	dsb	sy
 801af08:	60fb      	str	r3, [r7, #12]
}
 801af0a:	bf00      	nop
 801af0c:	bf00      	nop
 801af0e:	e7fd      	b.n	801af0c <vTaskStartScheduler+0xb4>
}
 801af10:	bf00      	nop
 801af12:	3718      	adds	r7, #24
 801af14:	46bd      	mov	sp, r7
 801af16:	bd80      	pop	{r7, pc}
 801af18:	08021db8 	.word	0x08021db8
 801af1c:	0801b569 	.word	0x0801b569
 801af20:	200022a4 	.word	0x200022a4
 801af24:	20001dac 	.word	0x20001dac
 801af28:	2000010c 	.word	0x2000010c
 801af2c:	200022a0 	.word	0x200022a0
 801af30:	2000228c 	.word	0x2000228c
 801af34:	20002284 	.word	0x20002284

0801af38 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 801af38:	b480      	push	{r7}
 801af3a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 801af3c:	4b04      	ldr	r3, [pc, #16]	@ (801af50 <vTaskSuspendAll+0x18>)
 801af3e:	681b      	ldr	r3, [r3, #0]
 801af40:	3301      	adds	r3, #1
 801af42:	4a03      	ldr	r2, [pc, #12]	@ (801af50 <vTaskSuspendAll+0x18>)
 801af44:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 801af46:	bf00      	nop
 801af48:	46bd      	mov	sp, r7
 801af4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801af4e:	4770      	bx	lr
 801af50:	200022a8 	.word	0x200022a8

0801af54 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 801af54:	b580      	push	{r7, lr}
 801af56:	b084      	sub	sp, #16
 801af58:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 801af5a:	2300      	movs	r3, #0
 801af5c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 801af5e:	2300      	movs	r3, #0
 801af60:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 801af62:	4b42      	ldr	r3, [pc, #264]	@ (801b06c <xTaskResumeAll+0x118>)
 801af64:	681b      	ldr	r3, [r3, #0]
 801af66:	2b00      	cmp	r3, #0
 801af68:	d10b      	bne.n	801af82 <xTaskResumeAll+0x2e>
	__asm volatile
 801af6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801af6e:	f383 8811 	msr	BASEPRI, r3
 801af72:	f3bf 8f6f 	isb	sy
 801af76:	f3bf 8f4f 	dsb	sy
 801af7a:	603b      	str	r3, [r7, #0]
}
 801af7c:	bf00      	nop
 801af7e:	bf00      	nop
 801af80:	e7fd      	b.n	801af7e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 801af82:	f001 fb21 	bl	801c5c8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 801af86:	4b39      	ldr	r3, [pc, #228]	@ (801b06c <xTaskResumeAll+0x118>)
 801af88:	681b      	ldr	r3, [r3, #0]
 801af8a:	3b01      	subs	r3, #1
 801af8c:	4a37      	ldr	r2, [pc, #220]	@ (801b06c <xTaskResumeAll+0x118>)
 801af8e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801af90:	4b36      	ldr	r3, [pc, #216]	@ (801b06c <xTaskResumeAll+0x118>)
 801af92:	681b      	ldr	r3, [r3, #0]
 801af94:	2b00      	cmp	r3, #0
 801af96:	d162      	bne.n	801b05e <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 801af98:	4b35      	ldr	r3, [pc, #212]	@ (801b070 <xTaskResumeAll+0x11c>)
 801af9a:	681b      	ldr	r3, [r3, #0]
 801af9c:	2b00      	cmp	r3, #0
 801af9e:	d05e      	beq.n	801b05e <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 801afa0:	e02f      	b.n	801b002 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801afa2:	4b34      	ldr	r3, [pc, #208]	@ (801b074 <xTaskResumeAll+0x120>)
 801afa4:	68db      	ldr	r3, [r3, #12]
 801afa6:	68db      	ldr	r3, [r3, #12]
 801afa8:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801afaa:	68fb      	ldr	r3, [r7, #12]
 801afac:	3318      	adds	r3, #24
 801afae:	4618      	mov	r0, r3
 801afb0:	f7fe fa22 	bl	80193f8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801afb4:	68fb      	ldr	r3, [r7, #12]
 801afb6:	3304      	adds	r3, #4
 801afb8:	4618      	mov	r0, r3
 801afba:	f7fe fa1d 	bl	80193f8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 801afbe:	68fb      	ldr	r3, [r7, #12]
 801afc0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801afc2:	4b2d      	ldr	r3, [pc, #180]	@ (801b078 <xTaskResumeAll+0x124>)
 801afc4:	681b      	ldr	r3, [r3, #0]
 801afc6:	429a      	cmp	r2, r3
 801afc8:	d903      	bls.n	801afd2 <xTaskResumeAll+0x7e>
 801afca:	68fb      	ldr	r3, [r7, #12]
 801afcc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801afce:	4a2a      	ldr	r2, [pc, #168]	@ (801b078 <xTaskResumeAll+0x124>)
 801afd0:	6013      	str	r3, [r2, #0]
 801afd2:	68fb      	ldr	r3, [r7, #12]
 801afd4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801afd6:	4613      	mov	r3, r2
 801afd8:	009b      	lsls	r3, r3, #2
 801afda:	4413      	add	r3, r2
 801afdc:	009b      	lsls	r3, r3, #2
 801afde:	4a27      	ldr	r2, [pc, #156]	@ (801b07c <xTaskResumeAll+0x128>)
 801afe0:	441a      	add	r2, r3
 801afe2:	68fb      	ldr	r3, [r7, #12]
 801afe4:	3304      	adds	r3, #4
 801afe6:	4619      	mov	r1, r3
 801afe8:	4610      	mov	r0, r2
 801afea:	f7fe f9a8 	bl	801933e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 801afee:	68fb      	ldr	r3, [r7, #12]
 801aff0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801aff2:	4b23      	ldr	r3, [pc, #140]	@ (801b080 <xTaskResumeAll+0x12c>)
 801aff4:	681b      	ldr	r3, [r3, #0]
 801aff6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801aff8:	429a      	cmp	r2, r3
 801affa:	d302      	bcc.n	801b002 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 801affc:	4b21      	ldr	r3, [pc, #132]	@ (801b084 <xTaskResumeAll+0x130>)
 801affe:	2201      	movs	r2, #1
 801b000:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 801b002:	4b1c      	ldr	r3, [pc, #112]	@ (801b074 <xTaskResumeAll+0x120>)
 801b004:	681b      	ldr	r3, [r3, #0]
 801b006:	2b00      	cmp	r3, #0
 801b008:	d1cb      	bne.n	801afa2 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 801b00a:	68fb      	ldr	r3, [r7, #12]
 801b00c:	2b00      	cmp	r3, #0
 801b00e:	d001      	beq.n	801b014 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 801b010:	f000 fb66 	bl	801b6e0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 801b014:	4b1c      	ldr	r3, [pc, #112]	@ (801b088 <xTaskResumeAll+0x134>)
 801b016:	681b      	ldr	r3, [r3, #0]
 801b018:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 801b01a:	687b      	ldr	r3, [r7, #4]
 801b01c:	2b00      	cmp	r3, #0
 801b01e:	d010      	beq.n	801b042 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 801b020:	f000 f846 	bl	801b0b0 <xTaskIncrementTick>
 801b024:	4603      	mov	r3, r0
 801b026:	2b00      	cmp	r3, #0
 801b028:	d002      	beq.n	801b030 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 801b02a:	4b16      	ldr	r3, [pc, #88]	@ (801b084 <xTaskResumeAll+0x130>)
 801b02c:	2201      	movs	r2, #1
 801b02e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 801b030:	687b      	ldr	r3, [r7, #4]
 801b032:	3b01      	subs	r3, #1
 801b034:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 801b036:	687b      	ldr	r3, [r7, #4]
 801b038:	2b00      	cmp	r3, #0
 801b03a:	d1f1      	bne.n	801b020 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 801b03c:	4b12      	ldr	r3, [pc, #72]	@ (801b088 <xTaskResumeAll+0x134>)
 801b03e:	2200      	movs	r2, #0
 801b040:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 801b042:	4b10      	ldr	r3, [pc, #64]	@ (801b084 <xTaskResumeAll+0x130>)
 801b044:	681b      	ldr	r3, [r3, #0]
 801b046:	2b00      	cmp	r3, #0
 801b048:	d009      	beq.n	801b05e <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 801b04a:	2301      	movs	r3, #1
 801b04c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 801b04e:	4b0f      	ldr	r3, [pc, #60]	@ (801b08c <xTaskResumeAll+0x138>)
 801b050:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801b054:	601a      	str	r2, [r3, #0]
 801b056:	f3bf 8f4f 	dsb	sy
 801b05a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 801b05e:	f001 fae5 	bl	801c62c <vPortExitCritical>

	return xAlreadyYielded;
 801b062:	68bb      	ldr	r3, [r7, #8]
}
 801b064:	4618      	mov	r0, r3
 801b066:	3710      	adds	r7, #16
 801b068:	46bd      	mov	sp, r7
 801b06a:	bd80      	pop	{r7, pc}
 801b06c:	200022a8 	.word	0x200022a8
 801b070:	20002280 	.word	0x20002280
 801b074:	20002240 	.word	0x20002240
 801b078:	20002288 	.word	0x20002288
 801b07c:	20001db0 	.word	0x20001db0
 801b080:	20001dac 	.word	0x20001dac
 801b084:	20002294 	.word	0x20002294
 801b088:	20002290 	.word	0x20002290
 801b08c:	e000ed04 	.word	0xe000ed04

0801b090 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 801b090:	b480      	push	{r7}
 801b092:	b083      	sub	sp, #12
 801b094:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 801b096:	4b05      	ldr	r3, [pc, #20]	@ (801b0ac <xTaskGetTickCount+0x1c>)
 801b098:	681b      	ldr	r3, [r3, #0]
 801b09a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 801b09c:	687b      	ldr	r3, [r7, #4]
}
 801b09e:	4618      	mov	r0, r3
 801b0a0:	370c      	adds	r7, #12
 801b0a2:	46bd      	mov	sp, r7
 801b0a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b0a8:	4770      	bx	lr
 801b0aa:	bf00      	nop
 801b0ac:	20002284 	.word	0x20002284

0801b0b0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 801b0b0:	b580      	push	{r7, lr}
 801b0b2:	b086      	sub	sp, #24
 801b0b4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 801b0b6:	2300      	movs	r3, #0
 801b0b8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801b0ba:	4b4f      	ldr	r3, [pc, #316]	@ (801b1f8 <xTaskIncrementTick+0x148>)
 801b0bc:	681b      	ldr	r3, [r3, #0]
 801b0be:	2b00      	cmp	r3, #0
 801b0c0:	f040 8090 	bne.w	801b1e4 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 801b0c4:	4b4d      	ldr	r3, [pc, #308]	@ (801b1fc <xTaskIncrementTick+0x14c>)
 801b0c6:	681b      	ldr	r3, [r3, #0]
 801b0c8:	3301      	adds	r3, #1
 801b0ca:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 801b0cc:	4a4b      	ldr	r2, [pc, #300]	@ (801b1fc <xTaskIncrementTick+0x14c>)
 801b0ce:	693b      	ldr	r3, [r7, #16]
 801b0d0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 801b0d2:	693b      	ldr	r3, [r7, #16]
 801b0d4:	2b00      	cmp	r3, #0
 801b0d6:	d121      	bne.n	801b11c <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 801b0d8:	4b49      	ldr	r3, [pc, #292]	@ (801b200 <xTaskIncrementTick+0x150>)
 801b0da:	681b      	ldr	r3, [r3, #0]
 801b0dc:	681b      	ldr	r3, [r3, #0]
 801b0de:	2b00      	cmp	r3, #0
 801b0e0:	d00b      	beq.n	801b0fa <xTaskIncrementTick+0x4a>
	__asm volatile
 801b0e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801b0e6:	f383 8811 	msr	BASEPRI, r3
 801b0ea:	f3bf 8f6f 	isb	sy
 801b0ee:	f3bf 8f4f 	dsb	sy
 801b0f2:	603b      	str	r3, [r7, #0]
}
 801b0f4:	bf00      	nop
 801b0f6:	bf00      	nop
 801b0f8:	e7fd      	b.n	801b0f6 <xTaskIncrementTick+0x46>
 801b0fa:	4b41      	ldr	r3, [pc, #260]	@ (801b200 <xTaskIncrementTick+0x150>)
 801b0fc:	681b      	ldr	r3, [r3, #0]
 801b0fe:	60fb      	str	r3, [r7, #12]
 801b100:	4b40      	ldr	r3, [pc, #256]	@ (801b204 <xTaskIncrementTick+0x154>)
 801b102:	681b      	ldr	r3, [r3, #0]
 801b104:	4a3e      	ldr	r2, [pc, #248]	@ (801b200 <xTaskIncrementTick+0x150>)
 801b106:	6013      	str	r3, [r2, #0]
 801b108:	4a3e      	ldr	r2, [pc, #248]	@ (801b204 <xTaskIncrementTick+0x154>)
 801b10a:	68fb      	ldr	r3, [r7, #12]
 801b10c:	6013      	str	r3, [r2, #0]
 801b10e:	4b3e      	ldr	r3, [pc, #248]	@ (801b208 <xTaskIncrementTick+0x158>)
 801b110:	681b      	ldr	r3, [r3, #0]
 801b112:	3301      	adds	r3, #1
 801b114:	4a3c      	ldr	r2, [pc, #240]	@ (801b208 <xTaskIncrementTick+0x158>)
 801b116:	6013      	str	r3, [r2, #0]
 801b118:	f000 fae2 	bl	801b6e0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 801b11c:	4b3b      	ldr	r3, [pc, #236]	@ (801b20c <xTaskIncrementTick+0x15c>)
 801b11e:	681b      	ldr	r3, [r3, #0]
 801b120:	693a      	ldr	r2, [r7, #16]
 801b122:	429a      	cmp	r2, r3
 801b124:	d349      	bcc.n	801b1ba <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801b126:	4b36      	ldr	r3, [pc, #216]	@ (801b200 <xTaskIncrementTick+0x150>)
 801b128:	681b      	ldr	r3, [r3, #0]
 801b12a:	681b      	ldr	r3, [r3, #0]
 801b12c:	2b00      	cmp	r3, #0
 801b12e:	d104      	bne.n	801b13a <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801b130:	4b36      	ldr	r3, [pc, #216]	@ (801b20c <xTaskIncrementTick+0x15c>)
 801b132:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801b136:	601a      	str	r2, [r3, #0]
					break;
 801b138:	e03f      	b.n	801b1ba <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801b13a:	4b31      	ldr	r3, [pc, #196]	@ (801b200 <xTaskIncrementTick+0x150>)
 801b13c:	681b      	ldr	r3, [r3, #0]
 801b13e:	68db      	ldr	r3, [r3, #12]
 801b140:	68db      	ldr	r3, [r3, #12]
 801b142:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 801b144:	68bb      	ldr	r3, [r7, #8]
 801b146:	685b      	ldr	r3, [r3, #4]
 801b148:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 801b14a:	693a      	ldr	r2, [r7, #16]
 801b14c:	687b      	ldr	r3, [r7, #4]
 801b14e:	429a      	cmp	r2, r3
 801b150:	d203      	bcs.n	801b15a <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 801b152:	4a2e      	ldr	r2, [pc, #184]	@ (801b20c <xTaskIncrementTick+0x15c>)
 801b154:	687b      	ldr	r3, [r7, #4]
 801b156:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 801b158:	e02f      	b.n	801b1ba <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801b15a:	68bb      	ldr	r3, [r7, #8]
 801b15c:	3304      	adds	r3, #4
 801b15e:	4618      	mov	r0, r3
 801b160:	f7fe f94a 	bl	80193f8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 801b164:	68bb      	ldr	r3, [r7, #8]
 801b166:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801b168:	2b00      	cmp	r3, #0
 801b16a:	d004      	beq.n	801b176 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801b16c:	68bb      	ldr	r3, [r7, #8]
 801b16e:	3318      	adds	r3, #24
 801b170:	4618      	mov	r0, r3
 801b172:	f7fe f941 	bl	80193f8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 801b176:	68bb      	ldr	r3, [r7, #8]
 801b178:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801b17a:	4b25      	ldr	r3, [pc, #148]	@ (801b210 <xTaskIncrementTick+0x160>)
 801b17c:	681b      	ldr	r3, [r3, #0]
 801b17e:	429a      	cmp	r2, r3
 801b180:	d903      	bls.n	801b18a <xTaskIncrementTick+0xda>
 801b182:	68bb      	ldr	r3, [r7, #8]
 801b184:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801b186:	4a22      	ldr	r2, [pc, #136]	@ (801b210 <xTaskIncrementTick+0x160>)
 801b188:	6013      	str	r3, [r2, #0]
 801b18a:	68bb      	ldr	r3, [r7, #8]
 801b18c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801b18e:	4613      	mov	r3, r2
 801b190:	009b      	lsls	r3, r3, #2
 801b192:	4413      	add	r3, r2
 801b194:	009b      	lsls	r3, r3, #2
 801b196:	4a1f      	ldr	r2, [pc, #124]	@ (801b214 <xTaskIncrementTick+0x164>)
 801b198:	441a      	add	r2, r3
 801b19a:	68bb      	ldr	r3, [r7, #8]
 801b19c:	3304      	adds	r3, #4
 801b19e:	4619      	mov	r1, r3
 801b1a0:	4610      	mov	r0, r2
 801b1a2:	f7fe f8cc 	bl	801933e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 801b1a6:	68bb      	ldr	r3, [r7, #8]
 801b1a8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801b1aa:	4b1b      	ldr	r3, [pc, #108]	@ (801b218 <xTaskIncrementTick+0x168>)
 801b1ac:	681b      	ldr	r3, [r3, #0]
 801b1ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801b1b0:	429a      	cmp	r2, r3
 801b1b2:	d3b8      	bcc.n	801b126 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 801b1b4:	2301      	movs	r3, #1
 801b1b6:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801b1b8:	e7b5      	b.n	801b126 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 801b1ba:	4b17      	ldr	r3, [pc, #92]	@ (801b218 <xTaskIncrementTick+0x168>)
 801b1bc:	681b      	ldr	r3, [r3, #0]
 801b1be:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801b1c0:	4914      	ldr	r1, [pc, #80]	@ (801b214 <xTaskIncrementTick+0x164>)
 801b1c2:	4613      	mov	r3, r2
 801b1c4:	009b      	lsls	r3, r3, #2
 801b1c6:	4413      	add	r3, r2
 801b1c8:	009b      	lsls	r3, r3, #2
 801b1ca:	440b      	add	r3, r1
 801b1cc:	681b      	ldr	r3, [r3, #0]
 801b1ce:	2b01      	cmp	r3, #1
 801b1d0:	d901      	bls.n	801b1d6 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 801b1d2:	2301      	movs	r3, #1
 801b1d4:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 801b1d6:	4b11      	ldr	r3, [pc, #68]	@ (801b21c <xTaskIncrementTick+0x16c>)
 801b1d8:	681b      	ldr	r3, [r3, #0]
 801b1da:	2b00      	cmp	r3, #0
 801b1dc:	d007      	beq.n	801b1ee <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 801b1de:	2301      	movs	r3, #1
 801b1e0:	617b      	str	r3, [r7, #20]
 801b1e2:	e004      	b.n	801b1ee <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 801b1e4:	4b0e      	ldr	r3, [pc, #56]	@ (801b220 <xTaskIncrementTick+0x170>)
 801b1e6:	681b      	ldr	r3, [r3, #0]
 801b1e8:	3301      	adds	r3, #1
 801b1ea:	4a0d      	ldr	r2, [pc, #52]	@ (801b220 <xTaskIncrementTick+0x170>)
 801b1ec:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 801b1ee:	697b      	ldr	r3, [r7, #20]
}
 801b1f0:	4618      	mov	r0, r3
 801b1f2:	3718      	adds	r7, #24
 801b1f4:	46bd      	mov	sp, r7
 801b1f6:	bd80      	pop	{r7, pc}
 801b1f8:	200022a8 	.word	0x200022a8
 801b1fc:	20002284 	.word	0x20002284
 801b200:	20002238 	.word	0x20002238
 801b204:	2000223c 	.word	0x2000223c
 801b208:	20002298 	.word	0x20002298
 801b20c:	200022a0 	.word	0x200022a0
 801b210:	20002288 	.word	0x20002288
 801b214:	20001db0 	.word	0x20001db0
 801b218:	20001dac 	.word	0x20001dac
 801b21c:	20002294 	.word	0x20002294
 801b220:	20002290 	.word	0x20002290

0801b224 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 801b224:	b480      	push	{r7}
 801b226:	b085      	sub	sp, #20
 801b228:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 801b22a:	4b2b      	ldr	r3, [pc, #172]	@ (801b2d8 <vTaskSwitchContext+0xb4>)
 801b22c:	681b      	ldr	r3, [r3, #0]
 801b22e:	2b00      	cmp	r3, #0
 801b230:	d003      	beq.n	801b23a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 801b232:	4b2a      	ldr	r3, [pc, #168]	@ (801b2dc <vTaskSwitchContext+0xb8>)
 801b234:	2201      	movs	r2, #1
 801b236:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 801b238:	e047      	b.n	801b2ca <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 801b23a:	4b28      	ldr	r3, [pc, #160]	@ (801b2dc <vTaskSwitchContext+0xb8>)
 801b23c:	2200      	movs	r2, #0
 801b23e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801b240:	4b27      	ldr	r3, [pc, #156]	@ (801b2e0 <vTaskSwitchContext+0xbc>)
 801b242:	681b      	ldr	r3, [r3, #0]
 801b244:	60fb      	str	r3, [r7, #12]
 801b246:	e011      	b.n	801b26c <vTaskSwitchContext+0x48>
 801b248:	68fb      	ldr	r3, [r7, #12]
 801b24a:	2b00      	cmp	r3, #0
 801b24c:	d10b      	bne.n	801b266 <vTaskSwitchContext+0x42>
	__asm volatile
 801b24e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801b252:	f383 8811 	msr	BASEPRI, r3
 801b256:	f3bf 8f6f 	isb	sy
 801b25a:	f3bf 8f4f 	dsb	sy
 801b25e:	607b      	str	r3, [r7, #4]
}
 801b260:	bf00      	nop
 801b262:	bf00      	nop
 801b264:	e7fd      	b.n	801b262 <vTaskSwitchContext+0x3e>
 801b266:	68fb      	ldr	r3, [r7, #12]
 801b268:	3b01      	subs	r3, #1
 801b26a:	60fb      	str	r3, [r7, #12]
 801b26c:	491d      	ldr	r1, [pc, #116]	@ (801b2e4 <vTaskSwitchContext+0xc0>)
 801b26e:	68fa      	ldr	r2, [r7, #12]
 801b270:	4613      	mov	r3, r2
 801b272:	009b      	lsls	r3, r3, #2
 801b274:	4413      	add	r3, r2
 801b276:	009b      	lsls	r3, r3, #2
 801b278:	440b      	add	r3, r1
 801b27a:	681b      	ldr	r3, [r3, #0]
 801b27c:	2b00      	cmp	r3, #0
 801b27e:	d0e3      	beq.n	801b248 <vTaskSwitchContext+0x24>
 801b280:	68fa      	ldr	r2, [r7, #12]
 801b282:	4613      	mov	r3, r2
 801b284:	009b      	lsls	r3, r3, #2
 801b286:	4413      	add	r3, r2
 801b288:	009b      	lsls	r3, r3, #2
 801b28a:	4a16      	ldr	r2, [pc, #88]	@ (801b2e4 <vTaskSwitchContext+0xc0>)
 801b28c:	4413      	add	r3, r2
 801b28e:	60bb      	str	r3, [r7, #8]
 801b290:	68bb      	ldr	r3, [r7, #8]
 801b292:	685b      	ldr	r3, [r3, #4]
 801b294:	685a      	ldr	r2, [r3, #4]
 801b296:	68bb      	ldr	r3, [r7, #8]
 801b298:	605a      	str	r2, [r3, #4]
 801b29a:	68bb      	ldr	r3, [r7, #8]
 801b29c:	685a      	ldr	r2, [r3, #4]
 801b29e:	68bb      	ldr	r3, [r7, #8]
 801b2a0:	3308      	adds	r3, #8
 801b2a2:	429a      	cmp	r2, r3
 801b2a4:	d104      	bne.n	801b2b0 <vTaskSwitchContext+0x8c>
 801b2a6:	68bb      	ldr	r3, [r7, #8]
 801b2a8:	685b      	ldr	r3, [r3, #4]
 801b2aa:	685a      	ldr	r2, [r3, #4]
 801b2ac:	68bb      	ldr	r3, [r7, #8]
 801b2ae:	605a      	str	r2, [r3, #4]
 801b2b0:	68bb      	ldr	r3, [r7, #8]
 801b2b2:	685b      	ldr	r3, [r3, #4]
 801b2b4:	68db      	ldr	r3, [r3, #12]
 801b2b6:	4a0c      	ldr	r2, [pc, #48]	@ (801b2e8 <vTaskSwitchContext+0xc4>)
 801b2b8:	6013      	str	r3, [r2, #0]
 801b2ba:	4a09      	ldr	r2, [pc, #36]	@ (801b2e0 <vTaskSwitchContext+0xbc>)
 801b2bc:	68fb      	ldr	r3, [r7, #12]
 801b2be:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 801b2c0:	4b09      	ldr	r3, [pc, #36]	@ (801b2e8 <vTaskSwitchContext+0xc4>)
 801b2c2:	681b      	ldr	r3, [r3, #0]
 801b2c4:	3354      	adds	r3, #84	@ 0x54
 801b2c6:	4a09      	ldr	r2, [pc, #36]	@ (801b2ec <vTaskSwitchContext+0xc8>)
 801b2c8:	6013      	str	r3, [r2, #0]
}
 801b2ca:	bf00      	nop
 801b2cc:	3714      	adds	r7, #20
 801b2ce:	46bd      	mov	sp, r7
 801b2d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b2d4:	4770      	bx	lr
 801b2d6:	bf00      	nop
 801b2d8:	200022a8 	.word	0x200022a8
 801b2dc:	20002294 	.word	0x20002294
 801b2e0:	20002288 	.word	0x20002288
 801b2e4:	20001db0 	.word	0x20001db0
 801b2e8:	20001dac 	.word	0x20001dac
 801b2ec:	2000010c 	.word	0x2000010c

0801b2f0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 801b2f0:	b580      	push	{r7, lr}
 801b2f2:	b084      	sub	sp, #16
 801b2f4:	af00      	add	r7, sp, #0
 801b2f6:	6078      	str	r0, [r7, #4]
 801b2f8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 801b2fa:	687b      	ldr	r3, [r7, #4]
 801b2fc:	2b00      	cmp	r3, #0
 801b2fe:	d10b      	bne.n	801b318 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 801b300:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801b304:	f383 8811 	msr	BASEPRI, r3
 801b308:	f3bf 8f6f 	isb	sy
 801b30c:	f3bf 8f4f 	dsb	sy
 801b310:	60fb      	str	r3, [r7, #12]
}
 801b312:	bf00      	nop
 801b314:	bf00      	nop
 801b316:	e7fd      	b.n	801b314 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 801b318:	4b07      	ldr	r3, [pc, #28]	@ (801b338 <vTaskPlaceOnEventList+0x48>)
 801b31a:	681b      	ldr	r3, [r3, #0]
 801b31c:	3318      	adds	r3, #24
 801b31e:	4619      	mov	r1, r3
 801b320:	6878      	ldr	r0, [r7, #4]
 801b322:	f7fe f830 	bl	8019386 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 801b326:	2101      	movs	r1, #1
 801b328:	6838      	ldr	r0, [r7, #0]
 801b32a:	f000 fc6d 	bl	801bc08 <prvAddCurrentTaskToDelayedList>
}
 801b32e:	bf00      	nop
 801b330:	3710      	adds	r7, #16
 801b332:	46bd      	mov	sp, r7
 801b334:	bd80      	pop	{r7, pc}
 801b336:	bf00      	nop
 801b338:	20001dac 	.word	0x20001dac

0801b33c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 801b33c:	b580      	push	{r7, lr}
 801b33e:	b086      	sub	sp, #24
 801b340:	af00      	add	r7, sp, #0
 801b342:	60f8      	str	r0, [r7, #12]
 801b344:	60b9      	str	r1, [r7, #8]
 801b346:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 801b348:	68fb      	ldr	r3, [r7, #12]
 801b34a:	2b00      	cmp	r3, #0
 801b34c:	d10b      	bne.n	801b366 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 801b34e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801b352:	f383 8811 	msr	BASEPRI, r3
 801b356:	f3bf 8f6f 	isb	sy
 801b35a:	f3bf 8f4f 	dsb	sy
 801b35e:	617b      	str	r3, [r7, #20]
}
 801b360:	bf00      	nop
 801b362:	bf00      	nop
 801b364:	e7fd      	b.n	801b362 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 801b366:	4b0a      	ldr	r3, [pc, #40]	@ (801b390 <vTaskPlaceOnEventListRestricted+0x54>)
 801b368:	681b      	ldr	r3, [r3, #0]
 801b36a:	3318      	adds	r3, #24
 801b36c:	4619      	mov	r1, r3
 801b36e:	68f8      	ldr	r0, [r7, #12]
 801b370:	f7fd ffe5 	bl	801933e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 801b374:	687b      	ldr	r3, [r7, #4]
 801b376:	2b00      	cmp	r3, #0
 801b378:	d002      	beq.n	801b380 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 801b37a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801b37e:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 801b380:	6879      	ldr	r1, [r7, #4]
 801b382:	68b8      	ldr	r0, [r7, #8]
 801b384:	f000 fc40 	bl	801bc08 <prvAddCurrentTaskToDelayedList>
	}
 801b388:	bf00      	nop
 801b38a:	3718      	adds	r7, #24
 801b38c:	46bd      	mov	sp, r7
 801b38e:	bd80      	pop	{r7, pc}
 801b390:	20001dac 	.word	0x20001dac

0801b394 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 801b394:	b580      	push	{r7, lr}
 801b396:	b086      	sub	sp, #24
 801b398:	af00      	add	r7, sp, #0
 801b39a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801b39c:	687b      	ldr	r3, [r7, #4]
 801b39e:	68db      	ldr	r3, [r3, #12]
 801b3a0:	68db      	ldr	r3, [r3, #12]
 801b3a2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 801b3a4:	693b      	ldr	r3, [r7, #16]
 801b3a6:	2b00      	cmp	r3, #0
 801b3a8:	d10b      	bne.n	801b3c2 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 801b3aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801b3ae:	f383 8811 	msr	BASEPRI, r3
 801b3b2:	f3bf 8f6f 	isb	sy
 801b3b6:	f3bf 8f4f 	dsb	sy
 801b3ba:	60fb      	str	r3, [r7, #12]
}
 801b3bc:	bf00      	nop
 801b3be:	bf00      	nop
 801b3c0:	e7fd      	b.n	801b3be <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 801b3c2:	693b      	ldr	r3, [r7, #16]
 801b3c4:	3318      	adds	r3, #24
 801b3c6:	4618      	mov	r0, r3
 801b3c8:	f7fe f816 	bl	80193f8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801b3cc:	4b1d      	ldr	r3, [pc, #116]	@ (801b444 <xTaskRemoveFromEventList+0xb0>)
 801b3ce:	681b      	ldr	r3, [r3, #0]
 801b3d0:	2b00      	cmp	r3, #0
 801b3d2:	d11d      	bne.n	801b410 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 801b3d4:	693b      	ldr	r3, [r7, #16]
 801b3d6:	3304      	adds	r3, #4
 801b3d8:	4618      	mov	r0, r3
 801b3da:	f7fe f80d 	bl	80193f8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 801b3de:	693b      	ldr	r3, [r7, #16]
 801b3e0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801b3e2:	4b19      	ldr	r3, [pc, #100]	@ (801b448 <xTaskRemoveFromEventList+0xb4>)
 801b3e4:	681b      	ldr	r3, [r3, #0]
 801b3e6:	429a      	cmp	r2, r3
 801b3e8:	d903      	bls.n	801b3f2 <xTaskRemoveFromEventList+0x5e>
 801b3ea:	693b      	ldr	r3, [r7, #16]
 801b3ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801b3ee:	4a16      	ldr	r2, [pc, #88]	@ (801b448 <xTaskRemoveFromEventList+0xb4>)
 801b3f0:	6013      	str	r3, [r2, #0]
 801b3f2:	693b      	ldr	r3, [r7, #16]
 801b3f4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801b3f6:	4613      	mov	r3, r2
 801b3f8:	009b      	lsls	r3, r3, #2
 801b3fa:	4413      	add	r3, r2
 801b3fc:	009b      	lsls	r3, r3, #2
 801b3fe:	4a13      	ldr	r2, [pc, #76]	@ (801b44c <xTaskRemoveFromEventList+0xb8>)
 801b400:	441a      	add	r2, r3
 801b402:	693b      	ldr	r3, [r7, #16]
 801b404:	3304      	adds	r3, #4
 801b406:	4619      	mov	r1, r3
 801b408:	4610      	mov	r0, r2
 801b40a:	f7fd ff98 	bl	801933e <vListInsertEnd>
 801b40e:	e005      	b.n	801b41c <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 801b410:	693b      	ldr	r3, [r7, #16]
 801b412:	3318      	adds	r3, #24
 801b414:	4619      	mov	r1, r3
 801b416:	480e      	ldr	r0, [pc, #56]	@ (801b450 <xTaskRemoveFromEventList+0xbc>)
 801b418:	f7fd ff91 	bl	801933e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 801b41c:	693b      	ldr	r3, [r7, #16]
 801b41e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801b420:	4b0c      	ldr	r3, [pc, #48]	@ (801b454 <xTaskRemoveFromEventList+0xc0>)
 801b422:	681b      	ldr	r3, [r3, #0]
 801b424:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801b426:	429a      	cmp	r2, r3
 801b428:	d905      	bls.n	801b436 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 801b42a:	2301      	movs	r3, #1
 801b42c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 801b42e:	4b0a      	ldr	r3, [pc, #40]	@ (801b458 <xTaskRemoveFromEventList+0xc4>)
 801b430:	2201      	movs	r2, #1
 801b432:	601a      	str	r2, [r3, #0]
 801b434:	e001      	b.n	801b43a <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 801b436:	2300      	movs	r3, #0
 801b438:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 801b43a:	697b      	ldr	r3, [r7, #20]
}
 801b43c:	4618      	mov	r0, r3
 801b43e:	3718      	adds	r7, #24
 801b440:	46bd      	mov	sp, r7
 801b442:	bd80      	pop	{r7, pc}
 801b444:	200022a8 	.word	0x200022a8
 801b448:	20002288 	.word	0x20002288
 801b44c:	20001db0 	.word	0x20001db0
 801b450:	20002240 	.word	0x20002240
 801b454:	20001dac 	.word	0x20001dac
 801b458:	20002294 	.word	0x20002294

0801b45c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 801b45c:	b480      	push	{r7}
 801b45e:	b083      	sub	sp, #12
 801b460:	af00      	add	r7, sp, #0
 801b462:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 801b464:	4b06      	ldr	r3, [pc, #24]	@ (801b480 <vTaskInternalSetTimeOutState+0x24>)
 801b466:	681a      	ldr	r2, [r3, #0]
 801b468:	687b      	ldr	r3, [r7, #4]
 801b46a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 801b46c:	4b05      	ldr	r3, [pc, #20]	@ (801b484 <vTaskInternalSetTimeOutState+0x28>)
 801b46e:	681a      	ldr	r2, [r3, #0]
 801b470:	687b      	ldr	r3, [r7, #4]
 801b472:	605a      	str	r2, [r3, #4]
}
 801b474:	bf00      	nop
 801b476:	370c      	adds	r7, #12
 801b478:	46bd      	mov	sp, r7
 801b47a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b47e:	4770      	bx	lr
 801b480:	20002298 	.word	0x20002298
 801b484:	20002284 	.word	0x20002284

0801b488 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 801b488:	b580      	push	{r7, lr}
 801b48a:	b088      	sub	sp, #32
 801b48c:	af00      	add	r7, sp, #0
 801b48e:	6078      	str	r0, [r7, #4]
 801b490:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 801b492:	687b      	ldr	r3, [r7, #4]
 801b494:	2b00      	cmp	r3, #0
 801b496:	d10b      	bne.n	801b4b0 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 801b498:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801b49c:	f383 8811 	msr	BASEPRI, r3
 801b4a0:	f3bf 8f6f 	isb	sy
 801b4a4:	f3bf 8f4f 	dsb	sy
 801b4a8:	613b      	str	r3, [r7, #16]
}
 801b4aa:	bf00      	nop
 801b4ac:	bf00      	nop
 801b4ae:	e7fd      	b.n	801b4ac <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 801b4b0:	683b      	ldr	r3, [r7, #0]
 801b4b2:	2b00      	cmp	r3, #0
 801b4b4:	d10b      	bne.n	801b4ce <xTaskCheckForTimeOut+0x46>
	__asm volatile
 801b4b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801b4ba:	f383 8811 	msr	BASEPRI, r3
 801b4be:	f3bf 8f6f 	isb	sy
 801b4c2:	f3bf 8f4f 	dsb	sy
 801b4c6:	60fb      	str	r3, [r7, #12]
}
 801b4c8:	bf00      	nop
 801b4ca:	bf00      	nop
 801b4cc:	e7fd      	b.n	801b4ca <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 801b4ce:	f001 f87b 	bl	801c5c8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 801b4d2:	4b1d      	ldr	r3, [pc, #116]	@ (801b548 <xTaskCheckForTimeOut+0xc0>)
 801b4d4:	681b      	ldr	r3, [r3, #0]
 801b4d6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 801b4d8:	687b      	ldr	r3, [r7, #4]
 801b4da:	685b      	ldr	r3, [r3, #4]
 801b4dc:	69ba      	ldr	r2, [r7, #24]
 801b4de:	1ad3      	subs	r3, r2, r3
 801b4e0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 801b4e2:	683b      	ldr	r3, [r7, #0]
 801b4e4:	681b      	ldr	r3, [r3, #0]
 801b4e6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801b4ea:	d102      	bne.n	801b4f2 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 801b4ec:	2300      	movs	r3, #0
 801b4ee:	61fb      	str	r3, [r7, #28]
 801b4f0:	e023      	b.n	801b53a <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 801b4f2:	687b      	ldr	r3, [r7, #4]
 801b4f4:	681a      	ldr	r2, [r3, #0]
 801b4f6:	4b15      	ldr	r3, [pc, #84]	@ (801b54c <xTaskCheckForTimeOut+0xc4>)
 801b4f8:	681b      	ldr	r3, [r3, #0]
 801b4fa:	429a      	cmp	r2, r3
 801b4fc:	d007      	beq.n	801b50e <xTaskCheckForTimeOut+0x86>
 801b4fe:	687b      	ldr	r3, [r7, #4]
 801b500:	685b      	ldr	r3, [r3, #4]
 801b502:	69ba      	ldr	r2, [r7, #24]
 801b504:	429a      	cmp	r2, r3
 801b506:	d302      	bcc.n	801b50e <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 801b508:	2301      	movs	r3, #1
 801b50a:	61fb      	str	r3, [r7, #28]
 801b50c:	e015      	b.n	801b53a <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 801b50e:	683b      	ldr	r3, [r7, #0]
 801b510:	681b      	ldr	r3, [r3, #0]
 801b512:	697a      	ldr	r2, [r7, #20]
 801b514:	429a      	cmp	r2, r3
 801b516:	d20b      	bcs.n	801b530 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 801b518:	683b      	ldr	r3, [r7, #0]
 801b51a:	681a      	ldr	r2, [r3, #0]
 801b51c:	697b      	ldr	r3, [r7, #20]
 801b51e:	1ad2      	subs	r2, r2, r3
 801b520:	683b      	ldr	r3, [r7, #0]
 801b522:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 801b524:	6878      	ldr	r0, [r7, #4]
 801b526:	f7ff ff99 	bl	801b45c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 801b52a:	2300      	movs	r3, #0
 801b52c:	61fb      	str	r3, [r7, #28]
 801b52e:	e004      	b.n	801b53a <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 801b530:	683b      	ldr	r3, [r7, #0]
 801b532:	2200      	movs	r2, #0
 801b534:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 801b536:	2301      	movs	r3, #1
 801b538:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 801b53a:	f001 f877 	bl	801c62c <vPortExitCritical>

	return xReturn;
 801b53e:	69fb      	ldr	r3, [r7, #28]
}
 801b540:	4618      	mov	r0, r3
 801b542:	3720      	adds	r7, #32
 801b544:	46bd      	mov	sp, r7
 801b546:	bd80      	pop	{r7, pc}
 801b548:	20002284 	.word	0x20002284
 801b54c:	20002298 	.word	0x20002298

0801b550 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 801b550:	b480      	push	{r7}
 801b552:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 801b554:	4b03      	ldr	r3, [pc, #12]	@ (801b564 <vTaskMissedYield+0x14>)
 801b556:	2201      	movs	r2, #1
 801b558:	601a      	str	r2, [r3, #0]
}
 801b55a:	bf00      	nop
 801b55c:	46bd      	mov	sp, r7
 801b55e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b562:	4770      	bx	lr
 801b564:	20002294 	.word	0x20002294

0801b568 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 801b568:	b580      	push	{r7, lr}
 801b56a:	b082      	sub	sp, #8
 801b56c:	af00      	add	r7, sp, #0
 801b56e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 801b570:	f000 f852 	bl	801b618 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 801b574:	4b06      	ldr	r3, [pc, #24]	@ (801b590 <prvIdleTask+0x28>)
 801b576:	681b      	ldr	r3, [r3, #0]
 801b578:	2b01      	cmp	r3, #1
 801b57a:	d9f9      	bls.n	801b570 <prvIdleTask+0x8>
			{
				taskYIELD();
 801b57c:	4b05      	ldr	r3, [pc, #20]	@ (801b594 <prvIdleTask+0x2c>)
 801b57e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801b582:	601a      	str	r2, [r3, #0]
 801b584:	f3bf 8f4f 	dsb	sy
 801b588:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 801b58c:	e7f0      	b.n	801b570 <prvIdleTask+0x8>
 801b58e:	bf00      	nop
 801b590:	20001db0 	.word	0x20001db0
 801b594:	e000ed04 	.word	0xe000ed04

0801b598 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 801b598:	b580      	push	{r7, lr}
 801b59a:	b082      	sub	sp, #8
 801b59c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 801b59e:	2300      	movs	r3, #0
 801b5a0:	607b      	str	r3, [r7, #4]
 801b5a2:	e00c      	b.n	801b5be <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 801b5a4:	687a      	ldr	r2, [r7, #4]
 801b5a6:	4613      	mov	r3, r2
 801b5a8:	009b      	lsls	r3, r3, #2
 801b5aa:	4413      	add	r3, r2
 801b5ac:	009b      	lsls	r3, r3, #2
 801b5ae:	4a12      	ldr	r2, [pc, #72]	@ (801b5f8 <prvInitialiseTaskLists+0x60>)
 801b5b0:	4413      	add	r3, r2
 801b5b2:	4618      	mov	r0, r3
 801b5b4:	f7fd fe96 	bl	80192e4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 801b5b8:	687b      	ldr	r3, [r7, #4]
 801b5ba:	3301      	adds	r3, #1
 801b5bc:	607b      	str	r3, [r7, #4]
 801b5be:	687b      	ldr	r3, [r7, #4]
 801b5c0:	2b37      	cmp	r3, #55	@ 0x37
 801b5c2:	d9ef      	bls.n	801b5a4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 801b5c4:	480d      	ldr	r0, [pc, #52]	@ (801b5fc <prvInitialiseTaskLists+0x64>)
 801b5c6:	f7fd fe8d 	bl	80192e4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 801b5ca:	480d      	ldr	r0, [pc, #52]	@ (801b600 <prvInitialiseTaskLists+0x68>)
 801b5cc:	f7fd fe8a 	bl	80192e4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 801b5d0:	480c      	ldr	r0, [pc, #48]	@ (801b604 <prvInitialiseTaskLists+0x6c>)
 801b5d2:	f7fd fe87 	bl	80192e4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 801b5d6:	480c      	ldr	r0, [pc, #48]	@ (801b608 <prvInitialiseTaskLists+0x70>)
 801b5d8:	f7fd fe84 	bl	80192e4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 801b5dc:	480b      	ldr	r0, [pc, #44]	@ (801b60c <prvInitialiseTaskLists+0x74>)
 801b5de:	f7fd fe81 	bl	80192e4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 801b5e2:	4b0b      	ldr	r3, [pc, #44]	@ (801b610 <prvInitialiseTaskLists+0x78>)
 801b5e4:	4a05      	ldr	r2, [pc, #20]	@ (801b5fc <prvInitialiseTaskLists+0x64>)
 801b5e6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 801b5e8:	4b0a      	ldr	r3, [pc, #40]	@ (801b614 <prvInitialiseTaskLists+0x7c>)
 801b5ea:	4a05      	ldr	r2, [pc, #20]	@ (801b600 <prvInitialiseTaskLists+0x68>)
 801b5ec:	601a      	str	r2, [r3, #0]
}
 801b5ee:	bf00      	nop
 801b5f0:	3708      	adds	r7, #8
 801b5f2:	46bd      	mov	sp, r7
 801b5f4:	bd80      	pop	{r7, pc}
 801b5f6:	bf00      	nop
 801b5f8:	20001db0 	.word	0x20001db0
 801b5fc:	20002210 	.word	0x20002210
 801b600:	20002224 	.word	0x20002224
 801b604:	20002240 	.word	0x20002240
 801b608:	20002254 	.word	0x20002254
 801b60c:	2000226c 	.word	0x2000226c
 801b610:	20002238 	.word	0x20002238
 801b614:	2000223c 	.word	0x2000223c

0801b618 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 801b618:	b580      	push	{r7, lr}
 801b61a:	b082      	sub	sp, #8
 801b61c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 801b61e:	e019      	b.n	801b654 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 801b620:	f000 ffd2 	bl	801c5c8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801b624:	4b10      	ldr	r3, [pc, #64]	@ (801b668 <prvCheckTasksWaitingTermination+0x50>)
 801b626:	68db      	ldr	r3, [r3, #12]
 801b628:	68db      	ldr	r3, [r3, #12]
 801b62a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801b62c:	687b      	ldr	r3, [r7, #4]
 801b62e:	3304      	adds	r3, #4
 801b630:	4618      	mov	r0, r3
 801b632:	f7fd fee1 	bl	80193f8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 801b636:	4b0d      	ldr	r3, [pc, #52]	@ (801b66c <prvCheckTasksWaitingTermination+0x54>)
 801b638:	681b      	ldr	r3, [r3, #0]
 801b63a:	3b01      	subs	r3, #1
 801b63c:	4a0b      	ldr	r2, [pc, #44]	@ (801b66c <prvCheckTasksWaitingTermination+0x54>)
 801b63e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 801b640:	4b0b      	ldr	r3, [pc, #44]	@ (801b670 <prvCheckTasksWaitingTermination+0x58>)
 801b642:	681b      	ldr	r3, [r3, #0]
 801b644:	3b01      	subs	r3, #1
 801b646:	4a0a      	ldr	r2, [pc, #40]	@ (801b670 <prvCheckTasksWaitingTermination+0x58>)
 801b648:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 801b64a:	f000 ffef 	bl	801c62c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 801b64e:	6878      	ldr	r0, [r7, #4]
 801b650:	f000 f810 	bl	801b674 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 801b654:	4b06      	ldr	r3, [pc, #24]	@ (801b670 <prvCheckTasksWaitingTermination+0x58>)
 801b656:	681b      	ldr	r3, [r3, #0]
 801b658:	2b00      	cmp	r3, #0
 801b65a:	d1e1      	bne.n	801b620 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 801b65c:	bf00      	nop
 801b65e:	bf00      	nop
 801b660:	3708      	adds	r7, #8
 801b662:	46bd      	mov	sp, r7
 801b664:	bd80      	pop	{r7, pc}
 801b666:	bf00      	nop
 801b668:	20002254 	.word	0x20002254
 801b66c:	20002280 	.word	0x20002280
 801b670:	20002268 	.word	0x20002268

0801b674 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 801b674:	b580      	push	{r7, lr}
 801b676:	b084      	sub	sp, #16
 801b678:	af00      	add	r7, sp, #0
 801b67a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 801b67c:	687b      	ldr	r3, [r7, #4]
 801b67e:	3354      	adds	r3, #84	@ 0x54
 801b680:	4618      	mov	r0, r3
 801b682:	f002 fa87 	bl	801db94 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 801b686:	687b      	ldr	r3, [r7, #4]
 801b688:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 801b68c:	2b00      	cmp	r3, #0
 801b68e:	d108      	bne.n	801b6a2 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 801b690:	687b      	ldr	r3, [r7, #4]
 801b692:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801b694:	4618      	mov	r0, r3
 801b696:	f001 f987 	bl	801c9a8 <vPortFree>
				vPortFree( pxTCB );
 801b69a:	6878      	ldr	r0, [r7, #4]
 801b69c:	f001 f984 	bl	801c9a8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 801b6a0:	e019      	b.n	801b6d6 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 801b6a2:	687b      	ldr	r3, [r7, #4]
 801b6a4:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 801b6a8:	2b01      	cmp	r3, #1
 801b6aa:	d103      	bne.n	801b6b4 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 801b6ac:	6878      	ldr	r0, [r7, #4]
 801b6ae:	f001 f97b 	bl	801c9a8 <vPortFree>
	}
 801b6b2:	e010      	b.n	801b6d6 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 801b6b4:	687b      	ldr	r3, [r7, #4]
 801b6b6:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 801b6ba:	2b02      	cmp	r3, #2
 801b6bc:	d00b      	beq.n	801b6d6 <prvDeleteTCB+0x62>
	__asm volatile
 801b6be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801b6c2:	f383 8811 	msr	BASEPRI, r3
 801b6c6:	f3bf 8f6f 	isb	sy
 801b6ca:	f3bf 8f4f 	dsb	sy
 801b6ce:	60fb      	str	r3, [r7, #12]
}
 801b6d0:	bf00      	nop
 801b6d2:	bf00      	nop
 801b6d4:	e7fd      	b.n	801b6d2 <prvDeleteTCB+0x5e>
	}
 801b6d6:	bf00      	nop
 801b6d8:	3710      	adds	r7, #16
 801b6da:	46bd      	mov	sp, r7
 801b6dc:	bd80      	pop	{r7, pc}
	...

0801b6e0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 801b6e0:	b480      	push	{r7}
 801b6e2:	b083      	sub	sp, #12
 801b6e4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801b6e6:	4b0c      	ldr	r3, [pc, #48]	@ (801b718 <prvResetNextTaskUnblockTime+0x38>)
 801b6e8:	681b      	ldr	r3, [r3, #0]
 801b6ea:	681b      	ldr	r3, [r3, #0]
 801b6ec:	2b00      	cmp	r3, #0
 801b6ee:	d104      	bne.n	801b6fa <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 801b6f0:	4b0a      	ldr	r3, [pc, #40]	@ (801b71c <prvResetNextTaskUnblockTime+0x3c>)
 801b6f2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801b6f6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 801b6f8:	e008      	b.n	801b70c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801b6fa:	4b07      	ldr	r3, [pc, #28]	@ (801b718 <prvResetNextTaskUnblockTime+0x38>)
 801b6fc:	681b      	ldr	r3, [r3, #0]
 801b6fe:	68db      	ldr	r3, [r3, #12]
 801b700:	68db      	ldr	r3, [r3, #12]
 801b702:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 801b704:	687b      	ldr	r3, [r7, #4]
 801b706:	685b      	ldr	r3, [r3, #4]
 801b708:	4a04      	ldr	r2, [pc, #16]	@ (801b71c <prvResetNextTaskUnblockTime+0x3c>)
 801b70a:	6013      	str	r3, [r2, #0]
}
 801b70c:	bf00      	nop
 801b70e:	370c      	adds	r7, #12
 801b710:	46bd      	mov	sp, r7
 801b712:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b716:	4770      	bx	lr
 801b718:	20002238 	.word	0x20002238
 801b71c:	200022a0 	.word	0x200022a0

0801b720 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 801b720:	b480      	push	{r7}
 801b722:	b083      	sub	sp, #12
 801b724:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 801b726:	4b0b      	ldr	r3, [pc, #44]	@ (801b754 <xTaskGetSchedulerState+0x34>)
 801b728:	681b      	ldr	r3, [r3, #0]
 801b72a:	2b00      	cmp	r3, #0
 801b72c:	d102      	bne.n	801b734 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 801b72e:	2301      	movs	r3, #1
 801b730:	607b      	str	r3, [r7, #4]
 801b732:	e008      	b.n	801b746 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801b734:	4b08      	ldr	r3, [pc, #32]	@ (801b758 <xTaskGetSchedulerState+0x38>)
 801b736:	681b      	ldr	r3, [r3, #0]
 801b738:	2b00      	cmp	r3, #0
 801b73a:	d102      	bne.n	801b742 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 801b73c:	2302      	movs	r3, #2
 801b73e:	607b      	str	r3, [r7, #4]
 801b740:	e001      	b.n	801b746 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 801b742:	2300      	movs	r3, #0
 801b744:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 801b746:	687b      	ldr	r3, [r7, #4]
	}
 801b748:	4618      	mov	r0, r3
 801b74a:	370c      	adds	r7, #12
 801b74c:	46bd      	mov	sp, r7
 801b74e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b752:	4770      	bx	lr
 801b754:	2000228c 	.word	0x2000228c
 801b758:	200022a8 	.word	0x200022a8

0801b75c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 801b75c:	b580      	push	{r7, lr}
 801b75e:	b084      	sub	sp, #16
 801b760:	af00      	add	r7, sp, #0
 801b762:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 801b764:	687b      	ldr	r3, [r7, #4]
 801b766:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 801b768:	2300      	movs	r3, #0
 801b76a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 801b76c:	687b      	ldr	r3, [r7, #4]
 801b76e:	2b00      	cmp	r3, #0
 801b770:	d051      	beq.n	801b816 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 801b772:	68bb      	ldr	r3, [r7, #8]
 801b774:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801b776:	4b2a      	ldr	r3, [pc, #168]	@ (801b820 <xTaskPriorityInherit+0xc4>)
 801b778:	681b      	ldr	r3, [r3, #0]
 801b77a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801b77c:	429a      	cmp	r2, r3
 801b77e:	d241      	bcs.n	801b804 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 801b780:	68bb      	ldr	r3, [r7, #8]
 801b782:	699b      	ldr	r3, [r3, #24]
 801b784:	2b00      	cmp	r3, #0
 801b786:	db06      	blt.n	801b796 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801b788:	4b25      	ldr	r3, [pc, #148]	@ (801b820 <xTaskPriorityInherit+0xc4>)
 801b78a:	681b      	ldr	r3, [r3, #0]
 801b78c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801b78e:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 801b792:	68bb      	ldr	r3, [r7, #8]
 801b794:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 801b796:	68bb      	ldr	r3, [r7, #8]
 801b798:	6959      	ldr	r1, [r3, #20]
 801b79a:	68bb      	ldr	r3, [r7, #8]
 801b79c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801b79e:	4613      	mov	r3, r2
 801b7a0:	009b      	lsls	r3, r3, #2
 801b7a2:	4413      	add	r3, r2
 801b7a4:	009b      	lsls	r3, r3, #2
 801b7a6:	4a1f      	ldr	r2, [pc, #124]	@ (801b824 <xTaskPriorityInherit+0xc8>)
 801b7a8:	4413      	add	r3, r2
 801b7aa:	4299      	cmp	r1, r3
 801b7ac:	d122      	bne.n	801b7f4 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801b7ae:	68bb      	ldr	r3, [r7, #8]
 801b7b0:	3304      	adds	r3, #4
 801b7b2:	4618      	mov	r0, r3
 801b7b4:	f7fd fe20 	bl	80193f8 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 801b7b8:	4b19      	ldr	r3, [pc, #100]	@ (801b820 <xTaskPriorityInherit+0xc4>)
 801b7ba:	681b      	ldr	r3, [r3, #0]
 801b7bc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801b7be:	68bb      	ldr	r3, [r7, #8]
 801b7c0:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 801b7c2:	68bb      	ldr	r3, [r7, #8]
 801b7c4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801b7c6:	4b18      	ldr	r3, [pc, #96]	@ (801b828 <xTaskPriorityInherit+0xcc>)
 801b7c8:	681b      	ldr	r3, [r3, #0]
 801b7ca:	429a      	cmp	r2, r3
 801b7cc:	d903      	bls.n	801b7d6 <xTaskPriorityInherit+0x7a>
 801b7ce:	68bb      	ldr	r3, [r7, #8]
 801b7d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801b7d2:	4a15      	ldr	r2, [pc, #84]	@ (801b828 <xTaskPriorityInherit+0xcc>)
 801b7d4:	6013      	str	r3, [r2, #0]
 801b7d6:	68bb      	ldr	r3, [r7, #8]
 801b7d8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801b7da:	4613      	mov	r3, r2
 801b7dc:	009b      	lsls	r3, r3, #2
 801b7de:	4413      	add	r3, r2
 801b7e0:	009b      	lsls	r3, r3, #2
 801b7e2:	4a10      	ldr	r2, [pc, #64]	@ (801b824 <xTaskPriorityInherit+0xc8>)
 801b7e4:	441a      	add	r2, r3
 801b7e6:	68bb      	ldr	r3, [r7, #8]
 801b7e8:	3304      	adds	r3, #4
 801b7ea:	4619      	mov	r1, r3
 801b7ec:	4610      	mov	r0, r2
 801b7ee:	f7fd fda6 	bl	801933e <vListInsertEnd>
 801b7f2:	e004      	b.n	801b7fe <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 801b7f4:	4b0a      	ldr	r3, [pc, #40]	@ (801b820 <xTaskPriorityInherit+0xc4>)
 801b7f6:	681b      	ldr	r3, [r3, #0]
 801b7f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801b7fa:	68bb      	ldr	r3, [r7, #8]
 801b7fc:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 801b7fe:	2301      	movs	r3, #1
 801b800:	60fb      	str	r3, [r7, #12]
 801b802:	e008      	b.n	801b816 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 801b804:	68bb      	ldr	r3, [r7, #8]
 801b806:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 801b808:	4b05      	ldr	r3, [pc, #20]	@ (801b820 <xTaskPriorityInherit+0xc4>)
 801b80a:	681b      	ldr	r3, [r3, #0]
 801b80c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801b80e:	429a      	cmp	r2, r3
 801b810:	d201      	bcs.n	801b816 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 801b812:	2301      	movs	r3, #1
 801b814:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 801b816:	68fb      	ldr	r3, [r7, #12]
	}
 801b818:	4618      	mov	r0, r3
 801b81a:	3710      	adds	r7, #16
 801b81c:	46bd      	mov	sp, r7
 801b81e:	bd80      	pop	{r7, pc}
 801b820:	20001dac 	.word	0x20001dac
 801b824:	20001db0 	.word	0x20001db0
 801b828:	20002288 	.word	0x20002288

0801b82c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 801b82c:	b580      	push	{r7, lr}
 801b82e:	b086      	sub	sp, #24
 801b830:	af00      	add	r7, sp, #0
 801b832:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 801b834:	687b      	ldr	r3, [r7, #4]
 801b836:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 801b838:	2300      	movs	r3, #0
 801b83a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 801b83c:	687b      	ldr	r3, [r7, #4]
 801b83e:	2b00      	cmp	r3, #0
 801b840:	d058      	beq.n	801b8f4 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 801b842:	4b2f      	ldr	r3, [pc, #188]	@ (801b900 <xTaskPriorityDisinherit+0xd4>)
 801b844:	681b      	ldr	r3, [r3, #0]
 801b846:	693a      	ldr	r2, [r7, #16]
 801b848:	429a      	cmp	r2, r3
 801b84a:	d00b      	beq.n	801b864 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 801b84c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801b850:	f383 8811 	msr	BASEPRI, r3
 801b854:	f3bf 8f6f 	isb	sy
 801b858:	f3bf 8f4f 	dsb	sy
 801b85c:	60fb      	str	r3, [r7, #12]
}
 801b85e:	bf00      	nop
 801b860:	bf00      	nop
 801b862:	e7fd      	b.n	801b860 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 801b864:	693b      	ldr	r3, [r7, #16]
 801b866:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801b868:	2b00      	cmp	r3, #0
 801b86a:	d10b      	bne.n	801b884 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 801b86c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801b870:	f383 8811 	msr	BASEPRI, r3
 801b874:	f3bf 8f6f 	isb	sy
 801b878:	f3bf 8f4f 	dsb	sy
 801b87c:	60bb      	str	r3, [r7, #8]
}
 801b87e:	bf00      	nop
 801b880:	bf00      	nop
 801b882:	e7fd      	b.n	801b880 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 801b884:	693b      	ldr	r3, [r7, #16]
 801b886:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801b888:	1e5a      	subs	r2, r3, #1
 801b88a:	693b      	ldr	r3, [r7, #16]
 801b88c:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 801b88e:	693b      	ldr	r3, [r7, #16]
 801b890:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801b892:	693b      	ldr	r3, [r7, #16]
 801b894:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801b896:	429a      	cmp	r2, r3
 801b898:	d02c      	beq.n	801b8f4 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 801b89a:	693b      	ldr	r3, [r7, #16]
 801b89c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801b89e:	2b00      	cmp	r3, #0
 801b8a0:	d128      	bne.n	801b8f4 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801b8a2:	693b      	ldr	r3, [r7, #16]
 801b8a4:	3304      	adds	r3, #4
 801b8a6:	4618      	mov	r0, r3
 801b8a8:	f7fd fda6 	bl	80193f8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 801b8ac:	693b      	ldr	r3, [r7, #16]
 801b8ae:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 801b8b0:	693b      	ldr	r3, [r7, #16]
 801b8b2:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801b8b4:	693b      	ldr	r3, [r7, #16]
 801b8b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801b8b8:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 801b8bc:	693b      	ldr	r3, [r7, #16]
 801b8be:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 801b8c0:	693b      	ldr	r3, [r7, #16]
 801b8c2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801b8c4:	4b0f      	ldr	r3, [pc, #60]	@ (801b904 <xTaskPriorityDisinherit+0xd8>)
 801b8c6:	681b      	ldr	r3, [r3, #0]
 801b8c8:	429a      	cmp	r2, r3
 801b8ca:	d903      	bls.n	801b8d4 <xTaskPriorityDisinherit+0xa8>
 801b8cc:	693b      	ldr	r3, [r7, #16]
 801b8ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801b8d0:	4a0c      	ldr	r2, [pc, #48]	@ (801b904 <xTaskPriorityDisinherit+0xd8>)
 801b8d2:	6013      	str	r3, [r2, #0]
 801b8d4:	693b      	ldr	r3, [r7, #16]
 801b8d6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801b8d8:	4613      	mov	r3, r2
 801b8da:	009b      	lsls	r3, r3, #2
 801b8dc:	4413      	add	r3, r2
 801b8de:	009b      	lsls	r3, r3, #2
 801b8e0:	4a09      	ldr	r2, [pc, #36]	@ (801b908 <xTaskPriorityDisinherit+0xdc>)
 801b8e2:	441a      	add	r2, r3
 801b8e4:	693b      	ldr	r3, [r7, #16]
 801b8e6:	3304      	adds	r3, #4
 801b8e8:	4619      	mov	r1, r3
 801b8ea:	4610      	mov	r0, r2
 801b8ec:	f7fd fd27 	bl	801933e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 801b8f0:	2301      	movs	r3, #1
 801b8f2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 801b8f4:	697b      	ldr	r3, [r7, #20]
	}
 801b8f6:	4618      	mov	r0, r3
 801b8f8:	3718      	adds	r7, #24
 801b8fa:	46bd      	mov	sp, r7
 801b8fc:	bd80      	pop	{r7, pc}
 801b8fe:	bf00      	nop
 801b900:	20001dac 	.word	0x20001dac
 801b904:	20002288 	.word	0x20002288
 801b908:	20001db0 	.word	0x20001db0

0801b90c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 801b90c:	b580      	push	{r7, lr}
 801b90e:	b088      	sub	sp, #32
 801b910:	af00      	add	r7, sp, #0
 801b912:	6078      	str	r0, [r7, #4]
 801b914:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 801b916:	687b      	ldr	r3, [r7, #4]
 801b918:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 801b91a:	2301      	movs	r3, #1
 801b91c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 801b91e:	687b      	ldr	r3, [r7, #4]
 801b920:	2b00      	cmp	r3, #0
 801b922:	d06c      	beq.n	801b9fe <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 801b924:	69bb      	ldr	r3, [r7, #24]
 801b926:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801b928:	2b00      	cmp	r3, #0
 801b92a:	d10b      	bne.n	801b944 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 801b92c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801b930:	f383 8811 	msr	BASEPRI, r3
 801b934:	f3bf 8f6f 	isb	sy
 801b938:	f3bf 8f4f 	dsb	sy
 801b93c:	60fb      	str	r3, [r7, #12]
}
 801b93e:	bf00      	nop
 801b940:	bf00      	nop
 801b942:	e7fd      	b.n	801b940 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 801b944:	69bb      	ldr	r3, [r7, #24]
 801b946:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801b948:	683a      	ldr	r2, [r7, #0]
 801b94a:	429a      	cmp	r2, r3
 801b94c:	d902      	bls.n	801b954 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 801b94e:	683b      	ldr	r3, [r7, #0]
 801b950:	61fb      	str	r3, [r7, #28]
 801b952:	e002      	b.n	801b95a <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 801b954:	69bb      	ldr	r3, [r7, #24]
 801b956:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801b958:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 801b95a:	69bb      	ldr	r3, [r7, #24]
 801b95c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801b95e:	69fa      	ldr	r2, [r7, #28]
 801b960:	429a      	cmp	r2, r3
 801b962:	d04c      	beq.n	801b9fe <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 801b964:	69bb      	ldr	r3, [r7, #24]
 801b966:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801b968:	697a      	ldr	r2, [r7, #20]
 801b96a:	429a      	cmp	r2, r3
 801b96c:	d147      	bne.n	801b9fe <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 801b96e:	4b26      	ldr	r3, [pc, #152]	@ (801ba08 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 801b970:	681b      	ldr	r3, [r3, #0]
 801b972:	69ba      	ldr	r2, [r7, #24]
 801b974:	429a      	cmp	r2, r3
 801b976:	d10b      	bne.n	801b990 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 801b978:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801b97c:	f383 8811 	msr	BASEPRI, r3
 801b980:	f3bf 8f6f 	isb	sy
 801b984:	f3bf 8f4f 	dsb	sy
 801b988:	60bb      	str	r3, [r7, #8]
}
 801b98a:	bf00      	nop
 801b98c:	bf00      	nop
 801b98e:	e7fd      	b.n	801b98c <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 801b990:	69bb      	ldr	r3, [r7, #24]
 801b992:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801b994:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 801b996:	69bb      	ldr	r3, [r7, #24]
 801b998:	69fa      	ldr	r2, [r7, #28]
 801b99a:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 801b99c:	69bb      	ldr	r3, [r7, #24]
 801b99e:	699b      	ldr	r3, [r3, #24]
 801b9a0:	2b00      	cmp	r3, #0
 801b9a2:	db04      	blt.n	801b9ae <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801b9a4:	69fb      	ldr	r3, [r7, #28]
 801b9a6:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 801b9aa:	69bb      	ldr	r3, [r7, #24]
 801b9ac:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 801b9ae:	69bb      	ldr	r3, [r7, #24]
 801b9b0:	6959      	ldr	r1, [r3, #20]
 801b9b2:	693a      	ldr	r2, [r7, #16]
 801b9b4:	4613      	mov	r3, r2
 801b9b6:	009b      	lsls	r3, r3, #2
 801b9b8:	4413      	add	r3, r2
 801b9ba:	009b      	lsls	r3, r3, #2
 801b9bc:	4a13      	ldr	r2, [pc, #76]	@ (801ba0c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 801b9be:	4413      	add	r3, r2
 801b9c0:	4299      	cmp	r1, r3
 801b9c2:	d11c      	bne.n	801b9fe <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801b9c4:	69bb      	ldr	r3, [r7, #24]
 801b9c6:	3304      	adds	r3, #4
 801b9c8:	4618      	mov	r0, r3
 801b9ca:	f7fd fd15 	bl	80193f8 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 801b9ce:	69bb      	ldr	r3, [r7, #24]
 801b9d0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801b9d2:	4b0f      	ldr	r3, [pc, #60]	@ (801ba10 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 801b9d4:	681b      	ldr	r3, [r3, #0]
 801b9d6:	429a      	cmp	r2, r3
 801b9d8:	d903      	bls.n	801b9e2 <vTaskPriorityDisinheritAfterTimeout+0xd6>
 801b9da:	69bb      	ldr	r3, [r7, #24]
 801b9dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801b9de:	4a0c      	ldr	r2, [pc, #48]	@ (801ba10 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 801b9e0:	6013      	str	r3, [r2, #0]
 801b9e2:	69bb      	ldr	r3, [r7, #24]
 801b9e4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801b9e6:	4613      	mov	r3, r2
 801b9e8:	009b      	lsls	r3, r3, #2
 801b9ea:	4413      	add	r3, r2
 801b9ec:	009b      	lsls	r3, r3, #2
 801b9ee:	4a07      	ldr	r2, [pc, #28]	@ (801ba0c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 801b9f0:	441a      	add	r2, r3
 801b9f2:	69bb      	ldr	r3, [r7, #24]
 801b9f4:	3304      	adds	r3, #4
 801b9f6:	4619      	mov	r1, r3
 801b9f8:	4610      	mov	r0, r2
 801b9fa:	f7fd fca0 	bl	801933e <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 801b9fe:	bf00      	nop
 801ba00:	3720      	adds	r7, #32
 801ba02:	46bd      	mov	sp, r7
 801ba04:	bd80      	pop	{r7, pc}
 801ba06:	bf00      	nop
 801ba08:	20001dac 	.word	0x20001dac
 801ba0c:	20001db0 	.word	0x20001db0
 801ba10:	20002288 	.word	0x20002288

0801ba14 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 801ba14:	b480      	push	{r7}
 801ba16:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 801ba18:	4b07      	ldr	r3, [pc, #28]	@ (801ba38 <pvTaskIncrementMutexHeldCount+0x24>)
 801ba1a:	681b      	ldr	r3, [r3, #0]
 801ba1c:	2b00      	cmp	r3, #0
 801ba1e:	d004      	beq.n	801ba2a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 801ba20:	4b05      	ldr	r3, [pc, #20]	@ (801ba38 <pvTaskIncrementMutexHeldCount+0x24>)
 801ba22:	681b      	ldr	r3, [r3, #0]
 801ba24:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801ba26:	3201      	adds	r2, #1
 801ba28:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 801ba2a:	4b03      	ldr	r3, [pc, #12]	@ (801ba38 <pvTaskIncrementMutexHeldCount+0x24>)
 801ba2c:	681b      	ldr	r3, [r3, #0]
	}
 801ba2e:	4618      	mov	r0, r3
 801ba30:	46bd      	mov	sp, r7
 801ba32:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ba36:	4770      	bx	lr
 801ba38:	20001dac 	.word	0x20001dac

0801ba3c <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 801ba3c:	b580      	push	{r7, lr}
 801ba3e:	b08e      	sub	sp, #56	@ 0x38
 801ba40:	af00      	add	r7, sp, #0
 801ba42:	60f8      	str	r0, [r7, #12]
 801ba44:	60b9      	str	r1, [r7, #8]
 801ba46:	603b      	str	r3, [r7, #0]
 801ba48:	4613      	mov	r3, r2
 801ba4a:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 801ba4c:	2301      	movs	r3, #1
 801ba4e:	637b      	str	r3, [r7, #52]	@ 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 801ba50:	68fb      	ldr	r3, [r7, #12]
 801ba52:	2b00      	cmp	r3, #0
 801ba54:	d10b      	bne.n	801ba6e <xTaskGenericNotifyFromISR+0x32>
	__asm volatile
 801ba56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801ba5a:	f383 8811 	msr	BASEPRI, r3
 801ba5e:	f3bf 8f6f 	isb	sy
 801ba62:	f3bf 8f4f 	dsb	sy
 801ba66:	627b      	str	r3, [r7, #36]	@ 0x24
}
 801ba68:	bf00      	nop
 801ba6a:	bf00      	nop
 801ba6c:	e7fd      	b.n	801ba6a <xTaskGenericNotifyFromISR+0x2e>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801ba6e:	f000 fe8b 	bl	801c788 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 801ba72:	68fb      	ldr	r3, [r7, #12]
 801ba74:	633b      	str	r3, [r7, #48]	@ 0x30
	__asm volatile
 801ba76:	f3ef 8211 	mrs	r2, BASEPRI
 801ba7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801ba7e:	f383 8811 	msr	BASEPRI, r3
 801ba82:	f3bf 8f6f 	isb	sy
 801ba86:	f3bf 8f4f 	dsb	sy
 801ba8a:	623a      	str	r2, [r7, #32]
 801ba8c:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 801ba8e:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 801ba90:	62fb      	str	r3, [r7, #44]	@ 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 801ba92:	683b      	ldr	r3, [r7, #0]
 801ba94:	2b00      	cmp	r3, #0
 801ba96:	d004      	beq.n	801baa2 <xTaskGenericNotifyFromISR+0x66>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 801ba98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801ba9a:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 801ba9e:	683b      	ldr	r3, [r7, #0]
 801baa0:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 801baa2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801baa4:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 801baa8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 801baac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801baae:	2202      	movs	r2, #2
 801bab0:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4

			switch( eAction )
 801bab4:	79fb      	ldrb	r3, [r7, #7]
 801bab6:	2b04      	cmp	r3, #4
 801bab8:	d82e      	bhi.n	801bb18 <xTaskGenericNotifyFromISR+0xdc>
 801baba:	a201      	add	r2, pc, #4	@ (adr r2, 801bac0 <xTaskGenericNotifyFromISR+0x84>)
 801babc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801bac0:	0801bb3d 	.word	0x0801bb3d
 801bac4:	0801bad5 	.word	0x0801bad5
 801bac8:	0801bae7 	.word	0x0801bae7
 801bacc:	0801baf7 	.word	0x0801baf7
 801bad0:	0801bb01 	.word	0x0801bb01
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 801bad4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801bad6:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 801bada:	68bb      	ldr	r3, [r7, #8]
 801badc:	431a      	orrs	r2, r3
 801bade:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801bae0:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 801bae4:	e02d      	b.n	801bb42 <xTaskGenericNotifyFromISR+0x106>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 801bae6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801bae8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 801baec:	1c5a      	adds	r2, r3, #1
 801baee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801baf0:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 801baf4:	e025      	b.n	801bb42 <xTaskGenericNotifyFromISR+0x106>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 801baf6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801baf8:	68ba      	ldr	r2, [r7, #8]
 801bafa:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 801bafe:	e020      	b.n	801bb42 <xTaskGenericNotifyFromISR+0x106>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 801bb00:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 801bb04:	2b02      	cmp	r3, #2
 801bb06:	d004      	beq.n	801bb12 <xTaskGenericNotifyFromISR+0xd6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 801bb08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801bb0a:	68ba      	ldr	r2, [r7, #8]
 801bb0c:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 801bb10:	e017      	b.n	801bb42 <xTaskGenericNotifyFromISR+0x106>
						xReturn = pdFAIL;
 801bb12:	2300      	movs	r3, #0
 801bb14:	637b      	str	r3, [r7, #52]	@ 0x34
					break;
 801bb16:	e014      	b.n	801bb42 <xTaskGenericNotifyFromISR+0x106>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 801bb18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801bb1a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 801bb1e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801bb22:	d00d      	beq.n	801bb40 <xTaskGenericNotifyFromISR+0x104>
	__asm volatile
 801bb24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801bb28:	f383 8811 	msr	BASEPRI, r3
 801bb2c:	f3bf 8f6f 	isb	sy
 801bb30:	f3bf 8f4f 	dsb	sy
 801bb34:	61bb      	str	r3, [r7, #24]
}
 801bb36:	bf00      	nop
 801bb38:	bf00      	nop
 801bb3a:	e7fd      	b.n	801bb38 <xTaskGenericNotifyFromISR+0xfc>
					break;
 801bb3c:	bf00      	nop
 801bb3e:	e000      	b.n	801bb42 <xTaskGenericNotifyFromISR+0x106>
					break;
 801bb40:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 801bb42:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 801bb46:	2b01      	cmp	r3, #1
 801bb48:	d147      	bne.n	801bbda <xTaskGenericNotifyFromISR+0x19e>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 801bb4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801bb4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801bb4e:	2b00      	cmp	r3, #0
 801bb50:	d00b      	beq.n	801bb6a <xTaskGenericNotifyFromISR+0x12e>
	__asm volatile
 801bb52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801bb56:	f383 8811 	msr	BASEPRI, r3
 801bb5a:	f3bf 8f6f 	isb	sy
 801bb5e:	f3bf 8f4f 	dsb	sy
 801bb62:	617b      	str	r3, [r7, #20]
}
 801bb64:	bf00      	nop
 801bb66:	bf00      	nop
 801bb68:	e7fd      	b.n	801bb66 <xTaskGenericNotifyFromISR+0x12a>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801bb6a:	4b21      	ldr	r3, [pc, #132]	@ (801bbf0 <xTaskGenericNotifyFromISR+0x1b4>)
 801bb6c:	681b      	ldr	r3, [r3, #0]
 801bb6e:	2b00      	cmp	r3, #0
 801bb70:	d11d      	bne.n	801bbae <xTaskGenericNotifyFromISR+0x172>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801bb72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801bb74:	3304      	adds	r3, #4
 801bb76:	4618      	mov	r0, r3
 801bb78:	f7fd fc3e 	bl	80193f8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 801bb7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801bb7e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801bb80:	4b1c      	ldr	r3, [pc, #112]	@ (801bbf4 <xTaskGenericNotifyFromISR+0x1b8>)
 801bb82:	681b      	ldr	r3, [r3, #0]
 801bb84:	429a      	cmp	r2, r3
 801bb86:	d903      	bls.n	801bb90 <xTaskGenericNotifyFromISR+0x154>
 801bb88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801bb8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801bb8c:	4a19      	ldr	r2, [pc, #100]	@ (801bbf4 <xTaskGenericNotifyFromISR+0x1b8>)
 801bb8e:	6013      	str	r3, [r2, #0]
 801bb90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801bb92:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801bb94:	4613      	mov	r3, r2
 801bb96:	009b      	lsls	r3, r3, #2
 801bb98:	4413      	add	r3, r2
 801bb9a:	009b      	lsls	r3, r3, #2
 801bb9c:	4a16      	ldr	r2, [pc, #88]	@ (801bbf8 <xTaskGenericNotifyFromISR+0x1bc>)
 801bb9e:	441a      	add	r2, r3
 801bba0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801bba2:	3304      	adds	r3, #4
 801bba4:	4619      	mov	r1, r3
 801bba6:	4610      	mov	r0, r2
 801bba8:	f7fd fbc9 	bl	801933e <vListInsertEnd>
 801bbac:	e005      	b.n	801bbba <xTaskGenericNotifyFromISR+0x17e>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 801bbae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801bbb0:	3318      	adds	r3, #24
 801bbb2:	4619      	mov	r1, r3
 801bbb4:	4811      	ldr	r0, [pc, #68]	@ (801bbfc <xTaskGenericNotifyFromISR+0x1c0>)
 801bbb6:	f7fd fbc2 	bl	801933e <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 801bbba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801bbbc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801bbbe:	4b10      	ldr	r3, [pc, #64]	@ (801bc00 <xTaskGenericNotifyFromISR+0x1c4>)
 801bbc0:	681b      	ldr	r3, [r3, #0]
 801bbc2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801bbc4:	429a      	cmp	r2, r3
 801bbc6:	d908      	bls.n	801bbda <xTaskGenericNotifyFromISR+0x19e>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 801bbc8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801bbca:	2b00      	cmp	r3, #0
 801bbcc:	d002      	beq.n	801bbd4 <xTaskGenericNotifyFromISR+0x198>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 801bbce:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801bbd0:	2201      	movs	r2, #1
 801bbd2:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 801bbd4:	4b0b      	ldr	r3, [pc, #44]	@ (801bc04 <xTaskGenericNotifyFromISR+0x1c8>)
 801bbd6:	2201      	movs	r2, #1
 801bbd8:	601a      	str	r2, [r3, #0]
 801bbda:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801bbdc:	613b      	str	r3, [r7, #16]
	__asm volatile
 801bbde:	693b      	ldr	r3, [r7, #16]
 801bbe0:	f383 8811 	msr	BASEPRI, r3
}
 801bbe4:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 801bbe6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
	}
 801bbe8:	4618      	mov	r0, r3
 801bbea:	3738      	adds	r7, #56	@ 0x38
 801bbec:	46bd      	mov	sp, r7
 801bbee:	bd80      	pop	{r7, pc}
 801bbf0:	200022a8 	.word	0x200022a8
 801bbf4:	20002288 	.word	0x20002288
 801bbf8:	20001db0 	.word	0x20001db0
 801bbfc:	20002240 	.word	0x20002240
 801bc00:	20001dac 	.word	0x20001dac
 801bc04:	20002294 	.word	0x20002294

0801bc08 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 801bc08:	b580      	push	{r7, lr}
 801bc0a:	b084      	sub	sp, #16
 801bc0c:	af00      	add	r7, sp, #0
 801bc0e:	6078      	str	r0, [r7, #4]
 801bc10:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 801bc12:	4b21      	ldr	r3, [pc, #132]	@ (801bc98 <prvAddCurrentTaskToDelayedList+0x90>)
 801bc14:	681b      	ldr	r3, [r3, #0]
 801bc16:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801bc18:	4b20      	ldr	r3, [pc, #128]	@ (801bc9c <prvAddCurrentTaskToDelayedList+0x94>)
 801bc1a:	681b      	ldr	r3, [r3, #0]
 801bc1c:	3304      	adds	r3, #4
 801bc1e:	4618      	mov	r0, r3
 801bc20:	f7fd fbea 	bl	80193f8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 801bc24:	687b      	ldr	r3, [r7, #4]
 801bc26:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801bc2a:	d10a      	bne.n	801bc42 <prvAddCurrentTaskToDelayedList+0x3a>
 801bc2c:	683b      	ldr	r3, [r7, #0]
 801bc2e:	2b00      	cmp	r3, #0
 801bc30:	d007      	beq.n	801bc42 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801bc32:	4b1a      	ldr	r3, [pc, #104]	@ (801bc9c <prvAddCurrentTaskToDelayedList+0x94>)
 801bc34:	681b      	ldr	r3, [r3, #0]
 801bc36:	3304      	adds	r3, #4
 801bc38:	4619      	mov	r1, r3
 801bc3a:	4819      	ldr	r0, [pc, #100]	@ (801bca0 <prvAddCurrentTaskToDelayedList+0x98>)
 801bc3c:	f7fd fb7f 	bl	801933e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 801bc40:	e026      	b.n	801bc90 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 801bc42:	68fa      	ldr	r2, [r7, #12]
 801bc44:	687b      	ldr	r3, [r7, #4]
 801bc46:	4413      	add	r3, r2
 801bc48:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 801bc4a:	4b14      	ldr	r3, [pc, #80]	@ (801bc9c <prvAddCurrentTaskToDelayedList+0x94>)
 801bc4c:	681b      	ldr	r3, [r3, #0]
 801bc4e:	68ba      	ldr	r2, [r7, #8]
 801bc50:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 801bc52:	68ba      	ldr	r2, [r7, #8]
 801bc54:	68fb      	ldr	r3, [r7, #12]
 801bc56:	429a      	cmp	r2, r3
 801bc58:	d209      	bcs.n	801bc6e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801bc5a:	4b12      	ldr	r3, [pc, #72]	@ (801bca4 <prvAddCurrentTaskToDelayedList+0x9c>)
 801bc5c:	681a      	ldr	r2, [r3, #0]
 801bc5e:	4b0f      	ldr	r3, [pc, #60]	@ (801bc9c <prvAddCurrentTaskToDelayedList+0x94>)
 801bc60:	681b      	ldr	r3, [r3, #0]
 801bc62:	3304      	adds	r3, #4
 801bc64:	4619      	mov	r1, r3
 801bc66:	4610      	mov	r0, r2
 801bc68:	f7fd fb8d 	bl	8019386 <vListInsert>
}
 801bc6c:	e010      	b.n	801bc90 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801bc6e:	4b0e      	ldr	r3, [pc, #56]	@ (801bca8 <prvAddCurrentTaskToDelayedList+0xa0>)
 801bc70:	681a      	ldr	r2, [r3, #0]
 801bc72:	4b0a      	ldr	r3, [pc, #40]	@ (801bc9c <prvAddCurrentTaskToDelayedList+0x94>)
 801bc74:	681b      	ldr	r3, [r3, #0]
 801bc76:	3304      	adds	r3, #4
 801bc78:	4619      	mov	r1, r3
 801bc7a:	4610      	mov	r0, r2
 801bc7c:	f7fd fb83 	bl	8019386 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 801bc80:	4b0a      	ldr	r3, [pc, #40]	@ (801bcac <prvAddCurrentTaskToDelayedList+0xa4>)
 801bc82:	681b      	ldr	r3, [r3, #0]
 801bc84:	68ba      	ldr	r2, [r7, #8]
 801bc86:	429a      	cmp	r2, r3
 801bc88:	d202      	bcs.n	801bc90 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 801bc8a:	4a08      	ldr	r2, [pc, #32]	@ (801bcac <prvAddCurrentTaskToDelayedList+0xa4>)
 801bc8c:	68bb      	ldr	r3, [r7, #8]
 801bc8e:	6013      	str	r3, [r2, #0]
}
 801bc90:	bf00      	nop
 801bc92:	3710      	adds	r7, #16
 801bc94:	46bd      	mov	sp, r7
 801bc96:	bd80      	pop	{r7, pc}
 801bc98:	20002284 	.word	0x20002284
 801bc9c:	20001dac 	.word	0x20001dac
 801bca0:	2000226c 	.word	0x2000226c
 801bca4:	2000223c 	.word	0x2000223c
 801bca8:	20002238 	.word	0x20002238
 801bcac:	200022a0 	.word	0x200022a0

0801bcb0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 801bcb0:	b580      	push	{r7, lr}
 801bcb2:	b08a      	sub	sp, #40	@ 0x28
 801bcb4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 801bcb6:	2300      	movs	r3, #0
 801bcb8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 801bcba:	f000 fb13 	bl	801c2e4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 801bcbe:	4b1d      	ldr	r3, [pc, #116]	@ (801bd34 <xTimerCreateTimerTask+0x84>)
 801bcc0:	681b      	ldr	r3, [r3, #0]
 801bcc2:	2b00      	cmp	r3, #0
 801bcc4:	d021      	beq.n	801bd0a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 801bcc6:	2300      	movs	r3, #0
 801bcc8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 801bcca:	2300      	movs	r3, #0
 801bccc:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 801bcce:	1d3a      	adds	r2, r7, #4
 801bcd0:	f107 0108 	add.w	r1, r7, #8
 801bcd4:	f107 030c 	add.w	r3, r7, #12
 801bcd8:	4618      	mov	r0, r3
 801bcda:	f7fd fae9 	bl	80192b0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 801bcde:	6879      	ldr	r1, [r7, #4]
 801bce0:	68bb      	ldr	r3, [r7, #8]
 801bce2:	68fa      	ldr	r2, [r7, #12]
 801bce4:	9202      	str	r2, [sp, #8]
 801bce6:	9301      	str	r3, [sp, #4]
 801bce8:	2302      	movs	r3, #2
 801bcea:	9300      	str	r3, [sp, #0]
 801bcec:	2300      	movs	r3, #0
 801bcee:	460a      	mov	r2, r1
 801bcf0:	4911      	ldr	r1, [pc, #68]	@ (801bd38 <xTimerCreateTimerTask+0x88>)
 801bcf2:	4812      	ldr	r0, [pc, #72]	@ (801bd3c <xTimerCreateTimerTask+0x8c>)
 801bcf4:	f7fe fde1 	bl	801a8ba <xTaskCreateStatic>
 801bcf8:	4603      	mov	r3, r0
 801bcfa:	4a11      	ldr	r2, [pc, #68]	@ (801bd40 <xTimerCreateTimerTask+0x90>)
 801bcfc:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 801bcfe:	4b10      	ldr	r3, [pc, #64]	@ (801bd40 <xTimerCreateTimerTask+0x90>)
 801bd00:	681b      	ldr	r3, [r3, #0]
 801bd02:	2b00      	cmp	r3, #0
 801bd04:	d001      	beq.n	801bd0a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 801bd06:	2301      	movs	r3, #1
 801bd08:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 801bd0a:	697b      	ldr	r3, [r7, #20]
 801bd0c:	2b00      	cmp	r3, #0
 801bd0e:	d10b      	bne.n	801bd28 <xTimerCreateTimerTask+0x78>
	__asm volatile
 801bd10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801bd14:	f383 8811 	msr	BASEPRI, r3
 801bd18:	f3bf 8f6f 	isb	sy
 801bd1c:	f3bf 8f4f 	dsb	sy
 801bd20:	613b      	str	r3, [r7, #16]
}
 801bd22:	bf00      	nop
 801bd24:	bf00      	nop
 801bd26:	e7fd      	b.n	801bd24 <xTimerCreateTimerTask+0x74>
	return xReturn;
 801bd28:	697b      	ldr	r3, [r7, #20]
}
 801bd2a:	4618      	mov	r0, r3
 801bd2c:	3718      	adds	r7, #24
 801bd2e:	46bd      	mov	sp, r7
 801bd30:	bd80      	pop	{r7, pc}
 801bd32:	bf00      	nop
 801bd34:	200022dc 	.word	0x200022dc
 801bd38:	08021dc0 	.word	0x08021dc0
 801bd3c:	0801be7d 	.word	0x0801be7d
 801bd40:	200022e0 	.word	0x200022e0

0801bd44 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 801bd44:	b580      	push	{r7, lr}
 801bd46:	b08a      	sub	sp, #40	@ 0x28
 801bd48:	af00      	add	r7, sp, #0
 801bd4a:	60f8      	str	r0, [r7, #12]
 801bd4c:	60b9      	str	r1, [r7, #8]
 801bd4e:	607a      	str	r2, [r7, #4]
 801bd50:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 801bd52:	2300      	movs	r3, #0
 801bd54:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 801bd56:	68fb      	ldr	r3, [r7, #12]
 801bd58:	2b00      	cmp	r3, #0
 801bd5a:	d10b      	bne.n	801bd74 <xTimerGenericCommand+0x30>
	__asm volatile
 801bd5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801bd60:	f383 8811 	msr	BASEPRI, r3
 801bd64:	f3bf 8f6f 	isb	sy
 801bd68:	f3bf 8f4f 	dsb	sy
 801bd6c:	623b      	str	r3, [r7, #32]
}
 801bd6e:	bf00      	nop
 801bd70:	bf00      	nop
 801bd72:	e7fd      	b.n	801bd70 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 801bd74:	4b19      	ldr	r3, [pc, #100]	@ (801bddc <xTimerGenericCommand+0x98>)
 801bd76:	681b      	ldr	r3, [r3, #0]
 801bd78:	2b00      	cmp	r3, #0
 801bd7a:	d02a      	beq.n	801bdd2 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 801bd7c:	68bb      	ldr	r3, [r7, #8]
 801bd7e:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 801bd80:	687b      	ldr	r3, [r7, #4]
 801bd82:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 801bd84:	68fb      	ldr	r3, [r7, #12]
 801bd86:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 801bd88:	68bb      	ldr	r3, [r7, #8]
 801bd8a:	2b05      	cmp	r3, #5
 801bd8c:	dc18      	bgt.n	801bdc0 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 801bd8e:	f7ff fcc7 	bl	801b720 <xTaskGetSchedulerState>
 801bd92:	4603      	mov	r3, r0
 801bd94:	2b02      	cmp	r3, #2
 801bd96:	d109      	bne.n	801bdac <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 801bd98:	4b10      	ldr	r3, [pc, #64]	@ (801bddc <xTimerGenericCommand+0x98>)
 801bd9a:	6818      	ldr	r0, [r3, #0]
 801bd9c:	f107 0110 	add.w	r1, r7, #16
 801bda0:	2300      	movs	r3, #0
 801bda2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801bda4:	f7fd fd06 	bl	80197b4 <xQueueGenericSend>
 801bda8:	6278      	str	r0, [r7, #36]	@ 0x24
 801bdaa:	e012      	b.n	801bdd2 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 801bdac:	4b0b      	ldr	r3, [pc, #44]	@ (801bddc <xTimerGenericCommand+0x98>)
 801bdae:	6818      	ldr	r0, [r3, #0]
 801bdb0:	f107 0110 	add.w	r1, r7, #16
 801bdb4:	2300      	movs	r3, #0
 801bdb6:	2200      	movs	r2, #0
 801bdb8:	f7fd fcfc 	bl	80197b4 <xQueueGenericSend>
 801bdbc:	6278      	str	r0, [r7, #36]	@ 0x24
 801bdbe:	e008      	b.n	801bdd2 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 801bdc0:	4b06      	ldr	r3, [pc, #24]	@ (801bddc <xTimerGenericCommand+0x98>)
 801bdc2:	6818      	ldr	r0, [r3, #0]
 801bdc4:	f107 0110 	add.w	r1, r7, #16
 801bdc8:	2300      	movs	r3, #0
 801bdca:	683a      	ldr	r2, [r7, #0]
 801bdcc:	f7fd fdf4 	bl	80199b8 <xQueueGenericSendFromISR>
 801bdd0:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 801bdd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 801bdd4:	4618      	mov	r0, r3
 801bdd6:	3728      	adds	r7, #40	@ 0x28
 801bdd8:	46bd      	mov	sp, r7
 801bdda:	bd80      	pop	{r7, pc}
 801bddc:	200022dc 	.word	0x200022dc

0801bde0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 801bde0:	b580      	push	{r7, lr}
 801bde2:	b088      	sub	sp, #32
 801bde4:	af02      	add	r7, sp, #8
 801bde6:	6078      	str	r0, [r7, #4]
 801bde8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801bdea:	4b23      	ldr	r3, [pc, #140]	@ (801be78 <prvProcessExpiredTimer+0x98>)
 801bdec:	681b      	ldr	r3, [r3, #0]
 801bdee:	68db      	ldr	r3, [r3, #12]
 801bdf0:	68db      	ldr	r3, [r3, #12]
 801bdf2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 801bdf4:	697b      	ldr	r3, [r7, #20]
 801bdf6:	3304      	adds	r3, #4
 801bdf8:	4618      	mov	r0, r3
 801bdfa:	f7fd fafd 	bl	80193f8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801bdfe:	697b      	ldr	r3, [r7, #20]
 801be00:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 801be04:	f003 0304 	and.w	r3, r3, #4
 801be08:	2b00      	cmp	r3, #0
 801be0a:	d023      	beq.n	801be54 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 801be0c:	697b      	ldr	r3, [r7, #20]
 801be0e:	699a      	ldr	r2, [r3, #24]
 801be10:	687b      	ldr	r3, [r7, #4]
 801be12:	18d1      	adds	r1, r2, r3
 801be14:	687b      	ldr	r3, [r7, #4]
 801be16:	683a      	ldr	r2, [r7, #0]
 801be18:	6978      	ldr	r0, [r7, #20]
 801be1a:	f000 f8d5 	bl	801bfc8 <prvInsertTimerInActiveList>
 801be1e:	4603      	mov	r3, r0
 801be20:	2b00      	cmp	r3, #0
 801be22:	d020      	beq.n	801be66 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 801be24:	2300      	movs	r3, #0
 801be26:	9300      	str	r3, [sp, #0]
 801be28:	2300      	movs	r3, #0
 801be2a:	687a      	ldr	r2, [r7, #4]
 801be2c:	2100      	movs	r1, #0
 801be2e:	6978      	ldr	r0, [r7, #20]
 801be30:	f7ff ff88 	bl	801bd44 <xTimerGenericCommand>
 801be34:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 801be36:	693b      	ldr	r3, [r7, #16]
 801be38:	2b00      	cmp	r3, #0
 801be3a:	d114      	bne.n	801be66 <prvProcessExpiredTimer+0x86>
	__asm volatile
 801be3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801be40:	f383 8811 	msr	BASEPRI, r3
 801be44:	f3bf 8f6f 	isb	sy
 801be48:	f3bf 8f4f 	dsb	sy
 801be4c:	60fb      	str	r3, [r7, #12]
}
 801be4e:	bf00      	nop
 801be50:	bf00      	nop
 801be52:	e7fd      	b.n	801be50 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 801be54:	697b      	ldr	r3, [r7, #20]
 801be56:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 801be5a:	f023 0301 	bic.w	r3, r3, #1
 801be5e:	b2da      	uxtb	r2, r3
 801be60:	697b      	ldr	r3, [r7, #20]
 801be62:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801be66:	697b      	ldr	r3, [r7, #20]
 801be68:	6a1b      	ldr	r3, [r3, #32]
 801be6a:	6978      	ldr	r0, [r7, #20]
 801be6c:	4798      	blx	r3
}
 801be6e:	bf00      	nop
 801be70:	3718      	adds	r7, #24
 801be72:	46bd      	mov	sp, r7
 801be74:	bd80      	pop	{r7, pc}
 801be76:	bf00      	nop
 801be78:	200022d4 	.word	0x200022d4

0801be7c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 801be7c:	b580      	push	{r7, lr}
 801be7e:	b084      	sub	sp, #16
 801be80:	af00      	add	r7, sp, #0
 801be82:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 801be84:	f107 0308 	add.w	r3, r7, #8
 801be88:	4618      	mov	r0, r3
 801be8a:	f000 f859 	bl	801bf40 <prvGetNextExpireTime>
 801be8e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 801be90:	68bb      	ldr	r3, [r7, #8]
 801be92:	4619      	mov	r1, r3
 801be94:	68f8      	ldr	r0, [r7, #12]
 801be96:	f000 f805 	bl	801bea4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 801be9a:	f000 f8d7 	bl	801c04c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 801be9e:	bf00      	nop
 801bea0:	e7f0      	b.n	801be84 <prvTimerTask+0x8>
	...

0801bea4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 801bea4:	b580      	push	{r7, lr}
 801bea6:	b084      	sub	sp, #16
 801bea8:	af00      	add	r7, sp, #0
 801beaa:	6078      	str	r0, [r7, #4]
 801beac:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 801beae:	f7ff f843 	bl	801af38 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 801beb2:	f107 0308 	add.w	r3, r7, #8
 801beb6:	4618      	mov	r0, r3
 801beb8:	f000 f866 	bl	801bf88 <prvSampleTimeNow>
 801bebc:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 801bebe:	68bb      	ldr	r3, [r7, #8]
 801bec0:	2b00      	cmp	r3, #0
 801bec2:	d130      	bne.n	801bf26 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 801bec4:	683b      	ldr	r3, [r7, #0]
 801bec6:	2b00      	cmp	r3, #0
 801bec8:	d10a      	bne.n	801bee0 <prvProcessTimerOrBlockTask+0x3c>
 801beca:	687a      	ldr	r2, [r7, #4]
 801becc:	68fb      	ldr	r3, [r7, #12]
 801bece:	429a      	cmp	r2, r3
 801bed0:	d806      	bhi.n	801bee0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 801bed2:	f7ff f83f 	bl	801af54 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 801bed6:	68f9      	ldr	r1, [r7, #12]
 801bed8:	6878      	ldr	r0, [r7, #4]
 801beda:	f7ff ff81 	bl	801bde0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 801bede:	e024      	b.n	801bf2a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 801bee0:	683b      	ldr	r3, [r7, #0]
 801bee2:	2b00      	cmp	r3, #0
 801bee4:	d008      	beq.n	801bef8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 801bee6:	4b13      	ldr	r3, [pc, #76]	@ (801bf34 <prvProcessTimerOrBlockTask+0x90>)
 801bee8:	681b      	ldr	r3, [r3, #0]
 801beea:	681b      	ldr	r3, [r3, #0]
 801beec:	2b00      	cmp	r3, #0
 801beee:	d101      	bne.n	801bef4 <prvProcessTimerOrBlockTask+0x50>
 801bef0:	2301      	movs	r3, #1
 801bef2:	e000      	b.n	801bef6 <prvProcessTimerOrBlockTask+0x52>
 801bef4:	2300      	movs	r3, #0
 801bef6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 801bef8:	4b0f      	ldr	r3, [pc, #60]	@ (801bf38 <prvProcessTimerOrBlockTask+0x94>)
 801befa:	6818      	ldr	r0, [r3, #0]
 801befc:	687a      	ldr	r2, [r7, #4]
 801befe:	68fb      	ldr	r3, [r7, #12]
 801bf00:	1ad3      	subs	r3, r2, r3
 801bf02:	683a      	ldr	r2, [r7, #0]
 801bf04:	4619      	mov	r1, r3
 801bf06:	f7fe fa99 	bl	801a43c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 801bf0a:	f7ff f823 	bl	801af54 <xTaskResumeAll>
 801bf0e:	4603      	mov	r3, r0
 801bf10:	2b00      	cmp	r3, #0
 801bf12:	d10a      	bne.n	801bf2a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 801bf14:	4b09      	ldr	r3, [pc, #36]	@ (801bf3c <prvProcessTimerOrBlockTask+0x98>)
 801bf16:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801bf1a:	601a      	str	r2, [r3, #0]
 801bf1c:	f3bf 8f4f 	dsb	sy
 801bf20:	f3bf 8f6f 	isb	sy
}
 801bf24:	e001      	b.n	801bf2a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 801bf26:	f7ff f815 	bl	801af54 <xTaskResumeAll>
}
 801bf2a:	bf00      	nop
 801bf2c:	3710      	adds	r7, #16
 801bf2e:	46bd      	mov	sp, r7
 801bf30:	bd80      	pop	{r7, pc}
 801bf32:	bf00      	nop
 801bf34:	200022d8 	.word	0x200022d8
 801bf38:	200022dc 	.word	0x200022dc
 801bf3c:	e000ed04 	.word	0xe000ed04

0801bf40 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 801bf40:	b480      	push	{r7}
 801bf42:	b085      	sub	sp, #20
 801bf44:	af00      	add	r7, sp, #0
 801bf46:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 801bf48:	4b0e      	ldr	r3, [pc, #56]	@ (801bf84 <prvGetNextExpireTime+0x44>)
 801bf4a:	681b      	ldr	r3, [r3, #0]
 801bf4c:	681b      	ldr	r3, [r3, #0]
 801bf4e:	2b00      	cmp	r3, #0
 801bf50:	d101      	bne.n	801bf56 <prvGetNextExpireTime+0x16>
 801bf52:	2201      	movs	r2, #1
 801bf54:	e000      	b.n	801bf58 <prvGetNextExpireTime+0x18>
 801bf56:	2200      	movs	r2, #0
 801bf58:	687b      	ldr	r3, [r7, #4]
 801bf5a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 801bf5c:	687b      	ldr	r3, [r7, #4]
 801bf5e:	681b      	ldr	r3, [r3, #0]
 801bf60:	2b00      	cmp	r3, #0
 801bf62:	d105      	bne.n	801bf70 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 801bf64:	4b07      	ldr	r3, [pc, #28]	@ (801bf84 <prvGetNextExpireTime+0x44>)
 801bf66:	681b      	ldr	r3, [r3, #0]
 801bf68:	68db      	ldr	r3, [r3, #12]
 801bf6a:	681b      	ldr	r3, [r3, #0]
 801bf6c:	60fb      	str	r3, [r7, #12]
 801bf6e:	e001      	b.n	801bf74 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 801bf70:	2300      	movs	r3, #0
 801bf72:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 801bf74:	68fb      	ldr	r3, [r7, #12]
}
 801bf76:	4618      	mov	r0, r3
 801bf78:	3714      	adds	r7, #20
 801bf7a:	46bd      	mov	sp, r7
 801bf7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bf80:	4770      	bx	lr
 801bf82:	bf00      	nop
 801bf84:	200022d4 	.word	0x200022d4

0801bf88 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 801bf88:	b580      	push	{r7, lr}
 801bf8a:	b084      	sub	sp, #16
 801bf8c:	af00      	add	r7, sp, #0
 801bf8e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 801bf90:	f7ff f87e 	bl	801b090 <xTaskGetTickCount>
 801bf94:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 801bf96:	4b0b      	ldr	r3, [pc, #44]	@ (801bfc4 <prvSampleTimeNow+0x3c>)
 801bf98:	681b      	ldr	r3, [r3, #0]
 801bf9a:	68fa      	ldr	r2, [r7, #12]
 801bf9c:	429a      	cmp	r2, r3
 801bf9e:	d205      	bcs.n	801bfac <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 801bfa0:	f000 f93a 	bl	801c218 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 801bfa4:	687b      	ldr	r3, [r7, #4]
 801bfa6:	2201      	movs	r2, #1
 801bfa8:	601a      	str	r2, [r3, #0]
 801bfaa:	e002      	b.n	801bfb2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 801bfac:	687b      	ldr	r3, [r7, #4]
 801bfae:	2200      	movs	r2, #0
 801bfb0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 801bfb2:	4a04      	ldr	r2, [pc, #16]	@ (801bfc4 <prvSampleTimeNow+0x3c>)
 801bfb4:	68fb      	ldr	r3, [r7, #12]
 801bfb6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 801bfb8:	68fb      	ldr	r3, [r7, #12]
}
 801bfba:	4618      	mov	r0, r3
 801bfbc:	3710      	adds	r7, #16
 801bfbe:	46bd      	mov	sp, r7
 801bfc0:	bd80      	pop	{r7, pc}
 801bfc2:	bf00      	nop
 801bfc4:	200022e4 	.word	0x200022e4

0801bfc8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 801bfc8:	b580      	push	{r7, lr}
 801bfca:	b086      	sub	sp, #24
 801bfcc:	af00      	add	r7, sp, #0
 801bfce:	60f8      	str	r0, [r7, #12]
 801bfd0:	60b9      	str	r1, [r7, #8]
 801bfd2:	607a      	str	r2, [r7, #4]
 801bfd4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 801bfd6:	2300      	movs	r3, #0
 801bfd8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 801bfda:	68fb      	ldr	r3, [r7, #12]
 801bfdc:	68ba      	ldr	r2, [r7, #8]
 801bfde:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 801bfe0:	68fb      	ldr	r3, [r7, #12]
 801bfe2:	68fa      	ldr	r2, [r7, #12]
 801bfe4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 801bfe6:	68ba      	ldr	r2, [r7, #8]
 801bfe8:	687b      	ldr	r3, [r7, #4]
 801bfea:	429a      	cmp	r2, r3
 801bfec:	d812      	bhi.n	801c014 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801bfee:	687a      	ldr	r2, [r7, #4]
 801bff0:	683b      	ldr	r3, [r7, #0]
 801bff2:	1ad2      	subs	r2, r2, r3
 801bff4:	68fb      	ldr	r3, [r7, #12]
 801bff6:	699b      	ldr	r3, [r3, #24]
 801bff8:	429a      	cmp	r2, r3
 801bffa:	d302      	bcc.n	801c002 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 801bffc:	2301      	movs	r3, #1
 801bffe:	617b      	str	r3, [r7, #20]
 801c000:	e01b      	b.n	801c03a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 801c002:	4b10      	ldr	r3, [pc, #64]	@ (801c044 <prvInsertTimerInActiveList+0x7c>)
 801c004:	681a      	ldr	r2, [r3, #0]
 801c006:	68fb      	ldr	r3, [r7, #12]
 801c008:	3304      	adds	r3, #4
 801c00a:	4619      	mov	r1, r3
 801c00c:	4610      	mov	r0, r2
 801c00e:	f7fd f9ba 	bl	8019386 <vListInsert>
 801c012:	e012      	b.n	801c03a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 801c014:	687a      	ldr	r2, [r7, #4]
 801c016:	683b      	ldr	r3, [r7, #0]
 801c018:	429a      	cmp	r2, r3
 801c01a:	d206      	bcs.n	801c02a <prvInsertTimerInActiveList+0x62>
 801c01c:	68ba      	ldr	r2, [r7, #8]
 801c01e:	683b      	ldr	r3, [r7, #0]
 801c020:	429a      	cmp	r2, r3
 801c022:	d302      	bcc.n	801c02a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 801c024:	2301      	movs	r3, #1
 801c026:	617b      	str	r3, [r7, #20]
 801c028:	e007      	b.n	801c03a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 801c02a:	4b07      	ldr	r3, [pc, #28]	@ (801c048 <prvInsertTimerInActiveList+0x80>)
 801c02c:	681a      	ldr	r2, [r3, #0]
 801c02e:	68fb      	ldr	r3, [r7, #12]
 801c030:	3304      	adds	r3, #4
 801c032:	4619      	mov	r1, r3
 801c034:	4610      	mov	r0, r2
 801c036:	f7fd f9a6 	bl	8019386 <vListInsert>
		}
	}

	return xProcessTimerNow;
 801c03a:	697b      	ldr	r3, [r7, #20]
}
 801c03c:	4618      	mov	r0, r3
 801c03e:	3718      	adds	r7, #24
 801c040:	46bd      	mov	sp, r7
 801c042:	bd80      	pop	{r7, pc}
 801c044:	200022d8 	.word	0x200022d8
 801c048:	200022d4 	.word	0x200022d4

0801c04c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 801c04c:	b580      	push	{r7, lr}
 801c04e:	b08e      	sub	sp, #56	@ 0x38
 801c050:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 801c052:	e0ce      	b.n	801c1f2 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 801c054:	687b      	ldr	r3, [r7, #4]
 801c056:	2b00      	cmp	r3, #0
 801c058:	da19      	bge.n	801c08e <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 801c05a:	1d3b      	adds	r3, r7, #4
 801c05c:	3304      	adds	r3, #4
 801c05e:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 801c060:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c062:	2b00      	cmp	r3, #0
 801c064:	d10b      	bne.n	801c07e <prvProcessReceivedCommands+0x32>
	__asm volatile
 801c066:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801c06a:	f383 8811 	msr	BASEPRI, r3
 801c06e:	f3bf 8f6f 	isb	sy
 801c072:	f3bf 8f4f 	dsb	sy
 801c076:	61fb      	str	r3, [r7, #28]
}
 801c078:	bf00      	nop
 801c07a:	bf00      	nop
 801c07c:	e7fd      	b.n	801c07a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 801c07e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c080:	681b      	ldr	r3, [r3, #0]
 801c082:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801c084:	6850      	ldr	r0, [r2, #4]
 801c086:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801c088:	6892      	ldr	r2, [r2, #8]
 801c08a:	4611      	mov	r1, r2
 801c08c:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 801c08e:	687b      	ldr	r3, [r7, #4]
 801c090:	2b00      	cmp	r3, #0
 801c092:	f2c0 80ae 	blt.w	801c1f2 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 801c096:	68fb      	ldr	r3, [r7, #12]
 801c098:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 801c09a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c09c:	695b      	ldr	r3, [r3, #20]
 801c09e:	2b00      	cmp	r3, #0
 801c0a0:	d004      	beq.n	801c0ac <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 801c0a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c0a4:	3304      	adds	r3, #4
 801c0a6:	4618      	mov	r0, r3
 801c0a8:	f7fd f9a6 	bl	80193f8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 801c0ac:	463b      	mov	r3, r7
 801c0ae:	4618      	mov	r0, r3
 801c0b0:	f7ff ff6a 	bl	801bf88 <prvSampleTimeNow>
 801c0b4:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 801c0b6:	687b      	ldr	r3, [r7, #4]
 801c0b8:	2b09      	cmp	r3, #9
 801c0ba:	f200 8097 	bhi.w	801c1ec <prvProcessReceivedCommands+0x1a0>
 801c0be:	a201      	add	r2, pc, #4	@ (adr r2, 801c0c4 <prvProcessReceivedCommands+0x78>)
 801c0c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801c0c4:	0801c0ed 	.word	0x0801c0ed
 801c0c8:	0801c0ed 	.word	0x0801c0ed
 801c0cc:	0801c0ed 	.word	0x0801c0ed
 801c0d0:	0801c163 	.word	0x0801c163
 801c0d4:	0801c177 	.word	0x0801c177
 801c0d8:	0801c1c3 	.word	0x0801c1c3
 801c0dc:	0801c0ed 	.word	0x0801c0ed
 801c0e0:	0801c0ed 	.word	0x0801c0ed
 801c0e4:	0801c163 	.word	0x0801c163
 801c0e8:	0801c177 	.word	0x0801c177
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 801c0ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c0ee:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 801c0f2:	f043 0301 	orr.w	r3, r3, #1
 801c0f6:	b2da      	uxtb	r2, r3
 801c0f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c0fa:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 801c0fe:	68ba      	ldr	r2, [r7, #8]
 801c100:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c102:	699b      	ldr	r3, [r3, #24]
 801c104:	18d1      	adds	r1, r2, r3
 801c106:	68bb      	ldr	r3, [r7, #8]
 801c108:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801c10a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801c10c:	f7ff ff5c 	bl	801bfc8 <prvInsertTimerInActiveList>
 801c110:	4603      	mov	r3, r0
 801c112:	2b00      	cmp	r3, #0
 801c114:	d06c      	beq.n	801c1f0 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801c116:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c118:	6a1b      	ldr	r3, [r3, #32]
 801c11a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801c11c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801c11e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c120:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 801c124:	f003 0304 	and.w	r3, r3, #4
 801c128:	2b00      	cmp	r3, #0
 801c12a:	d061      	beq.n	801c1f0 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 801c12c:	68ba      	ldr	r2, [r7, #8]
 801c12e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c130:	699b      	ldr	r3, [r3, #24]
 801c132:	441a      	add	r2, r3
 801c134:	2300      	movs	r3, #0
 801c136:	9300      	str	r3, [sp, #0]
 801c138:	2300      	movs	r3, #0
 801c13a:	2100      	movs	r1, #0
 801c13c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801c13e:	f7ff fe01 	bl	801bd44 <xTimerGenericCommand>
 801c142:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 801c144:	6a3b      	ldr	r3, [r7, #32]
 801c146:	2b00      	cmp	r3, #0
 801c148:	d152      	bne.n	801c1f0 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 801c14a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801c14e:	f383 8811 	msr	BASEPRI, r3
 801c152:	f3bf 8f6f 	isb	sy
 801c156:	f3bf 8f4f 	dsb	sy
 801c15a:	61bb      	str	r3, [r7, #24]
}
 801c15c:	bf00      	nop
 801c15e:	bf00      	nop
 801c160:	e7fd      	b.n	801c15e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 801c162:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c164:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 801c168:	f023 0301 	bic.w	r3, r3, #1
 801c16c:	b2da      	uxtb	r2, r3
 801c16e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c170:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 801c174:	e03d      	b.n	801c1f2 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 801c176:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c178:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 801c17c:	f043 0301 	orr.w	r3, r3, #1
 801c180:	b2da      	uxtb	r2, r3
 801c182:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c184:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 801c188:	68ba      	ldr	r2, [r7, #8]
 801c18a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c18c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 801c18e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c190:	699b      	ldr	r3, [r3, #24]
 801c192:	2b00      	cmp	r3, #0
 801c194:	d10b      	bne.n	801c1ae <prvProcessReceivedCommands+0x162>
	__asm volatile
 801c196:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801c19a:	f383 8811 	msr	BASEPRI, r3
 801c19e:	f3bf 8f6f 	isb	sy
 801c1a2:	f3bf 8f4f 	dsb	sy
 801c1a6:	617b      	str	r3, [r7, #20]
}
 801c1a8:	bf00      	nop
 801c1aa:	bf00      	nop
 801c1ac:	e7fd      	b.n	801c1aa <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 801c1ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c1b0:	699a      	ldr	r2, [r3, #24]
 801c1b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c1b4:	18d1      	adds	r1, r2, r3
 801c1b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c1b8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801c1ba:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801c1bc:	f7ff ff04 	bl	801bfc8 <prvInsertTimerInActiveList>
					break;
 801c1c0:	e017      	b.n	801c1f2 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 801c1c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c1c4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 801c1c8:	f003 0302 	and.w	r3, r3, #2
 801c1cc:	2b00      	cmp	r3, #0
 801c1ce:	d103      	bne.n	801c1d8 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 801c1d0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801c1d2:	f000 fbe9 	bl	801c9a8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 801c1d6:	e00c      	b.n	801c1f2 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 801c1d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c1da:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 801c1de:	f023 0301 	bic.w	r3, r3, #1
 801c1e2:	b2da      	uxtb	r2, r3
 801c1e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c1e6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 801c1ea:	e002      	b.n	801c1f2 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 801c1ec:	bf00      	nop
 801c1ee:	e000      	b.n	801c1f2 <prvProcessReceivedCommands+0x1a6>
					break;
 801c1f0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 801c1f2:	4b08      	ldr	r3, [pc, #32]	@ (801c214 <prvProcessReceivedCommands+0x1c8>)
 801c1f4:	681b      	ldr	r3, [r3, #0]
 801c1f6:	1d39      	adds	r1, r7, #4
 801c1f8:	2200      	movs	r2, #0
 801c1fa:	4618      	mov	r0, r3
 801c1fc:	f7fd fd0a 	bl	8019c14 <xQueueReceive>
 801c200:	4603      	mov	r3, r0
 801c202:	2b00      	cmp	r3, #0
 801c204:	f47f af26 	bne.w	801c054 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 801c208:	bf00      	nop
 801c20a:	bf00      	nop
 801c20c:	3730      	adds	r7, #48	@ 0x30
 801c20e:	46bd      	mov	sp, r7
 801c210:	bd80      	pop	{r7, pc}
 801c212:	bf00      	nop
 801c214:	200022dc 	.word	0x200022dc

0801c218 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 801c218:	b580      	push	{r7, lr}
 801c21a:	b088      	sub	sp, #32
 801c21c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 801c21e:	e049      	b.n	801c2b4 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 801c220:	4b2e      	ldr	r3, [pc, #184]	@ (801c2dc <prvSwitchTimerLists+0xc4>)
 801c222:	681b      	ldr	r3, [r3, #0]
 801c224:	68db      	ldr	r3, [r3, #12]
 801c226:	681b      	ldr	r3, [r3, #0]
 801c228:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801c22a:	4b2c      	ldr	r3, [pc, #176]	@ (801c2dc <prvSwitchTimerLists+0xc4>)
 801c22c:	681b      	ldr	r3, [r3, #0]
 801c22e:	68db      	ldr	r3, [r3, #12]
 801c230:	68db      	ldr	r3, [r3, #12]
 801c232:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 801c234:	68fb      	ldr	r3, [r7, #12]
 801c236:	3304      	adds	r3, #4
 801c238:	4618      	mov	r0, r3
 801c23a:	f7fd f8dd 	bl	80193f8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801c23e:	68fb      	ldr	r3, [r7, #12]
 801c240:	6a1b      	ldr	r3, [r3, #32]
 801c242:	68f8      	ldr	r0, [r7, #12]
 801c244:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801c246:	68fb      	ldr	r3, [r7, #12]
 801c248:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 801c24c:	f003 0304 	and.w	r3, r3, #4
 801c250:	2b00      	cmp	r3, #0
 801c252:	d02f      	beq.n	801c2b4 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 801c254:	68fb      	ldr	r3, [r7, #12]
 801c256:	699b      	ldr	r3, [r3, #24]
 801c258:	693a      	ldr	r2, [r7, #16]
 801c25a:	4413      	add	r3, r2
 801c25c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 801c25e:	68ba      	ldr	r2, [r7, #8]
 801c260:	693b      	ldr	r3, [r7, #16]
 801c262:	429a      	cmp	r2, r3
 801c264:	d90e      	bls.n	801c284 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 801c266:	68fb      	ldr	r3, [r7, #12]
 801c268:	68ba      	ldr	r2, [r7, #8]
 801c26a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 801c26c:	68fb      	ldr	r3, [r7, #12]
 801c26e:	68fa      	ldr	r2, [r7, #12]
 801c270:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 801c272:	4b1a      	ldr	r3, [pc, #104]	@ (801c2dc <prvSwitchTimerLists+0xc4>)
 801c274:	681a      	ldr	r2, [r3, #0]
 801c276:	68fb      	ldr	r3, [r7, #12]
 801c278:	3304      	adds	r3, #4
 801c27a:	4619      	mov	r1, r3
 801c27c:	4610      	mov	r0, r2
 801c27e:	f7fd f882 	bl	8019386 <vListInsert>
 801c282:	e017      	b.n	801c2b4 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 801c284:	2300      	movs	r3, #0
 801c286:	9300      	str	r3, [sp, #0]
 801c288:	2300      	movs	r3, #0
 801c28a:	693a      	ldr	r2, [r7, #16]
 801c28c:	2100      	movs	r1, #0
 801c28e:	68f8      	ldr	r0, [r7, #12]
 801c290:	f7ff fd58 	bl	801bd44 <xTimerGenericCommand>
 801c294:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 801c296:	687b      	ldr	r3, [r7, #4]
 801c298:	2b00      	cmp	r3, #0
 801c29a:	d10b      	bne.n	801c2b4 <prvSwitchTimerLists+0x9c>
	__asm volatile
 801c29c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801c2a0:	f383 8811 	msr	BASEPRI, r3
 801c2a4:	f3bf 8f6f 	isb	sy
 801c2a8:	f3bf 8f4f 	dsb	sy
 801c2ac:	603b      	str	r3, [r7, #0]
}
 801c2ae:	bf00      	nop
 801c2b0:	bf00      	nop
 801c2b2:	e7fd      	b.n	801c2b0 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 801c2b4:	4b09      	ldr	r3, [pc, #36]	@ (801c2dc <prvSwitchTimerLists+0xc4>)
 801c2b6:	681b      	ldr	r3, [r3, #0]
 801c2b8:	681b      	ldr	r3, [r3, #0]
 801c2ba:	2b00      	cmp	r3, #0
 801c2bc:	d1b0      	bne.n	801c220 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 801c2be:	4b07      	ldr	r3, [pc, #28]	@ (801c2dc <prvSwitchTimerLists+0xc4>)
 801c2c0:	681b      	ldr	r3, [r3, #0]
 801c2c2:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 801c2c4:	4b06      	ldr	r3, [pc, #24]	@ (801c2e0 <prvSwitchTimerLists+0xc8>)
 801c2c6:	681b      	ldr	r3, [r3, #0]
 801c2c8:	4a04      	ldr	r2, [pc, #16]	@ (801c2dc <prvSwitchTimerLists+0xc4>)
 801c2ca:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 801c2cc:	4a04      	ldr	r2, [pc, #16]	@ (801c2e0 <prvSwitchTimerLists+0xc8>)
 801c2ce:	697b      	ldr	r3, [r7, #20]
 801c2d0:	6013      	str	r3, [r2, #0]
}
 801c2d2:	bf00      	nop
 801c2d4:	3718      	adds	r7, #24
 801c2d6:	46bd      	mov	sp, r7
 801c2d8:	bd80      	pop	{r7, pc}
 801c2da:	bf00      	nop
 801c2dc:	200022d4 	.word	0x200022d4
 801c2e0:	200022d8 	.word	0x200022d8

0801c2e4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 801c2e4:	b580      	push	{r7, lr}
 801c2e6:	b082      	sub	sp, #8
 801c2e8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 801c2ea:	f000 f96d 	bl	801c5c8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 801c2ee:	4b15      	ldr	r3, [pc, #84]	@ (801c344 <prvCheckForValidListAndQueue+0x60>)
 801c2f0:	681b      	ldr	r3, [r3, #0]
 801c2f2:	2b00      	cmp	r3, #0
 801c2f4:	d120      	bne.n	801c338 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 801c2f6:	4814      	ldr	r0, [pc, #80]	@ (801c348 <prvCheckForValidListAndQueue+0x64>)
 801c2f8:	f7fc fff4 	bl	80192e4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 801c2fc:	4813      	ldr	r0, [pc, #76]	@ (801c34c <prvCheckForValidListAndQueue+0x68>)
 801c2fe:	f7fc fff1 	bl	80192e4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 801c302:	4b13      	ldr	r3, [pc, #76]	@ (801c350 <prvCheckForValidListAndQueue+0x6c>)
 801c304:	4a10      	ldr	r2, [pc, #64]	@ (801c348 <prvCheckForValidListAndQueue+0x64>)
 801c306:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 801c308:	4b12      	ldr	r3, [pc, #72]	@ (801c354 <prvCheckForValidListAndQueue+0x70>)
 801c30a:	4a10      	ldr	r2, [pc, #64]	@ (801c34c <prvCheckForValidListAndQueue+0x68>)
 801c30c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 801c30e:	2300      	movs	r3, #0
 801c310:	9300      	str	r3, [sp, #0]
 801c312:	4b11      	ldr	r3, [pc, #68]	@ (801c358 <prvCheckForValidListAndQueue+0x74>)
 801c314:	4a11      	ldr	r2, [pc, #68]	@ (801c35c <prvCheckForValidListAndQueue+0x78>)
 801c316:	2110      	movs	r1, #16
 801c318:	200a      	movs	r0, #10
 801c31a:	f7fd f901 	bl	8019520 <xQueueGenericCreateStatic>
 801c31e:	4603      	mov	r3, r0
 801c320:	4a08      	ldr	r2, [pc, #32]	@ (801c344 <prvCheckForValidListAndQueue+0x60>)
 801c322:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 801c324:	4b07      	ldr	r3, [pc, #28]	@ (801c344 <prvCheckForValidListAndQueue+0x60>)
 801c326:	681b      	ldr	r3, [r3, #0]
 801c328:	2b00      	cmp	r3, #0
 801c32a:	d005      	beq.n	801c338 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 801c32c:	4b05      	ldr	r3, [pc, #20]	@ (801c344 <prvCheckForValidListAndQueue+0x60>)
 801c32e:	681b      	ldr	r3, [r3, #0]
 801c330:	490b      	ldr	r1, [pc, #44]	@ (801c360 <prvCheckForValidListAndQueue+0x7c>)
 801c332:	4618      	mov	r0, r3
 801c334:	f7fe f82e 	bl	801a394 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 801c338:	f000 f978 	bl	801c62c <vPortExitCritical>
}
 801c33c:	bf00      	nop
 801c33e:	46bd      	mov	sp, r7
 801c340:	bd80      	pop	{r7, pc}
 801c342:	bf00      	nop
 801c344:	200022dc 	.word	0x200022dc
 801c348:	200022ac 	.word	0x200022ac
 801c34c:	200022c0 	.word	0x200022c0
 801c350:	200022d4 	.word	0x200022d4
 801c354:	200022d8 	.word	0x200022d8
 801c358:	20002388 	.word	0x20002388
 801c35c:	200022e8 	.word	0x200022e8
 801c360:	08021dc8 	.word	0x08021dc8

0801c364 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 801c364:	b480      	push	{r7}
 801c366:	b085      	sub	sp, #20
 801c368:	af00      	add	r7, sp, #0
 801c36a:	60f8      	str	r0, [r7, #12]
 801c36c:	60b9      	str	r1, [r7, #8]
 801c36e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 801c370:	68fb      	ldr	r3, [r7, #12]
 801c372:	3b04      	subs	r3, #4
 801c374:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 801c376:	68fb      	ldr	r3, [r7, #12]
 801c378:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 801c37c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801c37e:	68fb      	ldr	r3, [r7, #12]
 801c380:	3b04      	subs	r3, #4
 801c382:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 801c384:	68bb      	ldr	r3, [r7, #8]
 801c386:	f023 0201 	bic.w	r2, r3, #1
 801c38a:	68fb      	ldr	r3, [r7, #12]
 801c38c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801c38e:	68fb      	ldr	r3, [r7, #12]
 801c390:	3b04      	subs	r3, #4
 801c392:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 801c394:	4a0c      	ldr	r2, [pc, #48]	@ (801c3c8 <pxPortInitialiseStack+0x64>)
 801c396:	68fb      	ldr	r3, [r7, #12]
 801c398:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 801c39a:	68fb      	ldr	r3, [r7, #12]
 801c39c:	3b14      	subs	r3, #20
 801c39e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 801c3a0:	687a      	ldr	r2, [r7, #4]
 801c3a2:	68fb      	ldr	r3, [r7, #12]
 801c3a4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 801c3a6:	68fb      	ldr	r3, [r7, #12]
 801c3a8:	3b04      	subs	r3, #4
 801c3aa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 801c3ac:	68fb      	ldr	r3, [r7, #12]
 801c3ae:	f06f 0202 	mvn.w	r2, #2
 801c3b2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 801c3b4:	68fb      	ldr	r3, [r7, #12]
 801c3b6:	3b20      	subs	r3, #32
 801c3b8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 801c3ba:	68fb      	ldr	r3, [r7, #12]
}
 801c3bc:	4618      	mov	r0, r3
 801c3be:	3714      	adds	r7, #20
 801c3c0:	46bd      	mov	sp, r7
 801c3c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c3c6:	4770      	bx	lr
 801c3c8:	0801c3cd 	.word	0x0801c3cd

0801c3cc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 801c3cc:	b480      	push	{r7}
 801c3ce:	b085      	sub	sp, #20
 801c3d0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 801c3d2:	2300      	movs	r3, #0
 801c3d4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 801c3d6:	4b13      	ldr	r3, [pc, #76]	@ (801c424 <prvTaskExitError+0x58>)
 801c3d8:	681b      	ldr	r3, [r3, #0]
 801c3da:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801c3de:	d00b      	beq.n	801c3f8 <prvTaskExitError+0x2c>
	__asm volatile
 801c3e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801c3e4:	f383 8811 	msr	BASEPRI, r3
 801c3e8:	f3bf 8f6f 	isb	sy
 801c3ec:	f3bf 8f4f 	dsb	sy
 801c3f0:	60fb      	str	r3, [r7, #12]
}
 801c3f2:	bf00      	nop
 801c3f4:	bf00      	nop
 801c3f6:	e7fd      	b.n	801c3f4 <prvTaskExitError+0x28>
	__asm volatile
 801c3f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801c3fc:	f383 8811 	msr	BASEPRI, r3
 801c400:	f3bf 8f6f 	isb	sy
 801c404:	f3bf 8f4f 	dsb	sy
 801c408:	60bb      	str	r3, [r7, #8]
}
 801c40a:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 801c40c:	bf00      	nop
 801c40e:	687b      	ldr	r3, [r7, #4]
 801c410:	2b00      	cmp	r3, #0
 801c412:	d0fc      	beq.n	801c40e <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 801c414:	bf00      	nop
 801c416:	bf00      	nop
 801c418:	3714      	adds	r7, #20
 801c41a:	46bd      	mov	sp, r7
 801c41c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c420:	4770      	bx	lr
 801c422:	bf00      	nop
 801c424:	200000fc 	.word	0x200000fc
	...

0801c430 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 801c430:	4b07      	ldr	r3, [pc, #28]	@ (801c450 <pxCurrentTCBConst2>)
 801c432:	6819      	ldr	r1, [r3, #0]
 801c434:	6808      	ldr	r0, [r1, #0]
 801c436:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c43a:	f380 8809 	msr	PSP, r0
 801c43e:	f3bf 8f6f 	isb	sy
 801c442:	f04f 0000 	mov.w	r0, #0
 801c446:	f380 8811 	msr	BASEPRI, r0
 801c44a:	4770      	bx	lr
 801c44c:	f3af 8000 	nop.w

0801c450 <pxCurrentTCBConst2>:
 801c450:	20001dac 	.word	0x20001dac
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 801c454:	bf00      	nop
 801c456:	bf00      	nop

0801c458 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 801c458:	4808      	ldr	r0, [pc, #32]	@ (801c47c <prvPortStartFirstTask+0x24>)
 801c45a:	6800      	ldr	r0, [r0, #0]
 801c45c:	6800      	ldr	r0, [r0, #0]
 801c45e:	f380 8808 	msr	MSP, r0
 801c462:	f04f 0000 	mov.w	r0, #0
 801c466:	f380 8814 	msr	CONTROL, r0
 801c46a:	b662      	cpsie	i
 801c46c:	b661      	cpsie	f
 801c46e:	f3bf 8f4f 	dsb	sy
 801c472:	f3bf 8f6f 	isb	sy
 801c476:	df00      	svc	0
 801c478:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 801c47a:	bf00      	nop
 801c47c:	e000ed08 	.word	0xe000ed08

0801c480 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 801c480:	b580      	push	{r7, lr}
 801c482:	b086      	sub	sp, #24
 801c484:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 801c486:	4b47      	ldr	r3, [pc, #284]	@ (801c5a4 <xPortStartScheduler+0x124>)
 801c488:	681b      	ldr	r3, [r3, #0]
 801c48a:	4a47      	ldr	r2, [pc, #284]	@ (801c5a8 <xPortStartScheduler+0x128>)
 801c48c:	4293      	cmp	r3, r2
 801c48e:	d10b      	bne.n	801c4a8 <xPortStartScheduler+0x28>
	__asm volatile
 801c490:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801c494:	f383 8811 	msr	BASEPRI, r3
 801c498:	f3bf 8f6f 	isb	sy
 801c49c:	f3bf 8f4f 	dsb	sy
 801c4a0:	613b      	str	r3, [r7, #16]
}
 801c4a2:	bf00      	nop
 801c4a4:	bf00      	nop
 801c4a6:	e7fd      	b.n	801c4a4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 801c4a8:	4b3e      	ldr	r3, [pc, #248]	@ (801c5a4 <xPortStartScheduler+0x124>)
 801c4aa:	681b      	ldr	r3, [r3, #0]
 801c4ac:	4a3f      	ldr	r2, [pc, #252]	@ (801c5ac <xPortStartScheduler+0x12c>)
 801c4ae:	4293      	cmp	r3, r2
 801c4b0:	d10b      	bne.n	801c4ca <xPortStartScheduler+0x4a>
	__asm volatile
 801c4b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801c4b6:	f383 8811 	msr	BASEPRI, r3
 801c4ba:	f3bf 8f6f 	isb	sy
 801c4be:	f3bf 8f4f 	dsb	sy
 801c4c2:	60fb      	str	r3, [r7, #12]
}
 801c4c4:	bf00      	nop
 801c4c6:	bf00      	nop
 801c4c8:	e7fd      	b.n	801c4c6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 801c4ca:	4b39      	ldr	r3, [pc, #228]	@ (801c5b0 <xPortStartScheduler+0x130>)
 801c4cc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 801c4ce:	697b      	ldr	r3, [r7, #20]
 801c4d0:	781b      	ldrb	r3, [r3, #0]
 801c4d2:	b2db      	uxtb	r3, r3
 801c4d4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 801c4d6:	697b      	ldr	r3, [r7, #20]
 801c4d8:	22ff      	movs	r2, #255	@ 0xff
 801c4da:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 801c4dc:	697b      	ldr	r3, [r7, #20]
 801c4de:	781b      	ldrb	r3, [r3, #0]
 801c4e0:	b2db      	uxtb	r3, r3
 801c4e2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 801c4e4:	78fb      	ldrb	r3, [r7, #3]
 801c4e6:	b2db      	uxtb	r3, r3
 801c4e8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 801c4ec:	b2da      	uxtb	r2, r3
 801c4ee:	4b31      	ldr	r3, [pc, #196]	@ (801c5b4 <xPortStartScheduler+0x134>)
 801c4f0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 801c4f2:	4b31      	ldr	r3, [pc, #196]	@ (801c5b8 <xPortStartScheduler+0x138>)
 801c4f4:	2207      	movs	r2, #7
 801c4f6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801c4f8:	e009      	b.n	801c50e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 801c4fa:	4b2f      	ldr	r3, [pc, #188]	@ (801c5b8 <xPortStartScheduler+0x138>)
 801c4fc:	681b      	ldr	r3, [r3, #0]
 801c4fe:	3b01      	subs	r3, #1
 801c500:	4a2d      	ldr	r2, [pc, #180]	@ (801c5b8 <xPortStartScheduler+0x138>)
 801c502:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 801c504:	78fb      	ldrb	r3, [r7, #3]
 801c506:	b2db      	uxtb	r3, r3
 801c508:	005b      	lsls	r3, r3, #1
 801c50a:	b2db      	uxtb	r3, r3
 801c50c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801c50e:	78fb      	ldrb	r3, [r7, #3]
 801c510:	b2db      	uxtb	r3, r3
 801c512:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 801c516:	2b80      	cmp	r3, #128	@ 0x80
 801c518:	d0ef      	beq.n	801c4fa <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 801c51a:	4b27      	ldr	r3, [pc, #156]	@ (801c5b8 <xPortStartScheduler+0x138>)
 801c51c:	681b      	ldr	r3, [r3, #0]
 801c51e:	f1c3 0307 	rsb	r3, r3, #7
 801c522:	2b04      	cmp	r3, #4
 801c524:	d00b      	beq.n	801c53e <xPortStartScheduler+0xbe>
	__asm volatile
 801c526:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801c52a:	f383 8811 	msr	BASEPRI, r3
 801c52e:	f3bf 8f6f 	isb	sy
 801c532:	f3bf 8f4f 	dsb	sy
 801c536:	60bb      	str	r3, [r7, #8]
}
 801c538:	bf00      	nop
 801c53a:	bf00      	nop
 801c53c:	e7fd      	b.n	801c53a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 801c53e:	4b1e      	ldr	r3, [pc, #120]	@ (801c5b8 <xPortStartScheduler+0x138>)
 801c540:	681b      	ldr	r3, [r3, #0]
 801c542:	021b      	lsls	r3, r3, #8
 801c544:	4a1c      	ldr	r2, [pc, #112]	@ (801c5b8 <xPortStartScheduler+0x138>)
 801c546:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 801c548:	4b1b      	ldr	r3, [pc, #108]	@ (801c5b8 <xPortStartScheduler+0x138>)
 801c54a:	681b      	ldr	r3, [r3, #0]
 801c54c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 801c550:	4a19      	ldr	r2, [pc, #100]	@ (801c5b8 <xPortStartScheduler+0x138>)
 801c552:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 801c554:	687b      	ldr	r3, [r7, #4]
 801c556:	b2da      	uxtb	r2, r3
 801c558:	697b      	ldr	r3, [r7, #20]
 801c55a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 801c55c:	4b17      	ldr	r3, [pc, #92]	@ (801c5bc <xPortStartScheduler+0x13c>)
 801c55e:	681b      	ldr	r3, [r3, #0]
 801c560:	4a16      	ldr	r2, [pc, #88]	@ (801c5bc <xPortStartScheduler+0x13c>)
 801c562:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 801c566:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 801c568:	4b14      	ldr	r3, [pc, #80]	@ (801c5bc <xPortStartScheduler+0x13c>)
 801c56a:	681b      	ldr	r3, [r3, #0]
 801c56c:	4a13      	ldr	r2, [pc, #76]	@ (801c5bc <xPortStartScheduler+0x13c>)
 801c56e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 801c572:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 801c574:	f000 f8da 	bl	801c72c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 801c578:	4b11      	ldr	r3, [pc, #68]	@ (801c5c0 <xPortStartScheduler+0x140>)
 801c57a:	2200      	movs	r2, #0
 801c57c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 801c57e:	f000 f8f9 	bl	801c774 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 801c582:	4b10      	ldr	r3, [pc, #64]	@ (801c5c4 <xPortStartScheduler+0x144>)
 801c584:	681b      	ldr	r3, [r3, #0]
 801c586:	4a0f      	ldr	r2, [pc, #60]	@ (801c5c4 <xPortStartScheduler+0x144>)
 801c588:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 801c58c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 801c58e:	f7ff ff63 	bl	801c458 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 801c592:	f7fe fe47 	bl	801b224 <vTaskSwitchContext>
	prvTaskExitError();
 801c596:	f7ff ff19 	bl	801c3cc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 801c59a:	2300      	movs	r3, #0
}
 801c59c:	4618      	mov	r0, r3
 801c59e:	3718      	adds	r7, #24
 801c5a0:	46bd      	mov	sp, r7
 801c5a2:	bd80      	pop	{r7, pc}
 801c5a4:	e000ed00 	.word	0xe000ed00
 801c5a8:	410fc271 	.word	0x410fc271
 801c5ac:	410fc270 	.word	0x410fc270
 801c5b0:	e000e400 	.word	0xe000e400
 801c5b4:	200023d8 	.word	0x200023d8
 801c5b8:	200023dc 	.word	0x200023dc
 801c5bc:	e000ed20 	.word	0xe000ed20
 801c5c0:	200000fc 	.word	0x200000fc
 801c5c4:	e000ef34 	.word	0xe000ef34

0801c5c8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 801c5c8:	b480      	push	{r7}
 801c5ca:	b083      	sub	sp, #12
 801c5cc:	af00      	add	r7, sp, #0
	__asm volatile
 801c5ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801c5d2:	f383 8811 	msr	BASEPRI, r3
 801c5d6:	f3bf 8f6f 	isb	sy
 801c5da:	f3bf 8f4f 	dsb	sy
 801c5de:	607b      	str	r3, [r7, #4]
}
 801c5e0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 801c5e2:	4b10      	ldr	r3, [pc, #64]	@ (801c624 <vPortEnterCritical+0x5c>)
 801c5e4:	681b      	ldr	r3, [r3, #0]
 801c5e6:	3301      	adds	r3, #1
 801c5e8:	4a0e      	ldr	r2, [pc, #56]	@ (801c624 <vPortEnterCritical+0x5c>)
 801c5ea:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 801c5ec:	4b0d      	ldr	r3, [pc, #52]	@ (801c624 <vPortEnterCritical+0x5c>)
 801c5ee:	681b      	ldr	r3, [r3, #0]
 801c5f0:	2b01      	cmp	r3, #1
 801c5f2:	d110      	bne.n	801c616 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 801c5f4:	4b0c      	ldr	r3, [pc, #48]	@ (801c628 <vPortEnterCritical+0x60>)
 801c5f6:	681b      	ldr	r3, [r3, #0]
 801c5f8:	b2db      	uxtb	r3, r3
 801c5fa:	2b00      	cmp	r3, #0
 801c5fc:	d00b      	beq.n	801c616 <vPortEnterCritical+0x4e>
	__asm volatile
 801c5fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801c602:	f383 8811 	msr	BASEPRI, r3
 801c606:	f3bf 8f6f 	isb	sy
 801c60a:	f3bf 8f4f 	dsb	sy
 801c60e:	603b      	str	r3, [r7, #0]
}
 801c610:	bf00      	nop
 801c612:	bf00      	nop
 801c614:	e7fd      	b.n	801c612 <vPortEnterCritical+0x4a>
	}
}
 801c616:	bf00      	nop
 801c618:	370c      	adds	r7, #12
 801c61a:	46bd      	mov	sp, r7
 801c61c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c620:	4770      	bx	lr
 801c622:	bf00      	nop
 801c624:	200000fc 	.word	0x200000fc
 801c628:	e000ed04 	.word	0xe000ed04

0801c62c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 801c62c:	b480      	push	{r7}
 801c62e:	b083      	sub	sp, #12
 801c630:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 801c632:	4b12      	ldr	r3, [pc, #72]	@ (801c67c <vPortExitCritical+0x50>)
 801c634:	681b      	ldr	r3, [r3, #0]
 801c636:	2b00      	cmp	r3, #0
 801c638:	d10b      	bne.n	801c652 <vPortExitCritical+0x26>
	__asm volatile
 801c63a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801c63e:	f383 8811 	msr	BASEPRI, r3
 801c642:	f3bf 8f6f 	isb	sy
 801c646:	f3bf 8f4f 	dsb	sy
 801c64a:	607b      	str	r3, [r7, #4]
}
 801c64c:	bf00      	nop
 801c64e:	bf00      	nop
 801c650:	e7fd      	b.n	801c64e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 801c652:	4b0a      	ldr	r3, [pc, #40]	@ (801c67c <vPortExitCritical+0x50>)
 801c654:	681b      	ldr	r3, [r3, #0]
 801c656:	3b01      	subs	r3, #1
 801c658:	4a08      	ldr	r2, [pc, #32]	@ (801c67c <vPortExitCritical+0x50>)
 801c65a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 801c65c:	4b07      	ldr	r3, [pc, #28]	@ (801c67c <vPortExitCritical+0x50>)
 801c65e:	681b      	ldr	r3, [r3, #0]
 801c660:	2b00      	cmp	r3, #0
 801c662:	d105      	bne.n	801c670 <vPortExitCritical+0x44>
 801c664:	2300      	movs	r3, #0
 801c666:	603b      	str	r3, [r7, #0]
	__asm volatile
 801c668:	683b      	ldr	r3, [r7, #0]
 801c66a:	f383 8811 	msr	BASEPRI, r3
}
 801c66e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 801c670:	bf00      	nop
 801c672:	370c      	adds	r7, #12
 801c674:	46bd      	mov	sp, r7
 801c676:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c67a:	4770      	bx	lr
 801c67c:	200000fc 	.word	0x200000fc

0801c680 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 801c680:	f3ef 8009 	mrs	r0, PSP
 801c684:	f3bf 8f6f 	isb	sy
 801c688:	4b15      	ldr	r3, [pc, #84]	@ (801c6e0 <pxCurrentTCBConst>)
 801c68a:	681a      	ldr	r2, [r3, #0]
 801c68c:	f01e 0f10 	tst.w	lr, #16
 801c690:	bf08      	it	eq
 801c692:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 801c696:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c69a:	6010      	str	r0, [r2, #0]
 801c69c:	e92d 0009 	stmdb	sp!, {r0, r3}
 801c6a0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 801c6a4:	f380 8811 	msr	BASEPRI, r0
 801c6a8:	f3bf 8f4f 	dsb	sy
 801c6ac:	f3bf 8f6f 	isb	sy
 801c6b0:	f7fe fdb8 	bl	801b224 <vTaskSwitchContext>
 801c6b4:	f04f 0000 	mov.w	r0, #0
 801c6b8:	f380 8811 	msr	BASEPRI, r0
 801c6bc:	bc09      	pop	{r0, r3}
 801c6be:	6819      	ldr	r1, [r3, #0]
 801c6c0:	6808      	ldr	r0, [r1, #0]
 801c6c2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c6c6:	f01e 0f10 	tst.w	lr, #16
 801c6ca:	bf08      	it	eq
 801c6cc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 801c6d0:	f380 8809 	msr	PSP, r0
 801c6d4:	f3bf 8f6f 	isb	sy
 801c6d8:	4770      	bx	lr
 801c6da:	bf00      	nop
 801c6dc:	f3af 8000 	nop.w

0801c6e0 <pxCurrentTCBConst>:
 801c6e0:	20001dac 	.word	0x20001dac
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 801c6e4:	bf00      	nop
 801c6e6:	bf00      	nop

0801c6e8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 801c6e8:	b580      	push	{r7, lr}
 801c6ea:	b082      	sub	sp, #8
 801c6ec:	af00      	add	r7, sp, #0
	__asm volatile
 801c6ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801c6f2:	f383 8811 	msr	BASEPRI, r3
 801c6f6:	f3bf 8f6f 	isb	sy
 801c6fa:	f3bf 8f4f 	dsb	sy
 801c6fe:	607b      	str	r3, [r7, #4]
}
 801c700:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 801c702:	f7fe fcd5 	bl	801b0b0 <xTaskIncrementTick>
 801c706:	4603      	mov	r3, r0
 801c708:	2b00      	cmp	r3, #0
 801c70a:	d003      	beq.n	801c714 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 801c70c:	4b06      	ldr	r3, [pc, #24]	@ (801c728 <xPortSysTickHandler+0x40>)
 801c70e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801c712:	601a      	str	r2, [r3, #0]
 801c714:	2300      	movs	r3, #0
 801c716:	603b      	str	r3, [r7, #0]
	__asm volatile
 801c718:	683b      	ldr	r3, [r7, #0]
 801c71a:	f383 8811 	msr	BASEPRI, r3
}
 801c71e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 801c720:	bf00      	nop
 801c722:	3708      	adds	r7, #8
 801c724:	46bd      	mov	sp, r7
 801c726:	bd80      	pop	{r7, pc}
 801c728:	e000ed04 	.word	0xe000ed04

0801c72c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 801c72c:	b480      	push	{r7}
 801c72e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 801c730:	4b0b      	ldr	r3, [pc, #44]	@ (801c760 <vPortSetupTimerInterrupt+0x34>)
 801c732:	2200      	movs	r2, #0
 801c734:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 801c736:	4b0b      	ldr	r3, [pc, #44]	@ (801c764 <vPortSetupTimerInterrupt+0x38>)
 801c738:	2200      	movs	r2, #0
 801c73a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 801c73c:	4b0a      	ldr	r3, [pc, #40]	@ (801c768 <vPortSetupTimerInterrupt+0x3c>)
 801c73e:	681b      	ldr	r3, [r3, #0]
 801c740:	4a0a      	ldr	r2, [pc, #40]	@ (801c76c <vPortSetupTimerInterrupt+0x40>)
 801c742:	fba2 2303 	umull	r2, r3, r2, r3
 801c746:	099b      	lsrs	r3, r3, #6
 801c748:	4a09      	ldr	r2, [pc, #36]	@ (801c770 <vPortSetupTimerInterrupt+0x44>)
 801c74a:	3b01      	subs	r3, #1
 801c74c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 801c74e:	4b04      	ldr	r3, [pc, #16]	@ (801c760 <vPortSetupTimerInterrupt+0x34>)
 801c750:	2207      	movs	r2, #7
 801c752:	601a      	str	r2, [r3, #0]
}
 801c754:	bf00      	nop
 801c756:	46bd      	mov	sp, r7
 801c758:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c75c:	4770      	bx	lr
 801c75e:	bf00      	nop
 801c760:	e000e010 	.word	0xe000e010
 801c764:	e000e018 	.word	0xe000e018
 801c768:	20000064 	.word	0x20000064
 801c76c:	10624dd3 	.word	0x10624dd3
 801c770:	e000e014 	.word	0xe000e014

0801c774 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 801c774:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 801c784 <vPortEnableVFP+0x10>
 801c778:	6801      	ldr	r1, [r0, #0]
 801c77a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 801c77e:	6001      	str	r1, [r0, #0]
 801c780:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 801c782:	bf00      	nop
 801c784:	e000ed88 	.word	0xe000ed88

0801c788 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 801c788:	b480      	push	{r7}
 801c78a:	b085      	sub	sp, #20
 801c78c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 801c78e:	f3ef 8305 	mrs	r3, IPSR
 801c792:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 801c794:	68fb      	ldr	r3, [r7, #12]
 801c796:	2b0f      	cmp	r3, #15
 801c798:	d915      	bls.n	801c7c6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 801c79a:	4a18      	ldr	r2, [pc, #96]	@ (801c7fc <vPortValidateInterruptPriority+0x74>)
 801c79c:	68fb      	ldr	r3, [r7, #12]
 801c79e:	4413      	add	r3, r2
 801c7a0:	781b      	ldrb	r3, [r3, #0]
 801c7a2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 801c7a4:	4b16      	ldr	r3, [pc, #88]	@ (801c800 <vPortValidateInterruptPriority+0x78>)
 801c7a6:	781b      	ldrb	r3, [r3, #0]
 801c7a8:	7afa      	ldrb	r2, [r7, #11]
 801c7aa:	429a      	cmp	r2, r3
 801c7ac:	d20b      	bcs.n	801c7c6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 801c7ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801c7b2:	f383 8811 	msr	BASEPRI, r3
 801c7b6:	f3bf 8f6f 	isb	sy
 801c7ba:	f3bf 8f4f 	dsb	sy
 801c7be:	607b      	str	r3, [r7, #4]
}
 801c7c0:	bf00      	nop
 801c7c2:	bf00      	nop
 801c7c4:	e7fd      	b.n	801c7c2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 801c7c6:	4b0f      	ldr	r3, [pc, #60]	@ (801c804 <vPortValidateInterruptPriority+0x7c>)
 801c7c8:	681b      	ldr	r3, [r3, #0]
 801c7ca:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 801c7ce:	4b0e      	ldr	r3, [pc, #56]	@ (801c808 <vPortValidateInterruptPriority+0x80>)
 801c7d0:	681b      	ldr	r3, [r3, #0]
 801c7d2:	429a      	cmp	r2, r3
 801c7d4:	d90b      	bls.n	801c7ee <vPortValidateInterruptPriority+0x66>
	__asm volatile
 801c7d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801c7da:	f383 8811 	msr	BASEPRI, r3
 801c7de:	f3bf 8f6f 	isb	sy
 801c7e2:	f3bf 8f4f 	dsb	sy
 801c7e6:	603b      	str	r3, [r7, #0]
}
 801c7e8:	bf00      	nop
 801c7ea:	bf00      	nop
 801c7ec:	e7fd      	b.n	801c7ea <vPortValidateInterruptPriority+0x62>
	}
 801c7ee:	bf00      	nop
 801c7f0:	3714      	adds	r7, #20
 801c7f2:	46bd      	mov	sp, r7
 801c7f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c7f8:	4770      	bx	lr
 801c7fa:	bf00      	nop
 801c7fc:	e000e3f0 	.word	0xe000e3f0
 801c800:	200023d8 	.word	0x200023d8
 801c804:	e000ed0c 	.word	0xe000ed0c
 801c808:	200023dc 	.word	0x200023dc

0801c80c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 801c80c:	b580      	push	{r7, lr}
 801c80e:	b08a      	sub	sp, #40	@ 0x28
 801c810:	af00      	add	r7, sp, #0
 801c812:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 801c814:	2300      	movs	r3, #0
 801c816:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 801c818:	f7fe fb8e 	bl	801af38 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 801c81c:	4b5c      	ldr	r3, [pc, #368]	@ (801c990 <pvPortMalloc+0x184>)
 801c81e:	681b      	ldr	r3, [r3, #0]
 801c820:	2b00      	cmp	r3, #0
 801c822:	d101      	bne.n	801c828 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 801c824:	f000 f924 	bl	801ca70 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 801c828:	4b5a      	ldr	r3, [pc, #360]	@ (801c994 <pvPortMalloc+0x188>)
 801c82a:	681a      	ldr	r2, [r3, #0]
 801c82c:	687b      	ldr	r3, [r7, #4]
 801c82e:	4013      	ands	r3, r2
 801c830:	2b00      	cmp	r3, #0
 801c832:	f040 8095 	bne.w	801c960 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 801c836:	687b      	ldr	r3, [r7, #4]
 801c838:	2b00      	cmp	r3, #0
 801c83a:	d01e      	beq.n	801c87a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 801c83c:	2208      	movs	r2, #8
 801c83e:	687b      	ldr	r3, [r7, #4]
 801c840:	4413      	add	r3, r2
 801c842:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 801c844:	687b      	ldr	r3, [r7, #4]
 801c846:	f003 0307 	and.w	r3, r3, #7
 801c84a:	2b00      	cmp	r3, #0
 801c84c:	d015      	beq.n	801c87a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 801c84e:	687b      	ldr	r3, [r7, #4]
 801c850:	f023 0307 	bic.w	r3, r3, #7
 801c854:	3308      	adds	r3, #8
 801c856:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 801c858:	687b      	ldr	r3, [r7, #4]
 801c85a:	f003 0307 	and.w	r3, r3, #7
 801c85e:	2b00      	cmp	r3, #0
 801c860:	d00b      	beq.n	801c87a <pvPortMalloc+0x6e>
	__asm volatile
 801c862:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801c866:	f383 8811 	msr	BASEPRI, r3
 801c86a:	f3bf 8f6f 	isb	sy
 801c86e:	f3bf 8f4f 	dsb	sy
 801c872:	617b      	str	r3, [r7, #20]
}
 801c874:	bf00      	nop
 801c876:	bf00      	nop
 801c878:	e7fd      	b.n	801c876 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 801c87a:	687b      	ldr	r3, [r7, #4]
 801c87c:	2b00      	cmp	r3, #0
 801c87e:	d06f      	beq.n	801c960 <pvPortMalloc+0x154>
 801c880:	4b45      	ldr	r3, [pc, #276]	@ (801c998 <pvPortMalloc+0x18c>)
 801c882:	681b      	ldr	r3, [r3, #0]
 801c884:	687a      	ldr	r2, [r7, #4]
 801c886:	429a      	cmp	r2, r3
 801c888:	d86a      	bhi.n	801c960 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 801c88a:	4b44      	ldr	r3, [pc, #272]	@ (801c99c <pvPortMalloc+0x190>)
 801c88c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 801c88e:	4b43      	ldr	r3, [pc, #268]	@ (801c99c <pvPortMalloc+0x190>)
 801c890:	681b      	ldr	r3, [r3, #0]
 801c892:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801c894:	e004      	b.n	801c8a0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 801c896:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c898:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 801c89a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c89c:	681b      	ldr	r3, [r3, #0]
 801c89e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801c8a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c8a2:	685b      	ldr	r3, [r3, #4]
 801c8a4:	687a      	ldr	r2, [r7, #4]
 801c8a6:	429a      	cmp	r2, r3
 801c8a8:	d903      	bls.n	801c8b2 <pvPortMalloc+0xa6>
 801c8aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c8ac:	681b      	ldr	r3, [r3, #0]
 801c8ae:	2b00      	cmp	r3, #0
 801c8b0:	d1f1      	bne.n	801c896 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 801c8b2:	4b37      	ldr	r3, [pc, #220]	@ (801c990 <pvPortMalloc+0x184>)
 801c8b4:	681b      	ldr	r3, [r3, #0]
 801c8b6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801c8b8:	429a      	cmp	r2, r3
 801c8ba:	d051      	beq.n	801c960 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 801c8bc:	6a3b      	ldr	r3, [r7, #32]
 801c8be:	681b      	ldr	r3, [r3, #0]
 801c8c0:	2208      	movs	r2, #8
 801c8c2:	4413      	add	r3, r2
 801c8c4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 801c8c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c8c8:	681a      	ldr	r2, [r3, #0]
 801c8ca:	6a3b      	ldr	r3, [r7, #32]
 801c8cc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 801c8ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c8d0:	685a      	ldr	r2, [r3, #4]
 801c8d2:	687b      	ldr	r3, [r7, #4]
 801c8d4:	1ad2      	subs	r2, r2, r3
 801c8d6:	2308      	movs	r3, #8
 801c8d8:	005b      	lsls	r3, r3, #1
 801c8da:	429a      	cmp	r2, r3
 801c8dc:	d920      	bls.n	801c920 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 801c8de:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801c8e0:	687b      	ldr	r3, [r7, #4]
 801c8e2:	4413      	add	r3, r2
 801c8e4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 801c8e6:	69bb      	ldr	r3, [r7, #24]
 801c8e8:	f003 0307 	and.w	r3, r3, #7
 801c8ec:	2b00      	cmp	r3, #0
 801c8ee:	d00b      	beq.n	801c908 <pvPortMalloc+0xfc>
	__asm volatile
 801c8f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801c8f4:	f383 8811 	msr	BASEPRI, r3
 801c8f8:	f3bf 8f6f 	isb	sy
 801c8fc:	f3bf 8f4f 	dsb	sy
 801c900:	613b      	str	r3, [r7, #16]
}
 801c902:	bf00      	nop
 801c904:	bf00      	nop
 801c906:	e7fd      	b.n	801c904 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 801c908:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c90a:	685a      	ldr	r2, [r3, #4]
 801c90c:	687b      	ldr	r3, [r7, #4]
 801c90e:	1ad2      	subs	r2, r2, r3
 801c910:	69bb      	ldr	r3, [r7, #24]
 801c912:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 801c914:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c916:	687a      	ldr	r2, [r7, #4]
 801c918:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 801c91a:	69b8      	ldr	r0, [r7, #24]
 801c91c:	f000 f90a 	bl	801cb34 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 801c920:	4b1d      	ldr	r3, [pc, #116]	@ (801c998 <pvPortMalloc+0x18c>)
 801c922:	681a      	ldr	r2, [r3, #0]
 801c924:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c926:	685b      	ldr	r3, [r3, #4]
 801c928:	1ad3      	subs	r3, r2, r3
 801c92a:	4a1b      	ldr	r2, [pc, #108]	@ (801c998 <pvPortMalloc+0x18c>)
 801c92c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 801c92e:	4b1a      	ldr	r3, [pc, #104]	@ (801c998 <pvPortMalloc+0x18c>)
 801c930:	681a      	ldr	r2, [r3, #0]
 801c932:	4b1b      	ldr	r3, [pc, #108]	@ (801c9a0 <pvPortMalloc+0x194>)
 801c934:	681b      	ldr	r3, [r3, #0]
 801c936:	429a      	cmp	r2, r3
 801c938:	d203      	bcs.n	801c942 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 801c93a:	4b17      	ldr	r3, [pc, #92]	@ (801c998 <pvPortMalloc+0x18c>)
 801c93c:	681b      	ldr	r3, [r3, #0]
 801c93e:	4a18      	ldr	r2, [pc, #96]	@ (801c9a0 <pvPortMalloc+0x194>)
 801c940:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 801c942:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c944:	685a      	ldr	r2, [r3, #4]
 801c946:	4b13      	ldr	r3, [pc, #76]	@ (801c994 <pvPortMalloc+0x188>)
 801c948:	681b      	ldr	r3, [r3, #0]
 801c94a:	431a      	orrs	r2, r3
 801c94c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c94e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 801c950:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c952:	2200      	movs	r2, #0
 801c954:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 801c956:	4b13      	ldr	r3, [pc, #76]	@ (801c9a4 <pvPortMalloc+0x198>)
 801c958:	681b      	ldr	r3, [r3, #0]
 801c95a:	3301      	adds	r3, #1
 801c95c:	4a11      	ldr	r2, [pc, #68]	@ (801c9a4 <pvPortMalloc+0x198>)
 801c95e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 801c960:	f7fe faf8 	bl	801af54 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 801c964:	69fb      	ldr	r3, [r7, #28]
 801c966:	f003 0307 	and.w	r3, r3, #7
 801c96a:	2b00      	cmp	r3, #0
 801c96c:	d00b      	beq.n	801c986 <pvPortMalloc+0x17a>
	__asm volatile
 801c96e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801c972:	f383 8811 	msr	BASEPRI, r3
 801c976:	f3bf 8f6f 	isb	sy
 801c97a:	f3bf 8f4f 	dsb	sy
 801c97e:	60fb      	str	r3, [r7, #12]
}
 801c980:	bf00      	nop
 801c982:	bf00      	nop
 801c984:	e7fd      	b.n	801c982 <pvPortMalloc+0x176>
	return pvReturn;
 801c986:	69fb      	ldr	r3, [r7, #28]
}
 801c988:	4618      	mov	r0, r3
 801c98a:	3728      	adds	r7, #40	@ 0x28
 801c98c:	46bd      	mov	sp, r7
 801c98e:	bd80      	pop	{r7, pc}
 801c990:	20005fe8 	.word	0x20005fe8
 801c994:	20005ffc 	.word	0x20005ffc
 801c998:	20005fec 	.word	0x20005fec
 801c99c:	20005fe0 	.word	0x20005fe0
 801c9a0:	20005ff0 	.word	0x20005ff0
 801c9a4:	20005ff4 	.word	0x20005ff4

0801c9a8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 801c9a8:	b580      	push	{r7, lr}
 801c9aa:	b086      	sub	sp, #24
 801c9ac:	af00      	add	r7, sp, #0
 801c9ae:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 801c9b0:	687b      	ldr	r3, [r7, #4]
 801c9b2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 801c9b4:	687b      	ldr	r3, [r7, #4]
 801c9b6:	2b00      	cmp	r3, #0
 801c9b8:	d04f      	beq.n	801ca5a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 801c9ba:	2308      	movs	r3, #8
 801c9bc:	425b      	negs	r3, r3
 801c9be:	697a      	ldr	r2, [r7, #20]
 801c9c0:	4413      	add	r3, r2
 801c9c2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 801c9c4:	697b      	ldr	r3, [r7, #20]
 801c9c6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 801c9c8:	693b      	ldr	r3, [r7, #16]
 801c9ca:	685a      	ldr	r2, [r3, #4]
 801c9cc:	4b25      	ldr	r3, [pc, #148]	@ (801ca64 <vPortFree+0xbc>)
 801c9ce:	681b      	ldr	r3, [r3, #0]
 801c9d0:	4013      	ands	r3, r2
 801c9d2:	2b00      	cmp	r3, #0
 801c9d4:	d10b      	bne.n	801c9ee <vPortFree+0x46>
	__asm volatile
 801c9d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801c9da:	f383 8811 	msr	BASEPRI, r3
 801c9de:	f3bf 8f6f 	isb	sy
 801c9e2:	f3bf 8f4f 	dsb	sy
 801c9e6:	60fb      	str	r3, [r7, #12]
}
 801c9e8:	bf00      	nop
 801c9ea:	bf00      	nop
 801c9ec:	e7fd      	b.n	801c9ea <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 801c9ee:	693b      	ldr	r3, [r7, #16]
 801c9f0:	681b      	ldr	r3, [r3, #0]
 801c9f2:	2b00      	cmp	r3, #0
 801c9f4:	d00b      	beq.n	801ca0e <vPortFree+0x66>
	__asm volatile
 801c9f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801c9fa:	f383 8811 	msr	BASEPRI, r3
 801c9fe:	f3bf 8f6f 	isb	sy
 801ca02:	f3bf 8f4f 	dsb	sy
 801ca06:	60bb      	str	r3, [r7, #8]
}
 801ca08:	bf00      	nop
 801ca0a:	bf00      	nop
 801ca0c:	e7fd      	b.n	801ca0a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 801ca0e:	693b      	ldr	r3, [r7, #16]
 801ca10:	685a      	ldr	r2, [r3, #4]
 801ca12:	4b14      	ldr	r3, [pc, #80]	@ (801ca64 <vPortFree+0xbc>)
 801ca14:	681b      	ldr	r3, [r3, #0]
 801ca16:	4013      	ands	r3, r2
 801ca18:	2b00      	cmp	r3, #0
 801ca1a:	d01e      	beq.n	801ca5a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 801ca1c:	693b      	ldr	r3, [r7, #16]
 801ca1e:	681b      	ldr	r3, [r3, #0]
 801ca20:	2b00      	cmp	r3, #0
 801ca22:	d11a      	bne.n	801ca5a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 801ca24:	693b      	ldr	r3, [r7, #16]
 801ca26:	685a      	ldr	r2, [r3, #4]
 801ca28:	4b0e      	ldr	r3, [pc, #56]	@ (801ca64 <vPortFree+0xbc>)
 801ca2a:	681b      	ldr	r3, [r3, #0]
 801ca2c:	43db      	mvns	r3, r3
 801ca2e:	401a      	ands	r2, r3
 801ca30:	693b      	ldr	r3, [r7, #16]
 801ca32:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 801ca34:	f7fe fa80 	bl	801af38 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 801ca38:	693b      	ldr	r3, [r7, #16]
 801ca3a:	685a      	ldr	r2, [r3, #4]
 801ca3c:	4b0a      	ldr	r3, [pc, #40]	@ (801ca68 <vPortFree+0xc0>)
 801ca3e:	681b      	ldr	r3, [r3, #0]
 801ca40:	4413      	add	r3, r2
 801ca42:	4a09      	ldr	r2, [pc, #36]	@ (801ca68 <vPortFree+0xc0>)
 801ca44:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 801ca46:	6938      	ldr	r0, [r7, #16]
 801ca48:	f000 f874 	bl	801cb34 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 801ca4c:	4b07      	ldr	r3, [pc, #28]	@ (801ca6c <vPortFree+0xc4>)
 801ca4e:	681b      	ldr	r3, [r3, #0]
 801ca50:	3301      	adds	r3, #1
 801ca52:	4a06      	ldr	r2, [pc, #24]	@ (801ca6c <vPortFree+0xc4>)
 801ca54:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 801ca56:	f7fe fa7d 	bl	801af54 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 801ca5a:	bf00      	nop
 801ca5c:	3718      	adds	r7, #24
 801ca5e:	46bd      	mov	sp, r7
 801ca60:	bd80      	pop	{r7, pc}
 801ca62:	bf00      	nop
 801ca64:	20005ffc 	.word	0x20005ffc
 801ca68:	20005fec 	.word	0x20005fec
 801ca6c:	20005ff8 	.word	0x20005ff8

0801ca70 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 801ca70:	b480      	push	{r7}
 801ca72:	b085      	sub	sp, #20
 801ca74:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 801ca76:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 801ca7a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 801ca7c:	4b27      	ldr	r3, [pc, #156]	@ (801cb1c <prvHeapInit+0xac>)
 801ca7e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 801ca80:	68fb      	ldr	r3, [r7, #12]
 801ca82:	f003 0307 	and.w	r3, r3, #7
 801ca86:	2b00      	cmp	r3, #0
 801ca88:	d00c      	beq.n	801caa4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 801ca8a:	68fb      	ldr	r3, [r7, #12]
 801ca8c:	3307      	adds	r3, #7
 801ca8e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 801ca90:	68fb      	ldr	r3, [r7, #12]
 801ca92:	f023 0307 	bic.w	r3, r3, #7
 801ca96:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 801ca98:	68ba      	ldr	r2, [r7, #8]
 801ca9a:	68fb      	ldr	r3, [r7, #12]
 801ca9c:	1ad3      	subs	r3, r2, r3
 801ca9e:	4a1f      	ldr	r2, [pc, #124]	@ (801cb1c <prvHeapInit+0xac>)
 801caa0:	4413      	add	r3, r2
 801caa2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 801caa4:	68fb      	ldr	r3, [r7, #12]
 801caa6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 801caa8:	4a1d      	ldr	r2, [pc, #116]	@ (801cb20 <prvHeapInit+0xb0>)
 801caaa:	687b      	ldr	r3, [r7, #4]
 801caac:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 801caae:	4b1c      	ldr	r3, [pc, #112]	@ (801cb20 <prvHeapInit+0xb0>)
 801cab0:	2200      	movs	r2, #0
 801cab2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 801cab4:	687b      	ldr	r3, [r7, #4]
 801cab6:	68ba      	ldr	r2, [r7, #8]
 801cab8:	4413      	add	r3, r2
 801caba:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 801cabc:	2208      	movs	r2, #8
 801cabe:	68fb      	ldr	r3, [r7, #12]
 801cac0:	1a9b      	subs	r3, r3, r2
 801cac2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 801cac4:	68fb      	ldr	r3, [r7, #12]
 801cac6:	f023 0307 	bic.w	r3, r3, #7
 801caca:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 801cacc:	68fb      	ldr	r3, [r7, #12]
 801cace:	4a15      	ldr	r2, [pc, #84]	@ (801cb24 <prvHeapInit+0xb4>)
 801cad0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 801cad2:	4b14      	ldr	r3, [pc, #80]	@ (801cb24 <prvHeapInit+0xb4>)
 801cad4:	681b      	ldr	r3, [r3, #0]
 801cad6:	2200      	movs	r2, #0
 801cad8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 801cada:	4b12      	ldr	r3, [pc, #72]	@ (801cb24 <prvHeapInit+0xb4>)
 801cadc:	681b      	ldr	r3, [r3, #0]
 801cade:	2200      	movs	r2, #0
 801cae0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 801cae2:	687b      	ldr	r3, [r7, #4]
 801cae4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 801cae6:	683b      	ldr	r3, [r7, #0]
 801cae8:	68fa      	ldr	r2, [r7, #12]
 801caea:	1ad2      	subs	r2, r2, r3
 801caec:	683b      	ldr	r3, [r7, #0]
 801caee:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 801caf0:	4b0c      	ldr	r3, [pc, #48]	@ (801cb24 <prvHeapInit+0xb4>)
 801caf2:	681a      	ldr	r2, [r3, #0]
 801caf4:	683b      	ldr	r3, [r7, #0]
 801caf6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801caf8:	683b      	ldr	r3, [r7, #0]
 801cafa:	685b      	ldr	r3, [r3, #4]
 801cafc:	4a0a      	ldr	r2, [pc, #40]	@ (801cb28 <prvHeapInit+0xb8>)
 801cafe:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801cb00:	683b      	ldr	r3, [r7, #0]
 801cb02:	685b      	ldr	r3, [r3, #4]
 801cb04:	4a09      	ldr	r2, [pc, #36]	@ (801cb2c <prvHeapInit+0xbc>)
 801cb06:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 801cb08:	4b09      	ldr	r3, [pc, #36]	@ (801cb30 <prvHeapInit+0xc0>)
 801cb0a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 801cb0e:	601a      	str	r2, [r3, #0]
}
 801cb10:	bf00      	nop
 801cb12:	3714      	adds	r7, #20
 801cb14:	46bd      	mov	sp, r7
 801cb16:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cb1a:	4770      	bx	lr
 801cb1c:	200023e0 	.word	0x200023e0
 801cb20:	20005fe0 	.word	0x20005fe0
 801cb24:	20005fe8 	.word	0x20005fe8
 801cb28:	20005ff0 	.word	0x20005ff0
 801cb2c:	20005fec 	.word	0x20005fec
 801cb30:	20005ffc 	.word	0x20005ffc

0801cb34 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 801cb34:	b480      	push	{r7}
 801cb36:	b085      	sub	sp, #20
 801cb38:	af00      	add	r7, sp, #0
 801cb3a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 801cb3c:	4b28      	ldr	r3, [pc, #160]	@ (801cbe0 <prvInsertBlockIntoFreeList+0xac>)
 801cb3e:	60fb      	str	r3, [r7, #12]
 801cb40:	e002      	b.n	801cb48 <prvInsertBlockIntoFreeList+0x14>
 801cb42:	68fb      	ldr	r3, [r7, #12]
 801cb44:	681b      	ldr	r3, [r3, #0]
 801cb46:	60fb      	str	r3, [r7, #12]
 801cb48:	68fb      	ldr	r3, [r7, #12]
 801cb4a:	681b      	ldr	r3, [r3, #0]
 801cb4c:	687a      	ldr	r2, [r7, #4]
 801cb4e:	429a      	cmp	r2, r3
 801cb50:	d8f7      	bhi.n	801cb42 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 801cb52:	68fb      	ldr	r3, [r7, #12]
 801cb54:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 801cb56:	68fb      	ldr	r3, [r7, #12]
 801cb58:	685b      	ldr	r3, [r3, #4]
 801cb5a:	68ba      	ldr	r2, [r7, #8]
 801cb5c:	4413      	add	r3, r2
 801cb5e:	687a      	ldr	r2, [r7, #4]
 801cb60:	429a      	cmp	r2, r3
 801cb62:	d108      	bne.n	801cb76 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 801cb64:	68fb      	ldr	r3, [r7, #12]
 801cb66:	685a      	ldr	r2, [r3, #4]
 801cb68:	687b      	ldr	r3, [r7, #4]
 801cb6a:	685b      	ldr	r3, [r3, #4]
 801cb6c:	441a      	add	r2, r3
 801cb6e:	68fb      	ldr	r3, [r7, #12]
 801cb70:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 801cb72:	68fb      	ldr	r3, [r7, #12]
 801cb74:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 801cb76:	687b      	ldr	r3, [r7, #4]
 801cb78:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 801cb7a:	687b      	ldr	r3, [r7, #4]
 801cb7c:	685b      	ldr	r3, [r3, #4]
 801cb7e:	68ba      	ldr	r2, [r7, #8]
 801cb80:	441a      	add	r2, r3
 801cb82:	68fb      	ldr	r3, [r7, #12]
 801cb84:	681b      	ldr	r3, [r3, #0]
 801cb86:	429a      	cmp	r2, r3
 801cb88:	d118      	bne.n	801cbbc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 801cb8a:	68fb      	ldr	r3, [r7, #12]
 801cb8c:	681a      	ldr	r2, [r3, #0]
 801cb8e:	4b15      	ldr	r3, [pc, #84]	@ (801cbe4 <prvInsertBlockIntoFreeList+0xb0>)
 801cb90:	681b      	ldr	r3, [r3, #0]
 801cb92:	429a      	cmp	r2, r3
 801cb94:	d00d      	beq.n	801cbb2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 801cb96:	687b      	ldr	r3, [r7, #4]
 801cb98:	685a      	ldr	r2, [r3, #4]
 801cb9a:	68fb      	ldr	r3, [r7, #12]
 801cb9c:	681b      	ldr	r3, [r3, #0]
 801cb9e:	685b      	ldr	r3, [r3, #4]
 801cba0:	441a      	add	r2, r3
 801cba2:	687b      	ldr	r3, [r7, #4]
 801cba4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 801cba6:	68fb      	ldr	r3, [r7, #12]
 801cba8:	681b      	ldr	r3, [r3, #0]
 801cbaa:	681a      	ldr	r2, [r3, #0]
 801cbac:	687b      	ldr	r3, [r7, #4]
 801cbae:	601a      	str	r2, [r3, #0]
 801cbb0:	e008      	b.n	801cbc4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 801cbb2:	4b0c      	ldr	r3, [pc, #48]	@ (801cbe4 <prvInsertBlockIntoFreeList+0xb0>)
 801cbb4:	681a      	ldr	r2, [r3, #0]
 801cbb6:	687b      	ldr	r3, [r7, #4]
 801cbb8:	601a      	str	r2, [r3, #0]
 801cbba:	e003      	b.n	801cbc4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 801cbbc:	68fb      	ldr	r3, [r7, #12]
 801cbbe:	681a      	ldr	r2, [r3, #0]
 801cbc0:	687b      	ldr	r3, [r7, #4]
 801cbc2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 801cbc4:	68fa      	ldr	r2, [r7, #12]
 801cbc6:	687b      	ldr	r3, [r7, #4]
 801cbc8:	429a      	cmp	r2, r3
 801cbca:	d002      	beq.n	801cbd2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 801cbcc:	68fb      	ldr	r3, [r7, #12]
 801cbce:	687a      	ldr	r2, [r7, #4]
 801cbd0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801cbd2:	bf00      	nop
 801cbd4:	3714      	adds	r7, #20
 801cbd6:	46bd      	mov	sp, r7
 801cbd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cbdc:	4770      	bx	lr
 801cbde:	bf00      	nop
 801cbe0:	20005fe0 	.word	0x20005fe0
 801cbe4:	20005fe8 	.word	0x20005fe8

0801cbe8 <__cvt>:
 801cbe8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801cbec:	ec57 6b10 	vmov	r6, r7, d0
 801cbf0:	2f00      	cmp	r7, #0
 801cbf2:	460c      	mov	r4, r1
 801cbf4:	4619      	mov	r1, r3
 801cbf6:	463b      	mov	r3, r7
 801cbf8:	bfbb      	ittet	lt
 801cbfa:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 801cbfe:	461f      	movlt	r7, r3
 801cc00:	2300      	movge	r3, #0
 801cc02:	232d      	movlt	r3, #45	@ 0x2d
 801cc04:	700b      	strb	r3, [r1, #0]
 801cc06:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801cc08:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 801cc0c:	4691      	mov	r9, r2
 801cc0e:	f023 0820 	bic.w	r8, r3, #32
 801cc12:	bfbc      	itt	lt
 801cc14:	4632      	movlt	r2, r6
 801cc16:	4616      	movlt	r6, r2
 801cc18:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 801cc1c:	d005      	beq.n	801cc2a <__cvt+0x42>
 801cc1e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 801cc22:	d100      	bne.n	801cc26 <__cvt+0x3e>
 801cc24:	3401      	adds	r4, #1
 801cc26:	2102      	movs	r1, #2
 801cc28:	e000      	b.n	801cc2c <__cvt+0x44>
 801cc2a:	2103      	movs	r1, #3
 801cc2c:	ab03      	add	r3, sp, #12
 801cc2e:	9301      	str	r3, [sp, #4]
 801cc30:	ab02      	add	r3, sp, #8
 801cc32:	9300      	str	r3, [sp, #0]
 801cc34:	ec47 6b10 	vmov	d0, r6, r7
 801cc38:	4653      	mov	r3, sl
 801cc3a:	4622      	mov	r2, r4
 801cc3c:	f001 f998 	bl	801df70 <_dtoa_r>
 801cc40:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 801cc44:	4605      	mov	r5, r0
 801cc46:	d119      	bne.n	801cc7c <__cvt+0x94>
 801cc48:	f019 0f01 	tst.w	r9, #1
 801cc4c:	d00e      	beq.n	801cc6c <__cvt+0x84>
 801cc4e:	eb00 0904 	add.w	r9, r0, r4
 801cc52:	2200      	movs	r2, #0
 801cc54:	2300      	movs	r3, #0
 801cc56:	4630      	mov	r0, r6
 801cc58:	4639      	mov	r1, r7
 801cc5a:	f7e3 ff35 	bl	8000ac8 <__aeabi_dcmpeq>
 801cc5e:	b108      	cbz	r0, 801cc64 <__cvt+0x7c>
 801cc60:	f8cd 900c 	str.w	r9, [sp, #12]
 801cc64:	2230      	movs	r2, #48	@ 0x30
 801cc66:	9b03      	ldr	r3, [sp, #12]
 801cc68:	454b      	cmp	r3, r9
 801cc6a:	d31e      	bcc.n	801ccaa <__cvt+0xc2>
 801cc6c:	9b03      	ldr	r3, [sp, #12]
 801cc6e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801cc70:	1b5b      	subs	r3, r3, r5
 801cc72:	4628      	mov	r0, r5
 801cc74:	6013      	str	r3, [r2, #0]
 801cc76:	b004      	add	sp, #16
 801cc78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801cc7c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 801cc80:	eb00 0904 	add.w	r9, r0, r4
 801cc84:	d1e5      	bne.n	801cc52 <__cvt+0x6a>
 801cc86:	7803      	ldrb	r3, [r0, #0]
 801cc88:	2b30      	cmp	r3, #48	@ 0x30
 801cc8a:	d10a      	bne.n	801cca2 <__cvt+0xba>
 801cc8c:	2200      	movs	r2, #0
 801cc8e:	2300      	movs	r3, #0
 801cc90:	4630      	mov	r0, r6
 801cc92:	4639      	mov	r1, r7
 801cc94:	f7e3 ff18 	bl	8000ac8 <__aeabi_dcmpeq>
 801cc98:	b918      	cbnz	r0, 801cca2 <__cvt+0xba>
 801cc9a:	f1c4 0401 	rsb	r4, r4, #1
 801cc9e:	f8ca 4000 	str.w	r4, [sl]
 801cca2:	f8da 3000 	ldr.w	r3, [sl]
 801cca6:	4499      	add	r9, r3
 801cca8:	e7d3      	b.n	801cc52 <__cvt+0x6a>
 801ccaa:	1c59      	adds	r1, r3, #1
 801ccac:	9103      	str	r1, [sp, #12]
 801ccae:	701a      	strb	r2, [r3, #0]
 801ccb0:	e7d9      	b.n	801cc66 <__cvt+0x7e>

0801ccb2 <__exponent>:
 801ccb2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801ccb4:	2900      	cmp	r1, #0
 801ccb6:	bfba      	itte	lt
 801ccb8:	4249      	neglt	r1, r1
 801ccba:	232d      	movlt	r3, #45	@ 0x2d
 801ccbc:	232b      	movge	r3, #43	@ 0x2b
 801ccbe:	2909      	cmp	r1, #9
 801ccc0:	7002      	strb	r2, [r0, #0]
 801ccc2:	7043      	strb	r3, [r0, #1]
 801ccc4:	dd29      	ble.n	801cd1a <__exponent+0x68>
 801ccc6:	f10d 0307 	add.w	r3, sp, #7
 801ccca:	461d      	mov	r5, r3
 801cccc:	270a      	movs	r7, #10
 801ccce:	461a      	mov	r2, r3
 801ccd0:	fbb1 f6f7 	udiv	r6, r1, r7
 801ccd4:	fb07 1416 	mls	r4, r7, r6, r1
 801ccd8:	3430      	adds	r4, #48	@ 0x30
 801ccda:	f802 4c01 	strb.w	r4, [r2, #-1]
 801ccde:	460c      	mov	r4, r1
 801cce0:	2c63      	cmp	r4, #99	@ 0x63
 801cce2:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 801cce6:	4631      	mov	r1, r6
 801cce8:	dcf1      	bgt.n	801ccce <__exponent+0x1c>
 801ccea:	3130      	adds	r1, #48	@ 0x30
 801ccec:	1e94      	subs	r4, r2, #2
 801ccee:	f803 1c01 	strb.w	r1, [r3, #-1]
 801ccf2:	1c41      	adds	r1, r0, #1
 801ccf4:	4623      	mov	r3, r4
 801ccf6:	42ab      	cmp	r3, r5
 801ccf8:	d30a      	bcc.n	801cd10 <__exponent+0x5e>
 801ccfa:	f10d 0309 	add.w	r3, sp, #9
 801ccfe:	1a9b      	subs	r3, r3, r2
 801cd00:	42ac      	cmp	r4, r5
 801cd02:	bf88      	it	hi
 801cd04:	2300      	movhi	r3, #0
 801cd06:	3302      	adds	r3, #2
 801cd08:	4403      	add	r3, r0
 801cd0a:	1a18      	subs	r0, r3, r0
 801cd0c:	b003      	add	sp, #12
 801cd0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801cd10:	f813 6b01 	ldrb.w	r6, [r3], #1
 801cd14:	f801 6f01 	strb.w	r6, [r1, #1]!
 801cd18:	e7ed      	b.n	801ccf6 <__exponent+0x44>
 801cd1a:	2330      	movs	r3, #48	@ 0x30
 801cd1c:	3130      	adds	r1, #48	@ 0x30
 801cd1e:	7083      	strb	r3, [r0, #2]
 801cd20:	70c1      	strb	r1, [r0, #3]
 801cd22:	1d03      	adds	r3, r0, #4
 801cd24:	e7f1      	b.n	801cd0a <__exponent+0x58>
	...

0801cd28 <_printf_float>:
 801cd28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cd2c:	b08d      	sub	sp, #52	@ 0x34
 801cd2e:	460c      	mov	r4, r1
 801cd30:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 801cd34:	4616      	mov	r6, r2
 801cd36:	461f      	mov	r7, r3
 801cd38:	4605      	mov	r5, r0
 801cd3a:	f000 ff17 	bl	801db6c <_localeconv_r>
 801cd3e:	6803      	ldr	r3, [r0, #0]
 801cd40:	9304      	str	r3, [sp, #16]
 801cd42:	4618      	mov	r0, r3
 801cd44:	f7e3 fa94 	bl	8000270 <strlen>
 801cd48:	2300      	movs	r3, #0
 801cd4a:	930a      	str	r3, [sp, #40]	@ 0x28
 801cd4c:	f8d8 3000 	ldr.w	r3, [r8]
 801cd50:	9005      	str	r0, [sp, #20]
 801cd52:	3307      	adds	r3, #7
 801cd54:	f023 0307 	bic.w	r3, r3, #7
 801cd58:	f103 0208 	add.w	r2, r3, #8
 801cd5c:	f894 a018 	ldrb.w	sl, [r4, #24]
 801cd60:	f8d4 b000 	ldr.w	fp, [r4]
 801cd64:	f8c8 2000 	str.w	r2, [r8]
 801cd68:	e9d3 8900 	ldrd	r8, r9, [r3]
 801cd6c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 801cd70:	9307      	str	r3, [sp, #28]
 801cd72:	f8cd 8018 	str.w	r8, [sp, #24]
 801cd76:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 801cd7a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801cd7e:	4b9c      	ldr	r3, [pc, #624]	@ (801cff0 <_printf_float+0x2c8>)
 801cd80:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801cd84:	f7e3 fed2 	bl	8000b2c <__aeabi_dcmpun>
 801cd88:	bb70      	cbnz	r0, 801cde8 <_printf_float+0xc0>
 801cd8a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801cd8e:	4b98      	ldr	r3, [pc, #608]	@ (801cff0 <_printf_float+0x2c8>)
 801cd90:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801cd94:	f7e3 feac 	bl	8000af0 <__aeabi_dcmple>
 801cd98:	bb30      	cbnz	r0, 801cde8 <_printf_float+0xc0>
 801cd9a:	2200      	movs	r2, #0
 801cd9c:	2300      	movs	r3, #0
 801cd9e:	4640      	mov	r0, r8
 801cda0:	4649      	mov	r1, r9
 801cda2:	f7e3 fe9b 	bl	8000adc <__aeabi_dcmplt>
 801cda6:	b110      	cbz	r0, 801cdae <_printf_float+0x86>
 801cda8:	232d      	movs	r3, #45	@ 0x2d
 801cdaa:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801cdae:	4a91      	ldr	r2, [pc, #580]	@ (801cff4 <_printf_float+0x2cc>)
 801cdb0:	4b91      	ldr	r3, [pc, #580]	@ (801cff8 <_printf_float+0x2d0>)
 801cdb2:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 801cdb6:	bf94      	ite	ls
 801cdb8:	4690      	movls	r8, r2
 801cdba:	4698      	movhi	r8, r3
 801cdbc:	2303      	movs	r3, #3
 801cdbe:	6123      	str	r3, [r4, #16]
 801cdc0:	f02b 0304 	bic.w	r3, fp, #4
 801cdc4:	6023      	str	r3, [r4, #0]
 801cdc6:	f04f 0900 	mov.w	r9, #0
 801cdca:	9700      	str	r7, [sp, #0]
 801cdcc:	4633      	mov	r3, r6
 801cdce:	aa0b      	add	r2, sp, #44	@ 0x2c
 801cdd0:	4621      	mov	r1, r4
 801cdd2:	4628      	mov	r0, r5
 801cdd4:	f000 f9d2 	bl	801d17c <_printf_common>
 801cdd8:	3001      	adds	r0, #1
 801cdda:	f040 808d 	bne.w	801cef8 <_printf_float+0x1d0>
 801cdde:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801cde2:	b00d      	add	sp, #52	@ 0x34
 801cde4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801cde8:	4642      	mov	r2, r8
 801cdea:	464b      	mov	r3, r9
 801cdec:	4640      	mov	r0, r8
 801cdee:	4649      	mov	r1, r9
 801cdf0:	f7e3 fe9c 	bl	8000b2c <__aeabi_dcmpun>
 801cdf4:	b140      	cbz	r0, 801ce08 <_printf_float+0xe0>
 801cdf6:	464b      	mov	r3, r9
 801cdf8:	2b00      	cmp	r3, #0
 801cdfa:	bfbc      	itt	lt
 801cdfc:	232d      	movlt	r3, #45	@ 0x2d
 801cdfe:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 801ce02:	4a7e      	ldr	r2, [pc, #504]	@ (801cffc <_printf_float+0x2d4>)
 801ce04:	4b7e      	ldr	r3, [pc, #504]	@ (801d000 <_printf_float+0x2d8>)
 801ce06:	e7d4      	b.n	801cdb2 <_printf_float+0x8a>
 801ce08:	6863      	ldr	r3, [r4, #4]
 801ce0a:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 801ce0e:	9206      	str	r2, [sp, #24]
 801ce10:	1c5a      	adds	r2, r3, #1
 801ce12:	d13b      	bne.n	801ce8c <_printf_float+0x164>
 801ce14:	2306      	movs	r3, #6
 801ce16:	6063      	str	r3, [r4, #4]
 801ce18:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 801ce1c:	2300      	movs	r3, #0
 801ce1e:	6022      	str	r2, [r4, #0]
 801ce20:	9303      	str	r3, [sp, #12]
 801ce22:	ab0a      	add	r3, sp, #40	@ 0x28
 801ce24:	e9cd a301 	strd	sl, r3, [sp, #4]
 801ce28:	ab09      	add	r3, sp, #36	@ 0x24
 801ce2a:	9300      	str	r3, [sp, #0]
 801ce2c:	6861      	ldr	r1, [r4, #4]
 801ce2e:	ec49 8b10 	vmov	d0, r8, r9
 801ce32:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 801ce36:	4628      	mov	r0, r5
 801ce38:	f7ff fed6 	bl	801cbe8 <__cvt>
 801ce3c:	9b06      	ldr	r3, [sp, #24]
 801ce3e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801ce40:	2b47      	cmp	r3, #71	@ 0x47
 801ce42:	4680      	mov	r8, r0
 801ce44:	d129      	bne.n	801ce9a <_printf_float+0x172>
 801ce46:	1cc8      	adds	r0, r1, #3
 801ce48:	db02      	blt.n	801ce50 <_printf_float+0x128>
 801ce4a:	6863      	ldr	r3, [r4, #4]
 801ce4c:	4299      	cmp	r1, r3
 801ce4e:	dd41      	ble.n	801ced4 <_printf_float+0x1ac>
 801ce50:	f1aa 0a02 	sub.w	sl, sl, #2
 801ce54:	fa5f fa8a 	uxtb.w	sl, sl
 801ce58:	3901      	subs	r1, #1
 801ce5a:	4652      	mov	r2, sl
 801ce5c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 801ce60:	9109      	str	r1, [sp, #36]	@ 0x24
 801ce62:	f7ff ff26 	bl	801ccb2 <__exponent>
 801ce66:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801ce68:	1813      	adds	r3, r2, r0
 801ce6a:	2a01      	cmp	r2, #1
 801ce6c:	4681      	mov	r9, r0
 801ce6e:	6123      	str	r3, [r4, #16]
 801ce70:	dc02      	bgt.n	801ce78 <_printf_float+0x150>
 801ce72:	6822      	ldr	r2, [r4, #0]
 801ce74:	07d2      	lsls	r2, r2, #31
 801ce76:	d501      	bpl.n	801ce7c <_printf_float+0x154>
 801ce78:	3301      	adds	r3, #1
 801ce7a:	6123      	str	r3, [r4, #16]
 801ce7c:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 801ce80:	2b00      	cmp	r3, #0
 801ce82:	d0a2      	beq.n	801cdca <_printf_float+0xa2>
 801ce84:	232d      	movs	r3, #45	@ 0x2d
 801ce86:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801ce8a:	e79e      	b.n	801cdca <_printf_float+0xa2>
 801ce8c:	9a06      	ldr	r2, [sp, #24]
 801ce8e:	2a47      	cmp	r2, #71	@ 0x47
 801ce90:	d1c2      	bne.n	801ce18 <_printf_float+0xf0>
 801ce92:	2b00      	cmp	r3, #0
 801ce94:	d1c0      	bne.n	801ce18 <_printf_float+0xf0>
 801ce96:	2301      	movs	r3, #1
 801ce98:	e7bd      	b.n	801ce16 <_printf_float+0xee>
 801ce9a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 801ce9e:	d9db      	bls.n	801ce58 <_printf_float+0x130>
 801cea0:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 801cea4:	d118      	bne.n	801ced8 <_printf_float+0x1b0>
 801cea6:	2900      	cmp	r1, #0
 801cea8:	6863      	ldr	r3, [r4, #4]
 801ceaa:	dd0b      	ble.n	801cec4 <_printf_float+0x19c>
 801ceac:	6121      	str	r1, [r4, #16]
 801ceae:	b913      	cbnz	r3, 801ceb6 <_printf_float+0x18e>
 801ceb0:	6822      	ldr	r2, [r4, #0]
 801ceb2:	07d0      	lsls	r0, r2, #31
 801ceb4:	d502      	bpl.n	801cebc <_printf_float+0x194>
 801ceb6:	3301      	adds	r3, #1
 801ceb8:	440b      	add	r3, r1
 801ceba:	6123      	str	r3, [r4, #16]
 801cebc:	65a1      	str	r1, [r4, #88]	@ 0x58
 801cebe:	f04f 0900 	mov.w	r9, #0
 801cec2:	e7db      	b.n	801ce7c <_printf_float+0x154>
 801cec4:	b913      	cbnz	r3, 801cecc <_printf_float+0x1a4>
 801cec6:	6822      	ldr	r2, [r4, #0]
 801cec8:	07d2      	lsls	r2, r2, #31
 801ceca:	d501      	bpl.n	801ced0 <_printf_float+0x1a8>
 801cecc:	3302      	adds	r3, #2
 801cece:	e7f4      	b.n	801ceba <_printf_float+0x192>
 801ced0:	2301      	movs	r3, #1
 801ced2:	e7f2      	b.n	801ceba <_printf_float+0x192>
 801ced4:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 801ced8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801ceda:	4299      	cmp	r1, r3
 801cedc:	db05      	blt.n	801ceea <_printf_float+0x1c2>
 801cede:	6823      	ldr	r3, [r4, #0]
 801cee0:	6121      	str	r1, [r4, #16]
 801cee2:	07d8      	lsls	r0, r3, #31
 801cee4:	d5ea      	bpl.n	801cebc <_printf_float+0x194>
 801cee6:	1c4b      	adds	r3, r1, #1
 801cee8:	e7e7      	b.n	801ceba <_printf_float+0x192>
 801ceea:	2900      	cmp	r1, #0
 801ceec:	bfd4      	ite	le
 801ceee:	f1c1 0202 	rsble	r2, r1, #2
 801cef2:	2201      	movgt	r2, #1
 801cef4:	4413      	add	r3, r2
 801cef6:	e7e0      	b.n	801ceba <_printf_float+0x192>
 801cef8:	6823      	ldr	r3, [r4, #0]
 801cefa:	055a      	lsls	r2, r3, #21
 801cefc:	d407      	bmi.n	801cf0e <_printf_float+0x1e6>
 801cefe:	6923      	ldr	r3, [r4, #16]
 801cf00:	4642      	mov	r2, r8
 801cf02:	4631      	mov	r1, r6
 801cf04:	4628      	mov	r0, r5
 801cf06:	47b8      	blx	r7
 801cf08:	3001      	adds	r0, #1
 801cf0a:	d12b      	bne.n	801cf64 <_printf_float+0x23c>
 801cf0c:	e767      	b.n	801cdde <_printf_float+0xb6>
 801cf0e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 801cf12:	f240 80dd 	bls.w	801d0d0 <_printf_float+0x3a8>
 801cf16:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 801cf1a:	2200      	movs	r2, #0
 801cf1c:	2300      	movs	r3, #0
 801cf1e:	f7e3 fdd3 	bl	8000ac8 <__aeabi_dcmpeq>
 801cf22:	2800      	cmp	r0, #0
 801cf24:	d033      	beq.n	801cf8e <_printf_float+0x266>
 801cf26:	4a37      	ldr	r2, [pc, #220]	@ (801d004 <_printf_float+0x2dc>)
 801cf28:	2301      	movs	r3, #1
 801cf2a:	4631      	mov	r1, r6
 801cf2c:	4628      	mov	r0, r5
 801cf2e:	47b8      	blx	r7
 801cf30:	3001      	adds	r0, #1
 801cf32:	f43f af54 	beq.w	801cdde <_printf_float+0xb6>
 801cf36:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 801cf3a:	4543      	cmp	r3, r8
 801cf3c:	db02      	blt.n	801cf44 <_printf_float+0x21c>
 801cf3e:	6823      	ldr	r3, [r4, #0]
 801cf40:	07d8      	lsls	r0, r3, #31
 801cf42:	d50f      	bpl.n	801cf64 <_printf_float+0x23c>
 801cf44:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801cf48:	4631      	mov	r1, r6
 801cf4a:	4628      	mov	r0, r5
 801cf4c:	47b8      	blx	r7
 801cf4e:	3001      	adds	r0, #1
 801cf50:	f43f af45 	beq.w	801cdde <_printf_float+0xb6>
 801cf54:	f04f 0900 	mov.w	r9, #0
 801cf58:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 801cf5c:	f104 0a1a 	add.w	sl, r4, #26
 801cf60:	45c8      	cmp	r8, r9
 801cf62:	dc09      	bgt.n	801cf78 <_printf_float+0x250>
 801cf64:	6823      	ldr	r3, [r4, #0]
 801cf66:	079b      	lsls	r3, r3, #30
 801cf68:	f100 8103 	bmi.w	801d172 <_printf_float+0x44a>
 801cf6c:	68e0      	ldr	r0, [r4, #12]
 801cf6e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801cf70:	4298      	cmp	r0, r3
 801cf72:	bfb8      	it	lt
 801cf74:	4618      	movlt	r0, r3
 801cf76:	e734      	b.n	801cde2 <_printf_float+0xba>
 801cf78:	2301      	movs	r3, #1
 801cf7a:	4652      	mov	r2, sl
 801cf7c:	4631      	mov	r1, r6
 801cf7e:	4628      	mov	r0, r5
 801cf80:	47b8      	blx	r7
 801cf82:	3001      	adds	r0, #1
 801cf84:	f43f af2b 	beq.w	801cdde <_printf_float+0xb6>
 801cf88:	f109 0901 	add.w	r9, r9, #1
 801cf8c:	e7e8      	b.n	801cf60 <_printf_float+0x238>
 801cf8e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801cf90:	2b00      	cmp	r3, #0
 801cf92:	dc39      	bgt.n	801d008 <_printf_float+0x2e0>
 801cf94:	4a1b      	ldr	r2, [pc, #108]	@ (801d004 <_printf_float+0x2dc>)
 801cf96:	2301      	movs	r3, #1
 801cf98:	4631      	mov	r1, r6
 801cf9a:	4628      	mov	r0, r5
 801cf9c:	47b8      	blx	r7
 801cf9e:	3001      	adds	r0, #1
 801cfa0:	f43f af1d 	beq.w	801cdde <_printf_float+0xb6>
 801cfa4:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 801cfa8:	ea59 0303 	orrs.w	r3, r9, r3
 801cfac:	d102      	bne.n	801cfb4 <_printf_float+0x28c>
 801cfae:	6823      	ldr	r3, [r4, #0]
 801cfb0:	07d9      	lsls	r1, r3, #31
 801cfb2:	d5d7      	bpl.n	801cf64 <_printf_float+0x23c>
 801cfb4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801cfb8:	4631      	mov	r1, r6
 801cfba:	4628      	mov	r0, r5
 801cfbc:	47b8      	blx	r7
 801cfbe:	3001      	adds	r0, #1
 801cfc0:	f43f af0d 	beq.w	801cdde <_printf_float+0xb6>
 801cfc4:	f04f 0a00 	mov.w	sl, #0
 801cfc8:	f104 0b1a 	add.w	fp, r4, #26
 801cfcc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801cfce:	425b      	negs	r3, r3
 801cfd0:	4553      	cmp	r3, sl
 801cfd2:	dc01      	bgt.n	801cfd8 <_printf_float+0x2b0>
 801cfd4:	464b      	mov	r3, r9
 801cfd6:	e793      	b.n	801cf00 <_printf_float+0x1d8>
 801cfd8:	2301      	movs	r3, #1
 801cfda:	465a      	mov	r2, fp
 801cfdc:	4631      	mov	r1, r6
 801cfde:	4628      	mov	r0, r5
 801cfe0:	47b8      	blx	r7
 801cfe2:	3001      	adds	r0, #1
 801cfe4:	f43f aefb 	beq.w	801cdde <_printf_float+0xb6>
 801cfe8:	f10a 0a01 	add.w	sl, sl, #1
 801cfec:	e7ee      	b.n	801cfcc <_printf_float+0x2a4>
 801cfee:	bf00      	nop
 801cff0:	7fefffff 	.word	0x7fefffff
 801cff4:	08021ff0 	.word	0x08021ff0
 801cff8:	08021ff4 	.word	0x08021ff4
 801cffc:	08021ff8 	.word	0x08021ff8
 801d000:	08021ffc 	.word	0x08021ffc
 801d004:	08022000 	.word	0x08022000
 801d008:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 801d00a:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 801d00e:	4553      	cmp	r3, sl
 801d010:	bfa8      	it	ge
 801d012:	4653      	movge	r3, sl
 801d014:	2b00      	cmp	r3, #0
 801d016:	4699      	mov	r9, r3
 801d018:	dc36      	bgt.n	801d088 <_printf_float+0x360>
 801d01a:	f04f 0b00 	mov.w	fp, #0
 801d01e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801d022:	f104 021a 	add.w	r2, r4, #26
 801d026:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 801d028:	9306      	str	r3, [sp, #24]
 801d02a:	eba3 0309 	sub.w	r3, r3, r9
 801d02e:	455b      	cmp	r3, fp
 801d030:	dc31      	bgt.n	801d096 <_printf_float+0x36e>
 801d032:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801d034:	459a      	cmp	sl, r3
 801d036:	dc3a      	bgt.n	801d0ae <_printf_float+0x386>
 801d038:	6823      	ldr	r3, [r4, #0]
 801d03a:	07da      	lsls	r2, r3, #31
 801d03c:	d437      	bmi.n	801d0ae <_printf_float+0x386>
 801d03e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801d040:	ebaa 0903 	sub.w	r9, sl, r3
 801d044:	9b06      	ldr	r3, [sp, #24]
 801d046:	ebaa 0303 	sub.w	r3, sl, r3
 801d04a:	4599      	cmp	r9, r3
 801d04c:	bfa8      	it	ge
 801d04e:	4699      	movge	r9, r3
 801d050:	f1b9 0f00 	cmp.w	r9, #0
 801d054:	dc33      	bgt.n	801d0be <_printf_float+0x396>
 801d056:	f04f 0800 	mov.w	r8, #0
 801d05a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801d05e:	f104 0b1a 	add.w	fp, r4, #26
 801d062:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801d064:	ebaa 0303 	sub.w	r3, sl, r3
 801d068:	eba3 0309 	sub.w	r3, r3, r9
 801d06c:	4543      	cmp	r3, r8
 801d06e:	f77f af79 	ble.w	801cf64 <_printf_float+0x23c>
 801d072:	2301      	movs	r3, #1
 801d074:	465a      	mov	r2, fp
 801d076:	4631      	mov	r1, r6
 801d078:	4628      	mov	r0, r5
 801d07a:	47b8      	blx	r7
 801d07c:	3001      	adds	r0, #1
 801d07e:	f43f aeae 	beq.w	801cdde <_printf_float+0xb6>
 801d082:	f108 0801 	add.w	r8, r8, #1
 801d086:	e7ec      	b.n	801d062 <_printf_float+0x33a>
 801d088:	4642      	mov	r2, r8
 801d08a:	4631      	mov	r1, r6
 801d08c:	4628      	mov	r0, r5
 801d08e:	47b8      	blx	r7
 801d090:	3001      	adds	r0, #1
 801d092:	d1c2      	bne.n	801d01a <_printf_float+0x2f2>
 801d094:	e6a3      	b.n	801cdde <_printf_float+0xb6>
 801d096:	2301      	movs	r3, #1
 801d098:	4631      	mov	r1, r6
 801d09a:	4628      	mov	r0, r5
 801d09c:	9206      	str	r2, [sp, #24]
 801d09e:	47b8      	blx	r7
 801d0a0:	3001      	adds	r0, #1
 801d0a2:	f43f ae9c 	beq.w	801cdde <_printf_float+0xb6>
 801d0a6:	9a06      	ldr	r2, [sp, #24]
 801d0a8:	f10b 0b01 	add.w	fp, fp, #1
 801d0ac:	e7bb      	b.n	801d026 <_printf_float+0x2fe>
 801d0ae:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801d0b2:	4631      	mov	r1, r6
 801d0b4:	4628      	mov	r0, r5
 801d0b6:	47b8      	blx	r7
 801d0b8:	3001      	adds	r0, #1
 801d0ba:	d1c0      	bne.n	801d03e <_printf_float+0x316>
 801d0bc:	e68f      	b.n	801cdde <_printf_float+0xb6>
 801d0be:	9a06      	ldr	r2, [sp, #24]
 801d0c0:	464b      	mov	r3, r9
 801d0c2:	4442      	add	r2, r8
 801d0c4:	4631      	mov	r1, r6
 801d0c6:	4628      	mov	r0, r5
 801d0c8:	47b8      	blx	r7
 801d0ca:	3001      	adds	r0, #1
 801d0cc:	d1c3      	bne.n	801d056 <_printf_float+0x32e>
 801d0ce:	e686      	b.n	801cdde <_printf_float+0xb6>
 801d0d0:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 801d0d4:	f1ba 0f01 	cmp.w	sl, #1
 801d0d8:	dc01      	bgt.n	801d0de <_printf_float+0x3b6>
 801d0da:	07db      	lsls	r3, r3, #31
 801d0dc:	d536      	bpl.n	801d14c <_printf_float+0x424>
 801d0de:	2301      	movs	r3, #1
 801d0e0:	4642      	mov	r2, r8
 801d0e2:	4631      	mov	r1, r6
 801d0e4:	4628      	mov	r0, r5
 801d0e6:	47b8      	blx	r7
 801d0e8:	3001      	adds	r0, #1
 801d0ea:	f43f ae78 	beq.w	801cdde <_printf_float+0xb6>
 801d0ee:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801d0f2:	4631      	mov	r1, r6
 801d0f4:	4628      	mov	r0, r5
 801d0f6:	47b8      	blx	r7
 801d0f8:	3001      	adds	r0, #1
 801d0fa:	f43f ae70 	beq.w	801cdde <_printf_float+0xb6>
 801d0fe:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 801d102:	2200      	movs	r2, #0
 801d104:	2300      	movs	r3, #0
 801d106:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 801d10a:	f7e3 fcdd 	bl	8000ac8 <__aeabi_dcmpeq>
 801d10e:	b9c0      	cbnz	r0, 801d142 <_printf_float+0x41a>
 801d110:	4653      	mov	r3, sl
 801d112:	f108 0201 	add.w	r2, r8, #1
 801d116:	4631      	mov	r1, r6
 801d118:	4628      	mov	r0, r5
 801d11a:	47b8      	blx	r7
 801d11c:	3001      	adds	r0, #1
 801d11e:	d10c      	bne.n	801d13a <_printf_float+0x412>
 801d120:	e65d      	b.n	801cdde <_printf_float+0xb6>
 801d122:	2301      	movs	r3, #1
 801d124:	465a      	mov	r2, fp
 801d126:	4631      	mov	r1, r6
 801d128:	4628      	mov	r0, r5
 801d12a:	47b8      	blx	r7
 801d12c:	3001      	adds	r0, #1
 801d12e:	f43f ae56 	beq.w	801cdde <_printf_float+0xb6>
 801d132:	f108 0801 	add.w	r8, r8, #1
 801d136:	45d0      	cmp	r8, sl
 801d138:	dbf3      	blt.n	801d122 <_printf_float+0x3fa>
 801d13a:	464b      	mov	r3, r9
 801d13c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 801d140:	e6df      	b.n	801cf02 <_printf_float+0x1da>
 801d142:	f04f 0800 	mov.w	r8, #0
 801d146:	f104 0b1a 	add.w	fp, r4, #26
 801d14a:	e7f4      	b.n	801d136 <_printf_float+0x40e>
 801d14c:	2301      	movs	r3, #1
 801d14e:	4642      	mov	r2, r8
 801d150:	e7e1      	b.n	801d116 <_printf_float+0x3ee>
 801d152:	2301      	movs	r3, #1
 801d154:	464a      	mov	r2, r9
 801d156:	4631      	mov	r1, r6
 801d158:	4628      	mov	r0, r5
 801d15a:	47b8      	blx	r7
 801d15c:	3001      	adds	r0, #1
 801d15e:	f43f ae3e 	beq.w	801cdde <_printf_float+0xb6>
 801d162:	f108 0801 	add.w	r8, r8, #1
 801d166:	68e3      	ldr	r3, [r4, #12]
 801d168:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801d16a:	1a5b      	subs	r3, r3, r1
 801d16c:	4543      	cmp	r3, r8
 801d16e:	dcf0      	bgt.n	801d152 <_printf_float+0x42a>
 801d170:	e6fc      	b.n	801cf6c <_printf_float+0x244>
 801d172:	f04f 0800 	mov.w	r8, #0
 801d176:	f104 0919 	add.w	r9, r4, #25
 801d17a:	e7f4      	b.n	801d166 <_printf_float+0x43e>

0801d17c <_printf_common>:
 801d17c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801d180:	4616      	mov	r6, r2
 801d182:	4698      	mov	r8, r3
 801d184:	688a      	ldr	r2, [r1, #8]
 801d186:	690b      	ldr	r3, [r1, #16]
 801d188:	f8dd 9020 	ldr.w	r9, [sp, #32]
 801d18c:	4293      	cmp	r3, r2
 801d18e:	bfb8      	it	lt
 801d190:	4613      	movlt	r3, r2
 801d192:	6033      	str	r3, [r6, #0]
 801d194:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 801d198:	4607      	mov	r7, r0
 801d19a:	460c      	mov	r4, r1
 801d19c:	b10a      	cbz	r2, 801d1a2 <_printf_common+0x26>
 801d19e:	3301      	adds	r3, #1
 801d1a0:	6033      	str	r3, [r6, #0]
 801d1a2:	6823      	ldr	r3, [r4, #0]
 801d1a4:	0699      	lsls	r1, r3, #26
 801d1a6:	bf42      	ittt	mi
 801d1a8:	6833      	ldrmi	r3, [r6, #0]
 801d1aa:	3302      	addmi	r3, #2
 801d1ac:	6033      	strmi	r3, [r6, #0]
 801d1ae:	6825      	ldr	r5, [r4, #0]
 801d1b0:	f015 0506 	ands.w	r5, r5, #6
 801d1b4:	d106      	bne.n	801d1c4 <_printf_common+0x48>
 801d1b6:	f104 0a19 	add.w	sl, r4, #25
 801d1ba:	68e3      	ldr	r3, [r4, #12]
 801d1bc:	6832      	ldr	r2, [r6, #0]
 801d1be:	1a9b      	subs	r3, r3, r2
 801d1c0:	42ab      	cmp	r3, r5
 801d1c2:	dc26      	bgt.n	801d212 <_printf_common+0x96>
 801d1c4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 801d1c8:	6822      	ldr	r2, [r4, #0]
 801d1ca:	3b00      	subs	r3, #0
 801d1cc:	bf18      	it	ne
 801d1ce:	2301      	movne	r3, #1
 801d1d0:	0692      	lsls	r2, r2, #26
 801d1d2:	d42b      	bmi.n	801d22c <_printf_common+0xb0>
 801d1d4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 801d1d8:	4641      	mov	r1, r8
 801d1da:	4638      	mov	r0, r7
 801d1dc:	47c8      	blx	r9
 801d1de:	3001      	adds	r0, #1
 801d1e0:	d01e      	beq.n	801d220 <_printf_common+0xa4>
 801d1e2:	6823      	ldr	r3, [r4, #0]
 801d1e4:	6922      	ldr	r2, [r4, #16]
 801d1e6:	f003 0306 	and.w	r3, r3, #6
 801d1ea:	2b04      	cmp	r3, #4
 801d1ec:	bf02      	ittt	eq
 801d1ee:	68e5      	ldreq	r5, [r4, #12]
 801d1f0:	6833      	ldreq	r3, [r6, #0]
 801d1f2:	1aed      	subeq	r5, r5, r3
 801d1f4:	68a3      	ldr	r3, [r4, #8]
 801d1f6:	bf0c      	ite	eq
 801d1f8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801d1fc:	2500      	movne	r5, #0
 801d1fe:	4293      	cmp	r3, r2
 801d200:	bfc4      	itt	gt
 801d202:	1a9b      	subgt	r3, r3, r2
 801d204:	18ed      	addgt	r5, r5, r3
 801d206:	2600      	movs	r6, #0
 801d208:	341a      	adds	r4, #26
 801d20a:	42b5      	cmp	r5, r6
 801d20c:	d11a      	bne.n	801d244 <_printf_common+0xc8>
 801d20e:	2000      	movs	r0, #0
 801d210:	e008      	b.n	801d224 <_printf_common+0xa8>
 801d212:	2301      	movs	r3, #1
 801d214:	4652      	mov	r2, sl
 801d216:	4641      	mov	r1, r8
 801d218:	4638      	mov	r0, r7
 801d21a:	47c8      	blx	r9
 801d21c:	3001      	adds	r0, #1
 801d21e:	d103      	bne.n	801d228 <_printf_common+0xac>
 801d220:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801d224:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801d228:	3501      	adds	r5, #1
 801d22a:	e7c6      	b.n	801d1ba <_printf_common+0x3e>
 801d22c:	18e1      	adds	r1, r4, r3
 801d22e:	1c5a      	adds	r2, r3, #1
 801d230:	2030      	movs	r0, #48	@ 0x30
 801d232:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 801d236:	4422      	add	r2, r4
 801d238:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 801d23c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 801d240:	3302      	adds	r3, #2
 801d242:	e7c7      	b.n	801d1d4 <_printf_common+0x58>
 801d244:	2301      	movs	r3, #1
 801d246:	4622      	mov	r2, r4
 801d248:	4641      	mov	r1, r8
 801d24a:	4638      	mov	r0, r7
 801d24c:	47c8      	blx	r9
 801d24e:	3001      	adds	r0, #1
 801d250:	d0e6      	beq.n	801d220 <_printf_common+0xa4>
 801d252:	3601      	adds	r6, #1
 801d254:	e7d9      	b.n	801d20a <_printf_common+0x8e>
	...

0801d258 <_printf_i>:
 801d258:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801d25c:	7e0f      	ldrb	r7, [r1, #24]
 801d25e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 801d260:	2f78      	cmp	r7, #120	@ 0x78
 801d262:	4691      	mov	r9, r2
 801d264:	4680      	mov	r8, r0
 801d266:	460c      	mov	r4, r1
 801d268:	469a      	mov	sl, r3
 801d26a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 801d26e:	d807      	bhi.n	801d280 <_printf_i+0x28>
 801d270:	2f62      	cmp	r7, #98	@ 0x62
 801d272:	d80a      	bhi.n	801d28a <_printf_i+0x32>
 801d274:	2f00      	cmp	r7, #0
 801d276:	f000 80d2 	beq.w	801d41e <_printf_i+0x1c6>
 801d27a:	2f58      	cmp	r7, #88	@ 0x58
 801d27c:	f000 80b9 	beq.w	801d3f2 <_printf_i+0x19a>
 801d280:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801d284:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 801d288:	e03a      	b.n	801d300 <_printf_i+0xa8>
 801d28a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 801d28e:	2b15      	cmp	r3, #21
 801d290:	d8f6      	bhi.n	801d280 <_printf_i+0x28>
 801d292:	a101      	add	r1, pc, #4	@ (adr r1, 801d298 <_printf_i+0x40>)
 801d294:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801d298:	0801d2f1 	.word	0x0801d2f1
 801d29c:	0801d305 	.word	0x0801d305
 801d2a0:	0801d281 	.word	0x0801d281
 801d2a4:	0801d281 	.word	0x0801d281
 801d2a8:	0801d281 	.word	0x0801d281
 801d2ac:	0801d281 	.word	0x0801d281
 801d2b0:	0801d305 	.word	0x0801d305
 801d2b4:	0801d281 	.word	0x0801d281
 801d2b8:	0801d281 	.word	0x0801d281
 801d2bc:	0801d281 	.word	0x0801d281
 801d2c0:	0801d281 	.word	0x0801d281
 801d2c4:	0801d405 	.word	0x0801d405
 801d2c8:	0801d32f 	.word	0x0801d32f
 801d2cc:	0801d3bf 	.word	0x0801d3bf
 801d2d0:	0801d281 	.word	0x0801d281
 801d2d4:	0801d281 	.word	0x0801d281
 801d2d8:	0801d427 	.word	0x0801d427
 801d2dc:	0801d281 	.word	0x0801d281
 801d2e0:	0801d32f 	.word	0x0801d32f
 801d2e4:	0801d281 	.word	0x0801d281
 801d2e8:	0801d281 	.word	0x0801d281
 801d2ec:	0801d3c7 	.word	0x0801d3c7
 801d2f0:	6833      	ldr	r3, [r6, #0]
 801d2f2:	1d1a      	adds	r2, r3, #4
 801d2f4:	681b      	ldr	r3, [r3, #0]
 801d2f6:	6032      	str	r2, [r6, #0]
 801d2f8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801d2fc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 801d300:	2301      	movs	r3, #1
 801d302:	e09d      	b.n	801d440 <_printf_i+0x1e8>
 801d304:	6833      	ldr	r3, [r6, #0]
 801d306:	6820      	ldr	r0, [r4, #0]
 801d308:	1d19      	adds	r1, r3, #4
 801d30a:	6031      	str	r1, [r6, #0]
 801d30c:	0606      	lsls	r6, r0, #24
 801d30e:	d501      	bpl.n	801d314 <_printf_i+0xbc>
 801d310:	681d      	ldr	r5, [r3, #0]
 801d312:	e003      	b.n	801d31c <_printf_i+0xc4>
 801d314:	0645      	lsls	r5, r0, #25
 801d316:	d5fb      	bpl.n	801d310 <_printf_i+0xb8>
 801d318:	f9b3 5000 	ldrsh.w	r5, [r3]
 801d31c:	2d00      	cmp	r5, #0
 801d31e:	da03      	bge.n	801d328 <_printf_i+0xd0>
 801d320:	232d      	movs	r3, #45	@ 0x2d
 801d322:	426d      	negs	r5, r5
 801d324:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801d328:	4859      	ldr	r0, [pc, #356]	@ (801d490 <_printf_i+0x238>)
 801d32a:	230a      	movs	r3, #10
 801d32c:	e011      	b.n	801d352 <_printf_i+0xfa>
 801d32e:	6821      	ldr	r1, [r4, #0]
 801d330:	6833      	ldr	r3, [r6, #0]
 801d332:	0608      	lsls	r0, r1, #24
 801d334:	f853 5b04 	ldr.w	r5, [r3], #4
 801d338:	d402      	bmi.n	801d340 <_printf_i+0xe8>
 801d33a:	0649      	lsls	r1, r1, #25
 801d33c:	bf48      	it	mi
 801d33e:	b2ad      	uxthmi	r5, r5
 801d340:	2f6f      	cmp	r7, #111	@ 0x6f
 801d342:	4853      	ldr	r0, [pc, #332]	@ (801d490 <_printf_i+0x238>)
 801d344:	6033      	str	r3, [r6, #0]
 801d346:	bf14      	ite	ne
 801d348:	230a      	movne	r3, #10
 801d34a:	2308      	moveq	r3, #8
 801d34c:	2100      	movs	r1, #0
 801d34e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 801d352:	6866      	ldr	r6, [r4, #4]
 801d354:	60a6      	str	r6, [r4, #8]
 801d356:	2e00      	cmp	r6, #0
 801d358:	bfa2      	ittt	ge
 801d35a:	6821      	ldrge	r1, [r4, #0]
 801d35c:	f021 0104 	bicge.w	r1, r1, #4
 801d360:	6021      	strge	r1, [r4, #0]
 801d362:	b90d      	cbnz	r5, 801d368 <_printf_i+0x110>
 801d364:	2e00      	cmp	r6, #0
 801d366:	d04b      	beq.n	801d400 <_printf_i+0x1a8>
 801d368:	4616      	mov	r6, r2
 801d36a:	fbb5 f1f3 	udiv	r1, r5, r3
 801d36e:	fb03 5711 	mls	r7, r3, r1, r5
 801d372:	5dc7      	ldrb	r7, [r0, r7]
 801d374:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801d378:	462f      	mov	r7, r5
 801d37a:	42bb      	cmp	r3, r7
 801d37c:	460d      	mov	r5, r1
 801d37e:	d9f4      	bls.n	801d36a <_printf_i+0x112>
 801d380:	2b08      	cmp	r3, #8
 801d382:	d10b      	bne.n	801d39c <_printf_i+0x144>
 801d384:	6823      	ldr	r3, [r4, #0]
 801d386:	07df      	lsls	r7, r3, #31
 801d388:	d508      	bpl.n	801d39c <_printf_i+0x144>
 801d38a:	6923      	ldr	r3, [r4, #16]
 801d38c:	6861      	ldr	r1, [r4, #4]
 801d38e:	4299      	cmp	r1, r3
 801d390:	bfde      	ittt	le
 801d392:	2330      	movle	r3, #48	@ 0x30
 801d394:	f806 3c01 	strble.w	r3, [r6, #-1]
 801d398:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 801d39c:	1b92      	subs	r2, r2, r6
 801d39e:	6122      	str	r2, [r4, #16]
 801d3a0:	f8cd a000 	str.w	sl, [sp]
 801d3a4:	464b      	mov	r3, r9
 801d3a6:	aa03      	add	r2, sp, #12
 801d3a8:	4621      	mov	r1, r4
 801d3aa:	4640      	mov	r0, r8
 801d3ac:	f7ff fee6 	bl	801d17c <_printf_common>
 801d3b0:	3001      	adds	r0, #1
 801d3b2:	d14a      	bne.n	801d44a <_printf_i+0x1f2>
 801d3b4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801d3b8:	b004      	add	sp, #16
 801d3ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801d3be:	6823      	ldr	r3, [r4, #0]
 801d3c0:	f043 0320 	orr.w	r3, r3, #32
 801d3c4:	6023      	str	r3, [r4, #0]
 801d3c6:	4833      	ldr	r0, [pc, #204]	@ (801d494 <_printf_i+0x23c>)
 801d3c8:	2778      	movs	r7, #120	@ 0x78
 801d3ca:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 801d3ce:	6823      	ldr	r3, [r4, #0]
 801d3d0:	6831      	ldr	r1, [r6, #0]
 801d3d2:	061f      	lsls	r7, r3, #24
 801d3d4:	f851 5b04 	ldr.w	r5, [r1], #4
 801d3d8:	d402      	bmi.n	801d3e0 <_printf_i+0x188>
 801d3da:	065f      	lsls	r7, r3, #25
 801d3dc:	bf48      	it	mi
 801d3de:	b2ad      	uxthmi	r5, r5
 801d3e0:	6031      	str	r1, [r6, #0]
 801d3e2:	07d9      	lsls	r1, r3, #31
 801d3e4:	bf44      	itt	mi
 801d3e6:	f043 0320 	orrmi.w	r3, r3, #32
 801d3ea:	6023      	strmi	r3, [r4, #0]
 801d3ec:	b11d      	cbz	r5, 801d3f6 <_printf_i+0x19e>
 801d3ee:	2310      	movs	r3, #16
 801d3f0:	e7ac      	b.n	801d34c <_printf_i+0xf4>
 801d3f2:	4827      	ldr	r0, [pc, #156]	@ (801d490 <_printf_i+0x238>)
 801d3f4:	e7e9      	b.n	801d3ca <_printf_i+0x172>
 801d3f6:	6823      	ldr	r3, [r4, #0]
 801d3f8:	f023 0320 	bic.w	r3, r3, #32
 801d3fc:	6023      	str	r3, [r4, #0]
 801d3fe:	e7f6      	b.n	801d3ee <_printf_i+0x196>
 801d400:	4616      	mov	r6, r2
 801d402:	e7bd      	b.n	801d380 <_printf_i+0x128>
 801d404:	6833      	ldr	r3, [r6, #0]
 801d406:	6825      	ldr	r5, [r4, #0]
 801d408:	6961      	ldr	r1, [r4, #20]
 801d40a:	1d18      	adds	r0, r3, #4
 801d40c:	6030      	str	r0, [r6, #0]
 801d40e:	062e      	lsls	r6, r5, #24
 801d410:	681b      	ldr	r3, [r3, #0]
 801d412:	d501      	bpl.n	801d418 <_printf_i+0x1c0>
 801d414:	6019      	str	r1, [r3, #0]
 801d416:	e002      	b.n	801d41e <_printf_i+0x1c6>
 801d418:	0668      	lsls	r0, r5, #25
 801d41a:	d5fb      	bpl.n	801d414 <_printf_i+0x1bc>
 801d41c:	8019      	strh	r1, [r3, #0]
 801d41e:	2300      	movs	r3, #0
 801d420:	6123      	str	r3, [r4, #16]
 801d422:	4616      	mov	r6, r2
 801d424:	e7bc      	b.n	801d3a0 <_printf_i+0x148>
 801d426:	6833      	ldr	r3, [r6, #0]
 801d428:	1d1a      	adds	r2, r3, #4
 801d42a:	6032      	str	r2, [r6, #0]
 801d42c:	681e      	ldr	r6, [r3, #0]
 801d42e:	6862      	ldr	r2, [r4, #4]
 801d430:	2100      	movs	r1, #0
 801d432:	4630      	mov	r0, r6
 801d434:	f7e2 fecc 	bl	80001d0 <memchr>
 801d438:	b108      	cbz	r0, 801d43e <_printf_i+0x1e6>
 801d43a:	1b80      	subs	r0, r0, r6
 801d43c:	6060      	str	r0, [r4, #4]
 801d43e:	6863      	ldr	r3, [r4, #4]
 801d440:	6123      	str	r3, [r4, #16]
 801d442:	2300      	movs	r3, #0
 801d444:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801d448:	e7aa      	b.n	801d3a0 <_printf_i+0x148>
 801d44a:	6923      	ldr	r3, [r4, #16]
 801d44c:	4632      	mov	r2, r6
 801d44e:	4649      	mov	r1, r9
 801d450:	4640      	mov	r0, r8
 801d452:	47d0      	blx	sl
 801d454:	3001      	adds	r0, #1
 801d456:	d0ad      	beq.n	801d3b4 <_printf_i+0x15c>
 801d458:	6823      	ldr	r3, [r4, #0]
 801d45a:	079b      	lsls	r3, r3, #30
 801d45c:	d413      	bmi.n	801d486 <_printf_i+0x22e>
 801d45e:	68e0      	ldr	r0, [r4, #12]
 801d460:	9b03      	ldr	r3, [sp, #12]
 801d462:	4298      	cmp	r0, r3
 801d464:	bfb8      	it	lt
 801d466:	4618      	movlt	r0, r3
 801d468:	e7a6      	b.n	801d3b8 <_printf_i+0x160>
 801d46a:	2301      	movs	r3, #1
 801d46c:	4632      	mov	r2, r6
 801d46e:	4649      	mov	r1, r9
 801d470:	4640      	mov	r0, r8
 801d472:	47d0      	blx	sl
 801d474:	3001      	adds	r0, #1
 801d476:	d09d      	beq.n	801d3b4 <_printf_i+0x15c>
 801d478:	3501      	adds	r5, #1
 801d47a:	68e3      	ldr	r3, [r4, #12]
 801d47c:	9903      	ldr	r1, [sp, #12]
 801d47e:	1a5b      	subs	r3, r3, r1
 801d480:	42ab      	cmp	r3, r5
 801d482:	dcf2      	bgt.n	801d46a <_printf_i+0x212>
 801d484:	e7eb      	b.n	801d45e <_printf_i+0x206>
 801d486:	2500      	movs	r5, #0
 801d488:	f104 0619 	add.w	r6, r4, #25
 801d48c:	e7f5      	b.n	801d47a <_printf_i+0x222>
 801d48e:	bf00      	nop
 801d490:	08022002 	.word	0x08022002
 801d494:	08022013 	.word	0x08022013

0801d498 <_scanf_float>:
 801d498:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d49c:	b087      	sub	sp, #28
 801d49e:	4617      	mov	r7, r2
 801d4a0:	9303      	str	r3, [sp, #12]
 801d4a2:	688b      	ldr	r3, [r1, #8]
 801d4a4:	1e5a      	subs	r2, r3, #1
 801d4a6:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 801d4aa:	bf81      	itttt	hi
 801d4ac:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 801d4b0:	eb03 0b05 	addhi.w	fp, r3, r5
 801d4b4:	f240 135d 	movwhi	r3, #349	@ 0x15d
 801d4b8:	608b      	strhi	r3, [r1, #8]
 801d4ba:	680b      	ldr	r3, [r1, #0]
 801d4bc:	460a      	mov	r2, r1
 801d4be:	f04f 0500 	mov.w	r5, #0
 801d4c2:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 801d4c6:	f842 3b1c 	str.w	r3, [r2], #28
 801d4ca:	e9cd 5504 	strd	r5, r5, [sp, #16]
 801d4ce:	4680      	mov	r8, r0
 801d4d0:	460c      	mov	r4, r1
 801d4d2:	bf98      	it	ls
 801d4d4:	f04f 0b00 	movls.w	fp, #0
 801d4d8:	9201      	str	r2, [sp, #4]
 801d4da:	4616      	mov	r6, r2
 801d4dc:	46aa      	mov	sl, r5
 801d4de:	46a9      	mov	r9, r5
 801d4e0:	9502      	str	r5, [sp, #8]
 801d4e2:	68a2      	ldr	r2, [r4, #8]
 801d4e4:	b152      	cbz	r2, 801d4fc <_scanf_float+0x64>
 801d4e6:	683b      	ldr	r3, [r7, #0]
 801d4e8:	781b      	ldrb	r3, [r3, #0]
 801d4ea:	2b4e      	cmp	r3, #78	@ 0x4e
 801d4ec:	d864      	bhi.n	801d5b8 <_scanf_float+0x120>
 801d4ee:	2b40      	cmp	r3, #64	@ 0x40
 801d4f0:	d83c      	bhi.n	801d56c <_scanf_float+0xd4>
 801d4f2:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 801d4f6:	b2c8      	uxtb	r0, r1
 801d4f8:	280e      	cmp	r0, #14
 801d4fa:	d93a      	bls.n	801d572 <_scanf_float+0xda>
 801d4fc:	f1b9 0f00 	cmp.w	r9, #0
 801d500:	d003      	beq.n	801d50a <_scanf_float+0x72>
 801d502:	6823      	ldr	r3, [r4, #0]
 801d504:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 801d508:	6023      	str	r3, [r4, #0]
 801d50a:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 801d50e:	f1ba 0f01 	cmp.w	sl, #1
 801d512:	f200 8117 	bhi.w	801d744 <_scanf_float+0x2ac>
 801d516:	9b01      	ldr	r3, [sp, #4]
 801d518:	429e      	cmp	r6, r3
 801d51a:	f200 8108 	bhi.w	801d72e <_scanf_float+0x296>
 801d51e:	2001      	movs	r0, #1
 801d520:	b007      	add	sp, #28
 801d522:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d526:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 801d52a:	2a0d      	cmp	r2, #13
 801d52c:	d8e6      	bhi.n	801d4fc <_scanf_float+0x64>
 801d52e:	a101      	add	r1, pc, #4	@ (adr r1, 801d534 <_scanf_float+0x9c>)
 801d530:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 801d534:	0801d67b 	.word	0x0801d67b
 801d538:	0801d4fd 	.word	0x0801d4fd
 801d53c:	0801d4fd 	.word	0x0801d4fd
 801d540:	0801d4fd 	.word	0x0801d4fd
 801d544:	0801d6db 	.word	0x0801d6db
 801d548:	0801d6b3 	.word	0x0801d6b3
 801d54c:	0801d4fd 	.word	0x0801d4fd
 801d550:	0801d4fd 	.word	0x0801d4fd
 801d554:	0801d689 	.word	0x0801d689
 801d558:	0801d4fd 	.word	0x0801d4fd
 801d55c:	0801d4fd 	.word	0x0801d4fd
 801d560:	0801d4fd 	.word	0x0801d4fd
 801d564:	0801d4fd 	.word	0x0801d4fd
 801d568:	0801d641 	.word	0x0801d641
 801d56c:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 801d570:	e7db      	b.n	801d52a <_scanf_float+0x92>
 801d572:	290e      	cmp	r1, #14
 801d574:	d8c2      	bhi.n	801d4fc <_scanf_float+0x64>
 801d576:	a001      	add	r0, pc, #4	@ (adr r0, 801d57c <_scanf_float+0xe4>)
 801d578:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 801d57c:	0801d631 	.word	0x0801d631
 801d580:	0801d4fd 	.word	0x0801d4fd
 801d584:	0801d631 	.word	0x0801d631
 801d588:	0801d6c7 	.word	0x0801d6c7
 801d58c:	0801d4fd 	.word	0x0801d4fd
 801d590:	0801d5d9 	.word	0x0801d5d9
 801d594:	0801d617 	.word	0x0801d617
 801d598:	0801d617 	.word	0x0801d617
 801d59c:	0801d617 	.word	0x0801d617
 801d5a0:	0801d617 	.word	0x0801d617
 801d5a4:	0801d617 	.word	0x0801d617
 801d5a8:	0801d617 	.word	0x0801d617
 801d5ac:	0801d617 	.word	0x0801d617
 801d5b0:	0801d617 	.word	0x0801d617
 801d5b4:	0801d617 	.word	0x0801d617
 801d5b8:	2b6e      	cmp	r3, #110	@ 0x6e
 801d5ba:	d809      	bhi.n	801d5d0 <_scanf_float+0x138>
 801d5bc:	2b60      	cmp	r3, #96	@ 0x60
 801d5be:	d8b2      	bhi.n	801d526 <_scanf_float+0x8e>
 801d5c0:	2b54      	cmp	r3, #84	@ 0x54
 801d5c2:	d07b      	beq.n	801d6bc <_scanf_float+0x224>
 801d5c4:	2b59      	cmp	r3, #89	@ 0x59
 801d5c6:	d199      	bne.n	801d4fc <_scanf_float+0x64>
 801d5c8:	2d07      	cmp	r5, #7
 801d5ca:	d197      	bne.n	801d4fc <_scanf_float+0x64>
 801d5cc:	2508      	movs	r5, #8
 801d5ce:	e02c      	b.n	801d62a <_scanf_float+0x192>
 801d5d0:	2b74      	cmp	r3, #116	@ 0x74
 801d5d2:	d073      	beq.n	801d6bc <_scanf_float+0x224>
 801d5d4:	2b79      	cmp	r3, #121	@ 0x79
 801d5d6:	e7f6      	b.n	801d5c6 <_scanf_float+0x12e>
 801d5d8:	6821      	ldr	r1, [r4, #0]
 801d5da:	05c8      	lsls	r0, r1, #23
 801d5dc:	d51b      	bpl.n	801d616 <_scanf_float+0x17e>
 801d5de:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 801d5e2:	6021      	str	r1, [r4, #0]
 801d5e4:	f109 0901 	add.w	r9, r9, #1
 801d5e8:	f1bb 0f00 	cmp.w	fp, #0
 801d5ec:	d003      	beq.n	801d5f6 <_scanf_float+0x15e>
 801d5ee:	3201      	adds	r2, #1
 801d5f0:	f10b 3bff 	add.w	fp, fp, #4294967295	@ 0xffffffff
 801d5f4:	60a2      	str	r2, [r4, #8]
 801d5f6:	68a3      	ldr	r3, [r4, #8]
 801d5f8:	3b01      	subs	r3, #1
 801d5fa:	60a3      	str	r3, [r4, #8]
 801d5fc:	6923      	ldr	r3, [r4, #16]
 801d5fe:	3301      	adds	r3, #1
 801d600:	6123      	str	r3, [r4, #16]
 801d602:	687b      	ldr	r3, [r7, #4]
 801d604:	3b01      	subs	r3, #1
 801d606:	2b00      	cmp	r3, #0
 801d608:	607b      	str	r3, [r7, #4]
 801d60a:	f340 8087 	ble.w	801d71c <_scanf_float+0x284>
 801d60e:	683b      	ldr	r3, [r7, #0]
 801d610:	3301      	adds	r3, #1
 801d612:	603b      	str	r3, [r7, #0]
 801d614:	e765      	b.n	801d4e2 <_scanf_float+0x4a>
 801d616:	eb1a 0105 	adds.w	r1, sl, r5
 801d61a:	f47f af6f 	bne.w	801d4fc <_scanf_float+0x64>
 801d61e:	6822      	ldr	r2, [r4, #0]
 801d620:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 801d624:	6022      	str	r2, [r4, #0]
 801d626:	460d      	mov	r5, r1
 801d628:	468a      	mov	sl, r1
 801d62a:	f806 3b01 	strb.w	r3, [r6], #1
 801d62e:	e7e2      	b.n	801d5f6 <_scanf_float+0x15e>
 801d630:	6822      	ldr	r2, [r4, #0]
 801d632:	0610      	lsls	r0, r2, #24
 801d634:	f57f af62 	bpl.w	801d4fc <_scanf_float+0x64>
 801d638:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 801d63c:	6022      	str	r2, [r4, #0]
 801d63e:	e7f4      	b.n	801d62a <_scanf_float+0x192>
 801d640:	f1ba 0f00 	cmp.w	sl, #0
 801d644:	d10e      	bne.n	801d664 <_scanf_float+0x1cc>
 801d646:	f1b9 0f00 	cmp.w	r9, #0
 801d64a:	d10e      	bne.n	801d66a <_scanf_float+0x1d2>
 801d64c:	6822      	ldr	r2, [r4, #0]
 801d64e:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 801d652:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 801d656:	d108      	bne.n	801d66a <_scanf_float+0x1d2>
 801d658:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 801d65c:	6022      	str	r2, [r4, #0]
 801d65e:	f04f 0a01 	mov.w	sl, #1
 801d662:	e7e2      	b.n	801d62a <_scanf_float+0x192>
 801d664:	f1ba 0f02 	cmp.w	sl, #2
 801d668:	d055      	beq.n	801d716 <_scanf_float+0x27e>
 801d66a:	2d01      	cmp	r5, #1
 801d66c:	d002      	beq.n	801d674 <_scanf_float+0x1dc>
 801d66e:	2d04      	cmp	r5, #4
 801d670:	f47f af44 	bne.w	801d4fc <_scanf_float+0x64>
 801d674:	3501      	adds	r5, #1
 801d676:	b2ed      	uxtb	r5, r5
 801d678:	e7d7      	b.n	801d62a <_scanf_float+0x192>
 801d67a:	f1ba 0f01 	cmp.w	sl, #1
 801d67e:	f47f af3d 	bne.w	801d4fc <_scanf_float+0x64>
 801d682:	f04f 0a02 	mov.w	sl, #2
 801d686:	e7d0      	b.n	801d62a <_scanf_float+0x192>
 801d688:	b97d      	cbnz	r5, 801d6aa <_scanf_float+0x212>
 801d68a:	f1b9 0f00 	cmp.w	r9, #0
 801d68e:	f47f af38 	bne.w	801d502 <_scanf_float+0x6a>
 801d692:	6822      	ldr	r2, [r4, #0]
 801d694:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 801d698:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 801d69c:	f040 8108 	bne.w	801d8b0 <_scanf_float+0x418>
 801d6a0:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 801d6a4:	6022      	str	r2, [r4, #0]
 801d6a6:	2501      	movs	r5, #1
 801d6a8:	e7bf      	b.n	801d62a <_scanf_float+0x192>
 801d6aa:	2d03      	cmp	r5, #3
 801d6ac:	d0e2      	beq.n	801d674 <_scanf_float+0x1dc>
 801d6ae:	2d05      	cmp	r5, #5
 801d6b0:	e7de      	b.n	801d670 <_scanf_float+0x1d8>
 801d6b2:	2d02      	cmp	r5, #2
 801d6b4:	f47f af22 	bne.w	801d4fc <_scanf_float+0x64>
 801d6b8:	2503      	movs	r5, #3
 801d6ba:	e7b6      	b.n	801d62a <_scanf_float+0x192>
 801d6bc:	2d06      	cmp	r5, #6
 801d6be:	f47f af1d 	bne.w	801d4fc <_scanf_float+0x64>
 801d6c2:	2507      	movs	r5, #7
 801d6c4:	e7b1      	b.n	801d62a <_scanf_float+0x192>
 801d6c6:	6822      	ldr	r2, [r4, #0]
 801d6c8:	0591      	lsls	r1, r2, #22
 801d6ca:	f57f af17 	bpl.w	801d4fc <_scanf_float+0x64>
 801d6ce:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 801d6d2:	6022      	str	r2, [r4, #0]
 801d6d4:	f8cd 9008 	str.w	r9, [sp, #8]
 801d6d8:	e7a7      	b.n	801d62a <_scanf_float+0x192>
 801d6da:	6822      	ldr	r2, [r4, #0]
 801d6dc:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 801d6e0:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 801d6e4:	d006      	beq.n	801d6f4 <_scanf_float+0x25c>
 801d6e6:	0550      	lsls	r0, r2, #21
 801d6e8:	f57f af08 	bpl.w	801d4fc <_scanf_float+0x64>
 801d6ec:	f1b9 0f00 	cmp.w	r9, #0
 801d6f0:	f000 80de 	beq.w	801d8b0 <_scanf_float+0x418>
 801d6f4:	0591      	lsls	r1, r2, #22
 801d6f6:	bf58      	it	pl
 801d6f8:	9902      	ldrpl	r1, [sp, #8]
 801d6fa:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 801d6fe:	bf58      	it	pl
 801d700:	eba9 0101 	subpl.w	r1, r9, r1
 801d704:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 801d708:	bf58      	it	pl
 801d70a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 801d70e:	6022      	str	r2, [r4, #0]
 801d710:	f04f 0900 	mov.w	r9, #0
 801d714:	e789      	b.n	801d62a <_scanf_float+0x192>
 801d716:	f04f 0a03 	mov.w	sl, #3
 801d71a:	e786      	b.n	801d62a <_scanf_float+0x192>
 801d71c:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 801d720:	4639      	mov	r1, r7
 801d722:	4640      	mov	r0, r8
 801d724:	4798      	blx	r3
 801d726:	2800      	cmp	r0, #0
 801d728:	f43f aedb 	beq.w	801d4e2 <_scanf_float+0x4a>
 801d72c:	e6e6      	b.n	801d4fc <_scanf_float+0x64>
 801d72e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 801d732:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801d736:	463a      	mov	r2, r7
 801d738:	4640      	mov	r0, r8
 801d73a:	4798      	blx	r3
 801d73c:	6923      	ldr	r3, [r4, #16]
 801d73e:	3b01      	subs	r3, #1
 801d740:	6123      	str	r3, [r4, #16]
 801d742:	e6e8      	b.n	801d516 <_scanf_float+0x7e>
 801d744:	1e6b      	subs	r3, r5, #1
 801d746:	2b06      	cmp	r3, #6
 801d748:	d824      	bhi.n	801d794 <_scanf_float+0x2fc>
 801d74a:	2d02      	cmp	r5, #2
 801d74c:	d836      	bhi.n	801d7bc <_scanf_float+0x324>
 801d74e:	9b01      	ldr	r3, [sp, #4]
 801d750:	429e      	cmp	r6, r3
 801d752:	f67f aee4 	bls.w	801d51e <_scanf_float+0x86>
 801d756:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 801d75a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801d75e:	463a      	mov	r2, r7
 801d760:	4640      	mov	r0, r8
 801d762:	4798      	blx	r3
 801d764:	6923      	ldr	r3, [r4, #16]
 801d766:	3b01      	subs	r3, #1
 801d768:	6123      	str	r3, [r4, #16]
 801d76a:	e7f0      	b.n	801d74e <_scanf_float+0x2b6>
 801d76c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 801d770:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 801d774:	463a      	mov	r2, r7
 801d776:	4640      	mov	r0, r8
 801d778:	4798      	blx	r3
 801d77a:	6923      	ldr	r3, [r4, #16]
 801d77c:	3b01      	subs	r3, #1
 801d77e:	6123      	str	r3, [r4, #16]
 801d780:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 801d784:	fa5f fa8a 	uxtb.w	sl, sl
 801d788:	f1ba 0f02 	cmp.w	sl, #2
 801d78c:	d1ee      	bne.n	801d76c <_scanf_float+0x2d4>
 801d78e:	3d03      	subs	r5, #3
 801d790:	b2ed      	uxtb	r5, r5
 801d792:	1b76      	subs	r6, r6, r5
 801d794:	6823      	ldr	r3, [r4, #0]
 801d796:	05da      	lsls	r2, r3, #23
 801d798:	d530      	bpl.n	801d7fc <_scanf_float+0x364>
 801d79a:	055b      	lsls	r3, r3, #21
 801d79c:	d511      	bpl.n	801d7c2 <_scanf_float+0x32a>
 801d79e:	9b01      	ldr	r3, [sp, #4]
 801d7a0:	429e      	cmp	r6, r3
 801d7a2:	f67f aebc 	bls.w	801d51e <_scanf_float+0x86>
 801d7a6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 801d7aa:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801d7ae:	463a      	mov	r2, r7
 801d7b0:	4640      	mov	r0, r8
 801d7b2:	4798      	blx	r3
 801d7b4:	6923      	ldr	r3, [r4, #16]
 801d7b6:	3b01      	subs	r3, #1
 801d7b8:	6123      	str	r3, [r4, #16]
 801d7ba:	e7f0      	b.n	801d79e <_scanf_float+0x306>
 801d7bc:	46aa      	mov	sl, r5
 801d7be:	46b3      	mov	fp, r6
 801d7c0:	e7de      	b.n	801d780 <_scanf_float+0x2e8>
 801d7c2:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 801d7c6:	6923      	ldr	r3, [r4, #16]
 801d7c8:	2965      	cmp	r1, #101	@ 0x65
 801d7ca:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 801d7ce:	f106 35ff 	add.w	r5, r6, #4294967295	@ 0xffffffff
 801d7d2:	6123      	str	r3, [r4, #16]
 801d7d4:	d00c      	beq.n	801d7f0 <_scanf_float+0x358>
 801d7d6:	2945      	cmp	r1, #69	@ 0x45
 801d7d8:	d00a      	beq.n	801d7f0 <_scanf_float+0x358>
 801d7da:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 801d7de:	463a      	mov	r2, r7
 801d7e0:	4640      	mov	r0, r8
 801d7e2:	4798      	blx	r3
 801d7e4:	6923      	ldr	r3, [r4, #16]
 801d7e6:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 801d7ea:	3b01      	subs	r3, #1
 801d7ec:	1eb5      	subs	r5, r6, #2
 801d7ee:	6123      	str	r3, [r4, #16]
 801d7f0:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 801d7f4:	463a      	mov	r2, r7
 801d7f6:	4640      	mov	r0, r8
 801d7f8:	4798      	blx	r3
 801d7fa:	462e      	mov	r6, r5
 801d7fc:	6822      	ldr	r2, [r4, #0]
 801d7fe:	f012 0210 	ands.w	r2, r2, #16
 801d802:	d001      	beq.n	801d808 <_scanf_float+0x370>
 801d804:	2000      	movs	r0, #0
 801d806:	e68b      	b.n	801d520 <_scanf_float+0x88>
 801d808:	7032      	strb	r2, [r6, #0]
 801d80a:	6823      	ldr	r3, [r4, #0]
 801d80c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 801d810:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 801d814:	d11c      	bne.n	801d850 <_scanf_float+0x3b8>
 801d816:	9b02      	ldr	r3, [sp, #8]
 801d818:	454b      	cmp	r3, r9
 801d81a:	eba3 0209 	sub.w	r2, r3, r9
 801d81e:	d123      	bne.n	801d868 <_scanf_float+0x3d0>
 801d820:	9901      	ldr	r1, [sp, #4]
 801d822:	2200      	movs	r2, #0
 801d824:	4640      	mov	r0, r8
 801d826:	f002 fd1b 	bl	8020260 <_strtod_r>
 801d82a:	9b03      	ldr	r3, [sp, #12]
 801d82c:	6821      	ldr	r1, [r4, #0]
 801d82e:	681b      	ldr	r3, [r3, #0]
 801d830:	f011 0f02 	tst.w	r1, #2
 801d834:	ec57 6b10 	vmov	r6, r7, d0
 801d838:	f103 0204 	add.w	r2, r3, #4
 801d83c:	d01f      	beq.n	801d87e <_scanf_float+0x3e6>
 801d83e:	9903      	ldr	r1, [sp, #12]
 801d840:	600a      	str	r2, [r1, #0]
 801d842:	681b      	ldr	r3, [r3, #0]
 801d844:	e9c3 6700 	strd	r6, r7, [r3]
 801d848:	68e3      	ldr	r3, [r4, #12]
 801d84a:	3301      	adds	r3, #1
 801d84c:	60e3      	str	r3, [r4, #12]
 801d84e:	e7d9      	b.n	801d804 <_scanf_float+0x36c>
 801d850:	9b04      	ldr	r3, [sp, #16]
 801d852:	2b00      	cmp	r3, #0
 801d854:	d0e4      	beq.n	801d820 <_scanf_float+0x388>
 801d856:	9905      	ldr	r1, [sp, #20]
 801d858:	230a      	movs	r3, #10
 801d85a:	3101      	adds	r1, #1
 801d85c:	4640      	mov	r0, r8
 801d85e:	f002 fd7f 	bl	8020360 <_strtol_r>
 801d862:	9b04      	ldr	r3, [sp, #16]
 801d864:	9e05      	ldr	r6, [sp, #20]
 801d866:	1ac2      	subs	r2, r0, r3
 801d868:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 801d86c:	429e      	cmp	r6, r3
 801d86e:	bf28      	it	cs
 801d870:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 801d874:	4910      	ldr	r1, [pc, #64]	@ (801d8b8 <_scanf_float+0x420>)
 801d876:	4630      	mov	r0, r6
 801d878:	f000 f8e4 	bl	801da44 <siprintf>
 801d87c:	e7d0      	b.n	801d820 <_scanf_float+0x388>
 801d87e:	f011 0f04 	tst.w	r1, #4
 801d882:	9903      	ldr	r1, [sp, #12]
 801d884:	600a      	str	r2, [r1, #0]
 801d886:	d1dc      	bne.n	801d842 <_scanf_float+0x3aa>
 801d888:	681d      	ldr	r5, [r3, #0]
 801d88a:	4632      	mov	r2, r6
 801d88c:	463b      	mov	r3, r7
 801d88e:	4630      	mov	r0, r6
 801d890:	4639      	mov	r1, r7
 801d892:	f7e3 f94b 	bl	8000b2c <__aeabi_dcmpun>
 801d896:	b128      	cbz	r0, 801d8a4 <_scanf_float+0x40c>
 801d898:	4808      	ldr	r0, [pc, #32]	@ (801d8bc <_scanf_float+0x424>)
 801d89a:	f000 fa43 	bl	801dd24 <nanf>
 801d89e:	ed85 0a00 	vstr	s0, [r5]
 801d8a2:	e7d1      	b.n	801d848 <_scanf_float+0x3b0>
 801d8a4:	4630      	mov	r0, r6
 801d8a6:	4639      	mov	r1, r7
 801d8a8:	f7e3 f99e 	bl	8000be8 <__aeabi_d2f>
 801d8ac:	6028      	str	r0, [r5, #0]
 801d8ae:	e7cb      	b.n	801d848 <_scanf_float+0x3b0>
 801d8b0:	f04f 0900 	mov.w	r9, #0
 801d8b4:	e629      	b.n	801d50a <_scanf_float+0x72>
 801d8b6:	bf00      	nop
 801d8b8:	08022024 	.word	0x08022024
 801d8bc:	080223bd 	.word	0x080223bd

0801d8c0 <std>:
 801d8c0:	2300      	movs	r3, #0
 801d8c2:	b510      	push	{r4, lr}
 801d8c4:	4604      	mov	r4, r0
 801d8c6:	e9c0 3300 	strd	r3, r3, [r0]
 801d8ca:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801d8ce:	6083      	str	r3, [r0, #8]
 801d8d0:	8181      	strh	r1, [r0, #12]
 801d8d2:	6643      	str	r3, [r0, #100]	@ 0x64
 801d8d4:	81c2      	strh	r2, [r0, #14]
 801d8d6:	6183      	str	r3, [r0, #24]
 801d8d8:	4619      	mov	r1, r3
 801d8da:	2208      	movs	r2, #8
 801d8dc:	305c      	adds	r0, #92	@ 0x5c
 801d8de:	f000 f92e 	bl	801db3e <memset>
 801d8e2:	4b0d      	ldr	r3, [pc, #52]	@ (801d918 <std+0x58>)
 801d8e4:	6263      	str	r3, [r4, #36]	@ 0x24
 801d8e6:	4b0d      	ldr	r3, [pc, #52]	@ (801d91c <std+0x5c>)
 801d8e8:	62a3      	str	r3, [r4, #40]	@ 0x28
 801d8ea:	4b0d      	ldr	r3, [pc, #52]	@ (801d920 <std+0x60>)
 801d8ec:	62e3      	str	r3, [r4, #44]	@ 0x2c
 801d8ee:	4b0d      	ldr	r3, [pc, #52]	@ (801d924 <std+0x64>)
 801d8f0:	6323      	str	r3, [r4, #48]	@ 0x30
 801d8f2:	4b0d      	ldr	r3, [pc, #52]	@ (801d928 <std+0x68>)
 801d8f4:	6224      	str	r4, [r4, #32]
 801d8f6:	429c      	cmp	r4, r3
 801d8f8:	d006      	beq.n	801d908 <std+0x48>
 801d8fa:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 801d8fe:	4294      	cmp	r4, r2
 801d900:	d002      	beq.n	801d908 <std+0x48>
 801d902:	33d0      	adds	r3, #208	@ 0xd0
 801d904:	429c      	cmp	r4, r3
 801d906:	d105      	bne.n	801d914 <std+0x54>
 801d908:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 801d90c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801d910:	f000 b9f6 	b.w	801dd00 <__retarget_lock_init_recursive>
 801d914:	bd10      	pop	{r4, pc}
 801d916:	bf00      	nop
 801d918:	0801da85 	.word	0x0801da85
 801d91c:	0801daa7 	.word	0x0801daa7
 801d920:	0801dadf 	.word	0x0801dadf
 801d924:	0801db03 	.word	0x0801db03
 801d928:	20006000 	.word	0x20006000

0801d92c <stdio_exit_handler>:
 801d92c:	4a02      	ldr	r2, [pc, #8]	@ (801d938 <stdio_exit_handler+0xc>)
 801d92e:	4903      	ldr	r1, [pc, #12]	@ (801d93c <stdio_exit_handler+0x10>)
 801d930:	4803      	ldr	r0, [pc, #12]	@ (801d940 <stdio_exit_handler+0x14>)
 801d932:	f000 b869 	b.w	801da08 <_fwalk_sglue>
 801d936:	bf00      	nop
 801d938:	20000100 	.word	0x20000100
 801d93c:	0802071d 	.word	0x0802071d
 801d940:	20000110 	.word	0x20000110

0801d944 <cleanup_stdio>:
 801d944:	6841      	ldr	r1, [r0, #4]
 801d946:	4b0c      	ldr	r3, [pc, #48]	@ (801d978 <cleanup_stdio+0x34>)
 801d948:	4299      	cmp	r1, r3
 801d94a:	b510      	push	{r4, lr}
 801d94c:	4604      	mov	r4, r0
 801d94e:	d001      	beq.n	801d954 <cleanup_stdio+0x10>
 801d950:	f002 fee4 	bl	802071c <_fflush_r>
 801d954:	68a1      	ldr	r1, [r4, #8]
 801d956:	4b09      	ldr	r3, [pc, #36]	@ (801d97c <cleanup_stdio+0x38>)
 801d958:	4299      	cmp	r1, r3
 801d95a:	d002      	beq.n	801d962 <cleanup_stdio+0x1e>
 801d95c:	4620      	mov	r0, r4
 801d95e:	f002 fedd 	bl	802071c <_fflush_r>
 801d962:	68e1      	ldr	r1, [r4, #12]
 801d964:	4b06      	ldr	r3, [pc, #24]	@ (801d980 <cleanup_stdio+0x3c>)
 801d966:	4299      	cmp	r1, r3
 801d968:	d004      	beq.n	801d974 <cleanup_stdio+0x30>
 801d96a:	4620      	mov	r0, r4
 801d96c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801d970:	f002 bed4 	b.w	802071c <_fflush_r>
 801d974:	bd10      	pop	{r4, pc}
 801d976:	bf00      	nop
 801d978:	20006000 	.word	0x20006000
 801d97c:	20006068 	.word	0x20006068
 801d980:	200060d0 	.word	0x200060d0

0801d984 <global_stdio_init.part.0>:
 801d984:	b510      	push	{r4, lr}
 801d986:	4b0b      	ldr	r3, [pc, #44]	@ (801d9b4 <global_stdio_init.part.0+0x30>)
 801d988:	4c0b      	ldr	r4, [pc, #44]	@ (801d9b8 <global_stdio_init.part.0+0x34>)
 801d98a:	4a0c      	ldr	r2, [pc, #48]	@ (801d9bc <global_stdio_init.part.0+0x38>)
 801d98c:	601a      	str	r2, [r3, #0]
 801d98e:	4620      	mov	r0, r4
 801d990:	2200      	movs	r2, #0
 801d992:	2104      	movs	r1, #4
 801d994:	f7ff ff94 	bl	801d8c0 <std>
 801d998:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 801d99c:	2201      	movs	r2, #1
 801d99e:	2109      	movs	r1, #9
 801d9a0:	f7ff ff8e 	bl	801d8c0 <std>
 801d9a4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 801d9a8:	2202      	movs	r2, #2
 801d9aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801d9ae:	2112      	movs	r1, #18
 801d9b0:	f7ff bf86 	b.w	801d8c0 <std>
 801d9b4:	20006138 	.word	0x20006138
 801d9b8:	20006000 	.word	0x20006000
 801d9bc:	0801d92d 	.word	0x0801d92d

0801d9c0 <__sfp_lock_acquire>:
 801d9c0:	4801      	ldr	r0, [pc, #4]	@ (801d9c8 <__sfp_lock_acquire+0x8>)
 801d9c2:	f000 b99e 	b.w	801dd02 <__retarget_lock_acquire_recursive>
 801d9c6:	bf00      	nop
 801d9c8:	20006141 	.word	0x20006141

0801d9cc <__sfp_lock_release>:
 801d9cc:	4801      	ldr	r0, [pc, #4]	@ (801d9d4 <__sfp_lock_release+0x8>)
 801d9ce:	f000 b999 	b.w	801dd04 <__retarget_lock_release_recursive>
 801d9d2:	bf00      	nop
 801d9d4:	20006141 	.word	0x20006141

0801d9d8 <__sinit>:
 801d9d8:	b510      	push	{r4, lr}
 801d9da:	4604      	mov	r4, r0
 801d9dc:	f7ff fff0 	bl	801d9c0 <__sfp_lock_acquire>
 801d9e0:	6a23      	ldr	r3, [r4, #32]
 801d9e2:	b11b      	cbz	r3, 801d9ec <__sinit+0x14>
 801d9e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801d9e8:	f7ff bff0 	b.w	801d9cc <__sfp_lock_release>
 801d9ec:	4b04      	ldr	r3, [pc, #16]	@ (801da00 <__sinit+0x28>)
 801d9ee:	6223      	str	r3, [r4, #32]
 801d9f0:	4b04      	ldr	r3, [pc, #16]	@ (801da04 <__sinit+0x2c>)
 801d9f2:	681b      	ldr	r3, [r3, #0]
 801d9f4:	2b00      	cmp	r3, #0
 801d9f6:	d1f5      	bne.n	801d9e4 <__sinit+0xc>
 801d9f8:	f7ff ffc4 	bl	801d984 <global_stdio_init.part.0>
 801d9fc:	e7f2      	b.n	801d9e4 <__sinit+0xc>
 801d9fe:	bf00      	nop
 801da00:	0801d945 	.word	0x0801d945
 801da04:	20006138 	.word	0x20006138

0801da08 <_fwalk_sglue>:
 801da08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801da0c:	4607      	mov	r7, r0
 801da0e:	4688      	mov	r8, r1
 801da10:	4614      	mov	r4, r2
 801da12:	2600      	movs	r6, #0
 801da14:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801da18:	f1b9 0901 	subs.w	r9, r9, #1
 801da1c:	d505      	bpl.n	801da2a <_fwalk_sglue+0x22>
 801da1e:	6824      	ldr	r4, [r4, #0]
 801da20:	2c00      	cmp	r4, #0
 801da22:	d1f7      	bne.n	801da14 <_fwalk_sglue+0xc>
 801da24:	4630      	mov	r0, r6
 801da26:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801da2a:	89ab      	ldrh	r3, [r5, #12]
 801da2c:	2b01      	cmp	r3, #1
 801da2e:	d907      	bls.n	801da40 <_fwalk_sglue+0x38>
 801da30:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801da34:	3301      	adds	r3, #1
 801da36:	d003      	beq.n	801da40 <_fwalk_sglue+0x38>
 801da38:	4629      	mov	r1, r5
 801da3a:	4638      	mov	r0, r7
 801da3c:	47c0      	blx	r8
 801da3e:	4306      	orrs	r6, r0
 801da40:	3568      	adds	r5, #104	@ 0x68
 801da42:	e7e9      	b.n	801da18 <_fwalk_sglue+0x10>

0801da44 <siprintf>:
 801da44:	b40e      	push	{r1, r2, r3}
 801da46:	b500      	push	{lr}
 801da48:	b09c      	sub	sp, #112	@ 0x70
 801da4a:	ab1d      	add	r3, sp, #116	@ 0x74
 801da4c:	9002      	str	r0, [sp, #8]
 801da4e:	9006      	str	r0, [sp, #24]
 801da50:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 801da54:	4809      	ldr	r0, [pc, #36]	@ (801da7c <siprintf+0x38>)
 801da56:	9107      	str	r1, [sp, #28]
 801da58:	9104      	str	r1, [sp, #16]
 801da5a:	4909      	ldr	r1, [pc, #36]	@ (801da80 <siprintf+0x3c>)
 801da5c:	f853 2b04 	ldr.w	r2, [r3], #4
 801da60:	9105      	str	r1, [sp, #20]
 801da62:	6800      	ldr	r0, [r0, #0]
 801da64:	9301      	str	r3, [sp, #4]
 801da66:	a902      	add	r1, sp, #8
 801da68:	f002 fcd8 	bl	802041c <_svfiprintf_r>
 801da6c:	9b02      	ldr	r3, [sp, #8]
 801da6e:	2200      	movs	r2, #0
 801da70:	701a      	strb	r2, [r3, #0]
 801da72:	b01c      	add	sp, #112	@ 0x70
 801da74:	f85d eb04 	ldr.w	lr, [sp], #4
 801da78:	b003      	add	sp, #12
 801da7a:	4770      	bx	lr
 801da7c:	2000010c 	.word	0x2000010c
 801da80:	ffff0208 	.word	0xffff0208

0801da84 <__sread>:
 801da84:	b510      	push	{r4, lr}
 801da86:	460c      	mov	r4, r1
 801da88:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801da8c:	f000 f8ea 	bl	801dc64 <_read_r>
 801da90:	2800      	cmp	r0, #0
 801da92:	bfab      	itete	ge
 801da94:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 801da96:	89a3      	ldrhlt	r3, [r4, #12]
 801da98:	181b      	addge	r3, r3, r0
 801da9a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 801da9e:	bfac      	ite	ge
 801daa0:	6563      	strge	r3, [r4, #84]	@ 0x54
 801daa2:	81a3      	strhlt	r3, [r4, #12]
 801daa4:	bd10      	pop	{r4, pc}

0801daa6 <__swrite>:
 801daa6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801daaa:	461f      	mov	r7, r3
 801daac:	898b      	ldrh	r3, [r1, #12]
 801daae:	05db      	lsls	r3, r3, #23
 801dab0:	4605      	mov	r5, r0
 801dab2:	460c      	mov	r4, r1
 801dab4:	4616      	mov	r6, r2
 801dab6:	d505      	bpl.n	801dac4 <__swrite+0x1e>
 801dab8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801dabc:	2302      	movs	r3, #2
 801dabe:	2200      	movs	r2, #0
 801dac0:	f000 f8be 	bl	801dc40 <_lseek_r>
 801dac4:	89a3      	ldrh	r3, [r4, #12]
 801dac6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801daca:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801dace:	81a3      	strh	r3, [r4, #12]
 801dad0:	4632      	mov	r2, r6
 801dad2:	463b      	mov	r3, r7
 801dad4:	4628      	mov	r0, r5
 801dad6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801dada:	f000 b8d5 	b.w	801dc88 <_write_r>

0801dade <__sseek>:
 801dade:	b510      	push	{r4, lr}
 801dae0:	460c      	mov	r4, r1
 801dae2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801dae6:	f000 f8ab 	bl	801dc40 <_lseek_r>
 801daea:	1c43      	adds	r3, r0, #1
 801daec:	89a3      	ldrh	r3, [r4, #12]
 801daee:	bf15      	itete	ne
 801daf0:	6560      	strne	r0, [r4, #84]	@ 0x54
 801daf2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 801daf6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 801dafa:	81a3      	strheq	r3, [r4, #12]
 801dafc:	bf18      	it	ne
 801dafe:	81a3      	strhne	r3, [r4, #12]
 801db00:	bd10      	pop	{r4, pc}

0801db02 <__sclose>:
 801db02:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801db06:	f000 b835 	b.w	801db74 <_close_r>

0801db0a <memmove>:
 801db0a:	4288      	cmp	r0, r1
 801db0c:	b510      	push	{r4, lr}
 801db0e:	eb01 0402 	add.w	r4, r1, r2
 801db12:	d902      	bls.n	801db1a <memmove+0x10>
 801db14:	4284      	cmp	r4, r0
 801db16:	4623      	mov	r3, r4
 801db18:	d807      	bhi.n	801db2a <memmove+0x20>
 801db1a:	1e43      	subs	r3, r0, #1
 801db1c:	42a1      	cmp	r1, r4
 801db1e:	d008      	beq.n	801db32 <memmove+0x28>
 801db20:	f811 2b01 	ldrb.w	r2, [r1], #1
 801db24:	f803 2f01 	strb.w	r2, [r3, #1]!
 801db28:	e7f8      	b.n	801db1c <memmove+0x12>
 801db2a:	4402      	add	r2, r0
 801db2c:	4601      	mov	r1, r0
 801db2e:	428a      	cmp	r2, r1
 801db30:	d100      	bne.n	801db34 <memmove+0x2a>
 801db32:	bd10      	pop	{r4, pc}
 801db34:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801db38:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801db3c:	e7f7      	b.n	801db2e <memmove+0x24>

0801db3e <memset>:
 801db3e:	4402      	add	r2, r0
 801db40:	4603      	mov	r3, r0
 801db42:	4293      	cmp	r3, r2
 801db44:	d100      	bne.n	801db48 <memset+0xa>
 801db46:	4770      	bx	lr
 801db48:	f803 1b01 	strb.w	r1, [r3], #1
 801db4c:	e7f9      	b.n	801db42 <memset+0x4>

0801db4e <strcat>:
 801db4e:	b510      	push	{r4, lr}
 801db50:	4602      	mov	r2, r0
 801db52:	7814      	ldrb	r4, [r2, #0]
 801db54:	4613      	mov	r3, r2
 801db56:	3201      	adds	r2, #1
 801db58:	2c00      	cmp	r4, #0
 801db5a:	d1fa      	bne.n	801db52 <strcat+0x4>
 801db5c:	3b01      	subs	r3, #1
 801db5e:	f811 2b01 	ldrb.w	r2, [r1], #1
 801db62:	f803 2f01 	strb.w	r2, [r3, #1]!
 801db66:	2a00      	cmp	r2, #0
 801db68:	d1f9      	bne.n	801db5e <strcat+0x10>
 801db6a:	bd10      	pop	{r4, pc}

0801db6c <_localeconv_r>:
 801db6c:	4800      	ldr	r0, [pc, #0]	@ (801db70 <_localeconv_r+0x4>)
 801db6e:	4770      	bx	lr
 801db70:	2000024c 	.word	0x2000024c

0801db74 <_close_r>:
 801db74:	b538      	push	{r3, r4, r5, lr}
 801db76:	4d06      	ldr	r5, [pc, #24]	@ (801db90 <_close_r+0x1c>)
 801db78:	2300      	movs	r3, #0
 801db7a:	4604      	mov	r4, r0
 801db7c:	4608      	mov	r0, r1
 801db7e:	602b      	str	r3, [r5, #0]
 801db80:	f7ee f900 	bl	800bd84 <_close>
 801db84:	1c43      	adds	r3, r0, #1
 801db86:	d102      	bne.n	801db8e <_close_r+0x1a>
 801db88:	682b      	ldr	r3, [r5, #0]
 801db8a:	b103      	cbz	r3, 801db8e <_close_r+0x1a>
 801db8c:	6023      	str	r3, [r4, #0]
 801db8e:	bd38      	pop	{r3, r4, r5, pc}
 801db90:	2000613c 	.word	0x2000613c

0801db94 <_reclaim_reent>:
 801db94:	4b29      	ldr	r3, [pc, #164]	@ (801dc3c <_reclaim_reent+0xa8>)
 801db96:	681b      	ldr	r3, [r3, #0]
 801db98:	4283      	cmp	r3, r0
 801db9a:	b570      	push	{r4, r5, r6, lr}
 801db9c:	4604      	mov	r4, r0
 801db9e:	d04b      	beq.n	801dc38 <_reclaim_reent+0xa4>
 801dba0:	69c3      	ldr	r3, [r0, #28]
 801dba2:	b1ab      	cbz	r3, 801dbd0 <_reclaim_reent+0x3c>
 801dba4:	68db      	ldr	r3, [r3, #12]
 801dba6:	b16b      	cbz	r3, 801dbc4 <_reclaim_reent+0x30>
 801dba8:	2500      	movs	r5, #0
 801dbaa:	69e3      	ldr	r3, [r4, #28]
 801dbac:	68db      	ldr	r3, [r3, #12]
 801dbae:	5959      	ldr	r1, [r3, r5]
 801dbb0:	2900      	cmp	r1, #0
 801dbb2:	d13b      	bne.n	801dc2c <_reclaim_reent+0x98>
 801dbb4:	3504      	adds	r5, #4
 801dbb6:	2d80      	cmp	r5, #128	@ 0x80
 801dbb8:	d1f7      	bne.n	801dbaa <_reclaim_reent+0x16>
 801dbba:	69e3      	ldr	r3, [r4, #28]
 801dbbc:	4620      	mov	r0, r4
 801dbbe:	68d9      	ldr	r1, [r3, #12]
 801dbc0:	f000 ff9a 	bl	801eaf8 <_free_r>
 801dbc4:	69e3      	ldr	r3, [r4, #28]
 801dbc6:	6819      	ldr	r1, [r3, #0]
 801dbc8:	b111      	cbz	r1, 801dbd0 <_reclaim_reent+0x3c>
 801dbca:	4620      	mov	r0, r4
 801dbcc:	f000 ff94 	bl	801eaf8 <_free_r>
 801dbd0:	6961      	ldr	r1, [r4, #20]
 801dbd2:	b111      	cbz	r1, 801dbda <_reclaim_reent+0x46>
 801dbd4:	4620      	mov	r0, r4
 801dbd6:	f000 ff8f 	bl	801eaf8 <_free_r>
 801dbda:	69e1      	ldr	r1, [r4, #28]
 801dbdc:	b111      	cbz	r1, 801dbe4 <_reclaim_reent+0x50>
 801dbde:	4620      	mov	r0, r4
 801dbe0:	f000 ff8a 	bl	801eaf8 <_free_r>
 801dbe4:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 801dbe6:	b111      	cbz	r1, 801dbee <_reclaim_reent+0x5a>
 801dbe8:	4620      	mov	r0, r4
 801dbea:	f000 ff85 	bl	801eaf8 <_free_r>
 801dbee:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801dbf0:	b111      	cbz	r1, 801dbf8 <_reclaim_reent+0x64>
 801dbf2:	4620      	mov	r0, r4
 801dbf4:	f000 ff80 	bl	801eaf8 <_free_r>
 801dbf8:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 801dbfa:	b111      	cbz	r1, 801dc02 <_reclaim_reent+0x6e>
 801dbfc:	4620      	mov	r0, r4
 801dbfe:	f000 ff7b 	bl	801eaf8 <_free_r>
 801dc02:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 801dc04:	b111      	cbz	r1, 801dc0c <_reclaim_reent+0x78>
 801dc06:	4620      	mov	r0, r4
 801dc08:	f000 ff76 	bl	801eaf8 <_free_r>
 801dc0c:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 801dc0e:	b111      	cbz	r1, 801dc16 <_reclaim_reent+0x82>
 801dc10:	4620      	mov	r0, r4
 801dc12:	f000 ff71 	bl	801eaf8 <_free_r>
 801dc16:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 801dc18:	b111      	cbz	r1, 801dc20 <_reclaim_reent+0x8c>
 801dc1a:	4620      	mov	r0, r4
 801dc1c:	f000 ff6c 	bl	801eaf8 <_free_r>
 801dc20:	6a23      	ldr	r3, [r4, #32]
 801dc22:	b14b      	cbz	r3, 801dc38 <_reclaim_reent+0xa4>
 801dc24:	4620      	mov	r0, r4
 801dc26:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801dc2a:	4718      	bx	r3
 801dc2c:	680e      	ldr	r6, [r1, #0]
 801dc2e:	4620      	mov	r0, r4
 801dc30:	f000 ff62 	bl	801eaf8 <_free_r>
 801dc34:	4631      	mov	r1, r6
 801dc36:	e7bb      	b.n	801dbb0 <_reclaim_reent+0x1c>
 801dc38:	bd70      	pop	{r4, r5, r6, pc}
 801dc3a:	bf00      	nop
 801dc3c:	2000010c 	.word	0x2000010c

0801dc40 <_lseek_r>:
 801dc40:	b538      	push	{r3, r4, r5, lr}
 801dc42:	4d07      	ldr	r5, [pc, #28]	@ (801dc60 <_lseek_r+0x20>)
 801dc44:	4604      	mov	r4, r0
 801dc46:	4608      	mov	r0, r1
 801dc48:	4611      	mov	r1, r2
 801dc4a:	2200      	movs	r2, #0
 801dc4c:	602a      	str	r2, [r5, #0]
 801dc4e:	461a      	mov	r2, r3
 801dc50:	f7ee f8bf 	bl	800bdd2 <_lseek>
 801dc54:	1c43      	adds	r3, r0, #1
 801dc56:	d102      	bne.n	801dc5e <_lseek_r+0x1e>
 801dc58:	682b      	ldr	r3, [r5, #0]
 801dc5a:	b103      	cbz	r3, 801dc5e <_lseek_r+0x1e>
 801dc5c:	6023      	str	r3, [r4, #0]
 801dc5e:	bd38      	pop	{r3, r4, r5, pc}
 801dc60:	2000613c 	.word	0x2000613c

0801dc64 <_read_r>:
 801dc64:	b538      	push	{r3, r4, r5, lr}
 801dc66:	4d07      	ldr	r5, [pc, #28]	@ (801dc84 <_read_r+0x20>)
 801dc68:	4604      	mov	r4, r0
 801dc6a:	4608      	mov	r0, r1
 801dc6c:	4611      	mov	r1, r2
 801dc6e:	2200      	movs	r2, #0
 801dc70:	602a      	str	r2, [r5, #0]
 801dc72:	461a      	mov	r2, r3
 801dc74:	f7ee f84d 	bl	800bd12 <_read>
 801dc78:	1c43      	adds	r3, r0, #1
 801dc7a:	d102      	bne.n	801dc82 <_read_r+0x1e>
 801dc7c:	682b      	ldr	r3, [r5, #0]
 801dc7e:	b103      	cbz	r3, 801dc82 <_read_r+0x1e>
 801dc80:	6023      	str	r3, [r4, #0]
 801dc82:	bd38      	pop	{r3, r4, r5, pc}
 801dc84:	2000613c 	.word	0x2000613c

0801dc88 <_write_r>:
 801dc88:	b538      	push	{r3, r4, r5, lr}
 801dc8a:	4d07      	ldr	r5, [pc, #28]	@ (801dca8 <_write_r+0x20>)
 801dc8c:	4604      	mov	r4, r0
 801dc8e:	4608      	mov	r0, r1
 801dc90:	4611      	mov	r1, r2
 801dc92:	2200      	movs	r2, #0
 801dc94:	602a      	str	r2, [r5, #0]
 801dc96:	461a      	mov	r2, r3
 801dc98:	f7ee f858 	bl	800bd4c <_write>
 801dc9c:	1c43      	adds	r3, r0, #1
 801dc9e:	d102      	bne.n	801dca6 <_write_r+0x1e>
 801dca0:	682b      	ldr	r3, [r5, #0]
 801dca2:	b103      	cbz	r3, 801dca6 <_write_r+0x1e>
 801dca4:	6023      	str	r3, [r4, #0]
 801dca6:	bd38      	pop	{r3, r4, r5, pc}
 801dca8:	2000613c 	.word	0x2000613c

0801dcac <__errno>:
 801dcac:	4b01      	ldr	r3, [pc, #4]	@ (801dcb4 <__errno+0x8>)
 801dcae:	6818      	ldr	r0, [r3, #0]
 801dcb0:	4770      	bx	lr
 801dcb2:	bf00      	nop
 801dcb4:	2000010c 	.word	0x2000010c

0801dcb8 <__libc_init_array>:
 801dcb8:	b570      	push	{r4, r5, r6, lr}
 801dcba:	4d0d      	ldr	r5, [pc, #52]	@ (801dcf0 <__libc_init_array+0x38>)
 801dcbc:	4c0d      	ldr	r4, [pc, #52]	@ (801dcf4 <__libc_init_array+0x3c>)
 801dcbe:	1b64      	subs	r4, r4, r5
 801dcc0:	10a4      	asrs	r4, r4, #2
 801dcc2:	2600      	movs	r6, #0
 801dcc4:	42a6      	cmp	r6, r4
 801dcc6:	d109      	bne.n	801dcdc <__libc_init_array+0x24>
 801dcc8:	4d0b      	ldr	r5, [pc, #44]	@ (801dcf8 <__libc_init_array+0x40>)
 801dcca:	4c0c      	ldr	r4, [pc, #48]	@ (801dcfc <__libc_init_array+0x44>)
 801dccc:	f003 fbee 	bl	80214ac <_init>
 801dcd0:	1b64      	subs	r4, r4, r5
 801dcd2:	10a4      	asrs	r4, r4, #2
 801dcd4:	2600      	movs	r6, #0
 801dcd6:	42a6      	cmp	r6, r4
 801dcd8:	d105      	bne.n	801dce6 <__libc_init_array+0x2e>
 801dcda:	bd70      	pop	{r4, r5, r6, pc}
 801dcdc:	f855 3b04 	ldr.w	r3, [r5], #4
 801dce0:	4798      	blx	r3
 801dce2:	3601      	adds	r6, #1
 801dce4:	e7ee      	b.n	801dcc4 <__libc_init_array+0xc>
 801dce6:	f855 3b04 	ldr.w	r3, [r5], #4
 801dcea:	4798      	blx	r3
 801dcec:	3601      	adds	r6, #1
 801dcee:	e7f2      	b.n	801dcd6 <__libc_init_array+0x1e>
 801dcf0:	08022428 	.word	0x08022428
 801dcf4:	08022428 	.word	0x08022428
 801dcf8:	08022428 	.word	0x08022428
 801dcfc:	0802242c 	.word	0x0802242c

0801dd00 <__retarget_lock_init_recursive>:
 801dd00:	4770      	bx	lr

0801dd02 <__retarget_lock_acquire_recursive>:
 801dd02:	4770      	bx	lr

0801dd04 <__retarget_lock_release_recursive>:
 801dd04:	4770      	bx	lr

0801dd06 <memcpy>:
 801dd06:	440a      	add	r2, r1
 801dd08:	4291      	cmp	r1, r2
 801dd0a:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 801dd0e:	d100      	bne.n	801dd12 <memcpy+0xc>
 801dd10:	4770      	bx	lr
 801dd12:	b510      	push	{r4, lr}
 801dd14:	f811 4b01 	ldrb.w	r4, [r1], #1
 801dd18:	f803 4f01 	strb.w	r4, [r3, #1]!
 801dd1c:	4291      	cmp	r1, r2
 801dd1e:	d1f9      	bne.n	801dd14 <memcpy+0xe>
 801dd20:	bd10      	pop	{r4, pc}
	...

0801dd24 <nanf>:
 801dd24:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 801dd2c <nanf+0x8>
 801dd28:	4770      	bx	lr
 801dd2a:	bf00      	nop
 801dd2c:	7fc00000 	.word	0x7fc00000

0801dd30 <ldexpf>:
 801dd30:	b510      	push	{r4, lr}
 801dd32:	ed2d 8b02 	vpush	{d8}
 801dd36:	4604      	mov	r4, r0
 801dd38:	eeb0 8a40 	vmov.f32	s16, s0
 801dd3c:	f000 f884 	bl	801de48 <finitef>
 801dd40:	b1b8      	cbz	r0, 801dd72 <ldexpf+0x42>
 801dd42:	eeb5 8a40 	vcmp.f32	s16, #0.0
 801dd46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801dd4a:	d012      	beq.n	801dd72 <ldexpf+0x42>
 801dd4c:	eeb0 0a48 	vmov.f32	s0, s16
 801dd50:	4620      	mov	r0, r4
 801dd52:	f000 f813 	bl	801dd7c <scalbnf>
 801dd56:	eeb0 8a40 	vmov.f32	s16, s0
 801dd5a:	f000 f875 	bl	801de48 <finitef>
 801dd5e:	b120      	cbz	r0, 801dd6a <ldexpf+0x3a>
 801dd60:	eeb5 8a40 	vcmp.f32	s16, #0.0
 801dd64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801dd68:	d103      	bne.n	801dd72 <ldexpf+0x42>
 801dd6a:	f7ff ff9f 	bl	801dcac <__errno>
 801dd6e:	2322      	movs	r3, #34	@ 0x22
 801dd70:	6003      	str	r3, [r0, #0]
 801dd72:	eeb0 0a48 	vmov.f32	s0, s16
 801dd76:	ecbd 8b02 	vpop	{d8}
 801dd7a:	bd10      	pop	{r4, pc}

0801dd7c <scalbnf>:
 801dd7c:	ee10 3a10 	vmov	r3, s0
 801dd80:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 801dd84:	d02b      	beq.n	801ddde <scalbnf+0x62>
 801dd86:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 801dd8a:	d302      	bcc.n	801dd92 <scalbnf+0x16>
 801dd8c:	ee30 0a00 	vadd.f32	s0, s0, s0
 801dd90:	4770      	bx	lr
 801dd92:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 801dd96:	d123      	bne.n	801dde0 <scalbnf+0x64>
 801dd98:	4b24      	ldr	r3, [pc, #144]	@ (801de2c <scalbnf+0xb0>)
 801dd9a:	eddf 7a25 	vldr	s15, [pc, #148]	@ 801de30 <scalbnf+0xb4>
 801dd9e:	4298      	cmp	r0, r3
 801dda0:	ee20 0a27 	vmul.f32	s0, s0, s15
 801dda4:	db17      	blt.n	801ddd6 <scalbnf+0x5a>
 801dda6:	ee10 3a10 	vmov	r3, s0
 801ddaa:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 801ddae:	3a19      	subs	r2, #25
 801ddb0:	f24c 3150 	movw	r1, #50000	@ 0xc350
 801ddb4:	4288      	cmp	r0, r1
 801ddb6:	dd15      	ble.n	801dde4 <scalbnf+0x68>
 801ddb8:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 801de34 <scalbnf+0xb8>
 801ddbc:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 801de38 <scalbnf+0xbc>
 801ddc0:	ee10 3a10 	vmov	r3, s0
 801ddc4:	eeb0 7a67 	vmov.f32	s14, s15
 801ddc8:	2b00      	cmp	r3, #0
 801ddca:	bfb8      	it	lt
 801ddcc:	eef0 7a66 	vmovlt.f32	s15, s13
 801ddd0:	ee27 0a87 	vmul.f32	s0, s15, s14
 801ddd4:	4770      	bx	lr
 801ddd6:	eddf 7a19 	vldr	s15, [pc, #100]	@ 801de3c <scalbnf+0xc0>
 801ddda:	ee27 0a80 	vmul.f32	s0, s15, s0
 801ddde:	4770      	bx	lr
 801dde0:	0dd2      	lsrs	r2, r2, #23
 801dde2:	e7e5      	b.n	801ddb0 <scalbnf+0x34>
 801dde4:	4410      	add	r0, r2
 801dde6:	28fe      	cmp	r0, #254	@ 0xfe
 801dde8:	dce6      	bgt.n	801ddb8 <scalbnf+0x3c>
 801ddea:	2800      	cmp	r0, #0
 801ddec:	dd06      	ble.n	801ddfc <scalbnf+0x80>
 801ddee:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 801ddf2:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 801ddf6:	ee00 3a10 	vmov	s0, r3
 801ddfa:	4770      	bx	lr
 801ddfc:	f110 0f16 	cmn.w	r0, #22
 801de00:	da09      	bge.n	801de16 <scalbnf+0x9a>
 801de02:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 801de3c <scalbnf+0xc0>
 801de06:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 801de40 <scalbnf+0xc4>
 801de0a:	ee10 3a10 	vmov	r3, s0
 801de0e:	eeb0 7a67 	vmov.f32	s14, s15
 801de12:	2b00      	cmp	r3, #0
 801de14:	e7d9      	b.n	801ddca <scalbnf+0x4e>
 801de16:	3019      	adds	r0, #25
 801de18:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 801de1c:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 801de20:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 801de44 <scalbnf+0xc8>
 801de24:	ee07 3a90 	vmov	s15, r3
 801de28:	e7d7      	b.n	801ddda <scalbnf+0x5e>
 801de2a:	bf00      	nop
 801de2c:	ffff3cb0 	.word	0xffff3cb0
 801de30:	4c000000 	.word	0x4c000000
 801de34:	7149f2ca 	.word	0x7149f2ca
 801de38:	f149f2ca 	.word	0xf149f2ca
 801de3c:	0da24260 	.word	0x0da24260
 801de40:	8da24260 	.word	0x8da24260
 801de44:	33000000 	.word	0x33000000

0801de48 <finitef>:
 801de48:	ee10 3a10 	vmov	r3, s0
 801de4c:	f023 4000 	bic.w	r0, r3, #2147483648	@ 0x80000000
 801de50:	f1b0 4fff 	cmp.w	r0, #2139095040	@ 0x7f800000
 801de54:	bfac      	ite	ge
 801de56:	2000      	movge	r0, #0
 801de58:	2001      	movlt	r0, #1
 801de5a:	4770      	bx	lr

0801de5c <quorem>:
 801de5c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801de60:	6903      	ldr	r3, [r0, #16]
 801de62:	690c      	ldr	r4, [r1, #16]
 801de64:	42a3      	cmp	r3, r4
 801de66:	4607      	mov	r7, r0
 801de68:	db7e      	blt.n	801df68 <quorem+0x10c>
 801de6a:	3c01      	subs	r4, #1
 801de6c:	f101 0814 	add.w	r8, r1, #20
 801de70:	00a3      	lsls	r3, r4, #2
 801de72:	f100 0514 	add.w	r5, r0, #20
 801de76:	9300      	str	r3, [sp, #0]
 801de78:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801de7c:	9301      	str	r3, [sp, #4]
 801de7e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801de82:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801de86:	3301      	adds	r3, #1
 801de88:	429a      	cmp	r2, r3
 801de8a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 801de8e:	fbb2 f6f3 	udiv	r6, r2, r3
 801de92:	d32e      	bcc.n	801def2 <quorem+0x96>
 801de94:	f04f 0a00 	mov.w	sl, #0
 801de98:	46c4      	mov	ip, r8
 801de9a:	46ae      	mov	lr, r5
 801de9c:	46d3      	mov	fp, sl
 801de9e:	f85c 3b04 	ldr.w	r3, [ip], #4
 801dea2:	b298      	uxth	r0, r3
 801dea4:	fb06 a000 	mla	r0, r6, r0, sl
 801dea8:	0c02      	lsrs	r2, r0, #16
 801deaa:	0c1b      	lsrs	r3, r3, #16
 801deac:	fb06 2303 	mla	r3, r6, r3, r2
 801deb0:	f8de 2000 	ldr.w	r2, [lr]
 801deb4:	b280      	uxth	r0, r0
 801deb6:	b292      	uxth	r2, r2
 801deb8:	1a12      	subs	r2, r2, r0
 801deba:	445a      	add	r2, fp
 801debc:	f8de 0000 	ldr.w	r0, [lr]
 801dec0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801dec4:	b29b      	uxth	r3, r3
 801dec6:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 801deca:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 801dece:	b292      	uxth	r2, r2
 801ded0:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 801ded4:	45e1      	cmp	r9, ip
 801ded6:	f84e 2b04 	str.w	r2, [lr], #4
 801deda:	ea4f 4b23 	mov.w	fp, r3, asr #16
 801dede:	d2de      	bcs.n	801de9e <quorem+0x42>
 801dee0:	9b00      	ldr	r3, [sp, #0]
 801dee2:	58eb      	ldr	r3, [r5, r3]
 801dee4:	b92b      	cbnz	r3, 801def2 <quorem+0x96>
 801dee6:	9b01      	ldr	r3, [sp, #4]
 801dee8:	3b04      	subs	r3, #4
 801deea:	429d      	cmp	r5, r3
 801deec:	461a      	mov	r2, r3
 801deee:	d32f      	bcc.n	801df50 <quorem+0xf4>
 801def0:	613c      	str	r4, [r7, #16]
 801def2:	4638      	mov	r0, r7
 801def4:	f001 f9c4 	bl	801f280 <__mcmp>
 801def8:	2800      	cmp	r0, #0
 801defa:	db25      	blt.n	801df48 <quorem+0xec>
 801defc:	4629      	mov	r1, r5
 801defe:	2000      	movs	r0, #0
 801df00:	f858 2b04 	ldr.w	r2, [r8], #4
 801df04:	f8d1 c000 	ldr.w	ip, [r1]
 801df08:	fa1f fe82 	uxth.w	lr, r2
 801df0c:	fa1f f38c 	uxth.w	r3, ip
 801df10:	eba3 030e 	sub.w	r3, r3, lr
 801df14:	4403      	add	r3, r0
 801df16:	0c12      	lsrs	r2, r2, #16
 801df18:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 801df1c:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 801df20:	b29b      	uxth	r3, r3
 801df22:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801df26:	45c1      	cmp	r9, r8
 801df28:	f841 3b04 	str.w	r3, [r1], #4
 801df2c:	ea4f 4022 	mov.w	r0, r2, asr #16
 801df30:	d2e6      	bcs.n	801df00 <quorem+0xa4>
 801df32:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801df36:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801df3a:	b922      	cbnz	r2, 801df46 <quorem+0xea>
 801df3c:	3b04      	subs	r3, #4
 801df3e:	429d      	cmp	r5, r3
 801df40:	461a      	mov	r2, r3
 801df42:	d30b      	bcc.n	801df5c <quorem+0x100>
 801df44:	613c      	str	r4, [r7, #16]
 801df46:	3601      	adds	r6, #1
 801df48:	4630      	mov	r0, r6
 801df4a:	b003      	add	sp, #12
 801df4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801df50:	6812      	ldr	r2, [r2, #0]
 801df52:	3b04      	subs	r3, #4
 801df54:	2a00      	cmp	r2, #0
 801df56:	d1cb      	bne.n	801def0 <quorem+0x94>
 801df58:	3c01      	subs	r4, #1
 801df5a:	e7c6      	b.n	801deea <quorem+0x8e>
 801df5c:	6812      	ldr	r2, [r2, #0]
 801df5e:	3b04      	subs	r3, #4
 801df60:	2a00      	cmp	r2, #0
 801df62:	d1ef      	bne.n	801df44 <quorem+0xe8>
 801df64:	3c01      	subs	r4, #1
 801df66:	e7ea      	b.n	801df3e <quorem+0xe2>
 801df68:	2000      	movs	r0, #0
 801df6a:	e7ee      	b.n	801df4a <quorem+0xee>
 801df6c:	0000      	movs	r0, r0
	...

0801df70 <_dtoa_r>:
 801df70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801df74:	69c7      	ldr	r7, [r0, #28]
 801df76:	b099      	sub	sp, #100	@ 0x64
 801df78:	ed8d 0b02 	vstr	d0, [sp, #8]
 801df7c:	ec55 4b10 	vmov	r4, r5, d0
 801df80:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 801df82:	9109      	str	r1, [sp, #36]	@ 0x24
 801df84:	4683      	mov	fp, r0
 801df86:	920e      	str	r2, [sp, #56]	@ 0x38
 801df88:	9313      	str	r3, [sp, #76]	@ 0x4c
 801df8a:	b97f      	cbnz	r7, 801dfac <_dtoa_r+0x3c>
 801df8c:	2010      	movs	r0, #16
 801df8e:	f000 fdfd 	bl	801eb8c <malloc>
 801df92:	4602      	mov	r2, r0
 801df94:	f8cb 001c 	str.w	r0, [fp, #28]
 801df98:	b920      	cbnz	r0, 801dfa4 <_dtoa_r+0x34>
 801df9a:	4ba7      	ldr	r3, [pc, #668]	@ (801e238 <_dtoa_r+0x2c8>)
 801df9c:	21ef      	movs	r1, #239	@ 0xef
 801df9e:	48a7      	ldr	r0, [pc, #668]	@ (801e23c <_dtoa_r+0x2cc>)
 801dfa0:	f002 fc0e 	bl	80207c0 <__assert_func>
 801dfa4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 801dfa8:	6007      	str	r7, [r0, #0]
 801dfaa:	60c7      	str	r7, [r0, #12]
 801dfac:	f8db 301c 	ldr.w	r3, [fp, #28]
 801dfb0:	6819      	ldr	r1, [r3, #0]
 801dfb2:	b159      	cbz	r1, 801dfcc <_dtoa_r+0x5c>
 801dfb4:	685a      	ldr	r2, [r3, #4]
 801dfb6:	604a      	str	r2, [r1, #4]
 801dfb8:	2301      	movs	r3, #1
 801dfba:	4093      	lsls	r3, r2
 801dfbc:	608b      	str	r3, [r1, #8]
 801dfbe:	4658      	mov	r0, fp
 801dfc0:	f000 feda 	bl	801ed78 <_Bfree>
 801dfc4:	f8db 301c 	ldr.w	r3, [fp, #28]
 801dfc8:	2200      	movs	r2, #0
 801dfca:	601a      	str	r2, [r3, #0]
 801dfcc:	1e2b      	subs	r3, r5, #0
 801dfce:	bfb9      	ittee	lt
 801dfd0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 801dfd4:	9303      	strlt	r3, [sp, #12]
 801dfd6:	2300      	movge	r3, #0
 801dfd8:	6033      	strge	r3, [r6, #0]
 801dfda:	9f03      	ldr	r7, [sp, #12]
 801dfdc:	4b98      	ldr	r3, [pc, #608]	@ (801e240 <_dtoa_r+0x2d0>)
 801dfde:	bfbc      	itt	lt
 801dfe0:	2201      	movlt	r2, #1
 801dfe2:	6032      	strlt	r2, [r6, #0]
 801dfe4:	43bb      	bics	r3, r7
 801dfe6:	d112      	bne.n	801e00e <_dtoa_r+0x9e>
 801dfe8:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801dfea:	f242 730f 	movw	r3, #9999	@ 0x270f
 801dfee:	6013      	str	r3, [r2, #0]
 801dff0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 801dff4:	4323      	orrs	r3, r4
 801dff6:	f000 854d 	beq.w	801ea94 <_dtoa_r+0xb24>
 801dffa:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801dffc:	f8df a254 	ldr.w	sl, [pc, #596]	@ 801e254 <_dtoa_r+0x2e4>
 801e000:	2b00      	cmp	r3, #0
 801e002:	f000 854f 	beq.w	801eaa4 <_dtoa_r+0xb34>
 801e006:	f10a 0303 	add.w	r3, sl, #3
 801e00a:	f000 bd49 	b.w	801eaa0 <_dtoa_r+0xb30>
 801e00e:	ed9d 7b02 	vldr	d7, [sp, #8]
 801e012:	2200      	movs	r2, #0
 801e014:	ec51 0b17 	vmov	r0, r1, d7
 801e018:	2300      	movs	r3, #0
 801e01a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 801e01e:	f7e2 fd53 	bl	8000ac8 <__aeabi_dcmpeq>
 801e022:	4680      	mov	r8, r0
 801e024:	b158      	cbz	r0, 801e03e <_dtoa_r+0xce>
 801e026:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801e028:	2301      	movs	r3, #1
 801e02a:	6013      	str	r3, [r2, #0]
 801e02c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801e02e:	b113      	cbz	r3, 801e036 <_dtoa_r+0xc6>
 801e030:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 801e032:	4b84      	ldr	r3, [pc, #528]	@ (801e244 <_dtoa_r+0x2d4>)
 801e034:	6013      	str	r3, [r2, #0]
 801e036:	f8df a220 	ldr.w	sl, [pc, #544]	@ 801e258 <_dtoa_r+0x2e8>
 801e03a:	f000 bd33 	b.w	801eaa4 <_dtoa_r+0xb34>
 801e03e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 801e042:	aa16      	add	r2, sp, #88	@ 0x58
 801e044:	a917      	add	r1, sp, #92	@ 0x5c
 801e046:	4658      	mov	r0, fp
 801e048:	f001 fa3a 	bl	801f4c0 <__d2b>
 801e04c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 801e050:	4681      	mov	r9, r0
 801e052:	2e00      	cmp	r6, #0
 801e054:	d077      	beq.n	801e146 <_dtoa_r+0x1d6>
 801e056:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801e058:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 801e05c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801e060:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801e064:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 801e068:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 801e06c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 801e070:	4619      	mov	r1, r3
 801e072:	2200      	movs	r2, #0
 801e074:	4b74      	ldr	r3, [pc, #464]	@ (801e248 <_dtoa_r+0x2d8>)
 801e076:	f7e2 f907 	bl	8000288 <__aeabi_dsub>
 801e07a:	a369      	add	r3, pc, #420	@ (adr r3, 801e220 <_dtoa_r+0x2b0>)
 801e07c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e080:	f7e2 faba 	bl	80005f8 <__aeabi_dmul>
 801e084:	a368      	add	r3, pc, #416	@ (adr r3, 801e228 <_dtoa_r+0x2b8>)
 801e086:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e08a:	f7e2 f8ff 	bl	800028c <__adddf3>
 801e08e:	4604      	mov	r4, r0
 801e090:	4630      	mov	r0, r6
 801e092:	460d      	mov	r5, r1
 801e094:	f7e2 fa46 	bl	8000524 <__aeabi_i2d>
 801e098:	a365      	add	r3, pc, #404	@ (adr r3, 801e230 <_dtoa_r+0x2c0>)
 801e09a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e09e:	f7e2 faab 	bl	80005f8 <__aeabi_dmul>
 801e0a2:	4602      	mov	r2, r0
 801e0a4:	460b      	mov	r3, r1
 801e0a6:	4620      	mov	r0, r4
 801e0a8:	4629      	mov	r1, r5
 801e0aa:	f7e2 f8ef 	bl	800028c <__adddf3>
 801e0ae:	4604      	mov	r4, r0
 801e0b0:	460d      	mov	r5, r1
 801e0b2:	f7e2 fd51 	bl	8000b58 <__aeabi_d2iz>
 801e0b6:	2200      	movs	r2, #0
 801e0b8:	4607      	mov	r7, r0
 801e0ba:	2300      	movs	r3, #0
 801e0bc:	4620      	mov	r0, r4
 801e0be:	4629      	mov	r1, r5
 801e0c0:	f7e2 fd0c 	bl	8000adc <__aeabi_dcmplt>
 801e0c4:	b140      	cbz	r0, 801e0d8 <_dtoa_r+0x168>
 801e0c6:	4638      	mov	r0, r7
 801e0c8:	f7e2 fa2c 	bl	8000524 <__aeabi_i2d>
 801e0cc:	4622      	mov	r2, r4
 801e0ce:	462b      	mov	r3, r5
 801e0d0:	f7e2 fcfa 	bl	8000ac8 <__aeabi_dcmpeq>
 801e0d4:	b900      	cbnz	r0, 801e0d8 <_dtoa_r+0x168>
 801e0d6:	3f01      	subs	r7, #1
 801e0d8:	2f16      	cmp	r7, #22
 801e0da:	d851      	bhi.n	801e180 <_dtoa_r+0x210>
 801e0dc:	4b5b      	ldr	r3, [pc, #364]	@ (801e24c <_dtoa_r+0x2dc>)
 801e0de:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 801e0e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e0e6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801e0ea:	f7e2 fcf7 	bl	8000adc <__aeabi_dcmplt>
 801e0ee:	2800      	cmp	r0, #0
 801e0f0:	d048      	beq.n	801e184 <_dtoa_r+0x214>
 801e0f2:	3f01      	subs	r7, #1
 801e0f4:	2300      	movs	r3, #0
 801e0f6:	9312      	str	r3, [sp, #72]	@ 0x48
 801e0f8:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801e0fa:	1b9b      	subs	r3, r3, r6
 801e0fc:	1e5a      	subs	r2, r3, #1
 801e0fe:	bf44      	itt	mi
 801e100:	f1c3 0801 	rsbmi	r8, r3, #1
 801e104:	2300      	movmi	r3, #0
 801e106:	9208      	str	r2, [sp, #32]
 801e108:	bf54      	ite	pl
 801e10a:	f04f 0800 	movpl.w	r8, #0
 801e10e:	9308      	strmi	r3, [sp, #32]
 801e110:	2f00      	cmp	r7, #0
 801e112:	db39      	blt.n	801e188 <_dtoa_r+0x218>
 801e114:	9b08      	ldr	r3, [sp, #32]
 801e116:	970f      	str	r7, [sp, #60]	@ 0x3c
 801e118:	443b      	add	r3, r7
 801e11a:	9308      	str	r3, [sp, #32]
 801e11c:	2300      	movs	r3, #0
 801e11e:	930a      	str	r3, [sp, #40]	@ 0x28
 801e120:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801e122:	2b09      	cmp	r3, #9
 801e124:	d864      	bhi.n	801e1f0 <_dtoa_r+0x280>
 801e126:	2b05      	cmp	r3, #5
 801e128:	bfc4      	itt	gt
 801e12a:	3b04      	subgt	r3, #4
 801e12c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 801e12e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801e130:	f1a3 0302 	sub.w	r3, r3, #2
 801e134:	bfcc      	ite	gt
 801e136:	2400      	movgt	r4, #0
 801e138:	2401      	movle	r4, #1
 801e13a:	2b03      	cmp	r3, #3
 801e13c:	d863      	bhi.n	801e206 <_dtoa_r+0x296>
 801e13e:	e8df f003 	tbb	[pc, r3]
 801e142:	372a      	.short	0x372a
 801e144:	5535      	.short	0x5535
 801e146:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 801e14a:	441e      	add	r6, r3
 801e14c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 801e150:	2b20      	cmp	r3, #32
 801e152:	bfc1      	itttt	gt
 801e154:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 801e158:	409f      	lslgt	r7, r3
 801e15a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 801e15e:	fa24 f303 	lsrgt.w	r3, r4, r3
 801e162:	bfd6      	itet	le
 801e164:	f1c3 0320 	rsble	r3, r3, #32
 801e168:	ea47 0003 	orrgt.w	r0, r7, r3
 801e16c:	fa04 f003 	lslle.w	r0, r4, r3
 801e170:	f7e2 f9c8 	bl	8000504 <__aeabi_ui2d>
 801e174:	2201      	movs	r2, #1
 801e176:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 801e17a:	3e01      	subs	r6, #1
 801e17c:	9214      	str	r2, [sp, #80]	@ 0x50
 801e17e:	e777      	b.n	801e070 <_dtoa_r+0x100>
 801e180:	2301      	movs	r3, #1
 801e182:	e7b8      	b.n	801e0f6 <_dtoa_r+0x186>
 801e184:	9012      	str	r0, [sp, #72]	@ 0x48
 801e186:	e7b7      	b.n	801e0f8 <_dtoa_r+0x188>
 801e188:	427b      	negs	r3, r7
 801e18a:	930a      	str	r3, [sp, #40]	@ 0x28
 801e18c:	2300      	movs	r3, #0
 801e18e:	eba8 0807 	sub.w	r8, r8, r7
 801e192:	930f      	str	r3, [sp, #60]	@ 0x3c
 801e194:	e7c4      	b.n	801e120 <_dtoa_r+0x1b0>
 801e196:	2300      	movs	r3, #0
 801e198:	930b      	str	r3, [sp, #44]	@ 0x2c
 801e19a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801e19c:	2b00      	cmp	r3, #0
 801e19e:	dc35      	bgt.n	801e20c <_dtoa_r+0x29c>
 801e1a0:	2301      	movs	r3, #1
 801e1a2:	9300      	str	r3, [sp, #0]
 801e1a4:	9307      	str	r3, [sp, #28]
 801e1a6:	461a      	mov	r2, r3
 801e1a8:	920e      	str	r2, [sp, #56]	@ 0x38
 801e1aa:	e00b      	b.n	801e1c4 <_dtoa_r+0x254>
 801e1ac:	2301      	movs	r3, #1
 801e1ae:	e7f3      	b.n	801e198 <_dtoa_r+0x228>
 801e1b0:	2300      	movs	r3, #0
 801e1b2:	930b      	str	r3, [sp, #44]	@ 0x2c
 801e1b4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801e1b6:	18fb      	adds	r3, r7, r3
 801e1b8:	9300      	str	r3, [sp, #0]
 801e1ba:	3301      	adds	r3, #1
 801e1bc:	2b01      	cmp	r3, #1
 801e1be:	9307      	str	r3, [sp, #28]
 801e1c0:	bfb8      	it	lt
 801e1c2:	2301      	movlt	r3, #1
 801e1c4:	f8db 001c 	ldr.w	r0, [fp, #28]
 801e1c8:	2100      	movs	r1, #0
 801e1ca:	2204      	movs	r2, #4
 801e1cc:	f102 0514 	add.w	r5, r2, #20
 801e1d0:	429d      	cmp	r5, r3
 801e1d2:	d91f      	bls.n	801e214 <_dtoa_r+0x2a4>
 801e1d4:	6041      	str	r1, [r0, #4]
 801e1d6:	4658      	mov	r0, fp
 801e1d8:	f000 fd8e 	bl	801ecf8 <_Balloc>
 801e1dc:	4682      	mov	sl, r0
 801e1de:	2800      	cmp	r0, #0
 801e1e0:	d13c      	bne.n	801e25c <_dtoa_r+0x2ec>
 801e1e2:	4b1b      	ldr	r3, [pc, #108]	@ (801e250 <_dtoa_r+0x2e0>)
 801e1e4:	4602      	mov	r2, r0
 801e1e6:	f240 11af 	movw	r1, #431	@ 0x1af
 801e1ea:	e6d8      	b.n	801df9e <_dtoa_r+0x2e>
 801e1ec:	2301      	movs	r3, #1
 801e1ee:	e7e0      	b.n	801e1b2 <_dtoa_r+0x242>
 801e1f0:	2401      	movs	r4, #1
 801e1f2:	2300      	movs	r3, #0
 801e1f4:	9309      	str	r3, [sp, #36]	@ 0x24
 801e1f6:	940b      	str	r4, [sp, #44]	@ 0x2c
 801e1f8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801e1fc:	9300      	str	r3, [sp, #0]
 801e1fe:	9307      	str	r3, [sp, #28]
 801e200:	2200      	movs	r2, #0
 801e202:	2312      	movs	r3, #18
 801e204:	e7d0      	b.n	801e1a8 <_dtoa_r+0x238>
 801e206:	2301      	movs	r3, #1
 801e208:	930b      	str	r3, [sp, #44]	@ 0x2c
 801e20a:	e7f5      	b.n	801e1f8 <_dtoa_r+0x288>
 801e20c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801e20e:	9300      	str	r3, [sp, #0]
 801e210:	9307      	str	r3, [sp, #28]
 801e212:	e7d7      	b.n	801e1c4 <_dtoa_r+0x254>
 801e214:	3101      	adds	r1, #1
 801e216:	0052      	lsls	r2, r2, #1
 801e218:	e7d8      	b.n	801e1cc <_dtoa_r+0x25c>
 801e21a:	bf00      	nop
 801e21c:	f3af 8000 	nop.w
 801e220:	636f4361 	.word	0x636f4361
 801e224:	3fd287a7 	.word	0x3fd287a7
 801e228:	8b60c8b3 	.word	0x8b60c8b3
 801e22c:	3fc68a28 	.word	0x3fc68a28
 801e230:	509f79fb 	.word	0x509f79fb
 801e234:	3fd34413 	.word	0x3fd34413
 801e238:	08022036 	.word	0x08022036
 801e23c:	0802204d 	.word	0x0802204d
 801e240:	7ff00000 	.word	0x7ff00000
 801e244:	08022001 	.word	0x08022001
 801e248:	3ff80000 	.word	0x3ff80000
 801e24c:	08022148 	.word	0x08022148
 801e250:	080220a5 	.word	0x080220a5
 801e254:	08022032 	.word	0x08022032
 801e258:	08022000 	.word	0x08022000
 801e25c:	f8db 301c 	ldr.w	r3, [fp, #28]
 801e260:	6018      	str	r0, [r3, #0]
 801e262:	9b07      	ldr	r3, [sp, #28]
 801e264:	2b0e      	cmp	r3, #14
 801e266:	f200 80a4 	bhi.w	801e3b2 <_dtoa_r+0x442>
 801e26a:	2c00      	cmp	r4, #0
 801e26c:	f000 80a1 	beq.w	801e3b2 <_dtoa_r+0x442>
 801e270:	2f00      	cmp	r7, #0
 801e272:	dd33      	ble.n	801e2dc <_dtoa_r+0x36c>
 801e274:	4bad      	ldr	r3, [pc, #692]	@ (801e52c <_dtoa_r+0x5bc>)
 801e276:	f007 020f 	and.w	r2, r7, #15
 801e27a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801e27e:	ed93 7b00 	vldr	d7, [r3]
 801e282:	05f8      	lsls	r0, r7, #23
 801e284:	ed8d 7b04 	vstr	d7, [sp, #16]
 801e288:	ea4f 1427 	mov.w	r4, r7, asr #4
 801e28c:	d516      	bpl.n	801e2bc <_dtoa_r+0x34c>
 801e28e:	4ba8      	ldr	r3, [pc, #672]	@ (801e530 <_dtoa_r+0x5c0>)
 801e290:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801e294:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 801e298:	f7e2 fad8 	bl	800084c <__aeabi_ddiv>
 801e29c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801e2a0:	f004 040f 	and.w	r4, r4, #15
 801e2a4:	2603      	movs	r6, #3
 801e2a6:	4da2      	ldr	r5, [pc, #648]	@ (801e530 <_dtoa_r+0x5c0>)
 801e2a8:	b954      	cbnz	r4, 801e2c0 <_dtoa_r+0x350>
 801e2aa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801e2ae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801e2b2:	f7e2 facb 	bl	800084c <__aeabi_ddiv>
 801e2b6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801e2ba:	e028      	b.n	801e30e <_dtoa_r+0x39e>
 801e2bc:	2602      	movs	r6, #2
 801e2be:	e7f2      	b.n	801e2a6 <_dtoa_r+0x336>
 801e2c0:	07e1      	lsls	r1, r4, #31
 801e2c2:	d508      	bpl.n	801e2d6 <_dtoa_r+0x366>
 801e2c4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801e2c8:	e9d5 2300 	ldrd	r2, r3, [r5]
 801e2cc:	f7e2 f994 	bl	80005f8 <__aeabi_dmul>
 801e2d0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801e2d4:	3601      	adds	r6, #1
 801e2d6:	1064      	asrs	r4, r4, #1
 801e2d8:	3508      	adds	r5, #8
 801e2da:	e7e5      	b.n	801e2a8 <_dtoa_r+0x338>
 801e2dc:	f000 80d2 	beq.w	801e484 <_dtoa_r+0x514>
 801e2e0:	427c      	negs	r4, r7
 801e2e2:	4b92      	ldr	r3, [pc, #584]	@ (801e52c <_dtoa_r+0x5bc>)
 801e2e4:	4d92      	ldr	r5, [pc, #584]	@ (801e530 <_dtoa_r+0x5c0>)
 801e2e6:	f004 020f 	and.w	r2, r4, #15
 801e2ea:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801e2ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e2f2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801e2f6:	f7e2 f97f 	bl	80005f8 <__aeabi_dmul>
 801e2fa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801e2fe:	1124      	asrs	r4, r4, #4
 801e300:	2300      	movs	r3, #0
 801e302:	2602      	movs	r6, #2
 801e304:	2c00      	cmp	r4, #0
 801e306:	f040 80b2 	bne.w	801e46e <_dtoa_r+0x4fe>
 801e30a:	2b00      	cmp	r3, #0
 801e30c:	d1d3      	bne.n	801e2b6 <_dtoa_r+0x346>
 801e30e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801e310:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 801e314:	2b00      	cmp	r3, #0
 801e316:	f000 80b7 	beq.w	801e488 <_dtoa_r+0x518>
 801e31a:	4b86      	ldr	r3, [pc, #536]	@ (801e534 <_dtoa_r+0x5c4>)
 801e31c:	2200      	movs	r2, #0
 801e31e:	4620      	mov	r0, r4
 801e320:	4629      	mov	r1, r5
 801e322:	f7e2 fbdb 	bl	8000adc <__aeabi_dcmplt>
 801e326:	2800      	cmp	r0, #0
 801e328:	f000 80ae 	beq.w	801e488 <_dtoa_r+0x518>
 801e32c:	9b07      	ldr	r3, [sp, #28]
 801e32e:	2b00      	cmp	r3, #0
 801e330:	f000 80aa 	beq.w	801e488 <_dtoa_r+0x518>
 801e334:	9b00      	ldr	r3, [sp, #0]
 801e336:	2b00      	cmp	r3, #0
 801e338:	dd37      	ble.n	801e3aa <_dtoa_r+0x43a>
 801e33a:	1e7b      	subs	r3, r7, #1
 801e33c:	9304      	str	r3, [sp, #16]
 801e33e:	4620      	mov	r0, r4
 801e340:	4b7d      	ldr	r3, [pc, #500]	@ (801e538 <_dtoa_r+0x5c8>)
 801e342:	2200      	movs	r2, #0
 801e344:	4629      	mov	r1, r5
 801e346:	f7e2 f957 	bl	80005f8 <__aeabi_dmul>
 801e34a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801e34e:	9c00      	ldr	r4, [sp, #0]
 801e350:	3601      	adds	r6, #1
 801e352:	4630      	mov	r0, r6
 801e354:	f7e2 f8e6 	bl	8000524 <__aeabi_i2d>
 801e358:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801e35c:	f7e2 f94c 	bl	80005f8 <__aeabi_dmul>
 801e360:	4b76      	ldr	r3, [pc, #472]	@ (801e53c <_dtoa_r+0x5cc>)
 801e362:	2200      	movs	r2, #0
 801e364:	f7e1 ff92 	bl	800028c <__adddf3>
 801e368:	4605      	mov	r5, r0
 801e36a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 801e36e:	2c00      	cmp	r4, #0
 801e370:	f040 808d 	bne.w	801e48e <_dtoa_r+0x51e>
 801e374:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801e378:	4b71      	ldr	r3, [pc, #452]	@ (801e540 <_dtoa_r+0x5d0>)
 801e37a:	2200      	movs	r2, #0
 801e37c:	f7e1 ff84 	bl	8000288 <__aeabi_dsub>
 801e380:	4602      	mov	r2, r0
 801e382:	460b      	mov	r3, r1
 801e384:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801e388:	462a      	mov	r2, r5
 801e38a:	4633      	mov	r3, r6
 801e38c:	f7e2 fbc4 	bl	8000b18 <__aeabi_dcmpgt>
 801e390:	2800      	cmp	r0, #0
 801e392:	f040 828b 	bne.w	801e8ac <_dtoa_r+0x93c>
 801e396:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801e39a:	462a      	mov	r2, r5
 801e39c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 801e3a0:	f7e2 fb9c 	bl	8000adc <__aeabi_dcmplt>
 801e3a4:	2800      	cmp	r0, #0
 801e3a6:	f040 8128 	bne.w	801e5fa <_dtoa_r+0x68a>
 801e3aa:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 801e3ae:	e9cd 3402 	strd	r3, r4, [sp, #8]
 801e3b2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801e3b4:	2b00      	cmp	r3, #0
 801e3b6:	f2c0 815a 	blt.w	801e66e <_dtoa_r+0x6fe>
 801e3ba:	2f0e      	cmp	r7, #14
 801e3bc:	f300 8157 	bgt.w	801e66e <_dtoa_r+0x6fe>
 801e3c0:	4b5a      	ldr	r3, [pc, #360]	@ (801e52c <_dtoa_r+0x5bc>)
 801e3c2:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 801e3c6:	ed93 7b00 	vldr	d7, [r3]
 801e3ca:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801e3cc:	2b00      	cmp	r3, #0
 801e3ce:	ed8d 7b00 	vstr	d7, [sp]
 801e3d2:	da03      	bge.n	801e3dc <_dtoa_r+0x46c>
 801e3d4:	9b07      	ldr	r3, [sp, #28]
 801e3d6:	2b00      	cmp	r3, #0
 801e3d8:	f340 8101 	ble.w	801e5de <_dtoa_r+0x66e>
 801e3dc:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 801e3e0:	4656      	mov	r6, sl
 801e3e2:	e9dd 2300 	ldrd	r2, r3, [sp]
 801e3e6:	4620      	mov	r0, r4
 801e3e8:	4629      	mov	r1, r5
 801e3ea:	f7e2 fa2f 	bl	800084c <__aeabi_ddiv>
 801e3ee:	f7e2 fbb3 	bl	8000b58 <__aeabi_d2iz>
 801e3f2:	4680      	mov	r8, r0
 801e3f4:	f7e2 f896 	bl	8000524 <__aeabi_i2d>
 801e3f8:	e9dd 2300 	ldrd	r2, r3, [sp]
 801e3fc:	f7e2 f8fc 	bl	80005f8 <__aeabi_dmul>
 801e400:	4602      	mov	r2, r0
 801e402:	460b      	mov	r3, r1
 801e404:	4620      	mov	r0, r4
 801e406:	4629      	mov	r1, r5
 801e408:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 801e40c:	f7e1 ff3c 	bl	8000288 <__aeabi_dsub>
 801e410:	f806 4b01 	strb.w	r4, [r6], #1
 801e414:	9d07      	ldr	r5, [sp, #28]
 801e416:	eba6 040a 	sub.w	r4, r6, sl
 801e41a:	42a5      	cmp	r5, r4
 801e41c:	4602      	mov	r2, r0
 801e41e:	460b      	mov	r3, r1
 801e420:	f040 8117 	bne.w	801e652 <_dtoa_r+0x6e2>
 801e424:	f7e1 ff32 	bl	800028c <__adddf3>
 801e428:	e9dd 2300 	ldrd	r2, r3, [sp]
 801e42c:	4604      	mov	r4, r0
 801e42e:	460d      	mov	r5, r1
 801e430:	f7e2 fb72 	bl	8000b18 <__aeabi_dcmpgt>
 801e434:	2800      	cmp	r0, #0
 801e436:	f040 80f9 	bne.w	801e62c <_dtoa_r+0x6bc>
 801e43a:	e9dd 2300 	ldrd	r2, r3, [sp]
 801e43e:	4620      	mov	r0, r4
 801e440:	4629      	mov	r1, r5
 801e442:	f7e2 fb41 	bl	8000ac8 <__aeabi_dcmpeq>
 801e446:	b118      	cbz	r0, 801e450 <_dtoa_r+0x4e0>
 801e448:	f018 0f01 	tst.w	r8, #1
 801e44c:	f040 80ee 	bne.w	801e62c <_dtoa_r+0x6bc>
 801e450:	4649      	mov	r1, r9
 801e452:	4658      	mov	r0, fp
 801e454:	f000 fc90 	bl	801ed78 <_Bfree>
 801e458:	2300      	movs	r3, #0
 801e45a:	7033      	strb	r3, [r6, #0]
 801e45c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801e45e:	3701      	adds	r7, #1
 801e460:	601f      	str	r7, [r3, #0]
 801e462:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801e464:	2b00      	cmp	r3, #0
 801e466:	f000 831d 	beq.w	801eaa4 <_dtoa_r+0xb34>
 801e46a:	601e      	str	r6, [r3, #0]
 801e46c:	e31a      	b.n	801eaa4 <_dtoa_r+0xb34>
 801e46e:	07e2      	lsls	r2, r4, #31
 801e470:	d505      	bpl.n	801e47e <_dtoa_r+0x50e>
 801e472:	e9d5 2300 	ldrd	r2, r3, [r5]
 801e476:	f7e2 f8bf 	bl	80005f8 <__aeabi_dmul>
 801e47a:	3601      	adds	r6, #1
 801e47c:	2301      	movs	r3, #1
 801e47e:	1064      	asrs	r4, r4, #1
 801e480:	3508      	adds	r5, #8
 801e482:	e73f      	b.n	801e304 <_dtoa_r+0x394>
 801e484:	2602      	movs	r6, #2
 801e486:	e742      	b.n	801e30e <_dtoa_r+0x39e>
 801e488:	9c07      	ldr	r4, [sp, #28]
 801e48a:	9704      	str	r7, [sp, #16]
 801e48c:	e761      	b.n	801e352 <_dtoa_r+0x3e2>
 801e48e:	4b27      	ldr	r3, [pc, #156]	@ (801e52c <_dtoa_r+0x5bc>)
 801e490:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801e492:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801e496:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 801e49a:	4454      	add	r4, sl
 801e49c:	2900      	cmp	r1, #0
 801e49e:	d053      	beq.n	801e548 <_dtoa_r+0x5d8>
 801e4a0:	4928      	ldr	r1, [pc, #160]	@ (801e544 <_dtoa_r+0x5d4>)
 801e4a2:	2000      	movs	r0, #0
 801e4a4:	f7e2 f9d2 	bl	800084c <__aeabi_ddiv>
 801e4a8:	4633      	mov	r3, r6
 801e4aa:	462a      	mov	r2, r5
 801e4ac:	f7e1 feec 	bl	8000288 <__aeabi_dsub>
 801e4b0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 801e4b4:	4656      	mov	r6, sl
 801e4b6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801e4ba:	f7e2 fb4d 	bl	8000b58 <__aeabi_d2iz>
 801e4be:	4605      	mov	r5, r0
 801e4c0:	f7e2 f830 	bl	8000524 <__aeabi_i2d>
 801e4c4:	4602      	mov	r2, r0
 801e4c6:	460b      	mov	r3, r1
 801e4c8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801e4cc:	f7e1 fedc 	bl	8000288 <__aeabi_dsub>
 801e4d0:	3530      	adds	r5, #48	@ 0x30
 801e4d2:	4602      	mov	r2, r0
 801e4d4:	460b      	mov	r3, r1
 801e4d6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801e4da:	f806 5b01 	strb.w	r5, [r6], #1
 801e4de:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 801e4e2:	f7e2 fafb 	bl	8000adc <__aeabi_dcmplt>
 801e4e6:	2800      	cmp	r0, #0
 801e4e8:	d171      	bne.n	801e5ce <_dtoa_r+0x65e>
 801e4ea:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801e4ee:	4911      	ldr	r1, [pc, #68]	@ (801e534 <_dtoa_r+0x5c4>)
 801e4f0:	2000      	movs	r0, #0
 801e4f2:	f7e1 fec9 	bl	8000288 <__aeabi_dsub>
 801e4f6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 801e4fa:	f7e2 faef 	bl	8000adc <__aeabi_dcmplt>
 801e4fe:	2800      	cmp	r0, #0
 801e500:	f040 8095 	bne.w	801e62e <_dtoa_r+0x6be>
 801e504:	42a6      	cmp	r6, r4
 801e506:	f43f af50 	beq.w	801e3aa <_dtoa_r+0x43a>
 801e50a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 801e50e:	4b0a      	ldr	r3, [pc, #40]	@ (801e538 <_dtoa_r+0x5c8>)
 801e510:	2200      	movs	r2, #0
 801e512:	f7e2 f871 	bl	80005f8 <__aeabi_dmul>
 801e516:	4b08      	ldr	r3, [pc, #32]	@ (801e538 <_dtoa_r+0x5c8>)
 801e518:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 801e51c:	2200      	movs	r2, #0
 801e51e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801e522:	f7e2 f869 	bl	80005f8 <__aeabi_dmul>
 801e526:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801e52a:	e7c4      	b.n	801e4b6 <_dtoa_r+0x546>
 801e52c:	08022148 	.word	0x08022148
 801e530:	08022120 	.word	0x08022120
 801e534:	3ff00000 	.word	0x3ff00000
 801e538:	40240000 	.word	0x40240000
 801e53c:	401c0000 	.word	0x401c0000
 801e540:	40140000 	.word	0x40140000
 801e544:	3fe00000 	.word	0x3fe00000
 801e548:	4631      	mov	r1, r6
 801e54a:	4628      	mov	r0, r5
 801e54c:	f7e2 f854 	bl	80005f8 <__aeabi_dmul>
 801e550:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 801e554:	9415      	str	r4, [sp, #84]	@ 0x54
 801e556:	4656      	mov	r6, sl
 801e558:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801e55c:	f7e2 fafc 	bl	8000b58 <__aeabi_d2iz>
 801e560:	4605      	mov	r5, r0
 801e562:	f7e1 ffdf 	bl	8000524 <__aeabi_i2d>
 801e566:	4602      	mov	r2, r0
 801e568:	460b      	mov	r3, r1
 801e56a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801e56e:	f7e1 fe8b 	bl	8000288 <__aeabi_dsub>
 801e572:	3530      	adds	r5, #48	@ 0x30
 801e574:	f806 5b01 	strb.w	r5, [r6], #1
 801e578:	4602      	mov	r2, r0
 801e57a:	460b      	mov	r3, r1
 801e57c:	42a6      	cmp	r6, r4
 801e57e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801e582:	f04f 0200 	mov.w	r2, #0
 801e586:	d124      	bne.n	801e5d2 <_dtoa_r+0x662>
 801e588:	4bac      	ldr	r3, [pc, #688]	@ (801e83c <_dtoa_r+0x8cc>)
 801e58a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 801e58e:	f7e1 fe7d 	bl	800028c <__adddf3>
 801e592:	4602      	mov	r2, r0
 801e594:	460b      	mov	r3, r1
 801e596:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801e59a:	f7e2 fabd 	bl	8000b18 <__aeabi_dcmpgt>
 801e59e:	2800      	cmp	r0, #0
 801e5a0:	d145      	bne.n	801e62e <_dtoa_r+0x6be>
 801e5a2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 801e5a6:	49a5      	ldr	r1, [pc, #660]	@ (801e83c <_dtoa_r+0x8cc>)
 801e5a8:	2000      	movs	r0, #0
 801e5aa:	f7e1 fe6d 	bl	8000288 <__aeabi_dsub>
 801e5ae:	4602      	mov	r2, r0
 801e5b0:	460b      	mov	r3, r1
 801e5b2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801e5b6:	f7e2 fa91 	bl	8000adc <__aeabi_dcmplt>
 801e5ba:	2800      	cmp	r0, #0
 801e5bc:	f43f aef5 	beq.w	801e3aa <_dtoa_r+0x43a>
 801e5c0:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 801e5c2:	1e73      	subs	r3, r6, #1
 801e5c4:	9315      	str	r3, [sp, #84]	@ 0x54
 801e5c6:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 801e5ca:	2b30      	cmp	r3, #48	@ 0x30
 801e5cc:	d0f8      	beq.n	801e5c0 <_dtoa_r+0x650>
 801e5ce:	9f04      	ldr	r7, [sp, #16]
 801e5d0:	e73e      	b.n	801e450 <_dtoa_r+0x4e0>
 801e5d2:	4b9b      	ldr	r3, [pc, #620]	@ (801e840 <_dtoa_r+0x8d0>)
 801e5d4:	f7e2 f810 	bl	80005f8 <__aeabi_dmul>
 801e5d8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801e5dc:	e7bc      	b.n	801e558 <_dtoa_r+0x5e8>
 801e5de:	d10c      	bne.n	801e5fa <_dtoa_r+0x68a>
 801e5e0:	4b98      	ldr	r3, [pc, #608]	@ (801e844 <_dtoa_r+0x8d4>)
 801e5e2:	2200      	movs	r2, #0
 801e5e4:	e9dd 0100 	ldrd	r0, r1, [sp]
 801e5e8:	f7e2 f806 	bl	80005f8 <__aeabi_dmul>
 801e5ec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801e5f0:	f7e2 fa88 	bl	8000b04 <__aeabi_dcmpge>
 801e5f4:	2800      	cmp	r0, #0
 801e5f6:	f000 8157 	beq.w	801e8a8 <_dtoa_r+0x938>
 801e5fa:	2400      	movs	r4, #0
 801e5fc:	4625      	mov	r5, r4
 801e5fe:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801e600:	43db      	mvns	r3, r3
 801e602:	9304      	str	r3, [sp, #16]
 801e604:	4656      	mov	r6, sl
 801e606:	2700      	movs	r7, #0
 801e608:	4621      	mov	r1, r4
 801e60a:	4658      	mov	r0, fp
 801e60c:	f000 fbb4 	bl	801ed78 <_Bfree>
 801e610:	2d00      	cmp	r5, #0
 801e612:	d0dc      	beq.n	801e5ce <_dtoa_r+0x65e>
 801e614:	b12f      	cbz	r7, 801e622 <_dtoa_r+0x6b2>
 801e616:	42af      	cmp	r7, r5
 801e618:	d003      	beq.n	801e622 <_dtoa_r+0x6b2>
 801e61a:	4639      	mov	r1, r7
 801e61c:	4658      	mov	r0, fp
 801e61e:	f000 fbab 	bl	801ed78 <_Bfree>
 801e622:	4629      	mov	r1, r5
 801e624:	4658      	mov	r0, fp
 801e626:	f000 fba7 	bl	801ed78 <_Bfree>
 801e62a:	e7d0      	b.n	801e5ce <_dtoa_r+0x65e>
 801e62c:	9704      	str	r7, [sp, #16]
 801e62e:	4633      	mov	r3, r6
 801e630:	461e      	mov	r6, r3
 801e632:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801e636:	2a39      	cmp	r2, #57	@ 0x39
 801e638:	d107      	bne.n	801e64a <_dtoa_r+0x6da>
 801e63a:	459a      	cmp	sl, r3
 801e63c:	d1f8      	bne.n	801e630 <_dtoa_r+0x6c0>
 801e63e:	9a04      	ldr	r2, [sp, #16]
 801e640:	3201      	adds	r2, #1
 801e642:	9204      	str	r2, [sp, #16]
 801e644:	2230      	movs	r2, #48	@ 0x30
 801e646:	f88a 2000 	strb.w	r2, [sl]
 801e64a:	781a      	ldrb	r2, [r3, #0]
 801e64c:	3201      	adds	r2, #1
 801e64e:	701a      	strb	r2, [r3, #0]
 801e650:	e7bd      	b.n	801e5ce <_dtoa_r+0x65e>
 801e652:	4b7b      	ldr	r3, [pc, #492]	@ (801e840 <_dtoa_r+0x8d0>)
 801e654:	2200      	movs	r2, #0
 801e656:	f7e1 ffcf 	bl	80005f8 <__aeabi_dmul>
 801e65a:	2200      	movs	r2, #0
 801e65c:	2300      	movs	r3, #0
 801e65e:	4604      	mov	r4, r0
 801e660:	460d      	mov	r5, r1
 801e662:	f7e2 fa31 	bl	8000ac8 <__aeabi_dcmpeq>
 801e666:	2800      	cmp	r0, #0
 801e668:	f43f aebb 	beq.w	801e3e2 <_dtoa_r+0x472>
 801e66c:	e6f0      	b.n	801e450 <_dtoa_r+0x4e0>
 801e66e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801e670:	2a00      	cmp	r2, #0
 801e672:	f000 80db 	beq.w	801e82c <_dtoa_r+0x8bc>
 801e676:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801e678:	2a01      	cmp	r2, #1
 801e67a:	f300 80bf 	bgt.w	801e7fc <_dtoa_r+0x88c>
 801e67e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801e680:	2a00      	cmp	r2, #0
 801e682:	f000 80b7 	beq.w	801e7f4 <_dtoa_r+0x884>
 801e686:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 801e68a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 801e68c:	4646      	mov	r6, r8
 801e68e:	9a08      	ldr	r2, [sp, #32]
 801e690:	2101      	movs	r1, #1
 801e692:	441a      	add	r2, r3
 801e694:	4658      	mov	r0, fp
 801e696:	4498      	add	r8, r3
 801e698:	9208      	str	r2, [sp, #32]
 801e69a:	f000 fc6b 	bl	801ef74 <__i2b>
 801e69e:	4605      	mov	r5, r0
 801e6a0:	b15e      	cbz	r6, 801e6ba <_dtoa_r+0x74a>
 801e6a2:	9b08      	ldr	r3, [sp, #32]
 801e6a4:	2b00      	cmp	r3, #0
 801e6a6:	dd08      	ble.n	801e6ba <_dtoa_r+0x74a>
 801e6a8:	42b3      	cmp	r3, r6
 801e6aa:	9a08      	ldr	r2, [sp, #32]
 801e6ac:	bfa8      	it	ge
 801e6ae:	4633      	movge	r3, r6
 801e6b0:	eba8 0803 	sub.w	r8, r8, r3
 801e6b4:	1af6      	subs	r6, r6, r3
 801e6b6:	1ad3      	subs	r3, r2, r3
 801e6b8:	9308      	str	r3, [sp, #32]
 801e6ba:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801e6bc:	b1f3      	cbz	r3, 801e6fc <_dtoa_r+0x78c>
 801e6be:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801e6c0:	2b00      	cmp	r3, #0
 801e6c2:	f000 80b7 	beq.w	801e834 <_dtoa_r+0x8c4>
 801e6c6:	b18c      	cbz	r4, 801e6ec <_dtoa_r+0x77c>
 801e6c8:	4629      	mov	r1, r5
 801e6ca:	4622      	mov	r2, r4
 801e6cc:	4658      	mov	r0, fp
 801e6ce:	f000 fd11 	bl	801f0f4 <__pow5mult>
 801e6d2:	464a      	mov	r2, r9
 801e6d4:	4601      	mov	r1, r0
 801e6d6:	4605      	mov	r5, r0
 801e6d8:	4658      	mov	r0, fp
 801e6da:	f000 fc61 	bl	801efa0 <__multiply>
 801e6de:	4649      	mov	r1, r9
 801e6e0:	9004      	str	r0, [sp, #16]
 801e6e2:	4658      	mov	r0, fp
 801e6e4:	f000 fb48 	bl	801ed78 <_Bfree>
 801e6e8:	9b04      	ldr	r3, [sp, #16]
 801e6ea:	4699      	mov	r9, r3
 801e6ec:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801e6ee:	1b1a      	subs	r2, r3, r4
 801e6f0:	d004      	beq.n	801e6fc <_dtoa_r+0x78c>
 801e6f2:	4649      	mov	r1, r9
 801e6f4:	4658      	mov	r0, fp
 801e6f6:	f000 fcfd 	bl	801f0f4 <__pow5mult>
 801e6fa:	4681      	mov	r9, r0
 801e6fc:	2101      	movs	r1, #1
 801e6fe:	4658      	mov	r0, fp
 801e700:	f000 fc38 	bl	801ef74 <__i2b>
 801e704:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801e706:	4604      	mov	r4, r0
 801e708:	2b00      	cmp	r3, #0
 801e70a:	f000 81cf 	beq.w	801eaac <_dtoa_r+0xb3c>
 801e70e:	461a      	mov	r2, r3
 801e710:	4601      	mov	r1, r0
 801e712:	4658      	mov	r0, fp
 801e714:	f000 fcee 	bl	801f0f4 <__pow5mult>
 801e718:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801e71a:	2b01      	cmp	r3, #1
 801e71c:	4604      	mov	r4, r0
 801e71e:	f300 8095 	bgt.w	801e84c <_dtoa_r+0x8dc>
 801e722:	9b02      	ldr	r3, [sp, #8]
 801e724:	2b00      	cmp	r3, #0
 801e726:	f040 8087 	bne.w	801e838 <_dtoa_r+0x8c8>
 801e72a:	9b03      	ldr	r3, [sp, #12]
 801e72c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801e730:	2b00      	cmp	r3, #0
 801e732:	f040 8089 	bne.w	801e848 <_dtoa_r+0x8d8>
 801e736:	9b03      	ldr	r3, [sp, #12]
 801e738:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 801e73c:	0d1b      	lsrs	r3, r3, #20
 801e73e:	051b      	lsls	r3, r3, #20
 801e740:	b12b      	cbz	r3, 801e74e <_dtoa_r+0x7de>
 801e742:	9b08      	ldr	r3, [sp, #32]
 801e744:	3301      	adds	r3, #1
 801e746:	9308      	str	r3, [sp, #32]
 801e748:	f108 0801 	add.w	r8, r8, #1
 801e74c:	2301      	movs	r3, #1
 801e74e:	930a      	str	r3, [sp, #40]	@ 0x28
 801e750:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801e752:	2b00      	cmp	r3, #0
 801e754:	f000 81b0 	beq.w	801eab8 <_dtoa_r+0xb48>
 801e758:	6923      	ldr	r3, [r4, #16]
 801e75a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 801e75e:	6918      	ldr	r0, [r3, #16]
 801e760:	f000 fbbc 	bl	801eedc <__hi0bits>
 801e764:	f1c0 0020 	rsb	r0, r0, #32
 801e768:	9b08      	ldr	r3, [sp, #32]
 801e76a:	4418      	add	r0, r3
 801e76c:	f010 001f 	ands.w	r0, r0, #31
 801e770:	d077      	beq.n	801e862 <_dtoa_r+0x8f2>
 801e772:	f1c0 0320 	rsb	r3, r0, #32
 801e776:	2b04      	cmp	r3, #4
 801e778:	dd6b      	ble.n	801e852 <_dtoa_r+0x8e2>
 801e77a:	9b08      	ldr	r3, [sp, #32]
 801e77c:	f1c0 001c 	rsb	r0, r0, #28
 801e780:	4403      	add	r3, r0
 801e782:	4480      	add	r8, r0
 801e784:	4406      	add	r6, r0
 801e786:	9308      	str	r3, [sp, #32]
 801e788:	f1b8 0f00 	cmp.w	r8, #0
 801e78c:	dd05      	ble.n	801e79a <_dtoa_r+0x82a>
 801e78e:	4649      	mov	r1, r9
 801e790:	4642      	mov	r2, r8
 801e792:	4658      	mov	r0, fp
 801e794:	f000 fd08 	bl	801f1a8 <__lshift>
 801e798:	4681      	mov	r9, r0
 801e79a:	9b08      	ldr	r3, [sp, #32]
 801e79c:	2b00      	cmp	r3, #0
 801e79e:	dd05      	ble.n	801e7ac <_dtoa_r+0x83c>
 801e7a0:	4621      	mov	r1, r4
 801e7a2:	461a      	mov	r2, r3
 801e7a4:	4658      	mov	r0, fp
 801e7a6:	f000 fcff 	bl	801f1a8 <__lshift>
 801e7aa:	4604      	mov	r4, r0
 801e7ac:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801e7ae:	2b00      	cmp	r3, #0
 801e7b0:	d059      	beq.n	801e866 <_dtoa_r+0x8f6>
 801e7b2:	4621      	mov	r1, r4
 801e7b4:	4648      	mov	r0, r9
 801e7b6:	f000 fd63 	bl	801f280 <__mcmp>
 801e7ba:	2800      	cmp	r0, #0
 801e7bc:	da53      	bge.n	801e866 <_dtoa_r+0x8f6>
 801e7be:	1e7b      	subs	r3, r7, #1
 801e7c0:	9304      	str	r3, [sp, #16]
 801e7c2:	4649      	mov	r1, r9
 801e7c4:	2300      	movs	r3, #0
 801e7c6:	220a      	movs	r2, #10
 801e7c8:	4658      	mov	r0, fp
 801e7ca:	f000 faf7 	bl	801edbc <__multadd>
 801e7ce:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801e7d0:	4681      	mov	r9, r0
 801e7d2:	2b00      	cmp	r3, #0
 801e7d4:	f000 8172 	beq.w	801eabc <_dtoa_r+0xb4c>
 801e7d8:	2300      	movs	r3, #0
 801e7da:	4629      	mov	r1, r5
 801e7dc:	220a      	movs	r2, #10
 801e7de:	4658      	mov	r0, fp
 801e7e0:	f000 faec 	bl	801edbc <__multadd>
 801e7e4:	9b00      	ldr	r3, [sp, #0]
 801e7e6:	2b00      	cmp	r3, #0
 801e7e8:	4605      	mov	r5, r0
 801e7ea:	dc67      	bgt.n	801e8bc <_dtoa_r+0x94c>
 801e7ec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801e7ee:	2b02      	cmp	r3, #2
 801e7f0:	dc41      	bgt.n	801e876 <_dtoa_r+0x906>
 801e7f2:	e063      	b.n	801e8bc <_dtoa_r+0x94c>
 801e7f4:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801e7f6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 801e7fa:	e746      	b.n	801e68a <_dtoa_r+0x71a>
 801e7fc:	9b07      	ldr	r3, [sp, #28]
 801e7fe:	1e5c      	subs	r4, r3, #1
 801e800:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801e802:	42a3      	cmp	r3, r4
 801e804:	bfbf      	itttt	lt
 801e806:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 801e808:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 801e80a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 801e80c:	1ae3      	sublt	r3, r4, r3
 801e80e:	bfb4      	ite	lt
 801e810:	18d2      	addlt	r2, r2, r3
 801e812:	1b1c      	subge	r4, r3, r4
 801e814:	9b07      	ldr	r3, [sp, #28]
 801e816:	bfbc      	itt	lt
 801e818:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 801e81a:	2400      	movlt	r4, #0
 801e81c:	2b00      	cmp	r3, #0
 801e81e:	bfb5      	itete	lt
 801e820:	eba8 0603 	sublt.w	r6, r8, r3
 801e824:	9b07      	ldrge	r3, [sp, #28]
 801e826:	2300      	movlt	r3, #0
 801e828:	4646      	movge	r6, r8
 801e82a:	e730      	b.n	801e68e <_dtoa_r+0x71e>
 801e82c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 801e82e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 801e830:	4646      	mov	r6, r8
 801e832:	e735      	b.n	801e6a0 <_dtoa_r+0x730>
 801e834:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801e836:	e75c      	b.n	801e6f2 <_dtoa_r+0x782>
 801e838:	2300      	movs	r3, #0
 801e83a:	e788      	b.n	801e74e <_dtoa_r+0x7de>
 801e83c:	3fe00000 	.word	0x3fe00000
 801e840:	40240000 	.word	0x40240000
 801e844:	40140000 	.word	0x40140000
 801e848:	9b02      	ldr	r3, [sp, #8]
 801e84a:	e780      	b.n	801e74e <_dtoa_r+0x7de>
 801e84c:	2300      	movs	r3, #0
 801e84e:	930a      	str	r3, [sp, #40]	@ 0x28
 801e850:	e782      	b.n	801e758 <_dtoa_r+0x7e8>
 801e852:	d099      	beq.n	801e788 <_dtoa_r+0x818>
 801e854:	9a08      	ldr	r2, [sp, #32]
 801e856:	331c      	adds	r3, #28
 801e858:	441a      	add	r2, r3
 801e85a:	4498      	add	r8, r3
 801e85c:	441e      	add	r6, r3
 801e85e:	9208      	str	r2, [sp, #32]
 801e860:	e792      	b.n	801e788 <_dtoa_r+0x818>
 801e862:	4603      	mov	r3, r0
 801e864:	e7f6      	b.n	801e854 <_dtoa_r+0x8e4>
 801e866:	9b07      	ldr	r3, [sp, #28]
 801e868:	9704      	str	r7, [sp, #16]
 801e86a:	2b00      	cmp	r3, #0
 801e86c:	dc20      	bgt.n	801e8b0 <_dtoa_r+0x940>
 801e86e:	9300      	str	r3, [sp, #0]
 801e870:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801e872:	2b02      	cmp	r3, #2
 801e874:	dd1e      	ble.n	801e8b4 <_dtoa_r+0x944>
 801e876:	9b00      	ldr	r3, [sp, #0]
 801e878:	2b00      	cmp	r3, #0
 801e87a:	f47f aec0 	bne.w	801e5fe <_dtoa_r+0x68e>
 801e87e:	4621      	mov	r1, r4
 801e880:	2205      	movs	r2, #5
 801e882:	4658      	mov	r0, fp
 801e884:	f000 fa9a 	bl	801edbc <__multadd>
 801e888:	4601      	mov	r1, r0
 801e88a:	4604      	mov	r4, r0
 801e88c:	4648      	mov	r0, r9
 801e88e:	f000 fcf7 	bl	801f280 <__mcmp>
 801e892:	2800      	cmp	r0, #0
 801e894:	f77f aeb3 	ble.w	801e5fe <_dtoa_r+0x68e>
 801e898:	4656      	mov	r6, sl
 801e89a:	2331      	movs	r3, #49	@ 0x31
 801e89c:	f806 3b01 	strb.w	r3, [r6], #1
 801e8a0:	9b04      	ldr	r3, [sp, #16]
 801e8a2:	3301      	adds	r3, #1
 801e8a4:	9304      	str	r3, [sp, #16]
 801e8a6:	e6ae      	b.n	801e606 <_dtoa_r+0x696>
 801e8a8:	9c07      	ldr	r4, [sp, #28]
 801e8aa:	9704      	str	r7, [sp, #16]
 801e8ac:	4625      	mov	r5, r4
 801e8ae:	e7f3      	b.n	801e898 <_dtoa_r+0x928>
 801e8b0:	9b07      	ldr	r3, [sp, #28]
 801e8b2:	9300      	str	r3, [sp, #0]
 801e8b4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801e8b6:	2b00      	cmp	r3, #0
 801e8b8:	f000 8104 	beq.w	801eac4 <_dtoa_r+0xb54>
 801e8bc:	2e00      	cmp	r6, #0
 801e8be:	dd05      	ble.n	801e8cc <_dtoa_r+0x95c>
 801e8c0:	4629      	mov	r1, r5
 801e8c2:	4632      	mov	r2, r6
 801e8c4:	4658      	mov	r0, fp
 801e8c6:	f000 fc6f 	bl	801f1a8 <__lshift>
 801e8ca:	4605      	mov	r5, r0
 801e8cc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801e8ce:	2b00      	cmp	r3, #0
 801e8d0:	d05a      	beq.n	801e988 <_dtoa_r+0xa18>
 801e8d2:	6869      	ldr	r1, [r5, #4]
 801e8d4:	4658      	mov	r0, fp
 801e8d6:	f000 fa0f 	bl	801ecf8 <_Balloc>
 801e8da:	4606      	mov	r6, r0
 801e8dc:	b928      	cbnz	r0, 801e8ea <_dtoa_r+0x97a>
 801e8de:	4b84      	ldr	r3, [pc, #528]	@ (801eaf0 <_dtoa_r+0xb80>)
 801e8e0:	4602      	mov	r2, r0
 801e8e2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 801e8e6:	f7ff bb5a 	b.w	801df9e <_dtoa_r+0x2e>
 801e8ea:	692a      	ldr	r2, [r5, #16]
 801e8ec:	3202      	adds	r2, #2
 801e8ee:	0092      	lsls	r2, r2, #2
 801e8f0:	f105 010c 	add.w	r1, r5, #12
 801e8f4:	300c      	adds	r0, #12
 801e8f6:	f7ff fa06 	bl	801dd06 <memcpy>
 801e8fa:	2201      	movs	r2, #1
 801e8fc:	4631      	mov	r1, r6
 801e8fe:	4658      	mov	r0, fp
 801e900:	f000 fc52 	bl	801f1a8 <__lshift>
 801e904:	f10a 0301 	add.w	r3, sl, #1
 801e908:	9307      	str	r3, [sp, #28]
 801e90a:	9b00      	ldr	r3, [sp, #0]
 801e90c:	4453      	add	r3, sl
 801e90e:	930b      	str	r3, [sp, #44]	@ 0x2c
 801e910:	9b02      	ldr	r3, [sp, #8]
 801e912:	f003 0301 	and.w	r3, r3, #1
 801e916:	462f      	mov	r7, r5
 801e918:	930a      	str	r3, [sp, #40]	@ 0x28
 801e91a:	4605      	mov	r5, r0
 801e91c:	9b07      	ldr	r3, [sp, #28]
 801e91e:	4621      	mov	r1, r4
 801e920:	3b01      	subs	r3, #1
 801e922:	4648      	mov	r0, r9
 801e924:	9300      	str	r3, [sp, #0]
 801e926:	f7ff fa99 	bl	801de5c <quorem>
 801e92a:	4639      	mov	r1, r7
 801e92c:	9002      	str	r0, [sp, #8]
 801e92e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 801e932:	4648      	mov	r0, r9
 801e934:	f000 fca4 	bl	801f280 <__mcmp>
 801e938:	462a      	mov	r2, r5
 801e93a:	9008      	str	r0, [sp, #32]
 801e93c:	4621      	mov	r1, r4
 801e93e:	4658      	mov	r0, fp
 801e940:	f000 fcba 	bl	801f2b8 <__mdiff>
 801e944:	68c2      	ldr	r2, [r0, #12]
 801e946:	4606      	mov	r6, r0
 801e948:	bb02      	cbnz	r2, 801e98c <_dtoa_r+0xa1c>
 801e94a:	4601      	mov	r1, r0
 801e94c:	4648      	mov	r0, r9
 801e94e:	f000 fc97 	bl	801f280 <__mcmp>
 801e952:	4602      	mov	r2, r0
 801e954:	4631      	mov	r1, r6
 801e956:	4658      	mov	r0, fp
 801e958:	920e      	str	r2, [sp, #56]	@ 0x38
 801e95a:	f000 fa0d 	bl	801ed78 <_Bfree>
 801e95e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801e960:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801e962:	9e07      	ldr	r6, [sp, #28]
 801e964:	ea43 0102 	orr.w	r1, r3, r2
 801e968:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801e96a:	4319      	orrs	r1, r3
 801e96c:	d110      	bne.n	801e990 <_dtoa_r+0xa20>
 801e96e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 801e972:	d029      	beq.n	801e9c8 <_dtoa_r+0xa58>
 801e974:	9b08      	ldr	r3, [sp, #32]
 801e976:	2b00      	cmp	r3, #0
 801e978:	dd02      	ble.n	801e980 <_dtoa_r+0xa10>
 801e97a:	9b02      	ldr	r3, [sp, #8]
 801e97c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 801e980:	9b00      	ldr	r3, [sp, #0]
 801e982:	f883 8000 	strb.w	r8, [r3]
 801e986:	e63f      	b.n	801e608 <_dtoa_r+0x698>
 801e988:	4628      	mov	r0, r5
 801e98a:	e7bb      	b.n	801e904 <_dtoa_r+0x994>
 801e98c:	2201      	movs	r2, #1
 801e98e:	e7e1      	b.n	801e954 <_dtoa_r+0x9e4>
 801e990:	9b08      	ldr	r3, [sp, #32]
 801e992:	2b00      	cmp	r3, #0
 801e994:	db04      	blt.n	801e9a0 <_dtoa_r+0xa30>
 801e996:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801e998:	430b      	orrs	r3, r1
 801e99a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801e99c:	430b      	orrs	r3, r1
 801e99e:	d120      	bne.n	801e9e2 <_dtoa_r+0xa72>
 801e9a0:	2a00      	cmp	r2, #0
 801e9a2:	dded      	ble.n	801e980 <_dtoa_r+0xa10>
 801e9a4:	4649      	mov	r1, r9
 801e9a6:	2201      	movs	r2, #1
 801e9a8:	4658      	mov	r0, fp
 801e9aa:	f000 fbfd 	bl	801f1a8 <__lshift>
 801e9ae:	4621      	mov	r1, r4
 801e9b0:	4681      	mov	r9, r0
 801e9b2:	f000 fc65 	bl	801f280 <__mcmp>
 801e9b6:	2800      	cmp	r0, #0
 801e9b8:	dc03      	bgt.n	801e9c2 <_dtoa_r+0xa52>
 801e9ba:	d1e1      	bne.n	801e980 <_dtoa_r+0xa10>
 801e9bc:	f018 0f01 	tst.w	r8, #1
 801e9c0:	d0de      	beq.n	801e980 <_dtoa_r+0xa10>
 801e9c2:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 801e9c6:	d1d8      	bne.n	801e97a <_dtoa_r+0xa0a>
 801e9c8:	9a00      	ldr	r2, [sp, #0]
 801e9ca:	2339      	movs	r3, #57	@ 0x39
 801e9cc:	7013      	strb	r3, [r2, #0]
 801e9ce:	4633      	mov	r3, r6
 801e9d0:	461e      	mov	r6, r3
 801e9d2:	3b01      	subs	r3, #1
 801e9d4:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 801e9d8:	2a39      	cmp	r2, #57	@ 0x39
 801e9da:	d052      	beq.n	801ea82 <_dtoa_r+0xb12>
 801e9dc:	3201      	adds	r2, #1
 801e9de:	701a      	strb	r2, [r3, #0]
 801e9e0:	e612      	b.n	801e608 <_dtoa_r+0x698>
 801e9e2:	2a00      	cmp	r2, #0
 801e9e4:	dd07      	ble.n	801e9f6 <_dtoa_r+0xa86>
 801e9e6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 801e9ea:	d0ed      	beq.n	801e9c8 <_dtoa_r+0xa58>
 801e9ec:	9a00      	ldr	r2, [sp, #0]
 801e9ee:	f108 0301 	add.w	r3, r8, #1
 801e9f2:	7013      	strb	r3, [r2, #0]
 801e9f4:	e608      	b.n	801e608 <_dtoa_r+0x698>
 801e9f6:	9b07      	ldr	r3, [sp, #28]
 801e9f8:	9a07      	ldr	r2, [sp, #28]
 801e9fa:	f803 8c01 	strb.w	r8, [r3, #-1]
 801e9fe:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801ea00:	4293      	cmp	r3, r2
 801ea02:	d028      	beq.n	801ea56 <_dtoa_r+0xae6>
 801ea04:	4649      	mov	r1, r9
 801ea06:	2300      	movs	r3, #0
 801ea08:	220a      	movs	r2, #10
 801ea0a:	4658      	mov	r0, fp
 801ea0c:	f000 f9d6 	bl	801edbc <__multadd>
 801ea10:	42af      	cmp	r7, r5
 801ea12:	4681      	mov	r9, r0
 801ea14:	f04f 0300 	mov.w	r3, #0
 801ea18:	f04f 020a 	mov.w	r2, #10
 801ea1c:	4639      	mov	r1, r7
 801ea1e:	4658      	mov	r0, fp
 801ea20:	d107      	bne.n	801ea32 <_dtoa_r+0xac2>
 801ea22:	f000 f9cb 	bl	801edbc <__multadd>
 801ea26:	4607      	mov	r7, r0
 801ea28:	4605      	mov	r5, r0
 801ea2a:	9b07      	ldr	r3, [sp, #28]
 801ea2c:	3301      	adds	r3, #1
 801ea2e:	9307      	str	r3, [sp, #28]
 801ea30:	e774      	b.n	801e91c <_dtoa_r+0x9ac>
 801ea32:	f000 f9c3 	bl	801edbc <__multadd>
 801ea36:	4629      	mov	r1, r5
 801ea38:	4607      	mov	r7, r0
 801ea3a:	2300      	movs	r3, #0
 801ea3c:	220a      	movs	r2, #10
 801ea3e:	4658      	mov	r0, fp
 801ea40:	f000 f9bc 	bl	801edbc <__multadd>
 801ea44:	4605      	mov	r5, r0
 801ea46:	e7f0      	b.n	801ea2a <_dtoa_r+0xaba>
 801ea48:	9b00      	ldr	r3, [sp, #0]
 801ea4a:	2b00      	cmp	r3, #0
 801ea4c:	bfcc      	ite	gt
 801ea4e:	461e      	movgt	r6, r3
 801ea50:	2601      	movle	r6, #1
 801ea52:	4456      	add	r6, sl
 801ea54:	2700      	movs	r7, #0
 801ea56:	4649      	mov	r1, r9
 801ea58:	2201      	movs	r2, #1
 801ea5a:	4658      	mov	r0, fp
 801ea5c:	f000 fba4 	bl	801f1a8 <__lshift>
 801ea60:	4621      	mov	r1, r4
 801ea62:	4681      	mov	r9, r0
 801ea64:	f000 fc0c 	bl	801f280 <__mcmp>
 801ea68:	2800      	cmp	r0, #0
 801ea6a:	dcb0      	bgt.n	801e9ce <_dtoa_r+0xa5e>
 801ea6c:	d102      	bne.n	801ea74 <_dtoa_r+0xb04>
 801ea6e:	f018 0f01 	tst.w	r8, #1
 801ea72:	d1ac      	bne.n	801e9ce <_dtoa_r+0xa5e>
 801ea74:	4633      	mov	r3, r6
 801ea76:	461e      	mov	r6, r3
 801ea78:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801ea7c:	2a30      	cmp	r2, #48	@ 0x30
 801ea7e:	d0fa      	beq.n	801ea76 <_dtoa_r+0xb06>
 801ea80:	e5c2      	b.n	801e608 <_dtoa_r+0x698>
 801ea82:	459a      	cmp	sl, r3
 801ea84:	d1a4      	bne.n	801e9d0 <_dtoa_r+0xa60>
 801ea86:	9b04      	ldr	r3, [sp, #16]
 801ea88:	3301      	adds	r3, #1
 801ea8a:	9304      	str	r3, [sp, #16]
 801ea8c:	2331      	movs	r3, #49	@ 0x31
 801ea8e:	f88a 3000 	strb.w	r3, [sl]
 801ea92:	e5b9      	b.n	801e608 <_dtoa_r+0x698>
 801ea94:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801ea96:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 801eaf4 <_dtoa_r+0xb84>
 801ea9a:	b11b      	cbz	r3, 801eaa4 <_dtoa_r+0xb34>
 801ea9c:	f10a 0308 	add.w	r3, sl, #8
 801eaa0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 801eaa2:	6013      	str	r3, [r2, #0]
 801eaa4:	4650      	mov	r0, sl
 801eaa6:	b019      	add	sp, #100	@ 0x64
 801eaa8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801eaac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801eaae:	2b01      	cmp	r3, #1
 801eab0:	f77f ae37 	ble.w	801e722 <_dtoa_r+0x7b2>
 801eab4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801eab6:	930a      	str	r3, [sp, #40]	@ 0x28
 801eab8:	2001      	movs	r0, #1
 801eaba:	e655      	b.n	801e768 <_dtoa_r+0x7f8>
 801eabc:	9b00      	ldr	r3, [sp, #0]
 801eabe:	2b00      	cmp	r3, #0
 801eac0:	f77f aed6 	ble.w	801e870 <_dtoa_r+0x900>
 801eac4:	4656      	mov	r6, sl
 801eac6:	4621      	mov	r1, r4
 801eac8:	4648      	mov	r0, r9
 801eaca:	f7ff f9c7 	bl	801de5c <quorem>
 801eace:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 801ead2:	f806 8b01 	strb.w	r8, [r6], #1
 801ead6:	9b00      	ldr	r3, [sp, #0]
 801ead8:	eba6 020a 	sub.w	r2, r6, sl
 801eadc:	4293      	cmp	r3, r2
 801eade:	ddb3      	ble.n	801ea48 <_dtoa_r+0xad8>
 801eae0:	4649      	mov	r1, r9
 801eae2:	2300      	movs	r3, #0
 801eae4:	220a      	movs	r2, #10
 801eae6:	4658      	mov	r0, fp
 801eae8:	f000 f968 	bl	801edbc <__multadd>
 801eaec:	4681      	mov	r9, r0
 801eaee:	e7ea      	b.n	801eac6 <_dtoa_r+0xb56>
 801eaf0:	080220a5 	.word	0x080220a5
 801eaf4:	08022029 	.word	0x08022029

0801eaf8 <_free_r>:
 801eaf8:	b538      	push	{r3, r4, r5, lr}
 801eafa:	4605      	mov	r5, r0
 801eafc:	2900      	cmp	r1, #0
 801eafe:	d041      	beq.n	801eb84 <_free_r+0x8c>
 801eb00:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801eb04:	1f0c      	subs	r4, r1, #4
 801eb06:	2b00      	cmp	r3, #0
 801eb08:	bfb8      	it	lt
 801eb0a:	18e4      	addlt	r4, r4, r3
 801eb0c:	f000 f8e8 	bl	801ece0 <__malloc_lock>
 801eb10:	4a1d      	ldr	r2, [pc, #116]	@ (801eb88 <_free_r+0x90>)
 801eb12:	6813      	ldr	r3, [r2, #0]
 801eb14:	b933      	cbnz	r3, 801eb24 <_free_r+0x2c>
 801eb16:	6063      	str	r3, [r4, #4]
 801eb18:	6014      	str	r4, [r2, #0]
 801eb1a:	4628      	mov	r0, r5
 801eb1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801eb20:	f000 b8e4 	b.w	801ecec <__malloc_unlock>
 801eb24:	42a3      	cmp	r3, r4
 801eb26:	d908      	bls.n	801eb3a <_free_r+0x42>
 801eb28:	6820      	ldr	r0, [r4, #0]
 801eb2a:	1821      	adds	r1, r4, r0
 801eb2c:	428b      	cmp	r3, r1
 801eb2e:	bf01      	itttt	eq
 801eb30:	6819      	ldreq	r1, [r3, #0]
 801eb32:	685b      	ldreq	r3, [r3, #4]
 801eb34:	1809      	addeq	r1, r1, r0
 801eb36:	6021      	streq	r1, [r4, #0]
 801eb38:	e7ed      	b.n	801eb16 <_free_r+0x1e>
 801eb3a:	461a      	mov	r2, r3
 801eb3c:	685b      	ldr	r3, [r3, #4]
 801eb3e:	b10b      	cbz	r3, 801eb44 <_free_r+0x4c>
 801eb40:	42a3      	cmp	r3, r4
 801eb42:	d9fa      	bls.n	801eb3a <_free_r+0x42>
 801eb44:	6811      	ldr	r1, [r2, #0]
 801eb46:	1850      	adds	r0, r2, r1
 801eb48:	42a0      	cmp	r0, r4
 801eb4a:	d10b      	bne.n	801eb64 <_free_r+0x6c>
 801eb4c:	6820      	ldr	r0, [r4, #0]
 801eb4e:	4401      	add	r1, r0
 801eb50:	1850      	adds	r0, r2, r1
 801eb52:	4283      	cmp	r3, r0
 801eb54:	6011      	str	r1, [r2, #0]
 801eb56:	d1e0      	bne.n	801eb1a <_free_r+0x22>
 801eb58:	6818      	ldr	r0, [r3, #0]
 801eb5a:	685b      	ldr	r3, [r3, #4]
 801eb5c:	6053      	str	r3, [r2, #4]
 801eb5e:	4408      	add	r0, r1
 801eb60:	6010      	str	r0, [r2, #0]
 801eb62:	e7da      	b.n	801eb1a <_free_r+0x22>
 801eb64:	d902      	bls.n	801eb6c <_free_r+0x74>
 801eb66:	230c      	movs	r3, #12
 801eb68:	602b      	str	r3, [r5, #0]
 801eb6a:	e7d6      	b.n	801eb1a <_free_r+0x22>
 801eb6c:	6820      	ldr	r0, [r4, #0]
 801eb6e:	1821      	adds	r1, r4, r0
 801eb70:	428b      	cmp	r3, r1
 801eb72:	bf04      	itt	eq
 801eb74:	6819      	ldreq	r1, [r3, #0]
 801eb76:	685b      	ldreq	r3, [r3, #4]
 801eb78:	6063      	str	r3, [r4, #4]
 801eb7a:	bf04      	itt	eq
 801eb7c:	1809      	addeq	r1, r1, r0
 801eb7e:	6021      	streq	r1, [r4, #0]
 801eb80:	6054      	str	r4, [r2, #4]
 801eb82:	e7ca      	b.n	801eb1a <_free_r+0x22>
 801eb84:	bd38      	pop	{r3, r4, r5, pc}
 801eb86:	bf00      	nop
 801eb88:	20006148 	.word	0x20006148

0801eb8c <malloc>:
 801eb8c:	4b02      	ldr	r3, [pc, #8]	@ (801eb98 <malloc+0xc>)
 801eb8e:	4601      	mov	r1, r0
 801eb90:	6818      	ldr	r0, [r3, #0]
 801eb92:	f000 b825 	b.w	801ebe0 <_malloc_r>
 801eb96:	bf00      	nop
 801eb98:	2000010c 	.word	0x2000010c

0801eb9c <sbrk_aligned>:
 801eb9c:	b570      	push	{r4, r5, r6, lr}
 801eb9e:	4e0f      	ldr	r6, [pc, #60]	@ (801ebdc <sbrk_aligned+0x40>)
 801eba0:	460c      	mov	r4, r1
 801eba2:	6831      	ldr	r1, [r6, #0]
 801eba4:	4605      	mov	r5, r0
 801eba6:	b911      	cbnz	r1, 801ebae <sbrk_aligned+0x12>
 801eba8:	f001 fdf2 	bl	8020790 <_sbrk_r>
 801ebac:	6030      	str	r0, [r6, #0]
 801ebae:	4621      	mov	r1, r4
 801ebb0:	4628      	mov	r0, r5
 801ebb2:	f001 fded 	bl	8020790 <_sbrk_r>
 801ebb6:	1c43      	adds	r3, r0, #1
 801ebb8:	d103      	bne.n	801ebc2 <sbrk_aligned+0x26>
 801ebba:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 801ebbe:	4620      	mov	r0, r4
 801ebc0:	bd70      	pop	{r4, r5, r6, pc}
 801ebc2:	1cc4      	adds	r4, r0, #3
 801ebc4:	f024 0403 	bic.w	r4, r4, #3
 801ebc8:	42a0      	cmp	r0, r4
 801ebca:	d0f8      	beq.n	801ebbe <sbrk_aligned+0x22>
 801ebcc:	1a21      	subs	r1, r4, r0
 801ebce:	4628      	mov	r0, r5
 801ebd0:	f001 fdde 	bl	8020790 <_sbrk_r>
 801ebd4:	3001      	adds	r0, #1
 801ebd6:	d1f2      	bne.n	801ebbe <sbrk_aligned+0x22>
 801ebd8:	e7ef      	b.n	801ebba <sbrk_aligned+0x1e>
 801ebda:	bf00      	nop
 801ebdc:	20006144 	.word	0x20006144

0801ebe0 <_malloc_r>:
 801ebe0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801ebe4:	1ccd      	adds	r5, r1, #3
 801ebe6:	f025 0503 	bic.w	r5, r5, #3
 801ebea:	3508      	adds	r5, #8
 801ebec:	2d0c      	cmp	r5, #12
 801ebee:	bf38      	it	cc
 801ebf0:	250c      	movcc	r5, #12
 801ebf2:	2d00      	cmp	r5, #0
 801ebf4:	4606      	mov	r6, r0
 801ebf6:	db01      	blt.n	801ebfc <_malloc_r+0x1c>
 801ebf8:	42a9      	cmp	r1, r5
 801ebfa:	d904      	bls.n	801ec06 <_malloc_r+0x26>
 801ebfc:	230c      	movs	r3, #12
 801ebfe:	6033      	str	r3, [r6, #0]
 801ec00:	2000      	movs	r0, #0
 801ec02:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801ec06:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 801ecdc <_malloc_r+0xfc>
 801ec0a:	f000 f869 	bl	801ece0 <__malloc_lock>
 801ec0e:	f8d8 3000 	ldr.w	r3, [r8]
 801ec12:	461c      	mov	r4, r3
 801ec14:	bb44      	cbnz	r4, 801ec68 <_malloc_r+0x88>
 801ec16:	4629      	mov	r1, r5
 801ec18:	4630      	mov	r0, r6
 801ec1a:	f7ff ffbf 	bl	801eb9c <sbrk_aligned>
 801ec1e:	1c43      	adds	r3, r0, #1
 801ec20:	4604      	mov	r4, r0
 801ec22:	d158      	bne.n	801ecd6 <_malloc_r+0xf6>
 801ec24:	f8d8 4000 	ldr.w	r4, [r8]
 801ec28:	4627      	mov	r7, r4
 801ec2a:	2f00      	cmp	r7, #0
 801ec2c:	d143      	bne.n	801ecb6 <_malloc_r+0xd6>
 801ec2e:	2c00      	cmp	r4, #0
 801ec30:	d04b      	beq.n	801ecca <_malloc_r+0xea>
 801ec32:	6823      	ldr	r3, [r4, #0]
 801ec34:	4639      	mov	r1, r7
 801ec36:	4630      	mov	r0, r6
 801ec38:	eb04 0903 	add.w	r9, r4, r3
 801ec3c:	f001 fda8 	bl	8020790 <_sbrk_r>
 801ec40:	4581      	cmp	r9, r0
 801ec42:	d142      	bne.n	801ecca <_malloc_r+0xea>
 801ec44:	6821      	ldr	r1, [r4, #0]
 801ec46:	1a6d      	subs	r5, r5, r1
 801ec48:	4629      	mov	r1, r5
 801ec4a:	4630      	mov	r0, r6
 801ec4c:	f7ff ffa6 	bl	801eb9c <sbrk_aligned>
 801ec50:	3001      	adds	r0, #1
 801ec52:	d03a      	beq.n	801ecca <_malloc_r+0xea>
 801ec54:	6823      	ldr	r3, [r4, #0]
 801ec56:	442b      	add	r3, r5
 801ec58:	6023      	str	r3, [r4, #0]
 801ec5a:	f8d8 3000 	ldr.w	r3, [r8]
 801ec5e:	685a      	ldr	r2, [r3, #4]
 801ec60:	bb62      	cbnz	r2, 801ecbc <_malloc_r+0xdc>
 801ec62:	f8c8 7000 	str.w	r7, [r8]
 801ec66:	e00f      	b.n	801ec88 <_malloc_r+0xa8>
 801ec68:	6822      	ldr	r2, [r4, #0]
 801ec6a:	1b52      	subs	r2, r2, r5
 801ec6c:	d420      	bmi.n	801ecb0 <_malloc_r+0xd0>
 801ec6e:	2a0b      	cmp	r2, #11
 801ec70:	d917      	bls.n	801eca2 <_malloc_r+0xc2>
 801ec72:	1961      	adds	r1, r4, r5
 801ec74:	42a3      	cmp	r3, r4
 801ec76:	6025      	str	r5, [r4, #0]
 801ec78:	bf18      	it	ne
 801ec7a:	6059      	strne	r1, [r3, #4]
 801ec7c:	6863      	ldr	r3, [r4, #4]
 801ec7e:	bf08      	it	eq
 801ec80:	f8c8 1000 	streq.w	r1, [r8]
 801ec84:	5162      	str	r2, [r4, r5]
 801ec86:	604b      	str	r3, [r1, #4]
 801ec88:	4630      	mov	r0, r6
 801ec8a:	f000 f82f 	bl	801ecec <__malloc_unlock>
 801ec8e:	f104 000b 	add.w	r0, r4, #11
 801ec92:	1d23      	adds	r3, r4, #4
 801ec94:	f020 0007 	bic.w	r0, r0, #7
 801ec98:	1ac2      	subs	r2, r0, r3
 801ec9a:	bf1c      	itt	ne
 801ec9c:	1a1b      	subne	r3, r3, r0
 801ec9e:	50a3      	strne	r3, [r4, r2]
 801eca0:	e7af      	b.n	801ec02 <_malloc_r+0x22>
 801eca2:	6862      	ldr	r2, [r4, #4]
 801eca4:	42a3      	cmp	r3, r4
 801eca6:	bf0c      	ite	eq
 801eca8:	f8c8 2000 	streq.w	r2, [r8]
 801ecac:	605a      	strne	r2, [r3, #4]
 801ecae:	e7eb      	b.n	801ec88 <_malloc_r+0xa8>
 801ecb0:	4623      	mov	r3, r4
 801ecb2:	6864      	ldr	r4, [r4, #4]
 801ecb4:	e7ae      	b.n	801ec14 <_malloc_r+0x34>
 801ecb6:	463c      	mov	r4, r7
 801ecb8:	687f      	ldr	r7, [r7, #4]
 801ecba:	e7b6      	b.n	801ec2a <_malloc_r+0x4a>
 801ecbc:	461a      	mov	r2, r3
 801ecbe:	685b      	ldr	r3, [r3, #4]
 801ecc0:	42a3      	cmp	r3, r4
 801ecc2:	d1fb      	bne.n	801ecbc <_malloc_r+0xdc>
 801ecc4:	2300      	movs	r3, #0
 801ecc6:	6053      	str	r3, [r2, #4]
 801ecc8:	e7de      	b.n	801ec88 <_malloc_r+0xa8>
 801ecca:	230c      	movs	r3, #12
 801eccc:	6033      	str	r3, [r6, #0]
 801ecce:	4630      	mov	r0, r6
 801ecd0:	f000 f80c 	bl	801ecec <__malloc_unlock>
 801ecd4:	e794      	b.n	801ec00 <_malloc_r+0x20>
 801ecd6:	6005      	str	r5, [r0, #0]
 801ecd8:	e7d6      	b.n	801ec88 <_malloc_r+0xa8>
 801ecda:	bf00      	nop
 801ecdc:	20006148 	.word	0x20006148

0801ece0 <__malloc_lock>:
 801ece0:	4801      	ldr	r0, [pc, #4]	@ (801ece8 <__malloc_lock+0x8>)
 801ece2:	f7ff b80e 	b.w	801dd02 <__retarget_lock_acquire_recursive>
 801ece6:	bf00      	nop
 801ece8:	20006140 	.word	0x20006140

0801ecec <__malloc_unlock>:
 801ecec:	4801      	ldr	r0, [pc, #4]	@ (801ecf4 <__malloc_unlock+0x8>)
 801ecee:	f7ff b809 	b.w	801dd04 <__retarget_lock_release_recursive>
 801ecf2:	bf00      	nop
 801ecf4:	20006140 	.word	0x20006140

0801ecf8 <_Balloc>:
 801ecf8:	b570      	push	{r4, r5, r6, lr}
 801ecfa:	69c6      	ldr	r6, [r0, #28]
 801ecfc:	4604      	mov	r4, r0
 801ecfe:	460d      	mov	r5, r1
 801ed00:	b976      	cbnz	r6, 801ed20 <_Balloc+0x28>
 801ed02:	2010      	movs	r0, #16
 801ed04:	f7ff ff42 	bl	801eb8c <malloc>
 801ed08:	4602      	mov	r2, r0
 801ed0a:	61e0      	str	r0, [r4, #28]
 801ed0c:	b920      	cbnz	r0, 801ed18 <_Balloc+0x20>
 801ed0e:	4b18      	ldr	r3, [pc, #96]	@ (801ed70 <_Balloc+0x78>)
 801ed10:	4818      	ldr	r0, [pc, #96]	@ (801ed74 <_Balloc+0x7c>)
 801ed12:	216b      	movs	r1, #107	@ 0x6b
 801ed14:	f001 fd54 	bl	80207c0 <__assert_func>
 801ed18:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801ed1c:	6006      	str	r6, [r0, #0]
 801ed1e:	60c6      	str	r6, [r0, #12]
 801ed20:	69e6      	ldr	r6, [r4, #28]
 801ed22:	68f3      	ldr	r3, [r6, #12]
 801ed24:	b183      	cbz	r3, 801ed48 <_Balloc+0x50>
 801ed26:	69e3      	ldr	r3, [r4, #28]
 801ed28:	68db      	ldr	r3, [r3, #12]
 801ed2a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801ed2e:	b9b8      	cbnz	r0, 801ed60 <_Balloc+0x68>
 801ed30:	2101      	movs	r1, #1
 801ed32:	fa01 f605 	lsl.w	r6, r1, r5
 801ed36:	1d72      	adds	r2, r6, #5
 801ed38:	0092      	lsls	r2, r2, #2
 801ed3a:	4620      	mov	r0, r4
 801ed3c:	f001 fd5e 	bl	80207fc <_calloc_r>
 801ed40:	b160      	cbz	r0, 801ed5c <_Balloc+0x64>
 801ed42:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801ed46:	e00e      	b.n	801ed66 <_Balloc+0x6e>
 801ed48:	2221      	movs	r2, #33	@ 0x21
 801ed4a:	2104      	movs	r1, #4
 801ed4c:	4620      	mov	r0, r4
 801ed4e:	f001 fd55 	bl	80207fc <_calloc_r>
 801ed52:	69e3      	ldr	r3, [r4, #28]
 801ed54:	60f0      	str	r0, [r6, #12]
 801ed56:	68db      	ldr	r3, [r3, #12]
 801ed58:	2b00      	cmp	r3, #0
 801ed5a:	d1e4      	bne.n	801ed26 <_Balloc+0x2e>
 801ed5c:	2000      	movs	r0, #0
 801ed5e:	bd70      	pop	{r4, r5, r6, pc}
 801ed60:	6802      	ldr	r2, [r0, #0]
 801ed62:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801ed66:	2300      	movs	r3, #0
 801ed68:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801ed6c:	e7f7      	b.n	801ed5e <_Balloc+0x66>
 801ed6e:	bf00      	nop
 801ed70:	08022036 	.word	0x08022036
 801ed74:	080220b6 	.word	0x080220b6

0801ed78 <_Bfree>:
 801ed78:	b570      	push	{r4, r5, r6, lr}
 801ed7a:	69c6      	ldr	r6, [r0, #28]
 801ed7c:	4605      	mov	r5, r0
 801ed7e:	460c      	mov	r4, r1
 801ed80:	b976      	cbnz	r6, 801eda0 <_Bfree+0x28>
 801ed82:	2010      	movs	r0, #16
 801ed84:	f7ff ff02 	bl	801eb8c <malloc>
 801ed88:	4602      	mov	r2, r0
 801ed8a:	61e8      	str	r0, [r5, #28]
 801ed8c:	b920      	cbnz	r0, 801ed98 <_Bfree+0x20>
 801ed8e:	4b09      	ldr	r3, [pc, #36]	@ (801edb4 <_Bfree+0x3c>)
 801ed90:	4809      	ldr	r0, [pc, #36]	@ (801edb8 <_Bfree+0x40>)
 801ed92:	218f      	movs	r1, #143	@ 0x8f
 801ed94:	f001 fd14 	bl	80207c0 <__assert_func>
 801ed98:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801ed9c:	6006      	str	r6, [r0, #0]
 801ed9e:	60c6      	str	r6, [r0, #12]
 801eda0:	b13c      	cbz	r4, 801edb2 <_Bfree+0x3a>
 801eda2:	69eb      	ldr	r3, [r5, #28]
 801eda4:	6862      	ldr	r2, [r4, #4]
 801eda6:	68db      	ldr	r3, [r3, #12]
 801eda8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801edac:	6021      	str	r1, [r4, #0]
 801edae:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801edb2:	bd70      	pop	{r4, r5, r6, pc}
 801edb4:	08022036 	.word	0x08022036
 801edb8:	080220b6 	.word	0x080220b6

0801edbc <__multadd>:
 801edbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801edc0:	690d      	ldr	r5, [r1, #16]
 801edc2:	4607      	mov	r7, r0
 801edc4:	460c      	mov	r4, r1
 801edc6:	461e      	mov	r6, r3
 801edc8:	f101 0c14 	add.w	ip, r1, #20
 801edcc:	2000      	movs	r0, #0
 801edce:	f8dc 3000 	ldr.w	r3, [ip]
 801edd2:	b299      	uxth	r1, r3
 801edd4:	fb02 6101 	mla	r1, r2, r1, r6
 801edd8:	0c1e      	lsrs	r6, r3, #16
 801edda:	0c0b      	lsrs	r3, r1, #16
 801eddc:	fb02 3306 	mla	r3, r2, r6, r3
 801ede0:	b289      	uxth	r1, r1
 801ede2:	3001      	adds	r0, #1
 801ede4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 801ede8:	4285      	cmp	r5, r0
 801edea:	f84c 1b04 	str.w	r1, [ip], #4
 801edee:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801edf2:	dcec      	bgt.n	801edce <__multadd+0x12>
 801edf4:	b30e      	cbz	r6, 801ee3a <__multadd+0x7e>
 801edf6:	68a3      	ldr	r3, [r4, #8]
 801edf8:	42ab      	cmp	r3, r5
 801edfa:	dc19      	bgt.n	801ee30 <__multadd+0x74>
 801edfc:	6861      	ldr	r1, [r4, #4]
 801edfe:	4638      	mov	r0, r7
 801ee00:	3101      	adds	r1, #1
 801ee02:	f7ff ff79 	bl	801ecf8 <_Balloc>
 801ee06:	4680      	mov	r8, r0
 801ee08:	b928      	cbnz	r0, 801ee16 <__multadd+0x5a>
 801ee0a:	4602      	mov	r2, r0
 801ee0c:	4b0c      	ldr	r3, [pc, #48]	@ (801ee40 <__multadd+0x84>)
 801ee0e:	480d      	ldr	r0, [pc, #52]	@ (801ee44 <__multadd+0x88>)
 801ee10:	21ba      	movs	r1, #186	@ 0xba
 801ee12:	f001 fcd5 	bl	80207c0 <__assert_func>
 801ee16:	6922      	ldr	r2, [r4, #16]
 801ee18:	3202      	adds	r2, #2
 801ee1a:	f104 010c 	add.w	r1, r4, #12
 801ee1e:	0092      	lsls	r2, r2, #2
 801ee20:	300c      	adds	r0, #12
 801ee22:	f7fe ff70 	bl	801dd06 <memcpy>
 801ee26:	4621      	mov	r1, r4
 801ee28:	4638      	mov	r0, r7
 801ee2a:	f7ff ffa5 	bl	801ed78 <_Bfree>
 801ee2e:	4644      	mov	r4, r8
 801ee30:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801ee34:	3501      	adds	r5, #1
 801ee36:	615e      	str	r6, [r3, #20]
 801ee38:	6125      	str	r5, [r4, #16]
 801ee3a:	4620      	mov	r0, r4
 801ee3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801ee40:	080220a5 	.word	0x080220a5
 801ee44:	080220b6 	.word	0x080220b6

0801ee48 <__s2b>:
 801ee48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801ee4c:	460c      	mov	r4, r1
 801ee4e:	4615      	mov	r5, r2
 801ee50:	461f      	mov	r7, r3
 801ee52:	2209      	movs	r2, #9
 801ee54:	3308      	adds	r3, #8
 801ee56:	4606      	mov	r6, r0
 801ee58:	fb93 f3f2 	sdiv	r3, r3, r2
 801ee5c:	2100      	movs	r1, #0
 801ee5e:	2201      	movs	r2, #1
 801ee60:	429a      	cmp	r2, r3
 801ee62:	db09      	blt.n	801ee78 <__s2b+0x30>
 801ee64:	4630      	mov	r0, r6
 801ee66:	f7ff ff47 	bl	801ecf8 <_Balloc>
 801ee6a:	b940      	cbnz	r0, 801ee7e <__s2b+0x36>
 801ee6c:	4602      	mov	r2, r0
 801ee6e:	4b19      	ldr	r3, [pc, #100]	@ (801eed4 <__s2b+0x8c>)
 801ee70:	4819      	ldr	r0, [pc, #100]	@ (801eed8 <__s2b+0x90>)
 801ee72:	21d3      	movs	r1, #211	@ 0xd3
 801ee74:	f001 fca4 	bl	80207c0 <__assert_func>
 801ee78:	0052      	lsls	r2, r2, #1
 801ee7a:	3101      	adds	r1, #1
 801ee7c:	e7f0      	b.n	801ee60 <__s2b+0x18>
 801ee7e:	9b08      	ldr	r3, [sp, #32]
 801ee80:	6143      	str	r3, [r0, #20]
 801ee82:	2d09      	cmp	r5, #9
 801ee84:	f04f 0301 	mov.w	r3, #1
 801ee88:	6103      	str	r3, [r0, #16]
 801ee8a:	dd16      	ble.n	801eeba <__s2b+0x72>
 801ee8c:	f104 0909 	add.w	r9, r4, #9
 801ee90:	46c8      	mov	r8, r9
 801ee92:	442c      	add	r4, r5
 801ee94:	f818 3b01 	ldrb.w	r3, [r8], #1
 801ee98:	4601      	mov	r1, r0
 801ee9a:	3b30      	subs	r3, #48	@ 0x30
 801ee9c:	220a      	movs	r2, #10
 801ee9e:	4630      	mov	r0, r6
 801eea0:	f7ff ff8c 	bl	801edbc <__multadd>
 801eea4:	45a0      	cmp	r8, r4
 801eea6:	d1f5      	bne.n	801ee94 <__s2b+0x4c>
 801eea8:	f1a5 0408 	sub.w	r4, r5, #8
 801eeac:	444c      	add	r4, r9
 801eeae:	1b2d      	subs	r5, r5, r4
 801eeb0:	1963      	adds	r3, r4, r5
 801eeb2:	42bb      	cmp	r3, r7
 801eeb4:	db04      	blt.n	801eec0 <__s2b+0x78>
 801eeb6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801eeba:	340a      	adds	r4, #10
 801eebc:	2509      	movs	r5, #9
 801eebe:	e7f6      	b.n	801eeae <__s2b+0x66>
 801eec0:	f814 3b01 	ldrb.w	r3, [r4], #1
 801eec4:	4601      	mov	r1, r0
 801eec6:	3b30      	subs	r3, #48	@ 0x30
 801eec8:	220a      	movs	r2, #10
 801eeca:	4630      	mov	r0, r6
 801eecc:	f7ff ff76 	bl	801edbc <__multadd>
 801eed0:	e7ee      	b.n	801eeb0 <__s2b+0x68>
 801eed2:	bf00      	nop
 801eed4:	080220a5 	.word	0x080220a5
 801eed8:	080220b6 	.word	0x080220b6

0801eedc <__hi0bits>:
 801eedc:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 801eee0:	4603      	mov	r3, r0
 801eee2:	bf36      	itet	cc
 801eee4:	0403      	lslcc	r3, r0, #16
 801eee6:	2000      	movcs	r0, #0
 801eee8:	2010      	movcc	r0, #16
 801eeea:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 801eeee:	bf3c      	itt	cc
 801eef0:	021b      	lslcc	r3, r3, #8
 801eef2:	3008      	addcc	r0, #8
 801eef4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801eef8:	bf3c      	itt	cc
 801eefa:	011b      	lslcc	r3, r3, #4
 801eefc:	3004      	addcc	r0, #4
 801eefe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801ef02:	bf3c      	itt	cc
 801ef04:	009b      	lslcc	r3, r3, #2
 801ef06:	3002      	addcc	r0, #2
 801ef08:	2b00      	cmp	r3, #0
 801ef0a:	db05      	blt.n	801ef18 <__hi0bits+0x3c>
 801ef0c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 801ef10:	f100 0001 	add.w	r0, r0, #1
 801ef14:	bf08      	it	eq
 801ef16:	2020      	moveq	r0, #32
 801ef18:	4770      	bx	lr

0801ef1a <__lo0bits>:
 801ef1a:	6803      	ldr	r3, [r0, #0]
 801ef1c:	4602      	mov	r2, r0
 801ef1e:	f013 0007 	ands.w	r0, r3, #7
 801ef22:	d00b      	beq.n	801ef3c <__lo0bits+0x22>
 801ef24:	07d9      	lsls	r1, r3, #31
 801ef26:	d421      	bmi.n	801ef6c <__lo0bits+0x52>
 801ef28:	0798      	lsls	r0, r3, #30
 801ef2a:	bf49      	itett	mi
 801ef2c:	085b      	lsrmi	r3, r3, #1
 801ef2e:	089b      	lsrpl	r3, r3, #2
 801ef30:	2001      	movmi	r0, #1
 801ef32:	6013      	strmi	r3, [r2, #0]
 801ef34:	bf5c      	itt	pl
 801ef36:	6013      	strpl	r3, [r2, #0]
 801ef38:	2002      	movpl	r0, #2
 801ef3a:	4770      	bx	lr
 801ef3c:	b299      	uxth	r1, r3
 801ef3e:	b909      	cbnz	r1, 801ef44 <__lo0bits+0x2a>
 801ef40:	0c1b      	lsrs	r3, r3, #16
 801ef42:	2010      	movs	r0, #16
 801ef44:	b2d9      	uxtb	r1, r3
 801ef46:	b909      	cbnz	r1, 801ef4c <__lo0bits+0x32>
 801ef48:	3008      	adds	r0, #8
 801ef4a:	0a1b      	lsrs	r3, r3, #8
 801ef4c:	0719      	lsls	r1, r3, #28
 801ef4e:	bf04      	itt	eq
 801ef50:	091b      	lsreq	r3, r3, #4
 801ef52:	3004      	addeq	r0, #4
 801ef54:	0799      	lsls	r1, r3, #30
 801ef56:	bf04      	itt	eq
 801ef58:	089b      	lsreq	r3, r3, #2
 801ef5a:	3002      	addeq	r0, #2
 801ef5c:	07d9      	lsls	r1, r3, #31
 801ef5e:	d403      	bmi.n	801ef68 <__lo0bits+0x4e>
 801ef60:	085b      	lsrs	r3, r3, #1
 801ef62:	f100 0001 	add.w	r0, r0, #1
 801ef66:	d003      	beq.n	801ef70 <__lo0bits+0x56>
 801ef68:	6013      	str	r3, [r2, #0]
 801ef6a:	4770      	bx	lr
 801ef6c:	2000      	movs	r0, #0
 801ef6e:	4770      	bx	lr
 801ef70:	2020      	movs	r0, #32
 801ef72:	4770      	bx	lr

0801ef74 <__i2b>:
 801ef74:	b510      	push	{r4, lr}
 801ef76:	460c      	mov	r4, r1
 801ef78:	2101      	movs	r1, #1
 801ef7a:	f7ff febd 	bl	801ecf8 <_Balloc>
 801ef7e:	4602      	mov	r2, r0
 801ef80:	b928      	cbnz	r0, 801ef8e <__i2b+0x1a>
 801ef82:	4b05      	ldr	r3, [pc, #20]	@ (801ef98 <__i2b+0x24>)
 801ef84:	4805      	ldr	r0, [pc, #20]	@ (801ef9c <__i2b+0x28>)
 801ef86:	f240 1145 	movw	r1, #325	@ 0x145
 801ef8a:	f001 fc19 	bl	80207c0 <__assert_func>
 801ef8e:	2301      	movs	r3, #1
 801ef90:	6144      	str	r4, [r0, #20]
 801ef92:	6103      	str	r3, [r0, #16]
 801ef94:	bd10      	pop	{r4, pc}
 801ef96:	bf00      	nop
 801ef98:	080220a5 	.word	0x080220a5
 801ef9c:	080220b6 	.word	0x080220b6

0801efa0 <__multiply>:
 801efa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801efa4:	4614      	mov	r4, r2
 801efa6:	690a      	ldr	r2, [r1, #16]
 801efa8:	6923      	ldr	r3, [r4, #16]
 801efaa:	429a      	cmp	r2, r3
 801efac:	bfa8      	it	ge
 801efae:	4623      	movge	r3, r4
 801efb0:	460f      	mov	r7, r1
 801efb2:	bfa4      	itt	ge
 801efb4:	460c      	movge	r4, r1
 801efb6:	461f      	movge	r7, r3
 801efb8:	f8d4 a010 	ldr.w	sl, [r4, #16]
 801efbc:	f8d7 9010 	ldr.w	r9, [r7, #16]
 801efc0:	68a3      	ldr	r3, [r4, #8]
 801efc2:	6861      	ldr	r1, [r4, #4]
 801efc4:	eb0a 0609 	add.w	r6, sl, r9
 801efc8:	42b3      	cmp	r3, r6
 801efca:	b085      	sub	sp, #20
 801efcc:	bfb8      	it	lt
 801efce:	3101      	addlt	r1, #1
 801efd0:	f7ff fe92 	bl	801ecf8 <_Balloc>
 801efd4:	b930      	cbnz	r0, 801efe4 <__multiply+0x44>
 801efd6:	4602      	mov	r2, r0
 801efd8:	4b44      	ldr	r3, [pc, #272]	@ (801f0ec <__multiply+0x14c>)
 801efda:	4845      	ldr	r0, [pc, #276]	@ (801f0f0 <__multiply+0x150>)
 801efdc:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 801efe0:	f001 fbee 	bl	80207c0 <__assert_func>
 801efe4:	f100 0514 	add.w	r5, r0, #20
 801efe8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 801efec:	462b      	mov	r3, r5
 801efee:	2200      	movs	r2, #0
 801eff0:	4543      	cmp	r3, r8
 801eff2:	d321      	bcc.n	801f038 <__multiply+0x98>
 801eff4:	f107 0114 	add.w	r1, r7, #20
 801eff8:	f104 0214 	add.w	r2, r4, #20
 801effc:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 801f000:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 801f004:	9302      	str	r3, [sp, #8]
 801f006:	1b13      	subs	r3, r2, r4
 801f008:	3b15      	subs	r3, #21
 801f00a:	f023 0303 	bic.w	r3, r3, #3
 801f00e:	3304      	adds	r3, #4
 801f010:	f104 0715 	add.w	r7, r4, #21
 801f014:	42ba      	cmp	r2, r7
 801f016:	bf38      	it	cc
 801f018:	2304      	movcc	r3, #4
 801f01a:	9301      	str	r3, [sp, #4]
 801f01c:	9b02      	ldr	r3, [sp, #8]
 801f01e:	9103      	str	r1, [sp, #12]
 801f020:	428b      	cmp	r3, r1
 801f022:	d80c      	bhi.n	801f03e <__multiply+0x9e>
 801f024:	2e00      	cmp	r6, #0
 801f026:	dd03      	ble.n	801f030 <__multiply+0x90>
 801f028:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801f02c:	2b00      	cmp	r3, #0
 801f02e:	d05b      	beq.n	801f0e8 <__multiply+0x148>
 801f030:	6106      	str	r6, [r0, #16]
 801f032:	b005      	add	sp, #20
 801f034:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f038:	f843 2b04 	str.w	r2, [r3], #4
 801f03c:	e7d8      	b.n	801eff0 <__multiply+0x50>
 801f03e:	f8b1 a000 	ldrh.w	sl, [r1]
 801f042:	f1ba 0f00 	cmp.w	sl, #0
 801f046:	d024      	beq.n	801f092 <__multiply+0xf2>
 801f048:	f104 0e14 	add.w	lr, r4, #20
 801f04c:	46a9      	mov	r9, r5
 801f04e:	f04f 0c00 	mov.w	ip, #0
 801f052:	f85e 7b04 	ldr.w	r7, [lr], #4
 801f056:	f8d9 3000 	ldr.w	r3, [r9]
 801f05a:	fa1f fb87 	uxth.w	fp, r7
 801f05e:	b29b      	uxth	r3, r3
 801f060:	fb0a 330b 	mla	r3, sl, fp, r3
 801f064:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 801f068:	f8d9 7000 	ldr.w	r7, [r9]
 801f06c:	4463      	add	r3, ip
 801f06e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 801f072:	fb0a c70b 	mla	r7, sl, fp, ip
 801f076:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 801f07a:	b29b      	uxth	r3, r3
 801f07c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 801f080:	4572      	cmp	r2, lr
 801f082:	f849 3b04 	str.w	r3, [r9], #4
 801f086:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 801f08a:	d8e2      	bhi.n	801f052 <__multiply+0xb2>
 801f08c:	9b01      	ldr	r3, [sp, #4]
 801f08e:	f845 c003 	str.w	ip, [r5, r3]
 801f092:	9b03      	ldr	r3, [sp, #12]
 801f094:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 801f098:	3104      	adds	r1, #4
 801f09a:	f1b9 0f00 	cmp.w	r9, #0
 801f09e:	d021      	beq.n	801f0e4 <__multiply+0x144>
 801f0a0:	682b      	ldr	r3, [r5, #0]
 801f0a2:	f104 0c14 	add.w	ip, r4, #20
 801f0a6:	46ae      	mov	lr, r5
 801f0a8:	f04f 0a00 	mov.w	sl, #0
 801f0ac:	f8bc b000 	ldrh.w	fp, [ip]
 801f0b0:	f8be 7002 	ldrh.w	r7, [lr, #2]
 801f0b4:	fb09 770b 	mla	r7, r9, fp, r7
 801f0b8:	4457      	add	r7, sl
 801f0ba:	b29b      	uxth	r3, r3
 801f0bc:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 801f0c0:	f84e 3b04 	str.w	r3, [lr], #4
 801f0c4:	f85c 3b04 	ldr.w	r3, [ip], #4
 801f0c8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801f0cc:	f8be 3000 	ldrh.w	r3, [lr]
 801f0d0:	fb09 330a 	mla	r3, r9, sl, r3
 801f0d4:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 801f0d8:	4562      	cmp	r2, ip
 801f0da:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801f0de:	d8e5      	bhi.n	801f0ac <__multiply+0x10c>
 801f0e0:	9f01      	ldr	r7, [sp, #4]
 801f0e2:	51eb      	str	r3, [r5, r7]
 801f0e4:	3504      	adds	r5, #4
 801f0e6:	e799      	b.n	801f01c <__multiply+0x7c>
 801f0e8:	3e01      	subs	r6, #1
 801f0ea:	e79b      	b.n	801f024 <__multiply+0x84>
 801f0ec:	080220a5 	.word	0x080220a5
 801f0f0:	080220b6 	.word	0x080220b6

0801f0f4 <__pow5mult>:
 801f0f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801f0f8:	4615      	mov	r5, r2
 801f0fa:	f012 0203 	ands.w	r2, r2, #3
 801f0fe:	4607      	mov	r7, r0
 801f100:	460e      	mov	r6, r1
 801f102:	d007      	beq.n	801f114 <__pow5mult+0x20>
 801f104:	4c25      	ldr	r4, [pc, #148]	@ (801f19c <__pow5mult+0xa8>)
 801f106:	3a01      	subs	r2, #1
 801f108:	2300      	movs	r3, #0
 801f10a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801f10e:	f7ff fe55 	bl	801edbc <__multadd>
 801f112:	4606      	mov	r6, r0
 801f114:	10ad      	asrs	r5, r5, #2
 801f116:	d03d      	beq.n	801f194 <__pow5mult+0xa0>
 801f118:	69fc      	ldr	r4, [r7, #28]
 801f11a:	b97c      	cbnz	r4, 801f13c <__pow5mult+0x48>
 801f11c:	2010      	movs	r0, #16
 801f11e:	f7ff fd35 	bl	801eb8c <malloc>
 801f122:	4602      	mov	r2, r0
 801f124:	61f8      	str	r0, [r7, #28]
 801f126:	b928      	cbnz	r0, 801f134 <__pow5mult+0x40>
 801f128:	4b1d      	ldr	r3, [pc, #116]	@ (801f1a0 <__pow5mult+0xac>)
 801f12a:	481e      	ldr	r0, [pc, #120]	@ (801f1a4 <__pow5mult+0xb0>)
 801f12c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 801f130:	f001 fb46 	bl	80207c0 <__assert_func>
 801f134:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801f138:	6004      	str	r4, [r0, #0]
 801f13a:	60c4      	str	r4, [r0, #12]
 801f13c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 801f140:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801f144:	b94c      	cbnz	r4, 801f15a <__pow5mult+0x66>
 801f146:	f240 2171 	movw	r1, #625	@ 0x271
 801f14a:	4638      	mov	r0, r7
 801f14c:	f7ff ff12 	bl	801ef74 <__i2b>
 801f150:	2300      	movs	r3, #0
 801f152:	f8c8 0008 	str.w	r0, [r8, #8]
 801f156:	4604      	mov	r4, r0
 801f158:	6003      	str	r3, [r0, #0]
 801f15a:	f04f 0900 	mov.w	r9, #0
 801f15e:	07eb      	lsls	r3, r5, #31
 801f160:	d50a      	bpl.n	801f178 <__pow5mult+0x84>
 801f162:	4631      	mov	r1, r6
 801f164:	4622      	mov	r2, r4
 801f166:	4638      	mov	r0, r7
 801f168:	f7ff ff1a 	bl	801efa0 <__multiply>
 801f16c:	4631      	mov	r1, r6
 801f16e:	4680      	mov	r8, r0
 801f170:	4638      	mov	r0, r7
 801f172:	f7ff fe01 	bl	801ed78 <_Bfree>
 801f176:	4646      	mov	r6, r8
 801f178:	106d      	asrs	r5, r5, #1
 801f17a:	d00b      	beq.n	801f194 <__pow5mult+0xa0>
 801f17c:	6820      	ldr	r0, [r4, #0]
 801f17e:	b938      	cbnz	r0, 801f190 <__pow5mult+0x9c>
 801f180:	4622      	mov	r2, r4
 801f182:	4621      	mov	r1, r4
 801f184:	4638      	mov	r0, r7
 801f186:	f7ff ff0b 	bl	801efa0 <__multiply>
 801f18a:	6020      	str	r0, [r4, #0]
 801f18c:	f8c0 9000 	str.w	r9, [r0]
 801f190:	4604      	mov	r4, r0
 801f192:	e7e4      	b.n	801f15e <__pow5mult+0x6a>
 801f194:	4630      	mov	r0, r6
 801f196:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801f19a:	bf00      	nop
 801f19c:	08022110 	.word	0x08022110
 801f1a0:	08022036 	.word	0x08022036
 801f1a4:	080220b6 	.word	0x080220b6

0801f1a8 <__lshift>:
 801f1a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801f1ac:	460c      	mov	r4, r1
 801f1ae:	6849      	ldr	r1, [r1, #4]
 801f1b0:	6923      	ldr	r3, [r4, #16]
 801f1b2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801f1b6:	68a3      	ldr	r3, [r4, #8]
 801f1b8:	4607      	mov	r7, r0
 801f1ba:	4691      	mov	r9, r2
 801f1bc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801f1c0:	f108 0601 	add.w	r6, r8, #1
 801f1c4:	42b3      	cmp	r3, r6
 801f1c6:	db0b      	blt.n	801f1e0 <__lshift+0x38>
 801f1c8:	4638      	mov	r0, r7
 801f1ca:	f7ff fd95 	bl	801ecf8 <_Balloc>
 801f1ce:	4605      	mov	r5, r0
 801f1d0:	b948      	cbnz	r0, 801f1e6 <__lshift+0x3e>
 801f1d2:	4602      	mov	r2, r0
 801f1d4:	4b28      	ldr	r3, [pc, #160]	@ (801f278 <__lshift+0xd0>)
 801f1d6:	4829      	ldr	r0, [pc, #164]	@ (801f27c <__lshift+0xd4>)
 801f1d8:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 801f1dc:	f001 faf0 	bl	80207c0 <__assert_func>
 801f1e0:	3101      	adds	r1, #1
 801f1e2:	005b      	lsls	r3, r3, #1
 801f1e4:	e7ee      	b.n	801f1c4 <__lshift+0x1c>
 801f1e6:	2300      	movs	r3, #0
 801f1e8:	f100 0114 	add.w	r1, r0, #20
 801f1ec:	f100 0210 	add.w	r2, r0, #16
 801f1f0:	4618      	mov	r0, r3
 801f1f2:	4553      	cmp	r3, sl
 801f1f4:	db33      	blt.n	801f25e <__lshift+0xb6>
 801f1f6:	6920      	ldr	r0, [r4, #16]
 801f1f8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801f1fc:	f104 0314 	add.w	r3, r4, #20
 801f200:	f019 091f 	ands.w	r9, r9, #31
 801f204:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801f208:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 801f20c:	d02b      	beq.n	801f266 <__lshift+0xbe>
 801f20e:	f1c9 0e20 	rsb	lr, r9, #32
 801f212:	468a      	mov	sl, r1
 801f214:	2200      	movs	r2, #0
 801f216:	6818      	ldr	r0, [r3, #0]
 801f218:	fa00 f009 	lsl.w	r0, r0, r9
 801f21c:	4310      	orrs	r0, r2
 801f21e:	f84a 0b04 	str.w	r0, [sl], #4
 801f222:	f853 2b04 	ldr.w	r2, [r3], #4
 801f226:	459c      	cmp	ip, r3
 801f228:	fa22 f20e 	lsr.w	r2, r2, lr
 801f22c:	d8f3      	bhi.n	801f216 <__lshift+0x6e>
 801f22e:	ebac 0304 	sub.w	r3, ip, r4
 801f232:	3b15      	subs	r3, #21
 801f234:	f023 0303 	bic.w	r3, r3, #3
 801f238:	3304      	adds	r3, #4
 801f23a:	f104 0015 	add.w	r0, r4, #21
 801f23e:	4584      	cmp	ip, r0
 801f240:	bf38      	it	cc
 801f242:	2304      	movcc	r3, #4
 801f244:	50ca      	str	r2, [r1, r3]
 801f246:	b10a      	cbz	r2, 801f24c <__lshift+0xa4>
 801f248:	f108 0602 	add.w	r6, r8, #2
 801f24c:	3e01      	subs	r6, #1
 801f24e:	4638      	mov	r0, r7
 801f250:	612e      	str	r6, [r5, #16]
 801f252:	4621      	mov	r1, r4
 801f254:	f7ff fd90 	bl	801ed78 <_Bfree>
 801f258:	4628      	mov	r0, r5
 801f25a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801f25e:	f842 0f04 	str.w	r0, [r2, #4]!
 801f262:	3301      	adds	r3, #1
 801f264:	e7c5      	b.n	801f1f2 <__lshift+0x4a>
 801f266:	3904      	subs	r1, #4
 801f268:	f853 2b04 	ldr.w	r2, [r3], #4
 801f26c:	f841 2f04 	str.w	r2, [r1, #4]!
 801f270:	459c      	cmp	ip, r3
 801f272:	d8f9      	bhi.n	801f268 <__lshift+0xc0>
 801f274:	e7ea      	b.n	801f24c <__lshift+0xa4>
 801f276:	bf00      	nop
 801f278:	080220a5 	.word	0x080220a5
 801f27c:	080220b6 	.word	0x080220b6

0801f280 <__mcmp>:
 801f280:	690a      	ldr	r2, [r1, #16]
 801f282:	4603      	mov	r3, r0
 801f284:	6900      	ldr	r0, [r0, #16]
 801f286:	1a80      	subs	r0, r0, r2
 801f288:	b530      	push	{r4, r5, lr}
 801f28a:	d10e      	bne.n	801f2aa <__mcmp+0x2a>
 801f28c:	3314      	adds	r3, #20
 801f28e:	3114      	adds	r1, #20
 801f290:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 801f294:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 801f298:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 801f29c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 801f2a0:	4295      	cmp	r5, r2
 801f2a2:	d003      	beq.n	801f2ac <__mcmp+0x2c>
 801f2a4:	d205      	bcs.n	801f2b2 <__mcmp+0x32>
 801f2a6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801f2aa:	bd30      	pop	{r4, r5, pc}
 801f2ac:	42a3      	cmp	r3, r4
 801f2ae:	d3f3      	bcc.n	801f298 <__mcmp+0x18>
 801f2b0:	e7fb      	b.n	801f2aa <__mcmp+0x2a>
 801f2b2:	2001      	movs	r0, #1
 801f2b4:	e7f9      	b.n	801f2aa <__mcmp+0x2a>
	...

0801f2b8 <__mdiff>:
 801f2b8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f2bc:	4689      	mov	r9, r1
 801f2be:	4606      	mov	r6, r0
 801f2c0:	4611      	mov	r1, r2
 801f2c2:	4648      	mov	r0, r9
 801f2c4:	4614      	mov	r4, r2
 801f2c6:	f7ff ffdb 	bl	801f280 <__mcmp>
 801f2ca:	1e05      	subs	r5, r0, #0
 801f2cc:	d112      	bne.n	801f2f4 <__mdiff+0x3c>
 801f2ce:	4629      	mov	r1, r5
 801f2d0:	4630      	mov	r0, r6
 801f2d2:	f7ff fd11 	bl	801ecf8 <_Balloc>
 801f2d6:	4602      	mov	r2, r0
 801f2d8:	b928      	cbnz	r0, 801f2e6 <__mdiff+0x2e>
 801f2da:	4b3f      	ldr	r3, [pc, #252]	@ (801f3d8 <__mdiff+0x120>)
 801f2dc:	f240 2137 	movw	r1, #567	@ 0x237
 801f2e0:	483e      	ldr	r0, [pc, #248]	@ (801f3dc <__mdiff+0x124>)
 801f2e2:	f001 fa6d 	bl	80207c0 <__assert_func>
 801f2e6:	2301      	movs	r3, #1
 801f2e8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801f2ec:	4610      	mov	r0, r2
 801f2ee:	b003      	add	sp, #12
 801f2f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f2f4:	bfbc      	itt	lt
 801f2f6:	464b      	movlt	r3, r9
 801f2f8:	46a1      	movlt	r9, r4
 801f2fa:	4630      	mov	r0, r6
 801f2fc:	f8d9 1004 	ldr.w	r1, [r9, #4]
 801f300:	bfba      	itte	lt
 801f302:	461c      	movlt	r4, r3
 801f304:	2501      	movlt	r5, #1
 801f306:	2500      	movge	r5, #0
 801f308:	f7ff fcf6 	bl	801ecf8 <_Balloc>
 801f30c:	4602      	mov	r2, r0
 801f30e:	b918      	cbnz	r0, 801f318 <__mdiff+0x60>
 801f310:	4b31      	ldr	r3, [pc, #196]	@ (801f3d8 <__mdiff+0x120>)
 801f312:	f240 2145 	movw	r1, #581	@ 0x245
 801f316:	e7e3      	b.n	801f2e0 <__mdiff+0x28>
 801f318:	f8d9 7010 	ldr.w	r7, [r9, #16]
 801f31c:	6926      	ldr	r6, [r4, #16]
 801f31e:	60c5      	str	r5, [r0, #12]
 801f320:	f109 0310 	add.w	r3, r9, #16
 801f324:	f109 0514 	add.w	r5, r9, #20
 801f328:	f104 0e14 	add.w	lr, r4, #20
 801f32c:	f100 0b14 	add.w	fp, r0, #20
 801f330:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 801f334:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 801f338:	9301      	str	r3, [sp, #4]
 801f33a:	46d9      	mov	r9, fp
 801f33c:	f04f 0c00 	mov.w	ip, #0
 801f340:	9b01      	ldr	r3, [sp, #4]
 801f342:	f85e 0b04 	ldr.w	r0, [lr], #4
 801f346:	f853 af04 	ldr.w	sl, [r3, #4]!
 801f34a:	9301      	str	r3, [sp, #4]
 801f34c:	fa1f f38a 	uxth.w	r3, sl
 801f350:	4619      	mov	r1, r3
 801f352:	b283      	uxth	r3, r0
 801f354:	1acb      	subs	r3, r1, r3
 801f356:	0c00      	lsrs	r0, r0, #16
 801f358:	4463      	add	r3, ip
 801f35a:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 801f35e:	eb00 4023 	add.w	r0, r0, r3, asr #16
 801f362:	b29b      	uxth	r3, r3
 801f364:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 801f368:	4576      	cmp	r6, lr
 801f36a:	f849 3b04 	str.w	r3, [r9], #4
 801f36e:	ea4f 4c20 	mov.w	ip, r0, asr #16
 801f372:	d8e5      	bhi.n	801f340 <__mdiff+0x88>
 801f374:	1b33      	subs	r3, r6, r4
 801f376:	3b15      	subs	r3, #21
 801f378:	f023 0303 	bic.w	r3, r3, #3
 801f37c:	3415      	adds	r4, #21
 801f37e:	3304      	adds	r3, #4
 801f380:	42a6      	cmp	r6, r4
 801f382:	bf38      	it	cc
 801f384:	2304      	movcc	r3, #4
 801f386:	441d      	add	r5, r3
 801f388:	445b      	add	r3, fp
 801f38a:	461e      	mov	r6, r3
 801f38c:	462c      	mov	r4, r5
 801f38e:	4544      	cmp	r4, r8
 801f390:	d30e      	bcc.n	801f3b0 <__mdiff+0xf8>
 801f392:	f108 0103 	add.w	r1, r8, #3
 801f396:	1b49      	subs	r1, r1, r5
 801f398:	f021 0103 	bic.w	r1, r1, #3
 801f39c:	3d03      	subs	r5, #3
 801f39e:	45a8      	cmp	r8, r5
 801f3a0:	bf38      	it	cc
 801f3a2:	2100      	movcc	r1, #0
 801f3a4:	440b      	add	r3, r1
 801f3a6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801f3aa:	b191      	cbz	r1, 801f3d2 <__mdiff+0x11a>
 801f3ac:	6117      	str	r7, [r2, #16]
 801f3ae:	e79d      	b.n	801f2ec <__mdiff+0x34>
 801f3b0:	f854 1b04 	ldr.w	r1, [r4], #4
 801f3b4:	46e6      	mov	lr, ip
 801f3b6:	0c08      	lsrs	r0, r1, #16
 801f3b8:	fa1c fc81 	uxtah	ip, ip, r1
 801f3bc:	4471      	add	r1, lr
 801f3be:	eb00 402c 	add.w	r0, r0, ip, asr #16
 801f3c2:	b289      	uxth	r1, r1
 801f3c4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 801f3c8:	f846 1b04 	str.w	r1, [r6], #4
 801f3cc:	ea4f 4c20 	mov.w	ip, r0, asr #16
 801f3d0:	e7dd      	b.n	801f38e <__mdiff+0xd6>
 801f3d2:	3f01      	subs	r7, #1
 801f3d4:	e7e7      	b.n	801f3a6 <__mdiff+0xee>
 801f3d6:	bf00      	nop
 801f3d8:	080220a5 	.word	0x080220a5
 801f3dc:	080220b6 	.word	0x080220b6

0801f3e0 <__ulp>:
 801f3e0:	b082      	sub	sp, #8
 801f3e2:	ed8d 0b00 	vstr	d0, [sp]
 801f3e6:	9a01      	ldr	r2, [sp, #4]
 801f3e8:	4b0f      	ldr	r3, [pc, #60]	@ (801f428 <__ulp+0x48>)
 801f3ea:	4013      	ands	r3, r2
 801f3ec:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 801f3f0:	2b00      	cmp	r3, #0
 801f3f2:	dc08      	bgt.n	801f406 <__ulp+0x26>
 801f3f4:	425b      	negs	r3, r3
 801f3f6:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 801f3fa:	ea4f 5223 	mov.w	r2, r3, asr #20
 801f3fe:	da04      	bge.n	801f40a <__ulp+0x2a>
 801f400:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 801f404:	4113      	asrs	r3, r2
 801f406:	2200      	movs	r2, #0
 801f408:	e008      	b.n	801f41c <__ulp+0x3c>
 801f40a:	f1a2 0314 	sub.w	r3, r2, #20
 801f40e:	2b1e      	cmp	r3, #30
 801f410:	bfda      	itte	le
 801f412:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 801f416:	40da      	lsrle	r2, r3
 801f418:	2201      	movgt	r2, #1
 801f41a:	2300      	movs	r3, #0
 801f41c:	4619      	mov	r1, r3
 801f41e:	4610      	mov	r0, r2
 801f420:	ec41 0b10 	vmov	d0, r0, r1
 801f424:	b002      	add	sp, #8
 801f426:	4770      	bx	lr
 801f428:	7ff00000 	.word	0x7ff00000

0801f42c <__b2d>:
 801f42c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801f430:	6906      	ldr	r6, [r0, #16]
 801f432:	f100 0814 	add.w	r8, r0, #20
 801f436:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 801f43a:	1f37      	subs	r7, r6, #4
 801f43c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 801f440:	4610      	mov	r0, r2
 801f442:	f7ff fd4b 	bl	801eedc <__hi0bits>
 801f446:	f1c0 0320 	rsb	r3, r0, #32
 801f44a:	280a      	cmp	r0, #10
 801f44c:	600b      	str	r3, [r1, #0]
 801f44e:	491b      	ldr	r1, [pc, #108]	@ (801f4bc <__b2d+0x90>)
 801f450:	dc15      	bgt.n	801f47e <__b2d+0x52>
 801f452:	f1c0 0c0b 	rsb	ip, r0, #11
 801f456:	fa22 f30c 	lsr.w	r3, r2, ip
 801f45a:	45b8      	cmp	r8, r7
 801f45c:	ea43 0501 	orr.w	r5, r3, r1
 801f460:	bf34      	ite	cc
 801f462:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 801f466:	2300      	movcs	r3, #0
 801f468:	3015      	adds	r0, #21
 801f46a:	fa02 f000 	lsl.w	r0, r2, r0
 801f46e:	fa23 f30c 	lsr.w	r3, r3, ip
 801f472:	4303      	orrs	r3, r0
 801f474:	461c      	mov	r4, r3
 801f476:	ec45 4b10 	vmov	d0, r4, r5
 801f47a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801f47e:	45b8      	cmp	r8, r7
 801f480:	bf3a      	itte	cc
 801f482:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 801f486:	f1a6 0708 	subcc.w	r7, r6, #8
 801f48a:	2300      	movcs	r3, #0
 801f48c:	380b      	subs	r0, #11
 801f48e:	d012      	beq.n	801f4b6 <__b2d+0x8a>
 801f490:	f1c0 0120 	rsb	r1, r0, #32
 801f494:	fa23 f401 	lsr.w	r4, r3, r1
 801f498:	4082      	lsls	r2, r0
 801f49a:	4322      	orrs	r2, r4
 801f49c:	4547      	cmp	r7, r8
 801f49e:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 801f4a2:	bf8c      	ite	hi
 801f4a4:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 801f4a8:	2200      	movls	r2, #0
 801f4aa:	4083      	lsls	r3, r0
 801f4ac:	40ca      	lsrs	r2, r1
 801f4ae:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 801f4b2:	4313      	orrs	r3, r2
 801f4b4:	e7de      	b.n	801f474 <__b2d+0x48>
 801f4b6:	ea42 0501 	orr.w	r5, r2, r1
 801f4ba:	e7db      	b.n	801f474 <__b2d+0x48>
 801f4bc:	3ff00000 	.word	0x3ff00000

0801f4c0 <__d2b>:
 801f4c0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801f4c4:	460f      	mov	r7, r1
 801f4c6:	2101      	movs	r1, #1
 801f4c8:	ec59 8b10 	vmov	r8, r9, d0
 801f4cc:	4616      	mov	r6, r2
 801f4ce:	f7ff fc13 	bl	801ecf8 <_Balloc>
 801f4d2:	4604      	mov	r4, r0
 801f4d4:	b930      	cbnz	r0, 801f4e4 <__d2b+0x24>
 801f4d6:	4602      	mov	r2, r0
 801f4d8:	4b23      	ldr	r3, [pc, #140]	@ (801f568 <__d2b+0xa8>)
 801f4da:	4824      	ldr	r0, [pc, #144]	@ (801f56c <__d2b+0xac>)
 801f4dc:	f240 310f 	movw	r1, #783	@ 0x30f
 801f4e0:	f001 f96e 	bl	80207c0 <__assert_func>
 801f4e4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 801f4e8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801f4ec:	b10d      	cbz	r5, 801f4f2 <__d2b+0x32>
 801f4ee:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 801f4f2:	9301      	str	r3, [sp, #4]
 801f4f4:	f1b8 0300 	subs.w	r3, r8, #0
 801f4f8:	d023      	beq.n	801f542 <__d2b+0x82>
 801f4fa:	4668      	mov	r0, sp
 801f4fc:	9300      	str	r3, [sp, #0]
 801f4fe:	f7ff fd0c 	bl	801ef1a <__lo0bits>
 801f502:	e9dd 1200 	ldrd	r1, r2, [sp]
 801f506:	b1d0      	cbz	r0, 801f53e <__d2b+0x7e>
 801f508:	f1c0 0320 	rsb	r3, r0, #32
 801f50c:	fa02 f303 	lsl.w	r3, r2, r3
 801f510:	430b      	orrs	r3, r1
 801f512:	40c2      	lsrs	r2, r0
 801f514:	6163      	str	r3, [r4, #20]
 801f516:	9201      	str	r2, [sp, #4]
 801f518:	9b01      	ldr	r3, [sp, #4]
 801f51a:	61a3      	str	r3, [r4, #24]
 801f51c:	2b00      	cmp	r3, #0
 801f51e:	bf0c      	ite	eq
 801f520:	2201      	moveq	r2, #1
 801f522:	2202      	movne	r2, #2
 801f524:	6122      	str	r2, [r4, #16]
 801f526:	b1a5      	cbz	r5, 801f552 <__d2b+0x92>
 801f528:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 801f52c:	4405      	add	r5, r0
 801f52e:	603d      	str	r5, [r7, #0]
 801f530:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 801f534:	6030      	str	r0, [r6, #0]
 801f536:	4620      	mov	r0, r4
 801f538:	b003      	add	sp, #12
 801f53a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801f53e:	6161      	str	r1, [r4, #20]
 801f540:	e7ea      	b.n	801f518 <__d2b+0x58>
 801f542:	a801      	add	r0, sp, #4
 801f544:	f7ff fce9 	bl	801ef1a <__lo0bits>
 801f548:	9b01      	ldr	r3, [sp, #4]
 801f54a:	6163      	str	r3, [r4, #20]
 801f54c:	3020      	adds	r0, #32
 801f54e:	2201      	movs	r2, #1
 801f550:	e7e8      	b.n	801f524 <__d2b+0x64>
 801f552:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801f556:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 801f55a:	6038      	str	r0, [r7, #0]
 801f55c:	6918      	ldr	r0, [r3, #16]
 801f55e:	f7ff fcbd 	bl	801eedc <__hi0bits>
 801f562:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801f566:	e7e5      	b.n	801f534 <__d2b+0x74>
 801f568:	080220a5 	.word	0x080220a5
 801f56c:	080220b6 	.word	0x080220b6

0801f570 <__ratio>:
 801f570:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f574:	b085      	sub	sp, #20
 801f576:	e9cd 1000 	strd	r1, r0, [sp]
 801f57a:	a902      	add	r1, sp, #8
 801f57c:	f7ff ff56 	bl	801f42c <__b2d>
 801f580:	9800      	ldr	r0, [sp, #0]
 801f582:	a903      	add	r1, sp, #12
 801f584:	ec55 4b10 	vmov	r4, r5, d0
 801f588:	f7ff ff50 	bl	801f42c <__b2d>
 801f58c:	9b01      	ldr	r3, [sp, #4]
 801f58e:	6919      	ldr	r1, [r3, #16]
 801f590:	9b00      	ldr	r3, [sp, #0]
 801f592:	691b      	ldr	r3, [r3, #16]
 801f594:	1ac9      	subs	r1, r1, r3
 801f596:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 801f59a:	1a9b      	subs	r3, r3, r2
 801f59c:	ec5b ab10 	vmov	sl, fp, d0
 801f5a0:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 801f5a4:	2b00      	cmp	r3, #0
 801f5a6:	bfce      	itee	gt
 801f5a8:	462a      	movgt	r2, r5
 801f5aa:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 801f5ae:	465a      	movle	r2, fp
 801f5b0:	462f      	mov	r7, r5
 801f5b2:	46d9      	mov	r9, fp
 801f5b4:	bfcc      	ite	gt
 801f5b6:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 801f5ba:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 801f5be:	464b      	mov	r3, r9
 801f5c0:	4652      	mov	r2, sl
 801f5c2:	4620      	mov	r0, r4
 801f5c4:	4639      	mov	r1, r7
 801f5c6:	f7e1 f941 	bl	800084c <__aeabi_ddiv>
 801f5ca:	ec41 0b10 	vmov	d0, r0, r1
 801f5ce:	b005      	add	sp, #20
 801f5d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801f5d4 <__copybits>:
 801f5d4:	3901      	subs	r1, #1
 801f5d6:	b570      	push	{r4, r5, r6, lr}
 801f5d8:	1149      	asrs	r1, r1, #5
 801f5da:	6914      	ldr	r4, [r2, #16]
 801f5dc:	3101      	adds	r1, #1
 801f5de:	f102 0314 	add.w	r3, r2, #20
 801f5e2:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 801f5e6:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801f5ea:	1f05      	subs	r5, r0, #4
 801f5ec:	42a3      	cmp	r3, r4
 801f5ee:	d30c      	bcc.n	801f60a <__copybits+0x36>
 801f5f0:	1aa3      	subs	r3, r4, r2
 801f5f2:	3b11      	subs	r3, #17
 801f5f4:	f023 0303 	bic.w	r3, r3, #3
 801f5f8:	3211      	adds	r2, #17
 801f5fa:	42a2      	cmp	r2, r4
 801f5fc:	bf88      	it	hi
 801f5fe:	2300      	movhi	r3, #0
 801f600:	4418      	add	r0, r3
 801f602:	2300      	movs	r3, #0
 801f604:	4288      	cmp	r0, r1
 801f606:	d305      	bcc.n	801f614 <__copybits+0x40>
 801f608:	bd70      	pop	{r4, r5, r6, pc}
 801f60a:	f853 6b04 	ldr.w	r6, [r3], #4
 801f60e:	f845 6f04 	str.w	r6, [r5, #4]!
 801f612:	e7eb      	b.n	801f5ec <__copybits+0x18>
 801f614:	f840 3b04 	str.w	r3, [r0], #4
 801f618:	e7f4      	b.n	801f604 <__copybits+0x30>

0801f61a <__any_on>:
 801f61a:	f100 0214 	add.w	r2, r0, #20
 801f61e:	6900      	ldr	r0, [r0, #16]
 801f620:	114b      	asrs	r3, r1, #5
 801f622:	4298      	cmp	r0, r3
 801f624:	b510      	push	{r4, lr}
 801f626:	db11      	blt.n	801f64c <__any_on+0x32>
 801f628:	dd0a      	ble.n	801f640 <__any_on+0x26>
 801f62a:	f011 011f 	ands.w	r1, r1, #31
 801f62e:	d007      	beq.n	801f640 <__any_on+0x26>
 801f630:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 801f634:	fa24 f001 	lsr.w	r0, r4, r1
 801f638:	fa00 f101 	lsl.w	r1, r0, r1
 801f63c:	428c      	cmp	r4, r1
 801f63e:	d10b      	bne.n	801f658 <__any_on+0x3e>
 801f640:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801f644:	4293      	cmp	r3, r2
 801f646:	d803      	bhi.n	801f650 <__any_on+0x36>
 801f648:	2000      	movs	r0, #0
 801f64a:	bd10      	pop	{r4, pc}
 801f64c:	4603      	mov	r3, r0
 801f64e:	e7f7      	b.n	801f640 <__any_on+0x26>
 801f650:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801f654:	2900      	cmp	r1, #0
 801f656:	d0f5      	beq.n	801f644 <__any_on+0x2a>
 801f658:	2001      	movs	r0, #1
 801f65a:	e7f6      	b.n	801f64a <__any_on+0x30>

0801f65c <sulp>:
 801f65c:	b570      	push	{r4, r5, r6, lr}
 801f65e:	4604      	mov	r4, r0
 801f660:	460d      	mov	r5, r1
 801f662:	ec45 4b10 	vmov	d0, r4, r5
 801f666:	4616      	mov	r6, r2
 801f668:	f7ff feba 	bl	801f3e0 <__ulp>
 801f66c:	ec51 0b10 	vmov	r0, r1, d0
 801f670:	b17e      	cbz	r6, 801f692 <sulp+0x36>
 801f672:	f3c5 530a 	ubfx	r3, r5, #20, #11
 801f676:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 801f67a:	2b00      	cmp	r3, #0
 801f67c:	dd09      	ble.n	801f692 <sulp+0x36>
 801f67e:	051b      	lsls	r3, r3, #20
 801f680:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 801f684:	2400      	movs	r4, #0
 801f686:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 801f68a:	4622      	mov	r2, r4
 801f68c:	462b      	mov	r3, r5
 801f68e:	f7e0 ffb3 	bl	80005f8 <__aeabi_dmul>
 801f692:	ec41 0b10 	vmov	d0, r0, r1
 801f696:	bd70      	pop	{r4, r5, r6, pc}

0801f698 <_strtod_l>:
 801f698:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f69c:	b09f      	sub	sp, #124	@ 0x7c
 801f69e:	460c      	mov	r4, r1
 801f6a0:	9217      	str	r2, [sp, #92]	@ 0x5c
 801f6a2:	2200      	movs	r2, #0
 801f6a4:	921a      	str	r2, [sp, #104]	@ 0x68
 801f6a6:	9005      	str	r0, [sp, #20]
 801f6a8:	f04f 0a00 	mov.w	sl, #0
 801f6ac:	f04f 0b00 	mov.w	fp, #0
 801f6b0:	460a      	mov	r2, r1
 801f6b2:	9219      	str	r2, [sp, #100]	@ 0x64
 801f6b4:	7811      	ldrb	r1, [r2, #0]
 801f6b6:	292b      	cmp	r1, #43	@ 0x2b
 801f6b8:	d04a      	beq.n	801f750 <_strtod_l+0xb8>
 801f6ba:	d838      	bhi.n	801f72e <_strtod_l+0x96>
 801f6bc:	290d      	cmp	r1, #13
 801f6be:	d832      	bhi.n	801f726 <_strtod_l+0x8e>
 801f6c0:	2908      	cmp	r1, #8
 801f6c2:	d832      	bhi.n	801f72a <_strtod_l+0x92>
 801f6c4:	2900      	cmp	r1, #0
 801f6c6:	d03b      	beq.n	801f740 <_strtod_l+0xa8>
 801f6c8:	2200      	movs	r2, #0
 801f6ca:	920b      	str	r2, [sp, #44]	@ 0x2c
 801f6cc:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 801f6ce:	782a      	ldrb	r2, [r5, #0]
 801f6d0:	2a30      	cmp	r2, #48	@ 0x30
 801f6d2:	f040 80b3 	bne.w	801f83c <_strtod_l+0x1a4>
 801f6d6:	786a      	ldrb	r2, [r5, #1]
 801f6d8:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 801f6dc:	2a58      	cmp	r2, #88	@ 0x58
 801f6de:	d16e      	bne.n	801f7be <_strtod_l+0x126>
 801f6e0:	9302      	str	r3, [sp, #8]
 801f6e2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801f6e4:	9301      	str	r3, [sp, #4]
 801f6e6:	ab1a      	add	r3, sp, #104	@ 0x68
 801f6e8:	9300      	str	r3, [sp, #0]
 801f6ea:	4a8e      	ldr	r2, [pc, #568]	@ (801f924 <_strtod_l+0x28c>)
 801f6ec:	9805      	ldr	r0, [sp, #20]
 801f6ee:	ab1b      	add	r3, sp, #108	@ 0x6c
 801f6f0:	a919      	add	r1, sp, #100	@ 0x64
 801f6f2:	f001 f8ff 	bl	80208f4 <__gethex>
 801f6f6:	f010 060f 	ands.w	r6, r0, #15
 801f6fa:	4604      	mov	r4, r0
 801f6fc:	d005      	beq.n	801f70a <_strtod_l+0x72>
 801f6fe:	2e06      	cmp	r6, #6
 801f700:	d128      	bne.n	801f754 <_strtod_l+0xbc>
 801f702:	3501      	adds	r5, #1
 801f704:	2300      	movs	r3, #0
 801f706:	9519      	str	r5, [sp, #100]	@ 0x64
 801f708:	930b      	str	r3, [sp, #44]	@ 0x2c
 801f70a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801f70c:	2b00      	cmp	r3, #0
 801f70e:	f040 858e 	bne.w	802022e <_strtod_l+0xb96>
 801f712:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801f714:	b1cb      	cbz	r3, 801f74a <_strtod_l+0xb2>
 801f716:	4652      	mov	r2, sl
 801f718:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 801f71c:	ec43 2b10 	vmov	d0, r2, r3
 801f720:	b01f      	add	sp, #124	@ 0x7c
 801f722:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f726:	2920      	cmp	r1, #32
 801f728:	d1ce      	bne.n	801f6c8 <_strtod_l+0x30>
 801f72a:	3201      	adds	r2, #1
 801f72c:	e7c1      	b.n	801f6b2 <_strtod_l+0x1a>
 801f72e:	292d      	cmp	r1, #45	@ 0x2d
 801f730:	d1ca      	bne.n	801f6c8 <_strtod_l+0x30>
 801f732:	2101      	movs	r1, #1
 801f734:	910b      	str	r1, [sp, #44]	@ 0x2c
 801f736:	1c51      	adds	r1, r2, #1
 801f738:	9119      	str	r1, [sp, #100]	@ 0x64
 801f73a:	7852      	ldrb	r2, [r2, #1]
 801f73c:	2a00      	cmp	r2, #0
 801f73e:	d1c5      	bne.n	801f6cc <_strtod_l+0x34>
 801f740:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801f742:	9419      	str	r4, [sp, #100]	@ 0x64
 801f744:	2b00      	cmp	r3, #0
 801f746:	f040 8570 	bne.w	802022a <_strtod_l+0xb92>
 801f74a:	4652      	mov	r2, sl
 801f74c:	465b      	mov	r3, fp
 801f74e:	e7e5      	b.n	801f71c <_strtod_l+0x84>
 801f750:	2100      	movs	r1, #0
 801f752:	e7ef      	b.n	801f734 <_strtod_l+0x9c>
 801f754:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 801f756:	b13a      	cbz	r2, 801f768 <_strtod_l+0xd0>
 801f758:	2135      	movs	r1, #53	@ 0x35
 801f75a:	a81c      	add	r0, sp, #112	@ 0x70
 801f75c:	f7ff ff3a 	bl	801f5d4 <__copybits>
 801f760:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801f762:	9805      	ldr	r0, [sp, #20]
 801f764:	f7ff fb08 	bl	801ed78 <_Bfree>
 801f768:	3e01      	subs	r6, #1
 801f76a:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 801f76c:	2e04      	cmp	r6, #4
 801f76e:	d806      	bhi.n	801f77e <_strtod_l+0xe6>
 801f770:	e8df f006 	tbb	[pc, r6]
 801f774:	201d0314 	.word	0x201d0314
 801f778:	14          	.byte	0x14
 801f779:	00          	.byte	0x00
 801f77a:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 801f77e:	05e1      	lsls	r1, r4, #23
 801f780:	bf48      	it	mi
 801f782:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 801f786:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 801f78a:	0d1b      	lsrs	r3, r3, #20
 801f78c:	051b      	lsls	r3, r3, #20
 801f78e:	2b00      	cmp	r3, #0
 801f790:	d1bb      	bne.n	801f70a <_strtod_l+0x72>
 801f792:	f7fe fa8b 	bl	801dcac <__errno>
 801f796:	2322      	movs	r3, #34	@ 0x22
 801f798:	6003      	str	r3, [r0, #0]
 801f79a:	e7b6      	b.n	801f70a <_strtod_l+0x72>
 801f79c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 801f7a0:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 801f7a4:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 801f7a8:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 801f7ac:	e7e7      	b.n	801f77e <_strtod_l+0xe6>
 801f7ae:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 801f92c <_strtod_l+0x294>
 801f7b2:	e7e4      	b.n	801f77e <_strtod_l+0xe6>
 801f7b4:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 801f7b8:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 801f7bc:	e7df      	b.n	801f77e <_strtod_l+0xe6>
 801f7be:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801f7c0:	1c5a      	adds	r2, r3, #1
 801f7c2:	9219      	str	r2, [sp, #100]	@ 0x64
 801f7c4:	785b      	ldrb	r3, [r3, #1]
 801f7c6:	2b30      	cmp	r3, #48	@ 0x30
 801f7c8:	d0f9      	beq.n	801f7be <_strtod_l+0x126>
 801f7ca:	2b00      	cmp	r3, #0
 801f7cc:	d09d      	beq.n	801f70a <_strtod_l+0x72>
 801f7ce:	2301      	movs	r3, #1
 801f7d0:	9309      	str	r3, [sp, #36]	@ 0x24
 801f7d2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801f7d4:	930c      	str	r3, [sp, #48]	@ 0x30
 801f7d6:	2300      	movs	r3, #0
 801f7d8:	9308      	str	r3, [sp, #32]
 801f7da:	930a      	str	r3, [sp, #40]	@ 0x28
 801f7dc:	461f      	mov	r7, r3
 801f7de:	220a      	movs	r2, #10
 801f7e0:	9819      	ldr	r0, [sp, #100]	@ 0x64
 801f7e2:	7805      	ldrb	r5, [r0, #0]
 801f7e4:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 801f7e8:	b2d9      	uxtb	r1, r3
 801f7ea:	2909      	cmp	r1, #9
 801f7ec:	d928      	bls.n	801f840 <_strtod_l+0x1a8>
 801f7ee:	494e      	ldr	r1, [pc, #312]	@ (801f928 <_strtod_l+0x290>)
 801f7f0:	2201      	movs	r2, #1
 801f7f2:	f000 ffbb 	bl	802076c <strncmp>
 801f7f6:	2800      	cmp	r0, #0
 801f7f8:	d032      	beq.n	801f860 <_strtod_l+0x1c8>
 801f7fa:	2000      	movs	r0, #0
 801f7fc:	462a      	mov	r2, r5
 801f7fe:	4681      	mov	r9, r0
 801f800:	463d      	mov	r5, r7
 801f802:	4603      	mov	r3, r0
 801f804:	2a65      	cmp	r2, #101	@ 0x65
 801f806:	d001      	beq.n	801f80c <_strtod_l+0x174>
 801f808:	2a45      	cmp	r2, #69	@ 0x45
 801f80a:	d114      	bne.n	801f836 <_strtod_l+0x19e>
 801f80c:	b91d      	cbnz	r5, 801f816 <_strtod_l+0x17e>
 801f80e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801f810:	4302      	orrs	r2, r0
 801f812:	d095      	beq.n	801f740 <_strtod_l+0xa8>
 801f814:	2500      	movs	r5, #0
 801f816:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 801f818:	1c62      	adds	r2, r4, #1
 801f81a:	9219      	str	r2, [sp, #100]	@ 0x64
 801f81c:	7862      	ldrb	r2, [r4, #1]
 801f81e:	2a2b      	cmp	r2, #43	@ 0x2b
 801f820:	d077      	beq.n	801f912 <_strtod_l+0x27a>
 801f822:	2a2d      	cmp	r2, #45	@ 0x2d
 801f824:	d07b      	beq.n	801f91e <_strtod_l+0x286>
 801f826:	f04f 0c00 	mov.w	ip, #0
 801f82a:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 801f82e:	2909      	cmp	r1, #9
 801f830:	f240 8082 	bls.w	801f938 <_strtod_l+0x2a0>
 801f834:	9419      	str	r4, [sp, #100]	@ 0x64
 801f836:	f04f 0800 	mov.w	r8, #0
 801f83a:	e0a2      	b.n	801f982 <_strtod_l+0x2ea>
 801f83c:	2300      	movs	r3, #0
 801f83e:	e7c7      	b.n	801f7d0 <_strtod_l+0x138>
 801f840:	2f08      	cmp	r7, #8
 801f842:	bfd5      	itete	le
 801f844:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 801f846:	9908      	ldrgt	r1, [sp, #32]
 801f848:	fb02 3301 	mlale	r3, r2, r1, r3
 801f84c:	fb02 3301 	mlagt	r3, r2, r1, r3
 801f850:	f100 0001 	add.w	r0, r0, #1
 801f854:	bfd4      	ite	le
 801f856:	930a      	strle	r3, [sp, #40]	@ 0x28
 801f858:	9308      	strgt	r3, [sp, #32]
 801f85a:	3701      	adds	r7, #1
 801f85c:	9019      	str	r0, [sp, #100]	@ 0x64
 801f85e:	e7bf      	b.n	801f7e0 <_strtod_l+0x148>
 801f860:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801f862:	1c5a      	adds	r2, r3, #1
 801f864:	9219      	str	r2, [sp, #100]	@ 0x64
 801f866:	785a      	ldrb	r2, [r3, #1]
 801f868:	b37f      	cbz	r7, 801f8ca <_strtod_l+0x232>
 801f86a:	4681      	mov	r9, r0
 801f86c:	463d      	mov	r5, r7
 801f86e:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 801f872:	2b09      	cmp	r3, #9
 801f874:	d912      	bls.n	801f89c <_strtod_l+0x204>
 801f876:	2301      	movs	r3, #1
 801f878:	e7c4      	b.n	801f804 <_strtod_l+0x16c>
 801f87a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801f87c:	1c5a      	adds	r2, r3, #1
 801f87e:	9219      	str	r2, [sp, #100]	@ 0x64
 801f880:	785a      	ldrb	r2, [r3, #1]
 801f882:	3001      	adds	r0, #1
 801f884:	2a30      	cmp	r2, #48	@ 0x30
 801f886:	d0f8      	beq.n	801f87a <_strtod_l+0x1e2>
 801f888:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 801f88c:	2b08      	cmp	r3, #8
 801f88e:	f200 84d3 	bhi.w	8020238 <_strtod_l+0xba0>
 801f892:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801f894:	930c      	str	r3, [sp, #48]	@ 0x30
 801f896:	4681      	mov	r9, r0
 801f898:	2000      	movs	r0, #0
 801f89a:	4605      	mov	r5, r0
 801f89c:	3a30      	subs	r2, #48	@ 0x30
 801f89e:	f100 0301 	add.w	r3, r0, #1
 801f8a2:	d02a      	beq.n	801f8fa <_strtod_l+0x262>
 801f8a4:	4499      	add	r9, r3
 801f8a6:	eb00 0c05 	add.w	ip, r0, r5
 801f8aa:	462b      	mov	r3, r5
 801f8ac:	210a      	movs	r1, #10
 801f8ae:	4563      	cmp	r3, ip
 801f8b0:	d10d      	bne.n	801f8ce <_strtod_l+0x236>
 801f8b2:	1c69      	adds	r1, r5, #1
 801f8b4:	4401      	add	r1, r0
 801f8b6:	4428      	add	r0, r5
 801f8b8:	2808      	cmp	r0, #8
 801f8ba:	dc16      	bgt.n	801f8ea <_strtod_l+0x252>
 801f8bc:	980a      	ldr	r0, [sp, #40]	@ 0x28
 801f8be:	230a      	movs	r3, #10
 801f8c0:	fb03 2300 	mla	r3, r3, r0, r2
 801f8c4:	930a      	str	r3, [sp, #40]	@ 0x28
 801f8c6:	2300      	movs	r3, #0
 801f8c8:	e018      	b.n	801f8fc <_strtod_l+0x264>
 801f8ca:	4638      	mov	r0, r7
 801f8cc:	e7da      	b.n	801f884 <_strtod_l+0x1ec>
 801f8ce:	2b08      	cmp	r3, #8
 801f8d0:	f103 0301 	add.w	r3, r3, #1
 801f8d4:	dc03      	bgt.n	801f8de <_strtod_l+0x246>
 801f8d6:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 801f8d8:	434e      	muls	r6, r1
 801f8da:	960a      	str	r6, [sp, #40]	@ 0x28
 801f8dc:	e7e7      	b.n	801f8ae <_strtod_l+0x216>
 801f8de:	2b10      	cmp	r3, #16
 801f8e0:	bfde      	ittt	le
 801f8e2:	9e08      	ldrle	r6, [sp, #32]
 801f8e4:	434e      	mulle	r6, r1
 801f8e6:	9608      	strle	r6, [sp, #32]
 801f8e8:	e7e1      	b.n	801f8ae <_strtod_l+0x216>
 801f8ea:	280f      	cmp	r0, #15
 801f8ec:	dceb      	bgt.n	801f8c6 <_strtod_l+0x22e>
 801f8ee:	9808      	ldr	r0, [sp, #32]
 801f8f0:	230a      	movs	r3, #10
 801f8f2:	fb03 2300 	mla	r3, r3, r0, r2
 801f8f6:	9308      	str	r3, [sp, #32]
 801f8f8:	e7e5      	b.n	801f8c6 <_strtod_l+0x22e>
 801f8fa:	4629      	mov	r1, r5
 801f8fc:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 801f8fe:	1c50      	adds	r0, r2, #1
 801f900:	9019      	str	r0, [sp, #100]	@ 0x64
 801f902:	7852      	ldrb	r2, [r2, #1]
 801f904:	4618      	mov	r0, r3
 801f906:	460d      	mov	r5, r1
 801f908:	e7b1      	b.n	801f86e <_strtod_l+0x1d6>
 801f90a:	f04f 0900 	mov.w	r9, #0
 801f90e:	2301      	movs	r3, #1
 801f910:	e77d      	b.n	801f80e <_strtod_l+0x176>
 801f912:	f04f 0c00 	mov.w	ip, #0
 801f916:	1ca2      	adds	r2, r4, #2
 801f918:	9219      	str	r2, [sp, #100]	@ 0x64
 801f91a:	78a2      	ldrb	r2, [r4, #2]
 801f91c:	e785      	b.n	801f82a <_strtod_l+0x192>
 801f91e:	f04f 0c01 	mov.w	ip, #1
 801f922:	e7f8      	b.n	801f916 <_strtod_l+0x27e>
 801f924:	08022228 	.word	0x08022228
 801f928:	08022210 	.word	0x08022210
 801f92c:	7ff00000 	.word	0x7ff00000
 801f930:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 801f932:	1c51      	adds	r1, r2, #1
 801f934:	9119      	str	r1, [sp, #100]	@ 0x64
 801f936:	7852      	ldrb	r2, [r2, #1]
 801f938:	2a30      	cmp	r2, #48	@ 0x30
 801f93a:	d0f9      	beq.n	801f930 <_strtod_l+0x298>
 801f93c:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 801f940:	2908      	cmp	r1, #8
 801f942:	f63f af78 	bhi.w	801f836 <_strtod_l+0x19e>
 801f946:	3a30      	subs	r2, #48	@ 0x30
 801f948:	920e      	str	r2, [sp, #56]	@ 0x38
 801f94a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 801f94c:	920f      	str	r2, [sp, #60]	@ 0x3c
 801f94e:	f04f 080a 	mov.w	r8, #10
 801f952:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 801f954:	1c56      	adds	r6, r2, #1
 801f956:	9619      	str	r6, [sp, #100]	@ 0x64
 801f958:	7852      	ldrb	r2, [r2, #1]
 801f95a:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 801f95e:	f1be 0f09 	cmp.w	lr, #9
 801f962:	d939      	bls.n	801f9d8 <_strtod_l+0x340>
 801f964:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 801f966:	1a76      	subs	r6, r6, r1
 801f968:	2e08      	cmp	r6, #8
 801f96a:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 801f96e:	dc03      	bgt.n	801f978 <_strtod_l+0x2e0>
 801f970:	990e      	ldr	r1, [sp, #56]	@ 0x38
 801f972:	4588      	cmp	r8, r1
 801f974:	bfa8      	it	ge
 801f976:	4688      	movge	r8, r1
 801f978:	f1bc 0f00 	cmp.w	ip, #0
 801f97c:	d001      	beq.n	801f982 <_strtod_l+0x2ea>
 801f97e:	f1c8 0800 	rsb	r8, r8, #0
 801f982:	2d00      	cmp	r5, #0
 801f984:	d14e      	bne.n	801fa24 <_strtod_l+0x38c>
 801f986:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801f988:	4308      	orrs	r0, r1
 801f98a:	f47f aebe 	bne.w	801f70a <_strtod_l+0x72>
 801f98e:	2b00      	cmp	r3, #0
 801f990:	f47f aed6 	bne.w	801f740 <_strtod_l+0xa8>
 801f994:	2a69      	cmp	r2, #105	@ 0x69
 801f996:	d028      	beq.n	801f9ea <_strtod_l+0x352>
 801f998:	dc25      	bgt.n	801f9e6 <_strtod_l+0x34e>
 801f99a:	2a49      	cmp	r2, #73	@ 0x49
 801f99c:	d025      	beq.n	801f9ea <_strtod_l+0x352>
 801f99e:	2a4e      	cmp	r2, #78	@ 0x4e
 801f9a0:	f47f aece 	bne.w	801f740 <_strtod_l+0xa8>
 801f9a4:	499b      	ldr	r1, [pc, #620]	@ (801fc14 <_strtod_l+0x57c>)
 801f9a6:	a819      	add	r0, sp, #100	@ 0x64
 801f9a8:	f001 f9c6 	bl	8020d38 <__match>
 801f9ac:	2800      	cmp	r0, #0
 801f9ae:	f43f aec7 	beq.w	801f740 <_strtod_l+0xa8>
 801f9b2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801f9b4:	781b      	ldrb	r3, [r3, #0]
 801f9b6:	2b28      	cmp	r3, #40	@ 0x28
 801f9b8:	d12e      	bne.n	801fa18 <_strtod_l+0x380>
 801f9ba:	4997      	ldr	r1, [pc, #604]	@ (801fc18 <_strtod_l+0x580>)
 801f9bc:	aa1c      	add	r2, sp, #112	@ 0x70
 801f9be:	a819      	add	r0, sp, #100	@ 0x64
 801f9c0:	f001 f9ce 	bl	8020d60 <__hexnan>
 801f9c4:	2805      	cmp	r0, #5
 801f9c6:	d127      	bne.n	801fa18 <_strtod_l+0x380>
 801f9c8:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801f9ca:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 801f9ce:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 801f9d2:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 801f9d6:	e698      	b.n	801f70a <_strtod_l+0x72>
 801f9d8:	990e      	ldr	r1, [sp, #56]	@ 0x38
 801f9da:	fb08 2101 	mla	r1, r8, r1, r2
 801f9de:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 801f9e2:	920e      	str	r2, [sp, #56]	@ 0x38
 801f9e4:	e7b5      	b.n	801f952 <_strtod_l+0x2ba>
 801f9e6:	2a6e      	cmp	r2, #110	@ 0x6e
 801f9e8:	e7da      	b.n	801f9a0 <_strtod_l+0x308>
 801f9ea:	498c      	ldr	r1, [pc, #560]	@ (801fc1c <_strtod_l+0x584>)
 801f9ec:	a819      	add	r0, sp, #100	@ 0x64
 801f9ee:	f001 f9a3 	bl	8020d38 <__match>
 801f9f2:	2800      	cmp	r0, #0
 801f9f4:	f43f aea4 	beq.w	801f740 <_strtod_l+0xa8>
 801f9f8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801f9fa:	4989      	ldr	r1, [pc, #548]	@ (801fc20 <_strtod_l+0x588>)
 801f9fc:	3b01      	subs	r3, #1
 801f9fe:	a819      	add	r0, sp, #100	@ 0x64
 801fa00:	9319      	str	r3, [sp, #100]	@ 0x64
 801fa02:	f001 f999 	bl	8020d38 <__match>
 801fa06:	b910      	cbnz	r0, 801fa0e <_strtod_l+0x376>
 801fa08:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801fa0a:	3301      	adds	r3, #1
 801fa0c:	9319      	str	r3, [sp, #100]	@ 0x64
 801fa0e:	f8df b220 	ldr.w	fp, [pc, #544]	@ 801fc30 <_strtod_l+0x598>
 801fa12:	f04f 0a00 	mov.w	sl, #0
 801fa16:	e678      	b.n	801f70a <_strtod_l+0x72>
 801fa18:	4882      	ldr	r0, [pc, #520]	@ (801fc24 <_strtod_l+0x58c>)
 801fa1a:	f000 fec9 	bl	80207b0 <nan>
 801fa1e:	ec5b ab10 	vmov	sl, fp, d0
 801fa22:	e672      	b.n	801f70a <_strtod_l+0x72>
 801fa24:	eba8 0309 	sub.w	r3, r8, r9
 801fa28:	980a      	ldr	r0, [sp, #40]	@ 0x28
 801fa2a:	9309      	str	r3, [sp, #36]	@ 0x24
 801fa2c:	2f00      	cmp	r7, #0
 801fa2e:	bf08      	it	eq
 801fa30:	462f      	moveq	r7, r5
 801fa32:	2d10      	cmp	r5, #16
 801fa34:	462c      	mov	r4, r5
 801fa36:	bfa8      	it	ge
 801fa38:	2410      	movge	r4, #16
 801fa3a:	f7e0 fd63 	bl	8000504 <__aeabi_ui2d>
 801fa3e:	2d09      	cmp	r5, #9
 801fa40:	4682      	mov	sl, r0
 801fa42:	468b      	mov	fp, r1
 801fa44:	dc13      	bgt.n	801fa6e <_strtod_l+0x3d6>
 801fa46:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801fa48:	2b00      	cmp	r3, #0
 801fa4a:	f43f ae5e 	beq.w	801f70a <_strtod_l+0x72>
 801fa4e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801fa50:	dd78      	ble.n	801fb44 <_strtod_l+0x4ac>
 801fa52:	2b16      	cmp	r3, #22
 801fa54:	dc5f      	bgt.n	801fb16 <_strtod_l+0x47e>
 801fa56:	4974      	ldr	r1, [pc, #464]	@ (801fc28 <_strtod_l+0x590>)
 801fa58:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 801fa5c:	e9d1 0100 	ldrd	r0, r1, [r1]
 801fa60:	4652      	mov	r2, sl
 801fa62:	465b      	mov	r3, fp
 801fa64:	f7e0 fdc8 	bl	80005f8 <__aeabi_dmul>
 801fa68:	4682      	mov	sl, r0
 801fa6a:	468b      	mov	fp, r1
 801fa6c:	e64d      	b.n	801f70a <_strtod_l+0x72>
 801fa6e:	4b6e      	ldr	r3, [pc, #440]	@ (801fc28 <_strtod_l+0x590>)
 801fa70:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801fa74:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 801fa78:	f7e0 fdbe 	bl	80005f8 <__aeabi_dmul>
 801fa7c:	4682      	mov	sl, r0
 801fa7e:	9808      	ldr	r0, [sp, #32]
 801fa80:	468b      	mov	fp, r1
 801fa82:	f7e0 fd3f 	bl	8000504 <__aeabi_ui2d>
 801fa86:	4602      	mov	r2, r0
 801fa88:	460b      	mov	r3, r1
 801fa8a:	4650      	mov	r0, sl
 801fa8c:	4659      	mov	r1, fp
 801fa8e:	f7e0 fbfd 	bl	800028c <__adddf3>
 801fa92:	2d0f      	cmp	r5, #15
 801fa94:	4682      	mov	sl, r0
 801fa96:	468b      	mov	fp, r1
 801fa98:	ddd5      	ble.n	801fa46 <_strtod_l+0x3ae>
 801fa9a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801fa9c:	1b2c      	subs	r4, r5, r4
 801fa9e:	441c      	add	r4, r3
 801faa0:	2c00      	cmp	r4, #0
 801faa2:	f340 8096 	ble.w	801fbd2 <_strtod_l+0x53a>
 801faa6:	f014 030f 	ands.w	r3, r4, #15
 801faaa:	d00a      	beq.n	801fac2 <_strtod_l+0x42a>
 801faac:	495e      	ldr	r1, [pc, #376]	@ (801fc28 <_strtod_l+0x590>)
 801faae:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 801fab2:	4652      	mov	r2, sl
 801fab4:	465b      	mov	r3, fp
 801fab6:	e9d1 0100 	ldrd	r0, r1, [r1]
 801faba:	f7e0 fd9d 	bl	80005f8 <__aeabi_dmul>
 801fabe:	4682      	mov	sl, r0
 801fac0:	468b      	mov	fp, r1
 801fac2:	f034 040f 	bics.w	r4, r4, #15
 801fac6:	d073      	beq.n	801fbb0 <_strtod_l+0x518>
 801fac8:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 801facc:	dd48      	ble.n	801fb60 <_strtod_l+0x4c8>
 801face:	2400      	movs	r4, #0
 801fad0:	46a0      	mov	r8, r4
 801fad2:	940a      	str	r4, [sp, #40]	@ 0x28
 801fad4:	46a1      	mov	r9, r4
 801fad6:	9a05      	ldr	r2, [sp, #20]
 801fad8:	f8df b154 	ldr.w	fp, [pc, #340]	@ 801fc30 <_strtod_l+0x598>
 801fadc:	2322      	movs	r3, #34	@ 0x22
 801fade:	6013      	str	r3, [r2, #0]
 801fae0:	f04f 0a00 	mov.w	sl, #0
 801fae4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801fae6:	2b00      	cmp	r3, #0
 801fae8:	f43f ae0f 	beq.w	801f70a <_strtod_l+0x72>
 801faec:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801faee:	9805      	ldr	r0, [sp, #20]
 801faf0:	f7ff f942 	bl	801ed78 <_Bfree>
 801faf4:	9805      	ldr	r0, [sp, #20]
 801faf6:	4649      	mov	r1, r9
 801faf8:	f7ff f93e 	bl	801ed78 <_Bfree>
 801fafc:	9805      	ldr	r0, [sp, #20]
 801fafe:	4641      	mov	r1, r8
 801fb00:	f7ff f93a 	bl	801ed78 <_Bfree>
 801fb04:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801fb06:	9805      	ldr	r0, [sp, #20]
 801fb08:	f7ff f936 	bl	801ed78 <_Bfree>
 801fb0c:	9805      	ldr	r0, [sp, #20]
 801fb0e:	4621      	mov	r1, r4
 801fb10:	f7ff f932 	bl	801ed78 <_Bfree>
 801fb14:	e5f9      	b.n	801f70a <_strtod_l+0x72>
 801fb16:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801fb18:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 801fb1c:	4293      	cmp	r3, r2
 801fb1e:	dbbc      	blt.n	801fa9a <_strtod_l+0x402>
 801fb20:	4c41      	ldr	r4, [pc, #260]	@ (801fc28 <_strtod_l+0x590>)
 801fb22:	f1c5 050f 	rsb	r5, r5, #15
 801fb26:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 801fb2a:	4652      	mov	r2, sl
 801fb2c:	465b      	mov	r3, fp
 801fb2e:	e9d1 0100 	ldrd	r0, r1, [r1]
 801fb32:	f7e0 fd61 	bl	80005f8 <__aeabi_dmul>
 801fb36:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801fb38:	1b5d      	subs	r5, r3, r5
 801fb3a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 801fb3e:	e9d4 2300 	ldrd	r2, r3, [r4]
 801fb42:	e78f      	b.n	801fa64 <_strtod_l+0x3cc>
 801fb44:	3316      	adds	r3, #22
 801fb46:	dba8      	blt.n	801fa9a <_strtod_l+0x402>
 801fb48:	4b37      	ldr	r3, [pc, #220]	@ (801fc28 <_strtod_l+0x590>)
 801fb4a:	eba9 0808 	sub.w	r8, r9, r8
 801fb4e:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 801fb52:	e9d8 2300 	ldrd	r2, r3, [r8]
 801fb56:	4650      	mov	r0, sl
 801fb58:	4659      	mov	r1, fp
 801fb5a:	f7e0 fe77 	bl	800084c <__aeabi_ddiv>
 801fb5e:	e783      	b.n	801fa68 <_strtod_l+0x3d0>
 801fb60:	4b32      	ldr	r3, [pc, #200]	@ (801fc2c <_strtod_l+0x594>)
 801fb62:	9308      	str	r3, [sp, #32]
 801fb64:	2300      	movs	r3, #0
 801fb66:	1124      	asrs	r4, r4, #4
 801fb68:	4650      	mov	r0, sl
 801fb6a:	4659      	mov	r1, fp
 801fb6c:	461e      	mov	r6, r3
 801fb6e:	2c01      	cmp	r4, #1
 801fb70:	dc21      	bgt.n	801fbb6 <_strtod_l+0x51e>
 801fb72:	b10b      	cbz	r3, 801fb78 <_strtod_l+0x4e0>
 801fb74:	4682      	mov	sl, r0
 801fb76:	468b      	mov	fp, r1
 801fb78:	492c      	ldr	r1, [pc, #176]	@ (801fc2c <_strtod_l+0x594>)
 801fb7a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 801fb7e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 801fb82:	4652      	mov	r2, sl
 801fb84:	465b      	mov	r3, fp
 801fb86:	e9d1 0100 	ldrd	r0, r1, [r1]
 801fb8a:	f7e0 fd35 	bl	80005f8 <__aeabi_dmul>
 801fb8e:	4b28      	ldr	r3, [pc, #160]	@ (801fc30 <_strtod_l+0x598>)
 801fb90:	460a      	mov	r2, r1
 801fb92:	400b      	ands	r3, r1
 801fb94:	4927      	ldr	r1, [pc, #156]	@ (801fc34 <_strtod_l+0x59c>)
 801fb96:	428b      	cmp	r3, r1
 801fb98:	4682      	mov	sl, r0
 801fb9a:	d898      	bhi.n	801face <_strtod_l+0x436>
 801fb9c:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 801fba0:	428b      	cmp	r3, r1
 801fba2:	bf86      	itte	hi
 801fba4:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 801fc38 <_strtod_l+0x5a0>
 801fba8:	f04f 3aff 	movhi.w	sl, #4294967295	@ 0xffffffff
 801fbac:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 801fbb0:	2300      	movs	r3, #0
 801fbb2:	9308      	str	r3, [sp, #32]
 801fbb4:	e07a      	b.n	801fcac <_strtod_l+0x614>
 801fbb6:	07e2      	lsls	r2, r4, #31
 801fbb8:	d505      	bpl.n	801fbc6 <_strtod_l+0x52e>
 801fbba:	9b08      	ldr	r3, [sp, #32]
 801fbbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 801fbc0:	f7e0 fd1a 	bl	80005f8 <__aeabi_dmul>
 801fbc4:	2301      	movs	r3, #1
 801fbc6:	9a08      	ldr	r2, [sp, #32]
 801fbc8:	3208      	adds	r2, #8
 801fbca:	3601      	adds	r6, #1
 801fbcc:	1064      	asrs	r4, r4, #1
 801fbce:	9208      	str	r2, [sp, #32]
 801fbd0:	e7cd      	b.n	801fb6e <_strtod_l+0x4d6>
 801fbd2:	d0ed      	beq.n	801fbb0 <_strtod_l+0x518>
 801fbd4:	4264      	negs	r4, r4
 801fbd6:	f014 020f 	ands.w	r2, r4, #15
 801fbda:	d00a      	beq.n	801fbf2 <_strtod_l+0x55a>
 801fbdc:	4b12      	ldr	r3, [pc, #72]	@ (801fc28 <_strtod_l+0x590>)
 801fbde:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801fbe2:	4650      	mov	r0, sl
 801fbe4:	4659      	mov	r1, fp
 801fbe6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801fbea:	f7e0 fe2f 	bl	800084c <__aeabi_ddiv>
 801fbee:	4682      	mov	sl, r0
 801fbf0:	468b      	mov	fp, r1
 801fbf2:	1124      	asrs	r4, r4, #4
 801fbf4:	d0dc      	beq.n	801fbb0 <_strtod_l+0x518>
 801fbf6:	2c1f      	cmp	r4, #31
 801fbf8:	dd20      	ble.n	801fc3c <_strtod_l+0x5a4>
 801fbfa:	2400      	movs	r4, #0
 801fbfc:	46a0      	mov	r8, r4
 801fbfe:	940a      	str	r4, [sp, #40]	@ 0x28
 801fc00:	46a1      	mov	r9, r4
 801fc02:	9a05      	ldr	r2, [sp, #20]
 801fc04:	2322      	movs	r3, #34	@ 0x22
 801fc06:	f04f 0a00 	mov.w	sl, #0
 801fc0a:	f04f 0b00 	mov.w	fp, #0
 801fc0e:	6013      	str	r3, [r2, #0]
 801fc10:	e768      	b.n	801fae4 <_strtod_l+0x44c>
 801fc12:	bf00      	nop
 801fc14:	08021ffd 	.word	0x08021ffd
 801fc18:	08022214 	.word	0x08022214
 801fc1c:	08021ff5 	.word	0x08021ff5
 801fc20:	0802202c 	.word	0x0802202c
 801fc24:	080223bd 	.word	0x080223bd
 801fc28:	08022148 	.word	0x08022148
 801fc2c:	08022120 	.word	0x08022120
 801fc30:	7ff00000 	.word	0x7ff00000
 801fc34:	7ca00000 	.word	0x7ca00000
 801fc38:	7fefffff 	.word	0x7fefffff
 801fc3c:	f014 0310 	ands.w	r3, r4, #16
 801fc40:	bf18      	it	ne
 801fc42:	236a      	movne	r3, #106	@ 0x6a
 801fc44:	4ea9      	ldr	r6, [pc, #676]	@ (801feec <_strtod_l+0x854>)
 801fc46:	9308      	str	r3, [sp, #32]
 801fc48:	4650      	mov	r0, sl
 801fc4a:	4659      	mov	r1, fp
 801fc4c:	2300      	movs	r3, #0
 801fc4e:	07e2      	lsls	r2, r4, #31
 801fc50:	d504      	bpl.n	801fc5c <_strtod_l+0x5c4>
 801fc52:	e9d6 2300 	ldrd	r2, r3, [r6]
 801fc56:	f7e0 fccf 	bl	80005f8 <__aeabi_dmul>
 801fc5a:	2301      	movs	r3, #1
 801fc5c:	1064      	asrs	r4, r4, #1
 801fc5e:	f106 0608 	add.w	r6, r6, #8
 801fc62:	d1f4      	bne.n	801fc4e <_strtod_l+0x5b6>
 801fc64:	b10b      	cbz	r3, 801fc6a <_strtod_l+0x5d2>
 801fc66:	4682      	mov	sl, r0
 801fc68:	468b      	mov	fp, r1
 801fc6a:	9b08      	ldr	r3, [sp, #32]
 801fc6c:	b1b3      	cbz	r3, 801fc9c <_strtod_l+0x604>
 801fc6e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 801fc72:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 801fc76:	2b00      	cmp	r3, #0
 801fc78:	4659      	mov	r1, fp
 801fc7a:	dd0f      	ble.n	801fc9c <_strtod_l+0x604>
 801fc7c:	2b1f      	cmp	r3, #31
 801fc7e:	dd55      	ble.n	801fd2c <_strtod_l+0x694>
 801fc80:	2b34      	cmp	r3, #52	@ 0x34
 801fc82:	bfde      	ittt	le
 801fc84:	f04f 33ff 	movle.w	r3, #4294967295	@ 0xffffffff
 801fc88:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 801fc8c:	4093      	lslle	r3, r2
 801fc8e:	f04f 0a00 	mov.w	sl, #0
 801fc92:	bfcc      	ite	gt
 801fc94:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 801fc98:	ea03 0b01 	andle.w	fp, r3, r1
 801fc9c:	2200      	movs	r2, #0
 801fc9e:	2300      	movs	r3, #0
 801fca0:	4650      	mov	r0, sl
 801fca2:	4659      	mov	r1, fp
 801fca4:	f7e0 ff10 	bl	8000ac8 <__aeabi_dcmpeq>
 801fca8:	2800      	cmp	r0, #0
 801fcaa:	d1a6      	bne.n	801fbfa <_strtod_l+0x562>
 801fcac:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801fcae:	9300      	str	r3, [sp, #0]
 801fcb0:	990c      	ldr	r1, [sp, #48]	@ 0x30
 801fcb2:	9805      	ldr	r0, [sp, #20]
 801fcb4:	462b      	mov	r3, r5
 801fcb6:	463a      	mov	r2, r7
 801fcb8:	f7ff f8c6 	bl	801ee48 <__s2b>
 801fcbc:	900a      	str	r0, [sp, #40]	@ 0x28
 801fcbe:	2800      	cmp	r0, #0
 801fcc0:	f43f af05 	beq.w	801face <_strtod_l+0x436>
 801fcc4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801fcc6:	2a00      	cmp	r2, #0
 801fcc8:	eba9 0308 	sub.w	r3, r9, r8
 801fccc:	bfa8      	it	ge
 801fcce:	2300      	movge	r3, #0
 801fcd0:	9312      	str	r3, [sp, #72]	@ 0x48
 801fcd2:	2400      	movs	r4, #0
 801fcd4:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 801fcd8:	9316      	str	r3, [sp, #88]	@ 0x58
 801fcda:	46a0      	mov	r8, r4
 801fcdc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801fcde:	9805      	ldr	r0, [sp, #20]
 801fce0:	6859      	ldr	r1, [r3, #4]
 801fce2:	f7ff f809 	bl	801ecf8 <_Balloc>
 801fce6:	4681      	mov	r9, r0
 801fce8:	2800      	cmp	r0, #0
 801fcea:	f43f aef4 	beq.w	801fad6 <_strtod_l+0x43e>
 801fcee:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801fcf0:	691a      	ldr	r2, [r3, #16]
 801fcf2:	3202      	adds	r2, #2
 801fcf4:	f103 010c 	add.w	r1, r3, #12
 801fcf8:	0092      	lsls	r2, r2, #2
 801fcfa:	300c      	adds	r0, #12
 801fcfc:	f7fe f803 	bl	801dd06 <memcpy>
 801fd00:	ec4b ab10 	vmov	d0, sl, fp
 801fd04:	9805      	ldr	r0, [sp, #20]
 801fd06:	aa1c      	add	r2, sp, #112	@ 0x70
 801fd08:	a91b      	add	r1, sp, #108	@ 0x6c
 801fd0a:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 801fd0e:	f7ff fbd7 	bl	801f4c0 <__d2b>
 801fd12:	901a      	str	r0, [sp, #104]	@ 0x68
 801fd14:	2800      	cmp	r0, #0
 801fd16:	f43f aede 	beq.w	801fad6 <_strtod_l+0x43e>
 801fd1a:	9805      	ldr	r0, [sp, #20]
 801fd1c:	2101      	movs	r1, #1
 801fd1e:	f7ff f929 	bl	801ef74 <__i2b>
 801fd22:	4680      	mov	r8, r0
 801fd24:	b948      	cbnz	r0, 801fd3a <_strtod_l+0x6a2>
 801fd26:	f04f 0800 	mov.w	r8, #0
 801fd2a:	e6d4      	b.n	801fad6 <_strtod_l+0x43e>
 801fd2c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801fd30:	fa02 f303 	lsl.w	r3, r2, r3
 801fd34:	ea03 0a0a 	and.w	sl, r3, sl
 801fd38:	e7b0      	b.n	801fc9c <_strtod_l+0x604>
 801fd3a:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 801fd3c:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 801fd3e:	2d00      	cmp	r5, #0
 801fd40:	bfab      	itete	ge
 801fd42:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 801fd44:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 801fd46:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 801fd48:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 801fd4a:	bfac      	ite	ge
 801fd4c:	18ef      	addge	r7, r5, r3
 801fd4e:	1b5e      	sublt	r6, r3, r5
 801fd50:	9b08      	ldr	r3, [sp, #32]
 801fd52:	1aed      	subs	r5, r5, r3
 801fd54:	4415      	add	r5, r2
 801fd56:	4b66      	ldr	r3, [pc, #408]	@ (801fef0 <_strtod_l+0x858>)
 801fd58:	3d01      	subs	r5, #1
 801fd5a:	429d      	cmp	r5, r3
 801fd5c:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 801fd60:	da50      	bge.n	801fe04 <_strtod_l+0x76c>
 801fd62:	1b5b      	subs	r3, r3, r5
 801fd64:	2b1f      	cmp	r3, #31
 801fd66:	eba2 0203 	sub.w	r2, r2, r3
 801fd6a:	f04f 0101 	mov.w	r1, #1
 801fd6e:	dc3d      	bgt.n	801fdec <_strtod_l+0x754>
 801fd70:	fa01 f303 	lsl.w	r3, r1, r3
 801fd74:	9313      	str	r3, [sp, #76]	@ 0x4c
 801fd76:	2300      	movs	r3, #0
 801fd78:	9310      	str	r3, [sp, #64]	@ 0x40
 801fd7a:	18bd      	adds	r5, r7, r2
 801fd7c:	9b08      	ldr	r3, [sp, #32]
 801fd7e:	42af      	cmp	r7, r5
 801fd80:	4416      	add	r6, r2
 801fd82:	441e      	add	r6, r3
 801fd84:	463b      	mov	r3, r7
 801fd86:	bfa8      	it	ge
 801fd88:	462b      	movge	r3, r5
 801fd8a:	42b3      	cmp	r3, r6
 801fd8c:	bfa8      	it	ge
 801fd8e:	4633      	movge	r3, r6
 801fd90:	2b00      	cmp	r3, #0
 801fd92:	bfc2      	ittt	gt
 801fd94:	1aed      	subgt	r5, r5, r3
 801fd96:	1af6      	subgt	r6, r6, r3
 801fd98:	1aff      	subgt	r7, r7, r3
 801fd9a:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801fd9c:	2b00      	cmp	r3, #0
 801fd9e:	dd16      	ble.n	801fdce <_strtod_l+0x736>
 801fda0:	4641      	mov	r1, r8
 801fda2:	9805      	ldr	r0, [sp, #20]
 801fda4:	461a      	mov	r2, r3
 801fda6:	f7ff f9a5 	bl	801f0f4 <__pow5mult>
 801fdaa:	4680      	mov	r8, r0
 801fdac:	2800      	cmp	r0, #0
 801fdae:	d0ba      	beq.n	801fd26 <_strtod_l+0x68e>
 801fdb0:	4601      	mov	r1, r0
 801fdb2:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 801fdb4:	9805      	ldr	r0, [sp, #20]
 801fdb6:	f7ff f8f3 	bl	801efa0 <__multiply>
 801fdba:	900e      	str	r0, [sp, #56]	@ 0x38
 801fdbc:	2800      	cmp	r0, #0
 801fdbe:	f43f ae8a 	beq.w	801fad6 <_strtod_l+0x43e>
 801fdc2:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801fdc4:	9805      	ldr	r0, [sp, #20]
 801fdc6:	f7fe ffd7 	bl	801ed78 <_Bfree>
 801fdca:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801fdcc:	931a      	str	r3, [sp, #104]	@ 0x68
 801fdce:	2d00      	cmp	r5, #0
 801fdd0:	dc1d      	bgt.n	801fe0e <_strtod_l+0x776>
 801fdd2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801fdd4:	2b00      	cmp	r3, #0
 801fdd6:	dd23      	ble.n	801fe20 <_strtod_l+0x788>
 801fdd8:	4649      	mov	r1, r9
 801fdda:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 801fddc:	9805      	ldr	r0, [sp, #20]
 801fdde:	f7ff f989 	bl	801f0f4 <__pow5mult>
 801fde2:	4681      	mov	r9, r0
 801fde4:	b9e0      	cbnz	r0, 801fe20 <_strtod_l+0x788>
 801fde6:	f04f 0900 	mov.w	r9, #0
 801fdea:	e674      	b.n	801fad6 <_strtod_l+0x43e>
 801fdec:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 801fdf0:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 801fdf4:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 801fdf8:	35e2      	adds	r5, #226	@ 0xe2
 801fdfa:	fa01 f305 	lsl.w	r3, r1, r5
 801fdfe:	9310      	str	r3, [sp, #64]	@ 0x40
 801fe00:	9113      	str	r1, [sp, #76]	@ 0x4c
 801fe02:	e7ba      	b.n	801fd7a <_strtod_l+0x6e2>
 801fe04:	2300      	movs	r3, #0
 801fe06:	9310      	str	r3, [sp, #64]	@ 0x40
 801fe08:	2301      	movs	r3, #1
 801fe0a:	9313      	str	r3, [sp, #76]	@ 0x4c
 801fe0c:	e7b5      	b.n	801fd7a <_strtod_l+0x6e2>
 801fe0e:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801fe10:	9805      	ldr	r0, [sp, #20]
 801fe12:	462a      	mov	r2, r5
 801fe14:	f7ff f9c8 	bl	801f1a8 <__lshift>
 801fe18:	901a      	str	r0, [sp, #104]	@ 0x68
 801fe1a:	2800      	cmp	r0, #0
 801fe1c:	d1d9      	bne.n	801fdd2 <_strtod_l+0x73a>
 801fe1e:	e65a      	b.n	801fad6 <_strtod_l+0x43e>
 801fe20:	2e00      	cmp	r6, #0
 801fe22:	dd07      	ble.n	801fe34 <_strtod_l+0x79c>
 801fe24:	4649      	mov	r1, r9
 801fe26:	9805      	ldr	r0, [sp, #20]
 801fe28:	4632      	mov	r2, r6
 801fe2a:	f7ff f9bd 	bl	801f1a8 <__lshift>
 801fe2e:	4681      	mov	r9, r0
 801fe30:	2800      	cmp	r0, #0
 801fe32:	d0d8      	beq.n	801fde6 <_strtod_l+0x74e>
 801fe34:	2f00      	cmp	r7, #0
 801fe36:	dd08      	ble.n	801fe4a <_strtod_l+0x7b2>
 801fe38:	4641      	mov	r1, r8
 801fe3a:	9805      	ldr	r0, [sp, #20]
 801fe3c:	463a      	mov	r2, r7
 801fe3e:	f7ff f9b3 	bl	801f1a8 <__lshift>
 801fe42:	4680      	mov	r8, r0
 801fe44:	2800      	cmp	r0, #0
 801fe46:	f43f ae46 	beq.w	801fad6 <_strtod_l+0x43e>
 801fe4a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801fe4c:	9805      	ldr	r0, [sp, #20]
 801fe4e:	464a      	mov	r2, r9
 801fe50:	f7ff fa32 	bl	801f2b8 <__mdiff>
 801fe54:	4604      	mov	r4, r0
 801fe56:	2800      	cmp	r0, #0
 801fe58:	f43f ae3d 	beq.w	801fad6 <_strtod_l+0x43e>
 801fe5c:	68c3      	ldr	r3, [r0, #12]
 801fe5e:	930f      	str	r3, [sp, #60]	@ 0x3c
 801fe60:	2300      	movs	r3, #0
 801fe62:	60c3      	str	r3, [r0, #12]
 801fe64:	4641      	mov	r1, r8
 801fe66:	f7ff fa0b 	bl	801f280 <__mcmp>
 801fe6a:	2800      	cmp	r0, #0
 801fe6c:	da46      	bge.n	801fefc <_strtod_l+0x864>
 801fe6e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801fe70:	ea53 030a 	orrs.w	r3, r3, sl
 801fe74:	d16c      	bne.n	801ff50 <_strtod_l+0x8b8>
 801fe76:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801fe7a:	2b00      	cmp	r3, #0
 801fe7c:	d168      	bne.n	801ff50 <_strtod_l+0x8b8>
 801fe7e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 801fe82:	0d1b      	lsrs	r3, r3, #20
 801fe84:	051b      	lsls	r3, r3, #20
 801fe86:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 801fe8a:	d961      	bls.n	801ff50 <_strtod_l+0x8b8>
 801fe8c:	6963      	ldr	r3, [r4, #20]
 801fe8e:	b913      	cbnz	r3, 801fe96 <_strtod_l+0x7fe>
 801fe90:	6923      	ldr	r3, [r4, #16]
 801fe92:	2b01      	cmp	r3, #1
 801fe94:	dd5c      	ble.n	801ff50 <_strtod_l+0x8b8>
 801fe96:	4621      	mov	r1, r4
 801fe98:	2201      	movs	r2, #1
 801fe9a:	9805      	ldr	r0, [sp, #20]
 801fe9c:	f7ff f984 	bl	801f1a8 <__lshift>
 801fea0:	4641      	mov	r1, r8
 801fea2:	4604      	mov	r4, r0
 801fea4:	f7ff f9ec 	bl	801f280 <__mcmp>
 801fea8:	2800      	cmp	r0, #0
 801feaa:	dd51      	ble.n	801ff50 <_strtod_l+0x8b8>
 801feac:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 801feb0:	9a08      	ldr	r2, [sp, #32]
 801feb2:	0d1b      	lsrs	r3, r3, #20
 801feb4:	051b      	lsls	r3, r3, #20
 801feb6:	2a00      	cmp	r2, #0
 801feb8:	d06b      	beq.n	801ff92 <_strtod_l+0x8fa>
 801feba:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 801febe:	d868      	bhi.n	801ff92 <_strtod_l+0x8fa>
 801fec0:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 801fec4:	f67f ae9d 	bls.w	801fc02 <_strtod_l+0x56a>
 801fec8:	4b0a      	ldr	r3, [pc, #40]	@ (801fef4 <_strtod_l+0x85c>)
 801feca:	4650      	mov	r0, sl
 801fecc:	4659      	mov	r1, fp
 801fece:	2200      	movs	r2, #0
 801fed0:	f7e0 fb92 	bl	80005f8 <__aeabi_dmul>
 801fed4:	4b08      	ldr	r3, [pc, #32]	@ (801fef8 <_strtod_l+0x860>)
 801fed6:	400b      	ands	r3, r1
 801fed8:	4682      	mov	sl, r0
 801feda:	468b      	mov	fp, r1
 801fedc:	2b00      	cmp	r3, #0
 801fede:	f47f ae05 	bne.w	801faec <_strtod_l+0x454>
 801fee2:	9a05      	ldr	r2, [sp, #20]
 801fee4:	2322      	movs	r3, #34	@ 0x22
 801fee6:	6013      	str	r3, [r2, #0]
 801fee8:	e600      	b.n	801faec <_strtod_l+0x454>
 801feea:	bf00      	nop
 801feec:	08022240 	.word	0x08022240
 801fef0:	fffffc02 	.word	0xfffffc02
 801fef4:	39500000 	.word	0x39500000
 801fef8:	7ff00000 	.word	0x7ff00000
 801fefc:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 801ff00:	d165      	bne.n	801ffce <_strtod_l+0x936>
 801ff02:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801ff04:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801ff08:	b35a      	cbz	r2, 801ff62 <_strtod_l+0x8ca>
 801ff0a:	4a9f      	ldr	r2, [pc, #636]	@ (8020188 <_strtod_l+0xaf0>)
 801ff0c:	4293      	cmp	r3, r2
 801ff0e:	d12b      	bne.n	801ff68 <_strtod_l+0x8d0>
 801ff10:	9b08      	ldr	r3, [sp, #32]
 801ff12:	4651      	mov	r1, sl
 801ff14:	b303      	cbz	r3, 801ff58 <_strtod_l+0x8c0>
 801ff16:	4b9d      	ldr	r3, [pc, #628]	@ (802018c <_strtod_l+0xaf4>)
 801ff18:	465a      	mov	r2, fp
 801ff1a:	4013      	ands	r3, r2
 801ff1c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 801ff20:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801ff24:	d81b      	bhi.n	801ff5e <_strtod_l+0x8c6>
 801ff26:	0d1b      	lsrs	r3, r3, #20
 801ff28:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 801ff2c:	fa02 f303 	lsl.w	r3, r2, r3
 801ff30:	4299      	cmp	r1, r3
 801ff32:	d119      	bne.n	801ff68 <_strtod_l+0x8d0>
 801ff34:	4b96      	ldr	r3, [pc, #600]	@ (8020190 <_strtod_l+0xaf8>)
 801ff36:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801ff38:	429a      	cmp	r2, r3
 801ff3a:	d102      	bne.n	801ff42 <_strtod_l+0x8aa>
 801ff3c:	3101      	adds	r1, #1
 801ff3e:	f43f adca 	beq.w	801fad6 <_strtod_l+0x43e>
 801ff42:	4b92      	ldr	r3, [pc, #584]	@ (802018c <_strtod_l+0xaf4>)
 801ff44:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801ff46:	401a      	ands	r2, r3
 801ff48:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 801ff4c:	f04f 0a00 	mov.w	sl, #0
 801ff50:	9b08      	ldr	r3, [sp, #32]
 801ff52:	2b00      	cmp	r3, #0
 801ff54:	d1b8      	bne.n	801fec8 <_strtod_l+0x830>
 801ff56:	e5c9      	b.n	801faec <_strtod_l+0x454>
 801ff58:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801ff5c:	e7e8      	b.n	801ff30 <_strtod_l+0x898>
 801ff5e:	4613      	mov	r3, r2
 801ff60:	e7e6      	b.n	801ff30 <_strtod_l+0x898>
 801ff62:	ea53 030a 	orrs.w	r3, r3, sl
 801ff66:	d0a1      	beq.n	801feac <_strtod_l+0x814>
 801ff68:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801ff6a:	b1db      	cbz	r3, 801ffa4 <_strtod_l+0x90c>
 801ff6c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801ff6e:	4213      	tst	r3, r2
 801ff70:	d0ee      	beq.n	801ff50 <_strtod_l+0x8b8>
 801ff72:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801ff74:	9a08      	ldr	r2, [sp, #32]
 801ff76:	4650      	mov	r0, sl
 801ff78:	4659      	mov	r1, fp
 801ff7a:	b1bb      	cbz	r3, 801ffac <_strtod_l+0x914>
 801ff7c:	f7ff fb6e 	bl	801f65c <sulp>
 801ff80:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801ff84:	ec53 2b10 	vmov	r2, r3, d0
 801ff88:	f7e0 f980 	bl	800028c <__adddf3>
 801ff8c:	4682      	mov	sl, r0
 801ff8e:	468b      	mov	fp, r1
 801ff90:	e7de      	b.n	801ff50 <_strtod_l+0x8b8>
 801ff92:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 801ff96:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 801ff9a:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 801ff9e:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 801ffa2:	e7d5      	b.n	801ff50 <_strtod_l+0x8b8>
 801ffa4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801ffa6:	ea13 0f0a 	tst.w	r3, sl
 801ffaa:	e7e1      	b.n	801ff70 <_strtod_l+0x8d8>
 801ffac:	f7ff fb56 	bl	801f65c <sulp>
 801ffb0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801ffb4:	ec53 2b10 	vmov	r2, r3, d0
 801ffb8:	f7e0 f966 	bl	8000288 <__aeabi_dsub>
 801ffbc:	2200      	movs	r2, #0
 801ffbe:	2300      	movs	r3, #0
 801ffc0:	4682      	mov	sl, r0
 801ffc2:	468b      	mov	fp, r1
 801ffc4:	f7e0 fd80 	bl	8000ac8 <__aeabi_dcmpeq>
 801ffc8:	2800      	cmp	r0, #0
 801ffca:	d0c1      	beq.n	801ff50 <_strtod_l+0x8b8>
 801ffcc:	e619      	b.n	801fc02 <_strtod_l+0x56a>
 801ffce:	4641      	mov	r1, r8
 801ffd0:	4620      	mov	r0, r4
 801ffd2:	f7ff facd 	bl	801f570 <__ratio>
 801ffd6:	ec57 6b10 	vmov	r6, r7, d0
 801ffda:	2200      	movs	r2, #0
 801ffdc:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 801ffe0:	4630      	mov	r0, r6
 801ffe2:	4639      	mov	r1, r7
 801ffe4:	f7e0 fd84 	bl	8000af0 <__aeabi_dcmple>
 801ffe8:	2800      	cmp	r0, #0
 801ffea:	d06f      	beq.n	80200cc <_strtod_l+0xa34>
 801ffec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801ffee:	2b00      	cmp	r3, #0
 801fff0:	d17a      	bne.n	80200e8 <_strtod_l+0xa50>
 801fff2:	f1ba 0f00 	cmp.w	sl, #0
 801fff6:	d158      	bne.n	80200aa <_strtod_l+0xa12>
 801fff8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801fffa:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801fffe:	2b00      	cmp	r3, #0
 8020000:	d15a      	bne.n	80200b8 <_strtod_l+0xa20>
 8020002:	4b64      	ldr	r3, [pc, #400]	@ (8020194 <_strtod_l+0xafc>)
 8020004:	2200      	movs	r2, #0
 8020006:	4630      	mov	r0, r6
 8020008:	4639      	mov	r1, r7
 802000a:	f7e0 fd67 	bl	8000adc <__aeabi_dcmplt>
 802000e:	2800      	cmp	r0, #0
 8020010:	d159      	bne.n	80200c6 <_strtod_l+0xa2e>
 8020012:	4630      	mov	r0, r6
 8020014:	4639      	mov	r1, r7
 8020016:	4b60      	ldr	r3, [pc, #384]	@ (8020198 <_strtod_l+0xb00>)
 8020018:	2200      	movs	r2, #0
 802001a:	f7e0 faed 	bl	80005f8 <__aeabi_dmul>
 802001e:	4606      	mov	r6, r0
 8020020:	460f      	mov	r7, r1
 8020022:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8020026:	9606      	str	r6, [sp, #24]
 8020028:	9307      	str	r3, [sp, #28]
 802002a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 802002e:	4d57      	ldr	r5, [pc, #348]	@ (802018c <_strtod_l+0xaf4>)
 8020030:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8020034:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8020036:	401d      	ands	r5, r3
 8020038:	4b58      	ldr	r3, [pc, #352]	@ (802019c <_strtod_l+0xb04>)
 802003a:	429d      	cmp	r5, r3
 802003c:	f040 80b2 	bne.w	80201a4 <_strtod_l+0xb0c>
 8020040:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8020042:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8020046:	ec4b ab10 	vmov	d0, sl, fp
 802004a:	f7ff f9c9 	bl	801f3e0 <__ulp>
 802004e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8020052:	ec51 0b10 	vmov	r0, r1, d0
 8020056:	f7e0 facf 	bl	80005f8 <__aeabi_dmul>
 802005a:	4652      	mov	r2, sl
 802005c:	465b      	mov	r3, fp
 802005e:	f7e0 f915 	bl	800028c <__adddf3>
 8020062:	460b      	mov	r3, r1
 8020064:	4949      	ldr	r1, [pc, #292]	@ (802018c <_strtod_l+0xaf4>)
 8020066:	4a4e      	ldr	r2, [pc, #312]	@ (80201a0 <_strtod_l+0xb08>)
 8020068:	4019      	ands	r1, r3
 802006a:	4291      	cmp	r1, r2
 802006c:	4682      	mov	sl, r0
 802006e:	d942      	bls.n	80200f6 <_strtod_l+0xa5e>
 8020070:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8020072:	4b47      	ldr	r3, [pc, #284]	@ (8020190 <_strtod_l+0xaf8>)
 8020074:	429a      	cmp	r2, r3
 8020076:	d103      	bne.n	8020080 <_strtod_l+0x9e8>
 8020078:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 802007a:	3301      	adds	r3, #1
 802007c:	f43f ad2b 	beq.w	801fad6 <_strtod_l+0x43e>
 8020080:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8020190 <_strtod_l+0xaf8>
 8020084:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 8020088:	991a      	ldr	r1, [sp, #104]	@ 0x68
 802008a:	9805      	ldr	r0, [sp, #20]
 802008c:	f7fe fe74 	bl	801ed78 <_Bfree>
 8020090:	9805      	ldr	r0, [sp, #20]
 8020092:	4649      	mov	r1, r9
 8020094:	f7fe fe70 	bl	801ed78 <_Bfree>
 8020098:	9805      	ldr	r0, [sp, #20]
 802009a:	4641      	mov	r1, r8
 802009c:	f7fe fe6c 	bl	801ed78 <_Bfree>
 80200a0:	9805      	ldr	r0, [sp, #20]
 80200a2:	4621      	mov	r1, r4
 80200a4:	f7fe fe68 	bl	801ed78 <_Bfree>
 80200a8:	e618      	b.n	801fcdc <_strtod_l+0x644>
 80200aa:	f1ba 0f01 	cmp.w	sl, #1
 80200ae:	d103      	bne.n	80200b8 <_strtod_l+0xa20>
 80200b0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80200b2:	2b00      	cmp	r3, #0
 80200b4:	f43f ada5 	beq.w	801fc02 <_strtod_l+0x56a>
 80200b8:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8020168 <_strtod_l+0xad0>
 80200bc:	4f35      	ldr	r7, [pc, #212]	@ (8020194 <_strtod_l+0xafc>)
 80200be:	ed8d 7b06 	vstr	d7, [sp, #24]
 80200c2:	2600      	movs	r6, #0
 80200c4:	e7b1      	b.n	802002a <_strtod_l+0x992>
 80200c6:	4f34      	ldr	r7, [pc, #208]	@ (8020198 <_strtod_l+0xb00>)
 80200c8:	2600      	movs	r6, #0
 80200ca:	e7aa      	b.n	8020022 <_strtod_l+0x98a>
 80200cc:	4b32      	ldr	r3, [pc, #200]	@ (8020198 <_strtod_l+0xb00>)
 80200ce:	4630      	mov	r0, r6
 80200d0:	4639      	mov	r1, r7
 80200d2:	2200      	movs	r2, #0
 80200d4:	f7e0 fa90 	bl	80005f8 <__aeabi_dmul>
 80200d8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80200da:	4606      	mov	r6, r0
 80200dc:	460f      	mov	r7, r1
 80200de:	2b00      	cmp	r3, #0
 80200e0:	d09f      	beq.n	8020022 <_strtod_l+0x98a>
 80200e2:	e9cd 6706 	strd	r6, r7, [sp, #24]
 80200e6:	e7a0      	b.n	802002a <_strtod_l+0x992>
 80200e8:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8020170 <_strtod_l+0xad8>
 80200ec:	ed8d 7b06 	vstr	d7, [sp, #24]
 80200f0:	ec57 6b17 	vmov	r6, r7, d7
 80200f4:	e799      	b.n	802002a <_strtod_l+0x992>
 80200f6:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 80200fa:	9b08      	ldr	r3, [sp, #32]
 80200fc:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8020100:	2b00      	cmp	r3, #0
 8020102:	d1c1      	bne.n	8020088 <_strtod_l+0x9f0>
 8020104:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8020108:	0d1b      	lsrs	r3, r3, #20
 802010a:	051b      	lsls	r3, r3, #20
 802010c:	429d      	cmp	r5, r3
 802010e:	d1bb      	bne.n	8020088 <_strtod_l+0x9f0>
 8020110:	4630      	mov	r0, r6
 8020112:	4639      	mov	r1, r7
 8020114:	f7e0 fede 	bl	8000ed4 <__aeabi_d2lz>
 8020118:	f7e0 fa40 	bl	800059c <__aeabi_l2d>
 802011c:	4602      	mov	r2, r0
 802011e:	460b      	mov	r3, r1
 8020120:	4630      	mov	r0, r6
 8020122:	4639      	mov	r1, r7
 8020124:	f7e0 f8b0 	bl	8000288 <__aeabi_dsub>
 8020128:	460b      	mov	r3, r1
 802012a:	4602      	mov	r2, r0
 802012c:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8020130:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8020134:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8020136:	ea46 060a 	orr.w	r6, r6, sl
 802013a:	431e      	orrs	r6, r3
 802013c:	d06f      	beq.n	802021e <_strtod_l+0xb86>
 802013e:	a30e      	add	r3, pc, #56	@ (adr r3, 8020178 <_strtod_l+0xae0>)
 8020140:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020144:	f7e0 fcca 	bl	8000adc <__aeabi_dcmplt>
 8020148:	2800      	cmp	r0, #0
 802014a:	f47f accf 	bne.w	801faec <_strtod_l+0x454>
 802014e:	a30c      	add	r3, pc, #48	@ (adr r3, 8020180 <_strtod_l+0xae8>)
 8020150:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020154:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8020158:	f7e0 fcde 	bl	8000b18 <__aeabi_dcmpgt>
 802015c:	2800      	cmp	r0, #0
 802015e:	d093      	beq.n	8020088 <_strtod_l+0x9f0>
 8020160:	e4c4      	b.n	801faec <_strtod_l+0x454>
 8020162:	bf00      	nop
 8020164:	f3af 8000 	nop.w
 8020168:	00000000 	.word	0x00000000
 802016c:	bff00000 	.word	0xbff00000
 8020170:	00000000 	.word	0x00000000
 8020174:	3ff00000 	.word	0x3ff00000
 8020178:	94a03595 	.word	0x94a03595
 802017c:	3fdfffff 	.word	0x3fdfffff
 8020180:	35afe535 	.word	0x35afe535
 8020184:	3fe00000 	.word	0x3fe00000
 8020188:	000fffff 	.word	0x000fffff
 802018c:	7ff00000 	.word	0x7ff00000
 8020190:	7fefffff 	.word	0x7fefffff
 8020194:	3ff00000 	.word	0x3ff00000
 8020198:	3fe00000 	.word	0x3fe00000
 802019c:	7fe00000 	.word	0x7fe00000
 80201a0:	7c9fffff 	.word	0x7c9fffff
 80201a4:	9b08      	ldr	r3, [sp, #32]
 80201a6:	b323      	cbz	r3, 80201f2 <_strtod_l+0xb5a>
 80201a8:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 80201ac:	d821      	bhi.n	80201f2 <_strtod_l+0xb5a>
 80201ae:	a328      	add	r3, pc, #160	@ (adr r3, 8020250 <_strtod_l+0xbb8>)
 80201b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80201b4:	4630      	mov	r0, r6
 80201b6:	4639      	mov	r1, r7
 80201b8:	f7e0 fc9a 	bl	8000af0 <__aeabi_dcmple>
 80201bc:	b1a0      	cbz	r0, 80201e8 <_strtod_l+0xb50>
 80201be:	4639      	mov	r1, r7
 80201c0:	4630      	mov	r0, r6
 80201c2:	f7e0 fcf1 	bl	8000ba8 <__aeabi_d2uiz>
 80201c6:	2801      	cmp	r0, #1
 80201c8:	bf38      	it	cc
 80201ca:	2001      	movcc	r0, #1
 80201cc:	f7e0 f99a 	bl	8000504 <__aeabi_ui2d>
 80201d0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80201d2:	4606      	mov	r6, r0
 80201d4:	460f      	mov	r7, r1
 80201d6:	b9fb      	cbnz	r3, 8020218 <_strtod_l+0xb80>
 80201d8:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80201dc:	9014      	str	r0, [sp, #80]	@ 0x50
 80201de:	9315      	str	r3, [sp, #84]	@ 0x54
 80201e0:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 80201e4:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 80201e8:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80201ea:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 80201ee:	1b5b      	subs	r3, r3, r5
 80201f0:	9311      	str	r3, [sp, #68]	@ 0x44
 80201f2:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 80201f6:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 80201fa:	f7ff f8f1 	bl	801f3e0 <__ulp>
 80201fe:	4650      	mov	r0, sl
 8020200:	ec53 2b10 	vmov	r2, r3, d0
 8020204:	4659      	mov	r1, fp
 8020206:	f7e0 f9f7 	bl	80005f8 <__aeabi_dmul>
 802020a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 802020e:	f7e0 f83d 	bl	800028c <__adddf3>
 8020212:	4682      	mov	sl, r0
 8020214:	468b      	mov	fp, r1
 8020216:	e770      	b.n	80200fa <_strtod_l+0xa62>
 8020218:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 802021c:	e7e0      	b.n	80201e0 <_strtod_l+0xb48>
 802021e:	a30e      	add	r3, pc, #56	@ (adr r3, 8020258 <_strtod_l+0xbc0>)
 8020220:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020224:	f7e0 fc5a 	bl	8000adc <__aeabi_dcmplt>
 8020228:	e798      	b.n	802015c <_strtod_l+0xac4>
 802022a:	2300      	movs	r3, #0
 802022c:	930b      	str	r3, [sp, #44]	@ 0x2c
 802022e:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8020230:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8020232:	6013      	str	r3, [r2, #0]
 8020234:	f7ff ba6d 	b.w	801f712 <_strtod_l+0x7a>
 8020238:	2a65      	cmp	r2, #101	@ 0x65
 802023a:	f43f ab66 	beq.w	801f90a <_strtod_l+0x272>
 802023e:	2a45      	cmp	r2, #69	@ 0x45
 8020240:	f43f ab63 	beq.w	801f90a <_strtod_l+0x272>
 8020244:	2301      	movs	r3, #1
 8020246:	f7ff bb9e 	b.w	801f986 <_strtod_l+0x2ee>
 802024a:	bf00      	nop
 802024c:	f3af 8000 	nop.w
 8020250:	ffc00000 	.word	0xffc00000
 8020254:	41dfffff 	.word	0x41dfffff
 8020258:	94a03595 	.word	0x94a03595
 802025c:	3fcfffff 	.word	0x3fcfffff

08020260 <_strtod_r>:
 8020260:	4b01      	ldr	r3, [pc, #4]	@ (8020268 <_strtod_r+0x8>)
 8020262:	f7ff ba19 	b.w	801f698 <_strtod_l>
 8020266:	bf00      	nop
 8020268:	2000015c 	.word	0x2000015c

0802026c <_strtol_l.constprop.0>:
 802026c:	2b24      	cmp	r3, #36	@ 0x24
 802026e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8020272:	4686      	mov	lr, r0
 8020274:	4690      	mov	r8, r2
 8020276:	d801      	bhi.n	802027c <_strtol_l.constprop.0+0x10>
 8020278:	2b01      	cmp	r3, #1
 802027a:	d106      	bne.n	802028a <_strtol_l.constprop.0+0x1e>
 802027c:	f7fd fd16 	bl	801dcac <__errno>
 8020280:	2316      	movs	r3, #22
 8020282:	6003      	str	r3, [r0, #0]
 8020284:	2000      	movs	r0, #0
 8020286:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802028a:	4834      	ldr	r0, [pc, #208]	@ (802035c <_strtol_l.constprop.0+0xf0>)
 802028c:	460d      	mov	r5, r1
 802028e:	462a      	mov	r2, r5
 8020290:	f815 4b01 	ldrb.w	r4, [r5], #1
 8020294:	5d06      	ldrb	r6, [r0, r4]
 8020296:	f016 0608 	ands.w	r6, r6, #8
 802029a:	d1f8      	bne.n	802028e <_strtol_l.constprop.0+0x22>
 802029c:	2c2d      	cmp	r4, #45	@ 0x2d
 802029e:	d12d      	bne.n	80202fc <_strtol_l.constprop.0+0x90>
 80202a0:	782c      	ldrb	r4, [r5, #0]
 80202a2:	2601      	movs	r6, #1
 80202a4:	1c95      	adds	r5, r2, #2
 80202a6:	f033 0210 	bics.w	r2, r3, #16
 80202aa:	d109      	bne.n	80202c0 <_strtol_l.constprop.0+0x54>
 80202ac:	2c30      	cmp	r4, #48	@ 0x30
 80202ae:	d12a      	bne.n	8020306 <_strtol_l.constprop.0+0x9a>
 80202b0:	782a      	ldrb	r2, [r5, #0]
 80202b2:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80202b6:	2a58      	cmp	r2, #88	@ 0x58
 80202b8:	d125      	bne.n	8020306 <_strtol_l.constprop.0+0x9a>
 80202ba:	786c      	ldrb	r4, [r5, #1]
 80202bc:	2310      	movs	r3, #16
 80202be:	3502      	adds	r5, #2
 80202c0:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 80202c4:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 80202c8:	2200      	movs	r2, #0
 80202ca:	fbbc f9f3 	udiv	r9, ip, r3
 80202ce:	4610      	mov	r0, r2
 80202d0:	fb03 ca19 	mls	sl, r3, r9, ip
 80202d4:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 80202d8:	2f09      	cmp	r7, #9
 80202da:	d81b      	bhi.n	8020314 <_strtol_l.constprop.0+0xa8>
 80202dc:	463c      	mov	r4, r7
 80202de:	42a3      	cmp	r3, r4
 80202e0:	dd27      	ble.n	8020332 <_strtol_l.constprop.0+0xc6>
 80202e2:	1c57      	adds	r7, r2, #1
 80202e4:	d007      	beq.n	80202f6 <_strtol_l.constprop.0+0x8a>
 80202e6:	4581      	cmp	r9, r0
 80202e8:	d320      	bcc.n	802032c <_strtol_l.constprop.0+0xc0>
 80202ea:	d101      	bne.n	80202f0 <_strtol_l.constprop.0+0x84>
 80202ec:	45a2      	cmp	sl, r4
 80202ee:	db1d      	blt.n	802032c <_strtol_l.constprop.0+0xc0>
 80202f0:	fb00 4003 	mla	r0, r0, r3, r4
 80202f4:	2201      	movs	r2, #1
 80202f6:	f815 4b01 	ldrb.w	r4, [r5], #1
 80202fa:	e7eb      	b.n	80202d4 <_strtol_l.constprop.0+0x68>
 80202fc:	2c2b      	cmp	r4, #43	@ 0x2b
 80202fe:	bf04      	itt	eq
 8020300:	782c      	ldrbeq	r4, [r5, #0]
 8020302:	1c95      	addeq	r5, r2, #2
 8020304:	e7cf      	b.n	80202a6 <_strtol_l.constprop.0+0x3a>
 8020306:	2b00      	cmp	r3, #0
 8020308:	d1da      	bne.n	80202c0 <_strtol_l.constprop.0+0x54>
 802030a:	2c30      	cmp	r4, #48	@ 0x30
 802030c:	bf0c      	ite	eq
 802030e:	2308      	moveq	r3, #8
 8020310:	230a      	movne	r3, #10
 8020312:	e7d5      	b.n	80202c0 <_strtol_l.constprop.0+0x54>
 8020314:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8020318:	2f19      	cmp	r7, #25
 802031a:	d801      	bhi.n	8020320 <_strtol_l.constprop.0+0xb4>
 802031c:	3c37      	subs	r4, #55	@ 0x37
 802031e:	e7de      	b.n	80202de <_strtol_l.constprop.0+0x72>
 8020320:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8020324:	2f19      	cmp	r7, #25
 8020326:	d804      	bhi.n	8020332 <_strtol_l.constprop.0+0xc6>
 8020328:	3c57      	subs	r4, #87	@ 0x57
 802032a:	e7d8      	b.n	80202de <_strtol_l.constprop.0+0x72>
 802032c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8020330:	e7e1      	b.n	80202f6 <_strtol_l.constprop.0+0x8a>
 8020332:	1c53      	adds	r3, r2, #1
 8020334:	d108      	bne.n	8020348 <_strtol_l.constprop.0+0xdc>
 8020336:	2322      	movs	r3, #34	@ 0x22
 8020338:	f8ce 3000 	str.w	r3, [lr]
 802033c:	4660      	mov	r0, ip
 802033e:	f1b8 0f00 	cmp.w	r8, #0
 8020342:	d0a0      	beq.n	8020286 <_strtol_l.constprop.0+0x1a>
 8020344:	1e69      	subs	r1, r5, #1
 8020346:	e006      	b.n	8020356 <_strtol_l.constprop.0+0xea>
 8020348:	b106      	cbz	r6, 802034c <_strtol_l.constprop.0+0xe0>
 802034a:	4240      	negs	r0, r0
 802034c:	f1b8 0f00 	cmp.w	r8, #0
 8020350:	d099      	beq.n	8020286 <_strtol_l.constprop.0+0x1a>
 8020352:	2a00      	cmp	r2, #0
 8020354:	d1f6      	bne.n	8020344 <_strtol_l.constprop.0+0xd8>
 8020356:	f8c8 1000 	str.w	r1, [r8]
 802035a:	e794      	b.n	8020286 <_strtol_l.constprop.0+0x1a>
 802035c:	08022269 	.word	0x08022269

08020360 <_strtol_r>:
 8020360:	f7ff bf84 	b.w	802026c <_strtol_l.constprop.0>

08020364 <__ssputs_r>:
 8020364:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8020368:	688e      	ldr	r6, [r1, #8]
 802036a:	461f      	mov	r7, r3
 802036c:	42be      	cmp	r6, r7
 802036e:	680b      	ldr	r3, [r1, #0]
 8020370:	4682      	mov	sl, r0
 8020372:	460c      	mov	r4, r1
 8020374:	4690      	mov	r8, r2
 8020376:	d82d      	bhi.n	80203d4 <__ssputs_r+0x70>
 8020378:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 802037c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8020380:	d026      	beq.n	80203d0 <__ssputs_r+0x6c>
 8020382:	6965      	ldr	r5, [r4, #20]
 8020384:	6909      	ldr	r1, [r1, #16]
 8020386:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 802038a:	eba3 0901 	sub.w	r9, r3, r1
 802038e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8020392:	1c7b      	adds	r3, r7, #1
 8020394:	444b      	add	r3, r9
 8020396:	106d      	asrs	r5, r5, #1
 8020398:	429d      	cmp	r5, r3
 802039a:	bf38      	it	cc
 802039c:	461d      	movcc	r5, r3
 802039e:	0553      	lsls	r3, r2, #21
 80203a0:	d527      	bpl.n	80203f2 <__ssputs_r+0x8e>
 80203a2:	4629      	mov	r1, r5
 80203a4:	f7fe fc1c 	bl	801ebe0 <_malloc_r>
 80203a8:	4606      	mov	r6, r0
 80203aa:	b360      	cbz	r0, 8020406 <__ssputs_r+0xa2>
 80203ac:	6921      	ldr	r1, [r4, #16]
 80203ae:	464a      	mov	r2, r9
 80203b0:	f7fd fca9 	bl	801dd06 <memcpy>
 80203b4:	89a3      	ldrh	r3, [r4, #12]
 80203b6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80203ba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80203be:	81a3      	strh	r3, [r4, #12]
 80203c0:	6126      	str	r6, [r4, #16]
 80203c2:	6165      	str	r5, [r4, #20]
 80203c4:	444e      	add	r6, r9
 80203c6:	eba5 0509 	sub.w	r5, r5, r9
 80203ca:	6026      	str	r6, [r4, #0]
 80203cc:	60a5      	str	r5, [r4, #8]
 80203ce:	463e      	mov	r6, r7
 80203d0:	42be      	cmp	r6, r7
 80203d2:	d900      	bls.n	80203d6 <__ssputs_r+0x72>
 80203d4:	463e      	mov	r6, r7
 80203d6:	6820      	ldr	r0, [r4, #0]
 80203d8:	4632      	mov	r2, r6
 80203da:	4641      	mov	r1, r8
 80203dc:	f7fd fb95 	bl	801db0a <memmove>
 80203e0:	68a3      	ldr	r3, [r4, #8]
 80203e2:	1b9b      	subs	r3, r3, r6
 80203e4:	60a3      	str	r3, [r4, #8]
 80203e6:	6823      	ldr	r3, [r4, #0]
 80203e8:	4433      	add	r3, r6
 80203ea:	6023      	str	r3, [r4, #0]
 80203ec:	2000      	movs	r0, #0
 80203ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80203f2:	462a      	mov	r2, r5
 80203f4:	f000 fd61 	bl	8020eba <_realloc_r>
 80203f8:	4606      	mov	r6, r0
 80203fa:	2800      	cmp	r0, #0
 80203fc:	d1e0      	bne.n	80203c0 <__ssputs_r+0x5c>
 80203fe:	6921      	ldr	r1, [r4, #16]
 8020400:	4650      	mov	r0, sl
 8020402:	f7fe fb79 	bl	801eaf8 <_free_r>
 8020406:	230c      	movs	r3, #12
 8020408:	f8ca 3000 	str.w	r3, [sl]
 802040c:	89a3      	ldrh	r3, [r4, #12]
 802040e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8020412:	81a3      	strh	r3, [r4, #12]
 8020414:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8020418:	e7e9      	b.n	80203ee <__ssputs_r+0x8a>
	...

0802041c <_svfiprintf_r>:
 802041c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020420:	4698      	mov	r8, r3
 8020422:	898b      	ldrh	r3, [r1, #12]
 8020424:	061b      	lsls	r3, r3, #24
 8020426:	b09d      	sub	sp, #116	@ 0x74
 8020428:	4607      	mov	r7, r0
 802042a:	460d      	mov	r5, r1
 802042c:	4614      	mov	r4, r2
 802042e:	d510      	bpl.n	8020452 <_svfiprintf_r+0x36>
 8020430:	690b      	ldr	r3, [r1, #16]
 8020432:	b973      	cbnz	r3, 8020452 <_svfiprintf_r+0x36>
 8020434:	2140      	movs	r1, #64	@ 0x40
 8020436:	f7fe fbd3 	bl	801ebe0 <_malloc_r>
 802043a:	6028      	str	r0, [r5, #0]
 802043c:	6128      	str	r0, [r5, #16]
 802043e:	b930      	cbnz	r0, 802044e <_svfiprintf_r+0x32>
 8020440:	230c      	movs	r3, #12
 8020442:	603b      	str	r3, [r7, #0]
 8020444:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8020448:	b01d      	add	sp, #116	@ 0x74
 802044a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802044e:	2340      	movs	r3, #64	@ 0x40
 8020450:	616b      	str	r3, [r5, #20]
 8020452:	2300      	movs	r3, #0
 8020454:	9309      	str	r3, [sp, #36]	@ 0x24
 8020456:	2320      	movs	r3, #32
 8020458:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 802045c:	f8cd 800c 	str.w	r8, [sp, #12]
 8020460:	2330      	movs	r3, #48	@ 0x30
 8020462:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8020600 <_svfiprintf_r+0x1e4>
 8020466:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 802046a:	f04f 0901 	mov.w	r9, #1
 802046e:	4623      	mov	r3, r4
 8020470:	469a      	mov	sl, r3
 8020472:	f813 2b01 	ldrb.w	r2, [r3], #1
 8020476:	b10a      	cbz	r2, 802047c <_svfiprintf_r+0x60>
 8020478:	2a25      	cmp	r2, #37	@ 0x25
 802047a:	d1f9      	bne.n	8020470 <_svfiprintf_r+0x54>
 802047c:	ebba 0b04 	subs.w	fp, sl, r4
 8020480:	d00b      	beq.n	802049a <_svfiprintf_r+0x7e>
 8020482:	465b      	mov	r3, fp
 8020484:	4622      	mov	r2, r4
 8020486:	4629      	mov	r1, r5
 8020488:	4638      	mov	r0, r7
 802048a:	f7ff ff6b 	bl	8020364 <__ssputs_r>
 802048e:	3001      	adds	r0, #1
 8020490:	f000 80a7 	beq.w	80205e2 <_svfiprintf_r+0x1c6>
 8020494:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8020496:	445a      	add	r2, fp
 8020498:	9209      	str	r2, [sp, #36]	@ 0x24
 802049a:	f89a 3000 	ldrb.w	r3, [sl]
 802049e:	2b00      	cmp	r3, #0
 80204a0:	f000 809f 	beq.w	80205e2 <_svfiprintf_r+0x1c6>
 80204a4:	2300      	movs	r3, #0
 80204a6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80204aa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80204ae:	f10a 0a01 	add.w	sl, sl, #1
 80204b2:	9304      	str	r3, [sp, #16]
 80204b4:	9307      	str	r3, [sp, #28]
 80204b6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80204ba:	931a      	str	r3, [sp, #104]	@ 0x68
 80204bc:	4654      	mov	r4, sl
 80204be:	2205      	movs	r2, #5
 80204c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80204c4:	484e      	ldr	r0, [pc, #312]	@ (8020600 <_svfiprintf_r+0x1e4>)
 80204c6:	f7df fe83 	bl	80001d0 <memchr>
 80204ca:	9a04      	ldr	r2, [sp, #16]
 80204cc:	b9d8      	cbnz	r0, 8020506 <_svfiprintf_r+0xea>
 80204ce:	06d0      	lsls	r0, r2, #27
 80204d0:	bf44      	itt	mi
 80204d2:	2320      	movmi	r3, #32
 80204d4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80204d8:	0711      	lsls	r1, r2, #28
 80204da:	bf44      	itt	mi
 80204dc:	232b      	movmi	r3, #43	@ 0x2b
 80204de:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80204e2:	f89a 3000 	ldrb.w	r3, [sl]
 80204e6:	2b2a      	cmp	r3, #42	@ 0x2a
 80204e8:	d015      	beq.n	8020516 <_svfiprintf_r+0xfa>
 80204ea:	9a07      	ldr	r2, [sp, #28]
 80204ec:	4654      	mov	r4, sl
 80204ee:	2000      	movs	r0, #0
 80204f0:	f04f 0c0a 	mov.w	ip, #10
 80204f4:	4621      	mov	r1, r4
 80204f6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80204fa:	3b30      	subs	r3, #48	@ 0x30
 80204fc:	2b09      	cmp	r3, #9
 80204fe:	d94b      	bls.n	8020598 <_svfiprintf_r+0x17c>
 8020500:	b1b0      	cbz	r0, 8020530 <_svfiprintf_r+0x114>
 8020502:	9207      	str	r2, [sp, #28]
 8020504:	e014      	b.n	8020530 <_svfiprintf_r+0x114>
 8020506:	eba0 0308 	sub.w	r3, r0, r8
 802050a:	fa09 f303 	lsl.w	r3, r9, r3
 802050e:	4313      	orrs	r3, r2
 8020510:	9304      	str	r3, [sp, #16]
 8020512:	46a2      	mov	sl, r4
 8020514:	e7d2      	b.n	80204bc <_svfiprintf_r+0xa0>
 8020516:	9b03      	ldr	r3, [sp, #12]
 8020518:	1d19      	adds	r1, r3, #4
 802051a:	681b      	ldr	r3, [r3, #0]
 802051c:	9103      	str	r1, [sp, #12]
 802051e:	2b00      	cmp	r3, #0
 8020520:	bfbb      	ittet	lt
 8020522:	425b      	neglt	r3, r3
 8020524:	f042 0202 	orrlt.w	r2, r2, #2
 8020528:	9307      	strge	r3, [sp, #28]
 802052a:	9307      	strlt	r3, [sp, #28]
 802052c:	bfb8      	it	lt
 802052e:	9204      	strlt	r2, [sp, #16]
 8020530:	7823      	ldrb	r3, [r4, #0]
 8020532:	2b2e      	cmp	r3, #46	@ 0x2e
 8020534:	d10a      	bne.n	802054c <_svfiprintf_r+0x130>
 8020536:	7863      	ldrb	r3, [r4, #1]
 8020538:	2b2a      	cmp	r3, #42	@ 0x2a
 802053a:	d132      	bne.n	80205a2 <_svfiprintf_r+0x186>
 802053c:	9b03      	ldr	r3, [sp, #12]
 802053e:	1d1a      	adds	r2, r3, #4
 8020540:	681b      	ldr	r3, [r3, #0]
 8020542:	9203      	str	r2, [sp, #12]
 8020544:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8020548:	3402      	adds	r4, #2
 802054a:	9305      	str	r3, [sp, #20]
 802054c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8020610 <_svfiprintf_r+0x1f4>
 8020550:	7821      	ldrb	r1, [r4, #0]
 8020552:	2203      	movs	r2, #3
 8020554:	4650      	mov	r0, sl
 8020556:	f7df fe3b 	bl	80001d0 <memchr>
 802055a:	b138      	cbz	r0, 802056c <_svfiprintf_r+0x150>
 802055c:	9b04      	ldr	r3, [sp, #16]
 802055e:	eba0 000a 	sub.w	r0, r0, sl
 8020562:	2240      	movs	r2, #64	@ 0x40
 8020564:	4082      	lsls	r2, r0
 8020566:	4313      	orrs	r3, r2
 8020568:	3401      	adds	r4, #1
 802056a:	9304      	str	r3, [sp, #16]
 802056c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8020570:	4824      	ldr	r0, [pc, #144]	@ (8020604 <_svfiprintf_r+0x1e8>)
 8020572:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8020576:	2206      	movs	r2, #6
 8020578:	f7df fe2a 	bl	80001d0 <memchr>
 802057c:	2800      	cmp	r0, #0
 802057e:	d036      	beq.n	80205ee <_svfiprintf_r+0x1d2>
 8020580:	4b21      	ldr	r3, [pc, #132]	@ (8020608 <_svfiprintf_r+0x1ec>)
 8020582:	bb1b      	cbnz	r3, 80205cc <_svfiprintf_r+0x1b0>
 8020584:	9b03      	ldr	r3, [sp, #12]
 8020586:	3307      	adds	r3, #7
 8020588:	f023 0307 	bic.w	r3, r3, #7
 802058c:	3308      	adds	r3, #8
 802058e:	9303      	str	r3, [sp, #12]
 8020590:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8020592:	4433      	add	r3, r6
 8020594:	9309      	str	r3, [sp, #36]	@ 0x24
 8020596:	e76a      	b.n	802046e <_svfiprintf_r+0x52>
 8020598:	fb0c 3202 	mla	r2, ip, r2, r3
 802059c:	460c      	mov	r4, r1
 802059e:	2001      	movs	r0, #1
 80205a0:	e7a8      	b.n	80204f4 <_svfiprintf_r+0xd8>
 80205a2:	2300      	movs	r3, #0
 80205a4:	3401      	adds	r4, #1
 80205a6:	9305      	str	r3, [sp, #20]
 80205a8:	4619      	mov	r1, r3
 80205aa:	f04f 0c0a 	mov.w	ip, #10
 80205ae:	4620      	mov	r0, r4
 80205b0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80205b4:	3a30      	subs	r2, #48	@ 0x30
 80205b6:	2a09      	cmp	r2, #9
 80205b8:	d903      	bls.n	80205c2 <_svfiprintf_r+0x1a6>
 80205ba:	2b00      	cmp	r3, #0
 80205bc:	d0c6      	beq.n	802054c <_svfiprintf_r+0x130>
 80205be:	9105      	str	r1, [sp, #20]
 80205c0:	e7c4      	b.n	802054c <_svfiprintf_r+0x130>
 80205c2:	fb0c 2101 	mla	r1, ip, r1, r2
 80205c6:	4604      	mov	r4, r0
 80205c8:	2301      	movs	r3, #1
 80205ca:	e7f0      	b.n	80205ae <_svfiprintf_r+0x192>
 80205cc:	ab03      	add	r3, sp, #12
 80205ce:	9300      	str	r3, [sp, #0]
 80205d0:	462a      	mov	r2, r5
 80205d2:	4b0e      	ldr	r3, [pc, #56]	@ (802060c <_svfiprintf_r+0x1f0>)
 80205d4:	a904      	add	r1, sp, #16
 80205d6:	4638      	mov	r0, r7
 80205d8:	f7fc fba6 	bl	801cd28 <_printf_float>
 80205dc:	1c42      	adds	r2, r0, #1
 80205de:	4606      	mov	r6, r0
 80205e0:	d1d6      	bne.n	8020590 <_svfiprintf_r+0x174>
 80205e2:	89ab      	ldrh	r3, [r5, #12]
 80205e4:	065b      	lsls	r3, r3, #25
 80205e6:	f53f af2d 	bmi.w	8020444 <_svfiprintf_r+0x28>
 80205ea:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80205ec:	e72c      	b.n	8020448 <_svfiprintf_r+0x2c>
 80205ee:	ab03      	add	r3, sp, #12
 80205f0:	9300      	str	r3, [sp, #0]
 80205f2:	462a      	mov	r2, r5
 80205f4:	4b05      	ldr	r3, [pc, #20]	@ (802060c <_svfiprintf_r+0x1f0>)
 80205f6:	a904      	add	r1, sp, #16
 80205f8:	4638      	mov	r0, r7
 80205fa:	f7fc fe2d 	bl	801d258 <_printf_i>
 80205fe:	e7ed      	b.n	80205dc <_svfiprintf_r+0x1c0>
 8020600:	08022369 	.word	0x08022369
 8020604:	08022373 	.word	0x08022373
 8020608:	0801cd29 	.word	0x0801cd29
 802060c:	08020365 	.word	0x08020365
 8020610:	0802236f 	.word	0x0802236f

08020614 <__sflush_r>:
 8020614:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8020618:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802061c:	0716      	lsls	r6, r2, #28
 802061e:	4605      	mov	r5, r0
 8020620:	460c      	mov	r4, r1
 8020622:	d454      	bmi.n	80206ce <__sflush_r+0xba>
 8020624:	684b      	ldr	r3, [r1, #4]
 8020626:	2b00      	cmp	r3, #0
 8020628:	dc02      	bgt.n	8020630 <__sflush_r+0x1c>
 802062a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 802062c:	2b00      	cmp	r3, #0
 802062e:	dd48      	ble.n	80206c2 <__sflush_r+0xae>
 8020630:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8020632:	2e00      	cmp	r6, #0
 8020634:	d045      	beq.n	80206c2 <__sflush_r+0xae>
 8020636:	2300      	movs	r3, #0
 8020638:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 802063c:	682f      	ldr	r7, [r5, #0]
 802063e:	6a21      	ldr	r1, [r4, #32]
 8020640:	602b      	str	r3, [r5, #0]
 8020642:	d030      	beq.n	80206a6 <__sflush_r+0x92>
 8020644:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8020646:	89a3      	ldrh	r3, [r4, #12]
 8020648:	0759      	lsls	r1, r3, #29
 802064a:	d505      	bpl.n	8020658 <__sflush_r+0x44>
 802064c:	6863      	ldr	r3, [r4, #4]
 802064e:	1ad2      	subs	r2, r2, r3
 8020650:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8020652:	b10b      	cbz	r3, 8020658 <__sflush_r+0x44>
 8020654:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8020656:	1ad2      	subs	r2, r2, r3
 8020658:	2300      	movs	r3, #0
 802065a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 802065c:	6a21      	ldr	r1, [r4, #32]
 802065e:	4628      	mov	r0, r5
 8020660:	47b0      	blx	r6
 8020662:	1c43      	adds	r3, r0, #1
 8020664:	89a3      	ldrh	r3, [r4, #12]
 8020666:	d106      	bne.n	8020676 <__sflush_r+0x62>
 8020668:	6829      	ldr	r1, [r5, #0]
 802066a:	291d      	cmp	r1, #29
 802066c:	d82b      	bhi.n	80206c6 <__sflush_r+0xb2>
 802066e:	4a2a      	ldr	r2, [pc, #168]	@ (8020718 <__sflush_r+0x104>)
 8020670:	410a      	asrs	r2, r1
 8020672:	07d6      	lsls	r6, r2, #31
 8020674:	d427      	bmi.n	80206c6 <__sflush_r+0xb2>
 8020676:	2200      	movs	r2, #0
 8020678:	6062      	str	r2, [r4, #4]
 802067a:	04d9      	lsls	r1, r3, #19
 802067c:	6922      	ldr	r2, [r4, #16]
 802067e:	6022      	str	r2, [r4, #0]
 8020680:	d504      	bpl.n	802068c <__sflush_r+0x78>
 8020682:	1c42      	adds	r2, r0, #1
 8020684:	d101      	bne.n	802068a <__sflush_r+0x76>
 8020686:	682b      	ldr	r3, [r5, #0]
 8020688:	b903      	cbnz	r3, 802068c <__sflush_r+0x78>
 802068a:	6560      	str	r0, [r4, #84]	@ 0x54
 802068c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 802068e:	602f      	str	r7, [r5, #0]
 8020690:	b1b9      	cbz	r1, 80206c2 <__sflush_r+0xae>
 8020692:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8020696:	4299      	cmp	r1, r3
 8020698:	d002      	beq.n	80206a0 <__sflush_r+0x8c>
 802069a:	4628      	mov	r0, r5
 802069c:	f7fe fa2c 	bl	801eaf8 <_free_r>
 80206a0:	2300      	movs	r3, #0
 80206a2:	6363      	str	r3, [r4, #52]	@ 0x34
 80206a4:	e00d      	b.n	80206c2 <__sflush_r+0xae>
 80206a6:	2301      	movs	r3, #1
 80206a8:	4628      	mov	r0, r5
 80206aa:	47b0      	blx	r6
 80206ac:	4602      	mov	r2, r0
 80206ae:	1c50      	adds	r0, r2, #1
 80206b0:	d1c9      	bne.n	8020646 <__sflush_r+0x32>
 80206b2:	682b      	ldr	r3, [r5, #0]
 80206b4:	2b00      	cmp	r3, #0
 80206b6:	d0c6      	beq.n	8020646 <__sflush_r+0x32>
 80206b8:	2b1d      	cmp	r3, #29
 80206ba:	d001      	beq.n	80206c0 <__sflush_r+0xac>
 80206bc:	2b16      	cmp	r3, #22
 80206be:	d11e      	bne.n	80206fe <__sflush_r+0xea>
 80206c0:	602f      	str	r7, [r5, #0]
 80206c2:	2000      	movs	r0, #0
 80206c4:	e022      	b.n	802070c <__sflush_r+0xf8>
 80206c6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80206ca:	b21b      	sxth	r3, r3
 80206cc:	e01b      	b.n	8020706 <__sflush_r+0xf2>
 80206ce:	690f      	ldr	r7, [r1, #16]
 80206d0:	2f00      	cmp	r7, #0
 80206d2:	d0f6      	beq.n	80206c2 <__sflush_r+0xae>
 80206d4:	0793      	lsls	r3, r2, #30
 80206d6:	680e      	ldr	r6, [r1, #0]
 80206d8:	bf08      	it	eq
 80206da:	694b      	ldreq	r3, [r1, #20]
 80206dc:	600f      	str	r7, [r1, #0]
 80206de:	bf18      	it	ne
 80206e0:	2300      	movne	r3, #0
 80206e2:	eba6 0807 	sub.w	r8, r6, r7
 80206e6:	608b      	str	r3, [r1, #8]
 80206e8:	f1b8 0f00 	cmp.w	r8, #0
 80206ec:	dde9      	ble.n	80206c2 <__sflush_r+0xae>
 80206ee:	6a21      	ldr	r1, [r4, #32]
 80206f0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80206f2:	4643      	mov	r3, r8
 80206f4:	463a      	mov	r2, r7
 80206f6:	4628      	mov	r0, r5
 80206f8:	47b0      	blx	r6
 80206fa:	2800      	cmp	r0, #0
 80206fc:	dc08      	bgt.n	8020710 <__sflush_r+0xfc>
 80206fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8020702:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8020706:	81a3      	strh	r3, [r4, #12]
 8020708:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 802070c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8020710:	4407      	add	r7, r0
 8020712:	eba8 0800 	sub.w	r8, r8, r0
 8020716:	e7e7      	b.n	80206e8 <__sflush_r+0xd4>
 8020718:	dfbffffe 	.word	0xdfbffffe

0802071c <_fflush_r>:
 802071c:	b538      	push	{r3, r4, r5, lr}
 802071e:	690b      	ldr	r3, [r1, #16]
 8020720:	4605      	mov	r5, r0
 8020722:	460c      	mov	r4, r1
 8020724:	b913      	cbnz	r3, 802072c <_fflush_r+0x10>
 8020726:	2500      	movs	r5, #0
 8020728:	4628      	mov	r0, r5
 802072a:	bd38      	pop	{r3, r4, r5, pc}
 802072c:	b118      	cbz	r0, 8020736 <_fflush_r+0x1a>
 802072e:	6a03      	ldr	r3, [r0, #32]
 8020730:	b90b      	cbnz	r3, 8020736 <_fflush_r+0x1a>
 8020732:	f7fd f951 	bl	801d9d8 <__sinit>
 8020736:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802073a:	2b00      	cmp	r3, #0
 802073c:	d0f3      	beq.n	8020726 <_fflush_r+0xa>
 802073e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8020740:	07d0      	lsls	r0, r2, #31
 8020742:	d404      	bmi.n	802074e <_fflush_r+0x32>
 8020744:	0599      	lsls	r1, r3, #22
 8020746:	d402      	bmi.n	802074e <_fflush_r+0x32>
 8020748:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 802074a:	f7fd fada 	bl	801dd02 <__retarget_lock_acquire_recursive>
 802074e:	4628      	mov	r0, r5
 8020750:	4621      	mov	r1, r4
 8020752:	f7ff ff5f 	bl	8020614 <__sflush_r>
 8020756:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8020758:	07da      	lsls	r2, r3, #31
 802075a:	4605      	mov	r5, r0
 802075c:	d4e4      	bmi.n	8020728 <_fflush_r+0xc>
 802075e:	89a3      	ldrh	r3, [r4, #12]
 8020760:	059b      	lsls	r3, r3, #22
 8020762:	d4e1      	bmi.n	8020728 <_fflush_r+0xc>
 8020764:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8020766:	f7fd facd 	bl	801dd04 <__retarget_lock_release_recursive>
 802076a:	e7dd      	b.n	8020728 <_fflush_r+0xc>

0802076c <strncmp>:
 802076c:	b510      	push	{r4, lr}
 802076e:	b16a      	cbz	r2, 802078c <strncmp+0x20>
 8020770:	3901      	subs	r1, #1
 8020772:	1884      	adds	r4, r0, r2
 8020774:	f810 2b01 	ldrb.w	r2, [r0], #1
 8020778:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 802077c:	429a      	cmp	r2, r3
 802077e:	d103      	bne.n	8020788 <strncmp+0x1c>
 8020780:	42a0      	cmp	r0, r4
 8020782:	d001      	beq.n	8020788 <strncmp+0x1c>
 8020784:	2a00      	cmp	r2, #0
 8020786:	d1f5      	bne.n	8020774 <strncmp+0x8>
 8020788:	1ad0      	subs	r0, r2, r3
 802078a:	bd10      	pop	{r4, pc}
 802078c:	4610      	mov	r0, r2
 802078e:	e7fc      	b.n	802078a <strncmp+0x1e>

08020790 <_sbrk_r>:
 8020790:	b538      	push	{r3, r4, r5, lr}
 8020792:	4d06      	ldr	r5, [pc, #24]	@ (80207ac <_sbrk_r+0x1c>)
 8020794:	2300      	movs	r3, #0
 8020796:	4604      	mov	r4, r0
 8020798:	4608      	mov	r0, r1
 802079a:	602b      	str	r3, [r5, #0]
 802079c:	f7eb fb26 	bl	800bdec <_sbrk>
 80207a0:	1c43      	adds	r3, r0, #1
 80207a2:	d102      	bne.n	80207aa <_sbrk_r+0x1a>
 80207a4:	682b      	ldr	r3, [r5, #0]
 80207a6:	b103      	cbz	r3, 80207aa <_sbrk_r+0x1a>
 80207a8:	6023      	str	r3, [r4, #0]
 80207aa:	bd38      	pop	{r3, r4, r5, pc}
 80207ac:	2000613c 	.word	0x2000613c

080207b0 <nan>:
 80207b0:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 80207b8 <nan+0x8>
 80207b4:	4770      	bx	lr
 80207b6:	bf00      	nop
 80207b8:	00000000 	.word	0x00000000
 80207bc:	7ff80000 	.word	0x7ff80000

080207c0 <__assert_func>:
 80207c0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80207c2:	4614      	mov	r4, r2
 80207c4:	461a      	mov	r2, r3
 80207c6:	4b09      	ldr	r3, [pc, #36]	@ (80207ec <__assert_func+0x2c>)
 80207c8:	681b      	ldr	r3, [r3, #0]
 80207ca:	4605      	mov	r5, r0
 80207cc:	68d8      	ldr	r0, [r3, #12]
 80207ce:	b954      	cbnz	r4, 80207e6 <__assert_func+0x26>
 80207d0:	4b07      	ldr	r3, [pc, #28]	@ (80207f0 <__assert_func+0x30>)
 80207d2:	461c      	mov	r4, r3
 80207d4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80207d8:	9100      	str	r1, [sp, #0]
 80207da:	462b      	mov	r3, r5
 80207dc:	4905      	ldr	r1, [pc, #20]	@ (80207f4 <__assert_func+0x34>)
 80207de:	f000 fba7 	bl	8020f30 <fiprintf>
 80207e2:	f000 fbb7 	bl	8020f54 <abort>
 80207e6:	4b04      	ldr	r3, [pc, #16]	@ (80207f8 <__assert_func+0x38>)
 80207e8:	e7f4      	b.n	80207d4 <__assert_func+0x14>
 80207ea:	bf00      	nop
 80207ec:	2000010c 	.word	0x2000010c
 80207f0:	080223bd 	.word	0x080223bd
 80207f4:	0802238f 	.word	0x0802238f
 80207f8:	08022382 	.word	0x08022382

080207fc <_calloc_r>:
 80207fc:	b570      	push	{r4, r5, r6, lr}
 80207fe:	fba1 5402 	umull	r5, r4, r1, r2
 8020802:	b93c      	cbnz	r4, 8020814 <_calloc_r+0x18>
 8020804:	4629      	mov	r1, r5
 8020806:	f7fe f9eb 	bl	801ebe0 <_malloc_r>
 802080a:	4606      	mov	r6, r0
 802080c:	b928      	cbnz	r0, 802081a <_calloc_r+0x1e>
 802080e:	2600      	movs	r6, #0
 8020810:	4630      	mov	r0, r6
 8020812:	bd70      	pop	{r4, r5, r6, pc}
 8020814:	220c      	movs	r2, #12
 8020816:	6002      	str	r2, [r0, #0]
 8020818:	e7f9      	b.n	802080e <_calloc_r+0x12>
 802081a:	462a      	mov	r2, r5
 802081c:	4621      	mov	r1, r4
 802081e:	f7fd f98e 	bl	801db3e <memset>
 8020822:	e7f5      	b.n	8020810 <_calloc_r+0x14>

08020824 <rshift>:
 8020824:	6903      	ldr	r3, [r0, #16]
 8020826:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 802082a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 802082e:	ea4f 1261 	mov.w	r2, r1, asr #5
 8020832:	f100 0414 	add.w	r4, r0, #20
 8020836:	dd45      	ble.n	80208c4 <rshift+0xa0>
 8020838:	f011 011f 	ands.w	r1, r1, #31
 802083c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8020840:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8020844:	d10c      	bne.n	8020860 <rshift+0x3c>
 8020846:	f100 0710 	add.w	r7, r0, #16
 802084a:	4629      	mov	r1, r5
 802084c:	42b1      	cmp	r1, r6
 802084e:	d334      	bcc.n	80208ba <rshift+0x96>
 8020850:	1a9b      	subs	r3, r3, r2
 8020852:	009b      	lsls	r3, r3, #2
 8020854:	1eea      	subs	r2, r5, #3
 8020856:	4296      	cmp	r6, r2
 8020858:	bf38      	it	cc
 802085a:	2300      	movcc	r3, #0
 802085c:	4423      	add	r3, r4
 802085e:	e015      	b.n	802088c <rshift+0x68>
 8020860:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8020864:	f1c1 0820 	rsb	r8, r1, #32
 8020868:	40cf      	lsrs	r7, r1
 802086a:	f105 0e04 	add.w	lr, r5, #4
 802086e:	46a1      	mov	r9, r4
 8020870:	4576      	cmp	r6, lr
 8020872:	46f4      	mov	ip, lr
 8020874:	d815      	bhi.n	80208a2 <rshift+0x7e>
 8020876:	1a9a      	subs	r2, r3, r2
 8020878:	0092      	lsls	r2, r2, #2
 802087a:	3a04      	subs	r2, #4
 802087c:	3501      	adds	r5, #1
 802087e:	42ae      	cmp	r6, r5
 8020880:	bf38      	it	cc
 8020882:	2200      	movcc	r2, #0
 8020884:	18a3      	adds	r3, r4, r2
 8020886:	50a7      	str	r7, [r4, r2]
 8020888:	b107      	cbz	r7, 802088c <rshift+0x68>
 802088a:	3304      	adds	r3, #4
 802088c:	1b1a      	subs	r2, r3, r4
 802088e:	42a3      	cmp	r3, r4
 8020890:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8020894:	bf08      	it	eq
 8020896:	2300      	moveq	r3, #0
 8020898:	6102      	str	r2, [r0, #16]
 802089a:	bf08      	it	eq
 802089c:	6143      	streq	r3, [r0, #20]
 802089e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80208a2:	f8dc c000 	ldr.w	ip, [ip]
 80208a6:	fa0c fc08 	lsl.w	ip, ip, r8
 80208aa:	ea4c 0707 	orr.w	r7, ip, r7
 80208ae:	f849 7b04 	str.w	r7, [r9], #4
 80208b2:	f85e 7b04 	ldr.w	r7, [lr], #4
 80208b6:	40cf      	lsrs	r7, r1
 80208b8:	e7da      	b.n	8020870 <rshift+0x4c>
 80208ba:	f851 cb04 	ldr.w	ip, [r1], #4
 80208be:	f847 cf04 	str.w	ip, [r7, #4]!
 80208c2:	e7c3      	b.n	802084c <rshift+0x28>
 80208c4:	4623      	mov	r3, r4
 80208c6:	e7e1      	b.n	802088c <rshift+0x68>

080208c8 <__hexdig_fun>:
 80208c8:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 80208cc:	2b09      	cmp	r3, #9
 80208ce:	d802      	bhi.n	80208d6 <__hexdig_fun+0xe>
 80208d0:	3820      	subs	r0, #32
 80208d2:	b2c0      	uxtb	r0, r0
 80208d4:	4770      	bx	lr
 80208d6:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 80208da:	2b05      	cmp	r3, #5
 80208dc:	d801      	bhi.n	80208e2 <__hexdig_fun+0x1a>
 80208de:	3847      	subs	r0, #71	@ 0x47
 80208e0:	e7f7      	b.n	80208d2 <__hexdig_fun+0xa>
 80208e2:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 80208e6:	2b05      	cmp	r3, #5
 80208e8:	d801      	bhi.n	80208ee <__hexdig_fun+0x26>
 80208ea:	3827      	subs	r0, #39	@ 0x27
 80208ec:	e7f1      	b.n	80208d2 <__hexdig_fun+0xa>
 80208ee:	2000      	movs	r0, #0
 80208f0:	4770      	bx	lr
	...

080208f4 <__gethex>:
 80208f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80208f8:	b085      	sub	sp, #20
 80208fa:	468a      	mov	sl, r1
 80208fc:	9302      	str	r3, [sp, #8]
 80208fe:	680b      	ldr	r3, [r1, #0]
 8020900:	9001      	str	r0, [sp, #4]
 8020902:	4690      	mov	r8, r2
 8020904:	1c9c      	adds	r4, r3, #2
 8020906:	46a1      	mov	r9, r4
 8020908:	f814 0b01 	ldrb.w	r0, [r4], #1
 802090c:	2830      	cmp	r0, #48	@ 0x30
 802090e:	d0fa      	beq.n	8020906 <__gethex+0x12>
 8020910:	eba9 0303 	sub.w	r3, r9, r3
 8020914:	f1a3 0b02 	sub.w	fp, r3, #2
 8020918:	f7ff ffd6 	bl	80208c8 <__hexdig_fun>
 802091c:	4605      	mov	r5, r0
 802091e:	2800      	cmp	r0, #0
 8020920:	d168      	bne.n	80209f4 <__gethex+0x100>
 8020922:	49a0      	ldr	r1, [pc, #640]	@ (8020ba4 <__gethex+0x2b0>)
 8020924:	2201      	movs	r2, #1
 8020926:	4648      	mov	r0, r9
 8020928:	f7ff ff20 	bl	802076c <strncmp>
 802092c:	4607      	mov	r7, r0
 802092e:	2800      	cmp	r0, #0
 8020930:	d167      	bne.n	8020a02 <__gethex+0x10e>
 8020932:	f899 0001 	ldrb.w	r0, [r9, #1]
 8020936:	4626      	mov	r6, r4
 8020938:	f7ff ffc6 	bl	80208c8 <__hexdig_fun>
 802093c:	2800      	cmp	r0, #0
 802093e:	d062      	beq.n	8020a06 <__gethex+0x112>
 8020940:	4623      	mov	r3, r4
 8020942:	7818      	ldrb	r0, [r3, #0]
 8020944:	2830      	cmp	r0, #48	@ 0x30
 8020946:	4699      	mov	r9, r3
 8020948:	f103 0301 	add.w	r3, r3, #1
 802094c:	d0f9      	beq.n	8020942 <__gethex+0x4e>
 802094e:	f7ff ffbb 	bl	80208c8 <__hexdig_fun>
 8020952:	fab0 f580 	clz	r5, r0
 8020956:	096d      	lsrs	r5, r5, #5
 8020958:	f04f 0b01 	mov.w	fp, #1
 802095c:	464a      	mov	r2, r9
 802095e:	4616      	mov	r6, r2
 8020960:	3201      	adds	r2, #1
 8020962:	7830      	ldrb	r0, [r6, #0]
 8020964:	f7ff ffb0 	bl	80208c8 <__hexdig_fun>
 8020968:	2800      	cmp	r0, #0
 802096a:	d1f8      	bne.n	802095e <__gethex+0x6a>
 802096c:	498d      	ldr	r1, [pc, #564]	@ (8020ba4 <__gethex+0x2b0>)
 802096e:	2201      	movs	r2, #1
 8020970:	4630      	mov	r0, r6
 8020972:	f7ff fefb 	bl	802076c <strncmp>
 8020976:	2800      	cmp	r0, #0
 8020978:	d13f      	bne.n	80209fa <__gethex+0x106>
 802097a:	b944      	cbnz	r4, 802098e <__gethex+0x9a>
 802097c:	1c74      	adds	r4, r6, #1
 802097e:	4622      	mov	r2, r4
 8020980:	4616      	mov	r6, r2
 8020982:	3201      	adds	r2, #1
 8020984:	7830      	ldrb	r0, [r6, #0]
 8020986:	f7ff ff9f 	bl	80208c8 <__hexdig_fun>
 802098a:	2800      	cmp	r0, #0
 802098c:	d1f8      	bne.n	8020980 <__gethex+0x8c>
 802098e:	1ba4      	subs	r4, r4, r6
 8020990:	00a7      	lsls	r7, r4, #2
 8020992:	7833      	ldrb	r3, [r6, #0]
 8020994:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8020998:	2b50      	cmp	r3, #80	@ 0x50
 802099a:	d13e      	bne.n	8020a1a <__gethex+0x126>
 802099c:	7873      	ldrb	r3, [r6, #1]
 802099e:	2b2b      	cmp	r3, #43	@ 0x2b
 80209a0:	d033      	beq.n	8020a0a <__gethex+0x116>
 80209a2:	2b2d      	cmp	r3, #45	@ 0x2d
 80209a4:	d034      	beq.n	8020a10 <__gethex+0x11c>
 80209a6:	1c71      	adds	r1, r6, #1
 80209a8:	2400      	movs	r4, #0
 80209aa:	7808      	ldrb	r0, [r1, #0]
 80209ac:	f7ff ff8c 	bl	80208c8 <__hexdig_fun>
 80209b0:	1e43      	subs	r3, r0, #1
 80209b2:	b2db      	uxtb	r3, r3
 80209b4:	2b18      	cmp	r3, #24
 80209b6:	d830      	bhi.n	8020a1a <__gethex+0x126>
 80209b8:	f1a0 0210 	sub.w	r2, r0, #16
 80209bc:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80209c0:	f7ff ff82 	bl	80208c8 <__hexdig_fun>
 80209c4:	f100 3cff 	add.w	ip, r0, #4294967295	@ 0xffffffff
 80209c8:	fa5f fc8c 	uxtb.w	ip, ip
 80209cc:	f1bc 0f18 	cmp.w	ip, #24
 80209d0:	f04f 030a 	mov.w	r3, #10
 80209d4:	d91e      	bls.n	8020a14 <__gethex+0x120>
 80209d6:	b104      	cbz	r4, 80209da <__gethex+0xe6>
 80209d8:	4252      	negs	r2, r2
 80209da:	4417      	add	r7, r2
 80209dc:	f8ca 1000 	str.w	r1, [sl]
 80209e0:	b1ed      	cbz	r5, 8020a1e <__gethex+0x12a>
 80209e2:	f1bb 0f00 	cmp.w	fp, #0
 80209e6:	bf0c      	ite	eq
 80209e8:	2506      	moveq	r5, #6
 80209ea:	2500      	movne	r5, #0
 80209ec:	4628      	mov	r0, r5
 80209ee:	b005      	add	sp, #20
 80209f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80209f4:	2500      	movs	r5, #0
 80209f6:	462c      	mov	r4, r5
 80209f8:	e7b0      	b.n	802095c <__gethex+0x68>
 80209fa:	2c00      	cmp	r4, #0
 80209fc:	d1c7      	bne.n	802098e <__gethex+0x9a>
 80209fe:	4627      	mov	r7, r4
 8020a00:	e7c7      	b.n	8020992 <__gethex+0x9e>
 8020a02:	464e      	mov	r6, r9
 8020a04:	462f      	mov	r7, r5
 8020a06:	2501      	movs	r5, #1
 8020a08:	e7c3      	b.n	8020992 <__gethex+0x9e>
 8020a0a:	2400      	movs	r4, #0
 8020a0c:	1cb1      	adds	r1, r6, #2
 8020a0e:	e7cc      	b.n	80209aa <__gethex+0xb6>
 8020a10:	2401      	movs	r4, #1
 8020a12:	e7fb      	b.n	8020a0c <__gethex+0x118>
 8020a14:	fb03 0002 	mla	r0, r3, r2, r0
 8020a18:	e7ce      	b.n	80209b8 <__gethex+0xc4>
 8020a1a:	4631      	mov	r1, r6
 8020a1c:	e7de      	b.n	80209dc <__gethex+0xe8>
 8020a1e:	eba6 0309 	sub.w	r3, r6, r9
 8020a22:	3b01      	subs	r3, #1
 8020a24:	4629      	mov	r1, r5
 8020a26:	2b07      	cmp	r3, #7
 8020a28:	dc0a      	bgt.n	8020a40 <__gethex+0x14c>
 8020a2a:	9801      	ldr	r0, [sp, #4]
 8020a2c:	f7fe f964 	bl	801ecf8 <_Balloc>
 8020a30:	4604      	mov	r4, r0
 8020a32:	b940      	cbnz	r0, 8020a46 <__gethex+0x152>
 8020a34:	4b5c      	ldr	r3, [pc, #368]	@ (8020ba8 <__gethex+0x2b4>)
 8020a36:	4602      	mov	r2, r0
 8020a38:	21e4      	movs	r1, #228	@ 0xe4
 8020a3a:	485c      	ldr	r0, [pc, #368]	@ (8020bac <__gethex+0x2b8>)
 8020a3c:	f7ff fec0 	bl	80207c0 <__assert_func>
 8020a40:	3101      	adds	r1, #1
 8020a42:	105b      	asrs	r3, r3, #1
 8020a44:	e7ef      	b.n	8020a26 <__gethex+0x132>
 8020a46:	f100 0a14 	add.w	sl, r0, #20
 8020a4a:	2300      	movs	r3, #0
 8020a4c:	4655      	mov	r5, sl
 8020a4e:	469b      	mov	fp, r3
 8020a50:	45b1      	cmp	r9, r6
 8020a52:	d337      	bcc.n	8020ac4 <__gethex+0x1d0>
 8020a54:	f845 bb04 	str.w	fp, [r5], #4
 8020a58:	eba5 050a 	sub.w	r5, r5, sl
 8020a5c:	10ad      	asrs	r5, r5, #2
 8020a5e:	6125      	str	r5, [r4, #16]
 8020a60:	4658      	mov	r0, fp
 8020a62:	f7fe fa3b 	bl	801eedc <__hi0bits>
 8020a66:	016d      	lsls	r5, r5, #5
 8020a68:	f8d8 6000 	ldr.w	r6, [r8]
 8020a6c:	1a2d      	subs	r5, r5, r0
 8020a6e:	42b5      	cmp	r5, r6
 8020a70:	dd54      	ble.n	8020b1c <__gethex+0x228>
 8020a72:	1bad      	subs	r5, r5, r6
 8020a74:	4629      	mov	r1, r5
 8020a76:	4620      	mov	r0, r4
 8020a78:	f7fe fdcf 	bl	801f61a <__any_on>
 8020a7c:	4681      	mov	r9, r0
 8020a7e:	b178      	cbz	r0, 8020aa0 <__gethex+0x1ac>
 8020a80:	1e6b      	subs	r3, r5, #1
 8020a82:	1159      	asrs	r1, r3, #5
 8020a84:	f003 021f 	and.w	r2, r3, #31
 8020a88:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8020a8c:	f04f 0901 	mov.w	r9, #1
 8020a90:	fa09 f202 	lsl.w	r2, r9, r2
 8020a94:	420a      	tst	r2, r1
 8020a96:	d003      	beq.n	8020aa0 <__gethex+0x1ac>
 8020a98:	454b      	cmp	r3, r9
 8020a9a:	dc36      	bgt.n	8020b0a <__gethex+0x216>
 8020a9c:	f04f 0902 	mov.w	r9, #2
 8020aa0:	4629      	mov	r1, r5
 8020aa2:	4620      	mov	r0, r4
 8020aa4:	f7ff febe 	bl	8020824 <rshift>
 8020aa8:	442f      	add	r7, r5
 8020aaa:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8020aae:	42bb      	cmp	r3, r7
 8020ab0:	da42      	bge.n	8020b38 <__gethex+0x244>
 8020ab2:	9801      	ldr	r0, [sp, #4]
 8020ab4:	4621      	mov	r1, r4
 8020ab6:	f7fe f95f 	bl	801ed78 <_Bfree>
 8020aba:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8020abc:	2300      	movs	r3, #0
 8020abe:	6013      	str	r3, [r2, #0]
 8020ac0:	25a3      	movs	r5, #163	@ 0xa3
 8020ac2:	e793      	b.n	80209ec <__gethex+0xf8>
 8020ac4:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8020ac8:	2a2e      	cmp	r2, #46	@ 0x2e
 8020aca:	d012      	beq.n	8020af2 <__gethex+0x1fe>
 8020acc:	2b20      	cmp	r3, #32
 8020ace:	d104      	bne.n	8020ada <__gethex+0x1e6>
 8020ad0:	f845 bb04 	str.w	fp, [r5], #4
 8020ad4:	f04f 0b00 	mov.w	fp, #0
 8020ad8:	465b      	mov	r3, fp
 8020ada:	7830      	ldrb	r0, [r6, #0]
 8020adc:	9303      	str	r3, [sp, #12]
 8020ade:	f7ff fef3 	bl	80208c8 <__hexdig_fun>
 8020ae2:	9b03      	ldr	r3, [sp, #12]
 8020ae4:	f000 000f 	and.w	r0, r0, #15
 8020ae8:	4098      	lsls	r0, r3
 8020aea:	ea4b 0b00 	orr.w	fp, fp, r0
 8020aee:	3304      	adds	r3, #4
 8020af0:	e7ae      	b.n	8020a50 <__gethex+0x15c>
 8020af2:	45b1      	cmp	r9, r6
 8020af4:	d8ea      	bhi.n	8020acc <__gethex+0x1d8>
 8020af6:	492b      	ldr	r1, [pc, #172]	@ (8020ba4 <__gethex+0x2b0>)
 8020af8:	9303      	str	r3, [sp, #12]
 8020afa:	2201      	movs	r2, #1
 8020afc:	4630      	mov	r0, r6
 8020afe:	f7ff fe35 	bl	802076c <strncmp>
 8020b02:	9b03      	ldr	r3, [sp, #12]
 8020b04:	2800      	cmp	r0, #0
 8020b06:	d1e1      	bne.n	8020acc <__gethex+0x1d8>
 8020b08:	e7a2      	b.n	8020a50 <__gethex+0x15c>
 8020b0a:	1ea9      	subs	r1, r5, #2
 8020b0c:	4620      	mov	r0, r4
 8020b0e:	f7fe fd84 	bl	801f61a <__any_on>
 8020b12:	2800      	cmp	r0, #0
 8020b14:	d0c2      	beq.n	8020a9c <__gethex+0x1a8>
 8020b16:	f04f 0903 	mov.w	r9, #3
 8020b1a:	e7c1      	b.n	8020aa0 <__gethex+0x1ac>
 8020b1c:	da09      	bge.n	8020b32 <__gethex+0x23e>
 8020b1e:	1b75      	subs	r5, r6, r5
 8020b20:	4621      	mov	r1, r4
 8020b22:	9801      	ldr	r0, [sp, #4]
 8020b24:	462a      	mov	r2, r5
 8020b26:	f7fe fb3f 	bl	801f1a8 <__lshift>
 8020b2a:	1b7f      	subs	r7, r7, r5
 8020b2c:	4604      	mov	r4, r0
 8020b2e:	f100 0a14 	add.w	sl, r0, #20
 8020b32:	f04f 0900 	mov.w	r9, #0
 8020b36:	e7b8      	b.n	8020aaa <__gethex+0x1b6>
 8020b38:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8020b3c:	42bd      	cmp	r5, r7
 8020b3e:	dd6f      	ble.n	8020c20 <__gethex+0x32c>
 8020b40:	1bed      	subs	r5, r5, r7
 8020b42:	42ae      	cmp	r6, r5
 8020b44:	dc34      	bgt.n	8020bb0 <__gethex+0x2bc>
 8020b46:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8020b4a:	2b02      	cmp	r3, #2
 8020b4c:	d022      	beq.n	8020b94 <__gethex+0x2a0>
 8020b4e:	2b03      	cmp	r3, #3
 8020b50:	d024      	beq.n	8020b9c <__gethex+0x2a8>
 8020b52:	2b01      	cmp	r3, #1
 8020b54:	d115      	bne.n	8020b82 <__gethex+0x28e>
 8020b56:	42ae      	cmp	r6, r5
 8020b58:	d113      	bne.n	8020b82 <__gethex+0x28e>
 8020b5a:	2e01      	cmp	r6, #1
 8020b5c:	d10b      	bne.n	8020b76 <__gethex+0x282>
 8020b5e:	9a02      	ldr	r2, [sp, #8]
 8020b60:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8020b64:	6013      	str	r3, [r2, #0]
 8020b66:	2301      	movs	r3, #1
 8020b68:	6123      	str	r3, [r4, #16]
 8020b6a:	f8ca 3000 	str.w	r3, [sl]
 8020b6e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8020b70:	2562      	movs	r5, #98	@ 0x62
 8020b72:	601c      	str	r4, [r3, #0]
 8020b74:	e73a      	b.n	80209ec <__gethex+0xf8>
 8020b76:	1e71      	subs	r1, r6, #1
 8020b78:	4620      	mov	r0, r4
 8020b7a:	f7fe fd4e 	bl	801f61a <__any_on>
 8020b7e:	2800      	cmp	r0, #0
 8020b80:	d1ed      	bne.n	8020b5e <__gethex+0x26a>
 8020b82:	9801      	ldr	r0, [sp, #4]
 8020b84:	4621      	mov	r1, r4
 8020b86:	f7fe f8f7 	bl	801ed78 <_Bfree>
 8020b8a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8020b8c:	2300      	movs	r3, #0
 8020b8e:	6013      	str	r3, [r2, #0]
 8020b90:	2550      	movs	r5, #80	@ 0x50
 8020b92:	e72b      	b.n	80209ec <__gethex+0xf8>
 8020b94:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8020b96:	2b00      	cmp	r3, #0
 8020b98:	d1f3      	bne.n	8020b82 <__gethex+0x28e>
 8020b9a:	e7e0      	b.n	8020b5e <__gethex+0x26a>
 8020b9c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8020b9e:	2b00      	cmp	r3, #0
 8020ba0:	d1dd      	bne.n	8020b5e <__gethex+0x26a>
 8020ba2:	e7ee      	b.n	8020b82 <__gethex+0x28e>
 8020ba4:	08022210 	.word	0x08022210
 8020ba8:	080220a5 	.word	0x080220a5
 8020bac:	080223be 	.word	0x080223be
 8020bb0:	1e6f      	subs	r7, r5, #1
 8020bb2:	f1b9 0f00 	cmp.w	r9, #0
 8020bb6:	d130      	bne.n	8020c1a <__gethex+0x326>
 8020bb8:	b127      	cbz	r7, 8020bc4 <__gethex+0x2d0>
 8020bba:	4639      	mov	r1, r7
 8020bbc:	4620      	mov	r0, r4
 8020bbe:	f7fe fd2c 	bl	801f61a <__any_on>
 8020bc2:	4681      	mov	r9, r0
 8020bc4:	117a      	asrs	r2, r7, #5
 8020bc6:	2301      	movs	r3, #1
 8020bc8:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8020bcc:	f007 071f 	and.w	r7, r7, #31
 8020bd0:	40bb      	lsls	r3, r7
 8020bd2:	4213      	tst	r3, r2
 8020bd4:	4629      	mov	r1, r5
 8020bd6:	4620      	mov	r0, r4
 8020bd8:	bf18      	it	ne
 8020bda:	f049 0902 	orrne.w	r9, r9, #2
 8020bde:	f7ff fe21 	bl	8020824 <rshift>
 8020be2:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8020be6:	1b76      	subs	r6, r6, r5
 8020be8:	2502      	movs	r5, #2
 8020bea:	f1b9 0f00 	cmp.w	r9, #0
 8020bee:	d047      	beq.n	8020c80 <__gethex+0x38c>
 8020bf0:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8020bf4:	2b02      	cmp	r3, #2
 8020bf6:	d015      	beq.n	8020c24 <__gethex+0x330>
 8020bf8:	2b03      	cmp	r3, #3
 8020bfa:	d017      	beq.n	8020c2c <__gethex+0x338>
 8020bfc:	2b01      	cmp	r3, #1
 8020bfe:	d109      	bne.n	8020c14 <__gethex+0x320>
 8020c00:	f019 0f02 	tst.w	r9, #2
 8020c04:	d006      	beq.n	8020c14 <__gethex+0x320>
 8020c06:	f8da 3000 	ldr.w	r3, [sl]
 8020c0a:	ea49 0903 	orr.w	r9, r9, r3
 8020c0e:	f019 0f01 	tst.w	r9, #1
 8020c12:	d10e      	bne.n	8020c32 <__gethex+0x33e>
 8020c14:	f045 0510 	orr.w	r5, r5, #16
 8020c18:	e032      	b.n	8020c80 <__gethex+0x38c>
 8020c1a:	f04f 0901 	mov.w	r9, #1
 8020c1e:	e7d1      	b.n	8020bc4 <__gethex+0x2d0>
 8020c20:	2501      	movs	r5, #1
 8020c22:	e7e2      	b.n	8020bea <__gethex+0x2f6>
 8020c24:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8020c26:	f1c3 0301 	rsb	r3, r3, #1
 8020c2a:	930f      	str	r3, [sp, #60]	@ 0x3c
 8020c2c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8020c2e:	2b00      	cmp	r3, #0
 8020c30:	d0f0      	beq.n	8020c14 <__gethex+0x320>
 8020c32:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8020c36:	f104 0314 	add.w	r3, r4, #20
 8020c3a:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8020c3e:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8020c42:	f04f 0c00 	mov.w	ip, #0
 8020c46:	4618      	mov	r0, r3
 8020c48:	f853 2b04 	ldr.w	r2, [r3], #4
 8020c4c:	f1b2 3fff 	cmp.w	r2, #4294967295	@ 0xffffffff
 8020c50:	d01b      	beq.n	8020c8a <__gethex+0x396>
 8020c52:	3201      	adds	r2, #1
 8020c54:	6002      	str	r2, [r0, #0]
 8020c56:	2d02      	cmp	r5, #2
 8020c58:	f104 0314 	add.w	r3, r4, #20
 8020c5c:	d13c      	bne.n	8020cd8 <__gethex+0x3e4>
 8020c5e:	f8d8 2000 	ldr.w	r2, [r8]
 8020c62:	3a01      	subs	r2, #1
 8020c64:	42b2      	cmp	r2, r6
 8020c66:	d109      	bne.n	8020c7c <__gethex+0x388>
 8020c68:	1171      	asrs	r1, r6, #5
 8020c6a:	2201      	movs	r2, #1
 8020c6c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8020c70:	f006 061f 	and.w	r6, r6, #31
 8020c74:	fa02 f606 	lsl.w	r6, r2, r6
 8020c78:	421e      	tst	r6, r3
 8020c7a:	d13a      	bne.n	8020cf2 <__gethex+0x3fe>
 8020c7c:	f045 0520 	orr.w	r5, r5, #32
 8020c80:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8020c82:	601c      	str	r4, [r3, #0]
 8020c84:	9b02      	ldr	r3, [sp, #8]
 8020c86:	601f      	str	r7, [r3, #0]
 8020c88:	e6b0      	b.n	80209ec <__gethex+0xf8>
 8020c8a:	4299      	cmp	r1, r3
 8020c8c:	f843 cc04 	str.w	ip, [r3, #-4]
 8020c90:	d8d9      	bhi.n	8020c46 <__gethex+0x352>
 8020c92:	68a3      	ldr	r3, [r4, #8]
 8020c94:	459b      	cmp	fp, r3
 8020c96:	db17      	blt.n	8020cc8 <__gethex+0x3d4>
 8020c98:	6861      	ldr	r1, [r4, #4]
 8020c9a:	9801      	ldr	r0, [sp, #4]
 8020c9c:	3101      	adds	r1, #1
 8020c9e:	f7fe f82b 	bl	801ecf8 <_Balloc>
 8020ca2:	4681      	mov	r9, r0
 8020ca4:	b918      	cbnz	r0, 8020cae <__gethex+0x3ba>
 8020ca6:	4b1a      	ldr	r3, [pc, #104]	@ (8020d10 <__gethex+0x41c>)
 8020ca8:	4602      	mov	r2, r0
 8020caa:	2184      	movs	r1, #132	@ 0x84
 8020cac:	e6c5      	b.n	8020a3a <__gethex+0x146>
 8020cae:	6922      	ldr	r2, [r4, #16]
 8020cb0:	3202      	adds	r2, #2
 8020cb2:	f104 010c 	add.w	r1, r4, #12
 8020cb6:	0092      	lsls	r2, r2, #2
 8020cb8:	300c      	adds	r0, #12
 8020cba:	f7fd f824 	bl	801dd06 <memcpy>
 8020cbe:	4621      	mov	r1, r4
 8020cc0:	9801      	ldr	r0, [sp, #4]
 8020cc2:	f7fe f859 	bl	801ed78 <_Bfree>
 8020cc6:	464c      	mov	r4, r9
 8020cc8:	6923      	ldr	r3, [r4, #16]
 8020cca:	1c5a      	adds	r2, r3, #1
 8020ccc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8020cd0:	6122      	str	r2, [r4, #16]
 8020cd2:	2201      	movs	r2, #1
 8020cd4:	615a      	str	r2, [r3, #20]
 8020cd6:	e7be      	b.n	8020c56 <__gethex+0x362>
 8020cd8:	6922      	ldr	r2, [r4, #16]
 8020cda:	455a      	cmp	r2, fp
 8020cdc:	dd0b      	ble.n	8020cf6 <__gethex+0x402>
 8020cde:	2101      	movs	r1, #1
 8020ce0:	4620      	mov	r0, r4
 8020ce2:	f7ff fd9f 	bl	8020824 <rshift>
 8020ce6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8020cea:	3701      	adds	r7, #1
 8020cec:	42bb      	cmp	r3, r7
 8020cee:	f6ff aee0 	blt.w	8020ab2 <__gethex+0x1be>
 8020cf2:	2501      	movs	r5, #1
 8020cf4:	e7c2      	b.n	8020c7c <__gethex+0x388>
 8020cf6:	f016 061f 	ands.w	r6, r6, #31
 8020cfa:	d0fa      	beq.n	8020cf2 <__gethex+0x3fe>
 8020cfc:	4453      	add	r3, sl
 8020cfe:	f1c6 0620 	rsb	r6, r6, #32
 8020d02:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8020d06:	f7fe f8e9 	bl	801eedc <__hi0bits>
 8020d0a:	42b0      	cmp	r0, r6
 8020d0c:	dbe7      	blt.n	8020cde <__gethex+0x3ea>
 8020d0e:	e7f0      	b.n	8020cf2 <__gethex+0x3fe>
 8020d10:	080220a5 	.word	0x080220a5

08020d14 <L_shift>:
 8020d14:	f1c2 0208 	rsb	r2, r2, #8
 8020d18:	0092      	lsls	r2, r2, #2
 8020d1a:	b570      	push	{r4, r5, r6, lr}
 8020d1c:	f1c2 0620 	rsb	r6, r2, #32
 8020d20:	6843      	ldr	r3, [r0, #4]
 8020d22:	6804      	ldr	r4, [r0, #0]
 8020d24:	fa03 f506 	lsl.w	r5, r3, r6
 8020d28:	432c      	orrs	r4, r5
 8020d2a:	40d3      	lsrs	r3, r2
 8020d2c:	6004      	str	r4, [r0, #0]
 8020d2e:	f840 3f04 	str.w	r3, [r0, #4]!
 8020d32:	4288      	cmp	r0, r1
 8020d34:	d3f4      	bcc.n	8020d20 <L_shift+0xc>
 8020d36:	bd70      	pop	{r4, r5, r6, pc}

08020d38 <__match>:
 8020d38:	b530      	push	{r4, r5, lr}
 8020d3a:	6803      	ldr	r3, [r0, #0]
 8020d3c:	3301      	adds	r3, #1
 8020d3e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8020d42:	b914      	cbnz	r4, 8020d4a <__match+0x12>
 8020d44:	6003      	str	r3, [r0, #0]
 8020d46:	2001      	movs	r0, #1
 8020d48:	bd30      	pop	{r4, r5, pc}
 8020d4a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8020d4e:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8020d52:	2d19      	cmp	r5, #25
 8020d54:	bf98      	it	ls
 8020d56:	3220      	addls	r2, #32
 8020d58:	42a2      	cmp	r2, r4
 8020d5a:	d0f0      	beq.n	8020d3e <__match+0x6>
 8020d5c:	2000      	movs	r0, #0
 8020d5e:	e7f3      	b.n	8020d48 <__match+0x10>

08020d60 <__hexnan>:
 8020d60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020d64:	680b      	ldr	r3, [r1, #0]
 8020d66:	6801      	ldr	r1, [r0, #0]
 8020d68:	115e      	asrs	r6, r3, #5
 8020d6a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8020d6e:	f013 031f 	ands.w	r3, r3, #31
 8020d72:	b087      	sub	sp, #28
 8020d74:	bf18      	it	ne
 8020d76:	3604      	addne	r6, #4
 8020d78:	2500      	movs	r5, #0
 8020d7a:	1f37      	subs	r7, r6, #4
 8020d7c:	4682      	mov	sl, r0
 8020d7e:	4690      	mov	r8, r2
 8020d80:	9301      	str	r3, [sp, #4]
 8020d82:	f846 5c04 	str.w	r5, [r6, #-4]
 8020d86:	46b9      	mov	r9, r7
 8020d88:	463c      	mov	r4, r7
 8020d8a:	9502      	str	r5, [sp, #8]
 8020d8c:	46ab      	mov	fp, r5
 8020d8e:	784a      	ldrb	r2, [r1, #1]
 8020d90:	1c4b      	adds	r3, r1, #1
 8020d92:	9303      	str	r3, [sp, #12]
 8020d94:	b342      	cbz	r2, 8020de8 <__hexnan+0x88>
 8020d96:	4610      	mov	r0, r2
 8020d98:	9105      	str	r1, [sp, #20]
 8020d9a:	9204      	str	r2, [sp, #16]
 8020d9c:	f7ff fd94 	bl	80208c8 <__hexdig_fun>
 8020da0:	2800      	cmp	r0, #0
 8020da2:	d151      	bne.n	8020e48 <__hexnan+0xe8>
 8020da4:	9a04      	ldr	r2, [sp, #16]
 8020da6:	9905      	ldr	r1, [sp, #20]
 8020da8:	2a20      	cmp	r2, #32
 8020daa:	d818      	bhi.n	8020dde <__hexnan+0x7e>
 8020dac:	9b02      	ldr	r3, [sp, #8]
 8020dae:	459b      	cmp	fp, r3
 8020db0:	dd13      	ble.n	8020dda <__hexnan+0x7a>
 8020db2:	454c      	cmp	r4, r9
 8020db4:	d206      	bcs.n	8020dc4 <__hexnan+0x64>
 8020db6:	2d07      	cmp	r5, #7
 8020db8:	dc04      	bgt.n	8020dc4 <__hexnan+0x64>
 8020dba:	462a      	mov	r2, r5
 8020dbc:	4649      	mov	r1, r9
 8020dbe:	4620      	mov	r0, r4
 8020dc0:	f7ff ffa8 	bl	8020d14 <L_shift>
 8020dc4:	4544      	cmp	r4, r8
 8020dc6:	d952      	bls.n	8020e6e <__hexnan+0x10e>
 8020dc8:	2300      	movs	r3, #0
 8020dca:	f1a4 0904 	sub.w	r9, r4, #4
 8020dce:	f844 3c04 	str.w	r3, [r4, #-4]
 8020dd2:	f8cd b008 	str.w	fp, [sp, #8]
 8020dd6:	464c      	mov	r4, r9
 8020dd8:	461d      	mov	r5, r3
 8020dda:	9903      	ldr	r1, [sp, #12]
 8020ddc:	e7d7      	b.n	8020d8e <__hexnan+0x2e>
 8020dde:	2a29      	cmp	r2, #41	@ 0x29
 8020de0:	d157      	bne.n	8020e92 <__hexnan+0x132>
 8020de2:	3102      	adds	r1, #2
 8020de4:	f8ca 1000 	str.w	r1, [sl]
 8020de8:	f1bb 0f00 	cmp.w	fp, #0
 8020dec:	d051      	beq.n	8020e92 <__hexnan+0x132>
 8020dee:	454c      	cmp	r4, r9
 8020df0:	d206      	bcs.n	8020e00 <__hexnan+0xa0>
 8020df2:	2d07      	cmp	r5, #7
 8020df4:	dc04      	bgt.n	8020e00 <__hexnan+0xa0>
 8020df6:	462a      	mov	r2, r5
 8020df8:	4649      	mov	r1, r9
 8020dfa:	4620      	mov	r0, r4
 8020dfc:	f7ff ff8a 	bl	8020d14 <L_shift>
 8020e00:	4544      	cmp	r4, r8
 8020e02:	d936      	bls.n	8020e72 <__hexnan+0x112>
 8020e04:	f1a8 0204 	sub.w	r2, r8, #4
 8020e08:	4623      	mov	r3, r4
 8020e0a:	f853 1b04 	ldr.w	r1, [r3], #4
 8020e0e:	f842 1f04 	str.w	r1, [r2, #4]!
 8020e12:	429f      	cmp	r7, r3
 8020e14:	d2f9      	bcs.n	8020e0a <__hexnan+0xaa>
 8020e16:	1b3b      	subs	r3, r7, r4
 8020e18:	f023 0303 	bic.w	r3, r3, #3
 8020e1c:	3304      	adds	r3, #4
 8020e1e:	3401      	adds	r4, #1
 8020e20:	3e03      	subs	r6, #3
 8020e22:	42b4      	cmp	r4, r6
 8020e24:	bf88      	it	hi
 8020e26:	2304      	movhi	r3, #4
 8020e28:	4443      	add	r3, r8
 8020e2a:	2200      	movs	r2, #0
 8020e2c:	f843 2b04 	str.w	r2, [r3], #4
 8020e30:	429f      	cmp	r7, r3
 8020e32:	d2fb      	bcs.n	8020e2c <__hexnan+0xcc>
 8020e34:	683b      	ldr	r3, [r7, #0]
 8020e36:	b91b      	cbnz	r3, 8020e40 <__hexnan+0xe0>
 8020e38:	4547      	cmp	r7, r8
 8020e3a:	d128      	bne.n	8020e8e <__hexnan+0x12e>
 8020e3c:	2301      	movs	r3, #1
 8020e3e:	603b      	str	r3, [r7, #0]
 8020e40:	2005      	movs	r0, #5
 8020e42:	b007      	add	sp, #28
 8020e44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020e48:	3501      	adds	r5, #1
 8020e4a:	2d08      	cmp	r5, #8
 8020e4c:	f10b 0b01 	add.w	fp, fp, #1
 8020e50:	dd06      	ble.n	8020e60 <__hexnan+0x100>
 8020e52:	4544      	cmp	r4, r8
 8020e54:	d9c1      	bls.n	8020dda <__hexnan+0x7a>
 8020e56:	2300      	movs	r3, #0
 8020e58:	f844 3c04 	str.w	r3, [r4, #-4]
 8020e5c:	2501      	movs	r5, #1
 8020e5e:	3c04      	subs	r4, #4
 8020e60:	6822      	ldr	r2, [r4, #0]
 8020e62:	f000 000f 	and.w	r0, r0, #15
 8020e66:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8020e6a:	6020      	str	r0, [r4, #0]
 8020e6c:	e7b5      	b.n	8020dda <__hexnan+0x7a>
 8020e6e:	2508      	movs	r5, #8
 8020e70:	e7b3      	b.n	8020dda <__hexnan+0x7a>
 8020e72:	9b01      	ldr	r3, [sp, #4]
 8020e74:	2b00      	cmp	r3, #0
 8020e76:	d0dd      	beq.n	8020e34 <__hexnan+0xd4>
 8020e78:	f1c3 0320 	rsb	r3, r3, #32
 8020e7c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8020e80:	40da      	lsrs	r2, r3
 8020e82:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8020e86:	4013      	ands	r3, r2
 8020e88:	f846 3c04 	str.w	r3, [r6, #-4]
 8020e8c:	e7d2      	b.n	8020e34 <__hexnan+0xd4>
 8020e8e:	3f04      	subs	r7, #4
 8020e90:	e7d0      	b.n	8020e34 <__hexnan+0xd4>
 8020e92:	2004      	movs	r0, #4
 8020e94:	e7d5      	b.n	8020e42 <__hexnan+0xe2>

08020e96 <__ascii_mbtowc>:
 8020e96:	b082      	sub	sp, #8
 8020e98:	b901      	cbnz	r1, 8020e9c <__ascii_mbtowc+0x6>
 8020e9a:	a901      	add	r1, sp, #4
 8020e9c:	b142      	cbz	r2, 8020eb0 <__ascii_mbtowc+0x1a>
 8020e9e:	b14b      	cbz	r3, 8020eb4 <__ascii_mbtowc+0x1e>
 8020ea0:	7813      	ldrb	r3, [r2, #0]
 8020ea2:	600b      	str	r3, [r1, #0]
 8020ea4:	7812      	ldrb	r2, [r2, #0]
 8020ea6:	1e10      	subs	r0, r2, #0
 8020ea8:	bf18      	it	ne
 8020eaa:	2001      	movne	r0, #1
 8020eac:	b002      	add	sp, #8
 8020eae:	4770      	bx	lr
 8020eb0:	4610      	mov	r0, r2
 8020eb2:	e7fb      	b.n	8020eac <__ascii_mbtowc+0x16>
 8020eb4:	f06f 0001 	mvn.w	r0, #1
 8020eb8:	e7f8      	b.n	8020eac <__ascii_mbtowc+0x16>

08020eba <_realloc_r>:
 8020eba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8020ebe:	4680      	mov	r8, r0
 8020ec0:	4615      	mov	r5, r2
 8020ec2:	460c      	mov	r4, r1
 8020ec4:	b921      	cbnz	r1, 8020ed0 <_realloc_r+0x16>
 8020ec6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8020eca:	4611      	mov	r1, r2
 8020ecc:	f7fd be88 	b.w	801ebe0 <_malloc_r>
 8020ed0:	b92a      	cbnz	r2, 8020ede <_realloc_r+0x24>
 8020ed2:	f7fd fe11 	bl	801eaf8 <_free_r>
 8020ed6:	2400      	movs	r4, #0
 8020ed8:	4620      	mov	r0, r4
 8020eda:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8020ede:	f000 f840 	bl	8020f62 <_malloc_usable_size_r>
 8020ee2:	4285      	cmp	r5, r0
 8020ee4:	4606      	mov	r6, r0
 8020ee6:	d802      	bhi.n	8020eee <_realloc_r+0x34>
 8020ee8:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8020eec:	d8f4      	bhi.n	8020ed8 <_realloc_r+0x1e>
 8020eee:	4629      	mov	r1, r5
 8020ef0:	4640      	mov	r0, r8
 8020ef2:	f7fd fe75 	bl	801ebe0 <_malloc_r>
 8020ef6:	4607      	mov	r7, r0
 8020ef8:	2800      	cmp	r0, #0
 8020efa:	d0ec      	beq.n	8020ed6 <_realloc_r+0x1c>
 8020efc:	42b5      	cmp	r5, r6
 8020efe:	462a      	mov	r2, r5
 8020f00:	4621      	mov	r1, r4
 8020f02:	bf28      	it	cs
 8020f04:	4632      	movcs	r2, r6
 8020f06:	f7fc fefe 	bl	801dd06 <memcpy>
 8020f0a:	4621      	mov	r1, r4
 8020f0c:	4640      	mov	r0, r8
 8020f0e:	f7fd fdf3 	bl	801eaf8 <_free_r>
 8020f12:	463c      	mov	r4, r7
 8020f14:	e7e0      	b.n	8020ed8 <_realloc_r+0x1e>

08020f16 <__ascii_wctomb>:
 8020f16:	4603      	mov	r3, r0
 8020f18:	4608      	mov	r0, r1
 8020f1a:	b141      	cbz	r1, 8020f2e <__ascii_wctomb+0x18>
 8020f1c:	2aff      	cmp	r2, #255	@ 0xff
 8020f1e:	d904      	bls.n	8020f2a <__ascii_wctomb+0x14>
 8020f20:	228a      	movs	r2, #138	@ 0x8a
 8020f22:	601a      	str	r2, [r3, #0]
 8020f24:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8020f28:	4770      	bx	lr
 8020f2a:	700a      	strb	r2, [r1, #0]
 8020f2c:	2001      	movs	r0, #1
 8020f2e:	4770      	bx	lr

08020f30 <fiprintf>:
 8020f30:	b40e      	push	{r1, r2, r3}
 8020f32:	b503      	push	{r0, r1, lr}
 8020f34:	4601      	mov	r1, r0
 8020f36:	ab03      	add	r3, sp, #12
 8020f38:	4805      	ldr	r0, [pc, #20]	@ (8020f50 <fiprintf+0x20>)
 8020f3a:	f853 2b04 	ldr.w	r2, [r3], #4
 8020f3e:	6800      	ldr	r0, [r0, #0]
 8020f40:	9301      	str	r3, [sp, #4]
 8020f42:	f000 f83f 	bl	8020fc4 <_vfiprintf_r>
 8020f46:	b002      	add	sp, #8
 8020f48:	f85d eb04 	ldr.w	lr, [sp], #4
 8020f4c:	b003      	add	sp, #12
 8020f4e:	4770      	bx	lr
 8020f50:	2000010c 	.word	0x2000010c

08020f54 <abort>:
 8020f54:	b508      	push	{r3, lr}
 8020f56:	2006      	movs	r0, #6
 8020f58:	f000 fa08 	bl	802136c <raise>
 8020f5c:	2001      	movs	r0, #1
 8020f5e:	f7ea fecd 	bl	800bcfc <_exit>

08020f62 <_malloc_usable_size_r>:
 8020f62:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8020f66:	1f18      	subs	r0, r3, #4
 8020f68:	2b00      	cmp	r3, #0
 8020f6a:	bfbc      	itt	lt
 8020f6c:	580b      	ldrlt	r3, [r1, r0]
 8020f6e:	18c0      	addlt	r0, r0, r3
 8020f70:	4770      	bx	lr

08020f72 <__sfputc_r>:
 8020f72:	6893      	ldr	r3, [r2, #8]
 8020f74:	3b01      	subs	r3, #1
 8020f76:	2b00      	cmp	r3, #0
 8020f78:	b410      	push	{r4}
 8020f7a:	6093      	str	r3, [r2, #8]
 8020f7c:	da08      	bge.n	8020f90 <__sfputc_r+0x1e>
 8020f7e:	6994      	ldr	r4, [r2, #24]
 8020f80:	42a3      	cmp	r3, r4
 8020f82:	db01      	blt.n	8020f88 <__sfputc_r+0x16>
 8020f84:	290a      	cmp	r1, #10
 8020f86:	d103      	bne.n	8020f90 <__sfputc_r+0x1e>
 8020f88:	f85d 4b04 	ldr.w	r4, [sp], #4
 8020f8c:	f000 b932 	b.w	80211f4 <__swbuf_r>
 8020f90:	6813      	ldr	r3, [r2, #0]
 8020f92:	1c58      	adds	r0, r3, #1
 8020f94:	6010      	str	r0, [r2, #0]
 8020f96:	7019      	strb	r1, [r3, #0]
 8020f98:	4608      	mov	r0, r1
 8020f9a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8020f9e:	4770      	bx	lr

08020fa0 <__sfputs_r>:
 8020fa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8020fa2:	4606      	mov	r6, r0
 8020fa4:	460f      	mov	r7, r1
 8020fa6:	4614      	mov	r4, r2
 8020fa8:	18d5      	adds	r5, r2, r3
 8020faa:	42ac      	cmp	r4, r5
 8020fac:	d101      	bne.n	8020fb2 <__sfputs_r+0x12>
 8020fae:	2000      	movs	r0, #0
 8020fb0:	e007      	b.n	8020fc2 <__sfputs_r+0x22>
 8020fb2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8020fb6:	463a      	mov	r2, r7
 8020fb8:	4630      	mov	r0, r6
 8020fba:	f7ff ffda 	bl	8020f72 <__sfputc_r>
 8020fbe:	1c43      	adds	r3, r0, #1
 8020fc0:	d1f3      	bne.n	8020faa <__sfputs_r+0xa>
 8020fc2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08020fc4 <_vfiprintf_r>:
 8020fc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020fc8:	460d      	mov	r5, r1
 8020fca:	b09d      	sub	sp, #116	@ 0x74
 8020fcc:	4614      	mov	r4, r2
 8020fce:	4698      	mov	r8, r3
 8020fd0:	4606      	mov	r6, r0
 8020fd2:	b118      	cbz	r0, 8020fdc <_vfiprintf_r+0x18>
 8020fd4:	6a03      	ldr	r3, [r0, #32]
 8020fd6:	b90b      	cbnz	r3, 8020fdc <_vfiprintf_r+0x18>
 8020fd8:	f7fc fcfe 	bl	801d9d8 <__sinit>
 8020fdc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8020fde:	07d9      	lsls	r1, r3, #31
 8020fe0:	d405      	bmi.n	8020fee <_vfiprintf_r+0x2a>
 8020fe2:	89ab      	ldrh	r3, [r5, #12]
 8020fe4:	059a      	lsls	r2, r3, #22
 8020fe6:	d402      	bmi.n	8020fee <_vfiprintf_r+0x2a>
 8020fe8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8020fea:	f7fc fe8a 	bl	801dd02 <__retarget_lock_acquire_recursive>
 8020fee:	89ab      	ldrh	r3, [r5, #12]
 8020ff0:	071b      	lsls	r3, r3, #28
 8020ff2:	d501      	bpl.n	8020ff8 <_vfiprintf_r+0x34>
 8020ff4:	692b      	ldr	r3, [r5, #16]
 8020ff6:	b99b      	cbnz	r3, 8021020 <_vfiprintf_r+0x5c>
 8020ff8:	4629      	mov	r1, r5
 8020ffa:	4630      	mov	r0, r6
 8020ffc:	f000 f938 	bl	8021270 <__swsetup_r>
 8021000:	b170      	cbz	r0, 8021020 <_vfiprintf_r+0x5c>
 8021002:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8021004:	07dc      	lsls	r4, r3, #31
 8021006:	d504      	bpl.n	8021012 <_vfiprintf_r+0x4e>
 8021008:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 802100c:	b01d      	add	sp, #116	@ 0x74
 802100e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021012:	89ab      	ldrh	r3, [r5, #12]
 8021014:	0598      	lsls	r0, r3, #22
 8021016:	d4f7      	bmi.n	8021008 <_vfiprintf_r+0x44>
 8021018:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 802101a:	f7fc fe73 	bl	801dd04 <__retarget_lock_release_recursive>
 802101e:	e7f3      	b.n	8021008 <_vfiprintf_r+0x44>
 8021020:	2300      	movs	r3, #0
 8021022:	9309      	str	r3, [sp, #36]	@ 0x24
 8021024:	2320      	movs	r3, #32
 8021026:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 802102a:	f8cd 800c 	str.w	r8, [sp, #12]
 802102e:	2330      	movs	r3, #48	@ 0x30
 8021030:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80211e0 <_vfiprintf_r+0x21c>
 8021034:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8021038:	f04f 0901 	mov.w	r9, #1
 802103c:	4623      	mov	r3, r4
 802103e:	469a      	mov	sl, r3
 8021040:	f813 2b01 	ldrb.w	r2, [r3], #1
 8021044:	b10a      	cbz	r2, 802104a <_vfiprintf_r+0x86>
 8021046:	2a25      	cmp	r2, #37	@ 0x25
 8021048:	d1f9      	bne.n	802103e <_vfiprintf_r+0x7a>
 802104a:	ebba 0b04 	subs.w	fp, sl, r4
 802104e:	d00b      	beq.n	8021068 <_vfiprintf_r+0xa4>
 8021050:	465b      	mov	r3, fp
 8021052:	4622      	mov	r2, r4
 8021054:	4629      	mov	r1, r5
 8021056:	4630      	mov	r0, r6
 8021058:	f7ff ffa2 	bl	8020fa0 <__sfputs_r>
 802105c:	3001      	adds	r0, #1
 802105e:	f000 80a7 	beq.w	80211b0 <_vfiprintf_r+0x1ec>
 8021062:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8021064:	445a      	add	r2, fp
 8021066:	9209      	str	r2, [sp, #36]	@ 0x24
 8021068:	f89a 3000 	ldrb.w	r3, [sl]
 802106c:	2b00      	cmp	r3, #0
 802106e:	f000 809f 	beq.w	80211b0 <_vfiprintf_r+0x1ec>
 8021072:	2300      	movs	r3, #0
 8021074:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8021078:	e9cd 2305 	strd	r2, r3, [sp, #20]
 802107c:	f10a 0a01 	add.w	sl, sl, #1
 8021080:	9304      	str	r3, [sp, #16]
 8021082:	9307      	str	r3, [sp, #28]
 8021084:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8021088:	931a      	str	r3, [sp, #104]	@ 0x68
 802108a:	4654      	mov	r4, sl
 802108c:	2205      	movs	r2, #5
 802108e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8021092:	4853      	ldr	r0, [pc, #332]	@ (80211e0 <_vfiprintf_r+0x21c>)
 8021094:	f7df f89c 	bl	80001d0 <memchr>
 8021098:	9a04      	ldr	r2, [sp, #16]
 802109a:	b9d8      	cbnz	r0, 80210d4 <_vfiprintf_r+0x110>
 802109c:	06d1      	lsls	r1, r2, #27
 802109e:	bf44      	itt	mi
 80210a0:	2320      	movmi	r3, #32
 80210a2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80210a6:	0713      	lsls	r3, r2, #28
 80210a8:	bf44      	itt	mi
 80210aa:	232b      	movmi	r3, #43	@ 0x2b
 80210ac:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80210b0:	f89a 3000 	ldrb.w	r3, [sl]
 80210b4:	2b2a      	cmp	r3, #42	@ 0x2a
 80210b6:	d015      	beq.n	80210e4 <_vfiprintf_r+0x120>
 80210b8:	9a07      	ldr	r2, [sp, #28]
 80210ba:	4654      	mov	r4, sl
 80210bc:	2000      	movs	r0, #0
 80210be:	f04f 0c0a 	mov.w	ip, #10
 80210c2:	4621      	mov	r1, r4
 80210c4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80210c8:	3b30      	subs	r3, #48	@ 0x30
 80210ca:	2b09      	cmp	r3, #9
 80210cc:	d94b      	bls.n	8021166 <_vfiprintf_r+0x1a2>
 80210ce:	b1b0      	cbz	r0, 80210fe <_vfiprintf_r+0x13a>
 80210d0:	9207      	str	r2, [sp, #28]
 80210d2:	e014      	b.n	80210fe <_vfiprintf_r+0x13a>
 80210d4:	eba0 0308 	sub.w	r3, r0, r8
 80210d8:	fa09 f303 	lsl.w	r3, r9, r3
 80210dc:	4313      	orrs	r3, r2
 80210de:	9304      	str	r3, [sp, #16]
 80210e0:	46a2      	mov	sl, r4
 80210e2:	e7d2      	b.n	802108a <_vfiprintf_r+0xc6>
 80210e4:	9b03      	ldr	r3, [sp, #12]
 80210e6:	1d19      	adds	r1, r3, #4
 80210e8:	681b      	ldr	r3, [r3, #0]
 80210ea:	9103      	str	r1, [sp, #12]
 80210ec:	2b00      	cmp	r3, #0
 80210ee:	bfbb      	ittet	lt
 80210f0:	425b      	neglt	r3, r3
 80210f2:	f042 0202 	orrlt.w	r2, r2, #2
 80210f6:	9307      	strge	r3, [sp, #28]
 80210f8:	9307      	strlt	r3, [sp, #28]
 80210fa:	bfb8      	it	lt
 80210fc:	9204      	strlt	r2, [sp, #16]
 80210fe:	7823      	ldrb	r3, [r4, #0]
 8021100:	2b2e      	cmp	r3, #46	@ 0x2e
 8021102:	d10a      	bne.n	802111a <_vfiprintf_r+0x156>
 8021104:	7863      	ldrb	r3, [r4, #1]
 8021106:	2b2a      	cmp	r3, #42	@ 0x2a
 8021108:	d132      	bne.n	8021170 <_vfiprintf_r+0x1ac>
 802110a:	9b03      	ldr	r3, [sp, #12]
 802110c:	1d1a      	adds	r2, r3, #4
 802110e:	681b      	ldr	r3, [r3, #0]
 8021110:	9203      	str	r2, [sp, #12]
 8021112:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8021116:	3402      	adds	r4, #2
 8021118:	9305      	str	r3, [sp, #20]
 802111a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80211f0 <_vfiprintf_r+0x22c>
 802111e:	7821      	ldrb	r1, [r4, #0]
 8021120:	2203      	movs	r2, #3
 8021122:	4650      	mov	r0, sl
 8021124:	f7df f854 	bl	80001d0 <memchr>
 8021128:	b138      	cbz	r0, 802113a <_vfiprintf_r+0x176>
 802112a:	9b04      	ldr	r3, [sp, #16]
 802112c:	eba0 000a 	sub.w	r0, r0, sl
 8021130:	2240      	movs	r2, #64	@ 0x40
 8021132:	4082      	lsls	r2, r0
 8021134:	4313      	orrs	r3, r2
 8021136:	3401      	adds	r4, #1
 8021138:	9304      	str	r3, [sp, #16]
 802113a:	f814 1b01 	ldrb.w	r1, [r4], #1
 802113e:	4829      	ldr	r0, [pc, #164]	@ (80211e4 <_vfiprintf_r+0x220>)
 8021140:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8021144:	2206      	movs	r2, #6
 8021146:	f7df f843 	bl	80001d0 <memchr>
 802114a:	2800      	cmp	r0, #0
 802114c:	d03f      	beq.n	80211ce <_vfiprintf_r+0x20a>
 802114e:	4b26      	ldr	r3, [pc, #152]	@ (80211e8 <_vfiprintf_r+0x224>)
 8021150:	bb1b      	cbnz	r3, 802119a <_vfiprintf_r+0x1d6>
 8021152:	9b03      	ldr	r3, [sp, #12]
 8021154:	3307      	adds	r3, #7
 8021156:	f023 0307 	bic.w	r3, r3, #7
 802115a:	3308      	adds	r3, #8
 802115c:	9303      	str	r3, [sp, #12]
 802115e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8021160:	443b      	add	r3, r7
 8021162:	9309      	str	r3, [sp, #36]	@ 0x24
 8021164:	e76a      	b.n	802103c <_vfiprintf_r+0x78>
 8021166:	fb0c 3202 	mla	r2, ip, r2, r3
 802116a:	460c      	mov	r4, r1
 802116c:	2001      	movs	r0, #1
 802116e:	e7a8      	b.n	80210c2 <_vfiprintf_r+0xfe>
 8021170:	2300      	movs	r3, #0
 8021172:	3401      	adds	r4, #1
 8021174:	9305      	str	r3, [sp, #20]
 8021176:	4619      	mov	r1, r3
 8021178:	f04f 0c0a 	mov.w	ip, #10
 802117c:	4620      	mov	r0, r4
 802117e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8021182:	3a30      	subs	r2, #48	@ 0x30
 8021184:	2a09      	cmp	r2, #9
 8021186:	d903      	bls.n	8021190 <_vfiprintf_r+0x1cc>
 8021188:	2b00      	cmp	r3, #0
 802118a:	d0c6      	beq.n	802111a <_vfiprintf_r+0x156>
 802118c:	9105      	str	r1, [sp, #20]
 802118e:	e7c4      	b.n	802111a <_vfiprintf_r+0x156>
 8021190:	fb0c 2101 	mla	r1, ip, r1, r2
 8021194:	4604      	mov	r4, r0
 8021196:	2301      	movs	r3, #1
 8021198:	e7f0      	b.n	802117c <_vfiprintf_r+0x1b8>
 802119a:	ab03      	add	r3, sp, #12
 802119c:	9300      	str	r3, [sp, #0]
 802119e:	462a      	mov	r2, r5
 80211a0:	4b12      	ldr	r3, [pc, #72]	@ (80211ec <_vfiprintf_r+0x228>)
 80211a2:	a904      	add	r1, sp, #16
 80211a4:	4630      	mov	r0, r6
 80211a6:	f7fb fdbf 	bl	801cd28 <_printf_float>
 80211aa:	4607      	mov	r7, r0
 80211ac:	1c78      	adds	r0, r7, #1
 80211ae:	d1d6      	bne.n	802115e <_vfiprintf_r+0x19a>
 80211b0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80211b2:	07d9      	lsls	r1, r3, #31
 80211b4:	d405      	bmi.n	80211c2 <_vfiprintf_r+0x1fe>
 80211b6:	89ab      	ldrh	r3, [r5, #12]
 80211b8:	059a      	lsls	r2, r3, #22
 80211ba:	d402      	bmi.n	80211c2 <_vfiprintf_r+0x1fe>
 80211bc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80211be:	f7fc fda1 	bl	801dd04 <__retarget_lock_release_recursive>
 80211c2:	89ab      	ldrh	r3, [r5, #12]
 80211c4:	065b      	lsls	r3, r3, #25
 80211c6:	f53f af1f 	bmi.w	8021008 <_vfiprintf_r+0x44>
 80211ca:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80211cc:	e71e      	b.n	802100c <_vfiprintf_r+0x48>
 80211ce:	ab03      	add	r3, sp, #12
 80211d0:	9300      	str	r3, [sp, #0]
 80211d2:	462a      	mov	r2, r5
 80211d4:	4b05      	ldr	r3, [pc, #20]	@ (80211ec <_vfiprintf_r+0x228>)
 80211d6:	a904      	add	r1, sp, #16
 80211d8:	4630      	mov	r0, r6
 80211da:	f7fc f83d 	bl	801d258 <_printf_i>
 80211de:	e7e4      	b.n	80211aa <_vfiprintf_r+0x1e6>
 80211e0:	08022369 	.word	0x08022369
 80211e4:	08022373 	.word	0x08022373
 80211e8:	0801cd29 	.word	0x0801cd29
 80211ec:	08020fa1 	.word	0x08020fa1
 80211f0:	0802236f 	.word	0x0802236f

080211f4 <__swbuf_r>:
 80211f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80211f6:	460e      	mov	r6, r1
 80211f8:	4614      	mov	r4, r2
 80211fa:	4605      	mov	r5, r0
 80211fc:	b118      	cbz	r0, 8021206 <__swbuf_r+0x12>
 80211fe:	6a03      	ldr	r3, [r0, #32]
 8021200:	b90b      	cbnz	r3, 8021206 <__swbuf_r+0x12>
 8021202:	f7fc fbe9 	bl	801d9d8 <__sinit>
 8021206:	69a3      	ldr	r3, [r4, #24]
 8021208:	60a3      	str	r3, [r4, #8]
 802120a:	89a3      	ldrh	r3, [r4, #12]
 802120c:	071a      	lsls	r2, r3, #28
 802120e:	d501      	bpl.n	8021214 <__swbuf_r+0x20>
 8021210:	6923      	ldr	r3, [r4, #16]
 8021212:	b943      	cbnz	r3, 8021226 <__swbuf_r+0x32>
 8021214:	4621      	mov	r1, r4
 8021216:	4628      	mov	r0, r5
 8021218:	f000 f82a 	bl	8021270 <__swsetup_r>
 802121c:	b118      	cbz	r0, 8021226 <__swbuf_r+0x32>
 802121e:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8021222:	4638      	mov	r0, r7
 8021224:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8021226:	6823      	ldr	r3, [r4, #0]
 8021228:	6922      	ldr	r2, [r4, #16]
 802122a:	1a98      	subs	r0, r3, r2
 802122c:	6963      	ldr	r3, [r4, #20]
 802122e:	b2f6      	uxtb	r6, r6
 8021230:	4283      	cmp	r3, r0
 8021232:	4637      	mov	r7, r6
 8021234:	dc05      	bgt.n	8021242 <__swbuf_r+0x4e>
 8021236:	4621      	mov	r1, r4
 8021238:	4628      	mov	r0, r5
 802123a:	f7ff fa6f 	bl	802071c <_fflush_r>
 802123e:	2800      	cmp	r0, #0
 8021240:	d1ed      	bne.n	802121e <__swbuf_r+0x2a>
 8021242:	68a3      	ldr	r3, [r4, #8]
 8021244:	3b01      	subs	r3, #1
 8021246:	60a3      	str	r3, [r4, #8]
 8021248:	6823      	ldr	r3, [r4, #0]
 802124a:	1c5a      	adds	r2, r3, #1
 802124c:	6022      	str	r2, [r4, #0]
 802124e:	701e      	strb	r6, [r3, #0]
 8021250:	6962      	ldr	r2, [r4, #20]
 8021252:	1c43      	adds	r3, r0, #1
 8021254:	429a      	cmp	r2, r3
 8021256:	d004      	beq.n	8021262 <__swbuf_r+0x6e>
 8021258:	89a3      	ldrh	r3, [r4, #12]
 802125a:	07db      	lsls	r3, r3, #31
 802125c:	d5e1      	bpl.n	8021222 <__swbuf_r+0x2e>
 802125e:	2e0a      	cmp	r6, #10
 8021260:	d1df      	bne.n	8021222 <__swbuf_r+0x2e>
 8021262:	4621      	mov	r1, r4
 8021264:	4628      	mov	r0, r5
 8021266:	f7ff fa59 	bl	802071c <_fflush_r>
 802126a:	2800      	cmp	r0, #0
 802126c:	d0d9      	beq.n	8021222 <__swbuf_r+0x2e>
 802126e:	e7d6      	b.n	802121e <__swbuf_r+0x2a>

08021270 <__swsetup_r>:
 8021270:	b538      	push	{r3, r4, r5, lr}
 8021272:	4b29      	ldr	r3, [pc, #164]	@ (8021318 <__swsetup_r+0xa8>)
 8021274:	4605      	mov	r5, r0
 8021276:	6818      	ldr	r0, [r3, #0]
 8021278:	460c      	mov	r4, r1
 802127a:	b118      	cbz	r0, 8021284 <__swsetup_r+0x14>
 802127c:	6a03      	ldr	r3, [r0, #32]
 802127e:	b90b      	cbnz	r3, 8021284 <__swsetup_r+0x14>
 8021280:	f7fc fbaa 	bl	801d9d8 <__sinit>
 8021284:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8021288:	0719      	lsls	r1, r3, #28
 802128a:	d422      	bmi.n	80212d2 <__swsetup_r+0x62>
 802128c:	06da      	lsls	r2, r3, #27
 802128e:	d407      	bmi.n	80212a0 <__swsetup_r+0x30>
 8021290:	2209      	movs	r2, #9
 8021292:	602a      	str	r2, [r5, #0]
 8021294:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8021298:	81a3      	strh	r3, [r4, #12]
 802129a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 802129e:	e033      	b.n	8021308 <__swsetup_r+0x98>
 80212a0:	0758      	lsls	r0, r3, #29
 80212a2:	d512      	bpl.n	80212ca <__swsetup_r+0x5a>
 80212a4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80212a6:	b141      	cbz	r1, 80212ba <__swsetup_r+0x4a>
 80212a8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80212ac:	4299      	cmp	r1, r3
 80212ae:	d002      	beq.n	80212b6 <__swsetup_r+0x46>
 80212b0:	4628      	mov	r0, r5
 80212b2:	f7fd fc21 	bl	801eaf8 <_free_r>
 80212b6:	2300      	movs	r3, #0
 80212b8:	6363      	str	r3, [r4, #52]	@ 0x34
 80212ba:	89a3      	ldrh	r3, [r4, #12]
 80212bc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80212c0:	81a3      	strh	r3, [r4, #12]
 80212c2:	2300      	movs	r3, #0
 80212c4:	6063      	str	r3, [r4, #4]
 80212c6:	6923      	ldr	r3, [r4, #16]
 80212c8:	6023      	str	r3, [r4, #0]
 80212ca:	89a3      	ldrh	r3, [r4, #12]
 80212cc:	f043 0308 	orr.w	r3, r3, #8
 80212d0:	81a3      	strh	r3, [r4, #12]
 80212d2:	6923      	ldr	r3, [r4, #16]
 80212d4:	b94b      	cbnz	r3, 80212ea <__swsetup_r+0x7a>
 80212d6:	89a3      	ldrh	r3, [r4, #12]
 80212d8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80212dc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80212e0:	d003      	beq.n	80212ea <__swsetup_r+0x7a>
 80212e2:	4621      	mov	r1, r4
 80212e4:	4628      	mov	r0, r5
 80212e6:	f000 f883 	bl	80213f0 <__smakebuf_r>
 80212ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80212ee:	f013 0201 	ands.w	r2, r3, #1
 80212f2:	d00a      	beq.n	802130a <__swsetup_r+0x9a>
 80212f4:	2200      	movs	r2, #0
 80212f6:	60a2      	str	r2, [r4, #8]
 80212f8:	6962      	ldr	r2, [r4, #20]
 80212fa:	4252      	negs	r2, r2
 80212fc:	61a2      	str	r2, [r4, #24]
 80212fe:	6922      	ldr	r2, [r4, #16]
 8021300:	b942      	cbnz	r2, 8021314 <__swsetup_r+0xa4>
 8021302:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8021306:	d1c5      	bne.n	8021294 <__swsetup_r+0x24>
 8021308:	bd38      	pop	{r3, r4, r5, pc}
 802130a:	0799      	lsls	r1, r3, #30
 802130c:	bf58      	it	pl
 802130e:	6962      	ldrpl	r2, [r4, #20]
 8021310:	60a2      	str	r2, [r4, #8]
 8021312:	e7f4      	b.n	80212fe <__swsetup_r+0x8e>
 8021314:	2000      	movs	r0, #0
 8021316:	e7f7      	b.n	8021308 <__swsetup_r+0x98>
 8021318:	2000010c 	.word	0x2000010c

0802131c <_raise_r>:
 802131c:	291f      	cmp	r1, #31
 802131e:	b538      	push	{r3, r4, r5, lr}
 8021320:	4605      	mov	r5, r0
 8021322:	460c      	mov	r4, r1
 8021324:	d904      	bls.n	8021330 <_raise_r+0x14>
 8021326:	2316      	movs	r3, #22
 8021328:	6003      	str	r3, [r0, #0]
 802132a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 802132e:	bd38      	pop	{r3, r4, r5, pc}
 8021330:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8021332:	b112      	cbz	r2, 802133a <_raise_r+0x1e>
 8021334:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8021338:	b94b      	cbnz	r3, 802134e <_raise_r+0x32>
 802133a:	4628      	mov	r0, r5
 802133c:	f000 f830 	bl	80213a0 <_getpid_r>
 8021340:	4622      	mov	r2, r4
 8021342:	4601      	mov	r1, r0
 8021344:	4628      	mov	r0, r5
 8021346:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 802134a:	f000 b817 	b.w	802137c <_kill_r>
 802134e:	2b01      	cmp	r3, #1
 8021350:	d00a      	beq.n	8021368 <_raise_r+0x4c>
 8021352:	1c59      	adds	r1, r3, #1
 8021354:	d103      	bne.n	802135e <_raise_r+0x42>
 8021356:	2316      	movs	r3, #22
 8021358:	6003      	str	r3, [r0, #0]
 802135a:	2001      	movs	r0, #1
 802135c:	e7e7      	b.n	802132e <_raise_r+0x12>
 802135e:	2100      	movs	r1, #0
 8021360:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8021364:	4620      	mov	r0, r4
 8021366:	4798      	blx	r3
 8021368:	2000      	movs	r0, #0
 802136a:	e7e0      	b.n	802132e <_raise_r+0x12>

0802136c <raise>:
 802136c:	4b02      	ldr	r3, [pc, #8]	@ (8021378 <raise+0xc>)
 802136e:	4601      	mov	r1, r0
 8021370:	6818      	ldr	r0, [r3, #0]
 8021372:	f7ff bfd3 	b.w	802131c <_raise_r>
 8021376:	bf00      	nop
 8021378:	2000010c 	.word	0x2000010c

0802137c <_kill_r>:
 802137c:	b538      	push	{r3, r4, r5, lr}
 802137e:	4d07      	ldr	r5, [pc, #28]	@ (802139c <_kill_r+0x20>)
 8021380:	2300      	movs	r3, #0
 8021382:	4604      	mov	r4, r0
 8021384:	4608      	mov	r0, r1
 8021386:	4611      	mov	r1, r2
 8021388:	602b      	str	r3, [r5, #0]
 802138a:	f7ea fca7 	bl	800bcdc <_kill>
 802138e:	1c43      	adds	r3, r0, #1
 8021390:	d102      	bne.n	8021398 <_kill_r+0x1c>
 8021392:	682b      	ldr	r3, [r5, #0]
 8021394:	b103      	cbz	r3, 8021398 <_kill_r+0x1c>
 8021396:	6023      	str	r3, [r4, #0]
 8021398:	bd38      	pop	{r3, r4, r5, pc}
 802139a:	bf00      	nop
 802139c:	2000613c 	.word	0x2000613c

080213a0 <_getpid_r>:
 80213a0:	f7ea bc94 	b.w	800bccc <_getpid>

080213a4 <__swhatbuf_r>:
 80213a4:	b570      	push	{r4, r5, r6, lr}
 80213a6:	460c      	mov	r4, r1
 80213a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80213ac:	2900      	cmp	r1, #0
 80213ae:	b096      	sub	sp, #88	@ 0x58
 80213b0:	4615      	mov	r5, r2
 80213b2:	461e      	mov	r6, r3
 80213b4:	da0d      	bge.n	80213d2 <__swhatbuf_r+0x2e>
 80213b6:	89a3      	ldrh	r3, [r4, #12]
 80213b8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80213bc:	f04f 0100 	mov.w	r1, #0
 80213c0:	bf14      	ite	ne
 80213c2:	2340      	movne	r3, #64	@ 0x40
 80213c4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80213c8:	2000      	movs	r0, #0
 80213ca:	6031      	str	r1, [r6, #0]
 80213cc:	602b      	str	r3, [r5, #0]
 80213ce:	b016      	add	sp, #88	@ 0x58
 80213d0:	bd70      	pop	{r4, r5, r6, pc}
 80213d2:	466a      	mov	r2, sp
 80213d4:	f000 f848 	bl	8021468 <_fstat_r>
 80213d8:	2800      	cmp	r0, #0
 80213da:	dbec      	blt.n	80213b6 <__swhatbuf_r+0x12>
 80213dc:	9901      	ldr	r1, [sp, #4]
 80213de:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80213e2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80213e6:	4259      	negs	r1, r3
 80213e8:	4159      	adcs	r1, r3
 80213ea:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80213ee:	e7eb      	b.n	80213c8 <__swhatbuf_r+0x24>

080213f0 <__smakebuf_r>:
 80213f0:	898b      	ldrh	r3, [r1, #12]
 80213f2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80213f4:	079d      	lsls	r5, r3, #30
 80213f6:	4606      	mov	r6, r0
 80213f8:	460c      	mov	r4, r1
 80213fa:	d507      	bpl.n	802140c <__smakebuf_r+0x1c>
 80213fc:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8021400:	6023      	str	r3, [r4, #0]
 8021402:	6123      	str	r3, [r4, #16]
 8021404:	2301      	movs	r3, #1
 8021406:	6163      	str	r3, [r4, #20]
 8021408:	b003      	add	sp, #12
 802140a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802140c:	ab01      	add	r3, sp, #4
 802140e:	466a      	mov	r2, sp
 8021410:	f7ff ffc8 	bl	80213a4 <__swhatbuf_r>
 8021414:	9f00      	ldr	r7, [sp, #0]
 8021416:	4605      	mov	r5, r0
 8021418:	4639      	mov	r1, r7
 802141a:	4630      	mov	r0, r6
 802141c:	f7fd fbe0 	bl	801ebe0 <_malloc_r>
 8021420:	b948      	cbnz	r0, 8021436 <__smakebuf_r+0x46>
 8021422:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8021426:	059a      	lsls	r2, r3, #22
 8021428:	d4ee      	bmi.n	8021408 <__smakebuf_r+0x18>
 802142a:	f023 0303 	bic.w	r3, r3, #3
 802142e:	f043 0302 	orr.w	r3, r3, #2
 8021432:	81a3      	strh	r3, [r4, #12]
 8021434:	e7e2      	b.n	80213fc <__smakebuf_r+0xc>
 8021436:	89a3      	ldrh	r3, [r4, #12]
 8021438:	6020      	str	r0, [r4, #0]
 802143a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 802143e:	81a3      	strh	r3, [r4, #12]
 8021440:	9b01      	ldr	r3, [sp, #4]
 8021442:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8021446:	b15b      	cbz	r3, 8021460 <__smakebuf_r+0x70>
 8021448:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 802144c:	4630      	mov	r0, r6
 802144e:	f000 f81d 	bl	802148c <_isatty_r>
 8021452:	b128      	cbz	r0, 8021460 <__smakebuf_r+0x70>
 8021454:	89a3      	ldrh	r3, [r4, #12]
 8021456:	f023 0303 	bic.w	r3, r3, #3
 802145a:	f043 0301 	orr.w	r3, r3, #1
 802145e:	81a3      	strh	r3, [r4, #12]
 8021460:	89a3      	ldrh	r3, [r4, #12]
 8021462:	431d      	orrs	r5, r3
 8021464:	81a5      	strh	r5, [r4, #12]
 8021466:	e7cf      	b.n	8021408 <__smakebuf_r+0x18>

08021468 <_fstat_r>:
 8021468:	b538      	push	{r3, r4, r5, lr}
 802146a:	4d07      	ldr	r5, [pc, #28]	@ (8021488 <_fstat_r+0x20>)
 802146c:	2300      	movs	r3, #0
 802146e:	4604      	mov	r4, r0
 8021470:	4608      	mov	r0, r1
 8021472:	4611      	mov	r1, r2
 8021474:	602b      	str	r3, [r5, #0]
 8021476:	f7ea fc91 	bl	800bd9c <_fstat>
 802147a:	1c43      	adds	r3, r0, #1
 802147c:	d102      	bne.n	8021484 <_fstat_r+0x1c>
 802147e:	682b      	ldr	r3, [r5, #0]
 8021480:	b103      	cbz	r3, 8021484 <_fstat_r+0x1c>
 8021482:	6023      	str	r3, [r4, #0]
 8021484:	bd38      	pop	{r3, r4, r5, pc}
 8021486:	bf00      	nop
 8021488:	2000613c 	.word	0x2000613c

0802148c <_isatty_r>:
 802148c:	b538      	push	{r3, r4, r5, lr}
 802148e:	4d06      	ldr	r5, [pc, #24]	@ (80214a8 <_isatty_r+0x1c>)
 8021490:	2300      	movs	r3, #0
 8021492:	4604      	mov	r4, r0
 8021494:	4608      	mov	r0, r1
 8021496:	602b      	str	r3, [r5, #0]
 8021498:	f7ea fc90 	bl	800bdbc <_isatty>
 802149c:	1c43      	adds	r3, r0, #1
 802149e:	d102      	bne.n	80214a6 <_isatty_r+0x1a>
 80214a0:	682b      	ldr	r3, [r5, #0]
 80214a2:	b103      	cbz	r3, 80214a6 <_isatty_r+0x1a>
 80214a4:	6023      	str	r3, [r4, #0]
 80214a6:	bd38      	pop	{r3, r4, r5, pc}
 80214a8:	2000613c 	.word	0x2000613c

080214ac <_init>:
 80214ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80214ae:	bf00      	nop
 80214b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80214b2:	bc08      	pop	{r3}
 80214b4:	469e      	mov	lr, r3
 80214b6:	4770      	bx	lr

080214b8 <_fini>:
 80214b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80214ba:	bf00      	nop
 80214bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80214be:	bc08      	pop	{r3}
 80214c0:	469e      	mov	lr, r3
 80214c2:	4770      	bx	lr
